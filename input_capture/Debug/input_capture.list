
input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008490  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008620  08008620  00018620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a2c  08008a2c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a34  08008a34  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a34  08008a34  00018a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a38  08008a38  00018a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000210  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ec  200003ec  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014413  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b4  00000000  00000000  0003461f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d8  00000000  00000000  00036cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f8  00000000  00000000  00037fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d14  00000000  00000000  000391a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016453  00000000  00000000  0005bebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2810  00000000  00000000  0007230f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144b1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061a8  00000000  00000000  00144b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008608 	.word	0x08008608

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008608 	.word	0x08008608

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define TIMCLOCK   84000000
#define PRESCALAR  84
int _write(int file, char* p, int len){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <_write+0x24>)
 8000ec2:	f004 faca 	bl	800545a <HAL_UART_Transmit>
	return len;
 8000ec6:	687b      	ldr	r3, [r7, #4]

}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000037c 	.word	0x2000037c

08000ed4 <HAL_TIM_IC_CaptureCallback>:

/* Measure Frequency */
float frequency = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7f1b      	ldrb	r3, [r3, #28]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d147      	bne.n	8000f74 <HAL_TIM_IC_CaptureCallback+0xa0>
	{
		if (Is_First_Captured==0)
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10a      	bne.n	8000f02 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000eec:	2100      	movs	r1, #0
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f003 fcde 	bl	80048b0 <HAL_TIM_ReadCapturedValue>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000ef8:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 8000f00:	e038      	b.n	8000f74 <HAL_TIM_IC_CaptureCallback+0xa0>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f02:	2100      	movs	r1, #0
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f003 fcd3 	bl	80048b0 <HAL_TIM_ReadCapturedValue>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000f0e:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d907      	bls.n	8000f2c <HAL_TIM_IC_CaptureCallback+0x58>
				Difference = IC_Val2-IC_Val1;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e00d      	b.n	8000f48 <HAL_TIM_IC_CaptureCallback+0x74>
			else if (IC_Val1 > IC_Val2)
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d907      	bls.n	8000f48 <HAL_TIM_IC_CaptureCallback+0x74>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	3b01      	subs	r3, #1
 8000f44:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000f46:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000f4a:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f58:	edd7 6a03 	vldr	s13, [r7, #12]
 8000f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000f62:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8000f6e:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200003cc 	.word	0x200003cc
 8000f80:	200003c0 	.word	0x200003c0
 8000f84:	200003c4 	.word	0x200003c4
 8000f88:	200003c8 	.word	0x200003c8
 8000f8c:	49742400 	.word	0x49742400
 8000f90:	200003d0 	.word	0x200003d0

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f000 fec6 	bl	8001d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f832 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f000 fa68 	bl	8001474 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fa4:	f000 f898 	bl	80010d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000fa8:	f000 f8c4 	bl	8001134 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000fac:	f000 f8f2 	bl	8001194 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000fb0:	f000 f926 	bl	8001200 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000fb4:	f000 fa34 	bl	8001420 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fb8:	f000 f9c2 	bl	8001340 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 30;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <main+0x5c>)
 8000fbe:	221e      	movs	r2, #30
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <main+0x60>)
 8000fc6:	f002 fefb 	bl	8003dc0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fca:	2100      	movs	r1, #0
 8000fcc:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <main+0x64>)
 8000fce:	f003 f819 	bl	8004004 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("The frequency is %.2f\n", frequency);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <main+0x68>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fab6 	bl	8000548 <__aeabi_f2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4807      	ldr	r0, [pc, #28]	; (8001000 <main+0x6c>)
 8000fe2:	f005 fa4b 	bl	800647c <iprintf>
	  HAL_Delay(1000);
 8000fe6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fea:	f000 ff0f 	bl	8001e0c <HAL_Delay>
  {
 8000fee:	e7f0      	b.n	8000fd2 <main+0x3e>
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	200002ec 	.word	0x200002ec
 8000ff8:	20000334 	.word	0x20000334
 8000ffc:	200003d0 	.word	0x200003d0
 8001000:	08008620 	.word	0x08008620

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2230      	movs	r2, #48	; 0x30
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f004 fdc0 	bl	8005b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <SystemClock_Config+0xcc>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <SystemClock_Config+0xcc>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <SystemClock_Config+0xcc>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <SystemClock_Config+0xd0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <SystemClock_Config+0xd0>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <SystemClock_Config+0xd0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001060:	2301      	movs	r3, #1
 8001062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001074:	2308      	movs	r3, #8
 8001076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001078:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001082:	2307      	movs	r3, #7
 8001084:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	4618      	mov	r0, r3
 800108c:	f001 ff8e 	bl	8002fac <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001096:	f000 fb09 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2302      	movs	r3, #2
 80010a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	2105      	movs	r1, #5
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 f9ef 	bl	800349c <HAL_RCC_ClockConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010c4:	f000 faf2 	bl	80016ac <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3750      	adds	r7, #80	; 0x50
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_I2C1_Init+0x50>)
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <MX_I2C1_Init+0x54>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_I2C1_Init+0x50>)
 80010e4:	4a12      	ldr	r2, [pc, #72]	; (8001130 <MX_I2C1_Init+0x58>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_I2C1_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_I2C1_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_I2C1_Init+0x50>)
 80010f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_I2C1_Init+0x50>)
 8001116:	f001 f965 	bl	80023e4 <HAL_I2C_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001120:	f000 fac4 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200001f8 	.word	0x200001f8
 800112c:	40005400 	.word	0x40005400
 8001130:	000186a0 	.word	0x000186a0

08001134 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <MX_I2S3_Init+0x54>)
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <MX_I2S3_Init+0x58>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_I2S3_Init+0x54>)
 8001140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001144:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_I2S3_Init+0x54>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_I2S3_Init+0x54>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <MX_I2S3_Init+0x54>)
 8001154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001158:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_I2S3_Init+0x54>)
 800115c:	4a0c      	ldr	r2, [pc, #48]	; (8001190 <MX_I2S3_Init+0x5c>)
 800115e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_I2S3_Init+0x54>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_I2S3_Init+0x54>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_I2S3_Init+0x54>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_I2S3_Init+0x54>)
 8001174:	f001 fa7a 	bl	800266c <HAL_I2S_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800117e:	f000 fa95 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000024c 	.word	0x2000024c
 800118c:	40003c00 	.word	0x40003c00
 8001190:	00017700 	.word	0x00017700

08001194 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_SPI1_Init+0x64>)
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <MX_SPI1_Init+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011e0:	220a      	movs	r2, #10
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011e6:	f002 fcb9 	bl	8003b5c <HAL_SPI_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f0:	f000 fa5c 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000294 	.word	0x20000294
 80011fc:	40013000 	.word	0x40013000

08001200 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b096      	sub	sp, #88	; 0x58
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2220      	movs	r2, #32
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fcad 	bl	8005b98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <MX_TIM1_Init+0x138>)
 8001240:	4a3e      	ldr	r2, [pc, #248]	; (800133c <MX_TIM1_Init+0x13c>)
 8001242:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001244:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <MX_TIM1_Init+0x138>)
 8001246:	22a7      	movs	r2, #167	; 0xa7
 8001248:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <MX_TIM1_Init+0x138>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001250:	4b39      	ldr	r3, [pc, #228]	; (8001338 <MX_TIM1_Init+0x138>)
 8001252:	2263      	movs	r2, #99	; 0x63
 8001254:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b38      	ldr	r3, [pc, #224]	; (8001338 <MX_TIM1_Init+0x138>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <MX_TIM1_Init+0x138>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b35      	ldr	r3, [pc, #212]	; (8001338 <MX_TIM1_Init+0x138>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001268:	4833      	ldr	r0, [pc, #204]	; (8001338 <MX_TIM1_Init+0x138>)
 800126a:	f002 fd00 	bl	8003c6e <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001274:	f000 fa1a 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001282:	4619      	mov	r1, r3
 8001284:	482c      	ldr	r0, [pc, #176]	; (8001338 <MX_TIM1_Init+0x138>)
 8001286:	f003 fa4b 	bl	8004720 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001290:	f000 fa0c 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001294:	4828      	ldr	r0, [pc, #160]	; (8001338 <MX_TIM1_Init+0x138>)
 8001296:	f002 fd39 	bl	8003d0c <HAL_TIM_PWM_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012a0:	f000 fa04 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012b0:	4619      	mov	r1, r3
 80012b2:	4821      	ldr	r0, [pc, #132]	; (8001338 <MX_TIM1_Init+0x138>)
 80012b4:	f003 ffa2 	bl	80051fc <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80012be:	f000 f9f5 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	2360      	movs	r3, #96	; 0x60
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	2200      	movs	r2, #0
 80012e4:	4619      	mov	r1, r3
 80012e6:	4814      	ldr	r0, [pc, #80]	; (8001338 <MX_TIM1_Init+0x138>)
 80012e8:	f003 f958 	bl	800459c <HAL_TIM_PWM_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80012f2:	f000 f9db 	bl	80016ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800130a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	4619      	mov	r1, r3
 8001318:	4807      	ldr	r0, [pc, #28]	; (8001338 <MX_TIM1_Init+0x138>)
 800131a:	f003 ffeb 	bl	80052f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001324:	f000 f9c2 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <MX_TIM1_Init+0x138>)
 800132a:	f000 fb61 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 800132e:	bf00      	nop
 8001330:	3758      	adds	r7, #88	; 0x58
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200002ec 	.word	0x200002ec
 800133c:	40010000 	.word	0x40010000

08001340 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800136a:	4b2c      	ldr	r3, [pc, #176]	; (800141c <MX_TIM2_Init+0xdc>)
 800136c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001370:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_TIM2_Init+0xdc>)
 8001374:	2253      	movs	r2, #83	; 0x53
 8001376:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <MX_TIM2_Init+0xdc>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <MX_TIM2_Init+0xdc>)
 8001380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001384:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <MX_TIM2_Init+0xdc>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <MX_TIM2_Init+0xdc>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001392:	4822      	ldr	r0, [pc, #136]	; (800141c <MX_TIM2_Init+0xdc>)
 8001394:	f002 fc6b 	bl	8003c6e <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800139e:	f000 f985 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	4619      	mov	r1, r3
 80013ae:	481b      	ldr	r0, [pc, #108]	; (800141c <MX_TIM2_Init+0xdc>)
 80013b0:	f003 f9b6 	bl	8004720 <HAL_TIM_ConfigClockSource>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013ba:	f000 f977 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013be:	4817      	ldr	r0, [pc, #92]	; (800141c <MX_TIM2_Init+0xdc>)
 80013c0:	f002 fdc6 	bl	8003f50 <HAL_TIM_IC_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013ca:	f000 f96f 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	480f      	ldr	r0, [pc, #60]	; (800141c <MX_TIM2_Init+0xdc>)
 80013de:	f003 ff0d 	bl	80051fc <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80013e8:	f000 f960 	bl	80016ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ec:	2300      	movs	r3, #0
 80013ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013f0:	2301      	movs	r3, #1
 80013f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <MX_TIM2_Init+0xdc>)
 8001404:	f003 f82e 	bl	8004464 <HAL_TIM_IC_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800140e:	f000 f94d 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	; 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000334 	.word	0x20000334

08001420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_USART2_UART_Init+0x50>)
 8001428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001458:	f003 ffb2 	bl	80053c0 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001462:	f000 f923 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000037c 	.word	0x2000037c
 8001470:	40004400 	.word	0x40004400

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	; 0x30
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	4b81      	ldr	r3, [pc, #516]	; (8001694 <MX_GPIO_Init+0x220>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a80      	ldr	r2, [pc, #512]	; (8001694 <MX_GPIO_Init+0x220>)
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b7e      	ldr	r3, [pc, #504]	; (8001694 <MX_GPIO_Init+0x220>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	4b7a      	ldr	r3, [pc, #488]	; (8001694 <MX_GPIO_Init+0x220>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a79      	ldr	r2, [pc, #484]	; (8001694 <MX_GPIO_Init+0x220>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b77      	ldr	r3, [pc, #476]	; (8001694 <MX_GPIO_Init+0x220>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b73      	ldr	r3, [pc, #460]	; (8001694 <MX_GPIO_Init+0x220>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a72      	ldr	r2, [pc, #456]	; (8001694 <MX_GPIO_Init+0x220>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b70      	ldr	r3, [pc, #448]	; (8001694 <MX_GPIO_Init+0x220>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b6c      	ldr	r3, [pc, #432]	; (8001694 <MX_GPIO_Init+0x220>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a6b      	ldr	r2, [pc, #428]	; (8001694 <MX_GPIO_Init+0x220>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b69      	ldr	r3, [pc, #420]	; (8001694 <MX_GPIO_Init+0x220>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b65      	ldr	r3, [pc, #404]	; (8001694 <MX_GPIO_Init+0x220>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a64      	ldr	r2, [pc, #400]	; (8001694 <MX_GPIO_Init+0x220>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b62      	ldr	r3, [pc, #392]	; (8001694 <MX_GPIO_Init+0x220>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b5e      	ldr	r3, [pc, #376]	; (8001694 <MX_GPIO_Init+0x220>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a5d      	ldr	r2, [pc, #372]	; (8001694 <MX_GPIO_Init+0x220>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b5b      	ldr	r3, [pc, #364]	; (8001694 <MX_GPIO_Init+0x220>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	2108      	movs	r1, #8
 8001536:	4858      	ldr	r0, [pc, #352]	; (8001698 <MX_GPIO_Init+0x224>)
 8001538:	f000 ff3a 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	2101      	movs	r1, #1
 8001540:	4856      	ldr	r0, [pc, #344]	; (800169c <MX_GPIO_Init+0x228>)
 8001542:	f000 ff35 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001546:	2200      	movs	r2, #0
 8001548:	f24f 0110 	movw	r1, #61456	; 0xf010
 800154c:	4854      	ldr	r0, [pc, #336]	; (80016a0 <MX_GPIO_Init+0x22c>)
 800154e:	f000 ff2f 	bl	80023b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001552:	2308      	movs	r3, #8
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	484b      	ldr	r0, [pc, #300]	; (8001698 <MX_GPIO_Init+0x224>)
 800156a:	f000 fd85 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800156e:	2301      	movs	r3, #1
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4845      	ldr	r0, [pc, #276]	; (800169c <MX_GPIO_Init+0x228>)
 8001586:	f000 fd77 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800158a:	2308      	movs	r3, #8
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800159a:	2305      	movs	r3, #5
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	483d      	ldr	r0, [pc, #244]	; (800169c <MX_GPIO_Init+0x228>)
 80015a6:	f000 fd67 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015aa:	2301      	movs	r3, #1
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4839      	ldr	r0, [pc, #228]	; (80016a4 <MX_GPIO_Init+0x230>)
 80015c0:	f000 fd5a 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015c4:	2304      	movs	r3, #4
 80015c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	4834      	ldr	r0, [pc, #208]	; (80016a8 <MX_GPIO_Init+0x234>)
 80015d8:	f000 fd4e 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ee:	2305      	movs	r3, #5
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	482b      	ldr	r0, [pc, #172]	; (80016a8 <MX_GPIO_Init+0x234>)
 80015fa:	f000 fd3d 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015fe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001602:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	4822      	ldr	r0, [pc, #136]	; (80016a0 <MX_GPIO_Init+0x22c>)
 8001618:	f000 fd2e 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800161c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	481c      	ldr	r0, [pc, #112]	; (80016a4 <MX_GPIO_Init+0x230>)
 8001632:	f000 fd21 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001636:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001648:	230a      	movs	r3, #10
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <MX_GPIO_Init+0x230>)
 8001654:	f000 fd10 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001658:	2320      	movs	r3, #32
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_GPIO_Init+0x22c>)
 800166c:	f000 fd04 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001670:	2302      	movs	r3, #2
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001674:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <MX_GPIO_Init+0x224>)
 8001686:	f000 fcf7 	bl	8002078 <HAL_GPIO_Init>

}
 800168a:	bf00      	nop
 800168c:	3730      	adds	r7, #48	; 0x30
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40021000 	.word	0x40021000
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020400 	.word	0x40020400

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <HAL_MspInit+0x4c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_MspInit+0x4c>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016f6:	2007      	movs	r0, #7
 80016f8:	f000 fc7c 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a19      	ldr	r2, [pc, #100]	; (800178c <HAL_I2C_MspInit+0x84>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12c      	bne.n	8001784 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_I2C_MspInit+0x88>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_I2C_MspInit+0x88>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_I2C_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001746:	f44f 7310 	mov.w	r3, #576	; 0x240
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174c:	2312      	movs	r3, #18
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001750:	2301      	movs	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001758:	2304      	movs	r3, #4
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	480c      	ldr	r0, [pc, #48]	; (8001794 <HAL_I2C_MspInit+0x8c>)
 8001764:	f000 fc88 	bl	8002078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_I2C_MspInit+0x88>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_I2C_MspInit+0x88>)
 8001772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001776:	6413      	str	r3, [r2, #64]	; 0x40
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_I2C_MspInit+0x88>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40005400 	.word	0x40005400
 8001790:	40023800 	.word	0x40023800
 8001794:	40020400 	.word	0x40020400

08001798 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	; 0x38
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a31      	ldr	r2, [pc, #196]	; (8001888 <HAL_I2S_MspInit+0xf0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d15a      	bne.n	800187e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017c8:	2301      	movs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80017cc:	23c0      	movs	r3, #192	; 0xc0
 80017ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 f87f 	bl	80038dc <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80017e4:	f7ff ff62 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	4b27      	ldr	r3, [pc, #156]	; (800188c <HAL_I2S_MspInit+0xf4>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	4a26      	ldr	r2, [pc, #152]	; (800188c <HAL_I2S_MspInit+0xf4>)
 80017f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f6:	6413      	str	r3, [r2, #64]	; 0x40
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_I2S_MspInit+0xf4>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_I2S_MspInit+0xf4>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	4a1f      	ldr	r2, [pc, #124]	; (800188c <HAL_I2S_MspInit+0xf4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6313      	str	r3, [r2, #48]	; 0x30
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_I2S_MspInit+0xf4>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_I2S_MspInit+0xf4>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	4a18      	ldr	r2, [pc, #96]	; (800188c <HAL_I2S_MspInit+0xf4>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	6313      	str	r3, [r2, #48]	; 0x30
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_I2S_MspInit+0xf4>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800183c:	2310      	movs	r3, #16
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800184c:	2306      	movs	r3, #6
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	480e      	ldr	r0, [pc, #56]	; (8001890 <HAL_I2S_MspInit+0xf8>)
 8001858:	f000 fc0e 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800185c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800186e:	2306      	movs	r3, #6
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	4806      	ldr	r0, [pc, #24]	; (8001894 <HAL_I2S_MspInit+0xfc>)
 800187a:	f000 fbfd 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3738      	adds	r7, #56	; 0x38
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40003c00 	.word	0x40003c00
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000
 8001894:	40020800 	.word	0x40020800

08001898 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	; (800191c <HAL_SPI_MspInit+0x84>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d12b      	bne.n	8001912 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_SPI_MspInit+0x88>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a17      	ldr	r2, [pc, #92]	; (8001920 <HAL_SPI_MspInit+0x88>)
 80018c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_SPI_MspInit+0x88>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_SPI_MspInit+0x88>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_SPI_MspInit+0x88>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_SPI_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018f2:	23e0      	movs	r3, #224	; 0xe0
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001902:	2305      	movs	r3, #5
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <HAL_SPI_MspInit+0x8c>)
 800190e:	f000 fbb3 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40013000 	.word	0x40013000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_TIM_Base_MspInit+0xbc>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10e      	bne.n	8001968 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_TIM_Base_MspInit+0xc0>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <HAL_TIM_Base_MspInit+0xc0>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <HAL_TIM_Base_MspInit+0xc0>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001966:	e039      	b.n	80019dc <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001970:	d134      	bne.n	80019dc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_TIM_Base_MspInit+0xc0>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a1b      	ldr	r2, [pc, #108]	; (80019e8 <HAL_TIM_Base_MspInit+0xc0>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_TIM_Base_MspInit+0xc0>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_TIM_Base_MspInit+0xc0>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <HAL_TIM_Base_MspInit+0xc0>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_TIM_Base_MspInit+0xc0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019bc:	2301      	movs	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4809      	ldr	r0, [pc, #36]	; (80019ec <HAL_TIM_Base_MspInit+0xc4>)
 80019c8:	f000 fb56 	bl	8002078 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	201c      	movs	r0, #28
 80019d2:	f000 fb1a 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019d6:	201c      	movs	r0, #28
 80019d8:	f000 fb33 	bl	8002042 <HAL_NVIC_EnableIRQ>
}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	; 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40010000 	.word	0x40010000
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020000 	.word	0x40020000

080019f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_TIM_MspPostInit+0x68>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d11e      	bne.n	8001a50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_TIM_MspPostInit+0x6c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a10      	ldr	r2, [pc, #64]	; (8001a5c <HAL_TIM_MspPostInit+0x6c>)
 8001a1c:	f043 0310 	orr.w	r3, r3, #16
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_TIM_MspPostInit+0x6c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a40:	2301      	movs	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <HAL_TIM_MspPostInit+0x70>)
 8001a4c:	f000 fb14 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_UART_MspInit+0x84>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12b      	bne.n	8001ade <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001abe:	230c      	movs	r3, #12
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_UART_MspInit+0x8c>)
 8001ada:	f000 facd 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40004400 	.word	0x40004400
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f944 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM2_IRQHandler+0x10>)
 8001b4e:	f002 fb81 	bl	8004254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000334 	.word	0x20000334

08001b5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return 1;
 8001b60:	2301      	movs	r3, #1
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_kill>:

int _kill(int pid, int sig)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b76:	f003 ffe5 	bl	8005b44 <__errno>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2216      	movs	r2, #22
 8001b7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_exit>:

void _exit (int status)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ffe7 	bl	8001b6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b9e:	e7fe      	b.n	8001b9e <_exit+0x12>

08001ba0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e00a      	b.n	8001bc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb2:	f3af 8000 	nop.w
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	60ba      	str	r2, [r7, #8]
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dbf0      	blt.n	8001bb2 <_read+0x12>
  }

  return len;
 8001bd0:	687b      	ldr	r3, [r7, #4]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c02:	605a      	str	r2, [r3, #4]
  return 0;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <_isatty>:

int _isatty(int file)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <_sbrk+0x5c>)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <_sbrk+0x60>)
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <_sbrk+0x64>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <_sbrk+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c74:	f003 ff66 	bl	8005b44 <__errno>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c82:	e009      	b.n	8001c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <_sbrk+0x64>)
 8001c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20020000 	.word	0x20020000
 8001ca4:	00000400 	.word	0x00000400
 8001ca8:	200003d4 	.word	0x200003d4
 8001cac:	200003f0 	.word	0x200003f0

08001cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <SystemInit+0x20>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <SystemInit+0x20>)
 8001cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cda:	490e      	ldr	r1, [pc, #56]	; (8001d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce0:	e002      	b.n	8001ce8 <LoopCopyDataInit>

08001ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce6:	3304      	adds	r3, #4

08001ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cec:	d3f9      	bcc.n	8001ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cf0:	4c0b      	ldr	r4, [pc, #44]	; (8001d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf4:	e001      	b.n	8001cfa <LoopFillZerobss>

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf8:	3204      	adds	r2, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cfe:	f7ff ffd7 	bl	8001cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d02:	f003 ff25 	bl	8005b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d06:	f7ff f945 	bl	8000f94 <main>
  bx  lr    
 8001d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d18:	08008a3c 	.word	0x08008a3c
  ldr r2, =_sbss
 8001d1c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d20:	200003ec 	.word	0x200003ec

08001d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC_IRQHandler>
	...

08001d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <HAL_Init+0x40>)
 8001d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_Init+0x40>)
 8001d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <HAL_Init+0x40>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f000 f94f 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f000 f808 	bl	8001d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d5c:	f7ff fcac 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_InitTick+0x54>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_InitTick+0x58>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f967 	bl	800205e <HAL_SYSTICK_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00e      	b.n	8001db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b0f      	cmp	r3, #15
 8001d9e:	d80a      	bhi.n	8001db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da0:	2200      	movs	r2, #0
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da8:	f000 f92f 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dac:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <HAL_InitTick+0x5c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008
 8001df0:	200003d8 	.word	0x200003d8

08001df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	200003d8 	.word	0x200003d8

08001e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff ffee 	bl	8001df4 <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_Delay+0x44>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e32:	bf00      	nop
 8001e34:	f7ff ffde 	bl	8001df4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000008 	.word	0x20000008

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff29 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff3e 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff31 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa2 	bl	8001fb0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e16b      	b.n	800236c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 815a 	bne.w	8002366 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d005      	beq.n	80020ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d130      	bne.n	800212c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 0201 	and.w	r2, r3, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b03      	cmp	r3, #3
 8002136:	d017      	beq.n	8002168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d123      	bne.n	80021bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	08da      	lsrs	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80b4 	beq.w	8002366 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b60      	ldr	r3, [pc, #384]	; (8002384 <HAL_GPIO_Init+0x30c>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a5f      	ldr	r2, [pc, #380]	; (8002384 <HAL_GPIO_Init+0x30c>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b5d      	ldr	r3, [pc, #372]	; (8002384 <HAL_GPIO_Init+0x30c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221a:	4a5b      	ldr	r2, [pc, #364]	; (8002388 <HAL_GPIO_Init+0x310>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_GPIO_Init+0x314>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d02b      	beq.n	800229e <HAL_GPIO_Init+0x226>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a51      	ldr	r2, [pc, #324]	; (8002390 <HAL_GPIO_Init+0x318>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d025      	beq.n	800229a <HAL_GPIO_Init+0x222>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a50      	ldr	r2, [pc, #320]	; (8002394 <HAL_GPIO_Init+0x31c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01f      	beq.n	8002296 <HAL_GPIO_Init+0x21e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4f      	ldr	r2, [pc, #316]	; (8002398 <HAL_GPIO_Init+0x320>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d019      	beq.n	8002292 <HAL_GPIO_Init+0x21a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4e      	ldr	r2, [pc, #312]	; (800239c <HAL_GPIO_Init+0x324>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_GPIO_Init+0x216>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4d      	ldr	r2, [pc, #308]	; (80023a0 <HAL_GPIO_Init+0x328>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00d      	beq.n	800228a <HAL_GPIO_Init+0x212>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4c      	ldr	r2, [pc, #304]	; (80023a4 <HAL_GPIO_Init+0x32c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <HAL_GPIO_Init+0x20e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <HAL_GPIO_Init+0x330>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d101      	bne.n	8002282 <HAL_GPIO_Init+0x20a>
 800227e:	2307      	movs	r3, #7
 8002280:	e00e      	b.n	80022a0 <HAL_GPIO_Init+0x228>
 8002282:	2308      	movs	r3, #8
 8002284:	e00c      	b.n	80022a0 <HAL_GPIO_Init+0x228>
 8002286:	2306      	movs	r3, #6
 8002288:	e00a      	b.n	80022a0 <HAL_GPIO_Init+0x228>
 800228a:	2305      	movs	r3, #5
 800228c:	e008      	b.n	80022a0 <HAL_GPIO_Init+0x228>
 800228e:	2304      	movs	r3, #4
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x228>
 8002292:	2303      	movs	r3, #3
 8002294:	e004      	b.n	80022a0 <HAL_GPIO_Init+0x228>
 8002296:	2302      	movs	r3, #2
 8002298:	e002      	b.n	80022a0 <HAL_GPIO_Init+0x228>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_GPIO_Init+0x228>
 800229e:	2300      	movs	r3, #0
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	f002 0203 	and.w	r2, r2, #3
 80022a6:	0092      	lsls	r2, r2, #2
 80022a8:	4093      	lsls	r3, r2
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b0:	4935      	ldr	r1, [pc, #212]	; (8002388 <HAL_GPIO_Init+0x310>)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_GPIO_Init+0x334>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e2:	4a32      	ldr	r2, [pc, #200]	; (80023ac <HAL_GPIO_Init+0x334>)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_GPIO_Init+0x334>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800230c:	4a27      	ldr	r2, [pc, #156]	; (80023ac <HAL_GPIO_Init+0x334>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_GPIO_Init+0x334>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002336:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <HAL_GPIO_Init+0x334>)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_GPIO_Init+0x334>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002360:	4a12      	ldr	r2, [pc, #72]	; (80023ac <HAL_GPIO_Init+0x334>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3301      	adds	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2b0f      	cmp	r3, #15
 8002370:	f67f ae90 	bls.w	8002094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	40013800 	.word	0x40013800
 800238c:	40020000 	.word	0x40020000
 8002390:	40020400 	.word	0x40020400
 8002394:	40020800 	.word	0x40020800
 8002398:	40020c00 	.word	0x40020c00
 800239c:	40021000 	.word	0x40021000
 80023a0:	40021400 	.word	0x40021400
 80023a4:	40021800 	.word	0x40021800
 80023a8:	40021c00 	.word	0x40021c00
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023cc:	e003      	b.n	80023d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	041a      	lsls	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e12b      	b.n	800264e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff f97c 	bl	8001708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2224      	movs	r2, #36	; 0x24
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002448:	f001 fa20 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 800244c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a81      	ldr	r2, [pc, #516]	; (8002658 <HAL_I2C_Init+0x274>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d807      	bhi.n	8002468 <HAL_I2C_Init+0x84>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a80      	ldr	r2, [pc, #512]	; (800265c <HAL_I2C_Init+0x278>)
 800245c:	4293      	cmp	r3, r2
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e006      	b.n	8002476 <HAL_I2C_Init+0x92>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a7d      	ldr	r2, [pc, #500]	; (8002660 <HAL_I2C_Init+0x27c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0e7      	b.n	800264e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a78      	ldr	r2, [pc, #480]	; (8002664 <HAL_I2C_Init+0x280>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9b      	lsrs	r3, r3, #18
 8002488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a6a      	ldr	r2, [pc, #424]	; (8002658 <HAL_I2C_Init+0x274>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d802      	bhi.n	80024b8 <HAL_I2C_Init+0xd4>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3301      	adds	r3, #1
 80024b6:	e009      	b.n	80024cc <HAL_I2C_Init+0xe8>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	4a69      	ldr	r2, [pc, #420]	; (8002668 <HAL_I2C_Init+0x284>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	3301      	adds	r3, #1
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	495c      	ldr	r1, [pc, #368]	; (8002658 <HAL_I2C_Init+0x274>)
 80024e8:	428b      	cmp	r3, r1
 80024ea:	d819      	bhi.n	8002520 <HAL_I2C_Init+0x13c>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e59      	subs	r1, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fa:	1c59      	adds	r1, r3, #1
 80024fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002500:	400b      	ands	r3, r1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_I2C_Init+0x138>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1e59      	subs	r1, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fbb1 f3f3 	udiv	r3, r1, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251a:	e051      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 800251c:	2304      	movs	r3, #4
 800251e:	e04f      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d111      	bne.n	800254c <HAL_I2C_Init+0x168>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1e58      	subs	r0, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	440b      	add	r3, r1
 8002536:	fbb0 f3f3 	udiv	r3, r0, r3
 800253a:	3301      	adds	r3, #1
 800253c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	e012      	b.n	8002572 <HAL_I2C_Init+0x18e>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1e58      	subs	r0, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	0099      	lsls	r1, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_Init+0x196>
 8002576:	2301      	movs	r3, #1
 8002578:	e022      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10e      	bne.n	80025a0 <HAL_I2C_Init+0x1bc>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1e58      	subs	r0, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	440b      	add	r3, r1
 8002590:	fbb0 f3f3 	udiv	r3, r0, r3
 8002594:	3301      	adds	r3, #1
 8002596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259e:	e00f      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e58      	subs	r0, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	0099      	lsls	r1, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	6809      	ldr	r1, [r1, #0]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6911      	ldr	r1, [r2, #16]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68d2      	ldr	r2, [r2, #12]
 80025fa:	4311      	orrs	r1, r2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	430b      	orrs	r3, r1
 8002602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	000186a0 	.word	0x000186a0
 800265c:	001e847f 	.word	0x001e847f
 8002660:	003d08ff 	.word	0x003d08ff
 8002664:	431bde83 	.word	0x431bde83
 8002668:	10624dd3 	.word	0x10624dd3

0800266c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e128      	b.n	80028d0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a90      	ldr	r2, [pc, #576]	; (80028d8 <HAL_I2S_Init+0x26c>)
 8002696:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff f87d 	bl	8001798 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80026b4:	f023 030f 	bic.w	r3, r3, #15
 80026b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2202      	movs	r2, #2
 80026c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d060      	beq.n	800278c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80026d2:	2310      	movs	r3, #16
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e001      	b.n	80026dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d802      	bhi.n	80026ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80026ea:	2001      	movs	r0, #1
 80026ec:	f001 f9d8 	bl	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq>
 80026f0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026fa:	d125      	bne.n	8002748 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d010      	beq.n	8002726 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	fbb2 f2f3 	udiv	r2, r2, r3
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	461a      	mov	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	3305      	adds	r3, #5
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	e01f      	b.n	8002766 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	461a      	mov	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	3305      	adds	r3, #5
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	e00e      	b.n	8002766 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	461a      	mov	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	3305      	adds	r3, #5
 8002764:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4a5c      	ldr	r2, [pc, #368]	; (80028dc <HAL_I2S_Init+0x270>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	08db      	lsrs	r3, r3, #3
 8002770:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	e003      	b.n	8002794 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800278c:	2302      	movs	r3, #2
 800278e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d902      	bls.n	80027a0 <HAL_I2S_Init+0x134>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	2bff      	cmp	r3, #255	; 0xff
 800279e:	d907      	bls.n	80027b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f043 0210 	orr.w	r2, r3, #16
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e08f      	b.n	80028d0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	ea42 0103 	orr.w	r1, r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027ce:	f023 030f 	bic.w	r3, r3, #15
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6851      	ldr	r1, [r2, #4]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6892      	ldr	r2, [r2, #8]
 80027da:	4311      	orrs	r1, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	68d2      	ldr	r2, [r2, #12]
 80027e0:	4311      	orrs	r1, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6992      	ldr	r2, [r2, #24]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d161      	bne.n	80028c0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a38      	ldr	r2, [pc, #224]	; (80028e0 <HAL_I2S_Init+0x274>)
 8002800:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a37      	ldr	r2, [pc, #220]	; (80028e4 <HAL_I2S_Init+0x278>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d101      	bne.n	8002810 <HAL_I2S_Init+0x1a4>
 800280c:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <HAL_I2S_Init+0x27c>)
 800280e:	e001      	b.n	8002814 <HAL_I2S_Init+0x1a8>
 8002810:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	4932      	ldr	r1, [pc, #200]	; (80028e4 <HAL_I2S_Init+0x278>)
 800281c:	428a      	cmp	r2, r1
 800281e:	d101      	bne.n	8002824 <HAL_I2S_Init+0x1b8>
 8002820:	4a31      	ldr	r2, [pc, #196]	; (80028e8 <HAL_I2S_Init+0x27c>)
 8002822:	e001      	b.n	8002828 <HAL_I2S_Init+0x1bc>
 8002824:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002828:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800282c:	f023 030f 	bic.w	r3, r3, #15
 8002830:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2b      	ldr	r2, [pc, #172]	; (80028e4 <HAL_I2S_Init+0x278>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_I2S_Init+0x1d4>
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <HAL_I2S_Init+0x27c>)
 800283e:	e001      	b.n	8002844 <HAL_I2S_Init+0x1d8>
 8002840:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002844:	2202      	movs	r2, #2
 8002846:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a25      	ldr	r2, [pc, #148]	; (80028e4 <HAL_I2S_Init+0x278>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_I2S_Init+0x1ea>
 8002852:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <HAL_I2S_Init+0x27c>)
 8002854:	e001      	b.n	800285a <HAL_I2S_Init+0x1ee>
 8002856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002866:	d003      	beq.n	8002870 <HAL_I2S_Init+0x204>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d103      	bne.n	8002878 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	e001      	b.n	800287c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002886:	4313      	orrs	r3, r2
 8002888:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002890:	4313      	orrs	r3, r2
 8002892:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800289a:	4313      	orrs	r3, r2
 800289c:	b29a      	uxth	r2, r3
 800289e:	897b      	ldrh	r3, [r7, #10]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <HAL_I2S_Init+0x278>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_I2S_Init+0x24c>
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_I2S_Init+0x27c>)
 80028b6:	e001      	b.n	80028bc <HAL_I2S_Init+0x250>
 80028b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028bc:	897a      	ldrh	r2, [r7, #10]
 80028be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	080029e3 	.word	0x080029e3
 80028dc:	cccccccd 	.word	0xcccccccd
 80028e0:	08002af9 	.word	0x08002af9
 80028e4:	40003800 	.word	0x40003800
 80028e8:	40003400 	.word	0x40003400

080028ec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c9a      	adds	r2, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10e      	bne.n	800297c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800296c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffb8 	bl	80028ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	b292      	uxth	r2, r2
 8002998:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	1c9a      	adds	r2, r3, #2
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10e      	bne.n	80029da <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029ca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff93 	bl	8002900 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d13a      	bne.n	8002a74 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d109      	bne.n	8002a1c <I2S_IRQHandler+0x3a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	d102      	bne.n	8002a1c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffb4 	bl	8002984 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	2b40      	cmp	r3, #64	; 0x40
 8002a24:	d126      	bne.n	8002a74 <I2S_IRQHandler+0x92>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d11f      	bne.n	8002a74 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f043 0202 	orr.w	r2, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ff50 	bl	8002914 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d136      	bne.n	8002aee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d109      	bne.n	8002a9e <I2S_IRQHandler+0xbc>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a94:	2b80      	cmp	r3, #128	; 0x80
 8002a96:	d102      	bne.n	8002a9e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff45 	bl	8002928 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d122      	bne.n	8002aee <I2S_IRQHandler+0x10c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d11b      	bne.n	8002aee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ac4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	f043 0204 	orr.w	r2, r3, #4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff13 	bl	8002914 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002aee:	bf00      	nop
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a92      	ldr	r2, [pc, #584]	; (8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b12:	4b92      	ldr	r3, [pc, #584]	; (8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b14:	e001      	b.n	8002b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a8b      	ldr	r2, [pc, #556]	; (8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d101      	bne.n	8002b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b30:	4b8a      	ldr	r3, [pc, #552]	; (8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b32:	e001      	b.n	8002b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b44:	d004      	beq.n	8002b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f040 8099 	bne.w	8002c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d107      	bne.n	8002b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f925 	bl	8002db4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d107      	bne.n	8002b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f9c8 	bl	8002f14 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d13a      	bne.n	8002c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d035      	beq.n	8002c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6e      	ldr	r2, [pc, #440]	; (8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002ba2:	4b6e      	ldr	r3, [pc, #440]	; (8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ba4:	e001      	b.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4969      	ldr	r1, [pc, #420]	; (8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bb2:	428b      	cmp	r3, r1
 8002bb4:	d101      	bne.n	8002bba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002bb6:	4b69      	ldr	r3, [pc, #420]	; (8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bb8:	e001      	b.n	8002bbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f043 0202 	orr.w	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fe88 	bl	8002914 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	f040 80c3 	bne.w	8002d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80bd 	beq.w	8002d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a49      	ldr	r2, [pc, #292]	; (8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002c36:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c38:	e001      	b.n	8002c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4944      	ldr	r1, [pc, #272]	; (8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c46:	428b      	cmp	r3, r1
 8002c48:	d101      	bne.n	8002c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002c4a:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c4c:	e001      	b.n	8002c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f043 0204 	orr.w	r2, r3, #4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff fe4a 	bl	8002914 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c80:	e089      	b.n	8002d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d107      	bne.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f8be 	bl	8002e18 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f8fd 	bl	8002eb0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d12f      	bne.n	8002d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d02a      	beq.n	8002d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cd8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1e      	ldr	r2, [pc, #120]	; (8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d101      	bne.n	8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ce6:	e001      	b.n	8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002ce8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4919      	ldr	r1, [pc, #100]	; (8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cf4:	428b      	cmp	r3, r1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002cf8:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cfa:	e001      	b.n	8002d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002cfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f043 0202 	orr.w	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fdfa 	bl	8002914 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d136      	bne.n	8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d031      	beq.n	8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d40:	e001      	b.n	8002d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002d42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4902      	ldr	r1, [pc, #8]	; (8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d4e:	428b      	cmp	r3, r1
 8002d50:	d106      	bne.n	8002d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002d52:	4b02      	ldr	r3, [pc, #8]	; (8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d54:	e006      	b.n	8002d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002d56:	bf00      	nop
 8002d58:	40003800 	.word	0x40003800
 8002d5c:	40003400 	.word	0x40003400
 8002d60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d68:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f043 0204 	orr.w	r2, r3, #4
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fdc0 	bl	8002914 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d94:	e000      	b.n	8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d96:	bf00      	nop
}
 8002d98:	bf00      	nop
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	1c99      	adds	r1, r3, #2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6251      	str	r1, [r2, #36]	; 0x24
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d113      	bne.n	8002e0e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002df4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ffc9 	bl	8002da0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	1c99      	adds	r1, r3, #2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6251      	str	r1, [r2, #36]	; 0x24
 8002e2a:	8819      	ldrh	r1, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <I2SEx_TxISR_I2SExt+0x90>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <I2SEx_TxISR_I2SExt+0x22>
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <I2SEx_TxISR_I2SExt+0x94>)
 8002e38:	e001      	b.n	8002e3e <I2SEx_TxISR_I2SExt+0x26>
 8002e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e3e:	460a      	mov	r2, r1
 8002e40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d121      	bne.n	8002e9e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <I2SEx_TxISR_I2SExt+0x90>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <I2SEx_TxISR_I2SExt+0x50>
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <I2SEx_TxISR_I2SExt+0x94>)
 8002e66:	e001      	b.n	8002e6c <I2SEx_TxISR_I2SExt+0x54>
 8002e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	490d      	ldr	r1, [pc, #52]	; (8002ea8 <I2SEx_TxISR_I2SExt+0x90>)
 8002e74:	428b      	cmp	r3, r1
 8002e76:	d101      	bne.n	8002e7c <I2SEx_TxISR_I2SExt+0x64>
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <I2SEx_TxISR_I2SExt+0x94>)
 8002e7a:	e001      	b.n	8002e80 <I2SEx_TxISR_I2SExt+0x68>
 8002e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ff81 	bl	8002da0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40003800 	.word	0x40003800
 8002eac:	40003400 	.word	0x40003400

08002eb0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68d8      	ldr	r0, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	1c99      	adds	r1, r3, #2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ec8:	b282      	uxth	r2, r0
 8002eca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d113      	bne.n	8002f0c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ef2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff4a 	bl	8002da0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a20      	ldr	r2, [pc, #128]	; (8002fa4 <I2SEx_RxISR_I2SExt+0x90>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <I2SEx_RxISR_I2SExt+0x16>
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <I2SEx_RxISR_I2SExt+0x94>)
 8002f28:	e001      	b.n	8002f2e <I2SEx_RxISR_I2SExt+0x1a>
 8002f2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f2e:	68d8      	ldr	r0, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	1c99      	adds	r1, r3, #2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f3a:	b282      	uxth	r2, r0
 8002f3c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d121      	bne.n	8002f9a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <I2SEx_RxISR_I2SExt+0x90>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <I2SEx_RxISR_I2SExt+0x50>
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <I2SEx_RxISR_I2SExt+0x94>)
 8002f62:	e001      	b.n	8002f68 <I2SEx_RxISR_I2SExt+0x54>
 8002f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	490d      	ldr	r1, [pc, #52]	; (8002fa4 <I2SEx_RxISR_I2SExt+0x90>)
 8002f70:	428b      	cmp	r3, r1
 8002f72:	d101      	bne.n	8002f78 <I2SEx_RxISR_I2SExt+0x64>
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <I2SEx_RxISR_I2SExt+0x94>)
 8002f76:	e001      	b.n	8002f7c <I2SEx_RxISR_I2SExt+0x68>
 8002f78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f80:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d106      	bne.n	8002f9a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff03 	bl	8002da0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40003800 	.word	0x40003800
 8002fa8:	40003400 	.word	0x40003400

08002fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e267      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d075      	beq.n	80030b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fca:	4b88      	ldr	r3, [pc, #544]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd6:	4b85      	ldr	r3, [pc, #532]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d112      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe2:	4b82      	ldr	r3, [pc, #520]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fee:	d10b      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	4b7e      	ldr	r3, [pc, #504]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d05b      	beq.n	80030b4 <HAL_RCC_OscConfig+0x108>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d157      	bne.n	80030b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e242      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d106      	bne.n	8003020 <HAL_RCC_OscConfig+0x74>
 8003012:	4b76      	ldr	r3, [pc, #472]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a75      	ldr	r2, [pc, #468]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e01d      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x98>
 800302a:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6f      	ldr	r2, [pc, #444]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b6d      	ldr	r3, [pc, #436]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6c      	ldr	r2, [pc, #432]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003044:	4b69      	ldr	r3, [pc, #420]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a68      	ldr	r2, [pc, #416]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b66      	ldr	r3, [pc, #408]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a65      	ldr	r2, [pc, #404]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe fec6 	bl	8001df4 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe fec2 	bl	8001df4 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e207      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0xc0>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fe feb2 	bl	8001df4 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003094:	f7fe feae 	bl	8001df4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e1f3      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0xe8>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d063      	beq.n	800318a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ce:	4b47      	ldr	r3, [pc, #284]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d11c      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b44      	ldr	r3, [pc, #272]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d116      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e1c7      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fe:	4b3b      	ldr	r3, [pc, #236]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4937      	ldr	r1, [pc, #220]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003112:	e03a      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800311c:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_RCC_OscConfig+0x244>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fe fe67 	bl	8001df4 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312a:	f7fe fe63 	bl	8001df4 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e1a8      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b28      	ldr	r3, [pc, #160]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4925      	ldr	r1, [pc, #148]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
 800315c:	e015      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315e:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <HAL_RCC_OscConfig+0x244>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fe46 	bl	8001df4 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316c:	f7fe fe42 	bl	8001df4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e187      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d036      	beq.n	8003204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <HAL_RCC_OscConfig+0x248>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe fe26 	bl	8001df4 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ac:	f7fe fe22 	bl	8001df4 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e167      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80031c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x200>
 80031ca:	e01b      	b.n	8003204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_OscConfig+0x248>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d2:	f7fe fe0f 	bl	8001df4 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	e00e      	b.n	80031f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031da:	f7fe fe0b 	bl	8001df4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d907      	bls.n	80031f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e150      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
 80031ec:	40023800 	.word	0x40023800
 80031f0:	42470000 	.word	0x42470000
 80031f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f8:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80031fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ea      	bne.n	80031da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 8097 	beq.w	8003340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003216:	4b81      	ldr	r3, [pc, #516]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	4b7d      	ldr	r3, [pc, #500]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a7c      	ldr	r2, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b7a      	ldr	r3, [pc, #488]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b77      	ldr	r3, [pc, #476]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d118      	bne.n	8003280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324e:	4b74      	ldr	r3, [pc, #464]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a73      	ldr	r2, [pc, #460]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325a:	f7fe fdcb 	bl	8001df4 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7fe fdc7 	bl	8001df4 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e10c      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x2ea>
 8003288:	4b64      	ldr	r3, [pc, #400]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a63      	ldr	r2, [pc, #396]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
 8003294:	e01c      	b.n	80032d0 <HAL_RCC_OscConfig+0x324>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b05      	cmp	r3, #5
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x30c>
 800329e:	4b5f      	ldr	r3, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a5e      	ldr	r2, [pc, #376]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a5b      	ldr	r2, [pc, #364]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0x324>
 80032b8:	4b58      	ldr	r3, [pc, #352]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	4a57      	ldr	r2, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
 80032c4:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ca:	f023 0304 	bic.w	r3, r3, #4
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fe fd8c 	bl	8001df4 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f7fe fd88 	bl	8001df4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e0cb      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0ee      	beq.n	80032e0 <HAL_RCC_OscConfig+0x334>
 8003302:	e014      	b.n	800332e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7fe fd76 	bl	8001df4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330a:	e00a      	b.n	8003322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7fe fd72 	bl	8001df4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0b5      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003322:	4b3e      	ldr	r3, [pc, #248]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1ee      	bne.n	800330c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332e:	7dfb      	ldrb	r3, [r7, #23]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	4a38      	ldr	r2, [pc, #224]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80a1 	beq.w	800348c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800334a:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b08      	cmp	r3, #8
 8003354:	d05c      	beq.n	8003410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d141      	bne.n	80033e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe fd46 	bl	8001df4 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fd42 	bl	8001df4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e087      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	3b01      	subs	r3, #1
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fe fd1b 	bl	8001df4 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fe fd17 	bl	8001df4 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e05c      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x416>
 80033e0:	e054      	b.n	800348c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe fd04 	bl	8001df4 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe fd00 	bl	8001df4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e045      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x444>
 800340e:	e03d      	b.n	800348c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e038      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
 800341c:	40023800 	.word	0x40023800
 8003420:	40007000 	.word	0x40007000
 8003424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x4ec>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d028      	beq.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d121      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d11a      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800345e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0cc      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b68      	ldr	r3, [pc, #416]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d90c      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b65      	ldr	r3, [pc, #404]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0b8      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f0:	4b59      	ldr	r3, [pc, #356]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a58      	ldr	r2, [pc, #352]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003508:	4b53      	ldr	r3, [pc, #332]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a52      	ldr	r2, [pc, #328]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	494d      	ldr	r1, [pc, #308]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d044      	beq.n	80035bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d119      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e07f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d003      	beq.n	800355a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003556:	2b03      	cmp	r3, #3
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e067      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4934      	ldr	r1, [pc, #208]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800358c:	f7fe fc32 	bl	8001df4 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fe fc2e 	bl	8001df4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e04f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d20c      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e032      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4916      	ldr	r1, [pc, #88]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	490e      	ldr	r1, [pc, #56]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003622:	f000 f821 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003626:	4602      	mov	r2, r0
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	490a      	ldr	r1, [pc, #40]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	5ccb      	ldrb	r3, [r1, r3]
 8003636:	fa22 f303 	lsr.w	r3, r2, r3
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe fb92 	bl	8001d6c <HAL_InitTick>

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023c00 	.word	0x40023c00
 8003658:	40023800 	.word	0x40023800
 800365c:	08008638 	.word	0x08008638
 8003660:	20000000 	.word	0x20000000
 8003664:	20000004 	.word	0x20000004

08003668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800366c:	b094      	sub	sp, #80	; 0x50
 800366e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
 8003674:	2300      	movs	r3, #0
 8003676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003678:	2300      	movs	r3, #0
 800367a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003680:	4b79      	ldr	r3, [pc, #484]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b08      	cmp	r3, #8
 800368a:	d00d      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x40>
 800368c:	2b08      	cmp	r3, #8
 800368e:	f200 80e1 	bhi.w	8003854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x34>
 8003696:	2b04      	cmp	r3, #4
 8003698:	d003      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800369a:	e0db      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b73      	ldr	r3, [pc, #460]	; (800386c <HAL_RCC_GetSysClockFreq+0x204>)
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036a0:	e0db      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a2:	4b73      	ldr	r3, [pc, #460]	; (8003870 <HAL_RCC_GetSysClockFreq+0x208>)
 80036a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036a6:	e0d8      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a8:	4b6f      	ldr	r3, [pc, #444]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b2:	4b6d      	ldr	r3, [pc, #436]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d063      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b6a      	ldr	r3, [pc, #424]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	2200      	movs	r2, #0
 80036c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
 80036d2:	2300      	movs	r3, #0
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
 80036d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036da:	4622      	mov	r2, r4
 80036dc:	462b      	mov	r3, r5
 80036de:	f04f 0000 	mov.w	r0, #0
 80036e2:	f04f 0100 	mov.w	r1, #0
 80036e6:	0159      	lsls	r1, r3, #5
 80036e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ec:	0150      	lsls	r0, r2, #5
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4621      	mov	r1, r4
 80036f4:	1a51      	subs	r1, r2, r1
 80036f6:	6139      	str	r1, [r7, #16]
 80036f8:	4629      	mov	r1, r5
 80036fa:	eb63 0301 	sbc.w	r3, r3, r1
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800370c:	4659      	mov	r1, fp
 800370e:	018b      	lsls	r3, r1, #6
 8003710:	4651      	mov	r1, sl
 8003712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003716:	4651      	mov	r1, sl
 8003718:	018a      	lsls	r2, r1, #6
 800371a:	4651      	mov	r1, sl
 800371c:	ebb2 0801 	subs.w	r8, r2, r1
 8003720:	4659      	mov	r1, fp
 8003722:	eb63 0901 	sbc.w	r9, r3, r1
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800373a:	4690      	mov	r8, r2
 800373c:	4699      	mov	r9, r3
 800373e:	4623      	mov	r3, r4
 8003740:	eb18 0303 	adds.w	r3, r8, r3
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	462b      	mov	r3, r5
 8003748:	eb49 0303 	adc.w	r3, r9, r3
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800375a:	4629      	mov	r1, r5
 800375c:	024b      	lsls	r3, r1, #9
 800375e:	4621      	mov	r1, r4
 8003760:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003764:	4621      	mov	r1, r4
 8003766:	024a      	lsls	r2, r1, #9
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800376e:	2200      	movs	r2, #0
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
 8003772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003778:	f7fd fa16 	bl	8000ba8 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4613      	mov	r3, r2
 8003782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003784:	e058      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003786:	4b38      	ldr	r3, [pc, #224]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	099b      	lsrs	r3, r3, #6
 800378c:	2200      	movs	r2, #0
 800378e:	4618      	mov	r0, r3
 8003790:	4611      	mov	r1, r2
 8003792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003796:	623b      	str	r3, [r7, #32]
 8003798:	2300      	movs	r3, #0
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
 800379c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	0159      	lsls	r1, r3, #5
 80037ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b2:	0150      	lsls	r0, r2, #5
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4641      	mov	r1, r8
 80037ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80037be:	4649      	mov	r1, r9
 80037c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037d8:	ebb2 040a 	subs.w	r4, r2, sl
 80037dc:	eb63 050b 	sbc.w	r5, r3, fp
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	00eb      	lsls	r3, r5, #3
 80037ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ee:	00e2      	lsls	r2, r4, #3
 80037f0:	4614      	mov	r4, r2
 80037f2:	461d      	mov	r5, r3
 80037f4:	4643      	mov	r3, r8
 80037f6:	18e3      	adds	r3, r4, r3
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	464b      	mov	r3, r9
 80037fc:	eb45 0303 	adc.w	r3, r5, r3
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800380e:	4629      	mov	r1, r5
 8003810:	028b      	lsls	r3, r1, #10
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003818:	4621      	mov	r1, r4
 800381a:	028a      	lsls	r2, r1, #10
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003822:	2200      	movs	r2, #0
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	61fa      	str	r2, [r7, #28]
 8003828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800382c:	f7fd f9bc 	bl	8000ba8 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_GetSysClockFreq+0x200>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	3301      	adds	r3, #1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800384a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003852:	e002      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetSysClockFreq+0x204>)
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800385a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800385c:	4618      	mov	r0, r3
 800385e:	3750      	adds	r7, #80	; 0x50
 8003860:	46bd      	mov	sp, r7
 8003862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800
 800386c:	00f42400 	.word	0x00f42400
 8003870:	007a1200 	.word	0x007a1200

08003874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_RCC_GetHCLKFreq+0x14>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000000 	.word	0x20000000

0800388c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003890:	f7ff fff0 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0a9b      	lsrs	r3, r3, #10
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08008648 	.word	0x08008648

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038b8:	f7ff ffdc 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0b5b      	lsrs	r3, r3, #13
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	08008648 	.word	0x08008648

080038dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003900:	2b00      	cmp	r3, #0
 8003902:	d035      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003904:	4b62      	ldr	r3, [pc, #392]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800390a:	f7fe fa73 	bl	8001df4 <HAL_GetTick>
 800390e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003912:	f7fe fa6f 	bl	8001df4 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0b0      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003924:	4b5b      	ldr	r3, [pc, #364]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f0      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	019a      	lsls	r2, r3, #6
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	071b      	lsls	r3, r3, #28
 800393c:	4955      	ldr	r1, [pc, #340]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003944:	4b52      	ldr	r3, [pc, #328]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800394a:	f7fe fa53 	bl	8001df4 <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003952:	f7fe fa4f 	bl	8001df4 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e090      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003964:	4b4b      	ldr	r3, [pc, #300]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8083 	beq.w	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	4b44      	ldr	r3, [pc, #272]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	4a43      	ldr	r2, [pc, #268]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398c:	6413      	str	r3, [r2, #64]	; 0x40
 800398e:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800399a:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3e      	ldr	r2, [pc, #248]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039a6:	f7fe fa25 	bl	8001df4 <HAL_GetTick>
 80039aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039ae:	f7fe fa21 	bl	8001df4 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e062      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039c0:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039cc:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d02f      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d028      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ea:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039f4:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039fa:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a00:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a06:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d114      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a12:	f7fe f9ef 	bl	8001df4 <HAL_GetTick>
 8003a16:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fe f9eb 	bl	8001df4 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e02a      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a30:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ee      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a48:	d10d      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5e:	490d      	ldr	r1, [pc, #52]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	608b      	str	r3, [r1, #8]
 8003a64:	e005      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a70:	6093      	str	r3, [r2, #8]
 8003a72:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7e:	4905      	ldr	r1, [pc, #20]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	42470068 	.word	0x42470068
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	42470e40 	.word	0x42470e40

08003aa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d13e      	bne.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003abe:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d12f      	bne.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ad6:	617b      	str	r3, [r7, #20]
          break;
 8003ad8:	e02f      	b.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ada:	4b1c      	ldr	r3, [pc, #112]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae6:	d108      	bne.n	8003afa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ae8:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af0:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	e007      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b02:	4a15      	ldr	r2, [pc, #84]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b10:	099b      	lsrs	r3, r3, #6
 8003b12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b24:	0f1b      	lsrs	r3, r3, #28
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]
          break;
 8003b32:	e002      	b.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
          break;
 8003b38:	bf00      	nop
        }
      }
      break;
 8003b3a:	bf00      	nop
    }
  }
  return frequency;
 8003b3c:	697b      	ldr	r3, [r7, #20]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	00bb8000 	.word	0x00bb8000
 8003b54:	007a1200 	.word	0x007a1200
 8003b58:	00f42400 	.word	0x00f42400

08003b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e07b      	b.n	8003c66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d108      	bne.n	8003b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b7e:	d009      	beq.n	8003b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
 8003b86:	e005      	b.n	8003b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fd fe72 	bl	8001898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	ea42 0103 	orr.w	r1, r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	f003 0104 	and.w	r1, r3, #4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f003 0210 	and.w	r2, r3, #16
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e041      	b.n	8003d04 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7fd fe47 	bl	8001928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f000 fe6b 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e041      	b.n	8003da2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f839 	bl	8003daa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f000 fe1c 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d109      	bne.n	8003de4 <HAL_TIM_PWM_Start+0x24>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	e022      	b.n	8003e2a <HAL_TIM_PWM_Start+0x6a>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d109      	bne.n	8003dfe <HAL_TIM_PWM_Start+0x3e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	e015      	b.n	8003e2a <HAL_TIM_PWM_Start+0x6a>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d109      	bne.n	8003e18 <HAL_TIM_PWM_Start+0x58>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e008      	b.n	8003e2a <HAL_TIM_PWM_Start+0x6a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e07c      	b.n	8003f2c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <HAL_TIM_PWM_Start+0x82>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e40:	e013      	b.n	8003e6a <HAL_TIM_PWM_Start+0xaa>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_PWM_Start+0x92>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e50:	e00b      	b.n	8003e6a <HAL_TIM_PWM_Start+0xaa>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Start+0xa2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e60:	e003      	b.n	8003e6a <HAL_TIM_PWM_Start+0xaa>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2202      	movs	r2, #2
 8003e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 f99c 	bl	80051b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2d      	ldr	r2, [pc, #180]	; (8003f34 <HAL_TIM_PWM_Start+0x174>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_TIM_PWM_Start+0xcc>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2c      	ldr	r2, [pc, #176]	; (8003f38 <HAL_TIM_PWM_Start+0x178>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIM_PWM_Start+0xd0>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <HAL_TIM_PWM_Start+0xd2>
 8003e90:	2300      	movs	r3, #0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a22      	ldr	r2, [pc, #136]	; (8003f34 <HAL_TIM_PWM_Start+0x174>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d022      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x136>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb8:	d01d      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x136>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <HAL_TIM_PWM_Start+0x17c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d018      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x136>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1d      	ldr	r2, [pc, #116]	; (8003f40 <HAL_TIM_PWM_Start+0x180>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x136>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1c      	ldr	r2, [pc, #112]	; (8003f44 <HAL_TIM_PWM_Start+0x184>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x136>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <HAL_TIM_PWM_Start+0x178>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d009      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x136>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <HAL_TIM_PWM_Start+0x188>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x136>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <HAL_TIM_PWM_Start+0x18c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d111      	bne.n	8003f1a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b06      	cmp	r3, #6
 8003f06:	d010      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	e007      	b.n	8003f2a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40010400 	.word	0x40010400
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40000c00 	.word	0x40000c00
 8003f48:	40014000 	.word	0x40014000
 8003f4c:	40001800 	.word	0x40001800

08003f50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e041      	b.n	8003fe6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f839 	bl	8003fee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f000 fcfa 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d104      	bne.n	8004022 <HAL_TIM_IC_Start_IT+0x1e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800401e:	b2db      	uxtb	r3, r3
 8004020:	e013      	b.n	800404a <HAL_TIM_IC_Start_IT+0x46>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d104      	bne.n	8004032 <HAL_TIM_IC_Start_IT+0x2e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800402e:	b2db      	uxtb	r3, r3
 8004030:	e00b      	b.n	800404a <HAL_TIM_IC_Start_IT+0x46>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d104      	bne.n	8004042 <HAL_TIM_IC_Start_IT+0x3e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800403e:	b2db      	uxtb	r3, r3
 8004040:	e003      	b.n	800404a <HAL_TIM_IC_Start_IT+0x46>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004048:	b2db      	uxtb	r3, r3
 800404a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d104      	bne.n	800405c <HAL_TIM_IC_Start_IT+0x58>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e013      	b.n	8004084 <HAL_TIM_IC_Start_IT+0x80>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b04      	cmp	r3, #4
 8004060:	d104      	bne.n	800406c <HAL_TIM_IC_Start_IT+0x68>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e00b      	b.n	8004084 <HAL_TIM_IC_Start_IT+0x80>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b08      	cmp	r3, #8
 8004070:	d104      	bne.n	800407c <HAL_TIM_IC_Start_IT+0x78>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e003      	b.n	8004084 <HAL_TIM_IC_Start_IT+0x80>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004082:	b2db      	uxtb	r3, r3
 8004084:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004086:	7bbb      	ldrb	r3, [r7, #14]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d102      	bne.n	8004092 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800408c:	7b7b      	ldrb	r3, [r7, #13]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d001      	beq.n	8004096 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0cc      	b.n	8004230 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_IC_Start_IT+0xa2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a4:	e013      	b.n	80040ce <HAL_TIM_IC_Start_IT+0xca>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_IC_Start_IT+0xb2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b4:	e00b      	b.n	80040ce <HAL_TIM_IC_Start_IT+0xca>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_IC_Start_IT+0xc2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c4:	e003      	b.n	80040ce <HAL_TIM_IC_Start_IT+0xca>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <HAL_TIM_IC_Start_IT+0xda>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040dc:	e013      	b.n	8004106 <HAL_TIM_IC_Start_IT+0x102>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_IC_Start_IT+0xea>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ec:	e00b      	b.n	8004106 <HAL_TIM_IC_Start_IT+0x102>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_IC_Start_IT+0xfa>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040fc:	e003      	b.n	8004106 <HAL_TIM_IC_Start_IT+0x102>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b0c      	cmp	r3, #12
 800410a:	d841      	bhi.n	8004190 <HAL_TIM_IC_Start_IT+0x18c>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <HAL_TIM_IC_Start_IT+0x110>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004149 	.word	0x08004149
 8004118:	08004191 	.word	0x08004191
 800411c:	08004191 	.word	0x08004191
 8004120:	08004191 	.word	0x08004191
 8004124:	0800415b 	.word	0x0800415b
 8004128:	08004191 	.word	0x08004191
 800412c:	08004191 	.word	0x08004191
 8004130:	08004191 	.word	0x08004191
 8004134:	0800416d 	.word	0x0800416d
 8004138:	08004191 	.word	0x08004191
 800413c:	08004191 	.word	0x08004191
 8004140:	08004191 	.word	0x08004191
 8004144:	0800417f 	.word	0x0800417f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0202 	orr.w	r2, r2, #2
 8004156:	60da      	str	r2, [r3, #12]
      break;
 8004158:	e01d      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0204 	orr.w	r2, r2, #4
 8004168:	60da      	str	r2, [r3, #12]
      break;
 800416a:	e014      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0208 	orr.w	r2, r2, #8
 800417a:	60da      	str	r2, [r3, #12]
      break;
 800417c:	e00b      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0210 	orr.w	r2, r2, #16
 800418c:	60da      	str	r2, [r3, #12]
      break;
 800418e:	e002      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	bf00      	nop
  }

  if (status == HAL_OK)
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d148      	bne.n	800422e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2201      	movs	r2, #1
 80041a2:	6839      	ldr	r1, [r7, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 f803 	bl	80051b0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a22      	ldr	r2, [pc, #136]	; (8004238 <HAL_TIM_IC_Start_IT+0x234>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d022      	beq.n	80041fa <HAL_TIM_IC_Start_IT+0x1f6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041bc:	d01d      	beq.n	80041fa <HAL_TIM_IC_Start_IT+0x1f6>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1e      	ldr	r2, [pc, #120]	; (800423c <HAL_TIM_IC_Start_IT+0x238>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d018      	beq.n	80041fa <HAL_TIM_IC_Start_IT+0x1f6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <HAL_TIM_IC_Start_IT+0x23c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <HAL_TIM_IC_Start_IT+0x1f6>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1b      	ldr	r2, [pc, #108]	; (8004244 <HAL_TIM_IC_Start_IT+0x240>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_TIM_IC_Start_IT+0x1f6>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a19      	ldr	r2, [pc, #100]	; (8004248 <HAL_TIM_IC_Start_IT+0x244>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_TIM_IC_Start_IT+0x1f6>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_TIM_IC_Start_IT+0x248>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_TIM_IC_Start_IT+0x1f6>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a16      	ldr	r2, [pc, #88]	; (8004250 <HAL_TIM_IC_Start_IT+0x24c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d111      	bne.n	800421e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b06      	cmp	r3, #6
 800420a:	d010      	beq.n	800422e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421c:	e007      	b.n	800422e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0201 	orr.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800422e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40010000 	.word	0x40010000
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800
 8004244:	40000c00 	.word	0x40000c00
 8004248:	40010400 	.word	0x40010400
 800424c:	40014000 	.word	0x40014000
 8004250:	40001800 	.word	0x40001800

08004254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d122      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d11b      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0202 	mvn.w	r2, #2
 8004280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fe1c 	bl	8000ed4 <HAL_TIM_IC_CaptureCallback>
 800429c:	e005      	b.n	80042aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fb54 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fb5b 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d122      	bne.n	8004304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d11b      	bne.n	8004304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0204 	mvn.w	r2, #4
 80042d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2202      	movs	r2, #2
 80042da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fc fdf2 	bl	8000ed4 <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fb2a 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fb31 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b08      	cmp	r3, #8
 8004310:	d122      	bne.n	8004358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b08      	cmp	r3, #8
 800431e:	d11b      	bne.n	8004358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0208 	mvn.w	r2, #8
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fc fdc8 	bl	8000ed4 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fb00 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fb07 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b10      	cmp	r3, #16
 8004364:	d122      	bne.n	80043ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b10      	cmp	r3, #16
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0210 	mvn.w	r2, #16
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2208      	movs	r2, #8
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc fd9e 	bl	8000ed4 <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fad6 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fadd 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10e      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d107      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0201 	mvn.w	r2, #1
 80043d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fab0 	bl	8004938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b80      	cmp	r3, #128	; 0x80
 80043e4:	d10e      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d107      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 ffd4 	bl	80053ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 faa2 	bl	8004974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b20      	cmp	r3, #32
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0220 	mvn.w	r2, #32
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 ff9e 	bl	8005398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_TIM_IC_ConfigChannel+0x1e>
 800447e:	2302      	movs	r3, #2
 8004480:	e088      	b.n	8004594 <HAL_TIM_IC_ConfigChannel+0x130>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6819      	ldr	r1, [r3, #0]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f000 fcc2 	bl	8004e28 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 020c 	bic.w	r2, r2, #12
 80044b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6999      	ldr	r1, [r3, #24]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	619a      	str	r2, [r3, #24]
 80044c6:	e060      	b.n	800458a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d11c      	bne.n	8004508 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	6819      	ldr	r1, [r3, #0]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f000 fd46 	bl	8004f6e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6999      	ldr	r1, [r3, #24]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	021a      	lsls	r2, r3, #8
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	619a      	str	r2, [r3, #24]
 8004506:	e040      	b.n	800458a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b08      	cmp	r3, #8
 800450c:	d11b      	bne.n	8004546 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6819      	ldr	r1, [r3, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f000 fd93 	bl	8005048 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 020c 	bic.w	r2, r2, #12
 8004530:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69d9      	ldr	r1, [r3, #28]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	61da      	str	r2, [r3, #28]
 8004544:	e021      	b.n	800458a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d11c      	bne.n	8004586 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	6819      	ldr	r1, [r3, #0]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f000 fdb0 	bl	80050c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800456e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69d9      	ldr	r1, [r3, #28]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	021a      	lsls	r2, r3, #8
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	61da      	str	r2, [r3, #28]
 8004584:	e001      	b.n	800458a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004592:	7dfb      	ldrb	r3, [r7, #23]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e0ae      	b.n	8004718 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b0c      	cmp	r3, #12
 80045c6:	f200 809f 	bhi.w	8004708 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045ca:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	08004605 	.word	0x08004605
 80045d4:	08004709 	.word	0x08004709
 80045d8:	08004709 	.word	0x08004709
 80045dc:	08004709 	.word	0x08004709
 80045e0:	08004645 	.word	0x08004645
 80045e4:	08004709 	.word	0x08004709
 80045e8:	08004709 	.word	0x08004709
 80045ec:	08004709 	.word	0x08004709
 80045f0:	08004687 	.word	0x08004687
 80045f4:	08004709 	.word	0x08004709
 80045f8:	08004709 	.word	0x08004709
 80045fc:	08004709 	.word	0x08004709
 8004600:	080046c7 	.word	0x080046c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fa5c 	bl	8004ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0208 	orr.w	r2, r2, #8
 800461e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0204 	bic.w	r2, r2, #4
 800462e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6999      	ldr	r1, [r3, #24]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	619a      	str	r2, [r3, #24]
      break;
 8004642:	e064      	b.n	800470e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 faac 	bl	8004ba8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800466e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6999      	ldr	r1, [r3, #24]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	021a      	lsls	r2, r3, #8
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	619a      	str	r2, [r3, #24]
      break;
 8004684:	e043      	b.n	800470e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fb01 	bl	8004c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0208 	orr.w	r2, r2, #8
 80046a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0204 	bic.w	r2, r2, #4
 80046b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69d9      	ldr	r1, [r3, #28]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	61da      	str	r2, [r3, #28]
      break;
 80046c4:	e023      	b.n	800470e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fb55 	bl	8004d7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69da      	ldr	r2, [r3, #28]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69d9      	ldr	r1, [r3, #28]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	021a      	lsls	r2, r3, #8
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	61da      	str	r2, [r3, #28]
      break;
 8004706:	e002      	b.n	800470e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	75fb      	strb	r3, [r7, #23]
      break;
 800470c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIM_ConfigClockSource+0x1c>
 8004738:	2302      	movs	r3, #2
 800473a:	e0b4      	b.n	80048a6 <HAL_TIM_ConfigClockSource+0x186>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800475a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004774:	d03e      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800477a:	f200 8087 	bhi.w	800488c <HAL_TIM_ConfigClockSource+0x16c>
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004782:	f000 8086 	beq.w	8004892 <HAL_TIM_ConfigClockSource+0x172>
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478a:	d87f      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b70      	cmp	r3, #112	; 0x70
 800478e:	d01a      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004790:	2b70      	cmp	r3, #112	; 0x70
 8004792:	d87b      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b60      	cmp	r3, #96	; 0x60
 8004796:	d050      	beq.n	800483a <HAL_TIM_ConfigClockSource+0x11a>
 8004798:	2b60      	cmp	r3, #96	; 0x60
 800479a:	d877      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b50      	cmp	r3, #80	; 0x50
 800479e:	d03c      	beq.n	800481a <HAL_TIM_ConfigClockSource+0xfa>
 80047a0:	2b50      	cmp	r3, #80	; 0x50
 80047a2:	d873      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d058      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x13a>
 80047a8:	2b40      	cmp	r3, #64	; 0x40
 80047aa:	d86f      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b30      	cmp	r3, #48	; 0x30
 80047ae:	d064      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047b0:	2b30      	cmp	r3, #48	; 0x30
 80047b2:	d86b      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d060      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d867      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d05c      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d05a      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047c4:	e062      	b.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6899      	ldr	r1, [r3, #8]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f000 fccb 	bl	8005170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	609a      	str	r2, [r3, #8]
      break;
 80047f2:	e04f      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6899      	ldr	r1, [r3, #8]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f000 fcb4 	bl	8005170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004816:	609a      	str	r2, [r3, #8]
      break;
 8004818:	e03c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	461a      	mov	r2, r3
 8004828:	f000 fb72 	bl	8004f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2150      	movs	r1, #80	; 0x50
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fc81 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 8004838:	e02c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	461a      	mov	r2, r3
 8004848:	f000 fbce 	bl	8004fe8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2160      	movs	r1, #96	; 0x60
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fc71 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 8004858:	e01c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	461a      	mov	r2, r3
 8004868:	f000 fb52 	bl	8004f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2140      	movs	r1, #64	; 0x40
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fc61 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 8004878:	e00c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f000 fc58 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 800488a:	e003      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      break;
 8004890:	e000      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b0c      	cmp	r3, #12
 80048c2:	d831      	bhi.n	8004928 <HAL_TIM_ReadCapturedValue+0x78>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	08004901 	.word	0x08004901
 80048d0:	08004929 	.word	0x08004929
 80048d4:	08004929 	.word	0x08004929
 80048d8:	08004929 	.word	0x08004929
 80048dc:	0800490b 	.word	0x0800490b
 80048e0:	08004929 	.word	0x08004929
 80048e4:	08004929 	.word	0x08004929
 80048e8:	08004929 	.word	0x08004929
 80048ec:	08004915 	.word	0x08004915
 80048f0:	08004929 	.word	0x08004929
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004929 	.word	0x08004929
 80048fc:	0800491f 	.word	0x0800491f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	60fb      	str	r3, [r7, #12]

      break;
 8004908:	e00f      	b.n	800492a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	60fb      	str	r3, [r7, #12]

      break;
 8004912:	e00a      	b.n	800492a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	60fb      	str	r3, [r7, #12]

      break;
 800491c:	e005      	b.n	800492a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	60fb      	str	r3, [r7, #12]

      break;
 8004926:	e000      	b.n	800492a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004928:	bf00      	nop
  }

  return tmpreg;
 800492a:	68fb      	ldr	r3, [r7, #12]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a40      	ldr	r2, [pc, #256]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3c      	ldr	r2, [pc, #240]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3b      	ldr	r2, [pc, #236]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <TIM_Base_SetConfig+0x124>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d027      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d023      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2a      	ldr	r2, [pc, #168]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a29      	ldr	r2, [pc, #164]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d017      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a28      	ldr	r2, [pc, #160]	; (8004ab0 <TIM_Base_SetConfig+0x128>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <TIM_Base_SetConfig+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <TIM_Base_SetConfig+0x130>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a25      	ldr	r2, [pc, #148]	; (8004abc <TIM_Base_SetConfig+0x134>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <TIM_Base_SetConfig+0x138>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <TIM_Base_SetConfig+0x13c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800
 8004abc:	40001800 	.word	0x40001800
 8004ac0:	40001c00 	.word	0x40001c00
 8004ac4:	40002000 	.word	0x40002000

08004ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0303 	bic.w	r3, r3, #3
 8004afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f023 0302 	bic.w	r3, r3, #2
 8004b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <TIM_OC1_SetConfig+0xd8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_OC1_SetConfig+0x64>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a1f      	ldr	r2, [pc, #124]	; (8004ba4 <TIM_OC1_SetConfig+0xdc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d10c      	bne.n	8004b46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 0308 	bic.w	r3, r3, #8
 8004b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 0304 	bic.w	r3, r3, #4
 8004b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <TIM_OC1_SetConfig+0xd8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_OC1_SetConfig+0x8e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a14      	ldr	r2, [pc, #80]	; (8004ba4 <TIM_OC1_SetConfig+0xdc>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d111      	bne.n	8004b7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	621a      	str	r2, [r3, #32]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40010400 	.word	0x40010400

08004ba8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f023 0210 	bic.w	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 0320 	bic.w	r3, r3, #32
 8004bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <TIM_OC2_SetConfig+0xe4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_OC2_SetConfig+0x68>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <TIM_OC2_SetConfig+0xe8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d10d      	bne.n	8004c2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <TIM_OC2_SetConfig+0xe4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_OC2_SetConfig+0x94>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a16      	ldr	r2, [pc, #88]	; (8004c90 <TIM_OC2_SetConfig+0xe8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d113      	bne.n	8004c64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40010400 	.word	0x40010400

08004c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0303 	bic.w	r3, r3, #3
 8004cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a21      	ldr	r2, [pc, #132]	; (8004d74 <TIM_OC3_SetConfig+0xe0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_OC3_SetConfig+0x66>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a20      	ldr	r2, [pc, #128]	; (8004d78 <TIM_OC3_SetConfig+0xe4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d10d      	bne.n	8004d16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <TIM_OC3_SetConfig+0xe0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_OC3_SetConfig+0x92>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <TIM_OC3_SetConfig+0xe4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d113      	bne.n	8004d4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	621a      	str	r2, [r3, #32]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40010400 	.word	0x40010400

08004d7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	031b      	lsls	r3, r3, #12
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <TIM_OC4_SetConfig+0xa4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_OC4_SetConfig+0x68>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a11      	ldr	r2, [pc, #68]	; (8004e24 <TIM_OC4_SetConfig+0xa8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d109      	bne.n	8004df8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	019b      	lsls	r3, r3, #6
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40010000 	.word	0x40010000
 8004e24:	40010400 	.word	0x40010400

08004e28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f023 0201 	bic.w	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4a28      	ldr	r2, [pc, #160]	; (8004ef4 <TIM_TI1_SetConfig+0xcc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01b      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d017      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a25      	ldr	r2, [pc, #148]	; (8004ef8 <TIM_TI1_SetConfig+0xd0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4a24      	ldr	r2, [pc, #144]	; (8004efc <TIM_TI1_SetConfig+0xd4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00f      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a23      	ldr	r2, [pc, #140]	; (8004f00 <TIM_TI1_SetConfig+0xd8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00b      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a22      	ldr	r2, [pc, #136]	; (8004f04 <TIM_TI1_SetConfig+0xdc>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d007      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <TIM_TI1_SetConfig+0xe0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d003      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <TIM_TI1_SetConfig+0xe4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d101      	bne.n	8004e92 <TIM_TI1_SetConfig+0x6a>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <TIM_TI1_SetConfig+0x6c>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e003      	b.n	8004eb2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f023 030a 	bic.w	r3, r3, #10
 8004ecc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f003 030a 	and.w	r3, r3, #10
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	40000c00 	.word	0x40000c00
 8004f04:	40010400 	.word	0x40010400
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40001800 	.word	0x40001800

08004f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f023 030a 	bic.w	r3, r3, #10
 8004f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b087      	sub	sp, #28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f023 0210 	bic.w	r2, r3, #16
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	031b      	lsls	r3, r3, #12
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f023 0210 	bic.w	r2, r3, #16
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005012:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	031b      	lsls	r3, r3, #12
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005024:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	621a      	str	r2, [r3, #32]
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f023 0303 	bic.w	r3, r3, #3
 8005074:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005084:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	b2db      	uxtb	r3, r3
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005098:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	031b      	lsls	r3, r3, #12
 8005104:	b29b      	uxth	r3, r3
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005112:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	031b      	lsls	r3, r3, #12
 8005118:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	f043 0307 	orr.w	r3, r3, #7
 800515c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	609a      	str	r2, [r3, #8]
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800518a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	021a      	lsls	r2, r3, #8
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	431a      	orrs	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4313      	orrs	r3, r2
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	609a      	str	r2, [r3, #8]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 031f 	and.w	r3, r3, #31
 80051c2:	2201      	movs	r2, #1
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a1a      	ldr	r2, [r3, #32]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	401a      	ands	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a1a      	ldr	r2, [r3, #32]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	fa01 f303 	lsl.w	r3, r1, r3
 80051e8:	431a      	orrs	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005210:	2302      	movs	r3, #2
 8005212:	e05a      	b.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a21      	ldr	r2, [pc, #132]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d022      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d01d      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1d      	ldr	r2, [pc, #116]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d018      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1a      	ldr	r2, [pc, #104]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00e      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a17      	ldr	r2, [pc, #92]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d004      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d10c      	bne.n	80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40010000 	.word	0x40010000
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40000c00 	.word	0x40000c00
 80052e8:	40010400 	.word	0x40010400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40001800 	.word	0x40001800

080052f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800530c:	2302      	movs	r3, #2
 800530e:	e03d      	b.n	800538c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e03f      	b.n	8005452 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fc fb3c 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2224      	movs	r2, #36	; 0x24
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f929 	bl	800565c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695a      	ldr	r2, [r3, #20]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b08a      	sub	sp, #40	; 0x28
 800545e:	af02      	add	r7, sp, #8
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	4613      	mov	r3, r2
 8005468:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b20      	cmp	r3, #32
 8005478:	d17c      	bne.n	8005574 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_UART_Transmit+0x2c>
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e075      	b.n	8005576 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_UART_Transmit+0x3e>
 8005494:	2302      	movs	r3, #2
 8005496:	e06e      	b.n	8005576 <HAL_UART_Transmit+0x11c>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2221      	movs	r2, #33	; 0x21
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ae:	f7fc fca1 	bl	8001df4 <HAL_GetTick>
 80054b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c8:	d108      	bne.n	80054dc <HAL_UART_Transmit+0x82>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d104      	bne.n	80054dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	e003      	b.n	80054e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054ec:	e02a      	b.n	8005544 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f840 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e036      	b.n	8005576 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10b      	bne.n	8005526 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800551c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	3302      	adds	r3, #2
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	e007      	b.n	8005536 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	781a      	ldrb	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	3301      	adds	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1cf      	bne.n	80054ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2200      	movs	r2, #0
 8005556:	2140      	movs	r1, #64	; 0x40
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f810 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e006      	b.n	8005576 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	e000      	b.n	8005576 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005574:	2302      	movs	r3, #2
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b090      	sub	sp, #64	; 0x40
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4613      	mov	r3, r2
 800558c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558e:	e050      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005596:	d04c      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0x30>
 800559e:	f7fc fc29 	bl	8001df4 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d241      	bcs.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	330c      	adds	r3, #12
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055ce:	637a      	str	r2, [r7, #52]	; 0x34
 80055d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e5      	bne.n	80055ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3314      	adds	r3, #20
 80055e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	613b      	str	r3, [r7, #16]
   return(result);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3314      	adds	r3, #20
 8005600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005602:	623a      	str	r2, [r7, #32]
 8005604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	69f9      	ldr	r1, [r7, #28]
 8005608:	6a3a      	ldr	r2, [r7, #32]
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e00f      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	429a      	cmp	r2, r3
 800564e:	d09f      	beq.n	8005590 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3740      	adds	r7, #64	; 0x40
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800565c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005660:	b0c0      	sub	sp, #256	; 0x100
 8005662:	af00      	add	r7, sp, #0
 8005664:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	68d9      	ldr	r1, [r3, #12]
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	ea40 0301 	orr.w	r3, r0, r1
 8005684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	431a      	orrs	r2, r3
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	431a      	orrs	r2, r3
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056b4:	f021 010c 	bic.w	r1, r1, #12
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056c2:	430b      	orrs	r3, r1
 80056c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d6:	6999      	ldr	r1, [r3, #24]
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	ea40 0301 	orr.w	r3, r0, r1
 80056e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b8f      	ldr	r3, [pc, #572]	; (8005928 <UART_SetConfig+0x2cc>)
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d005      	beq.n	80056fc <UART_SetConfig+0xa0>
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4b8d      	ldr	r3, [pc, #564]	; (800592c <UART_SetConfig+0x2d0>)
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d104      	bne.n	8005706 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056fc:	f7fe f8da 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8005700:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005704:	e003      	b.n	800570e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005706:	f7fe f8c1 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 800570a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800570e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005718:	f040 810c 	bne.w	8005934 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800571c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005720:	2200      	movs	r2, #0
 8005722:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005726:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800572a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800572e:	4622      	mov	r2, r4
 8005730:	462b      	mov	r3, r5
 8005732:	1891      	adds	r1, r2, r2
 8005734:	65b9      	str	r1, [r7, #88]	; 0x58
 8005736:	415b      	adcs	r3, r3
 8005738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800573a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800573e:	4621      	mov	r1, r4
 8005740:	eb12 0801 	adds.w	r8, r2, r1
 8005744:	4629      	mov	r1, r5
 8005746:	eb43 0901 	adc.w	r9, r3, r1
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800575a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800575e:	4690      	mov	r8, r2
 8005760:	4699      	mov	r9, r3
 8005762:	4623      	mov	r3, r4
 8005764:	eb18 0303 	adds.w	r3, r8, r3
 8005768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800576c:	462b      	mov	r3, r5
 800576e:	eb49 0303 	adc.w	r3, r9, r3
 8005772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005782:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005786:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800578a:	460b      	mov	r3, r1
 800578c:	18db      	adds	r3, r3, r3
 800578e:	653b      	str	r3, [r7, #80]	; 0x50
 8005790:	4613      	mov	r3, r2
 8005792:	eb42 0303 	adc.w	r3, r2, r3
 8005796:	657b      	str	r3, [r7, #84]	; 0x54
 8005798:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800579c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057a0:	f7fb fa02 	bl	8000ba8 <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4b61      	ldr	r3, [pc, #388]	; (8005930 <UART_SetConfig+0x2d4>)
 80057aa:	fba3 2302 	umull	r2, r3, r3, r2
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	011c      	lsls	r4, r3, #4
 80057b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057c4:	4642      	mov	r2, r8
 80057c6:	464b      	mov	r3, r9
 80057c8:	1891      	adds	r1, r2, r2
 80057ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80057cc:	415b      	adcs	r3, r3
 80057ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057d4:	4641      	mov	r1, r8
 80057d6:	eb12 0a01 	adds.w	sl, r2, r1
 80057da:	4649      	mov	r1, r9
 80057dc:	eb43 0b01 	adc.w	fp, r3, r1
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f4:	4692      	mov	sl, r2
 80057f6:	469b      	mov	fp, r3
 80057f8:	4643      	mov	r3, r8
 80057fa:	eb1a 0303 	adds.w	r3, sl, r3
 80057fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005802:	464b      	mov	r3, r9
 8005804:	eb4b 0303 	adc.w	r3, fp, r3
 8005808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005818:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800581c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005820:	460b      	mov	r3, r1
 8005822:	18db      	adds	r3, r3, r3
 8005824:	643b      	str	r3, [r7, #64]	; 0x40
 8005826:	4613      	mov	r3, r2
 8005828:	eb42 0303 	adc.w	r3, r2, r3
 800582c:	647b      	str	r3, [r7, #68]	; 0x44
 800582e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005832:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005836:	f7fb f9b7 	bl	8000ba8 <__aeabi_uldivmod>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	4611      	mov	r1, r2
 8005840:	4b3b      	ldr	r3, [pc, #236]	; (8005930 <UART_SetConfig+0x2d4>)
 8005842:	fba3 2301 	umull	r2, r3, r3, r1
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	2264      	movs	r2, #100	; 0x64
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	1acb      	subs	r3, r1, r3
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005856:	4b36      	ldr	r3, [pc, #216]	; (8005930 <UART_SetConfig+0x2d4>)
 8005858:	fba3 2302 	umull	r2, r3, r3, r2
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005864:	441c      	add	r4, r3
 8005866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800586a:	2200      	movs	r2, #0
 800586c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005870:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005874:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005878:	4642      	mov	r2, r8
 800587a:	464b      	mov	r3, r9
 800587c:	1891      	adds	r1, r2, r2
 800587e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005880:	415b      	adcs	r3, r3
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005888:	4641      	mov	r1, r8
 800588a:	1851      	adds	r1, r2, r1
 800588c:	6339      	str	r1, [r7, #48]	; 0x30
 800588e:	4649      	mov	r1, r9
 8005890:	414b      	adcs	r3, r1
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058a0:	4659      	mov	r1, fp
 80058a2:	00cb      	lsls	r3, r1, #3
 80058a4:	4651      	mov	r1, sl
 80058a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058aa:	4651      	mov	r1, sl
 80058ac:	00ca      	lsls	r2, r1, #3
 80058ae:	4610      	mov	r0, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	4642      	mov	r2, r8
 80058b6:	189b      	adds	r3, r3, r2
 80058b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058bc:	464b      	mov	r3, r9
 80058be:	460a      	mov	r2, r1
 80058c0:	eb42 0303 	adc.w	r3, r2, r3
 80058c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058dc:	460b      	mov	r3, r1
 80058de:	18db      	adds	r3, r3, r3
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e2:	4613      	mov	r3, r2
 80058e4:	eb42 0303 	adc.w	r3, r2, r3
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058f2:	f7fb f959 	bl	8000ba8 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <UART_SetConfig+0x2d4>)
 80058fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	2164      	movs	r1, #100	; 0x64
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	3332      	adds	r3, #50	; 0x32
 800590e:	4a08      	ldr	r2, [pc, #32]	; (8005930 <UART_SetConfig+0x2d4>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	f003 0207 	and.w	r2, r3, #7
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4422      	add	r2, r4
 8005922:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005924:	e105      	b.n	8005b32 <UART_SetConfig+0x4d6>
 8005926:	bf00      	nop
 8005928:	40011000 	.word	0x40011000
 800592c:	40011400 	.word	0x40011400
 8005930:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005938:	2200      	movs	r2, #0
 800593a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800593e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005942:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005946:	4642      	mov	r2, r8
 8005948:	464b      	mov	r3, r9
 800594a:	1891      	adds	r1, r2, r2
 800594c:	6239      	str	r1, [r7, #32]
 800594e:	415b      	adcs	r3, r3
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
 8005952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005956:	4641      	mov	r1, r8
 8005958:	1854      	adds	r4, r2, r1
 800595a:	4649      	mov	r1, r9
 800595c:	eb43 0501 	adc.w	r5, r3, r1
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	00eb      	lsls	r3, r5, #3
 800596a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800596e:	00e2      	lsls	r2, r4, #3
 8005970:	4614      	mov	r4, r2
 8005972:	461d      	mov	r5, r3
 8005974:	4643      	mov	r3, r8
 8005976:	18e3      	adds	r3, r4, r3
 8005978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800597c:	464b      	mov	r3, r9
 800597e:	eb45 0303 	adc.w	r3, r5, r3
 8005982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005992:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	f04f 0300 	mov.w	r3, #0
 800599e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059a2:	4629      	mov	r1, r5
 80059a4:	008b      	lsls	r3, r1, #2
 80059a6:	4621      	mov	r1, r4
 80059a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ac:	4621      	mov	r1, r4
 80059ae:	008a      	lsls	r2, r1, #2
 80059b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059b4:	f7fb f8f8 	bl	8000ba8 <__aeabi_uldivmod>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4b60      	ldr	r3, [pc, #384]	; (8005b40 <UART_SetConfig+0x4e4>)
 80059be:	fba3 2302 	umull	r2, r3, r3, r2
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	011c      	lsls	r4, r3, #4
 80059c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	1891      	adds	r1, r2, r2
 80059de:	61b9      	str	r1, [r7, #24]
 80059e0:	415b      	adcs	r3, r3
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059e8:	4641      	mov	r1, r8
 80059ea:	1851      	adds	r1, r2, r1
 80059ec:	6139      	str	r1, [r7, #16]
 80059ee:	4649      	mov	r1, r9
 80059f0:	414b      	adcs	r3, r1
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a00:	4659      	mov	r1, fp
 8005a02:	00cb      	lsls	r3, r1, #3
 8005a04:	4651      	mov	r1, sl
 8005a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0a:	4651      	mov	r1, sl
 8005a0c:	00ca      	lsls	r2, r1, #3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4619      	mov	r1, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	4642      	mov	r2, r8
 8005a16:	189b      	adds	r3, r3, r2
 8005a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	460a      	mov	r2, r1
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a40:	4649      	mov	r1, r9
 8005a42:	008b      	lsls	r3, r1, #2
 8005a44:	4641      	mov	r1, r8
 8005a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	008a      	lsls	r2, r1, #2
 8005a4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a52:	f7fb f8a9 	bl	8000ba8 <__aeabi_uldivmod>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4b39      	ldr	r3, [pc, #228]	; (8005b40 <UART_SetConfig+0x4e4>)
 8005a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	2164      	movs	r1, #100	; 0x64
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	3332      	adds	r3, #50	; 0x32
 8005a6e:	4a34      	ldr	r2, [pc, #208]	; (8005b40 <UART_SetConfig+0x4e4>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a7a:	441c      	add	r4, r3
 8005a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a80:	2200      	movs	r2, #0
 8005a82:	673b      	str	r3, [r7, #112]	; 0x70
 8005a84:	677a      	str	r2, [r7, #116]	; 0x74
 8005a86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a8a:	4642      	mov	r2, r8
 8005a8c:	464b      	mov	r3, r9
 8005a8e:	1891      	adds	r1, r2, r2
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	415b      	adcs	r3, r3
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a9a:	4641      	mov	r1, r8
 8005a9c:	1851      	adds	r1, r2, r1
 8005a9e:	6039      	str	r1, [r7, #0]
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	414b      	adcs	r3, r1
 8005aa4:	607b      	str	r3, [r7, #4]
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ab2:	4659      	mov	r1, fp
 8005ab4:	00cb      	lsls	r3, r1, #3
 8005ab6:	4651      	mov	r1, sl
 8005ab8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005abc:	4651      	mov	r1, sl
 8005abe:	00ca      	lsls	r2, r1, #3
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	4642      	mov	r2, r8
 8005ac8:	189b      	adds	r3, r3, r2
 8005aca:	66bb      	str	r3, [r7, #104]	; 0x68
 8005acc:	464b      	mov	r3, r9
 8005ace:	460a      	mov	r2, r1
 8005ad0:	eb42 0303 	adc.w	r3, r2, r3
 8005ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae0:	667a      	str	r2, [r7, #100]	; 0x64
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005aee:	4649      	mov	r1, r9
 8005af0:	008b      	lsls	r3, r1, #2
 8005af2:	4641      	mov	r1, r8
 8005af4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005af8:	4641      	mov	r1, r8
 8005afa:	008a      	lsls	r2, r1, #2
 8005afc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b00:	f7fb f852 	bl	8000ba8 <__aeabi_uldivmod>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <UART_SetConfig+0x4e4>)
 8005b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	2164      	movs	r1, #100	; 0x64
 8005b12:	fb01 f303 	mul.w	r3, r1, r3
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	3332      	adds	r3, #50	; 0x32
 8005b1c:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <UART_SetConfig+0x4e4>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	f003 020f 	and.w	r2, r3, #15
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4422      	add	r2, r4
 8005b30:	609a      	str	r2, [r3, #8]
}
 8005b32:	bf00      	nop
 8005b34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b3e:	bf00      	nop
 8005b40:	51eb851f 	.word	0x51eb851f

08005b44 <__errno>:
 8005b44:	4b01      	ldr	r3, [pc, #4]	; (8005b4c <__errno+0x8>)
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	2000000c 	.word	0x2000000c

08005b50 <__libc_init_array>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4d0d      	ldr	r5, [pc, #52]	; (8005b88 <__libc_init_array+0x38>)
 8005b54:	4c0d      	ldr	r4, [pc, #52]	; (8005b8c <__libc_init_array+0x3c>)
 8005b56:	1b64      	subs	r4, r4, r5
 8005b58:	10a4      	asrs	r4, r4, #2
 8005b5a:	2600      	movs	r6, #0
 8005b5c:	42a6      	cmp	r6, r4
 8005b5e:	d109      	bne.n	8005b74 <__libc_init_array+0x24>
 8005b60:	4d0b      	ldr	r5, [pc, #44]	; (8005b90 <__libc_init_array+0x40>)
 8005b62:	4c0c      	ldr	r4, [pc, #48]	; (8005b94 <__libc_init_array+0x44>)
 8005b64:	f002 fd50 	bl	8008608 <_init>
 8005b68:	1b64      	subs	r4, r4, r5
 8005b6a:	10a4      	asrs	r4, r4, #2
 8005b6c:	2600      	movs	r6, #0
 8005b6e:	42a6      	cmp	r6, r4
 8005b70:	d105      	bne.n	8005b7e <__libc_init_array+0x2e>
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b78:	4798      	blx	r3
 8005b7a:	3601      	adds	r6, #1
 8005b7c:	e7ee      	b.n	8005b5c <__libc_init_array+0xc>
 8005b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b82:	4798      	blx	r3
 8005b84:	3601      	adds	r6, #1
 8005b86:	e7f2      	b.n	8005b6e <__libc_init_array+0x1e>
 8005b88:	08008a34 	.word	0x08008a34
 8005b8c:	08008a34 	.word	0x08008a34
 8005b90:	08008a34 	.word	0x08008a34
 8005b94:	08008a38 	.word	0x08008a38

08005b98 <memset>:
 8005b98:	4402      	add	r2, r0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d100      	bne.n	8005ba2 <memset+0xa>
 8005ba0:	4770      	bx	lr
 8005ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba6:	e7f9      	b.n	8005b9c <memset+0x4>

08005ba8 <__cvt>:
 8005ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	ec55 4b10 	vmov	r4, r5, d0
 8005bb0:	2d00      	cmp	r5, #0
 8005bb2:	460e      	mov	r6, r1
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	bfbb      	ittet	lt
 8005bba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005bbe:	461d      	movlt	r5, r3
 8005bc0:	2300      	movge	r3, #0
 8005bc2:	232d      	movlt	r3, #45	; 0x2d
 8005bc4:	700b      	strb	r3, [r1, #0]
 8005bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005bcc:	4691      	mov	r9, r2
 8005bce:	f023 0820 	bic.w	r8, r3, #32
 8005bd2:	bfbc      	itt	lt
 8005bd4:	4622      	movlt	r2, r4
 8005bd6:	4614      	movlt	r4, r2
 8005bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bdc:	d005      	beq.n	8005bea <__cvt+0x42>
 8005bde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005be2:	d100      	bne.n	8005be6 <__cvt+0x3e>
 8005be4:	3601      	adds	r6, #1
 8005be6:	2102      	movs	r1, #2
 8005be8:	e000      	b.n	8005bec <__cvt+0x44>
 8005bea:	2103      	movs	r1, #3
 8005bec:	ab03      	add	r3, sp, #12
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	ab02      	add	r3, sp, #8
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	ec45 4b10 	vmov	d0, r4, r5
 8005bf8:	4653      	mov	r3, sl
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	f000 fce4 	bl	80065c8 <_dtoa_r>
 8005c00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c04:	4607      	mov	r7, r0
 8005c06:	d102      	bne.n	8005c0e <__cvt+0x66>
 8005c08:	f019 0f01 	tst.w	r9, #1
 8005c0c:	d022      	beq.n	8005c54 <__cvt+0xac>
 8005c0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c12:	eb07 0906 	add.w	r9, r7, r6
 8005c16:	d110      	bne.n	8005c3a <__cvt+0x92>
 8005c18:	783b      	ldrb	r3, [r7, #0]
 8005c1a:	2b30      	cmp	r3, #48	; 0x30
 8005c1c:	d10a      	bne.n	8005c34 <__cvt+0x8c>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2300      	movs	r3, #0
 8005c22:	4620      	mov	r0, r4
 8005c24:	4629      	mov	r1, r5
 8005c26:	f7fa ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c2a:	b918      	cbnz	r0, 8005c34 <__cvt+0x8c>
 8005c2c:	f1c6 0601 	rsb	r6, r6, #1
 8005c30:	f8ca 6000 	str.w	r6, [sl]
 8005c34:	f8da 3000 	ldr.w	r3, [sl]
 8005c38:	4499      	add	r9, r3
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4620      	mov	r0, r4
 8005c40:	4629      	mov	r1, r5
 8005c42:	f7fa ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c46:	b108      	cbz	r0, 8005c4c <__cvt+0xa4>
 8005c48:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c4c:	2230      	movs	r2, #48	; 0x30
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	454b      	cmp	r3, r9
 8005c52:	d307      	bcc.n	8005c64 <__cvt+0xbc>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c58:	1bdb      	subs	r3, r3, r7
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	b004      	add	sp, #16
 8005c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c64:	1c59      	adds	r1, r3, #1
 8005c66:	9103      	str	r1, [sp, #12]
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e7f0      	b.n	8005c4e <__cvt+0xa6>

08005c6c <__exponent>:
 8005c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2900      	cmp	r1, #0
 8005c72:	bfb8      	it	lt
 8005c74:	4249      	neglt	r1, r1
 8005c76:	f803 2b02 	strb.w	r2, [r3], #2
 8005c7a:	bfb4      	ite	lt
 8005c7c:	222d      	movlt	r2, #45	; 0x2d
 8005c7e:	222b      	movge	r2, #43	; 0x2b
 8005c80:	2909      	cmp	r1, #9
 8005c82:	7042      	strb	r2, [r0, #1]
 8005c84:	dd2a      	ble.n	8005cdc <__exponent+0x70>
 8005c86:	f10d 0407 	add.w	r4, sp, #7
 8005c8a:	46a4      	mov	ip, r4
 8005c8c:	270a      	movs	r7, #10
 8005c8e:	46a6      	mov	lr, r4
 8005c90:	460a      	mov	r2, r1
 8005c92:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c96:	fb07 1516 	mls	r5, r7, r6, r1
 8005c9a:	3530      	adds	r5, #48	; 0x30
 8005c9c:	2a63      	cmp	r2, #99	; 0x63
 8005c9e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005ca2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	dcf1      	bgt.n	8005c8e <__exponent+0x22>
 8005caa:	3130      	adds	r1, #48	; 0x30
 8005cac:	f1ae 0502 	sub.w	r5, lr, #2
 8005cb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005cb4:	1c44      	adds	r4, r0, #1
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4561      	cmp	r1, ip
 8005cba:	d30a      	bcc.n	8005cd2 <__exponent+0x66>
 8005cbc:	f10d 0209 	add.w	r2, sp, #9
 8005cc0:	eba2 020e 	sub.w	r2, r2, lr
 8005cc4:	4565      	cmp	r5, ip
 8005cc6:	bf88      	it	hi
 8005cc8:	2200      	movhi	r2, #0
 8005cca:	4413      	add	r3, r2
 8005ccc:	1a18      	subs	r0, r3, r0
 8005cce:	b003      	add	sp, #12
 8005cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005cda:	e7ed      	b.n	8005cb8 <__exponent+0x4c>
 8005cdc:	2330      	movs	r3, #48	; 0x30
 8005cde:	3130      	adds	r1, #48	; 0x30
 8005ce0:	7083      	strb	r3, [r0, #2]
 8005ce2:	70c1      	strb	r1, [r0, #3]
 8005ce4:	1d03      	adds	r3, r0, #4
 8005ce6:	e7f1      	b.n	8005ccc <__exponent+0x60>

08005ce8 <_printf_float>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	ed2d 8b02 	vpush	{d8}
 8005cf0:	b08d      	sub	sp, #52	; 0x34
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	461f      	mov	r7, r3
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	f001 fb47 	bl	8007390 <_localeconv_r>
 8005d02:	f8d0 a000 	ldr.w	sl, [r0]
 8005d06:	4650      	mov	r0, sl
 8005d08:	f7fa fa62 	bl	80001d0 <strlen>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	9305      	str	r3, [sp, #20]
 8005d14:	f8d8 3000 	ldr.w	r3, [r8]
 8005d18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d1c:	3307      	adds	r3, #7
 8005d1e:	f023 0307 	bic.w	r3, r3, #7
 8005d22:	f103 0208 	add.w	r2, r3, #8
 8005d26:	f8c8 2000 	str.w	r2, [r8]
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d3a:	9307      	str	r3, [sp, #28]
 8005d3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d40:	ee08 0a10 	vmov	s16, r0
 8005d44:	4b9f      	ldr	r3, [pc, #636]	; (8005fc4 <_printf_float+0x2dc>)
 8005d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d4e:	f7fa feed 	bl	8000b2c <__aeabi_dcmpun>
 8005d52:	bb88      	cbnz	r0, 8005db8 <_printf_float+0xd0>
 8005d54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d58:	4b9a      	ldr	r3, [pc, #616]	; (8005fc4 <_printf_float+0x2dc>)
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d5e:	f7fa fec7 	bl	8000af0 <__aeabi_dcmple>
 8005d62:	bb48      	cbnz	r0, 8005db8 <_printf_float+0xd0>
 8005d64:	2200      	movs	r2, #0
 8005d66:	2300      	movs	r3, #0
 8005d68:	4640      	mov	r0, r8
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	f7fa feb6 	bl	8000adc <__aeabi_dcmplt>
 8005d70:	b110      	cbz	r0, 8005d78 <_printf_float+0x90>
 8005d72:	232d      	movs	r3, #45	; 0x2d
 8005d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d78:	4b93      	ldr	r3, [pc, #588]	; (8005fc8 <_printf_float+0x2e0>)
 8005d7a:	4894      	ldr	r0, [pc, #592]	; (8005fcc <_printf_float+0x2e4>)
 8005d7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d80:	bf94      	ite	ls
 8005d82:	4698      	movls	r8, r3
 8005d84:	4680      	movhi	r8, r0
 8005d86:	2303      	movs	r3, #3
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	9b05      	ldr	r3, [sp, #20]
 8005d8c:	f023 0204 	bic.w	r2, r3, #4
 8005d90:	6022      	str	r2, [r4, #0]
 8005d92:	f04f 0900 	mov.w	r9, #0
 8005d96:	9700      	str	r7, [sp, #0]
 8005d98:	4633      	mov	r3, r6
 8005d9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 f9d8 	bl	8006154 <_printf_common>
 8005da4:	3001      	adds	r0, #1
 8005da6:	f040 8090 	bne.w	8005eca <_printf_float+0x1e2>
 8005daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dae:	b00d      	add	sp, #52	; 0x34
 8005db0:	ecbd 8b02 	vpop	{d8}
 8005db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db8:	4642      	mov	r2, r8
 8005dba:	464b      	mov	r3, r9
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	f7fa feb4 	bl	8000b2c <__aeabi_dcmpun>
 8005dc4:	b140      	cbz	r0, 8005dd8 <_printf_float+0xf0>
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bfbc      	itt	lt
 8005dcc:	232d      	movlt	r3, #45	; 0x2d
 8005dce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005dd2:	487f      	ldr	r0, [pc, #508]	; (8005fd0 <_printf_float+0x2e8>)
 8005dd4:	4b7f      	ldr	r3, [pc, #508]	; (8005fd4 <_printf_float+0x2ec>)
 8005dd6:	e7d1      	b.n	8005d7c <_printf_float+0x94>
 8005dd8:	6863      	ldr	r3, [r4, #4]
 8005dda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005dde:	9206      	str	r2, [sp, #24]
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	d13f      	bne.n	8005e64 <_printf_float+0x17c>
 8005de4:	2306      	movs	r3, #6
 8005de6:	6063      	str	r3, [r4, #4]
 8005de8:	9b05      	ldr	r3, [sp, #20]
 8005dea:	6861      	ldr	r1, [r4, #4]
 8005dec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005df0:	2300      	movs	r3, #0
 8005df2:	9303      	str	r3, [sp, #12]
 8005df4:	ab0a      	add	r3, sp, #40	; 0x28
 8005df6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005dfa:	ab09      	add	r3, sp, #36	; 0x24
 8005dfc:	ec49 8b10 	vmov	d0, r8, r9
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	6022      	str	r2, [r4, #0]
 8005e04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f7ff fecd 	bl	8005ba8 <__cvt>
 8005e0e:	9b06      	ldr	r3, [sp, #24]
 8005e10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e12:	2b47      	cmp	r3, #71	; 0x47
 8005e14:	4680      	mov	r8, r0
 8005e16:	d108      	bne.n	8005e2a <_printf_float+0x142>
 8005e18:	1cc8      	adds	r0, r1, #3
 8005e1a:	db02      	blt.n	8005e22 <_printf_float+0x13a>
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	4299      	cmp	r1, r3
 8005e20:	dd41      	ble.n	8005ea6 <_printf_float+0x1be>
 8005e22:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e26:	fa5f fb8b 	uxtb.w	fp, fp
 8005e2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e2e:	d820      	bhi.n	8005e72 <_printf_float+0x18a>
 8005e30:	3901      	subs	r1, #1
 8005e32:	465a      	mov	r2, fp
 8005e34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e38:	9109      	str	r1, [sp, #36]	; 0x24
 8005e3a:	f7ff ff17 	bl	8005c6c <__exponent>
 8005e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e40:	1813      	adds	r3, r2, r0
 8005e42:	2a01      	cmp	r2, #1
 8005e44:	4681      	mov	r9, r0
 8005e46:	6123      	str	r3, [r4, #16]
 8005e48:	dc02      	bgt.n	8005e50 <_printf_float+0x168>
 8005e4a:	6822      	ldr	r2, [r4, #0]
 8005e4c:	07d2      	lsls	r2, r2, #31
 8005e4e:	d501      	bpl.n	8005e54 <_printf_float+0x16c>
 8005e50:	3301      	adds	r3, #1
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d09c      	beq.n	8005d96 <_printf_float+0xae>
 8005e5c:	232d      	movs	r3, #45	; 0x2d
 8005e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e62:	e798      	b.n	8005d96 <_printf_float+0xae>
 8005e64:	9a06      	ldr	r2, [sp, #24]
 8005e66:	2a47      	cmp	r2, #71	; 0x47
 8005e68:	d1be      	bne.n	8005de8 <_printf_float+0x100>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1bc      	bne.n	8005de8 <_printf_float+0x100>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e7b9      	b.n	8005de6 <_printf_float+0xfe>
 8005e72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e76:	d118      	bne.n	8005eaa <_printf_float+0x1c2>
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	6863      	ldr	r3, [r4, #4]
 8005e7c:	dd0b      	ble.n	8005e96 <_printf_float+0x1ae>
 8005e7e:	6121      	str	r1, [r4, #16]
 8005e80:	b913      	cbnz	r3, 8005e88 <_printf_float+0x1a0>
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	07d0      	lsls	r0, r2, #31
 8005e86:	d502      	bpl.n	8005e8e <_printf_float+0x1a6>
 8005e88:	3301      	adds	r3, #1
 8005e8a:	440b      	add	r3, r1
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e90:	f04f 0900 	mov.w	r9, #0
 8005e94:	e7de      	b.n	8005e54 <_printf_float+0x16c>
 8005e96:	b913      	cbnz	r3, 8005e9e <_printf_float+0x1b6>
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	07d2      	lsls	r2, r2, #31
 8005e9c:	d501      	bpl.n	8005ea2 <_printf_float+0x1ba>
 8005e9e:	3302      	adds	r3, #2
 8005ea0:	e7f4      	b.n	8005e8c <_printf_float+0x1a4>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e7f2      	b.n	8005e8c <_printf_float+0x1a4>
 8005ea6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eac:	4299      	cmp	r1, r3
 8005eae:	db05      	blt.n	8005ebc <_printf_float+0x1d4>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	6121      	str	r1, [r4, #16]
 8005eb4:	07d8      	lsls	r0, r3, #31
 8005eb6:	d5ea      	bpl.n	8005e8e <_printf_float+0x1a6>
 8005eb8:	1c4b      	adds	r3, r1, #1
 8005eba:	e7e7      	b.n	8005e8c <_printf_float+0x1a4>
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	bfd4      	ite	le
 8005ec0:	f1c1 0202 	rsble	r2, r1, #2
 8005ec4:	2201      	movgt	r2, #1
 8005ec6:	4413      	add	r3, r2
 8005ec8:	e7e0      	b.n	8005e8c <_printf_float+0x1a4>
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	055a      	lsls	r2, r3, #21
 8005ece:	d407      	bmi.n	8005ee0 <_printf_float+0x1f8>
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	4642      	mov	r2, r8
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b8      	blx	r7
 8005eda:	3001      	adds	r0, #1
 8005edc:	d12c      	bne.n	8005f38 <_printf_float+0x250>
 8005ede:	e764      	b.n	8005daa <_printf_float+0xc2>
 8005ee0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ee4:	f240 80e0 	bls.w	80060a8 <_printf_float+0x3c0>
 8005ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005eec:	2200      	movs	r2, #0
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f7fa fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d034      	beq.n	8005f62 <_printf_float+0x27a>
 8005ef8:	4a37      	ldr	r2, [pc, #220]	; (8005fd8 <_printf_float+0x2f0>)
 8005efa:	2301      	movs	r3, #1
 8005efc:	4631      	mov	r1, r6
 8005efe:	4628      	mov	r0, r5
 8005f00:	47b8      	blx	r7
 8005f02:	3001      	adds	r0, #1
 8005f04:	f43f af51 	beq.w	8005daa <_printf_float+0xc2>
 8005f08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	db02      	blt.n	8005f16 <_printf_float+0x22e>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	07d8      	lsls	r0, r3, #31
 8005f14:	d510      	bpl.n	8005f38 <_printf_float+0x250>
 8005f16:	ee18 3a10 	vmov	r3, s16
 8005f1a:	4652      	mov	r2, sl
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4628      	mov	r0, r5
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	f43f af41 	beq.w	8005daa <_printf_float+0xc2>
 8005f28:	f04f 0800 	mov.w	r8, #0
 8005f2c:	f104 091a 	add.w	r9, r4, #26
 8005f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f32:	3b01      	subs	r3, #1
 8005f34:	4543      	cmp	r3, r8
 8005f36:	dc09      	bgt.n	8005f4c <_printf_float+0x264>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	079b      	lsls	r3, r3, #30
 8005f3c:	f100 8105 	bmi.w	800614a <_printf_float+0x462>
 8005f40:	68e0      	ldr	r0, [r4, #12]
 8005f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f44:	4298      	cmp	r0, r3
 8005f46:	bfb8      	it	lt
 8005f48:	4618      	movlt	r0, r3
 8005f4a:	e730      	b.n	8005dae <_printf_float+0xc6>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	464a      	mov	r2, r9
 8005f50:	4631      	mov	r1, r6
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b8      	blx	r7
 8005f56:	3001      	adds	r0, #1
 8005f58:	f43f af27 	beq.w	8005daa <_printf_float+0xc2>
 8005f5c:	f108 0801 	add.w	r8, r8, #1
 8005f60:	e7e6      	b.n	8005f30 <_printf_float+0x248>
 8005f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	dc39      	bgt.n	8005fdc <_printf_float+0x2f4>
 8005f68:	4a1b      	ldr	r2, [pc, #108]	; (8005fd8 <_printf_float+0x2f0>)
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	f43f af19 	beq.w	8005daa <_printf_float+0xc2>
 8005f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	d102      	bne.n	8005f86 <_printf_float+0x29e>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	07d9      	lsls	r1, r3, #31
 8005f84:	d5d8      	bpl.n	8005f38 <_printf_float+0x250>
 8005f86:	ee18 3a10 	vmov	r3, s16
 8005f8a:	4652      	mov	r2, sl
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	4628      	mov	r0, r5
 8005f90:	47b8      	blx	r7
 8005f92:	3001      	adds	r0, #1
 8005f94:	f43f af09 	beq.w	8005daa <_printf_float+0xc2>
 8005f98:	f04f 0900 	mov.w	r9, #0
 8005f9c:	f104 0a1a 	add.w	sl, r4, #26
 8005fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa2:	425b      	negs	r3, r3
 8005fa4:	454b      	cmp	r3, r9
 8005fa6:	dc01      	bgt.n	8005fac <_printf_float+0x2c4>
 8005fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005faa:	e792      	b.n	8005ed2 <_printf_float+0x1ea>
 8005fac:	2301      	movs	r3, #1
 8005fae:	4652      	mov	r2, sl
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	47b8      	blx	r7
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	f43f aef7 	beq.w	8005daa <_printf_float+0xc2>
 8005fbc:	f109 0901 	add.w	r9, r9, #1
 8005fc0:	e7ee      	b.n	8005fa0 <_printf_float+0x2b8>
 8005fc2:	bf00      	nop
 8005fc4:	7fefffff 	.word	0x7fefffff
 8005fc8:	08008654 	.word	0x08008654
 8005fcc:	08008658 	.word	0x08008658
 8005fd0:	08008660 	.word	0x08008660
 8005fd4:	0800865c 	.word	0x0800865c
 8005fd8:	08008664 	.word	0x08008664
 8005fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	bfa8      	it	ge
 8005fe4:	461a      	movge	r2, r3
 8005fe6:	2a00      	cmp	r2, #0
 8005fe8:	4691      	mov	r9, r2
 8005fea:	dc37      	bgt.n	800605c <_printf_float+0x374>
 8005fec:	f04f 0b00 	mov.w	fp, #0
 8005ff0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ff4:	f104 021a 	add.w	r2, r4, #26
 8005ff8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	eba3 0309 	sub.w	r3, r3, r9
 8006000:	455b      	cmp	r3, fp
 8006002:	dc33      	bgt.n	800606c <_printf_float+0x384>
 8006004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006008:	429a      	cmp	r2, r3
 800600a:	db3b      	blt.n	8006084 <_printf_float+0x39c>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	07da      	lsls	r2, r3, #31
 8006010:	d438      	bmi.n	8006084 <_printf_float+0x39c>
 8006012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006014:	9a05      	ldr	r2, [sp, #20]
 8006016:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006018:	1a9a      	subs	r2, r3, r2
 800601a:	eba3 0901 	sub.w	r9, r3, r1
 800601e:	4591      	cmp	r9, r2
 8006020:	bfa8      	it	ge
 8006022:	4691      	movge	r9, r2
 8006024:	f1b9 0f00 	cmp.w	r9, #0
 8006028:	dc35      	bgt.n	8006096 <_printf_float+0x3ae>
 800602a:	f04f 0800 	mov.w	r8, #0
 800602e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006032:	f104 0a1a 	add.w	sl, r4, #26
 8006036:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	eba3 0309 	sub.w	r3, r3, r9
 8006040:	4543      	cmp	r3, r8
 8006042:	f77f af79 	ble.w	8005f38 <_printf_float+0x250>
 8006046:	2301      	movs	r3, #1
 8006048:	4652      	mov	r2, sl
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	f43f aeaa 	beq.w	8005daa <_printf_float+0xc2>
 8006056:	f108 0801 	add.w	r8, r8, #1
 800605a:	e7ec      	b.n	8006036 <_printf_float+0x34e>
 800605c:	4613      	mov	r3, r2
 800605e:	4631      	mov	r1, r6
 8006060:	4642      	mov	r2, r8
 8006062:	4628      	mov	r0, r5
 8006064:	47b8      	blx	r7
 8006066:	3001      	adds	r0, #1
 8006068:	d1c0      	bne.n	8005fec <_printf_float+0x304>
 800606a:	e69e      	b.n	8005daa <_printf_float+0xc2>
 800606c:	2301      	movs	r3, #1
 800606e:	4631      	mov	r1, r6
 8006070:	4628      	mov	r0, r5
 8006072:	9205      	str	r2, [sp, #20]
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	f43f ae97 	beq.w	8005daa <_printf_float+0xc2>
 800607c:	9a05      	ldr	r2, [sp, #20]
 800607e:	f10b 0b01 	add.w	fp, fp, #1
 8006082:	e7b9      	b.n	8005ff8 <_printf_float+0x310>
 8006084:	ee18 3a10 	vmov	r3, s16
 8006088:	4652      	mov	r2, sl
 800608a:	4631      	mov	r1, r6
 800608c:	4628      	mov	r0, r5
 800608e:	47b8      	blx	r7
 8006090:	3001      	adds	r0, #1
 8006092:	d1be      	bne.n	8006012 <_printf_float+0x32a>
 8006094:	e689      	b.n	8005daa <_printf_float+0xc2>
 8006096:	9a05      	ldr	r2, [sp, #20]
 8006098:	464b      	mov	r3, r9
 800609a:	4442      	add	r2, r8
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	d1c1      	bne.n	800602a <_printf_float+0x342>
 80060a6:	e680      	b.n	8005daa <_printf_float+0xc2>
 80060a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060aa:	2a01      	cmp	r2, #1
 80060ac:	dc01      	bgt.n	80060b2 <_printf_float+0x3ca>
 80060ae:	07db      	lsls	r3, r3, #31
 80060b0:	d538      	bpl.n	8006124 <_printf_float+0x43c>
 80060b2:	2301      	movs	r3, #1
 80060b4:	4642      	mov	r2, r8
 80060b6:	4631      	mov	r1, r6
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	f43f ae74 	beq.w	8005daa <_printf_float+0xc2>
 80060c2:	ee18 3a10 	vmov	r3, s16
 80060c6:	4652      	mov	r2, sl
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f ae6b 	beq.w	8005daa <_printf_float+0xc2>
 80060d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060d8:	2200      	movs	r2, #0
 80060da:	2300      	movs	r3, #0
 80060dc:	f7fa fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80060e0:	b9d8      	cbnz	r0, 800611a <_printf_float+0x432>
 80060e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e4:	f108 0201 	add.w	r2, r8, #1
 80060e8:	3b01      	subs	r3, #1
 80060ea:	4631      	mov	r1, r6
 80060ec:	4628      	mov	r0, r5
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	d10e      	bne.n	8006112 <_printf_float+0x42a>
 80060f4:	e659      	b.n	8005daa <_printf_float+0xc2>
 80060f6:	2301      	movs	r3, #1
 80060f8:	4652      	mov	r2, sl
 80060fa:	4631      	mov	r1, r6
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b8      	blx	r7
 8006100:	3001      	adds	r0, #1
 8006102:	f43f ae52 	beq.w	8005daa <_printf_float+0xc2>
 8006106:	f108 0801 	add.w	r8, r8, #1
 800610a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800610c:	3b01      	subs	r3, #1
 800610e:	4543      	cmp	r3, r8
 8006110:	dcf1      	bgt.n	80060f6 <_printf_float+0x40e>
 8006112:	464b      	mov	r3, r9
 8006114:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006118:	e6dc      	b.n	8005ed4 <_printf_float+0x1ec>
 800611a:	f04f 0800 	mov.w	r8, #0
 800611e:	f104 0a1a 	add.w	sl, r4, #26
 8006122:	e7f2      	b.n	800610a <_printf_float+0x422>
 8006124:	2301      	movs	r3, #1
 8006126:	4642      	mov	r2, r8
 8006128:	e7df      	b.n	80060ea <_printf_float+0x402>
 800612a:	2301      	movs	r3, #1
 800612c:	464a      	mov	r2, r9
 800612e:	4631      	mov	r1, r6
 8006130:	4628      	mov	r0, r5
 8006132:	47b8      	blx	r7
 8006134:	3001      	adds	r0, #1
 8006136:	f43f ae38 	beq.w	8005daa <_printf_float+0xc2>
 800613a:	f108 0801 	add.w	r8, r8, #1
 800613e:	68e3      	ldr	r3, [r4, #12]
 8006140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006142:	1a5b      	subs	r3, r3, r1
 8006144:	4543      	cmp	r3, r8
 8006146:	dcf0      	bgt.n	800612a <_printf_float+0x442>
 8006148:	e6fa      	b.n	8005f40 <_printf_float+0x258>
 800614a:	f04f 0800 	mov.w	r8, #0
 800614e:	f104 0919 	add.w	r9, r4, #25
 8006152:	e7f4      	b.n	800613e <_printf_float+0x456>

08006154 <_printf_common>:
 8006154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	4616      	mov	r6, r2
 800615a:	4699      	mov	r9, r3
 800615c:	688a      	ldr	r2, [r1, #8]
 800615e:	690b      	ldr	r3, [r1, #16]
 8006160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006164:	4293      	cmp	r3, r2
 8006166:	bfb8      	it	lt
 8006168:	4613      	movlt	r3, r2
 800616a:	6033      	str	r3, [r6, #0]
 800616c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006170:	4607      	mov	r7, r0
 8006172:	460c      	mov	r4, r1
 8006174:	b10a      	cbz	r2, 800617a <_printf_common+0x26>
 8006176:	3301      	adds	r3, #1
 8006178:	6033      	str	r3, [r6, #0]
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	0699      	lsls	r1, r3, #26
 800617e:	bf42      	ittt	mi
 8006180:	6833      	ldrmi	r3, [r6, #0]
 8006182:	3302      	addmi	r3, #2
 8006184:	6033      	strmi	r3, [r6, #0]
 8006186:	6825      	ldr	r5, [r4, #0]
 8006188:	f015 0506 	ands.w	r5, r5, #6
 800618c:	d106      	bne.n	800619c <_printf_common+0x48>
 800618e:	f104 0a19 	add.w	sl, r4, #25
 8006192:	68e3      	ldr	r3, [r4, #12]
 8006194:	6832      	ldr	r2, [r6, #0]
 8006196:	1a9b      	subs	r3, r3, r2
 8006198:	42ab      	cmp	r3, r5
 800619a:	dc26      	bgt.n	80061ea <_printf_common+0x96>
 800619c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061a0:	1e13      	subs	r3, r2, #0
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	bf18      	it	ne
 80061a6:	2301      	movne	r3, #1
 80061a8:	0692      	lsls	r2, r2, #26
 80061aa:	d42b      	bmi.n	8006204 <_printf_common+0xb0>
 80061ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061b0:	4649      	mov	r1, r9
 80061b2:	4638      	mov	r0, r7
 80061b4:	47c0      	blx	r8
 80061b6:	3001      	adds	r0, #1
 80061b8:	d01e      	beq.n	80061f8 <_printf_common+0xa4>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	68e5      	ldr	r5, [r4, #12]
 80061be:	6832      	ldr	r2, [r6, #0]
 80061c0:	f003 0306 	and.w	r3, r3, #6
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	bf08      	it	eq
 80061c8:	1aad      	subeq	r5, r5, r2
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	6922      	ldr	r2, [r4, #16]
 80061ce:	bf0c      	ite	eq
 80061d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061d4:	2500      	movne	r5, #0
 80061d6:	4293      	cmp	r3, r2
 80061d8:	bfc4      	itt	gt
 80061da:	1a9b      	subgt	r3, r3, r2
 80061dc:	18ed      	addgt	r5, r5, r3
 80061de:	2600      	movs	r6, #0
 80061e0:	341a      	adds	r4, #26
 80061e2:	42b5      	cmp	r5, r6
 80061e4:	d11a      	bne.n	800621c <_printf_common+0xc8>
 80061e6:	2000      	movs	r0, #0
 80061e8:	e008      	b.n	80061fc <_printf_common+0xa8>
 80061ea:	2301      	movs	r3, #1
 80061ec:	4652      	mov	r2, sl
 80061ee:	4649      	mov	r1, r9
 80061f0:	4638      	mov	r0, r7
 80061f2:	47c0      	blx	r8
 80061f4:	3001      	adds	r0, #1
 80061f6:	d103      	bne.n	8006200 <_printf_common+0xac>
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	3501      	adds	r5, #1
 8006202:	e7c6      	b.n	8006192 <_printf_common+0x3e>
 8006204:	18e1      	adds	r1, r4, r3
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	2030      	movs	r0, #48	; 0x30
 800620a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800620e:	4422      	add	r2, r4
 8006210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006218:	3302      	adds	r3, #2
 800621a:	e7c7      	b.n	80061ac <_printf_common+0x58>
 800621c:	2301      	movs	r3, #1
 800621e:	4622      	mov	r2, r4
 8006220:	4649      	mov	r1, r9
 8006222:	4638      	mov	r0, r7
 8006224:	47c0      	blx	r8
 8006226:	3001      	adds	r0, #1
 8006228:	d0e6      	beq.n	80061f8 <_printf_common+0xa4>
 800622a:	3601      	adds	r6, #1
 800622c:	e7d9      	b.n	80061e2 <_printf_common+0x8e>
	...

08006230 <_printf_i>:
 8006230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	7e0f      	ldrb	r7, [r1, #24]
 8006236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006238:	2f78      	cmp	r7, #120	; 0x78
 800623a:	4691      	mov	r9, r2
 800623c:	4680      	mov	r8, r0
 800623e:	460c      	mov	r4, r1
 8006240:	469a      	mov	sl, r3
 8006242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006246:	d807      	bhi.n	8006258 <_printf_i+0x28>
 8006248:	2f62      	cmp	r7, #98	; 0x62
 800624a:	d80a      	bhi.n	8006262 <_printf_i+0x32>
 800624c:	2f00      	cmp	r7, #0
 800624e:	f000 80d8 	beq.w	8006402 <_printf_i+0x1d2>
 8006252:	2f58      	cmp	r7, #88	; 0x58
 8006254:	f000 80a3 	beq.w	800639e <_printf_i+0x16e>
 8006258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800625c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006260:	e03a      	b.n	80062d8 <_printf_i+0xa8>
 8006262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006266:	2b15      	cmp	r3, #21
 8006268:	d8f6      	bhi.n	8006258 <_printf_i+0x28>
 800626a:	a101      	add	r1, pc, #4	; (adr r1, 8006270 <_printf_i+0x40>)
 800626c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006270:	080062c9 	.word	0x080062c9
 8006274:	080062dd 	.word	0x080062dd
 8006278:	08006259 	.word	0x08006259
 800627c:	08006259 	.word	0x08006259
 8006280:	08006259 	.word	0x08006259
 8006284:	08006259 	.word	0x08006259
 8006288:	080062dd 	.word	0x080062dd
 800628c:	08006259 	.word	0x08006259
 8006290:	08006259 	.word	0x08006259
 8006294:	08006259 	.word	0x08006259
 8006298:	08006259 	.word	0x08006259
 800629c:	080063e9 	.word	0x080063e9
 80062a0:	0800630d 	.word	0x0800630d
 80062a4:	080063cb 	.word	0x080063cb
 80062a8:	08006259 	.word	0x08006259
 80062ac:	08006259 	.word	0x08006259
 80062b0:	0800640b 	.word	0x0800640b
 80062b4:	08006259 	.word	0x08006259
 80062b8:	0800630d 	.word	0x0800630d
 80062bc:	08006259 	.word	0x08006259
 80062c0:	08006259 	.word	0x08006259
 80062c4:	080063d3 	.word	0x080063d3
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	1d1a      	adds	r2, r3, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	602a      	str	r2, [r5, #0]
 80062d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062d8:	2301      	movs	r3, #1
 80062da:	e0a3      	b.n	8006424 <_printf_i+0x1f4>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	6829      	ldr	r1, [r5, #0]
 80062e0:	0606      	lsls	r6, r0, #24
 80062e2:	f101 0304 	add.w	r3, r1, #4
 80062e6:	d50a      	bpl.n	80062fe <_printf_i+0xce>
 80062e8:	680e      	ldr	r6, [r1, #0]
 80062ea:	602b      	str	r3, [r5, #0]
 80062ec:	2e00      	cmp	r6, #0
 80062ee:	da03      	bge.n	80062f8 <_printf_i+0xc8>
 80062f0:	232d      	movs	r3, #45	; 0x2d
 80062f2:	4276      	negs	r6, r6
 80062f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f8:	485e      	ldr	r0, [pc, #376]	; (8006474 <_printf_i+0x244>)
 80062fa:	230a      	movs	r3, #10
 80062fc:	e019      	b.n	8006332 <_printf_i+0x102>
 80062fe:	680e      	ldr	r6, [r1, #0]
 8006300:	602b      	str	r3, [r5, #0]
 8006302:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006306:	bf18      	it	ne
 8006308:	b236      	sxthne	r6, r6
 800630a:	e7ef      	b.n	80062ec <_printf_i+0xbc>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	6820      	ldr	r0, [r4, #0]
 8006310:	1d19      	adds	r1, r3, #4
 8006312:	6029      	str	r1, [r5, #0]
 8006314:	0601      	lsls	r1, r0, #24
 8006316:	d501      	bpl.n	800631c <_printf_i+0xec>
 8006318:	681e      	ldr	r6, [r3, #0]
 800631a:	e002      	b.n	8006322 <_printf_i+0xf2>
 800631c:	0646      	lsls	r6, r0, #25
 800631e:	d5fb      	bpl.n	8006318 <_printf_i+0xe8>
 8006320:	881e      	ldrh	r6, [r3, #0]
 8006322:	4854      	ldr	r0, [pc, #336]	; (8006474 <_printf_i+0x244>)
 8006324:	2f6f      	cmp	r7, #111	; 0x6f
 8006326:	bf0c      	ite	eq
 8006328:	2308      	moveq	r3, #8
 800632a:	230a      	movne	r3, #10
 800632c:	2100      	movs	r1, #0
 800632e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006332:	6865      	ldr	r5, [r4, #4]
 8006334:	60a5      	str	r5, [r4, #8]
 8006336:	2d00      	cmp	r5, #0
 8006338:	bfa2      	ittt	ge
 800633a:	6821      	ldrge	r1, [r4, #0]
 800633c:	f021 0104 	bicge.w	r1, r1, #4
 8006340:	6021      	strge	r1, [r4, #0]
 8006342:	b90e      	cbnz	r6, 8006348 <_printf_i+0x118>
 8006344:	2d00      	cmp	r5, #0
 8006346:	d04d      	beq.n	80063e4 <_printf_i+0x1b4>
 8006348:	4615      	mov	r5, r2
 800634a:	fbb6 f1f3 	udiv	r1, r6, r3
 800634e:	fb03 6711 	mls	r7, r3, r1, r6
 8006352:	5dc7      	ldrb	r7, [r0, r7]
 8006354:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006358:	4637      	mov	r7, r6
 800635a:	42bb      	cmp	r3, r7
 800635c:	460e      	mov	r6, r1
 800635e:	d9f4      	bls.n	800634a <_printf_i+0x11a>
 8006360:	2b08      	cmp	r3, #8
 8006362:	d10b      	bne.n	800637c <_printf_i+0x14c>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	07de      	lsls	r6, r3, #31
 8006368:	d508      	bpl.n	800637c <_printf_i+0x14c>
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	6861      	ldr	r1, [r4, #4]
 800636e:	4299      	cmp	r1, r3
 8006370:	bfde      	ittt	le
 8006372:	2330      	movle	r3, #48	; 0x30
 8006374:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006378:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800637c:	1b52      	subs	r2, r2, r5
 800637e:	6122      	str	r2, [r4, #16]
 8006380:	f8cd a000 	str.w	sl, [sp]
 8006384:	464b      	mov	r3, r9
 8006386:	aa03      	add	r2, sp, #12
 8006388:	4621      	mov	r1, r4
 800638a:	4640      	mov	r0, r8
 800638c:	f7ff fee2 	bl	8006154 <_printf_common>
 8006390:	3001      	adds	r0, #1
 8006392:	d14c      	bne.n	800642e <_printf_i+0x1fe>
 8006394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006398:	b004      	add	sp, #16
 800639a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639e:	4835      	ldr	r0, [pc, #212]	; (8006474 <_printf_i+0x244>)
 80063a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063a4:	6829      	ldr	r1, [r5, #0]
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80063ac:	6029      	str	r1, [r5, #0]
 80063ae:	061d      	lsls	r5, r3, #24
 80063b0:	d514      	bpl.n	80063dc <_printf_i+0x1ac>
 80063b2:	07df      	lsls	r7, r3, #31
 80063b4:	bf44      	itt	mi
 80063b6:	f043 0320 	orrmi.w	r3, r3, #32
 80063ba:	6023      	strmi	r3, [r4, #0]
 80063bc:	b91e      	cbnz	r6, 80063c6 <_printf_i+0x196>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	f023 0320 	bic.w	r3, r3, #32
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	2310      	movs	r3, #16
 80063c8:	e7b0      	b.n	800632c <_printf_i+0xfc>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	f043 0320 	orr.w	r3, r3, #32
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	2378      	movs	r3, #120	; 0x78
 80063d4:	4828      	ldr	r0, [pc, #160]	; (8006478 <_printf_i+0x248>)
 80063d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063da:	e7e3      	b.n	80063a4 <_printf_i+0x174>
 80063dc:	0659      	lsls	r1, r3, #25
 80063de:	bf48      	it	mi
 80063e0:	b2b6      	uxthmi	r6, r6
 80063e2:	e7e6      	b.n	80063b2 <_printf_i+0x182>
 80063e4:	4615      	mov	r5, r2
 80063e6:	e7bb      	b.n	8006360 <_printf_i+0x130>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	6826      	ldr	r6, [r4, #0]
 80063ec:	6961      	ldr	r1, [r4, #20]
 80063ee:	1d18      	adds	r0, r3, #4
 80063f0:	6028      	str	r0, [r5, #0]
 80063f2:	0635      	lsls	r5, r6, #24
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	d501      	bpl.n	80063fc <_printf_i+0x1cc>
 80063f8:	6019      	str	r1, [r3, #0]
 80063fa:	e002      	b.n	8006402 <_printf_i+0x1d2>
 80063fc:	0670      	lsls	r0, r6, #25
 80063fe:	d5fb      	bpl.n	80063f8 <_printf_i+0x1c8>
 8006400:	8019      	strh	r1, [r3, #0]
 8006402:	2300      	movs	r3, #0
 8006404:	6123      	str	r3, [r4, #16]
 8006406:	4615      	mov	r5, r2
 8006408:	e7ba      	b.n	8006380 <_printf_i+0x150>
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	1d1a      	adds	r2, r3, #4
 800640e:	602a      	str	r2, [r5, #0]
 8006410:	681d      	ldr	r5, [r3, #0]
 8006412:	6862      	ldr	r2, [r4, #4]
 8006414:	2100      	movs	r1, #0
 8006416:	4628      	mov	r0, r5
 8006418:	f7f9 fee2 	bl	80001e0 <memchr>
 800641c:	b108      	cbz	r0, 8006422 <_printf_i+0x1f2>
 800641e:	1b40      	subs	r0, r0, r5
 8006420:	6060      	str	r0, [r4, #4]
 8006422:	6863      	ldr	r3, [r4, #4]
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	2300      	movs	r3, #0
 8006428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800642c:	e7a8      	b.n	8006380 <_printf_i+0x150>
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	462a      	mov	r2, r5
 8006432:	4649      	mov	r1, r9
 8006434:	4640      	mov	r0, r8
 8006436:	47d0      	blx	sl
 8006438:	3001      	adds	r0, #1
 800643a:	d0ab      	beq.n	8006394 <_printf_i+0x164>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	079b      	lsls	r3, r3, #30
 8006440:	d413      	bmi.n	800646a <_printf_i+0x23a>
 8006442:	68e0      	ldr	r0, [r4, #12]
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	4298      	cmp	r0, r3
 8006448:	bfb8      	it	lt
 800644a:	4618      	movlt	r0, r3
 800644c:	e7a4      	b.n	8006398 <_printf_i+0x168>
 800644e:	2301      	movs	r3, #1
 8006450:	4632      	mov	r2, r6
 8006452:	4649      	mov	r1, r9
 8006454:	4640      	mov	r0, r8
 8006456:	47d0      	blx	sl
 8006458:	3001      	adds	r0, #1
 800645a:	d09b      	beq.n	8006394 <_printf_i+0x164>
 800645c:	3501      	adds	r5, #1
 800645e:	68e3      	ldr	r3, [r4, #12]
 8006460:	9903      	ldr	r1, [sp, #12]
 8006462:	1a5b      	subs	r3, r3, r1
 8006464:	42ab      	cmp	r3, r5
 8006466:	dcf2      	bgt.n	800644e <_printf_i+0x21e>
 8006468:	e7eb      	b.n	8006442 <_printf_i+0x212>
 800646a:	2500      	movs	r5, #0
 800646c:	f104 0619 	add.w	r6, r4, #25
 8006470:	e7f5      	b.n	800645e <_printf_i+0x22e>
 8006472:	bf00      	nop
 8006474:	08008666 	.word	0x08008666
 8006478:	08008677 	.word	0x08008677

0800647c <iprintf>:
 800647c:	b40f      	push	{r0, r1, r2, r3}
 800647e:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <iprintf+0x2c>)
 8006480:	b513      	push	{r0, r1, r4, lr}
 8006482:	681c      	ldr	r4, [r3, #0]
 8006484:	b124      	cbz	r4, 8006490 <iprintf+0x14>
 8006486:	69a3      	ldr	r3, [r4, #24]
 8006488:	b913      	cbnz	r3, 8006490 <iprintf+0x14>
 800648a:	4620      	mov	r0, r4
 800648c:	f000 fee2 	bl	8007254 <__sinit>
 8006490:	ab05      	add	r3, sp, #20
 8006492:	9a04      	ldr	r2, [sp, #16]
 8006494:	68a1      	ldr	r1, [r4, #8]
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	4620      	mov	r0, r4
 800649a:	f001 fc3b 	bl	8007d14 <_vfiprintf_r>
 800649e:	b002      	add	sp, #8
 80064a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a4:	b004      	add	sp, #16
 80064a6:	4770      	bx	lr
 80064a8:	2000000c 	.word	0x2000000c

080064ac <quorem>:
 80064ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	6903      	ldr	r3, [r0, #16]
 80064b2:	690c      	ldr	r4, [r1, #16]
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	4607      	mov	r7, r0
 80064b8:	f2c0 8081 	blt.w	80065be <quorem+0x112>
 80064bc:	3c01      	subs	r4, #1
 80064be:	f101 0814 	add.w	r8, r1, #20
 80064c2:	f100 0514 	add.w	r5, r0, #20
 80064c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064ca:	9301      	str	r3, [sp, #4]
 80064cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064d4:	3301      	adds	r3, #1
 80064d6:	429a      	cmp	r2, r3
 80064d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064e4:	d331      	bcc.n	800654a <quorem+0x9e>
 80064e6:	f04f 0e00 	mov.w	lr, #0
 80064ea:	4640      	mov	r0, r8
 80064ec:	46ac      	mov	ip, r5
 80064ee:	46f2      	mov	sl, lr
 80064f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80064f4:	b293      	uxth	r3, r2
 80064f6:	fb06 e303 	mla	r3, r6, r3, lr
 80064fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ebaa 0303 	sub.w	r3, sl, r3
 8006504:	f8dc a000 	ldr.w	sl, [ip]
 8006508:	0c12      	lsrs	r2, r2, #16
 800650a:	fa13 f38a 	uxtah	r3, r3, sl
 800650e:	fb06 e202 	mla	r2, r6, r2, lr
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	9b00      	ldr	r3, [sp, #0]
 8006516:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800651a:	b292      	uxth	r2, r2
 800651c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006520:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006524:	f8bd 3000 	ldrh.w	r3, [sp]
 8006528:	4581      	cmp	r9, r0
 800652a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800652e:	f84c 3b04 	str.w	r3, [ip], #4
 8006532:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006536:	d2db      	bcs.n	80064f0 <quorem+0x44>
 8006538:	f855 300b 	ldr.w	r3, [r5, fp]
 800653c:	b92b      	cbnz	r3, 800654a <quorem+0x9e>
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	3b04      	subs	r3, #4
 8006542:	429d      	cmp	r5, r3
 8006544:	461a      	mov	r2, r3
 8006546:	d32e      	bcc.n	80065a6 <quorem+0xfa>
 8006548:	613c      	str	r4, [r7, #16]
 800654a:	4638      	mov	r0, r7
 800654c:	f001 f9c0 	bl	80078d0 <__mcmp>
 8006550:	2800      	cmp	r0, #0
 8006552:	db24      	blt.n	800659e <quorem+0xf2>
 8006554:	3601      	adds	r6, #1
 8006556:	4628      	mov	r0, r5
 8006558:	f04f 0c00 	mov.w	ip, #0
 800655c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006560:	f8d0 e000 	ldr.w	lr, [r0]
 8006564:	b293      	uxth	r3, r2
 8006566:	ebac 0303 	sub.w	r3, ip, r3
 800656a:	0c12      	lsrs	r2, r2, #16
 800656c:	fa13 f38e 	uxtah	r3, r3, lr
 8006570:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006578:	b29b      	uxth	r3, r3
 800657a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800657e:	45c1      	cmp	r9, r8
 8006580:	f840 3b04 	str.w	r3, [r0], #4
 8006584:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006588:	d2e8      	bcs.n	800655c <quorem+0xb0>
 800658a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800658e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006592:	b922      	cbnz	r2, 800659e <quorem+0xf2>
 8006594:	3b04      	subs	r3, #4
 8006596:	429d      	cmp	r5, r3
 8006598:	461a      	mov	r2, r3
 800659a:	d30a      	bcc.n	80065b2 <quorem+0x106>
 800659c:	613c      	str	r4, [r7, #16]
 800659e:	4630      	mov	r0, r6
 80065a0:	b003      	add	sp, #12
 80065a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	3b04      	subs	r3, #4
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	d1cc      	bne.n	8006548 <quorem+0x9c>
 80065ae:	3c01      	subs	r4, #1
 80065b0:	e7c7      	b.n	8006542 <quorem+0x96>
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	3b04      	subs	r3, #4
 80065b6:	2a00      	cmp	r2, #0
 80065b8:	d1f0      	bne.n	800659c <quorem+0xf0>
 80065ba:	3c01      	subs	r4, #1
 80065bc:	e7eb      	b.n	8006596 <quorem+0xea>
 80065be:	2000      	movs	r0, #0
 80065c0:	e7ee      	b.n	80065a0 <quorem+0xf4>
 80065c2:	0000      	movs	r0, r0
 80065c4:	0000      	movs	r0, r0
	...

080065c8 <_dtoa_r>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	ed2d 8b04 	vpush	{d8-d9}
 80065d0:	ec57 6b10 	vmov	r6, r7, d0
 80065d4:	b093      	sub	sp, #76	; 0x4c
 80065d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065dc:	9106      	str	r1, [sp, #24]
 80065de:	ee10 aa10 	vmov	sl, s0
 80065e2:	4604      	mov	r4, r0
 80065e4:	9209      	str	r2, [sp, #36]	; 0x24
 80065e6:	930c      	str	r3, [sp, #48]	; 0x30
 80065e8:	46bb      	mov	fp, r7
 80065ea:	b975      	cbnz	r5, 800660a <_dtoa_r+0x42>
 80065ec:	2010      	movs	r0, #16
 80065ee:	f000 fed7 	bl	80073a0 <malloc>
 80065f2:	4602      	mov	r2, r0
 80065f4:	6260      	str	r0, [r4, #36]	; 0x24
 80065f6:	b920      	cbnz	r0, 8006602 <_dtoa_r+0x3a>
 80065f8:	4ba7      	ldr	r3, [pc, #668]	; (8006898 <_dtoa_r+0x2d0>)
 80065fa:	21ea      	movs	r1, #234	; 0xea
 80065fc:	48a7      	ldr	r0, [pc, #668]	; (800689c <_dtoa_r+0x2d4>)
 80065fe:	f001 fddf 	bl	80081c0 <__assert_func>
 8006602:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006606:	6005      	str	r5, [r0, #0]
 8006608:	60c5      	str	r5, [r0, #12]
 800660a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800660c:	6819      	ldr	r1, [r3, #0]
 800660e:	b151      	cbz	r1, 8006626 <_dtoa_r+0x5e>
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	604a      	str	r2, [r1, #4]
 8006614:	2301      	movs	r3, #1
 8006616:	4093      	lsls	r3, r2
 8006618:	608b      	str	r3, [r1, #8]
 800661a:	4620      	mov	r0, r4
 800661c:	f000 ff16 	bl	800744c <_Bfree>
 8006620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	1e3b      	subs	r3, r7, #0
 8006628:	bfaa      	itet	ge
 800662a:	2300      	movge	r3, #0
 800662c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006630:	f8c8 3000 	strge.w	r3, [r8]
 8006634:	4b9a      	ldr	r3, [pc, #616]	; (80068a0 <_dtoa_r+0x2d8>)
 8006636:	bfbc      	itt	lt
 8006638:	2201      	movlt	r2, #1
 800663a:	f8c8 2000 	strlt.w	r2, [r8]
 800663e:	ea33 030b 	bics.w	r3, r3, fp
 8006642:	d11b      	bne.n	800667c <_dtoa_r+0xb4>
 8006644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006646:	f242 730f 	movw	r3, #9999	; 0x270f
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006650:	4333      	orrs	r3, r6
 8006652:	f000 8592 	beq.w	800717a <_dtoa_r+0xbb2>
 8006656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006658:	b963      	cbnz	r3, 8006674 <_dtoa_r+0xac>
 800665a:	4b92      	ldr	r3, [pc, #584]	; (80068a4 <_dtoa_r+0x2dc>)
 800665c:	e022      	b.n	80066a4 <_dtoa_r+0xdc>
 800665e:	4b92      	ldr	r3, [pc, #584]	; (80068a8 <_dtoa_r+0x2e0>)
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	3308      	adds	r3, #8
 8006664:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	9801      	ldr	r0, [sp, #4]
 800666a:	b013      	add	sp, #76	; 0x4c
 800666c:	ecbd 8b04 	vpop	{d8-d9}
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006674:	4b8b      	ldr	r3, [pc, #556]	; (80068a4 <_dtoa_r+0x2dc>)
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	3303      	adds	r3, #3
 800667a:	e7f3      	b.n	8006664 <_dtoa_r+0x9c>
 800667c:	2200      	movs	r2, #0
 800667e:	2300      	movs	r3, #0
 8006680:	4650      	mov	r0, sl
 8006682:	4659      	mov	r1, fp
 8006684:	f7fa fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 8006688:	ec4b ab19 	vmov	d9, sl, fp
 800668c:	4680      	mov	r8, r0
 800668e:	b158      	cbz	r0, 80066a8 <_dtoa_r+0xe0>
 8006690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006692:	2301      	movs	r3, #1
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 856b 	beq.w	8007174 <_dtoa_r+0xbac>
 800669e:	4883      	ldr	r0, [pc, #524]	; (80068ac <_dtoa_r+0x2e4>)
 80066a0:	6018      	str	r0, [r3, #0]
 80066a2:	1e43      	subs	r3, r0, #1
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	e7df      	b.n	8006668 <_dtoa_r+0xa0>
 80066a8:	ec4b ab10 	vmov	d0, sl, fp
 80066ac:	aa10      	add	r2, sp, #64	; 0x40
 80066ae:	a911      	add	r1, sp, #68	; 0x44
 80066b0:	4620      	mov	r0, r4
 80066b2:	f001 f9b3 	bl	8007a1c <__d2b>
 80066b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80066ba:	ee08 0a10 	vmov	s16, r0
 80066be:	2d00      	cmp	r5, #0
 80066c0:	f000 8084 	beq.w	80067cc <_dtoa_r+0x204>
 80066c4:	ee19 3a90 	vmov	r3, s19
 80066c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80066d0:	4656      	mov	r6, sl
 80066d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80066d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80066de:	4b74      	ldr	r3, [pc, #464]	; (80068b0 <_dtoa_r+0x2e8>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7f9 fdcf 	bl	8000288 <__aeabi_dsub>
 80066ea:	a365      	add	r3, pc, #404	; (adr r3, 8006880 <_dtoa_r+0x2b8>)
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f7f9 ff82 	bl	80005f8 <__aeabi_dmul>
 80066f4:	a364      	add	r3, pc, #400	; (adr r3, 8006888 <_dtoa_r+0x2c0>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f7f9 fdc7 	bl	800028c <__adddf3>
 80066fe:	4606      	mov	r6, r0
 8006700:	4628      	mov	r0, r5
 8006702:	460f      	mov	r7, r1
 8006704:	f7f9 ff0e 	bl	8000524 <__aeabi_i2d>
 8006708:	a361      	add	r3, pc, #388	; (adr r3, 8006890 <_dtoa_r+0x2c8>)
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f7f9 ff73 	bl	80005f8 <__aeabi_dmul>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4630      	mov	r0, r6
 8006718:	4639      	mov	r1, r7
 800671a:	f7f9 fdb7 	bl	800028c <__adddf3>
 800671e:	4606      	mov	r6, r0
 8006720:	460f      	mov	r7, r1
 8006722:	f7fa fa19 	bl	8000b58 <__aeabi_d2iz>
 8006726:	2200      	movs	r2, #0
 8006728:	9000      	str	r0, [sp, #0]
 800672a:	2300      	movs	r3, #0
 800672c:	4630      	mov	r0, r6
 800672e:	4639      	mov	r1, r7
 8006730:	f7fa f9d4 	bl	8000adc <__aeabi_dcmplt>
 8006734:	b150      	cbz	r0, 800674c <_dtoa_r+0x184>
 8006736:	9800      	ldr	r0, [sp, #0]
 8006738:	f7f9 fef4 	bl	8000524 <__aeabi_i2d>
 800673c:	4632      	mov	r2, r6
 800673e:	463b      	mov	r3, r7
 8006740:	f7fa f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006744:	b910      	cbnz	r0, 800674c <_dtoa_r+0x184>
 8006746:	9b00      	ldr	r3, [sp, #0]
 8006748:	3b01      	subs	r3, #1
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	9b00      	ldr	r3, [sp, #0]
 800674e:	2b16      	cmp	r3, #22
 8006750:	d85a      	bhi.n	8006808 <_dtoa_r+0x240>
 8006752:	9a00      	ldr	r2, [sp, #0]
 8006754:	4b57      	ldr	r3, [pc, #348]	; (80068b4 <_dtoa_r+0x2ec>)
 8006756:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	ec51 0b19 	vmov	r0, r1, d9
 8006762:	f7fa f9bb 	bl	8000adc <__aeabi_dcmplt>
 8006766:	2800      	cmp	r0, #0
 8006768:	d050      	beq.n	800680c <_dtoa_r+0x244>
 800676a:	9b00      	ldr	r3, [sp, #0]
 800676c:	3b01      	subs	r3, #1
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	2300      	movs	r3, #0
 8006772:	930b      	str	r3, [sp, #44]	; 0x2c
 8006774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006776:	1b5d      	subs	r5, r3, r5
 8006778:	1e6b      	subs	r3, r5, #1
 800677a:	9305      	str	r3, [sp, #20]
 800677c:	bf45      	ittet	mi
 800677e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006782:	9304      	strmi	r3, [sp, #16]
 8006784:	2300      	movpl	r3, #0
 8006786:	2300      	movmi	r3, #0
 8006788:	bf4c      	ite	mi
 800678a:	9305      	strmi	r3, [sp, #20]
 800678c:	9304      	strpl	r3, [sp, #16]
 800678e:	9b00      	ldr	r3, [sp, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	db3d      	blt.n	8006810 <_dtoa_r+0x248>
 8006794:	9b05      	ldr	r3, [sp, #20]
 8006796:	9a00      	ldr	r2, [sp, #0]
 8006798:	920a      	str	r2, [sp, #40]	; 0x28
 800679a:	4413      	add	r3, r2
 800679c:	9305      	str	r3, [sp, #20]
 800679e:	2300      	movs	r3, #0
 80067a0:	9307      	str	r3, [sp, #28]
 80067a2:	9b06      	ldr	r3, [sp, #24]
 80067a4:	2b09      	cmp	r3, #9
 80067a6:	f200 8089 	bhi.w	80068bc <_dtoa_r+0x2f4>
 80067aa:	2b05      	cmp	r3, #5
 80067ac:	bfc4      	itt	gt
 80067ae:	3b04      	subgt	r3, #4
 80067b0:	9306      	strgt	r3, [sp, #24]
 80067b2:	9b06      	ldr	r3, [sp, #24]
 80067b4:	f1a3 0302 	sub.w	r3, r3, #2
 80067b8:	bfcc      	ite	gt
 80067ba:	2500      	movgt	r5, #0
 80067bc:	2501      	movle	r5, #1
 80067be:	2b03      	cmp	r3, #3
 80067c0:	f200 8087 	bhi.w	80068d2 <_dtoa_r+0x30a>
 80067c4:	e8df f003 	tbb	[pc, r3]
 80067c8:	59383a2d 	.word	0x59383a2d
 80067cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80067d0:	441d      	add	r5, r3
 80067d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	bfc1      	itttt	gt
 80067da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80067e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80067e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067ea:	bfda      	itte	le
 80067ec:	f1c3 0320 	rsble	r3, r3, #32
 80067f0:	fa06 f003 	lslle.w	r0, r6, r3
 80067f4:	4318      	orrgt	r0, r3
 80067f6:	f7f9 fe85 	bl	8000504 <__aeabi_ui2d>
 80067fa:	2301      	movs	r3, #1
 80067fc:	4606      	mov	r6, r0
 80067fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006802:	3d01      	subs	r5, #1
 8006804:	930e      	str	r3, [sp, #56]	; 0x38
 8006806:	e76a      	b.n	80066de <_dtoa_r+0x116>
 8006808:	2301      	movs	r3, #1
 800680a:	e7b2      	b.n	8006772 <_dtoa_r+0x1aa>
 800680c:	900b      	str	r0, [sp, #44]	; 0x2c
 800680e:	e7b1      	b.n	8006774 <_dtoa_r+0x1ac>
 8006810:	9b04      	ldr	r3, [sp, #16]
 8006812:	9a00      	ldr	r2, [sp, #0]
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	9304      	str	r3, [sp, #16]
 8006818:	4253      	negs	r3, r2
 800681a:	9307      	str	r3, [sp, #28]
 800681c:	2300      	movs	r3, #0
 800681e:	930a      	str	r3, [sp, #40]	; 0x28
 8006820:	e7bf      	b.n	80067a2 <_dtoa_r+0x1da>
 8006822:	2300      	movs	r3, #0
 8006824:	9308      	str	r3, [sp, #32]
 8006826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	dc55      	bgt.n	80068d8 <_dtoa_r+0x310>
 800682c:	2301      	movs	r3, #1
 800682e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006832:	461a      	mov	r2, r3
 8006834:	9209      	str	r2, [sp, #36]	; 0x24
 8006836:	e00c      	b.n	8006852 <_dtoa_r+0x28a>
 8006838:	2301      	movs	r3, #1
 800683a:	e7f3      	b.n	8006824 <_dtoa_r+0x25c>
 800683c:	2300      	movs	r3, #0
 800683e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006840:	9308      	str	r3, [sp, #32]
 8006842:	9b00      	ldr	r3, [sp, #0]
 8006844:	4413      	add	r3, r2
 8006846:	9302      	str	r3, [sp, #8]
 8006848:	3301      	adds	r3, #1
 800684a:	2b01      	cmp	r3, #1
 800684c:	9303      	str	r3, [sp, #12]
 800684e:	bfb8      	it	lt
 8006850:	2301      	movlt	r3, #1
 8006852:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006854:	2200      	movs	r2, #0
 8006856:	6042      	str	r2, [r0, #4]
 8006858:	2204      	movs	r2, #4
 800685a:	f102 0614 	add.w	r6, r2, #20
 800685e:	429e      	cmp	r6, r3
 8006860:	6841      	ldr	r1, [r0, #4]
 8006862:	d93d      	bls.n	80068e0 <_dtoa_r+0x318>
 8006864:	4620      	mov	r0, r4
 8006866:	f000 fdb1 	bl	80073cc <_Balloc>
 800686a:	9001      	str	r0, [sp, #4]
 800686c:	2800      	cmp	r0, #0
 800686e:	d13b      	bne.n	80068e8 <_dtoa_r+0x320>
 8006870:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <_dtoa_r+0x2f0>)
 8006872:	4602      	mov	r2, r0
 8006874:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006878:	e6c0      	b.n	80065fc <_dtoa_r+0x34>
 800687a:	2301      	movs	r3, #1
 800687c:	e7df      	b.n	800683e <_dtoa_r+0x276>
 800687e:	bf00      	nop
 8006880:	636f4361 	.word	0x636f4361
 8006884:	3fd287a7 	.word	0x3fd287a7
 8006888:	8b60c8b3 	.word	0x8b60c8b3
 800688c:	3fc68a28 	.word	0x3fc68a28
 8006890:	509f79fb 	.word	0x509f79fb
 8006894:	3fd34413 	.word	0x3fd34413
 8006898:	08008695 	.word	0x08008695
 800689c:	080086ac 	.word	0x080086ac
 80068a0:	7ff00000 	.word	0x7ff00000
 80068a4:	08008691 	.word	0x08008691
 80068a8:	08008688 	.word	0x08008688
 80068ac:	08008665 	.word	0x08008665
 80068b0:	3ff80000 	.word	0x3ff80000
 80068b4:	08008800 	.word	0x08008800
 80068b8:	08008707 	.word	0x08008707
 80068bc:	2501      	movs	r5, #1
 80068be:	2300      	movs	r3, #0
 80068c0:	9306      	str	r3, [sp, #24]
 80068c2:	9508      	str	r5, [sp, #32]
 80068c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068cc:	2200      	movs	r2, #0
 80068ce:	2312      	movs	r3, #18
 80068d0:	e7b0      	b.n	8006834 <_dtoa_r+0x26c>
 80068d2:	2301      	movs	r3, #1
 80068d4:	9308      	str	r3, [sp, #32]
 80068d6:	e7f5      	b.n	80068c4 <_dtoa_r+0x2fc>
 80068d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068de:	e7b8      	b.n	8006852 <_dtoa_r+0x28a>
 80068e0:	3101      	adds	r1, #1
 80068e2:	6041      	str	r1, [r0, #4]
 80068e4:	0052      	lsls	r2, r2, #1
 80068e6:	e7b8      	b.n	800685a <_dtoa_r+0x292>
 80068e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068ea:	9a01      	ldr	r2, [sp, #4]
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	9b03      	ldr	r3, [sp, #12]
 80068f0:	2b0e      	cmp	r3, #14
 80068f2:	f200 809d 	bhi.w	8006a30 <_dtoa_r+0x468>
 80068f6:	2d00      	cmp	r5, #0
 80068f8:	f000 809a 	beq.w	8006a30 <_dtoa_r+0x468>
 80068fc:	9b00      	ldr	r3, [sp, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	dd32      	ble.n	8006968 <_dtoa_r+0x3a0>
 8006902:	4ab7      	ldr	r2, [pc, #732]	; (8006be0 <_dtoa_r+0x618>)
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800690c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006910:	9b00      	ldr	r3, [sp, #0]
 8006912:	05d8      	lsls	r0, r3, #23
 8006914:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006918:	d516      	bpl.n	8006948 <_dtoa_r+0x380>
 800691a:	4bb2      	ldr	r3, [pc, #712]	; (8006be4 <_dtoa_r+0x61c>)
 800691c:	ec51 0b19 	vmov	r0, r1, d9
 8006920:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006924:	f7f9 ff92 	bl	800084c <__aeabi_ddiv>
 8006928:	f007 070f 	and.w	r7, r7, #15
 800692c:	4682      	mov	sl, r0
 800692e:	468b      	mov	fp, r1
 8006930:	2503      	movs	r5, #3
 8006932:	4eac      	ldr	r6, [pc, #688]	; (8006be4 <_dtoa_r+0x61c>)
 8006934:	b957      	cbnz	r7, 800694c <_dtoa_r+0x384>
 8006936:	4642      	mov	r2, r8
 8006938:	464b      	mov	r3, r9
 800693a:	4650      	mov	r0, sl
 800693c:	4659      	mov	r1, fp
 800693e:	f7f9 ff85 	bl	800084c <__aeabi_ddiv>
 8006942:	4682      	mov	sl, r0
 8006944:	468b      	mov	fp, r1
 8006946:	e028      	b.n	800699a <_dtoa_r+0x3d2>
 8006948:	2502      	movs	r5, #2
 800694a:	e7f2      	b.n	8006932 <_dtoa_r+0x36a>
 800694c:	07f9      	lsls	r1, r7, #31
 800694e:	d508      	bpl.n	8006962 <_dtoa_r+0x39a>
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006958:	f7f9 fe4e 	bl	80005f8 <__aeabi_dmul>
 800695c:	3501      	adds	r5, #1
 800695e:	4680      	mov	r8, r0
 8006960:	4689      	mov	r9, r1
 8006962:	107f      	asrs	r7, r7, #1
 8006964:	3608      	adds	r6, #8
 8006966:	e7e5      	b.n	8006934 <_dtoa_r+0x36c>
 8006968:	f000 809b 	beq.w	8006aa2 <_dtoa_r+0x4da>
 800696c:	9b00      	ldr	r3, [sp, #0]
 800696e:	4f9d      	ldr	r7, [pc, #628]	; (8006be4 <_dtoa_r+0x61c>)
 8006970:	425e      	negs	r6, r3
 8006972:	4b9b      	ldr	r3, [pc, #620]	; (8006be0 <_dtoa_r+0x618>)
 8006974:	f006 020f 	and.w	r2, r6, #15
 8006978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	ec51 0b19 	vmov	r0, r1, d9
 8006984:	f7f9 fe38 	bl	80005f8 <__aeabi_dmul>
 8006988:	1136      	asrs	r6, r6, #4
 800698a:	4682      	mov	sl, r0
 800698c:	468b      	mov	fp, r1
 800698e:	2300      	movs	r3, #0
 8006990:	2502      	movs	r5, #2
 8006992:	2e00      	cmp	r6, #0
 8006994:	d17a      	bne.n	8006a8c <_dtoa_r+0x4c4>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1d3      	bne.n	8006942 <_dtoa_r+0x37a>
 800699a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 8082 	beq.w	8006aa6 <_dtoa_r+0x4de>
 80069a2:	4b91      	ldr	r3, [pc, #580]	; (8006be8 <_dtoa_r+0x620>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	4650      	mov	r0, sl
 80069a8:	4659      	mov	r1, fp
 80069aa:	f7fa f897 	bl	8000adc <__aeabi_dcmplt>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d079      	beq.n	8006aa6 <_dtoa_r+0x4de>
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d076      	beq.n	8006aa6 <_dtoa_r+0x4de>
 80069b8:	9b02      	ldr	r3, [sp, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	dd36      	ble.n	8006a2c <_dtoa_r+0x464>
 80069be:	9b00      	ldr	r3, [sp, #0]
 80069c0:	4650      	mov	r0, sl
 80069c2:	4659      	mov	r1, fp
 80069c4:	1e5f      	subs	r7, r3, #1
 80069c6:	2200      	movs	r2, #0
 80069c8:	4b88      	ldr	r3, [pc, #544]	; (8006bec <_dtoa_r+0x624>)
 80069ca:	f7f9 fe15 	bl	80005f8 <__aeabi_dmul>
 80069ce:	9e02      	ldr	r6, [sp, #8]
 80069d0:	4682      	mov	sl, r0
 80069d2:	468b      	mov	fp, r1
 80069d4:	3501      	adds	r5, #1
 80069d6:	4628      	mov	r0, r5
 80069d8:	f7f9 fda4 	bl	8000524 <__aeabi_i2d>
 80069dc:	4652      	mov	r2, sl
 80069de:	465b      	mov	r3, fp
 80069e0:	f7f9 fe0a 	bl	80005f8 <__aeabi_dmul>
 80069e4:	4b82      	ldr	r3, [pc, #520]	; (8006bf0 <_dtoa_r+0x628>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	f7f9 fc50 	bl	800028c <__adddf3>
 80069ec:	46d0      	mov	r8, sl
 80069ee:	46d9      	mov	r9, fp
 80069f0:	4682      	mov	sl, r0
 80069f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80069f6:	2e00      	cmp	r6, #0
 80069f8:	d158      	bne.n	8006aac <_dtoa_r+0x4e4>
 80069fa:	4b7e      	ldr	r3, [pc, #504]	; (8006bf4 <_dtoa_r+0x62c>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	4640      	mov	r0, r8
 8006a00:	4649      	mov	r1, r9
 8006a02:	f7f9 fc41 	bl	8000288 <__aeabi_dsub>
 8006a06:	4652      	mov	r2, sl
 8006a08:	465b      	mov	r3, fp
 8006a0a:	4680      	mov	r8, r0
 8006a0c:	4689      	mov	r9, r1
 8006a0e:	f7fa f883 	bl	8000b18 <__aeabi_dcmpgt>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	f040 8295 	bne.w	8006f42 <_dtoa_r+0x97a>
 8006a18:	4652      	mov	r2, sl
 8006a1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4649      	mov	r1, r9
 8006a22:	f7fa f85b 	bl	8000adc <__aeabi_dcmplt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f040 8289 	bne.w	8006f3e <_dtoa_r+0x976>
 8006a2c:	ec5b ab19 	vmov	sl, fp, d9
 8006a30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f2c0 8148 	blt.w	8006cc8 <_dtoa_r+0x700>
 8006a38:	9a00      	ldr	r2, [sp, #0]
 8006a3a:	2a0e      	cmp	r2, #14
 8006a3c:	f300 8144 	bgt.w	8006cc8 <_dtoa_r+0x700>
 8006a40:	4b67      	ldr	r3, [pc, #412]	; (8006be0 <_dtoa_r+0x618>)
 8006a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f280 80d5 	bge.w	8006bfc <_dtoa_r+0x634>
 8006a52:	9b03      	ldr	r3, [sp, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f300 80d1 	bgt.w	8006bfc <_dtoa_r+0x634>
 8006a5a:	f040 826f 	bne.w	8006f3c <_dtoa_r+0x974>
 8006a5e:	4b65      	ldr	r3, [pc, #404]	; (8006bf4 <_dtoa_r+0x62c>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	4640      	mov	r0, r8
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7f9 fdc7 	bl	80005f8 <__aeabi_dmul>
 8006a6a:	4652      	mov	r2, sl
 8006a6c:	465b      	mov	r3, fp
 8006a6e:	f7fa f849 	bl	8000b04 <__aeabi_dcmpge>
 8006a72:	9e03      	ldr	r6, [sp, #12]
 8006a74:	4637      	mov	r7, r6
 8006a76:	2800      	cmp	r0, #0
 8006a78:	f040 8245 	bne.w	8006f06 <_dtoa_r+0x93e>
 8006a7c:	9d01      	ldr	r5, [sp, #4]
 8006a7e:	2331      	movs	r3, #49	; 0x31
 8006a80:	f805 3b01 	strb.w	r3, [r5], #1
 8006a84:	9b00      	ldr	r3, [sp, #0]
 8006a86:	3301      	adds	r3, #1
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	e240      	b.n	8006f0e <_dtoa_r+0x946>
 8006a8c:	07f2      	lsls	r2, r6, #31
 8006a8e:	d505      	bpl.n	8006a9c <_dtoa_r+0x4d4>
 8006a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a94:	f7f9 fdb0 	bl	80005f8 <__aeabi_dmul>
 8006a98:	3501      	adds	r5, #1
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	1076      	asrs	r6, r6, #1
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	e777      	b.n	8006992 <_dtoa_r+0x3ca>
 8006aa2:	2502      	movs	r5, #2
 8006aa4:	e779      	b.n	800699a <_dtoa_r+0x3d2>
 8006aa6:	9f00      	ldr	r7, [sp, #0]
 8006aa8:	9e03      	ldr	r6, [sp, #12]
 8006aaa:	e794      	b.n	80069d6 <_dtoa_r+0x40e>
 8006aac:	9901      	ldr	r1, [sp, #4]
 8006aae:	4b4c      	ldr	r3, [pc, #304]	; (8006be0 <_dtoa_r+0x618>)
 8006ab0:	4431      	add	r1, r6
 8006ab2:	910d      	str	r1, [sp, #52]	; 0x34
 8006ab4:	9908      	ldr	r1, [sp, #32]
 8006ab6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006aba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006abe:	2900      	cmp	r1, #0
 8006ac0:	d043      	beq.n	8006b4a <_dtoa_r+0x582>
 8006ac2:	494d      	ldr	r1, [pc, #308]	; (8006bf8 <_dtoa_r+0x630>)
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	f7f9 fec1 	bl	800084c <__aeabi_ddiv>
 8006aca:	4652      	mov	r2, sl
 8006acc:	465b      	mov	r3, fp
 8006ace:	f7f9 fbdb 	bl	8000288 <__aeabi_dsub>
 8006ad2:	9d01      	ldr	r5, [sp, #4]
 8006ad4:	4682      	mov	sl, r0
 8006ad6:	468b      	mov	fp, r1
 8006ad8:	4649      	mov	r1, r9
 8006ada:	4640      	mov	r0, r8
 8006adc:	f7fa f83c 	bl	8000b58 <__aeabi_d2iz>
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	f7f9 fd1f 	bl	8000524 <__aeabi_i2d>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4640      	mov	r0, r8
 8006aec:	4649      	mov	r1, r9
 8006aee:	f7f9 fbcb 	bl	8000288 <__aeabi_dsub>
 8006af2:	3630      	adds	r6, #48	; 0x30
 8006af4:	f805 6b01 	strb.w	r6, [r5], #1
 8006af8:	4652      	mov	r2, sl
 8006afa:	465b      	mov	r3, fp
 8006afc:	4680      	mov	r8, r0
 8006afe:	4689      	mov	r9, r1
 8006b00:	f7f9 ffec 	bl	8000adc <__aeabi_dcmplt>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d163      	bne.n	8006bd0 <_dtoa_r+0x608>
 8006b08:	4642      	mov	r2, r8
 8006b0a:	464b      	mov	r3, r9
 8006b0c:	4936      	ldr	r1, [pc, #216]	; (8006be8 <_dtoa_r+0x620>)
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f7f9 fbba 	bl	8000288 <__aeabi_dsub>
 8006b14:	4652      	mov	r2, sl
 8006b16:	465b      	mov	r3, fp
 8006b18:	f7f9 ffe0 	bl	8000adc <__aeabi_dcmplt>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	f040 80b5 	bne.w	8006c8c <_dtoa_r+0x6c4>
 8006b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b24:	429d      	cmp	r5, r3
 8006b26:	d081      	beq.n	8006a2c <_dtoa_r+0x464>
 8006b28:	4b30      	ldr	r3, [pc, #192]	; (8006bec <_dtoa_r+0x624>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4650      	mov	r0, sl
 8006b2e:	4659      	mov	r1, fp
 8006b30:	f7f9 fd62 	bl	80005f8 <__aeabi_dmul>
 8006b34:	4b2d      	ldr	r3, [pc, #180]	; (8006bec <_dtoa_r+0x624>)
 8006b36:	4682      	mov	sl, r0
 8006b38:	468b      	mov	fp, r1
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f7f9 fd5a 	bl	80005f8 <__aeabi_dmul>
 8006b44:	4680      	mov	r8, r0
 8006b46:	4689      	mov	r9, r1
 8006b48:	e7c6      	b.n	8006ad8 <_dtoa_r+0x510>
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	f7f9 fd53 	bl	80005f8 <__aeabi_dmul>
 8006b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b54:	9d01      	ldr	r5, [sp, #4]
 8006b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b58:	4682      	mov	sl, r0
 8006b5a:	468b      	mov	fp, r1
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	4640      	mov	r0, r8
 8006b60:	f7f9 fffa 	bl	8000b58 <__aeabi_d2iz>
 8006b64:	4606      	mov	r6, r0
 8006b66:	f7f9 fcdd 	bl	8000524 <__aeabi_i2d>
 8006b6a:	3630      	adds	r6, #48	; 0x30
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4640      	mov	r0, r8
 8006b72:	4649      	mov	r1, r9
 8006b74:	f7f9 fb88 	bl	8000288 <__aeabi_dsub>
 8006b78:	f805 6b01 	strb.w	r6, [r5], #1
 8006b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b7e:	429d      	cmp	r5, r3
 8006b80:	4680      	mov	r8, r0
 8006b82:	4689      	mov	r9, r1
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	d124      	bne.n	8006bd4 <_dtoa_r+0x60c>
 8006b8a:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <_dtoa_r+0x630>)
 8006b8c:	4650      	mov	r0, sl
 8006b8e:	4659      	mov	r1, fp
 8006b90:	f7f9 fb7c 	bl	800028c <__adddf3>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	f7f9 ffbc 	bl	8000b18 <__aeabi_dcmpgt>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d173      	bne.n	8006c8c <_dtoa_r+0x6c4>
 8006ba4:	4652      	mov	r2, sl
 8006ba6:	465b      	mov	r3, fp
 8006ba8:	4913      	ldr	r1, [pc, #76]	; (8006bf8 <_dtoa_r+0x630>)
 8006baa:	2000      	movs	r0, #0
 8006bac:	f7f9 fb6c 	bl	8000288 <__aeabi_dsub>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	f7f9 ff90 	bl	8000adc <__aeabi_dcmplt>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	f43f af35 	beq.w	8006a2c <_dtoa_r+0x464>
 8006bc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006bc4:	1e6b      	subs	r3, r5, #1
 8006bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bcc:	2b30      	cmp	r3, #48	; 0x30
 8006bce:	d0f8      	beq.n	8006bc2 <_dtoa_r+0x5fa>
 8006bd0:	9700      	str	r7, [sp, #0]
 8006bd2:	e049      	b.n	8006c68 <_dtoa_r+0x6a0>
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <_dtoa_r+0x624>)
 8006bd6:	f7f9 fd0f 	bl	80005f8 <__aeabi_dmul>
 8006bda:	4680      	mov	r8, r0
 8006bdc:	4689      	mov	r9, r1
 8006bde:	e7bd      	b.n	8006b5c <_dtoa_r+0x594>
 8006be0:	08008800 	.word	0x08008800
 8006be4:	080087d8 	.word	0x080087d8
 8006be8:	3ff00000 	.word	0x3ff00000
 8006bec:	40240000 	.word	0x40240000
 8006bf0:	401c0000 	.word	0x401c0000
 8006bf4:	40140000 	.word	0x40140000
 8006bf8:	3fe00000 	.word	0x3fe00000
 8006bfc:	9d01      	ldr	r5, [sp, #4]
 8006bfe:	4656      	mov	r6, sl
 8006c00:	465f      	mov	r7, fp
 8006c02:	4642      	mov	r2, r8
 8006c04:	464b      	mov	r3, r9
 8006c06:	4630      	mov	r0, r6
 8006c08:	4639      	mov	r1, r7
 8006c0a:	f7f9 fe1f 	bl	800084c <__aeabi_ddiv>
 8006c0e:	f7f9 ffa3 	bl	8000b58 <__aeabi_d2iz>
 8006c12:	4682      	mov	sl, r0
 8006c14:	f7f9 fc86 	bl	8000524 <__aeabi_i2d>
 8006c18:	4642      	mov	r2, r8
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	f7f9 fcec 	bl	80005f8 <__aeabi_dmul>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4630      	mov	r0, r6
 8006c26:	4639      	mov	r1, r7
 8006c28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006c2c:	f7f9 fb2c 	bl	8000288 <__aeabi_dsub>
 8006c30:	f805 6b01 	strb.w	r6, [r5], #1
 8006c34:	9e01      	ldr	r6, [sp, #4]
 8006c36:	9f03      	ldr	r7, [sp, #12]
 8006c38:	1bae      	subs	r6, r5, r6
 8006c3a:	42b7      	cmp	r7, r6
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	d135      	bne.n	8006cae <_dtoa_r+0x6e6>
 8006c42:	f7f9 fb23 	bl	800028c <__adddf3>
 8006c46:	4642      	mov	r2, r8
 8006c48:	464b      	mov	r3, r9
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	460f      	mov	r7, r1
 8006c4e:	f7f9 ff63 	bl	8000b18 <__aeabi_dcmpgt>
 8006c52:	b9d0      	cbnz	r0, 8006c8a <_dtoa_r+0x6c2>
 8006c54:	4642      	mov	r2, r8
 8006c56:	464b      	mov	r3, r9
 8006c58:	4630      	mov	r0, r6
 8006c5a:	4639      	mov	r1, r7
 8006c5c:	f7f9 ff34 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c60:	b110      	cbz	r0, 8006c68 <_dtoa_r+0x6a0>
 8006c62:	f01a 0f01 	tst.w	sl, #1
 8006c66:	d110      	bne.n	8006c8a <_dtoa_r+0x6c2>
 8006c68:	4620      	mov	r0, r4
 8006c6a:	ee18 1a10 	vmov	r1, s16
 8006c6e:	f000 fbed 	bl	800744c <_Bfree>
 8006c72:	2300      	movs	r3, #0
 8006c74:	9800      	ldr	r0, [sp, #0]
 8006c76:	702b      	strb	r3, [r5, #0]
 8006c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	6018      	str	r0, [r3, #0]
 8006c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f43f acf1 	beq.w	8006668 <_dtoa_r+0xa0>
 8006c86:	601d      	str	r5, [r3, #0]
 8006c88:	e4ee      	b.n	8006668 <_dtoa_r+0xa0>
 8006c8a:	9f00      	ldr	r7, [sp, #0]
 8006c8c:	462b      	mov	r3, r5
 8006c8e:	461d      	mov	r5, r3
 8006c90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c94:	2a39      	cmp	r2, #57	; 0x39
 8006c96:	d106      	bne.n	8006ca6 <_dtoa_r+0x6de>
 8006c98:	9a01      	ldr	r2, [sp, #4]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d1f7      	bne.n	8006c8e <_dtoa_r+0x6c6>
 8006c9e:	9901      	ldr	r1, [sp, #4]
 8006ca0:	2230      	movs	r2, #48	; 0x30
 8006ca2:	3701      	adds	r7, #1
 8006ca4:	700a      	strb	r2, [r1, #0]
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	3201      	adds	r2, #1
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	e790      	b.n	8006bd0 <_dtoa_r+0x608>
 8006cae:	4ba6      	ldr	r3, [pc, #664]	; (8006f48 <_dtoa_r+0x980>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f7f9 fca1 	bl	80005f8 <__aeabi_dmul>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4606      	mov	r6, r0
 8006cbc:	460f      	mov	r7, r1
 8006cbe:	f7f9 ff03 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d09d      	beq.n	8006c02 <_dtoa_r+0x63a>
 8006cc6:	e7cf      	b.n	8006c68 <_dtoa_r+0x6a0>
 8006cc8:	9a08      	ldr	r2, [sp, #32]
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	f000 80d7 	beq.w	8006e7e <_dtoa_r+0x8b6>
 8006cd0:	9a06      	ldr	r2, [sp, #24]
 8006cd2:	2a01      	cmp	r2, #1
 8006cd4:	f300 80ba 	bgt.w	8006e4c <_dtoa_r+0x884>
 8006cd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	f000 80b2 	beq.w	8006e44 <_dtoa_r+0x87c>
 8006ce0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ce4:	9e07      	ldr	r6, [sp, #28]
 8006ce6:	9d04      	ldr	r5, [sp, #16]
 8006ce8:	9a04      	ldr	r2, [sp, #16]
 8006cea:	441a      	add	r2, r3
 8006cec:	9204      	str	r2, [sp, #16]
 8006cee:	9a05      	ldr	r2, [sp, #20]
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	441a      	add	r2, r3
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	9205      	str	r2, [sp, #20]
 8006cf8:	f000 fc60 	bl	80075bc <__i2b>
 8006cfc:	4607      	mov	r7, r0
 8006cfe:	2d00      	cmp	r5, #0
 8006d00:	dd0c      	ble.n	8006d1c <_dtoa_r+0x754>
 8006d02:	9b05      	ldr	r3, [sp, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	dd09      	ble.n	8006d1c <_dtoa_r+0x754>
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	9a04      	ldr	r2, [sp, #16]
 8006d0c:	bfa8      	it	ge
 8006d0e:	462b      	movge	r3, r5
 8006d10:	1ad2      	subs	r2, r2, r3
 8006d12:	9204      	str	r2, [sp, #16]
 8006d14:	9a05      	ldr	r2, [sp, #20]
 8006d16:	1aed      	subs	r5, r5, r3
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	9b07      	ldr	r3, [sp, #28]
 8006d1e:	b31b      	cbz	r3, 8006d68 <_dtoa_r+0x7a0>
 8006d20:	9b08      	ldr	r3, [sp, #32]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 80af 	beq.w	8006e86 <_dtoa_r+0x8be>
 8006d28:	2e00      	cmp	r6, #0
 8006d2a:	dd13      	ble.n	8006d54 <_dtoa_r+0x78c>
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	4632      	mov	r2, r6
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 fd03 	bl	800773c <__pow5mult>
 8006d36:	ee18 2a10 	vmov	r2, s16
 8006d3a:	4601      	mov	r1, r0
 8006d3c:	4607      	mov	r7, r0
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 fc52 	bl	80075e8 <__multiply>
 8006d44:	ee18 1a10 	vmov	r1, s16
 8006d48:	4680      	mov	r8, r0
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f000 fb7e 	bl	800744c <_Bfree>
 8006d50:	ee08 8a10 	vmov	s16, r8
 8006d54:	9b07      	ldr	r3, [sp, #28]
 8006d56:	1b9a      	subs	r2, r3, r6
 8006d58:	d006      	beq.n	8006d68 <_dtoa_r+0x7a0>
 8006d5a:	ee18 1a10 	vmov	r1, s16
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 fcec 	bl	800773c <__pow5mult>
 8006d64:	ee08 0a10 	vmov	s16, r0
 8006d68:	2101      	movs	r1, #1
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 fc26 	bl	80075bc <__i2b>
 8006d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	4606      	mov	r6, r0
 8006d76:	f340 8088 	ble.w	8006e8a <_dtoa_r+0x8c2>
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 fcdc 	bl	800773c <__pow5mult>
 8006d84:	9b06      	ldr	r3, [sp, #24]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	4606      	mov	r6, r0
 8006d8a:	f340 8081 	ble.w	8006e90 <_dtoa_r+0x8c8>
 8006d8e:	f04f 0800 	mov.w	r8, #0
 8006d92:	6933      	ldr	r3, [r6, #16]
 8006d94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d98:	6918      	ldr	r0, [r3, #16]
 8006d9a:	f000 fbbf 	bl	800751c <__hi0bits>
 8006d9e:	f1c0 0020 	rsb	r0, r0, #32
 8006da2:	9b05      	ldr	r3, [sp, #20]
 8006da4:	4418      	add	r0, r3
 8006da6:	f010 001f 	ands.w	r0, r0, #31
 8006daa:	f000 8092 	beq.w	8006ed2 <_dtoa_r+0x90a>
 8006dae:	f1c0 0320 	rsb	r3, r0, #32
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	f340 808a 	ble.w	8006ecc <_dtoa_r+0x904>
 8006db8:	f1c0 001c 	rsb	r0, r0, #28
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	4403      	add	r3, r0
 8006dc0:	9304      	str	r3, [sp, #16]
 8006dc2:	9b05      	ldr	r3, [sp, #20]
 8006dc4:	4403      	add	r3, r0
 8006dc6:	4405      	add	r5, r0
 8006dc8:	9305      	str	r3, [sp, #20]
 8006dca:	9b04      	ldr	r3, [sp, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	dd07      	ble.n	8006de0 <_dtoa_r+0x818>
 8006dd0:	ee18 1a10 	vmov	r1, s16
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 fd0a 	bl	80077f0 <__lshift>
 8006ddc:	ee08 0a10 	vmov	s16, r0
 8006de0:	9b05      	ldr	r3, [sp, #20]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dd05      	ble.n	8006df2 <_dtoa_r+0x82a>
 8006de6:	4631      	mov	r1, r6
 8006de8:	461a      	mov	r2, r3
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 fd00 	bl	80077f0 <__lshift>
 8006df0:	4606      	mov	r6, r0
 8006df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d06e      	beq.n	8006ed6 <_dtoa_r+0x90e>
 8006df8:	ee18 0a10 	vmov	r0, s16
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	f000 fd67 	bl	80078d0 <__mcmp>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	da67      	bge.n	8006ed6 <_dtoa_r+0x90e>
 8006e06:	9b00      	ldr	r3, [sp, #0]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	ee18 1a10 	vmov	r1, s16
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	220a      	movs	r2, #10
 8006e12:	2300      	movs	r3, #0
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 fb3b 	bl	8007490 <__multadd>
 8006e1a:	9b08      	ldr	r3, [sp, #32]
 8006e1c:	ee08 0a10 	vmov	s16, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 81b1 	beq.w	8007188 <_dtoa_r+0xbc0>
 8006e26:	2300      	movs	r3, #0
 8006e28:	4639      	mov	r1, r7
 8006e2a:	220a      	movs	r2, #10
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 fb2f 	bl	8007490 <__multadd>
 8006e32:	9b02      	ldr	r3, [sp, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	4607      	mov	r7, r0
 8006e38:	f300 808e 	bgt.w	8006f58 <_dtoa_r+0x990>
 8006e3c:	9b06      	ldr	r3, [sp, #24]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	dc51      	bgt.n	8006ee6 <_dtoa_r+0x91e>
 8006e42:	e089      	b.n	8006f58 <_dtoa_r+0x990>
 8006e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e4a:	e74b      	b.n	8006ce4 <_dtoa_r+0x71c>
 8006e4c:	9b03      	ldr	r3, [sp, #12]
 8006e4e:	1e5e      	subs	r6, r3, #1
 8006e50:	9b07      	ldr	r3, [sp, #28]
 8006e52:	42b3      	cmp	r3, r6
 8006e54:	bfbf      	itttt	lt
 8006e56:	9b07      	ldrlt	r3, [sp, #28]
 8006e58:	9607      	strlt	r6, [sp, #28]
 8006e5a:	1af2      	sublt	r2, r6, r3
 8006e5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e5e:	bfb6      	itet	lt
 8006e60:	189b      	addlt	r3, r3, r2
 8006e62:	1b9e      	subge	r6, r3, r6
 8006e64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006e66:	9b03      	ldr	r3, [sp, #12]
 8006e68:	bfb8      	it	lt
 8006e6a:	2600      	movlt	r6, #0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	bfb7      	itett	lt
 8006e70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006e74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006e78:	1a9d      	sublt	r5, r3, r2
 8006e7a:	2300      	movlt	r3, #0
 8006e7c:	e734      	b.n	8006ce8 <_dtoa_r+0x720>
 8006e7e:	9e07      	ldr	r6, [sp, #28]
 8006e80:	9d04      	ldr	r5, [sp, #16]
 8006e82:	9f08      	ldr	r7, [sp, #32]
 8006e84:	e73b      	b.n	8006cfe <_dtoa_r+0x736>
 8006e86:	9a07      	ldr	r2, [sp, #28]
 8006e88:	e767      	b.n	8006d5a <_dtoa_r+0x792>
 8006e8a:	9b06      	ldr	r3, [sp, #24]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	dc18      	bgt.n	8006ec2 <_dtoa_r+0x8fa>
 8006e90:	f1ba 0f00 	cmp.w	sl, #0
 8006e94:	d115      	bne.n	8006ec2 <_dtoa_r+0x8fa>
 8006e96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e9a:	b993      	cbnz	r3, 8006ec2 <_dtoa_r+0x8fa>
 8006e9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ea0:	0d1b      	lsrs	r3, r3, #20
 8006ea2:	051b      	lsls	r3, r3, #20
 8006ea4:	b183      	cbz	r3, 8006ec8 <_dtoa_r+0x900>
 8006ea6:	9b04      	ldr	r3, [sp, #16]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	9304      	str	r3, [sp, #16]
 8006eac:	9b05      	ldr	r3, [sp, #20]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	9305      	str	r3, [sp, #20]
 8006eb2:	f04f 0801 	mov.w	r8, #1
 8006eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f47f af6a 	bne.w	8006d92 <_dtoa_r+0x7ca>
 8006ebe:	2001      	movs	r0, #1
 8006ec0:	e76f      	b.n	8006da2 <_dtoa_r+0x7da>
 8006ec2:	f04f 0800 	mov.w	r8, #0
 8006ec6:	e7f6      	b.n	8006eb6 <_dtoa_r+0x8ee>
 8006ec8:	4698      	mov	r8, r3
 8006eca:	e7f4      	b.n	8006eb6 <_dtoa_r+0x8ee>
 8006ecc:	f43f af7d 	beq.w	8006dca <_dtoa_r+0x802>
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	301c      	adds	r0, #28
 8006ed4:	e772      	b.n	8006dbc <_dtoa_r+0x7f4>
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	dc37      	bgt.n	8006f4c <_dtoa_r+0x984>
 8006edc:	9b06      	ldr	r3, [sp, #24]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	dd34      	ble.n	8006f4c <_dtoa_r+0x984>
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	9302      	str	r3, [sp, #8]
 8006ee6:	9b02      	ldr	r3, [sp, #8]
 8006ee8:	b96b      	cbnz	r3, 8006f06 <_dtoa_r+0x93e>
 8006eea:	4631      	mov	r1, r6
 8006eec:	2205      	movs	r2, #5
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 face 	bl	8007490 <__multadd>
 8006ef4:	4601      	mov	r1, r0
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	ee18 0a10 	vmov	r0, s16
 8006efc:	f000 fce8 	bl	80078d0 <__mcmp>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	f73f adbb 	bgt.w	8006a7c <_dtoa_r+0x4b4>
 8006f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f08:	9d01      	ldr	r5, [sp, #4]
 8006f0a:	43db      	mvns	r3, r3
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	f04f 0800 	mov.w	r8, #0
 8006f12:	4631      	mov	r1, r6
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 fa99 	bl	800744c <_Bfree>
 8006f1a:	2f00      	cmp	r7, #0
 8006f1c:	f43f aea4 	beq.w	8006c68 <_dtoa_r+0x6a0>
 8006f20:	f1b8 0f00 	cmp.w	r8, #0
 8006f24:	d005      	beq.n	8006f32 <_dtoa_r+0x96a>
 8006f26:	45b8      	cmp	r8, r7
 8006f28:	d003      	beq.n	8006f32 <_dtoa_r+0x96a>
 8006f2a:	4641      	mov	r1, r8
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 fa8d 	bl	800744c <_Bfree>
 8006f32:	4639      	mov	r1, r7
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 fa89 	bl	800744c <_Bfree>
 8006f3a:	e695      	b.n	8006c68 <_dtoa_r+0x6a0>
 8006f3c:	2600      	movs	r6, #0
 8006f3e:	4637      	mov	r7, r6
 8006f40:	e7e1      	b.n	8006f06 <_dtoa_r+0x93e>
 8006f42:	9700      	str	r7, [sp, #0]
 8006f44:	4637      	mov	r7, r6
 8006f46:	e599      	b.n	8006a7c <_dtoa_r+0x4b4>
 8006f48:	40240000 	.word	0x40240000
 8006f4c:	9b08      	ldr	r3, [sp, #32]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 80ca 	beq.w	80070e8 <_dtoa_r+0xb20>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	9302      	str	r3, [sp, #8]
 8006f58:	2d00      	cmp	r5, #0
 8006f5a:	dd05      	ble.n	8006f68 <_dtoa_r+0x9a0>
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	462a      	mov	r2, r5
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fc45 	bl	80077f0 <__lshift>
 8006f66:	4607      	mov	r7, r0
 8006f68:	f1b8 0f00 	cmp.w	r8, #0
 8006f6c:	d05b      	beq.n	8007026 <_dtoa_r+0xa5e>
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 fa2b 	bl	80073cc <_Balloc>
 8006f76:	4605      	mov	r5, r0
 8006f78:	b928      	cbnz	r0, 8006f86 <_dtoa_r+0x9be>
 8006f7a:	4b87      	ldr	r3, [pc, #540]	; (8007198 <_dtoa_r+0xbd0>)
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f82:	f7ff bb3b 	b.w	80065fc <_dtoa_r+0x34>
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	3202      	adds	r2, #2
 8006f8a:	0092      	lsls	r2, r2, #2
 8006f8c:	f107 010c 	add.w	r1, r7, #12
 8006f90:	300c      	adds	r0, #12
 8006f92:	f000 fa0d 	bl	80073b0 <memcpy>
 8006f96:	2201      	movs	r2, #1
 8006f98:	4629      	mov	r1, r5
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 fc28 	bl	80077f0 <__lshift>
 8006fa0:	9b01      	ldr	r3, [sp, #4]
 8006fa2:	f103 0901 	add.w	r9, r3, #1
 8006fa6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006faa:	4413      	add	r3, r2
 8006fac:	9305      	str	r3, [sp, #20]
 8006fae:	f00a 0301 	and.w	r3, sl, #1
 8006fb2:	46b8      	mov	r8, r7
 8006fb4:	9304      	str	r3, [sp, #16]
 8006fb6:	4607      	mov	r7, r0
 8006fb8:	4631      	mov	r1, r6
 8006fba:	ee18 0a10 	vmov	r0, s16
 8006fbe:	f7ff fa75 	bl	80064ac <quorem>
 8006fc2:	4641      	mov	r1, r8
 8006fc4:	9002      	str	r0, [sp, #8]
 8006fc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fca:	ee18 0a10 	vmov	r0, s16
 8006fce:	f000 fc7f 	bl	80078d0 <__mcmp>
 8006fd2:	463a      	mov	r2, r7
 8006fd4:	9003      	str	r0, [sp, #12]
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fc95 	bl	8007908 <__mdiff>
 8006fde:	68c2      	ldr	r2, [r0, #12]
 8006fe0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	bb02      	cbnz	r2, 800702a <_dtoa_r+0xa62>
 8006fe8:	4601      	mov	r1, r0
 8006fea:	ee18 0a10 	vmov	r0, s16
 8006fee:	f000 fc6f 	bl	80078d0 <__mcmp>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	9207      	str	r2, [sp, #28]
 8006ffa:	f000 fa27 	bl	800744c <_Bfree>
 8006ffe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007002:	ea43 0102 	orr.w	r1, r3, r2
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	430b      	orrs	r3, r1
 800700a:	464d      	mov	r5, r9
 800700c:	d10f      	bne.n	800702e <_dtoa_r+0xa66>
 800700e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007012:	d02a      	beq.n	800706a <_dtoa_r+0xaa2>
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	dd02      	ble.n	8007020 <_dtoa_r+0xa58>
 800701a:	9b02      	ldr	r3, [sp, #8]
 800701c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007020:	f88b a000 	strb.w	sl, [fp]
 8007024:	e775      	b.n	8006f12 <_dtoa_r+0x94a>
 8007026:	4638      	mov	r0, r7
 8007028:	e7ba      	b.n	8006fa0 <_dtoa_r+0x9d8>
 800702a:	2201      	movs	r2, #1
 800702c:	e7e2      	b.n	8006ff4 <_dtoa_r+0xa2c>
 800702e:	9b03      	ldr	r3, [sp, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	db04      	blt.n	800703e <_dtoa_r+0xa76>
 8007034:	9906      	ldr	r1, [sp, #24]
 8007036:	430b      	orrs	r3, r1
 8007038:	9904      	ldr	r1, [sp, #16]
 800703a:	430b      	orrs	r3, r1
 800703c:	d122      	bne.n	8007084 <_dtoa_r+0xabc>
 800703e:	2a00      	cmp	r2, #0
 8007040:	ddee      	ble.n	8007020 <_dtoa_r+0xa58>
 8007042:	ee18 1a10 	vmov	r1, s16
 8007046:	2201      	movs	r2, #1
 8007048:	4620      	mov	r0, r4
 800704a:	f000 fbd1 	bl	80077f0 <__lshift>
 800704e:	4631      	mov	r1, r6
 8007050:	ee08 0a10 	vmov	s16, r0
 8007054:	f000 fc3c 	bl	80078d0 <__mcmp>
 8007058:	2800      	cmp	r0, #0
 800705a:	dc03      	bgt.n	8007064 <_dtoa_r+0xa9c>
 800705c:	d1e0      	bne.n	8007020 <_dtoa_r+0xa58>
 800705e:	f01a 0f01 	tst.w	sl, #1
 8007062:	d0dd      	beq.n	8007020 <_dtoa_r+0xa58>
 8007064:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007068:	d1d7      	bne.n	800701a <_dtoa_r+0xa52>
 800706a:	2339      	movs	r3, #57	; 0x39
 800706c:	f88b 3000 	strb.w	r3, [fp]
 8007070:	462b      	mov	r3, r5
 8007072:	461d      	mov	r5, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800707a:	2a39      	cmp	r2, #57	; 0x39
 800707c:	d071      	beq.n	8007162 <_dtoa_r+0xb9a>
 800707e:	3201      	adds	r2, #1
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	e746      	b.n	8006f12 <_dtoa_r+0x94a>
 8007084:	2a00      	cmp	r2, #0
 8007086:	dd07      	ble.n	8007098 <_dtoa_r+0xad0>
 8007088:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800708c:	d0ed      	beq.n	800706a <_dtoa_r+0xaa2>
 800708e:	f10a 0301 	add.w	r3, sl, #1
 8007092:	f88b 3000 	strb.w	r3, [fp]
 8007096:	e73c      	b.n	8006f12 <_dtoa_r+0x94a>
 8007098:	9b05      	ldr	r3, [sp, #20]
 800709a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800709e:	4599      	cmp	r9, r3
 80070a0:	d047      	beq.n	8007132 <_dtoa_r+0xb6a>
 80070a2:	ee18 1a10 	vmov	r1, s16
 80070a6:	2300      	movs	r3, #0
 80070a8:	220a      	movs	r2, #10
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 f9f0 	bl	8007490 <__multadd>
 80070b0:	45b8      	cmp	r8, r7
 80070b2:	ee08 0a10 	vmov	s16, r0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	f04f 020a 	mov.w	r2, #10
 80070be:	4641      	mov	r1, r8
 80070c0:	4620      	mov	r0, r4
 80070c2:	d106      	bne.n	80070d2 <_dtoa_r+0xb0a>
 80070c4:	f000 f9e4 	bl	8007490 <__multadd>
 80070c8:	4680      	mov	r8, r0
 80070ca:	4607      	mov	r7, r0
 80070cc:	f109 0901 	add.w	r9, r9, #1
 80070d0:	e772      	b.n	8006fb8 <_dtoa_r+0x9f0>
 80070d2:	f000 f9dd 	bl	8007490 <__multadd>
 80070d6:	4639      	mov	r1, r7
 80070d8:	4680      	mov	r8, r0
 80070da:	2300      	movs	r3, #0
 80070dc:	220a      	movs	r2, #10
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 f9d6 	bl	8007490 <__multadd>
 80070e4:	4607      	mov	r7, r0
 80070e6:	e7f1      	b.n	80070cc <_dtoa_r+0xb04>
 80070e8:	9b03      	ldr	r3, [sp, #12]
 80070ea:	9302      	str	r3, [sp, #8]
 80070ec:	9d01      	ldr	r5, [sp, #4]
 80070ee:	ee18 0a10 	vmov	r0, s16
 80070f2:	4631      	mov	r1, r6
 80070f4:	f7ff f9da 	bl	80064ac <quorem>
 80070f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80070fc:	9b01      	ldr	r3, [sp, #4]
 80070fe:	f805 ab01 	strb.w	sl, [r5], #1
 8007102:	1aea      	subs	r2, r5, r3
 8007104:	9b02      	ldr	r3, [sp, #8]
 8007106:	4293      	cmp	r3, r2
 8007108:	dd09      	ble.n	800711e <_dtoa_r+0xb56>
 800710a:	ee18 1a10 	vmov	r1, s16
 800710e:	2300      	movs	r3, #0
 8007110:	220a      	movs	r2, #10
 8007112:	4620      	mov	r0, r4
 8007114:	f000 f9bc 	bl	8007490 <__multadd>
 8007118:	ee08 0a10 	vmov	s16, r0
 800711c:	e7e7      	b.n	80070ee <_dtoa_r+0xb26>
 800711e:	9b02      	ldr	r3, [sp, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	bfc8      	it	gt
 8007124:	461d      	movgt	r5, r3
 8007126:	9b01      	ldr	r3, [sp, #4]
 8007128:	bfd8      	it	le
 800712a:	2501      	movle	r5, #1
 800712c:	441d      	add	r5, r3
 800712e:	f04f 0800 	mov.w	r8, #0
 8007132:	ee18 1a10 	vmov	r1, s16
 8007136:	2201      	movs	r2, #1
 8007138:	4620      	mov	r0, r4
 800713a:	f000 fb59 	bl	80077f0 <__lshift>
 800713e:	4631      	mov	r1, r6
 8007140:	ee08 0a10 	vmov	s16, r0
 8007144:	f000 fbc4 	bl	80078d0 <__mcmp>
 8007148:	2800      	cmp	r0, #0
 800714a:	dc91      	bgt.n	8007070 <_dtoa_r+0xaa8>
 800714c:	d102      	bne.n	8007154 <_dtoa_r+0xb8c>
 800714e:	f01a 0f01 	tst.w	sl, #1
 8007152:	d18d      	bne.n	8007070 <_dtoa_r+0xaa8>
 8007154:	462b      	mov	r3, r5
 8007156:	461d      	mov	r5, r3
 8007158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800715c:	2a30      	cmp	r2, #48	; 0x30
 800715e:	d0fa      	beq.n	8007156 <_dtoa_r+0xb8e>
 8007160:	e6d7      	b.n	8006f12 <_dtoa_r+0x94a>
 8007162:	9a01      	ldr	r2, [sp, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d184      	bne.n	8007072 <_dtoa_r+0xaaa>
 8007168:	9b00      	ldr	r3, [sp, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	2331      	movs	r3, #49	; 0x31
 8007170:	7013      	strb	r3, [r2, #0]
 8007172:	e6ce      	b.n	8006f12 <_dtoa_r+0x94a>
 8007174:	4b09      	ldr	r3, [pc, #36]	; (800719c <_dtoa_r+0xbd4>)
 8007176:	f7ff ba95 	b.w	80066a4 <_dtoa_r+0xdc>
 800717a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800717c:	2b00      	cmp	r3, #0
 800717e:	f47f aa6e 	bne.w	800665e <_dtoa_r+0x96>
 8007182:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <_dtoa_r+0xbd8>)
 8007184:	f7ff ba8e 	b.w	80066a4 <_dtoa_r+0xdc>
 8007188:	9b02      	ldr	r3, [sp, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	dcae      	bgt.n	80070ec <_dtoa_r+0xb24>
 800718e:	9b06      	ldr	r3, [sp, #24]
 8007190:	2b02      	cmp	r3, #2
 8007192:	f73f aea8 	bgt.w	8006ee6 <_dtoa_r+0x91e>
 8007196:	e7a9      	b.n	80070ec <_dtoa_r+0xb24>
 8007198:	08008707 	.word	0x08008707
 800719c:	08008664 	.word	0x08008664
 80071a0:	08008688 	.word	0x08008688

080071a4 <std>:
 80071a4:	2300      	movs	r3, #0
 80071a6:	b510      	push	{r4, lr}
 80071a8:	4604      	mov	r4, r0
 80071aa:	e9c0 3300 	strd	r3, r3, [r0]
 80071ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071b2:	6083      	str	r3, [r0, #8]
 80071b4:	8181      	strh	r1, [r0, #12]
 80071b6:	6643      	str	r3, [r0, #100]	; 0x64
 80071b8:	81c2      	strh	r2, [r0, #14]
 80071ba:	6183      	str	r3, [r0, #24]
 80071bc:	4619      	mov	r1, r3
 80071be:	2208      	movs	r2, #8
 80071c0:	305c      	adds	r0, #92	; 0x5c
 80071c2:	f7fe fce9 	bl	8005b98 <memset>
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <std+0x38>)
 80071c8:	6263      	str	r3, [r4, #36]	; 0x24
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <std+0x3c>)
 80071cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <std+0x40>)
 80071d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071d2:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <std+0x44>)
 80071d4:	6224      	str	r4, [r4, #32]
 80071d6:	6323      	str	r3, [r4, #48]	; 0x30
 80071d8:	bd10      	pop	{r4, pc}
 80071da:	bf00      	nop
 80071dc:	08007f95 	.word	0x08007f95
 80071e0:	08007fb7 	.word	0x08007fb7
 80071e4:	08007fef 	.word	0x08007fef
 80071e8:	08008013 	.word	0x08008013

080071ec <_cleanup_r>:
 80071ec:	4901      	ldr	r1, [pc, #4]	; (80071f4 <_cleanup_r+0x8>)
 80071ee:	f000 b8af 	b.w	8007350 <_fwalk_reent>
 80071f2:	bf00      	nop
 80071f4:	08008329 	.word	0x08008329

080071f8 <__sfmoreglue>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	2268      	movs	r2, #104	; 0x68
 80071fc:	1e4d      	subs	r5, r1, #1
 80071fe:	4355      	muls	r5, r2
 8007200:	460e      	mov	r6, r1
 8007202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007206:	f000 fce7 	bl	8007bd8 <_malloc_r>
 800720a:	4604      	mov	r4, r0
 800720c:	b140      	cbz	r0, 8007220 <__sfmoreglue+0x28>
 800720e:	2100      	movs	r1, #0
 8007210:	e9c0 1600 	strd	r1, r6, [r0]
 8007214:	300c      	adds	r0, #12
 8007216:	60a0      	str	r0, [r4, #8]
 8007218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800721c:	f7fe fcbc 	bl	8005b98 <memset>
 8007220:	4620      	mov	r0, r4
 8007222:	bd70      	pop	{r4, r5, r6, pc}

08007224 <__sfp_lock_acquire>:
 8007224:	4801      	ldr	r0, [pc, #4]	; (800722c <__sfp_lock_acquire+0x8>)
 8007226:	f000 b8b8 	b.w	800739a <__retarget_lock_acquire_recursive>
 800722a:	bf00      	nop
 800722c:	200003dd 	.word	0x200003dd

08007230 <__sfp_lock_release>:
 8007230:	4801      	ldr	r0, [pc, #4]	; (8007238 <__sfp_lock_release+0x8>)
 8007232:	f000 b8b3 	b.w	800739c <__retarget_lock_release_recursive>
 8007236:	bf00      	nop
 8007238:	200003dd 	.word	0x200003dd

0800723c <__sinit_lock_acquire>:
 800723c:	4801      	ldr	r0, [pc, #4]	; (8007244 <__sinit_lock_acquire+0x8>)
 800723e:	f000 b8ac 	b.w	800739a <__retarget_lock_acquire_recursive>
 8007242:	bf00      	nop
 8007244:	200003de 	.word	0x200003de

08007248 <__sinit_lock_release>:
 8007248:	4801      	ldr	r0, [pc, #4]	; (8007250 <__sinit_lock_release+0x8>)
 800724a:	f000 b8a7 	b.w	800739c <__retarget_lock_release_recursive>
 800724e:	bf00      	nop
 8007250:	200003de 	.word	0x200003de

08007254 <__sinit>:
 8007254:	b510      	push	{r4, lr}
 8007256:	4604      	mov	r4, r0
 8007258:	f7ff fff0 	bl	800723c <__sinit_lock_acquire>
 800725c:	69a3      	ldr	r3, [r4, #24]
 800725e:	b11b      	cbz	r3, 8007268 <__sinit+0x14>
 8007260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007264:	f7ff bff0 	b.w	8007248 <__sinit_lock_release>
 8007268:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800726c:	6523      	str	r3, [r4, #80]	; 0x50
 800726e:	4b13      	ldr	r3, [pc, #76]	; (80072bc <__sinit+0x68>)
 8007270:	4a13      	ldr	r2, [pc, #76]	; (80072c0 <__sinit+0x6c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	62a2      	str	r2, [r4, #40]	; 0x28
 8007276:	42a3      	cmp	r3, r4
 8007278:	bf04      	itt	eq
 800727a:	2301      	moveq	r3, #1
 800727c:	61a3      	streq	r3, [r4, #24]
 800727e:	4620      	mov	r0, r4
 8007280:	f000 f820 	bl	80072c4 <__sfp>
 8007284:	6060      	str	r0, [r4, #4]
 8007286:	4620      	mov	r0, r4
 8007288:	f000 f81c 	bl	80072c4 <__sfp>
 800728c:	60a0      	str	r0, [r4, #8]
 800728e:	4620      	mov	r0, r4
 8007290:	f000 f818 	bl	80072c4 <__sfp>
 8007294:	2200      	movs	r2, #0
 8007296:	60e0      	str	r0, [r4, #12]
 8007298:	2104      	movs	r1, #4
 800729a:	6860      	ldr	r0, [r4, #4]
 800729c:	f7ff ff82 	bl	80071a4 <std>
 80072a0:	68a0      	ldr	r0, [r4, #8]
 80072a2:	2201      	movs	r2, #1
 80072a4:	2109      	movs	r1, #9
 80072a6:	f7ff ff7d 	bl	80071a4 <std>
 80072aa:	68e0      	ldr	r0, [r4, #12]
 80072ac:	2202      	movs	r2, #2
 80072ae:	2112      	movs	r1, #18
 80072b0:	f7ff ff78 	bl	80071a4 <std>
 80072b4:	2301      	movs	r3, #1
 80072b6:	61a3      	str	r3, [r4, #24]
 80072b8:	e7d2      	b.n	8007260 <__sinit+0xc>
 80072ba:	bf00      	nop
 80072bc:	08008650 	.word	0x08008650
 80072c0:	080071ed 	.word	0x080071ed

080072c4 <__sfp>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	4607      	mov	r7, r0
 80072c8:	f7ff ffac 	bl	8007224 <__sfp_lock_acquire>
 80072cc:	4b1e      	ldr	r3, [pc, #120]	; (8007348 <__sfp+0x84>)
 80072ce:	681e      	ldr	r6, [r3, #0]
 80072d0:	69b3      	ldr	r3, [r6, #24]
 80072d2:	b913      	cbnz	r3, 80072da <__sfp+0x16>
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7ff ffbd 	bl	8007254 <__sinit>
 80072da:	3648      	adds	r6, #72	; 0x48
 80072dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	d503      	bpl.n	80072ec <__sfp+0x28>
 80072e4:	6833      	ldr	r3, [r6, #0]
 80072e6:	b30b      	cbz	r3, 800732c <__sfp+0x68>
 80072e8:	6836      	ldr	r6, [r6, #0]
 80072ea:	e7f7      	b.n	80072dc <__sfp+0x18>
 80072ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072f0:	b9d5      	cbnz	r5, 8007328 <__sfp+0x64>
 80072f2:	4b16      	ldr	r3, [pc, #88]	; (800734c <__sfp+0x88>)
 80072f4:	60e3      	str	r3, [r4, #12]
 80072f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072fa:	6665      	str	r5, [r4, #100]	; 0x64
 80072fc:	f000 f84c 	bl	8007398 <__retarget_lock_init_recursive>
 8007300:	f7ff ff96 	bl	8007230 <__sfp_lock_release>
 8007304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800730c:	6025      	str	r5, [r4, #0]
 800730e:	61a5      	str	r5, [r4, #24]
 8007310:	2208      	movs	r2, #8
 8007312:	4629      	mov	r1, r5
 8007314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007318:	f7fe fc3e 	bl	8005b98 <memset>
 800731c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007324:	4620      	mov	r0, r4
 8007326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007328:	3468      	adds	r4, #104	; 0x68
 800732a:	e7d9      	b.n	80072e0 <__sfp+0x1c>
 800732c:	2104      	movs	r1, #4
 800732e:	4638      	mov	r0, r7
 8007330:	f7ff ff62 	bl	80071f8 <__sfmoreglue>
 8007334:	4604      	mov	r4, r0
 8007336:	6030      	str	r0, [r6, #0]
 8007338:	2800      	cmp	r0, #0
 800733a:	d1d5      	bne.n	80072e8 <__sfp+0x24>
 800733c:	f7ff ff78 	bl	8007230 <__sfp_lock_release>
 8007340:	230c      	movs	r3, #12
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	e7ee      	b.n	8007324 <__sfp+0x60>
 8007346:	bf00      	nop
 8007348:	08008650 	.word	0x08008650
 800734c:	ffff0001 	.word	0xffff0001

08007350 <_fwalk_reent>:
 8007350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007354:	4606      	mov	r6, r0
 8007356:	4688      	mov	r8, r1
 8007358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800735c:	2700      	movs	r7, #0
 800735e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007362:	f1b9 0901 	subs.w	r9, r9, #1
 8007366:	d505      	bpl.n	8007374 <_fwalk_reent+0x24>
 8007368:	6824      	ldr	r4, [r4, #0]
 800736a:	2c00      	cmp	r4, #0
 800736c:	d1f7      	bne.n	800735e <_fwalk_reent+0xe>
 800736e:	4638      	mov	r0, r7
 8007370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007374:	89ab      	ldrh	r3, [r5, #12]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d907      	bls.n	800738a <_fwalk_reent+0x3a>
 800737a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800737e:	3301      	adds	r3, #1
 8007380:	d003      	beq.n	800738a <_fwalk_reent+0x3a>
 8007382:	4629      	mov	r1, r5
 8007384:	4630      	mov	r0, r6
 8007386:	47c0      	blx	r8
 8007388:	4307      	orrs	r7, r0
 800738a:	3568      	adds	r5, #104	; 0x68
 800738c:	e7e9      	b.n	8007362 <_fwalk_reent+0x12>
	...

08007390 <_localeconv_r>:
 8007390:	4800      	ldr	r0, [pc, #0]	; (8007394 <_localeconv_r+0x4>)
 8007392:	4770      	bx	lr
 8007394:	20000160 	.word	0x20000160

08007398 <__retarget_lock_init_recursive>:
 8007398:	4770      	bx	lr

0800739a <__retarget_lock_acquire_recursive>:
 800739a:	4770      	bx	lr

0800739c <__retarget_lock_release_recursive>:
 800739c:	4770      	bx	lr
	...

080073a0 <malloc>:
 80073a0:	4b02      	ldr	r3, [pc, #8]	; (80073ac <malloc+0xc>)
 80073a2:	4601      	mov	r1, r0
 80073a4:	6818      	ldr	r0, [r3, #0]
 80073a6:	f000 bc17 	b.w	8007bd8 <_malloc_r>
 80073aa:	bf00      	nop
 80073ac:	2000000c 	.word	0x2000000c

080073b0 <memcpy>:
 80073b0:	440a      	add	r2, r1
 80073b2:	4291      	cmp	r1, r2
 80073b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80073b8:	d100      	bne.n	80073bc <memcpy+0xc>
 80073ba:	4770      	bx	lr
 80073bc:	b510      	push	{r4, lr}
 80073be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073c6:	4291      	cmp	r1, r2
 80073c8:	d1f9      	bne.n	80073be <memcpy+0xe>
 80073ca:	bd10      	pop	{r4, pc}

080073cc <_Balloc>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073d0:	4604      	mov	r4, r0
 80073d2:	460d      	mov	r5, r1
 80073d4:	b976      	cbnz	r6, 80073f4 <_Balloc+0x28>
 80073d6:	2010      	movs	r0, #16
 80073d8:	f7ff ffe2 	bl	80073a0 <malloc>
 80073dc:	4602      	mov	r2, r0
 80073de:	6260      	str	r0, [r4, #36]	; 0x24
 80073e0:	b920      	cbnz	r0, 80073ec <_Balloc+0x20>
 80073e2:	4b18      	ldr	r3, [pc, #96]	; (8007444 <_Balloc+0x78>)
 80073e4:	4818      	ldr	r0, [pc, #96]	; (8007448 <_Balloc+0x7c>)
 80073e6:	2166      	movs	r1, #102	; 0x66
 80073e8:	f000 feea 	bl	80081c0 <__assert_func>
 80073ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073f0:	6006      	str	r6, [r0, #0]
 80073f2:	60c6      	str	r6, [r0, #12]
 80073f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80073f6:	68f3      	ldr	r3, [r6, #12]
 80073f8:	b183      	cbz	r3, 800741c <_Balloc+0x50>
 80073fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007402:	b9b8      	cbnz	r0, 8007434 <_Balloc+0x68>
 8007404:	2101      	movs	r1, #1
 8007406:	fa01 f605 	lsl.w	r6, r1, r5
 800740a:	1d72      	adds	r2, r6, #5
 800740c:	0092      	lsls	r2, r2, #2
 800740e:	4620      	mov	r0, r4
 8007410:	f000 fb60 	bl	8007ad4 <_calloc_r>
 8007414:	b160      	cbz	r0, 8007430 <_Balloc+0x64>
 8007416:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800741a:	e00e      	b.n	800743a <_Balloc+0x6e>
 800741c:	2221      	movs	r2, #33	; 0x21
 800741e:	2104      	movs	r1, #4
 8007420:	4620      	mov	r0, r4
 8007422:	f000 fb57 	bl	8007ad4 <_calloc_r>
 8007426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007428:	60f0      	str	r0, [r6, #12]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e4      	bne.n	80073fa <_Balloc+0x2e>
 8007430:	2000      	movs	r0, #0
 8007432:	bd70      	pop	{r4, r5, r6, pc}
 8007434:	6802      	ldr	r2, [r0, #0]
 8007436:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800743a:	2300      	movs	r3, #0
 800743c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007440:	e7f7      	b.n	8007432 <_Balloc+0x66>
 8007442:	bf00      	nop
 8007444:	08008695 	.word	0x08008695
 8007448:	08008778 	.word	0x08008778

0800744c <_Bfree>:
 800744c:	b570      	push	{r4, r5, r6, lr}
 800744e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007450:	4605      	mov	r5, r0
 8007452:	460c      	mov	r4, r1
 8007454:	b976      	cbnz	r6, 8007474 <_Bfree+0x28>
 8007456:	2010      	movs	r0, #16
 8007458:	f7ff ffa2 	bl	80073a0 <malloc>
 800745c:	4602      	mov	r2, r0
 800745e:	6268      	str	r0, [r5, #36]	; 0x24
 8007460:	b920      	cbnz	r0, 800746c <_Bfree+0x20>
 8007462:	4b09      	ldr	r3, [pc, #36]	; (8007488 <_Bfree+0x3c>)
 8007464:	4809      	ldr	r0, [pc, #36]	; (800748c <_Bfree+0x40>)
 8007466:	218a      	movs	r1, #138	; 0x8a
 8007468:	f000 feaa 	bl	80081c0 <__assert_func>
 800746c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007470:	6006      	str	r6, [r0, #0]
 8007472:	60c6      	str	r6, [r0, #12]
 8007474:	b13c      	cbz	r4, 8007486 <_Bfree+0x3a>
 8007476:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007478:	6862      	ldr	r2, [r4, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007480:	6021      	str	r1, [r4, #0]
 8007482:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007486:	bd70      	pop	{r4, r5, r6, pc}
 8007488:	08008695 	.word	0x08008695
 800748c:	08008778 	.word	0x08008778

08007490 <__multadd>:
 8007490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007494:	690d      	ldr	r5, [r1, #16]
 8007496:	4607      	mov	r7, r0
 8007498:	460c      	mov	r4, r1
 800749a:	461e      	mov	r6, r3
 800749c:	f101 0c14 	add.w	ip, r1, #20
 80074a0:	2000      	movs	r0, #0
 80074a2:	f8dc 3000 	ldr.w	r3, [ip]
 80074a6:	b299      	uxth	r1, r3
 80074a8:	fb02 6101 	mla	r1, r2, r1, r6
 80074ac:	0c1e      	lsrs	r6, r3, #16
 80074ae:	0c0b      	lsrs	r3, r1, #16
 80074b0:	fb02 3306 	mla	r3, r2, r6, r3
 80074b4:	b289      	uxth	r1, r1
 80074b6:	3001      	adds	r0, #1
 80074b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074bc:	4285      	cmp	r5, r0
 80074be:	f84c 1b04 	str.w	r1, [ip], #4
 80074c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074c6:	dcec      	bgt.n	80074a2 <__multadd+0x12>
 80074c8:	b30e      	cbz	r6, 800750e <__multadd+0x7e>
 80074ca:	68a3      	ldr	r3, [r4, #8]
 80074cc:	42ab      	cmp	r3, r5
 80074ce:	dc19      	bgt.n	8007504 <__multadd+0x74>
 80074d0:	6861      	ldr	r1, [r4, #4]
 80074d2:	4638      	mov	r0, r7
 80074d4:	3101      	adds	r1, #1
 80074d6:	f7ff ff79 	bl	80073cc <_Balloc>
 80074da:	4680      	mov	r8, r0
 80074dc:	b928      	cbnz	r0, 80074ea <__multadd+0x5a>
 80074de:	4602      	mov	r2, r0
 80074e0:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <__multadd+0x84>)
 80074e2:	480d      	ldr	r0, [pc, #52]	; (8007518 <__multadd+0x88>)
 80074e4:	21b5      	movs	r1, #181	; 0xb5
 80074e6:	f000 fe6b 	bl	80081c0 <__assert_func>
 80074ea:	6922      	ldr	r2, [r4, #16]
 80074ec:	3202      	adds	r2, #2
 80074ee:	f104 010c 	add.w	r1, r4, #12
 80074f2:	0092      	lsls	r2, r2, #2
 80074f4:	300c      	adds	r0, #12
 80074f6:	f7ff ff5b 	bl	80073b0 <memcpy>
 80074fa:	4621      	mov	r1, r4
 80074fc:	4638      	mov	r0, r7
 80074fe:	f7ff ffa5 	bl	800744c <_Bfree>
 8007502:	4644      	mov	r4, r8
 8007504:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007508:	3501      	adds	r5, #1
 800750a:	615e      	str	r6, [r3, #20]
 800750c:	6125      	str	r5, [r4, #16]
 800750e:	4620      	mov	r0, r4
 8007510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007514:	08008707 	.word	0x08008707
 8007518:	08008778 	.word	0x08008778

0800751c <__hi0bits>:
 800751c:	0c03      	lsrs	r3, r0, #16
 800751e:	041b      	lsls	r3, r3, #16
 8007520:	b9d3      	cbnz	r3, 8007558 <__hi0bits+0x3c>
 8007522:	0400      	lsls	r0, r0, #16
 8007524:	2310      	movs	r3, #16
 8007526:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800752a:	bf04      	itt	eq
 800752c:	0200      	lsleq	r0, r0, #8
 800752e:	3308      	addeq	r3, #8
 8007530:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007534:	bf04      	itt	eq
 8007536:	0100      	lsleq	r0, r0, #4
 8007538:	3304      	addeq	r3, #4
 800753a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800753e:	bf04      	itt	eq
 8007540:	0080      	lsleq	r0, r0, #2
 8007542:	3302      	addeq	r3, #2
 8007544:	2800      	cmp	r0, #0
 8007546:	db05      	blt.n	8007554 <__hi0bits+0x38>
 8007548:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800754c:	f103 0301 	add.w	r3, r3, #1
 8007550:	bf08      	it	eq
 8007552:	2320      	moveq	r3, #32
 8007554:	4618      	mov	r0, r3
 8007556:	4770      	bx	lr
 8007558:	2300      	movs	r3, #0
 800755a:	e7e4      	b.n	8007526 <__hi0bits+0xa>

0800755c <__lo0bits>:
 800755c:	6803      	ldr	r3, [r0, #0]
 800755e:	f013 0207 	ands.w	r2, r3, #7
 8007562:	4601      	mov	r1, r0
 8007564:	d00b      	beq.n	800757e <__lo0bits+0x22>
 8007566:	07da      	lsls	r2, r3, #31
 8007568:	d423      	bmi.n	80075b2 <__lo0bits+0x56>
 800756a:	0798      	lsls	r0, r3, #30
 800756c:	bf49      	itett	mi
 800756e:	085b      	lsrmi	r3, r3, #1
 8007570:	089b      	lsrpl	r3, r3, #2
 8007572:	2001      	movmi	r0, #1
 8007574:	600b      	strmi	r3, [r1, #0]
 8007576:	bf5c      	itt	pl
 8007578:	600b      	strpl	r3, [r1, #0]
 800757a:	2002      	movpl	r0, #2
 800757c:	4770      	bx	lr
 800757e:	b298      	uxth	r0, r3
 8007580:	b9a8      	cbnz	r0, 80075ae <__lo0bits+0x52>
 8007582:	0c1b      	lsrs	r3, r3, #16
 8007584:	2010      	movs	r0, #16
 8007586:	b2da      	uxtb	r2, r3
 8007588:	b90a      	cbnz	r2, 800758e <__lo0bits+0x32>
 800758a:	3008      	adds	r0, #8
 800758c:	0a1b      	lsrs	r3, r3, #8
 800758e:	071a      	lsls	r2, r3, #28
 8007590:	bf04      	itt	eq
 8007592:	091b      	lsreq	r3, r3, #4
 8007594:	3004      	addeq	r0, #4
 8007596:	079a      	lsls	r2, r3, #30
 8007598:	bf04      	itt	eq
 800759a:	089b      	lsreq	r3, r3, #2
 800759c:	3002      	addeq	r0, #2
 800759e:	07da      	lsls	r2, r3, #31
 80075a0:	d403      	bmi.n	80075aa <__lo0bits+0x4e>
 80075a2:	085b      	lsrs	r3, r3, #1
 80075a4:	f100 0001 	add.w	r0, r0, #1
 80075a8:	d005      	beq.n	80075b6 <__lo0bits+0x5a>
 80075aa:	600b      	str	r3, [r1, #0]
 80075ac:	4770      	bx	lr
 80075ae:	4610      	mov	r0, r2
 80075b0:	e7e9      	b.n	8007586 <__lo0bits+0x2a>
 80075b2:	2000      	movs	r0, #0
 80075b4:	4770      	bx	lr
 80075b6:	2020      	movs	r0, #32
 80075b8:	4770      	bx	lr
	...

080075bc <__i2b>:
 80075bc:	b510      	push	{r4, lr}
 80075be:	460c      	mov	r4, r1
 80075c0:	2101      	movs	r1, #1
 80075c2:	f7ff ff03 	bl	80073cc <_Balloc>
 80075c6:	4602      	mov	r2, r0
 80075c8:	b928      	cbnz	r0, 80075d6 <__i2b+0x1a>
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <__i2b+0x24>)
 80075cc:	4805      	ldr	r0, [pc, #20]	; (80075e4 <__i2b+0x28>)
 80075ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80075d2:	f000 fdf5 	bl	80081c0 <__assert_func>
 80075d6:	2301      	movs	r3, #1
 80075d8:	6144      	str	r4, [r0, #20]
 80075da:	6103      	str	r3, [r0, #16]
 80075dc:	bd10      	pop	{r4, pc}
 80075de:	bf00      	nop
 80075e0:	08008707 	.word	0x08008707
 80075e4:	08008778 	.word	0x08008778

080075e8 <__multiply>:
 80075e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	4691      	mov	r9, r2
 80075ee:	690a      	ldr	r2, [r1, #16]
 80075f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	bfb8      	it	lt
 80075f8:	460b      	movlt	r3, r1
 80075fa:	460c      	mov	r4, r1
 80075fc:	bfbc      	itt	lt
 80075fe:	464c      	movlt	r4, r9
 8007600:	4699      	movlt	r9, r3
 8007602:	6927      	ldr	r7, [r4, #16]
 8007604:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007608:	68a3      	ldr	r3, [r4, #8]
 800760a:	6861      	ldr	r1, [r4, #4]
 800760c:	eb07 060a 	add.w	r6, r7, sl
 8007610:	42b3      	cmp	r3, r6
 8007612:	b085      	sub	sp, #20
 8007614:	bfb8      	it	lt
 8007616:	3101      	addlt	r1, #1
 8007618:	f7ff fed8 	bl	80073cc <_Balloc>
 800761c:	b930      	cbnz	r0, 800762c <__multiply+0x44>
 800761e:	4602      	mov	r2, r0
 8007620:	4b44      	ldr	r3, [pc, #272]	; (8007734 <__multiply+0x14c>)
 8007622:	4845      	ldr	r0, [pc, #276]	; (8007738 <__multiply+0x150>)
 8007624:	f240 115d 	movw	r1, #349	; 0x15d
 8007628:	f000 fdca 	bl	80081c0 <__assert_func>
 800762c:	f100 0514 	add.w	r5, r0, #20
 8007630:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007634:	462b      	mov	r3, r5
 8007636:	2200      	movs	r2, #0
 8007638:	4543      	cmp	r3, r8
 800763a:	d321      	bcc.n	8007680 <__multiply+0x98>
 800763c:	f104 0314 	add.w	r3, r4, #20
 8007640:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007644:	f109 0314 	add.w	r3, r9, #20
 8007648:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800764c:	9202      	str	r2, [sp, #8]
 800764e:	1b3a      	subs	r2, r7, r4
 8007650:	3a15      	subs	r2, #21
 8007652:	f022 0203 	bic.w	r2, r2, #3
 8007656:	3204      	adds	r2, #4
 8007658:	f104 0115 	add.w	r1, r4, #21
 800765c:	428f      	cmp	r7, r1
 800765e:	bf38      	it	cc
 8007660:	2204      	movcc	r2, #4
 8007662:	9201      	str	r2, [sp, #4]
 8007664:	9a02      	ldr	r2, [sp, #8]
 8007666:	9303      	str	r3, [sp, #12]
 8007668:	429a      	cmp	r2, r3
 800766a:	d80c      	bhi.n	8007686 <__multiply+0x9e>
 800766c:	2e00      	cmp	r6, #0
 800766e:	dd03      	ble.n	8007678 <__multiply+0x90>
 8007670:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007674:	2b00      	cmp	r3, #0
 8007676:	d05a      	beq.n	800772e <__multiply+0x146>
 8007678:	6106      	str	r6, [r0, #16]
 800767a:	b005      	add	sp, #20
 800767c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007680:	f843 2b04 	str.w	r2, [r3], #4
 8007684:	e7d8      	b.n	8007638 <__multiply+0x50>
 8007686:	f8b3 a000 	ldrh.w	sl, [r3]
 800768a:	f1ba 0f00 	cmp.w	sl, #0
 800768e:	d024      	beq.n	80076da <__multiply+0xf2>
 8007690:	f104 0e14 	add.w	lr, r4, #20
 8007694:	46a9      	mov	r9, r5
 8007696:	f04f 0c00 	mov.w	ip, #0
 800769a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800769e:	f8d9 1000 	ldr.w	r1, [r9]
 80076a2:	fa1f fb82 	uxth.w	fp, r2
 80076a6:	b289      	uxth	r1, r1
 80076a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80076ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80076b0:	f8d9 2000 	ldr.w	r2, [r9]
 80076b4:	4461      	add	r1, ip
 80076b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80076be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076c2:	b289      	uxth	r1, r1
 80076c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076c8:	4577      	cmp	r7, lr
 80076ca:	f849 1b04 	str.w	r1, [r9], #4
 80076ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076d2:	d8e2      	bhi.n	800769a <__multiply+0xb2>
 80076d4:	9a01      	ldr	r2, [sp, #4]
 80076d6:	f845 c002 	str.w	ip, [r5, r2]
 80076da:	9a03      	ldr	r2, [sp, #12]
 80076dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80076e0:	3304      	adds	r3, #4
 80076e2:	f1b9 0f00 	cmp.w	r9, #0
 80076e6:	d020      	beq.n	800772a <__multiply+0x142>
 80076e8:	6829      	ldr	r1, [r5, #0]
 80076ea:	f104 0c14 	add.w	ip, r4, #20
 80076ee:	46ae      	mov	lr, r5
 80076f0:	f04f 0a00 	mov.w	sl, #0
 80076f4:	f8bc b000 	ldrh.w	fp, [ip]
 80076f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80076fc:	fb09 220b 	mla	r2, r9, fp, r2
 8007700:	4492      	add	sl, r2
 8007702:	b289      	uxth	r1, r1
 8007704:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007708:	f84e 1b04 	str.w	r1, [lr], #4
 800770c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007710:	f8be 1000 	ldrh.w	r1, [lr]
 8007714:	0c12      	lsrs	r2, r2, #16
 8007716:	fb09 1102 	mla	r1, r9, r2, r1
 800771a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800771e:	4567      	cmp	r7, ip
 8007720:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007724:	d8e6      	bhi.n	80076f4 <__multiply+0x10c>
 8007726:	9a01      	ldr	r2, [sp, #4]
 8007728:	50a9      	str	r1, [r5, r2]
 800772a:	3504      	adds	r5, #4
 800772c:	e79a      	b.n	8007664 <__multiply+0x7c>
 800772e:	3e01      	subs	r6, #1
 8007730:	e79c      	b.n	800766c <__multiply+0x84>
 8007732:	bf00      	nop
 8007734:	08008707 	.word	0x08008707
 8007738:	08008778 	.word	0x08008778

0800773c <__pow5mult>:
 800773c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007740:	4615      	mov	r5, r2
 8007742:	f012 0203 	ands.w	r2, r2, #3
 8007746:	4606      	mov	r6, r0
 8007748:	460f      	mov	r7, r1
 800774a:	d007      	beq.n	800775c <__pow5mult+0x20>
 800774c:	4c25      	ldr	r4, [pc, #148]	; (80077e4 <__pow5mult+0xa8>)
 800774e:	3a01      	subs	r2, #1
 8007750:	2300      	movs	r3, #0
 8007752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007756:	f7ff fe9b 	bl	8007490 <__multadd>
 800775a:	4607      	mov	r7, r0
 800775c:	10ad      	asrs	r5, r5, #2
 800775e:	d03d      	beq.n	80077dc <__pow5mult+0xa0>
 8007760:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007762:	b97c      	cbnz	r4, 8007784 <__pow5mult+0x48>
 8007764:	2010      	movs	r0, #16
 8007766:	f7ff fe1b 	bl	80073a0 <malloc>
 800776a:	4602      	mov	r2, r0
 800776c:	6270      	str	r0, [r6, #36]	; 0x24
 800776e:	b928      	cbnz	r0, 800777c <__pow5mult+0x40>
 8007770:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <__pow5mult+0xac>)
 8007772:	481e      	ldr	r0, [pc, #120]	; (80077ec <__pow5mult+0xb0>)
 8007774:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007778:	f000 fd22 	bl	80081c0 <__assert_func>
 800777c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007780:	6004      	str	r4, [r0, #0]
 8007782:	60c4      	str	r4, [r0, #12]
 8007784:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007788:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800778c:	b94c      	cbnz	r4, 80077a2 <__pow5mult+0x66>
 800778e:	f240 2171 	movw	r1, #625	; 0x271
 8007792:	4630      	mov	r0, r6
 8007794:	f7ff ff12 	bl	80075bc <__i2b>
 8007798:	2300      	movs	r3, #0
 800779a:	f8c8 0008 	str.w	r0, [r8, #8]
 800779e:	4604      	mov	r4, r0
 80077a0:	6003      	str	r3, [r0, #0]
 80077a2:	f04f 0900 	mov.w	r9, #0
 80077a6:	07eb      	lsls	r3, r5, #31
 80077a8:	d50a      	bpl.n	80077c0 <__pow5mult+0x84>
 80077aa:	4639      	mov	r1, r7
 80077ac:	4622      	mov	r2, r4
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7ff ff1a 	bl	80075e8 <__multiply>
 80077b4:	4639      	mov	r1, r7
 80077b6:	4680      	mov	r8, r0
 80077b8:	4630      	mov	r0, r6
 80077ba:	f7ff fe47 	bl	800744c <_Bfree>
 80077be:	4647      	mov	r7, r8
 80077c0:	106d      	asrs	r5, r5, #1
 80077c2:	d00b      	beq.n	80077dc <__pow5mult+0xa0>
 80077c4:	6820      	ldr	r0, [r4, #0]
 80077c6:	b938      	cbnz	r0, 80077d8 <__pow5mult+0x9c>
 80077c8:	4622      	mov	r2, r4
 80077ca:	4621      	mov	r1, r4
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7ff ff0b 	bl	80075e8 <__multiply>
 80077d2:	6020      	str	r0, [r4, #0]
 80077d4:	f8c0 9000 	str.w	r9, [r0]
 80077d8:	4604      	mov	r4, r0
 80077da:	e7e4      	b.n	80077a6 <__pow5mult+0x6a>
 80077dc:	4638      	mov	r0, r7
 80077de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077e2:	bf00      	nop
 80077e4:	080088c8 	.word	0x080088c8
 80077e8:	08008695 	.word	0x08008695
 80077ec:	08008778 	.word	0x08008778

080077f0 <__lshift>:
 80077f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f4:	460c      	mov	r4, r1
 80077f6:	6849      	ldr	r1, [r1, #4]
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077fe:	68a3      	ldr	r3, [r4, #8]
 8007800:	4607      	mov	r7, r0
 8007802:	4691      	mov	r9, r2
 8007804:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007808:	f108 0601 	add.w	r6, r8, #1
 800780c:	42b3      	cmp	r3, r6
 800780e:	db0b      	blt.n	8007828 <__lshift+0x38>
 8007810:	4638      	mov	r0, r7
 8007812:	f7ff fddb 	bl	80073cc <_Balloc>
 8007816:	4605      	mov	r5, r0
 8007818:	b948      	cbnz	r0, 800782e <__lshift+0x3e>
 800781a:	4602      	mov	r2, r0
 800781c:	4b2a      	ldr	r3, [pc, #168]	; (80078c8 <__lshift+0xd8>)
 800781e:	482b      	ldr	r0, [pc, #172]	; (80078cc <__lshift+0xdc>)
 8007820:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007824:	f000 fccc 	bl	80081c0 <__assert_func>
 8007828:	3101      	adds	r1, #1
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	e7ee      	b.n	800780c <__lshift+0x1c>
 800782e:	2300      	movs	r3, #0
 8007830:	f100 0114 	add.w	r1, r0, #20
 8007834:	f100 0210 	add.w	r2, r0, #16
 8007838:	4618      	mov	r0, r3
 800783a:	4553      	cmp	r3, sl
 800783c:	db37      	blt.n	80078ae <__lshift+0xbe>
 800783e:	6920      	ldr	r0, [r4, #16]
 8007840:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007844:	f104 0314 	add.w	r3, r4, #20
 8007848:	f019 091f 	ands.w	r9, r9, #31
 800784c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007850:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007854:	d02f      	beq.n	80078b6 <__lshift+0xc6>
 8007856:	f1c9 0e20 	rsb	lr, r9, #32
 800785a:	468a      	mov	sl, r1
 800785c:	f04f 0c00 	mov.w	ip, #0
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	fa02 f209 	lsl.w	r2, r2, r9
 8007866:	ea42 020c 	orr.w	r2, r2, ip
 800786a:	f84a 2b04 	str.w	r2, [sl], #4
 800786e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007872:	4298      	cmp	r0, r3
 8007874:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007878:	d8f2      	bhi.n	8007860 <__lshift+0x70>
 800787a:	1b03      	subs	r3, r0, r4
 800787c:	3b15      	subs	r3, #21
 800787e:	f023 0303 	bic.w	r3, r3, #3
 8007882:	3304      	adds	r3, #4
 8007884:	f104 0215 	add.w	r2, r4, #21
 8007888:	4290      	cmp	r0, r2
 800788a:	bf38      	it	cc
 800788c:	2304      	movcc	r3, #4
 800788e:	f841 c003 	str.w	ip, [r1, r3]
 8007892:	f1bc 0f00 	cmp.w	ip, #0
 8007896:	d001      	beq.n	800789c <__lshift+0xac>
 8007898:	f108 0602 	add.w	r6, r8, #2
 800789c:	3e01      	subs	r6, #1
 800789e:	4638      	mov	r0, r7
 80078a0:	612e      	str	r6, [r5, #16]
 80078a2:	4621      	mov	r1, r4
 80078a4:	f7ff fdd2 	bl	800744c <_Bfree>
 80078a8:	4628      	mov	r0, r5
 80078aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80078b2:	3301      	adds	r3, #1
 80078b4:	e7c1      	b.n	800783a <__lshift+0x4a>
 80078b6:	3904      	subs	r1, #4
 80078b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80078c0:	4298      	cmp	r0, r3
 80078c2:	d8f9      	bhi.n	80078b8 <__lshift+0xc8>
 80078c4:	e7ea      	b.n	800789c <__lshift+0xac>
 80078c6:	bf00      	nop
 80078c8:	08008707 	.word	0x08008707
 80078cc:	08008778 	.word	0x08008778

080078d0 <__mcmp>:
 80078d0:	b530      	push	{r4, r5, lr}
 80078d2:	6902      	ldr	r2, [r0, #16]
 80078d4:	690c      	ldr	r4, [r1, #16]
 80078d6:	1b12      	subs	r2, r2, r4
 80078d8:	d10e      	bne.n	80078f8 <__mcmp+0x28>
 80078da:	f100 0314 	add.w	r3, r0, #20
 80078de:	3114      	adds	r1, #20
 80078e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80078e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80078e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80078ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80078f0:	42a5      	cmp	r5, r4
 80078f2:	d003      	beq.n	80078fc <__mcmp+0x2c>
 80078f4:	d305      	bcc.n	8007902 <__mcmp+0x32>
 80078f6:	2201      	movs	r2, #1
 80078f8:	4610      	mov	r0, r2
 80078fa:	bd30      	pop	{r4, r5, pc}
 80078fc:	4283      	cmp	r3, r0
 80078fe:	d3f3      	bcc.n	80078e8 <__mcmp+0x18>
 8007900:	e7fa      	b.n	80078f8 <__mcmp+0x28>
 8007902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007906:	e7f7      	b.n	80078f8 <__mcmp+0x28>

08007908 <__mdiff>:
 8007908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	460c      	mov	r4, r1
 800790e:	4606      	mov	r6, r0
 8007910:	4611      	mov	r1, r2
 8007912:	4620      	mov	r0, r4
 8007914:	4690      	mov	r8, r2
 8007916:	f7ff ffdb 	bl	80078d0 <__mcmp>
 800791a:	1e05      	subs	r5, r0, #0
 800791c:	d110      	bne.n	8007940 <__mdiff+0x38>
 800791e:	4629      	mov	r1, r5
 8007920:	4630      	mov	r0, r6
 8007922:	f7ff fd53 	bl	80073cc <_Balloc>
 8007926:	b930      	cbnz	r0, 8007936 <__mdiff+0x2e>
 8007928:	4b3a      	ldr	r3, [pc, #232]	; (8007a14 <__mdiff+0x10c>)
 800792a:	4602      	mov	r2, r0
 800792c:	f240 2132 	movw	r1, #562	; 0x232
 8007930:	4839      	ldr	r0, [pc, #228]	; (8007a18 <__mdiff+0x110>)
 8007932:	f000 fc45 	bl	80081c0 <__assert_func>
 8007936:	2301      	movs	r3, #1
 8007938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800793c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007940:	bfa4      	itt	ge
 8007942:	4643      	movge	r3, r8
 8007944:	46a0      	movge	r8, r4
 8007946:	4630      	mov	r0, r6
 8007948:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800794c:	bfa6      	itte	ge
 800794e:	461c      	movge	r4, r3
 8007950:	2500      	movge	r5, #0
 8007952:	2501      	movlt	r5, #1
 8007954:	f7ff fd3a 	bl	80073cc <_Balloc>
 8007958:	b920      	cbnz	r0, 8007964 <__mdiff+0x5c>
 800795a:	4b2e      	ldr	r3, [pc, #184]	; (8007a14 <__mdiff+0x10c>)
 800795c:	4602      	mov	r2, r0
 800795e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007962:	e7e5      	b.n	8007930 <__mdiff+0x28>
 8007964:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007968:	6926      	ldr	r6, [r4, #16]
 800796a:	60c5      	str	r5, [r0, #12]
 800796c:	f104 0914 	add.w	r9, r4, #20
 8007970:	f108 0514 	add.w	r5, r8, #20
 8007974:	f100 0e14 	add.w	lr, r0, #20
 8007978:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800797c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007980:	f108 0210 	add.w	r2, r8, #16
 8007984:	46f2      	mov	sl, lr
 8007986:	2100      	movs	r1, #0
 8007988:	f859 3b04 	ldr.w	r3, [r9], #4
 800798c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007990:	fa1f f883 	uxth.w	r8, r3
 8007994:	fa11 f18b 	uxtah	r1, r1, fp
 8007998:	0c1b      	lsrs	r3, r3, #16
 800799a:	eba1 0808 	sub.w	r8, r1, r8
 800799e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079a6:	fa1f f888 	uxth.w	r8, r8
 80079aa:	1419      	asrs	r1, r3, #16
 80079ac:	454e      	cmp	r6, r9
 80079ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079b2:	f84a 3b04 	str.w	r3, [sl], #4
 80079b6:	d8e7      	bhi.n	8007988 <__mdiff+0x80>
 80079b8:	1b33      	subs	r3, r6, r4
 80079ba:	3b15      	subs	r3, #21
 80079bc:	f023 0303 	bic.w	r3, r3, #3
 80079c0:	3304      	adds	r3, #4
 80079c2:	3415      	adds	r4, #21
 80079c4:	42a6      	cmp	r6, r4
 80079c6:	bf38      	it	cc
 80079c8:	2304      	movcc	r3, #4
 80079ca:	441d      	add	r5, r3
 80079cc:	4473      	add	r3, lr
 80079ce:	469e      	mov	lr, r3
 80079d0:	462e      	mov	r6, r5
 80079d2:	4566      	cmp	r6, ip
 80079d4:	d30e      	bcc.n	80079f4 <__mdiff+0xec>
 80079d6:	f10c 0203 	add.w	r2, ip, #3
 80079da:	1b52      	subs	r2, r2, r5
 80079dc:	f022 0203 	bic.w	r2, r2, #3
 80079e0:	3d03      	subs	r5, #3
 80079e2:	45ac      	cmp	ip, r5
 80079e4:	bf38      	it	cc
 80079e6:	2200      	movcc	r2, #0
 80079e8:	441a      	add	r2, r3
 80079ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80079ee:	b17b      	cbz	r3, 8007a10 <__mdiff+0x108>
 80079f0:	6107      	str	r7, [r0, #16]
 80079f2:	e7a3      	b.n	800793c <__mdiff+0x34>
 80079f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80079f8:	fa11 f288 	uxtah	r2, r1, r8
 80079fc:	1414      	asrs	r4, r2, #16
 80079fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a02:	b292      	uxth	r2, r2
 8007a04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a08:	f84e 2b04 	str.w	r2, [lr], #4
 8007a0c:	1421      	asrs	r1, r4, #16
 8007a0e:	e7e0      	b.n	80079d2 <__mdiff+0xca>
 8007a10:	3f01      	subs	r7, #1
 8007a12:	e7ea      	b.n	80079ea <__mdiff+0xe2>
 8007a14:	08008707 	.word	0x08008707
 8007a18:	08008778 	.word	0x08008778

08007a1c <__d2b>:
 8007a1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a20:	4689      	mov	r9, r1
 8007a22:	2101      	movs	r1, #1
 8007a24:	ec57 6b10 	vmov	r6, r7, d0
 8007a28:	4690      	mov	r8, r2
 8007a2a:	f7ff fccf 	bl	80073cc <_Balloc>
 8007a2e:	4604      	mov	r4, r0
 8007a30:	b930      	cbnz	r0, 8007a40 <__d2b+0x24>
 8007a32:	4602      	mov	r2, r0
 8007a34:	4b25      	ldr	r3, [pc, #148]	; (8007acc <__d2b+0xb0>)
 8007a36:	4826      	ldr	r0, [pc, #152]	; (8007ad0 <__d2b+0xb4>)
 8007a38:	f240 310a 	movw	r1, #778	; 0x30a
 8007a3c:	f000 fbc0 	bl	80081c0 <__assert_func>
 8007a40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a48:	bb35      	cbnz	r5, 8007a98 <__d2b+0x7c>
 8007a4a:	2e00      	cmp	r6, #0
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	d028      	beq.n	8007aa2 <__d2b+0x86>
 8007a50:	4668      	mov	r0, sp
 8007a52:	9600      	str	r6, [sp, #0]
 8007a54:	f7ff fd82 	bl	800755c <__lo0bits>
 8007a58:	9900      	ldr	r1, [sp, #0]
 8007a5a:	b300      	cbz	r0, 8007a9e <__d2b+0x82>
 8007a5c:	9a01      	ldr	r2, [sp, #4]
 8007a5e:	f1c0 0320 	rsb	r3, r0, #32
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	430b      	orrs	r3, r1
 8007a68:	40c2      	lsrs	r2, r0
 8007a6a:	6163      	str	r3, [r4, #20]
 8007a6c:	9201      	str	r2, [sp, #4]
 8007a6e:	9b01      	ldr	r3, [sp, #4]
 8007a70:	61a3      	str	r3, [r4, #24]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bf14      	ite	ne
 8007a76:	2202      	movne	r2, #2
 8007a78:	2201      	moveq	r2, #1
 8007a7a:	6122      	str	r2, [r4, #16]
 8007a7c:	b1d5      	cbz	r5, 8007ab4 <__d2b+0x98>
 8007a7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a82:	4405      	add	r5, r0
 8007a84:	f8c9 5000 	str.w	r5, [r9]
 8007a88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a8c:	f8c8 0000 	str.w	r0, [r8]
 8007a90:	4620      	mov	r0, r4
 8007a92:	b003      	add	sp, #12
 8007a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a9c:	e7d5      	b.n	8007a4a <__d2b+0x2e>
 8007a9e:	6161      	str	r1, [r4, #20]
 8007aa0:	e7e5      	b.n	8007a6e <__d2b+0x52>
 8007aa2:	a801      	add	r0, sp, #4
 8007aa4:	f7ff fd5a 	bl	800755c <__lo0bits>
 8007aa8:	9b01      	ldr	r3, [sp, #4]
 8007aaa:	6163      	str	r3, [r4, #20]
 8007aac:	2201      	movs	r2, #1
 8007aae:	6122      	str	r2, [r4, #16]
 8007ab0:	3020      	adds	r0, #32
 8007ab2:	e7e3      	b.n	8007a7c <__d2b+0x60>
 8007ab4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ab8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007abc:	f8c9 0000 	str.w	r0, [r9]
 8007ac0:	6918      	ldr	r0, [r3, #16]
 8007ac2:	f7ff fd2b 	bl	800751c <__hi0bits>
 8007ac6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007aca:	e7df      	b.n	8007a8c <__d2b+0x70>
 8007acc:	08008707 	.word	0x08008707
 8007ad0:	08008778 	.word	0x08008778

08007ad4 <_calloc_r>:
 8007ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ad6:	fba1 2402 	umull	r2, r4, r1, r2
 8007ada:	b94c      	cbnz	r4, 8007af0 <_calloc_r+0x1c>
 8007adc:	4611      	mov	r1, r2
 8007ade:	9201      	str	r2, [sp, #4]
 8007ae0:	f000 f87a 	bl	8007bd8 <_malloc_r>
 8007ae4:	9a01      	ldr	r2, [sp, #4]
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	b930      	cbnz	r0, 8007af8 <_calloc_r+0x24>
 8007aea:	4628      	mov	r0, r5
 8007aec:	b003      	add	sp, #12
 8007aee:	bd30      	pop	{r4, r5, pc}
 8007af0:	220c      	movs	r2, #12
 8007af2:	6002      	str	r2, [r0, #0]
 8007af4:	2500      	movs	r5, #0
 8007af6:	e7f8      	b.n	8007aea <_calloc_r+0x16>
 8007af8:	4621      	mov	r1, r4
 8007afa:	f7fe f84d 	bl	8005b98 <memset>
 8007afe:	e7f4      	b.n	8007aea <_calloc_r+0x16>

08007b00 <_free_r>:
 8007b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b02:	2900      	cmp	r1, #0
 8007b04:	d044      	beq.n	8007b90 <_free_r+0x90>
 8007b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b0a:	9001      	str	r0, [sp, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b12:	bfb8      	it	lt
 8007b14:	18e4      	addlt	r4, r4, r3
 8007b16:	f000 fcdf 	bl	80084d8 <__malloc_lock>
 8007b1a:	4a1e      	ldr	r2, [pc, #120]	; (8007b94 <_free_r+0x94>)
 8007b1c:	9801      	ldr	r0, [sp, #4]
 8007b1e:	6813      	ldr	r3, [r2, #0]
 8007b20:	b933      	cbnz	r3, 8007b30 <_free_r+0x30>
 8007b22:	6063      	str	r3, [r4, #4]
 8007b24:	6014      	str	r4, [r2, #0]
 8007b26:	b003      	add	sp, #12
 8007b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b2c:	f000 bcda 	b.w	80084e4 <__malloc_unlock>
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	d908      	bls.n	8007b46 <_free_r+0x46>
 8007b34:	6825      	ldr	r5, [r4, #0]
 8007b36:	1961      	adds	r1, r4, r5
 8007b38:	428b      	cmp	r3, r1
 8007b3a:	bf01      	itttt	eq
 8007b3c:	6819      	ldreq	r1, [r3, #0]
 8007b3e:	685b      	ldreq	r3, [r3, #4]
 8007b40:	1949      	addeq	r1, r1, r5
 8007b42:	6021      	streq	r1, [r4, #0]
 8007b44:	e7ed      	b.n	8007b22 <_free_r+0x22>
 8007b46:	461a      	mov	r2, r3
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	b10b      	cbz	r3, 8007b50 <_free_r+0x50>
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	d9fa      	bls.n	8007b46 <_free_r+0x46>
 8007b50:	6811      	ldr	r1, [r2, #0]
 8007b52:	1855      	adds	r5, r2, r1
 8007b54:	42a5      	cmp	r5, r4
 8007b56:	d10b      	bne.n	8007b70 <_free_r+0x70>
 8007b58:	6824      	ldr	r4, [r4, #0]
 8007b5a:	4421      	add	r1, r4
 8007b5c:	1854      	adds	r4, r2, r1
 8007b5e:	42a3      	cmp	r3, r4
 8007b60:	6011      	str	r1, [r2, #0]
 8007b62:	d1e0      	bne.n	8007b26 <_free_r+0x26>
 8007b64:	681c      	ldr	r4, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	6053      	str	r3, [r2, #4]
 8007b6a:	4421      	add	r1, r4
 8007b6c:	6011      	str	r1, [r2, #0]
 8007b6e:	e7da      	b.n	8007b26 <_free_r+0x26>
 8007b70:	d902      	bls.n	8007b78 <_free_r+0x78>
 8007b72:	230c      	movs	r3, #12
 8007b74:	6003      	str	r3, [r0, #0]
 8007b76:	e7d6      	b.n	8007b26 <_free_r+0x26>
 8007b78:	6825      	ldr	r5, [r4, #0]
 8007b7a:	1961      	adds	r1, r4, r5
 8007b7c:	428b      	cmp	r3, r1
 8007b7e:	bf04      	itt	eq
 8007b80:	6819      	ldreq	r1, [r3, #0]
 8007b82:	685b      	ldreq	r3, [r3, #4]
 8007b84:	6063      	str	r3, [r4, #4]
 8007b86:	bf04      	itt	eq
 8007b88:	1949      	addeq	r1, r1, r5
 8007b8a:	6021      	streq	r1, [r4, #0]
 8007b8c:	6054      	str	r4, [r2, #4]
 8007b8e:	e7ca      	b.n	8007b26 <_free_r+0x26>
 8007b90:	b003      	add	sp, #12
 8007b92:	bd30      	pop	{r4, r5, pc}
 8007b94:	200003e0 	.word	0x200003e0

08007b98 <sbrk_aligned>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	4e0e      	ldr	r6, [pc, #56]	; (8007bd4 <sbrk_aligned+0x3c>)
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	6831      	ldr	r1, [r6, #0]
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	b911      	cbnz	r1, 8007baa <sbrk_aligned+0x12>
 8007ba4:	f000 f9e6 	bl	8007f74 <_sbrk_r>
 8007ba8:	6030      	str	r0, [r6, #0]
 8007baa:	4621      	mov	r1, r4
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 f9e1 	bl	8007f74 <_sbrk_r>
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	d00a      	beq.n	8007bcc <sbrk_aligned+0x34>
 8007bb6:	1cc4      	adds	r4, r0, #3
 8007bb8:	f024 0403 	bic.w	r4, r4, #3
 8007bbc:	42a0      	cmp	r0, r4
 8007bbe:	d007      	beq.n	8007bd0 <sbrk_aligned+0x38>
 8007bc0:	1a21      	subs	r1, r4, r0
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 f9d6 	bl	8007f74 <_sbrk_r>
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d101      	bne.n	8007bd0 <sbrk_aligned+0x38>
 8007bcc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
 8007bd4:	200003e4 	.word	0x200003e4

08007bd8 <_malloc_r>:
 8007bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bdc:	1ccd      	adds	r5, r1, #3
 8007bde:	f025 0503 	bic.w	r5, r5, #3
 8007be2:	3508      	adds	r5, #8
 8007be4:	2d0c      	cmp	r5, #12
 8007be6:	bf38      	it	cc
 8007be8:	250c      	movcc	r5, #12
 8007bea:	2d00      	cmp	r5, #0
 8007bec:	4607      	mov	r7, r0
 8007bee:	db01      	blt.n	8007bf4 <_malloc_r+0x1c>
 8007bf0:	42a9      	cmp	r1, r5
 8007bf2:	d905      	bls.n	8007c00 <_malloc_r+0x28>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	2600      	movs	r6, #0
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c00:	4e2e      	ldr	r6, [pc, #184]	; (8007cbc <_malloc_r+0xe4>)
 8007c02:	f000 fc69 	bl	80084d8 <__malloc_lock>
 8007c06:	6833      	ldr	r3, [r6, #0]
 8007c08:	461c      	mov	r4, r3
 8007c0a:	bb34      	cbnz	r4, 8007c5a <_malloc_r+0x82>
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4638      	mov	r0, r7
 8007c10:	f7ff ffc2 	bl	8007b98 <sbrk_aligned>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	4604      	mov	r4, r0
 8007c18:	d14d      	bne.n	8007cb6 <_malloc_r+0xde>
 8007c1a:	6834      	ldr	r4, [r6, #0]
 8007c1c:	4626      	mov	r6, r4
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	d140      	bne.n	8007ca4 <_malloc_r+0xcc>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	4631      	mov	r1, r6
 8007c26:	4638      	mov	r0, r7
 8007c28:	eb04 0803 	add.w	r8, r4, r3
 8007c2c:	f000 f9a2 	bl	8007f74 <_sbrk_r>
 8007c30:	4580      	cmp	r8, r0
 8007c32:	d13a      	bne.n	8007caa <_malloc_r+0xd2>
 8007c34:	6821      	ldr	r1, [r4, #0]
 8007c36:	3503      	adds	r5, #3
 8007c38:	1a6d      	subs	r5, r5, r1
 8007c3a:	f025 0503 	bic.w	r5, r5, #3
 8007c3e:	3508      	adds	r5, #8
 8007c40:	2d0c      	cmp	r5, #12
 8007c42:	bf38      	it	cc
 8007c44:	250c      	movcc	r5, #12
 8007c46:	4629      	mov	r1, r5
 8007c48:	4638      	mov	r0, r7
 8007c4a:	f7ff ffa5 	bl	8007b98 <sbrk_aligned>
 8007c4e:	3001      	adds	r0, #1
 8007c50:	d02b      	beq.n	8007caa <_malloc_r+0xd2>
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	442b      	add	r3, r5
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	e00e      	b.n	8007c78 <_malloc_r+0xa0>
 8007c5a:	6822      	ldr	r2, [r4, #0]
 8007c5c:	1b52      	subs	r2, r2, r5
 8007c5e:	d41e      	bmi.n	8007c9e <_malloc_r+0xc6>
 8007c60:	2a0b      	cmp	r2, #11
 8007c62:	d916      	bls.n	8007c92 <_malloc_r+0xba>
 8007c64:	1961      	adds	r1, r4, r5
 8007c66:	42a3      	cmp	r3, r4
 8007c68:	6025      	str	r5, [r4, #0]
 8007c6a:	bf18      	it	ne
 8007c6c:	6059      	strne	r1, [r3, #4]
 8007c6e:	6863      	ldr	r3, [r4, #4]
 8007c70:	bf08      	it	eq
 8007c72:	6031      	streq	r1, [r6, #0]
 8007c74:	5162      	str	r2, [r4, r5]
 8007c76:	604b      	str	r3, [r1, #4]
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f104 060b 	add.w	r6, r4, #11
 8007c7e:	f000 fc31 	bl	80084e4 <__malloc_unlock>
 8007c82:	f026 0607 	bic.w	r6, r6, #7
 8007c86:	1d23      	adds	r3, r4, #4
 8007c88:	1af2      	subs	r2, r6, r3
 8007c8a:	d0b6      	beq.n	8007bfa <_malloc_r+0x22>
 8007c8c:	1b9b      	subs	r3, r3, r6
 8007c8e:	50a3      	str	r3, [r4, r2]
 8007c90:	e7b3      	b.n	8007bfa <_malloc_r+0x22>
 8007c92:	6862      	ldr	r2, [r4, #4]
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	bf0c      	ite	eq
 8007c98:	6032      	streq	r2, [r6, #0]
 8007c9a:	605a      	strne	r2, [r3, #4]
 8007c9c:	e7ec      	b.n	8007c78 <_malloc_r+0xa0>
 8007c9e:	4623      	mov	r3, r4
 8007ca0:	6864      	ldr	r4, [r4, #4]
 8007ca2:	e7b2      	b.n	8007c0a <_malloc_r+0x32>
 8007ca4:	4634      	mov	r4, r6
 8007ca6:	6876      	ldr	r6, [r6, #4]
 8007ca8:	e7b9      	b.n	8007c1e <_malloc_r+0x46>
 8007caa:	230c      	movs	r3, #12
 8007cac:	603b      	str	r3, [r7, #0]
 8007cae:	4638      	mov	r0, r7
 8007cb0:	f000 fc18 	bl	80084e4 <__malloc_unlock>
 8007cb4:	e7a1      	b.n	8007bfa <_malloc_r+0x22>
 8007cb6:	6025      	str	r5, [r4, #0]
 8007cb8:	e7de      	b.n	8007c78 <_malloc_r+0xa0>
 8007cba:	bf00      	nop
 8007cbc:	200003e0 	.word	0x200003e0

08007cc0 <__sfputc_r>:
 8007cc0:	6893      	ldr	r3, [r2, #8]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	b410      	push	{r4}
 8007cc8:	6093      	str	r3, [r2, #8]
 8007cca:	da08      	bge.n	8007cde <__sfputc_r+0x1e>
 8007ccc:	6994      	ldr	r4, [r2, #24]
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	db01      	blt.n	8007cd6 <__sfputc_r+0x16>
 8007cd2:	290a      	cmp	r1, #10
 8007cd4:	d103      	bne.n	8007cde <__sfputc_r+0x1e>
 8007cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cda:	f000 b99f 	b.w	800801c <__swbuf_r>
 8007cde:	6813      	ldr	r3, [r2, #0]
 8007ce0:	1c58      	adds	r0, r3, #1
 8007ce2:	6010      	str	r0, [r2, #0]
 8007ce4:	7019      	strb	r1, [r3, #0]
 8007ce6:	4608      	mov	r0, r1
 8007ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <__sfputs_r>:
 8007cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	460f      	mov	r7, r1
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	18d5      	adds	r5, r2, r3
 8007cf8:	42ac      	cmp	r4, r5
 8007cfa:	d101      	bne.n	8007d00 <__sfputs_r+0x12>
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	e007      	b.n	8007d10 <__sfputs_r+0x22>
 8007d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d04:	463a      	mov	r2, r7
 8007d06:	4630      	mov	r0, r6
 8007d08:	f7ff ffda 	bl	8007cc0 <__sfputc_r>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d1f3      	bne.n	8007cf8 <__sfputs_r+0xa>
 8007d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d14 <_vfiprintf_r>:
 8007d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	460d      	mov	r5, r1
 8007d1a:	b09d      	sub	sp, #116	; 0x74
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	4698      	mov	r8, r3
 8007d20:	4606      	mov	r6, r0
 8007d22:	b118      	cbz	r0, 8007d2c <_vfiprintf_r+0x18>
 8007d24:	6983      	ldr	r3, [r0, #24]
 8007d26:	b90b      	cbnz	r3, 8007d2c <_vfiprintf_r+0x18>
 8007d28:	f7ff fa94 	bl	8007254 <__sinit>
 8007d2c:	4b89      	ldr	r3, [pc, #548]	; (8007f54 <_vfiprintf_r+0x240>)
 8007d2e:	429d      	cmp	r5, r3
 8007d30:	d11b      	bne.n	8007d6a <_vfiprintf_r+0x56>
 8007d32:	6875      	ldr	r5, [r6, #4]
 8007d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d36:	07d9      	lsls	r1, r3, #31
 8007d38:	d405      	bmi.n	8007d46 <_vfiprintf_r+0x32>
 8007d3a:	89ab      	ldrh	r3, [r5, #12]
 8007d3c:	059a      	lsls	r2, r3, #22
 8007d3e:	d402      	bmi.n	8007d46 <_vfiprintf_r+0x32>
 8007d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d42:	f7ff fb2a 	bl	800739a <__retarget_lock_acquire_recursive>
 8007d46:	89ab      	ldrh	r3, [r5, #12]
 8007d48:	071b      	lsls	r3, r3, #28
 8007d4a:	d501      	bpl.n	8007d50 <_vfiprintf_r+0x3c>
 8007d4c:	692b      	ldr	r3, [r5, #16]
 8007d4e:	b9eb      	cbnz	r3, 8007d8c <_vfiprintf_r+0x78>
 8007d50:	4629      	mov	r1, r5
 8007d52:	4630      	mov	r0, r6
 8007d54:	f000 f9c6 	bl	80080e4 <__swsetup_r>
 8007d58:	b1c0      	cbz	r0, 8007d8c <_vfiprintf_r+0x78>
 8007d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d5c:	07dc      	lsls	r4, r3, #31
 8007d5e:	d50e      	bpl.n	8007d7e <_vfiprintf_r+0x6a>
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d64:	b01d      	add	sp, #116	; 0x74
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	4b7b      	ldr	r3, [pc, #492]	; (8007f58 <_vfiprintf_r+0x244>)
 8007d6c:	429d      	cmp	r5, r3
 8007d6e:	d101      	bne.n	8007d74 <_vfiprintf_r+0x60>
 8007d70:	68b5      	ldr	r5, [r6, #8]
 8007d72:	e7df      	b.n	8007d34 <_vfiprintf_r+0x20>
 8007d74:	4b79      	ldr	r3, [pc, #484]	; (8007f5c <_vfiprintf_r+0x248>)
 8007d76:	429d      	cmp	r5, r3
 8007d78:	bf08      	it	eq
 8007d7a:	68f5      	ldreq	r5, [r6, #12]
 8007d7c:	e7da      	b.n	8007d34 <_vfiprintf_r+0x20>
 8007d7e:	89ab      	ldrh	r3, [r5, #12]
 8007d80:	0598      	lsls	r0, r3, #22
 8007d82:	d4ed      	bmi.n	8007d60 <_vfiprintf_r+0x4c>
 8007d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d86:	f7ff fb09 	bl	800739c <__retarget_lock_release_recursive>
 8007d8a:	e7e9      	b.n	8007d60 <_vfiprintf_r+0x4c>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d90:	2320      	movs	r3, #32
 8007d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d9a:	2330      	movs	r3, #48	; 0x30
 8007d9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f60 <_vfiprintf_r+0x24c>
 8007da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007da4:	f04f 0901 	mov.w	r9, #1
 8007da8:	4623      	mov	r3, r4
 8007daa:	469a      	mov	sl, r3
 8007dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007db0:	b10a      	cbz	r2, 8007db6 <_vfiprintf_r+0xa2>
 8007db2:	2a25      	cmp	r2, #37	; 0x25
 8007db4:	d1f9      	bne.n	8007daa <_vfiprintf_r+0x96>
 8007db6:	ebba 0b04 	subs.w	fp, sl, r4
 8007dba:	d00b      	beq.n	8007dd4 <_vfiprintf_r+0xc0>
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7ff ff93 	bl	8007cee <__sfputs_r>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	f000 80aa 	beq.w	8007f22 <_vfiprintf_r+0x20e>
 8007dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dd0:	445a      	add	r2, fp
 8007dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8007dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80a2 	beq.w	8007f22 <_vfiprintf_r+0x20e>
 8007dde:	2300      	movs	r3, #0
 8007de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007de8:	f10a 0a01 	add.w	sl, sl, #1
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	9307      	str	r3, [sp, #28]
 8007df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007df4:	931a      	str	r3, [sp, #104]	; 0x68
 8007df6:	4654      	mov	r4, sl
 8007df8:	2205      	movs	r2, #5
 8007dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfe:	4858      	ldr	r0, [pc, #352]	; (8007f60 <_vfiprintf_r+0x24c>)
 8007e00:	f7f8 f9ee 	bl	80001e0 <memchr>
 8007e04:	9a04      	ldr	r2, [sp, #16]
 8007e06:	b9d8      	cbnz	r0, 8007e40 <_vfiprintf_r+0x12c>
 8007e08:	06d1      	lsls	r1, r2, #27
 8007e0a:	bf44      	itt	mi
 8007e0c:	2320      	movmi	r3, #32
 8007e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e12:	0713      	lsls	r3, r2, #28
 8007e14:	bf44      	itt	mi
 8007e16:	232b      	movmi	r3, #43	; 0x2b
 8007e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e20:	2b2a      	cmp	r3, #42	; 0x2a
 8007e22:	d015      	beq.n	8007e50 <_vfiprintf_r+0x13c>
 8007e24:	9a07      	ldr	r2, [sp, #28]
 8007e26:	4654      	mov	r4, sl
 8007e28:	2000      	movs	r0, #0
 8007e2a:	f04f 0c0a 	mov.w	ip, #10
 8007e2e:	4621      	mov	r1, r4
 8007e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e34:	3b30      	subs	r3, #48	; 0x30
 8007e36:	2b09      	cmp	r3, #9
 8007e38:	d94e      	bls.n	8007ed8 <_vfiprintf_r+0x1c4>
 8007e3a:	b1b0      	cbz	r0, 8007e6a <_vfiprintf_r+0x156>
 8007e3c:	9207      	str	r2, [sp, #28]
 8007e3e:	e014      	b.n	8007e6a <_vfiprintf_r+0x156>
 8007e40:	eba0 0308 	sub.w	r3, r0, r8
 8007e44:	fa09 f303 	lsl.w	r3, r9, r3
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	9304      	str	r3, [sp, #16]
 8007e4c:	46a2      	mov	sl, r4
 8007e4e:	e7d2      	b.n	8007df6 <_vfiprintf_r+0xe2>
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	1d19      	adds	r1, r3, #4
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	9103      	str	r1, [sp, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bfbb      	ittet	lt
 8007e5c:	425b      	neglt	r3, r3
 8007e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e62:	9307      	strge	r3, [sp, #28]
 8007e64:	9307      	strlt	r3, [sp, #28]
 8007e66:	bfb8      	it	lt
 8007e68:	9204      	strlt	r2, [sp, #16]
 8007e6a:	7823      	ldrb	r3, [r4, #0]
 8007e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e6e:	d10c      	bne.n	8007e8a <_vfiprintf_r+0x176>
 8007e70:	7863      	ldrb	r3, [r4, #1]
 8007e72:	2b2a      	cmp	r3, #42	; 0x2a
 8007e74:	d135      	bne.n	8007ee2 <_vfiprintf_r+0x1ce>
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	1d1a      	adds	r2, r3, #4
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	9203      	str	r2, [sp, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bfb8      	it	lt
 8007e82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e86:	3402      	adds	r4, #2
 8007e88:	9305      	str	r3, [sp, #20]
 8007e8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f70 <_vfiprintf_r+0x25c>
 8007e8e:	7821      	ldrb	r1, [r4, #0]
 8007e90:	2203      	movs	r2, #3
 8007e92:	4650      	mov	r0, sl
 8007e94:	f7f8 f9a4 	bl	80001e0 <memchr>
 8007e98:	b140      	cbz	r0, 8007eac <_vfiprintf_r+0x198>
 8007e9a:	2340      	movs	r3, #64	; 0x40
 8007e9c:	eba0 000a 	sub.w	r0, r0, sl
 8007ea0:	fa03 f000 	lsl.w	r0, r3, r0
 8007ea4:	9b04      	ldr	r3, [sp, #16]
 8007ea6:	4303      	orrs	r3, r0
 8007ea8:	3401      	adds	r4, #1
 8007eaa:	9304      	str	r3, [sp, #16]
 8007eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb0:	482c      	ldr	r0, [pc, #176]	; (8007f64 <_vfiprintf_r+0x250>)
 8007eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eb6:	2206      	movs	r2, #6
 8007eb8:	f7f8 f992 	bl	80001e0 <memchr>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d03f      	beq.n	8007f40 <_vfiprintf_r+0x22c>
 8007ec0:	4b29      	ldr	r3, [pc, #164]	; (8007f68 <_vfiprintf_r+0x254>)
 8007ec2:	bb1b      	cbnz	r3, 8007f0c <_vfiprintf_r+0x1f8>
 8007ec4:	9b03      	ldr	r3, [sp, #12]
 8007ec6:	3307      	adds	r3, #7
 8007ec8:	f023 0307 	bic.w	r3, r3, #7
 8007ecc:	3308      	adds	r3, #8
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed2:	443b      	add	r3, r7
 8007ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed6:	e767      	b.n	8007da8 <_vfiprintf_r+0x94>
 8007ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007edc:	460c      	mov	r4, r1
 8007ede:	2001      	movs	r0, #1
 8007ee0:	e7a5      	b.n	8007e2e <_vfiprintf_r+0x11a>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	3401      	adds	r4, #1
 8007ee6:	9305      	str	r3, [sp, #20]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	f04f 0c0a 	mov.w	ip, #10
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ef4:	3a30      	subs	r2, #48	; 0x30
 8007ef6:	2a09      	cmp	r2, #9
 8007ef8:	d903      	bls.n	8007f02 <_vfiprintf_r+0x1ee>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0c5      	beq.n	8007e8a <_vfiprintf_r+0x176>
 8007efe:	9105      	str	r1, [sp, #20]
 8007f00:	e7c3      	b.n	8007e8a <_vfiprintf_r+0x176>
 8007f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f06:	4604      	mov	r4, r0
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e7f0      	b.n	8007eee <_vfiprintf_r+0x1da>
 8007f0c:	ab03      	add	r3, sp, #12
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	462a      	mov	r2, r5
 8007f12:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <_vfiprintf_r+0x258>)
 8007f14:	a904      	add	r1, sp, #16
 8007f16:	4630      	mov	r0, r6
 8007f18:	f7fd fee6 	bl	8005ce8 <_printf_float>
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	1c78      	adds	r0, r7, #1
 8007f20:	d1d6      	bne.n	8007ed0 <_vfiprintf_r+0x1bc>
 8007f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f24:	07d9      	lsls	r1, r3, #31
 8007f26:	d405      	bmi.n	8007f34 <_vfiprintf_r+0x220>
 8007f28:	89ab      	ldrh	r3, [r5, #12]
 8007f2a:	059a      	lsls	r2, r3, #22
 8007f2c:	d402      	bmi.n	8007f34 <_vfiprintf_r+0x220>
 8007f2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f30:	f7ff fa34 	bl	800739c <__retarget_lock_release_recursive>
 8007f34:	89ab      	ldrh	r3, [r5, #12]
 8007f36:	065b      	lsls	r3, r3, #25
 8007f38:	f53f af12 	bmi.w	8007d60 <_vfiprintf_r+0x4c>
 8007f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f3e:	e711      	b.n	8007d64 <_vfiprintf_r+0x50>
 8007f40:	ab03      	add	r3, sp, #12
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	462a      	mov	r2, r5
 8007f46:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <_vfiprintf_r+0x258>)
 8007f48:	a904      	add	r1, sp, #16
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f7fe f970 	bl	8006230 <_printf_i>
 8007f50:	e7e4      	b.n	8007f1c <_vfiprintf_r+0x208>
 8007f52:	bf00      	nop
 8007f54:	08008738 	.word	0x08008738
 8007f58:	08008758 	.word	0x08008758
 8007f5c:	08008718 	.word	0x08008718
 8007f60:	080088d4 	.word	0x080088d4
 8007f64:	080088de 	.word	0x080088de
 8007f68:	08005ce9 	.word	0x08005ce9
 8007f6c:	08007cef 	.word	0x08007cef
 8007f70:	080088da 	.word	0x080088da

08007f74 <_sbrk_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4d06      	ldr	r5, [pc, #24]	; (8007f90 <_sbrk_r+0x1c>)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	602b      	str	r3, [r5, #0]
 8007f80:	f7f9 fe60 	bl	8001c44 <_sbrk>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d102      	bne.n	8007f8e <_sbrk_r+0x1a>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	b103      	cbz	r3, 8007f8e <_sbrk_r+0x1a>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	200003e8 	.word	0x200003e8

08007f94 <__sread>:
 8007f94:	b510      	push	{r4, lr}
 8007f96:	460c      	mov	r4, r1
 8007f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f9c:	f000 faa8 	bl	80084f0 <_read_r>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	bfab      	itete	ge
 8007fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8007fa8:	181b      	addge	r3, r3, r0
 8007faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fae:	bfac      	ite	ge
 8007fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fb2:	81a3      	strhlt	r3, [r4, #12]
 8007fb4:	bd10      	pop	{r4, pc}

08007fb6 <__swrite>:
 8007fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fba:	461f      	mov	r7, r3
 8007fbc:	898b      	ldrh	r3, [r1, #12]
 8007fbe:	05db      	lsls	r3, r3, #23
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	4616      	mov	r6, r2
 8007fc6:	d505      	bpl.n	8007fd4 <__swrite+0x1e>
 8007fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fcc:	2302      	movs	r3, #2
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f000 f9f8 	bl	80083c4 <_lseek_r>
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fde:	81a3      	strh	r3, [r4, #12]
 8007fe0:	4632      	mov	r2, r6
 8007fe2:	463b      	mov	r3, r7
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fea:	f000 b869 	b.w	80080c0 <_write_r>

08007fee <__sseek>:
 8007fee:	b510      	push	{r4, lr}
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff6:	f000 f9e5 	bl	80083c4 <_lseek_r>
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	bf15      	itete	ne
 8008000:	6560      	strne	r0, [r4, #84]	; 0x54
 8008002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800800a:	81a3      	strheq	r3, [r4, #12]
 800800c:	bf18      	it	ne
 800800e:	81a3      	strhne	r3, [r4, #12]
 8008010:	bd10      	pop	{r4, pc}

08008012 <__sclose>:
 8008012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008016:	f000 b8f1 	b.w	80081fc <_close_r>
	...

0800801c <__swbuf_r>:
 800801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801e:	460e      	mov	r6, r1
 8008020:	4614      	mov	r4, r2
 8008022:	4605      	mov	r5, r0
 8008024:	b118      	cbz	r0, 800802e <__swbuf_r+0x12>
 8008026:	6983      	ldr	r3, [r0, #24]
 8008028:	b90b      	cbnz	r3, 800802e <__swbuf_r+0x12>
 800802a:	f7ff f913 	bl	8007254 <__sinit>
 800802e:	4b21      	ldr	r3, [pc, #132]	; (80080b4 <__swbuf_r+0x98>)
 8008030:	429c      	cmp	r4, r3
 8008032:	d12b      	bne.n	800808c <__swbuf_r+0x70>
 8008034:	686c      	ldr	r4, [r5, #4]
 8008036:	69a3      	ldr	r3, [r4, #24]
 8008038:	60a3      	str	r3, [r4, #8]
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	071a      	lsls	r2, r3, #28
 800803e:	d52f      	bpl.n	80080a0 <__swbuf_r+0x84>
 8008040:	6923      	ldr	r3, [r4, #16]
 8008042:	b36b      	cbz	r3, 80080a0 <__swbuf_r+0x84>
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	6820      	ldr	r0, [r4, #0]
 8008048:	1ac0      	subs	r0, r0, r3
 800804a:	6963      	ldr	r3, [r4, #20]
 800804c:	b2f6      	uxtb	r6, r6
 800804e:	4283      	cmp	r3, r0
 8008050:	4637      	mov	r7, r6
 8008052:	dc04      	bgt.n	800805e <__swbuf_r+0x42>
 8008054:	4621      	mov	r1, r4
 8008056:	4628      	mov	r0, r5
 8008058:	f000 f966 	bl	8008328 <_fflush_r>
 800805c:	bb30      	cbnz	r0, 80080ac <__swbuf_r+0x90>
 800805e:	68a3      	ldr	r3, [r4, #8]
 8008060:	3b01      	subs	r3, #1
 8008062:	60a3      	str	r3, [r4, #8]
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	6022      	str	r2, [r4, #0]
 800806a:	701e      	strb	r6, [r3, #0]
 800806c:	6963      	ldr	r3, [r4, #20]
 800806e:	3001      	adds	r0, #1
 8008070:	4283      	cmp	r3, r0
 8008072:	d004      	beq.n	800807e <__swbuf_r+0x62>
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	07db      	lsls	r3, r3, #31
 8008078:	d506      	bpl.n	8008088 <__swbuf_r+0x6c>
 800807a:	2e0a      	cmp	r6, #10
 800807c:	d104      	bne.n	8008088 <__swbuf_r+0x6c>
 800807e:	4621      	mov	r1, r4
 8008080:	4628      	mov	r0, r5
 8008082:	f000 f951 	bl	8008328 <_fflush_r>
 8008086:	b988      	cbnz	r0, 80080ac <__swbuf_r+0x90>
 8008088:	4638      	mov	r0, r7
 800808a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800808c:	4b0a      	ldr	r3, [pc, #40]	; (80080b8 <__swbuf_r+0x9c>)
 800808e:	429c      	cmp	r4, r3
 8008090:	d101      	bne.n	8008096 <__swbuf_r+0x7a>
 8008092:	68ac      	ldr	r4, [r5, #8]
 8008094:	e7cf      	b.n	8008036 <__swbuf_r+0x1a>
 8008096:	4b09      	ldr	r3, [pc, #36]	; (80080bc <__swbuf_r+0xa0>)
 8008098:	429c      	cmp	r4, r3
 800809a:	bf08      	it	eq
 800809c:	68ec      	ldreq	r4, [r5, #12]
 800809e:	e7ca      	b.n	8008036 <__swbuf_r+0x1a>
 80080a0:	4621      	mov	r1, r4
 80080a2:	4628      	mov	r0, r5
 80080a4:	f000 f81e 	bl	80080e4 <__swsetup_r>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d0cb      	beq.n	8008044 <__swbuf_r+0x28>
 80080ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80080b0:	e7ea      	b.n	8008088 <__swbuf_r+0x6c>
 80080b2:	bf00      	nop
 80080b4:	08008738 	.word	0x08008738
 80080b8:	08008758 	.word	0x08008758
 80080bc:	08008718 	.word	0x08008718

080080c0 <_write_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d07      	ldr	r5, [pc, #28]	; (80080e0 <_write_r+0x20>)
 80080c4:	4604      	mov	r4, r0
 80080c6:	4608      	mov	r0, r1
 80080c8:	4611      	mov	r1, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	602a      	str	r2, [r5, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f7f8 feec 	bl	8000eac <_write>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d102      	bne.n	80080de <_write_r+0x1e>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	b103      	cbz	r3, 80080de <_write_r+0x1e>
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	200003e8 	.word	0x200003e8

080080e4 <__swsetup_r>:
 80080e4:	4b32      	ldr	r3, [pc, #200]	; (80081b0 <__swsetup_r+0xcc>)
 80080e6:	b570      	push	{r4, r5, r6, lr}
 80080e8:	681d      	ldr	r5, [r3, #0]
 80080ea:	4606      	mov	r6, r0
 80080ec:	460c      	mov	r4, r1
 80080ee:	b125      	cbz	r5, 80080fa <__swsetup_r+0x16>
 80080f0:	69ab      	ldr	r3, [r5, #24]
 80080f2:	b913      	cbnz	r3, 80080fa <__swsetup_r+0x16>
 80080f4:	4628      	mov	r0, r5
 80080f6:	f7ff f8ad 	bl	8007254 <__sinit>
 80080fa:	4b2e      	ldr	r3, [pc, #184]	; (80081b4 <__swsetup_r+0xd0>)
 80080fc:	429c      	cmp	r4, r3
 80080fe:	d10f      	bne.n	8008120 <__swsetup_r+0x3c>
 8008100:	686c      	ldr	r4, [r5, #4]
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008108:	0719      	lsls	r1, r3, #28
 800810a:	d42c      	bmi.n	8008166 <__swsetup_r+0x82>
 800810c:	06dd      	lsls	r5, r3, #27
 800810e:	d411      	bmi.n	8008134 <__swsetup_r+0x50>
 8008110:	2309      	movs	r3, #9
 8008112:	6033      	str	r3, [r6, #0]
 8008114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800811e:	e03e      	b.n	800819e <__swsetup_r+0xba>
 8008120:	4b25      	ldr	r3, [pc, #148]	; (80081b8 <__swsetup_r+0xd4>)
 8008122:	429c      	cmp	r4, r3
 8008124:	d101      	bne.n	800812a <__swsetup_r+0x46>
 8008126:	68ac      	ldr	r4, [r5, #8]
 8008128:	e7eb      	b.n	8008102 <__swsetup_r+0x1e>
 800812a:	4b24      	ldr	r3, [pc, #144]	; (80081bc <__swsetup_r+0xd8>)
 800812c:	429c      	cmp	r4, r3
 800812e:	bf08      	it	eq
 8008130:	68ec      	ldreq	r4, [r5, #12]
 8008132:	e7e6      	b.n	8008102 <__swsetup_r+0x1e>
 8008134:	0758      	lsls	r0, r3, #29
 8008136:	d512      	bpl.n	800815e <__swsetup_r+0x7a>
 8008138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800813a:	b141      	cbz	r1, 800814e <__swsetup_r+0x6a>
 800813c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008140:	4299      	cmp	r1, r3
 8008142:	d002      	beq.n	800814a <__swsetup_r+0x66>
 8008144:	4630      	mov	r0, r6
 8008146:	f7ff fcdb 	bl	8007b00 <_free_r>
 800814a:	2300      	movs	r3, #0
 800814c:	6363      	str	r3, [r4, #52]	; 0x34
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008154:	81a3      	strh	r3, [r4, #12]
 8008156:	2300      	movs	r3, #0
 8008158:	6063      	str	r3, [r4, #4]
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	f043 0308 	orr.w	r3, r3, #8
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	6923      	ldr	r3, [r4, #16]
 8008168:	b94b      	cbnz	r3, 800817e <__swsetup_r+0x9a>
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008174:	d003      	beq.n	800817e <__swsetup_r+0x9a>
 8008176:	4621      	mov	r1, r4
 8008178:	4630      	mov	r0, r6
 800817a:	f000 f95b 	bl	8008434 <__smakebuf_r>
 800817e:	89a0      	ldrh	r0, [r4, #12]
 8008180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008184:	f010 0301 	ands.w	r3, r0, #1
 8008188:	d00a      	beq.n	80081a0 <__swsetup_r+0xbc>
 800818a:	2300      	movs	r3, #0
 800818c:	60a3      	str	r3, [r4, #8]
 800818e:	6963      	ldr	r3, [r4, #20]
 8008190:	425b      	negs	r3, r3
 8008192:	61a3      	str	r3, [r4, #24]
 8008194:	6923      	ldr	r3, [r4, #16]
 8008196:	b943      	cbnz	r3, 80081aa <__swsetup_r+0xc6>
 8008198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800819c:	d1ba      	bne.n	8008114 <__swsetup_r+0x30>
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	0781      	lsls	r1, r0, #30
 80081a2:	bf58      	it	pl
 80081a4:	6963      	ldrpl	r3, [r4, #20]
 80081a6:	60a3      	str	r3, [r4, #8]
 80081a8:	e7f4      	b.n	8008194 <__swsetup_r+0xb0>
 80081aa:	2000      	movs	r0, #0
 80081ac:	e7f7      	b.n	800819e <__swsetup_r+0xba>
 80081ae:	bf00      	nop
 80081b0:	2000000c 	.word	0x2000000c
 80081b4:	08008738 	.word	0x08008738
 80081b8:	08008758 	.word	0x08008758
 80081bc:	08008718 	.word	0x08008718

080081c0 <__assert_func>:
 80081c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081c2:	4614      	mov	r4, r2
 80081c4:	461a      	mov	r2, r3
 80081c6:	4b09      	ldr	r3, [pc, #36]	; (80081ec <__assert_func+0x2c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4605      	mov	r5, r0
 80081cc:	68d8      	ldr	r0, [r3, #12]
 80081ce:	b14c      	cbz	r4, 80081e4 <__assert_func+0x24>
 80081d0:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <__assert_func+0x30>)
 80081d2:	9100      	str	r1, [sp, #0]
 80081d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081d8:	4906      	ldr	r1, [pc, #24]	; (80081f4 <__assert_func+0x34>)
 80081da:	462b      	mov	r3, r5
 80081dc:	f000 f8e0 	bl	80083a0 <fiprintf>
 80081e0:	f000 f9a5 	bl	800852e <abort>
 80081e4:	4b04      	ldr	r3, [pc, #16]	; (80081f8 <__assert_func+0x38>)
 80081e6:	461c      	mov	r4, r3
 80081e8:	e7f3      	b.n	80081d2 <__assert_func+0x12>
 80081ea:	bf00      	nop
 80081ec:	2000000c 	.word	0x2000000c
 80081f0:	080088e5 	.word	0x080088e5
 80081f4:	080088f2 	.word	0x080088f2
 80081f8:	08008920 	.word	0x08008920

080081fc <_close_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d06      	ldr	r5, [pc, #24]	; (8008218 <_close_r+0x1c>)
 8008200:	2300      	movs	r3, #0
 8008202:	4604      	mov	r4, r0
 8008204:	4608      	mov	r0, r1
 8008206:	602b      	str	r3, [r5, #0]
 8008208:	f7f9 fce7 	bl	8001bda <_close>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_close_r+0x1a>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_close_r+0x1a>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	200003e8 	.word	0x200003e8

0800821c <__sflush_r>:
 800821c:	898a      	ldrh	r2, [r1, #12]
 800821e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008222:	4605      	mov	r5, r0
 8008224:	0710      	lsls	r0, r2, #28
 8008226:	460c      	mov	r4, r1
 8008228:	d458      	bmi.n	80082dc <__sflush_r+0xc0>
 800822a:	684b      	ldr	r3, [r1, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	dc05      	bgt.n	800823c <__sflush_r+0x20>
 8008230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	dc02      	bgt.n	800823c <__sflush_r+0x20>
 8008236:	2000      	movs	r0, #0
 8008238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800823c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800823e:	2e00      	cmp	r6, #0
 8008240:	d0f9      	beq.n	8008236 <__sflush_r+0x1a>
 8008242:	2300      	movs	r3, #0
 8008244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008248:	682f      	ldr	r7, [r5, #0]
 800824a:	602b      	str	r3, [r5, #0]
 800824c:	d032      	beq.n	80082b4 <__sflush_r+0x98>
 800824e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	075a      	lsls	r2, r3, #29
 8008254:	d505      	bpl.n	8008262 <__sflush_r+0x46>
 8008256:	6863      	ldr	r3, [r4, #4]
 8008258:	1ac0      	subs	r0, r0, r3
 800825a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800825c:	b10b      	cbz	r3, 8008262 <__sflush_r+0x46>
 800825e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008260:	1ac0      	subs	r0, r0, r3
 8008262:	2300      	movs	r3, #0
 8008264:	4602      	mov	r2, r0
 8008266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008268:	6a21      	ldr	r1, [r4, #32]
 800826a:	4628      	mov	r0, r5
 800826c:	47b0      	blx	r6
 800826e:	1c43      	adds	r3, r0, #1
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	d106      	bne.n	8008282 <__sflush_r+0x66>
 8008274:	6829      	ldr	r1, [r5, #0]
 8008276:	291d      	cmp	r1, #29
 8008278:	d82c      	bhi.n	80082d4 <__sflush_r+0xb8>
 800827a:	4a2a      	ldr	r2, [pc, #168]	; (8008324 <__sflush_r+0x108>)
 800827c:	40ca      	lsrs	r2, r1
 800827e:	07d6      	lsls	r6, r2, #31
 8008280:	d528      	bpl.n	80082d4 <__sflush_r+0xb8>
 8008282:	2200      	movs	r2, #0
 8008284:	6062      	str	r2, [r4, #4]
 8008286:	04d9      	lsls	r1, r3, #19
 8008288:	6922      	ldr	r2, [r4, #16]
 800828a:	6022      	str	r2, [r4, #0]
 800828c:	d504      	bpl.n	8008298 <__sflush_r+0x7c>
 800828e:	1c42      	adds	r2, r0, #1
 8008290:	d101      	bne.n	8008296 <__sflush_r+0x7a>
 8008292:	682b      	ldr	r3, [r5, #0]
 8008294:	b903      	cbnz	r3, 8008298 <__sflush_r+0x7c>
 8008296:	6560      	str	r0, [r4, #84]	; 0x54
 8008298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800829a:	602f      	str	r7, [r5, #0]
 800829c:	2900      	cmp	r1, #0
 800829e:	d0ca      	beq.n	8008236 <__sflush_r+0x1a>
 80082a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082a4:	4299      	cmp	r1, r3
 80082a6:	d002      	beq.n	80082ae <__sflush_r+0x92>
 80082a8:	4628      	mov	r0, r5
 80082aa:	f7ff fc29 	bl	8007b00 <_free_r>
 80082ae:	2000      	movs	r0, #0
 80082b0:	6360      	str	r0, [r4, #52]	; 0x34
 80082b2:	e7c1      	b.n	8008238 <__sflush_r+0x1c>
 80082b4:	6a21      	ldr	r1, [r4, #32]
 80082b6:	2301      	movs	r3, #1
 80082b8:	4628      	mov	r0, r5
 80082ba:	47b0      	blx	r6
 80082bc:	1c41      	adds	r1, r0, #1
 80082be:	d1c7      	bne.n	8008250 <__sflush_r+0x34>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0c4      	beq.n	8008250 <__sflush_r+0x34>
 80082c6:	2b1d      	cmp	r3, #29
 80082c8:	d001      	beq.n	80082ce <__sflush_r+0xb2>
 80082ca:	2b16      	cmp	r3, #22
 80082cc:	d101      	bne.n	80082d2 <__sflush_r+0xb6>
 80082ce:	602f      	str	r7, [r5, #0]
 80082d0:	e7b1      	b.n	8008236 <__sflush_r+0x1a>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	e7ad      	b.n	8008238 <__sflush_r+0x1c>
 80082dc:	690f      	ldr	r7, [r1, #16]
 80082de:	2f00      	cmp	r7, #0
 80082e0:	d0a9      	beq.n	8008236 <__sflush_r+0x1a>
 80082e2:	0793      	lsls	r3, r2, #30
 80082e4:	680e      	ldr	r6, [r1, #0]
 80082e6:	bf08      	it	eq
 80082e8:	694b      	ldreq	r3, [r1, #20]
 80082ea:	600f      	str	r7, [r1, #0]
 80082ec:	bf18      	it	ne
 80082ee:	2300      	movne	r3, #0
 80082f0:	eba6 0807 	sub.w	r8, r6, r7
 80082f4:	608b      	str	r3, [r1, #8]
 80082f6:	f1b8 0f00 	cmp.w	r8, #0
 80082fa:	dd9c      	ble.n	8008236 <__sflush_r+0x1a>
 80082fc:	6a21      	ldr	r1, [r4, #32]
 80082fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008300:	4643      	mov	r3, r8
 8008302:	463a      	mov	r2, r7
 8008304:	4628      	mov	r0, r5
 8008306:	47b0      	blx	r6
 8008308:	2800      	cmp	r0, #0
 800830a:	dc06      	bgt.n	800831a <__sflush_r+0xfe>
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008312:	81a3      	strh	r3, [r4, #12]
 8008314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008318:	e78e      	b.n	8008238 <__sflush_r+0x1c>
 800831a:	4407      	add	r7, r0
 800831c:	eba8 0800 	sub.w	r8, r8, r0
 8008320:	e7e9      	b.n	80082f6 <__sflush_r+0xda>
 8008322:	bf00      	nop
 8008324:	20400001 	.word	0x20400001

08008328 <_fflush_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	690b      	ldr	r3, [r1, #16]
 800832c:	4605      	mov	r5, r0
 800832e:	460c      	mov	r4, r1
 8008330:	b913      	cbnz	r3, 8008338 <_fflush_r+0x10>
 8008332:	2500      	movs	r5, #0
 8008334:	4628      	mov	r0, r5
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	b118      	cbz	r0, 8008342 <_fflush_r+0x1a>
 800833a:	6983      	ldr	r3, [r0, #24]
 800833c:	b90b      	cbnz	r3, 8008342 <_fflush_r+0x1a>
 800833e:	f7fe ff89 	bl	8007254 <__sinit>
 8008342:	4b14      	ldr	r3, [pc, #80]	; (8008394 <_fflush_r+0x6c>)
 8008344:	429c      	cmp	r4, r3
 8008346:	d11b      	bne.n	8008380 <_fflush_r+0x58>
 8008348:	686c      	ldr	r4, [r5, #4]
 800834a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0ef      	beq.n	8008332 <_fflush_r+0xa>
 8008352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008354:	07d0      	lsls	r0, r2, #31
 8008356:	d404      	bmi.n	8008362 <_fflush_r+0x3a>
 8008358:	0599      	lsls	r1, r3, #22
 800835a:	d402      	bmi.n	8008362 <_fflush_r+0x3a>
 800835c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800835e:	f7ff f81c 	bl	800739a <__retarget_lock_acquire_recursive>
 8008362:	4628      	mov	r0, r5
 8008364:	4621      	mov	r1, r4
 8008366:	f7ff ff59 	bl	800821c <__sflush_r>
 800836a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800836c:	07da      	lsls	r2, r3, #31
 800836e:	4605      	mov	r5, r0
 8008370:	d4e0      	bmi.n	8008334 <_fflush_r+0xc>
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	059b      	lsls	r3, r3, #22
 8008376:	d4dd      	bmi.n	8008334 <_fflush_r+0xc>
 8008378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800837a:	f7ff f80f 	bl	800739c <__retarget_lock_release_recursive>
 800837e:	e7d9      	b.n	8008334 <_fflush_r+0xc>
 8008380:	4b05      	ldr	r3, [pc, #20]	; (8008398 <_fflush_r+0x70>)
 8008382:	429c      	cmp	r4, r3
 8008384:	d101      	bne.n	800838a <_fflush_r+0x62>
 8008386:	68ac      	ldr	r4, [r5, #8]
 8008388:	e7df      	b.n	800834a <_fflush_r+0x22>
 800838a:	4b04      	ldr	r3, [pc, #16]	; (800839c <_fflush_r+0x74>)
 800838c:	429c      	cmp	r4, r3
 800838e:	bf08      	it	eq
 8008390:	68ec      	ldreq	r4, [r5, #12]
 8008392:	e7da      	b.n	800834a <_fflush_r+0x22>
 8008394:	08008738 	.word	0x08008738
 8008398:	08008758 	.word	0x08008758
 800839c:	08008718 	.word	0x08008718

080083a0 <fiprintf>:
 80083a0:	b40e      	push	{r1, r2, r3}
 80083a2:	b503      	push	{r0, r1, lr}
 80083a4:	4601      	mov	r1, r0
 80083a6:	ab03      	add	r3, sp, #12
 80083a8:	4805      	ldr	r0, [pc, #20]	; (80083c0 <fiprintf+0x20>)
 80083aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ae:	6800      	ldr	r0, [r0, #0]
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	f7ff fcaf 	bl	8007d14 <_vfiprintf_r>
 80083b6:	b002      	add	sp, #8
 80083b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80083bc:	b003      	add	sp, #12
 80083be:	4770      	bx	lr
 80083c0:	2000000c 	.word	0x2000000c

080083c4 <_lseek_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4d07      	ldr	r5, [pc, #28]	; (80083e4 <_lseek_r+0x20>)
 80083c8:	4604      	mov	r4, r0
 80083ca:	4608      	mov	r0, r1
 80083cc:	4611      	mov	r1, r2
 80083ce:	2200      	movs	r2, #0
 80083d0:	602a      	str	r2, [r5, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f7f9 fc28 	bl	8001c28 <_lseek>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_lseek_r+0x1e>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_lseek_r+0x1e>
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	200003e8 	.word	0x200003e8

080083e8 <__swhatbuf_r>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	460e      	mov	r6, r1
 80083ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f0:	2900      	cmp	r1, #0
 80083f2:	b096      	sub	sp, #88	; 0x58
 80083f4:	4614      	mov	r4, r2
 80083f6:	461d      	mov	r5, r3
 80083f8:	da08      	bge.n	800840c <__swhatbuf_r+0x24>
 80083fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	602a      	str	r2, [r5, #0]
 8008402:	061a      	lsls	r2, r3, #24
 8008404:	d410      	bmi.n	8008428 <__swhatbuf_r+0x40>
 8008406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800840a:	e00e      	b.n	800842a <__swhatbuf_r+0x42>
 800840c:	466a      	mov	r2, sp
 800840e:	f000 f895 	bl	800853c <_fstat_r>
 8008412:	2800      	cmp	r0, #0
 8008414:	dbf1      	blt.n	80083fa <__swhatbuf_r+0x12>
 8008416:	9a01      	ldr	r2, [sp, #4]
 8008418:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800841c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008420:	425a      	negs	r2, r3
 8008422:	415a      	adcs	r2, r3
 8008424:	602a      	str	r2, [r5, #0]
 8008426:	e7ee      	b.n	8008406 <__swhatbuf_r+0x1e>
 8008428:	2340      	movs	r3, #64	; 0x40
 800842a:	2000      	movs	r0, #0
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	b016      	add	sp, #88	; 0x58
 8008430:	bd70      	pop	{r4, r5, r6, pc}
	...

08008434 <__smakebuf_r>:
 8008434:	898b      	ldrh	r3, [r1, #12]
 8008436:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008438:	079d      	lsls	r5, r3, #30
 800843a:	4606      	mov	r6, r0
 800843c:	460c      	mov	r4, r1
 800843e:	d507      	bpl.n	8008450 <__smakebuf_r+0x1c>
 8008440:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	6123      	str	r3, [r4, #16]
 8008448:	2301      	movs	r3, #1
 800844a:	6163      	str	r3, [r4, #20]
 800844c:	b002      	add	sp, #8
 800844e:	bd70      	pop	{r4, r5, r6, pc}
 8008450:	ab01      	add	r3, sp, #4
 8008452:	466a      	mov	r2, sp
 8008454:	f7ff ffc8 	bl	80083e8 <__swhatbuf_r>
 8008458:	9900      	ldr	r1, [sp, #0]
 800845a:	4605      	mov	r5, r0
 800845c:	4630      	mov	r0, r6
 800845e:	f7ff fbbb 	bl	8007bd8 <_malloc_r>
 8008462:	b948      	cbnz	r0, 8008478 <__smakebuf_r+0x44>
 8008464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008468:	059a      	lsls	r2, r3, #22
 800846a:	d4ef      	bmi.n	800844c <__smakebuf_r+0x18>
 800846c:	f023 0303 	bic.w	r3, r3, #3
 8008470:	f043 0302 	orr.w	r3, r3, #2
 8008474:	81a3      	strh	r3, [r4, #12]
 8008476:	e7e3      	b.n	8008440 <__smakebuf_r+0xc>
 8008478:	4b0d      	ldr	r3, [pc, #52]	; (80084b0 <__smakebuf_r+0x7c>)
 800847a:	62b3      	str	r3, [r6, #40]	; 0x28
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	6020      	str	r0, [r4, #0]
 8008480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008484:	81a3      	strh	r3, [r4, #12]
 8008486:	9b00      	ldr	r3, [sp, #0]
 8008488:	6163      	str	r3, [r4, #20]
 800848a:	9b01      	ldr	r3, [sp, #4]
 800848c:	6120      	str	r0, [r4, #16]
 800848e:	b15b      	cbz	r3, 80084a8 <__smakebuf_r+0x74>
 8008490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008494:	4630      	mov	r0, r6
 8008496:	f000 f863 	bl	8008560 <_isatty_r>
 800849a:	b128      	cbz	r0, 80084a8 <__smakebuf_r+0x74>
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f023 0303 	bic.w	r3, r3, #3
 80084a2:	f043 0301 	orr.w	r3, r3, #1
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	89a0      	ldrh	r0, [r4, #12]
 80084aa:	4305      	orrs	r5, r0
 80084ac:	81a5      	strh	r5, [r4, #12]
 80084ae:	e7cd      	b.n	800844c <__smakebuf_r+0x18>
 80084b0:	080071ed 	.word	0x080071ed

080084b4 <__ascii_mbtowc>:
 80084b4:	b082      	sub	sp, #8
 80084b6:	b901      	cbnz	r1, 80084ba <__ascii_mbtowc+0x6>
 80084b8:	a901      	add	r1, sp, #4
 80084ba:	b142      	cbz	r2, 80084ce <__ascii_mbtowc+0x1a>
 80084bc:	b14b      	cbz	r3, 80084d2 <__ascii_mbtowc+0x1e>
 80084be:	7813      	ldrb	r3, [r2, #0]
 80084c0:	600b      	str	r3, [r1, #0]
 80084c2:	7812      	ldrb	r2, [r2, #0]
 80084c4:	1e10      	subs	r0, r2, #0
 80084c6:	bf18      	it	ne
 80084c8:	2001      	movne	r0, #1
 80084ca:	b002      	add	sp, #8
 80084cc:	4770      	bx	lr
 80084ce:	4610      	mov	r0, r2
 80084d0:	e7fb      	b.n	80084ca <__ascii_mbtowc+0x16>
 80084d2:	f06f 0001 	mvn.w	r0, #1
 80084d6:	e7f8      	b.n	80084ca <__ascii_mbtowc+0x16>

080084d8 <__malloc_lock>:
 80084d8:	4801      	ldr	r0, [pc, #4]	; (80084e0 <__malloc_lock+0x8>)
 80084da:	f7fe bf5e 	b.w	800739a <__retarget_lock_acquire_recursive>
 80084de:	bf00      	nop
 80084e0:	200003dc 	.word	0x200003dc

080084e4 <__malloc_unlock>:
 80084e4:	4801      	ldr	r0, [pc, #4]	; (80084ec <__malloc_unlock+0x8>)
 80084e6:	f7fe bf59 	b.w	800739c <__retarget_lock_release_recursive>
 80084ea:	bf00      	nop
 80084ec:	200003dc 	.word	0x200003dc

080084f0 <_read_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4d07      	ldr	r5, [pc, #28]	; (8008510 <_read_r+0x20>)
 80084f4:	4604      	mov	r4, r0
 80084f6:	4608      	mov	r0, r1
 80084f8:	4611      	mov	r1, r2
 80084fa:	2200      	movs	r2, #0
 80084fc:	602a      	str	r2, [r5, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	f7f9 fb4e 	bl	8001ba0 <_read>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d102      	bne.n	800850e <_read_r+0x1e>
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	b103      	cbz	r3, 800850e <_read_r+0x1e>
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	200003e8 	.word	0x200003e8

08008514 <__ascii_wctomb>:
 8008514:	b149      	cbz	r1, 800852a <__ascii_wctomb+0x16>
 8008516:	2aff      	cmp	r2, #255	; 0xff
 8008518:	bf85      	ittet	hi
 800851a:	238a      	movhi	r3, #138	; 0x8a
 800851c:	6003      	strhi	r3, [r0, #0]
 800851e:	700a      	strbls	r2, [r1, #0]
 8008520:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008524:	bf98      	it	ls
 8008526:	2001      	movls	r0, #1
 8008528:	4770      	bx	lr
 800852a:	4608      	mov	r0, r1
 800852c:	4770      	bx	lr

0800852e <abort>:
 800852e:	b508      	push	{r3, lr}
 8008530:	2006      	movs	r0, #6
 8008532:	f000 f84d 	bl	80085d0 <raise>
 8008536:	2001      	movs	r0, #1
 8008538:	f7f9 fb28 	bl	8001b8c <_exit>

0800853c <_fstat_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4d07      	ldr	r5, [pc, #28]	; (800855c <_fstat_r+0x20>)
 8008540:	2300      	movs	r3, #0
 8008542:	4604      	mov	r4, r0
 8008544:	4608      	mov	r0, r1
 8008546:	4611      	mov	r1, r2
 8008548:	602b      	str	r3, [r5, #0]
 800854a:	f7f9 fb52 	bl	8001bf2 <_fstat>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	d102      	bne.n	8008558 <_fstat_r+0x1c>
 8008552:	682b      	ldr	r3, [r5, #0]
 8008554:	b103      	cbz	r3, 8008558 <_fstat_r+0x1c>
 8008556:	6023      	str	r3, [r4, #0]
 8008558:	bd38      	pop	{r3, r4, r5, pc}
 800855a:	bf00      	nop
 800855c:	200003e8 	.word	0x200003e8

08008560 <_isatty_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4d06      	ldr	r5, [pc, #24]	; (800857c <_isatty_r+0x1c>)
 8008564:	2300      	movs	r3, #0
 8008566:	4604      	mov	r4, r0
 8008568:	4608      	mov	r0, r1
 800856a:	602b      	str	r3, [r5, #0]
 800856c:	f7f9 fb51 	bl	8001c12 <_isatty>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d102      	bne.n	800857a <_isatty_r+0x1a>
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	b103      	cbz	r3, 800857a <_isatty_r+0x1a>
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	200003e8 	.word	0x200003e8

08008580 <_raise_r>:
 8008580:	291f      	cmp	r1, #31
 8008582:	b538      	push	{r3, r4, r5, lr}
 8008584:	4604      	mov	r4, r0
 8008586:	460d      	mov	r5, r1
 8008588:	d904      	bls.n	8008594 <_raise_r+0x14>
 800858a:	2316      	movs	r3, #22
 800858c:	6003      	str	r3, [r0, #0]
 800858e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008596:	b112      	cbz	r2, 800859e <_raise_r+0x1e>
 8008598:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800859c:	b94b      	cbnz	r3, 80085b2 <_raise_r+0x32>
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 f830 	bl	8008604 <_getpid_r>
 80085a4:	462a      	mov	r2, r5
 80085a6:	4601      	mov	r1, r0
 80085a8:	4620      	mov	r0, r4
 80085aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ae:	f000 b817 	b.w	80085e0 <_kill_r>
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d00a      	beq.n	80085cc <_raise_r+0x4c>
 80085b6:	1c59      	adds	r1, r3, #1
 80085b8:	d103      	bne.n	80085c2 <_raise_r+0x42>
 80085ba:	2316      	movs	r3, #22
 80085bc:	6003      	str	r3, [r0, #0]
 80085be:	2001      	movs	r0, #1
 80085c0:	e7e7      	b.n	8008592 <_raise_r+0x12>
 80085c2:	2400      	movs	r4, #0
 80085c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085c8:	4628      	mov	r0, r5
 80085ca:	4798      	blx	r3
 80085cc:	2000      	movs	r0, #0
 80085ce:	e7e0      	b.n	8008592 <_raise_r+0x12>

080085d0 <raise>:
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <raise+0xc>)
 80085d2:	4601      	mov	r1, r0
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	f7ff bfd3 	b.w	8008580 <_raise_r>
 80085da:	bf00      	nop
 80085dc:	2000000c 	.word	0x2000000c

080085e0 <_kill_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4d07      	ldr	r5, [pc, #28]	; (8008600 <_kill_r+0x20>)
 80085e4:	2300      	movs	r3, #0
 80085e6:	4604      	mov	r4, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	4611      	mov	r1, r2
 80085ec:	602b      	str	r3, [r5, #0]
 80085ee:	f7f9 fabd 	bl	8001b6c <_kill>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	d102      	bne.n	80085fc <_kill_r+0x1c>
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	b103      	cbz	r3, 80085fc <_kill_r+0x1c>
 80085fa:	6023      	str	r3, [r4, #0]
 80085fc:	bd38      	pop	{r3, r4, r5, pc}
 80085fe:	bf00      	nop
 8008600:	200003e8 	.word	0x200003e8

08008604 <_getpid_r>:
 8008604:	f7f9 baaa 	b.w	8001b5c <_getpid>

08008608 <_init>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	bf00      	nop
 800860c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860e:	bc08      	pop	{r3}
 8008610:	469e      	mov	lr, r3
 8008612:	4770      	bx	lr

08008614 <_fini>:
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008616:	bf00      	nop
 8008618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861a:	bc08      	pop	{r3}
 800861c:	469e      	mov	lr, r3
 800861e:	4770      	bx	lr
