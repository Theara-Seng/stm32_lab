
can_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005c3c  08005c3c  00015c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d20  08005d20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d28  08005d28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d28  08005d28  00015d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000270  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e0  200002e0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016207  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a2b  00000000  00000000  000362a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00038cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001370  00000000  00000000  0003a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233da  00000000  00000000  0003b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a49  00000000  00000000  0005e882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5219  00000000  00000000  000762cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b4e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f94  00000000  00000000  0014b534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c24 	.word	0x08005c24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005c24 	.word	0x08005c24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:
uint32_t rot_old_state;
uint32_t rot_cnt;
int rot_new_state1;
int rot_old_state1;
int rot_cnt1;
uint32_t _write(int file, char* p, int len){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	230a      	movs	r3, #10
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <_write+0x24>)
 800058a:	f004 f816 	bl	80045ba <HAL_UART_Transmit>
	return len;
 800058e:	687b      	ldr	r3, [r7, #4]

}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000260 	.word	0x20000260

0800059c <HAL_CAN_RxFifo0MsgPendingCallback>:

long int TxData[4];
uint8_t RxData[1] ;
uint8_t countq = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan2){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	countq++;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80005ae:	701a      	strb	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	200002c0 	.word	0x200002c0

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 ffd7 	bl	8001578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f873 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 faad 	bl	8000b2c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005d2:	f000 f945 	bl	8000860 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005d6:	f000 f971 	bl	80008bc <MX_I2S3_Init>
  MX_SPI1_Init();
 80005da:	f000 f99f 	bl	800091c <MX_SPI1_Init>
  MX_CAN1_Init();
 80005de:	f000 f8d3 	bl	8000788 <MX_CAN1_Init>
  MX_TIM2_Init();
 80005e2:	f000 f9d1 	bl	8000988 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 fa77 	bl	8000ad8 <MX_USART2_UART_Init>
  MX_CAN2_Init();
 80005ea:	f000 f903 	bl	80007f4 <MX_CAN2_Init>
  MX_TIM3_Init();
 80005ee:	f000 fa1f 	bl	8000a30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan2);
 80005f2:	4829      	ldr	r0, [pc, #164]	; (8000698 <main+0xd8>)
 80005f4:	f001 f92d 	bl	8001852 <HAL_CAN_Start>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80005f8:	213c      	movs	r1, #60	; 0x3c
 80005fa:	4828      	ldr	r0, [pc, #160]	; (800069c <main+0xdc>)
 80005fc:	f003 fc51 	bl	8003ea2 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000600:	213c      	movs	r1, #60	; 0x3c
 8000602:	4827      	ldr	r0, [pc, #156]	; (80006a0 <main+0xe0>)
 8000604:	f003 fc4d 	bl	8003ea2 <HAL_TIM_Encoder_Start_IT>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000608:	2102      	movs	r1, #2
 800060a:	4823      	ldr	r0, [pc, #140]	; (8000698 <main+0xd8>)
 800060c:	f001 fa40 	bl	8001a90 <HAL_CAN_ActivateNotification>
  canTxHeader.StdId = 0x102;
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <main+0xe4>)
 8000612:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000616:	601a      	str	r2, [r3, #0]
  canTxHeader.RTR = CAN_RTR_DATA;
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <main+0xe4>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  canTxHeader.IDE = CAN_ID_STD;
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <main+0xe4>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  canTxHeader.DLC = 4;
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <main+0xe4>)
 8000626:	2204      	movs	r2, #4
 8000628:	611a      	str	r2, [r3, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint32_t last_print = 0, now = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
	  unsigned char a[4];
	    long int count1 = (int)TIM2->CNT/4;
 8000632:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000638:	2b00      	cmp	r3, #0
 800063a:	da00      	bge.n	800063e <main+0x7e>
 800063c:	3303      	adds	r3, #3
 800063e:	109b      	asrs	r3, r3, #2
 8000640:	60fb      	str	r3, [r7, #12]
	    uint16_t count = TIM3->CNT/4;
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <main+0xe8>)
 8000644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000646:	089b      	lsrs	r3, r3, #2
 8000648:	817b      	strh	r3, [r7, #10]
	    a[0] =  (unsigned)count1 >> 8;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	b2db      	uxtb	r3, r3
 8000650:	713b      	strb	r3, [r7, #4]
	    a[1] =  (unsigned) count1;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	717b      	strb	r3, [r7, #5]
	    a[2] = (unsigned) count >>  8;
 8000658:	897b      	ldrh	r3, [r7, #10]
 800065a:	0a1b      	lsrs	r3, r3, #8
 800065c:	b29b      	uxth	r3, r3
 800065e:	b2db      	uxtb	r3, r3
 8000660:	71bb      	strb	r3, [r7, #6]
	    a[3] = (unsigned) count;
 8000662:	897b      	ldrh	r3, [r7, #10]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	71fb      	strb	r3, [r7, #7]
	 	now = HAL_GetTick();
 8000668:	f000 ffec 	bl	8001644 <HAL_GetTick>
 800066c:	6138      	str	r0, [r7, #16]
	 	if (now - last_print >= 1000) {
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000678:	d3d7      	bcc.n	800062a <main+0x6a>
	 		printf("Encoder counter = %ld AND %ld\n", count, count1);
 800067a:	897b      	ldrh	r3, [r7, #10]
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	4619      	mov	r1, r3
 8000680:	480a      	ldr	r0, [pc, #40]	; (80006ac <main+0xec>)
 8000682:	f004 fb41 	bl	8004d08 <iprintf>
	 		HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, a, &txMailBox);
 8000686:	1d3a      	adds	r2, r7, #4
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <main+0xf0>)
 800068a:	4906      	ldr	r1, [pc, #24]	; (80006a4 <main+0xe4>)
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <main+0xd8>)
 800068e:	f001 f924 	bl	80018da <HAL_CAN_AddTxMessage>
	 		last_print = now;
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	617b      	str	r3, [r7, #20]
  {
 8000696:	e7c8      	b.n	800062a <main+0x6a>
 8000698:	200000b4 	.word	0x200000b4
 800069c:	200001d0 	.word	0x200001d0
 80006a0:	20000218 	.word	0x20000218
 80006a4:	200002a4 	.word	0x200002a4
 80006a8:	40000400 	.word	0x40000400
 80006ac:	08005c3c 	.word	0x08005c3c
 80006b0:	200002bc 	.word	0x200002bc

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fb18 	bl	8004cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	; (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000728:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000732:	2307      	movs	r3, #7
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fcaa 	bl	8003094 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000746:	f000 fb0d 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000756:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2105      	movs	r1, #5
 8000768:	4618      	mov	r0, r3
 800076a:	f002 ff0b 	bl	8003584 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000774:	f000 faf6 	bl	8000d64 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3750      	adds	r7, #80	; 0x50
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_CAN1_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <MX_CAN1_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_CAN1_Init+0x64>)
 8000794:	2215      	movs	r2, #21
 8000796:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_CAN1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_CAN1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_CAN1_Init+0x64>)
 80007a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007aa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_CAN1_Init+0x64>)
 80007ae:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_CAN1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_CAN1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_CAN1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_CAN1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_CAN1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_CAN1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_CAN1_Init+0x64>)
 80007da:	f000 ff3f 	bl	800165c <HAL_CAN_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 fabe 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000008c 	.word	0x2000008c
 80007f0:	40006400 	.word	0x40006400

080007f4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_CAN2_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_CAN2_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_CAN2_Init+0x64>)
 8000800:	2215      	movs	r2, #21
 8000802:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_CAN2_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_CAN2_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_CAN2_Init+0x64>)
 8000812:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000816:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_CAN2_Init+0x64>)
 800081a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800081e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_CAN2_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_CAN2_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_CAN2_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_CAN2_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_CAN2_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_CAN2_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_CAN2_Init+0x64>)
 8000846:	f000 ff09 	bl	800165c <HAL_CAN_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 fa88 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000b4 	.word	0x200000b4
 800085c:	40006800 	.word	0x40006800

08000860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <MX_I2C1_Init+0x54>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_I2C1_Init+0x50>)
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_I2C1_Init+0x58>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_I2C1_Init+0x50>)
 800087e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000882:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_I2C1_Init+0x50>)
 800089e:	f001 fe15 	bl	80024cc <HAL_I2C_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 fa5c 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000dc 	.word	0x200000dc
 80008b4:	40005400 	.word	0x40005400
 80008b8:	000186a0 	.word	0x000186a0

080008bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_I2S3_Init+0x54>)
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <MX_I2S3_Init+0x58>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2S3_Init+0x54>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_I2S3_Init+0x54>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_I2S3_Init+0x54>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_I2S3_Init+0x54>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_I2S3_Init+0x54>)
 80008e4:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <MX_I2S3_Init+0x5c>)
 80008e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_I2S3_Init+0x54>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_I2S3_Init+0x54>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_I2S3_Init+0x54>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_I2S3_Init+0x54>)
 80008fc:	f001 ff2a 	bl	8002754 <HAL_I2S_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000906:	f000 fa2d 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000130 	.word	0x20000130
 8000914:	40003c00 	.word	0x40003c00
 8000918:	00017700 	.word	0x00017700

0800091c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_SPI1_Init+0x64>)
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <MX_SPI1_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_SPI1_Init+0x64>)
 8000928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_SPI1_Init+0x64>)
 8000948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_SPI1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_SPI1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_SPI1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_SPI1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_SPI1_Init+0x64>)
 8000968:	220a      	movs	r2, #10
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_SPI1_Init+0x64>)
 800096e:	f003 f969 	bl	8003c44 <HAL_SPI_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000978:	f000 f9f4 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000178 	.word	0x20000178
 8000984:	40013000 	.word	0x40013000

08000988 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	2224      	movs	r2, #36	; 0x24
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f004 f9ae 	bl	8004cf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009cc:	2303      	movs	r3, #3
 80009ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009e4:	2301      	movs	r3, #1
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009f8:	f003 f9ad 	bl	8003d56 <HAL_TIM_Encoder_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a02:	f000 f9af 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_TIM2_Init+0xa4>)
 8000a14:	f003 fcf4 	bl	8004400 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a1e:	f000 f9a1 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	; 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200001d0 	.word	0x200001d0

08000a30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	2224      	movs	r2, #36	; 0x24
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 f95a 	bl	8004cf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a4e:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <MX_TIM3_Init+0xa4>)
 8000a50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a72:	2303      	movs	r3, #3
 8000a74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000a9e:	f003 f95a 	bl	8003d56 <HAL_TIM_Encoder_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000aa8:	f000 f95c 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_TIM3_Init+0xa0>)
 8000aba:	f003 fca1 	bl	8004400 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000ac4:	f000 f94e 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3730      	adds	r7, #48	; 0x30
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000218 	.word	0x20000218
 8000ad4:	40000400 	.word	0x40000400

08000ad8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_USART2_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f003 fd06 	bl	8004520 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f000 f923 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000260 	.word	0x20000260
 8000b28:	40004400 	.word	0x40004400

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	; 0x30
 8000b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	4b81      	ldr	r3, [pc, #516]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a80      	ldr	r2, [pc, #512]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b7e      	ldr	r3, [pc, #504]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	4b7a      	ldr	r3, [pc, #488]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a79      	ldr	r2, [pc, #484]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b77      	ldr	r3, [pc, #476]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b73      	ldr	r3, [pc, #460]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a72      	ldr	r2, [pc, #456]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b70      	ldr	r3, [pc, #448]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b6c      	ldr	r3, [pc, #432]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a6b      	ldr	r2, [pc, #428]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b69      	ldr	r3, [pc, #420]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b65      	ldr	r3, [pc, #404]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a64      	ldr	r2, [pc, #400]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b62      	ldr	r3, [pc, #392]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b5e      	ldr	r3, [pc, #376]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a5d      	ldr	r2, [pc, #372]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <MX_GPIO_Init+0x220>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2108      	movs	r1, #8
 8000bee:	4858      	ldr	r0, [pc, #352]	; (8000d50 <MX_GPIO_Init+0x224>)
 8000bf0:	f001 fc52 	bl	8002498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4856      	ldr	r0, [pc, #344]	; (8000d54 <MX_GPIO_Init+0x228>)
 8000bfa:	f001 fc4d 	bl	8002498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c04:	4854      	ldr	r0, [pc, #336]	; (8000d58 <MX_GPIO_Init+0x22c>)
 8000c06:	f001 fc47 	bl	8002498 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	484b      	ldr	r0, [pc, #300]	; (8000d50 <MX_GPIO_Init+0x224>)
 8000c22:	f001 fa9d 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4845      	ldr	r0, [pc, #276]	; (8000d54 <MX_GPIO_Init+0x228>)
 8000c3e:	f001 fa8f 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c42:	2308      	movs	r3, #8
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c52:	2305      	movs	r3, #5
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	483d      	ldr	r0, [pc, #244]	; (8000d54 <MX_GPIO_Init+0x228>)
 8000c5e:	f001 fa7f 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c66:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4839      	ldr	r0, [pc, #228]	; (8000d5c <MX_GPIO_Init+0x230>)
 8000c78:	f001 fa72 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4834      	ldr	r0, [pc, #208]	; (8000d60 <MX_GPIO_Init+0x234>)
 8000c90:	f001 fa66 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	482b      	ldr	r0, [pc, #172]	; (8000d60 <MX_GPIO_Init+0x234>)
 8000cb2:	f001 fa55 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cb6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4822      	ldr	r0, [pc, #136]	; (8000d58 <MX_GPIO_Init+0x22c>)
 8000cd0:	f001 fa46 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	481c      	ldr	r0, [pc, #112]	; (8000d5c <MX_GPIO_Init+0x230>)
 8000cea:	f001 fa39 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000cee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d00:	230a      	movs	r3, #10
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4814      	ldr	r0, [pc, #80]	; (8000d5c <MX_GPIO_Init+0x230>)
 8000d0c:	f001 fa28 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d10:	2320      	movs	r3, #32
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_GPIO_Init+0x22c>)
 8000d24:	f001 fa1c 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d2c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_GPIO_Init+0x224>)
 8000d3e:	f001 fa0f 	bl	8002160 <HAL_GPIO_Init>

}
 8000d42:	bf00      	nop
 8000d44:	3730      	adds	r7, #48	; 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40020400 	.word	0x40020400

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dae:	2007      	movs	r0, #7
 8000db0:	f001 f994 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a52      	ldr	r2, [pc, #328]	; (8000f28 <HAL_CAN_MspInit+0x168>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d145      	bne.n	8000e6e <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000de2:	4b52      	ldr	r3, [pc, #328]	; (8000f2c <HAL_CAN_MspInit+0x16c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a50      	ldr	r2, [pc, #320]	; (8000f2c <HAL_CAN_MspInit+0x16c>)
 8000dea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000dec:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <HAL_CAN_MspInit+0x16c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d10d      	bne.n	8000e10 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a4c      	ldr	r2, [pc, #304]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000dfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
 8000e04:	4b4a      	ldr	r3, [pc, #296]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4a45      	ldr	r2, [pc, #276]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e20:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e3c:	2309      	movs	r3, #9
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	483b      	ldr	r0, [pc, #236]	; (8000f34 <HAL_CAN_MspInit+0x174>)
 8000e48:	f001 f98a 	bl	8002160 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2014      	movs	r0, #20
 8000e52:	f001 f94e 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e56:	2014      	movs	r0, #20
 8000e58:	f001 f967 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2015      	movs	r0, #21
 8000e62:	f001 f946 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e66:	2015      	movs	r0, #21
 8000e68:	f001 f95f 	bl	800212a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000e6c:	e058      	b.n	8000f20 <HAL_CAN_MspInit+0x160>
  else if(hcan->Instance==CAN2)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a31      	ldr	r2, [pc, #196]	; (8000f38 <HAL_CAN_MspInit+0x178>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d153      	bne.n	8000f20 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a2b      	ldr	r2, [pc, #172]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000e82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e94:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <HAL_CAN_MspInit+0x16c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <HAL_CAN_MspInit+0x16c>)
 8000e9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_CAN_MspInit+0x16c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d10d      	bne.n	8000ec2 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000eb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_CAN_MspInit+0x170>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ede:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000ef0:	2309      	movs	r3, #9
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4810      	ldr	r0, [pc, #64]	; (8000f3c <HAL_CAN_MspInit+0x17c>)
 8000efc:	f001 f930 	bl	8002160 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	2040      	movs	r0, #64	; 0x40
 8000f06:	f001 f8f4 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000f0a:	2040      	movs	r0, #64	; 0x40
 8000f0c:	f001 f90d 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	2041      	movs	r0, #65	; 0x41
 8000f16:	f001 f8ec 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000f1a:	2041      	movs	r0, #65	; 0x41
 8000f1c:	f001 f905 	bl	800212a <HAL_NVIC_EnableIRQ>
}
 8000f20:	bf00      	nop
 8000f22:	3730      	adds	r7, #48	; 0x30
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40006400 	.word	0x40006400
 8000f2c:	200002c4 	.word	0x200002c4
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40006800 	.word	0x40006800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <HAL_I2C_MspInit+0x84>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d12c      	bne.n	8000fbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f84:	2312      	movs	r3, #18
 8000f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f90:	2304      	movs	r3, #4
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480c      	ldr	r0, [pc, #48]	; (8000fcc <HAL_I2C_MspInit+0x8c>)
 8000f9c:	f001 f8e0 	bl	8002160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020400 	.word	0x40020400

08000fd0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	; 0x38
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <HAL_I2S_MspInit+0xf0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d15a      	bne.n	80010b6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001000:	2301      	movs	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001004:	23c0      	movs	r3, #192	; 0xc0
 8001006:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fcd7 	bl	80039c4 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800101c:	f7ff fea2 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <HAL_I2S_MspInit+0xf4>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <HAL_I2S_MspInit+0xf4>)
 800102a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_I2S_MspInit+0xf4>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <HAL_I2S_MspInit+0xf4>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <HAL_I2S_MspInit+0xf4>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6313      	str	r3, [r2, #48]	; 0x30
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <HAL_I2S_MspInit+0xf4>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_I2S_MspInit+0xf4>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_I2S_MspInit+0xf4>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6313      	str	r3, [r2, #48]	; 0x30
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_I2S_MspInit+0xf4>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001074:	2310      	movs	r3, #16
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001084:	2306      	movs	r3, #6
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	4619      	mov	r1, r3
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <HAL_I2S_MspInit+0xf8>)
 8001090:	f001 f866 	bl	8002160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001094:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010a6:	2306      	movs	r3, #6
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	4806      	ldr	r0, [pc, #24]	; (80010cc <HAL_I2S_MspInit+0xfc>)
 80010b2:	f001 f855 	bl	8002160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3738      	adds	r7, #56	; 0x38
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40003c00 	.word	0x40003c00
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020800 	.word	0x40020800

080010d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a19      	ldr	r2, [pc, #100]	; (8001154 <HAL_SPI_MspInit+0x84>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d12b      	bne.n	800114a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_SPI_MspInit+0x88>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_SPI_MspInit+0x88>)
 80010fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_SPI_MspInit+0x88>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_SPI_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_SPI_MspInit+0x88>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_SPI_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800112a:	23e0      	movs	r3, #224	; 0xe0
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800113a:	2305      	movs	r3, #5
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_SPI_MspInit+0x8c>)
 8001146:	f001 f80b 	bl	8002160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40013000 	.word	0x40013000
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001180:	d12d      	bne.n	80011de <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a42      	ldr	r2, [pc, #264]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b40      	ldr	r3, [pc, #256]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a3b      	ldr	r2, [pc, #236]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b39      	ldr	r3, [pc, #228]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80011ba:	f248 0302 	movw	r3, #32770	; 0x8002
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011cc:	2301      	movs	r3, #1
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	4830      	ldr	r0, [pc, #192]	; (8001298 <HAL_TIM_Encoder_MspInit+0x138>)
 80011d8:	f000 ffc2 	bl	8002160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011dc:	e056      	b.n	800128c <HAL_TIM_Encoder_MspInit+0x12c>
  else if(htim_encoder->Instance==TIM3)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a2e      	ldr	r2, [pc, #184]	; (800129c <HAL_TIM_Encoder_MspInit+0x13c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d151      	bne.n	800128c <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a28      	ldr	r2, [pc, #160]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4a21      	ldr	r2, [pc, #132]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6313      	str	r3, [r2, #48]	; 0x30
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	6313      	str	r3, [r2, #48]	; 0x30
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_TIM_Encoder_MspInit+0x134>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800123c:	2340      	movs	r3, #64	; 0x40
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800124c:	2302      	movs	r3, #2
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4812      	ldr	r0, [pc, #72]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x140>)
 8001258:	f000 ff82 	bl	8002160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800125c:	2320      	movs	r3, #32
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800126c:	2302      	movs	r3, #2
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <HAL_TIM_Encoder_MspInit+0x144>)
 8001278:	f000 ff72 	bl	8002160 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	201d      	movs	r0, #29
 8001282:	f000 ff36 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001286:	201d      	movs	r0, #29
 8001288:	f000 ff4f 	bl	800212a <HAL_NVIC_EnableIRQ>
}
 800128c:	bf00      	nop
 800128e:	3730      	adds	r7, #48	; 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000
 800129c:	40000400 	.word	0x40000400
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020400 	.word	0x40020400

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_UART_MspInit+0x84>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12b      	bne.n	8001322 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001302:	230c      	movs	r3, #12
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001312:	2307      	movs	r3, #7
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_UART_MspInit+0x8c>)
 800131e:	f000 ff1f 	bl	8002160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40004400 	.word	0x40004400
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 f94a 	bl	800161c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <CAN1_RX0_IRQHandler+0x10>)
 8001392:	f000 fba3 	bl	8001adc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000008c 	.word	0x2000008c

080013a0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <CAN1_RX1_IRQHandler+0x10>)
 80013a6:	f000 fb99 	bl	8001adc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000008c 	.word	0x2000008c

080013b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM3_IRQHandler+0x10>)
 80013ba:	f002 fe20 	bl	8003ffe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000218 	.word	0x20000218

080013c8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <CAN2_RX0_IRQHandler+0x10>)
 80013ce:	f000 fb85 	bl	8001adc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000b4 	.word	0x200000b4

080013dc <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <CAN2_RX1_IRQHandler+0x10>)
 80013e2:	f000 fb7b 	bl	8001adc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000b4 	.word	0x200000b4

080013f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e00a      	b.n	8001418 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001402:	f3af 8000 	nop.w
 8001406:	4601      	mov	r1, r0
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	60ba      	str	r2, [r7, #8]
 800140e:	b2ca      	uxtb	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbf0      	blt.n	8001402 <_read+0x12>
  }

  return len;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_close>:
  }
  return len;
}

int _close(int file)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001452:	605a      	str	r2, [r3, #4]
  return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_isatty>:

int _isatty(int file)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <_sbrk+0x5c>)
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <_sbrk+0x60>)
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <_sbrk+0x64>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <_sbrk+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d207      	bcs.n	80014d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c4:	f003 fbee 	bl	8004ca4 <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	220c      	movs	r2, #12
 80014cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d2:	e009      	b.n	80014e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <_sbrk+0x64>)
 80014e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20020000 	.word	0x20020000
 80014f4:	00000400 	.word	0x00000400
 80014f8:	200002c8 	.word	0x200002c8
 80014fc:	200002e0 	.word	0x200002e0

08001500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <SystemInit+0x20>)
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <SystemInit+0x20>)
 800150c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800155c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800152a:	490e      	ldr	r1, [pc, #56]	; (8001564 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800152c:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001540:	4c0b      	ldr	r4, [pc, #44]	; (8001570 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800154e:	f7ff ffd7 	bl	8001500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001552:	f003 fbad 	bl	8004cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001556:	f7ff f833 	bl	80005c0 <main>
  bx  lr    
 800155a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800155c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001568:	08005d30 	.word	0x08005d30
  ldr r2, =_sbss
 800156c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001570:	200002e0 	.word	0x200002e0

08001574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC_IRQHandler>
	...

08001578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <HAL_Init+0x40>)
 8001582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001586:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_Init+0x40>)
 800158e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001592:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_Init+0x40>)
 800159a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f000 fd9b 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 f808 	bl	80015bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ac:	f7ff fbe0 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023c00 	.word	0x40023c00

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x54>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_InitTick+0x58>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fdb3 	bl	8002146 <HAL_SYSTICK_Config>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00e      	b.n	8001608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d80a      	bhi.n	8001606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f8:	f000 fd7b 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <HAL_InitTick+0x5c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000000 	.word	0x20000000
 8001614:	20000008 	.word	0x20000008
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x20>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x24>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_IncTick+0x24>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000008 	.word	0x20000008
 8001640:	200002cc 	.word	0x200002cc

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	200002cc 	.word	0x200002cc

0800165c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0ed      	b.n	800184a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fba0 	bl	8000dc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff ffd8 	bl	8001644 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001696:	e012      	b.n	80016be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001698:	f7ff ffd4 	bl	8001644 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d90b      	bls.n	80016be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2205      	movs	r2, #5
 80016b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0c5      	b.n	800184a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0e5      	beq.n	8001698 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0202 	bic.w	r2, r2, #2
 80016da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016dc:	f7ff ffb2 	bl	8001644 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016e2:	e012      	b.n	800170a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016e4:	f7ff ffae 	bl	8001644 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d90b      	bls.n	800170a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2205      	movs	r2, #5
 8001702:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e09f      	b.n	800184a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1e5      	bne.n	80016e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7e1b      	ldrb	r3, [r3, #24]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d108      	bne.n	8001732 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	e007      	b.n	8001742 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7e5b      	ldrb	r3, [r3, #25]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d108      	bne.n	800175c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e007      	b.n	800176c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800176a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7e9b      	ldrb	r3, [r3, #26]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d108      	bne.n	8001786 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0220 	orr.w	r2, r2, #32
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e007      	b.n	8001796 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0220 	bic.w	r2, r2, #32
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7edb      	ldrb	r3, [r3, #27]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d108      	bne.n	80017b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0210 	bic.w	r2, r2, #16
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e007      	b.n	80017c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0210 	orr.w	r2, r2, #16
 80017be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7f1b      	ldrb	r3, [r3, #28]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d108      	bne.n	80017da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0208 	orr.w	r2, r2, #8
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e007      	b.n	80017ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0208 	bic.w	r2, r2, #8
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7f5b      	ldrb	r3, [r3, #29]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d108      	bne.n	8001804 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0204 	orr.w	r2, r2, #4
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e007      	b.n	8001814 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0204 	bic.w	r2, r2, #4
 8001812:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	ea42 0103 	orr.w	r1, r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	1e5a      	subs	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d12e      	bne.n	80018c4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2202      	movs	r2, #2
 800186a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800187e:	f7ff fee1 	bl	8001644 <HAL_GetTick>
 8001882:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001884:	e012      	b.n	80018ac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001886:	f7ff fedd 	bl	8001644 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b0a      	cmp	r3, #10
 8001892:	d90b      	bls.n	80018ac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2205      	movs	r2, #5
 80018a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e012      	b.n	80018d2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1e5      	bne.n	8001886 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e006      	b.n	80018d2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
  }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80018da:	b480      	push	{r7}
 80018dc:	b089      	sub	sp, #36	; 0x24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018f8:	7ffb      	ldrb	r3, [r7, #31]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d003      	beq.n	8001906 <HAL_CAN_AddTxMessage+0x2c>
 80018fe:	7ffb      	ldrb	r3, [r7, #31]
 8001900:	2b02      	cmp	r3, #2
 8001902:	f040 80b8 	bne.w	8001a76 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10a      	bne.n	8001926 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a0 	beq.w	8001a66 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	0e1b      	lsrs	r3, r3, #24
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d907      	bls.n	8001946 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e09e      	b.n	8001a84 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001946:	2201      	movs	r2, #1
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10d      	bne.n	8001974 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001962:	68f9      	ldr	r1, [r7, #12]
 8001964:	6809      	ldr	r1, [r1, #0]
 8001966:	431a      	orrs	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3318      	adds	r3, #24
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	440b      	add	r3, r1
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e00f      	b.n	8001994 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800197e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001984:	68f9      	ldr	r1, [r7, #12]
 8001986:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001988:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3318      	adds	r3, #24
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	440b      	add	r3, r1
 8001992:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3318      	adds	r3, #24
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	440b      	add	r3, r1
 80019a4:	3304      	adds	r3, #4
 80019a6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	7d1b      	ldrb	r3, [r3, #20]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d111      	bne.n	80019d4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3318      	adds	r3, #24
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	4413      	add	r3, r2
 80019bc:	3304      	adds	r3, #4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	6811      	ldr	r1, [r2, #0]
 80019c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3318      	adds	r3, #24
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	440b      	add	r3, r1
 80019d0:	3304      	adds	r3, #4
 80019d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3307      	adds	r3, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	061a      	lsls	r2, r3, #24
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3306      	adds	r3, #6
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	041b      	lsls	r3, r3, #16
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3305      	adds	r3, #5
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	4313      	orrs	r3, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	3204      	adds	r2, #4
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	4610      	mov	r0, r2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	6811      	ldr	r1, [r2, #0]
 80019fc:	ea43 0200 	orr.w	r2, r3, r0
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	440b      	add	r3, r1
 8001a06:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3303      	adds	r3, #3
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	061a      	lsls	r2, r3, #24
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3302      	adds	r3, #2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	041b      	lsls	r3, r3, #16
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3301      	adds	r3, #1
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	4313      	orrs	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	6811      	ldr	r1, [r2, #0]
 8001a32:	ea43 0200 	orr.w	r2, r3, r0
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3318      	adds	r3, #24
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	4413      	add	r3, r2
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	6811      	ldr	r1, [r2, #0]
 8001a54:	f043 0201 	orr.w	r2, r3, #1
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	440b      	add	r3, r1
 8001a60:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e00e      	b.n	8001a84 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e006      	b.n	8001a84 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
  }
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3724      	adds	r7, #36	; 0x24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d002      	beq.n	8001aae <HAL_CAN_ActivateNotification+0x1e>
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d109      	bne.n	8001ac2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6959      	ldr	r1, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e006      	b.n	8001ad0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
  }
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d07c      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d023      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2201      	movs	r2, #1
 8001b32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f983 	bl	8001e4a <HAL_CAN_TxMailbox0CompleteCallback>
 8001b44:	e016      	b.n	8001b74 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d004      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
 8001b58:	e00c      	b.n	8001b74 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6c:	e002      	b.n	8001b74 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f989 	bl	8001e86 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d024      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f963 	bl	8001e5e <HAL_CAN_TxMailbox1CompleteCallback>
 8001b98:	e016      	b.n	8001bc8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d004      	beq.n	8001bae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bac:	e00c      	b.n	8001bc8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	e002      	b.n	8001bc8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f969 	bl	8001e9a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d024      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f943 	bl	8001e72 <HAL_CAN_TxMailbox2CompleteCallback>
 8001bec:	e016      	b.n	8001c1c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001c00:	e00c      	b.n	8001c1c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
 8001c14:	e002      	b.n	8001c1c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f949 	bl	8001eae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00c      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2208      	movs	r2, #8
 8001c5a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f930 	bl	8001ec2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe fc8e 	bl	800059c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00c      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00b      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f912 	bl	8001eea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d009      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8f9 	bl	8001ed6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d006      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8fc 	bl	8001efe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00b      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2208      	movs	r2, #8
 8001d20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8f5 	bl	8001f12 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d07b      	beq.n	8001e2a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d072      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d043      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d03e      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001daa:	2b60      	cmp	r3, #96	; 0x60
 8001dac:	d02b      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x32a>
 8001dae:	2b60      	cmp	r3, #96	; 0x60
 8001db0:	d82e      	bhi.n	8001e10 <HAL_CAN_IRQHandler+0x334>
 8001db2:	2b50      	cmp	r3, #80	; 0x50
 8001db4:	d022      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x320>
 8001db6:	2b50      	cmp	r3, #80	; 0x50
 8001db8:	d82a      	bhi.n	8001e10 <HAL_CAN_IRQHandler+0x334>
 8001dba:	2b40      	cmp	r3, #64	; 0x40
 8001dbc:	d019      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x316>
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d826      	bhi.n	8001e10 <HAL_CAN_IRQHandler+0x334>
 8001dc2:	2b30      	cmp	r3, #48	; 0x30
 8001dc4:	d010      	beq.n	8001de8 <HAL_CAN_IRQHandler+0x30c>
 8001dc6:	2b30      	cmp	r3, #48	; 0x30
 8001dc8:	d822      	bhi.n	8001e10 <HAL_CAN_IRQHandler+0x334>
 8001dca:	2b10      	cmp	r3, #16
 8001dcc:	d002      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x2f8>
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	d005      	beq.n	8001dde <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001dd2:	e01d      	b.n	8001e10 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	f043 0308 	orr.w	r3, r3, #8
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ddc:	e019      	b.n	8001e12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001de6:	e014      	b.n	8001e12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	f043 0320 	orr.w	r3, r3, #32
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001df0:	e00f      	b.n	8001e12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dfa:	e00a      	b.n	8001e12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e04:	e005      	b.n	8001e12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e0e:	e000      	b.n	8001e12 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e10:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e20:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2204      	movs	r2, #4
 8001e28:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f872 	bl	8001f26 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff3e 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff8e 	bl	8002030 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5d 	bl	8001fdc <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff31 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa2 	bl	8002098 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e16b      	b.n	8002454 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	f040 815a 	bne.w	800244e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d005      	beq.n	80021b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d130      	bne.n	8002214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e8:	2201      	movs	r2, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 0201 	and.w	r2, r3, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b03      	cmp	r3, #3
 800221e:	d017      	beq.n	8002250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d123      	bne.n	80022a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	08da      	lsrs	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3208      	adds	r2, #8
 8002264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	69b9      	ldr	r1, [r7, #24]
 80022a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80b4 	beq.w	800244e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b60      	ldr	r3, [pc, #384]	; (800246c <HAL_GPIO_Init+0x30c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a5f      	ldr	r2, [pc, #380]	; (800246c <HAL_GPIO_Init+0x30c>)
 80022f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b5d      	ldr	r3, [pc, #372]	; (800246c <HAL_GPIO_Init+0x30c>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002302:	4a5b      	ldr	r2, [pc, #364]	; (8002470 <HAL_GPIO_Init+0x310>)
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	3302      	adds	r3, #2
 800230a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a52      	ldr	r2, [pc, #328]	; (8002474 <HAL_GPIO_Init+0x314>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d02b      	beq.n	8002386 <HAL_GPIO_Init+0x226>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a51      	ldr	r2, [pc, #324]	; (8002478 <HAL_GPIO_Init+0x318>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d025      	beq.n	8002382 <HAL_GPIO_Init+0x222>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a50      	ldr	r2, [pc, #320]	; (800247c <HAL_GPIO_Init+0x31c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01f      	beq.n	800237e <HAL_GPIO_Init+0x21e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4f      	ldr	r2, [pc, #316]	; (8002480 <HAL_GPIO_Init+0x320>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d019      	beq.n	800237a <HAL_GPIO_Init+0x21a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4e      	ldr	r2, [pc, #312]	; (8002484 <HAL_GPIO_Init+0x324>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <HAL_GPIO_Init+0x216>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4d      	ldr	r2, [pc, #308]	; (8002488 <HAL_GPIO_Init+0x328>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00d      	beq.n	8002372 <HAL_GPIO_Init+0x212>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4c      	ldr	r2, [pc, #304]	; (800248c <HAL_GPIO_Init+0x32c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <HAL_GPIO_Init+0x20e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4b      	ldr	r2, [pc, #300]	; (8002490 <HAL_GPIO_Init+0x330>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_GPIO_Init+0x20a>
 8002366:	2307      	movs	r3, #7
 8002368:	e00e      	b.n	8002388 <HAL_GPIO_Init+0x228>
 800236a:	2308      	movs	r3, #8
 800236c:	e00c      	b.n	8002388 <HAL_GPIO_Init+0x228>
 800236e:	2306      	movs	r3, #6
 8002370:	e00a      	b.n	8002388 <HAL_GPIO_Init+0x228>
 8002372:	2305      	movs	r3, #5
 8002374:	e008      	b.n	8002388 <HAL_GPIO_Init+0x228>
 8002376:	2304      	movs	r3, #4
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x228>
 800237a:	2303      	movs	r3, #3
 800237c:	e004      	b.n	8002388 <HAL_GPIO_Init+0x228>
 800237e:	2302      	movs	r3, #2
 8002380:	e002      	b.n	8002388 <HAL_GPIO_Init+0x228>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_GPIO_Init+0x228>
 8002386:	2300      	movs	r3, #0
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	f002 0203 	and.w	r2, r2, #3
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	4093      	lsls	r3, r2
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002398:	4935      	ldr	r1, [pc, #212]	; (8002470 <HAL_GPIO_Init+0x310>)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a6:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <HAL_GPIO_Init+0x334>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ca:	4a32      	ldr	r2, [pc, #200]	; (8002494 <HAL_GPIO_Init+0x334>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d0:	4b30      	ldr	r3, [pc, #192]	; (8002494 <HAL_GPIO_Init+0x334>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f4:	4a27      	ldr	r2, [pc, #156]	; (8002494 <HAL_GPIO_Init+0x334>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <HAL_GPIO_Init+0x334>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800241e:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <HAL_GPIO_Init+0x334>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_GPIO_Init+0x334>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <HAL_GPIO_Init+0x334>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3301      	adds	r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b0f      	cmp	r3, #15
 8002458:	f67f ae90 	bls.w	800217c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	40013800 	.word	0x40013800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020400 	.word	0x40020400
 800247c:	40020800 	.word	0x40020800
 8002480:	40020c00 	.word	0x40020c00
 8002484:	40021000 	.word	0x40021000
 8002488:	40021400 	.word	0x40021400
 800248c:	40021800 	.word	0x40021800
 8002490:	40021c00 	.word	0x40021c00
 8002494:	40013c00 	.word	0x40013c00

08002498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
 80024a4:	4613      	mov	r3, r2
 80024a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a8:	787b      	ldrb	r3, [r7, #1]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b4:	e003      	b.n	80024be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b6:	887b      	ldrh	r3, [r7, #2]
 80024b8:	041a      	lsls	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	619a      	str	r2, [r3, #24]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e12b      	b.n	8002736 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fd24 	bl	8000f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2224      	movs	r2, #36	; 0x24
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800251e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800252e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002530:	f001 fa20 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8002534:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4a81      	ldr	r2, [pc, #516]	; (8002740 <HAL_I2C_Init+0x274>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d807      	bhi.n	8002550 <HAL_I2C_Init+0x84>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4a80      	ldr	r2, [pc, #512]	; (8002744 <HAL_I2C_Init+0x278>)
 8002544:	4293      	cmp	r3, r2
 8002546:	bf94      	ite	ls
 8002548:	2301      	movls	r3, #1
 800254a:	2300      	movhi	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e006      	b.n	800255e <HAL_I2C_Init+0x92>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a7d      	ldr	r2, [pc, #500]	; (8002748 <HAL_I2C_Init+0x27c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	bf94      	ite	ls
 8002558:	2301      	movls	r3, #1
 800255a:	2300      	movhi	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0e7      	b.n	8002736 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a78      	ldr	r2, [pc, #480]	; (800274c <HAL_I2C_Init+0x280>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	0c9b      	lsrs	r3, r3, #18
 8002570:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a6a      	ldr	r2, [pc, #424]	; (8002740 <HAL_I2C_Init+0x274>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d802      	bhi.n	80025a0 <HAL_I2C_Init+0xd4>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3301      	adds	r3, #1
 800259e:	e009      	b.n	80025b4 <HAL_I2C_Init+0xe8>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	4a69      	ldr	r2, [pc, #420]	; (8002750 <HAL_I2C_Init+0x284>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	099b      	lsrs	r3, r3, #6
 80025b2:	3301      	adds	r3, #1
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	495c      	ldr	r1, [pc, #368]	; (8002740 <HAL_I2C_Init+0x274>)
 80025d0:	428b      	cmp	r3, r1
 80025d2:	d819      	bhi.n	8002608 <HAL_I2C_Init+0x13c>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1e59      	subs	r1, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e2:	1c59      	adds	r1, r3, #1
 80025e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025e8:	400b      	ands	r3, r1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_I2C_Init+0x138>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1e59      	subs	r1, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	e051      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002604:	2304      	movs	r3, #4
 8002606:	e04f      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d111      	bne.n	8002634 <HAL_I2C_Init+0x168>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e58      	subs	r0, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	440b      	add	r3, r1
 800261e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e012      	b.n	800265a <HAL_I2C_Init+0x18e>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1e58      	subs	r0, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	0099      	lsls	r1, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	fbb0 f3f3 	udiv	r3, r0, r3
 800264a:	3301      	adds	r3, #1
 800264c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Init+0x196>
 800265e:	2301      	movs	r3, #1
 8002660:	e022      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10e      	bne.n	8002688 <HAL_I2C_Init+0x1bc>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1e58      	subs	r0, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	440b      	add	r3, r1
 8002678:	fbb0 f3f3 	udiv	r3, r0, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002686:	e00f      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	0099      	lsls	r1, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	6809      	ldr	r1, [r1, #0]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69da      	ldr	r2, [r3, #28]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6911      	ldr	r1, [r2, #16]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68d2      	ldr	r2, [r2, #12]
 80026e2:	4311      	orrs	r1, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	000186a0 	.word	0x000186a0
 8002744:	001e847f 	.word	0x001e847f
 8002748:	003d08ff 	.word	0x003d08ff
 800274c:	431bde83 	.word	0x431bde83
 8002750:	10624dd3 	.word	0x10624dd3

08002754 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e128      	b.n	80029b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a90      	ldr	r2, [pc, #576]	; (80029c0 <HAL_I2S_Init+0x26c>)
 800277e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7fe fc25 	bl	8000fd0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2202      	movs	r2, #2
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800279c:	f023 030f 	bic.w	r3, r3, #15
 80027a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2202      	movs	r2, #2
 80027a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d060      	beq.n	8002874 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027ba:	2310      	movs	r3, #16
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e001      	b.n	80027c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d802      	bhi.n	80027d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f001 f9d8 	bl	8003b88 <HAL_RCCEx_GetPeriphCLKFreq>
 80027d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e2:	d125      	bne.n	8002830 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d010      	beq.n	800280e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	461a      	mov	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	3305      	adds	r3, #5
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	e01f      	b.n	800284e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	fbb2 f2f3 	udiv	r2, r2, r3
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	461a      	mov	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	3305      	adds	r3, #5
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	e00e      	b.n	800284e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	fbb2 f2f3 	udiv	r2, r2, r3
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	461a      	mov	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	3305      	adds	r3, #5
 800284c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4a5c      	ldr	r2, [pc, #368]	; (80029c4 <HAL_I2S_Init+0x270>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	08db      	lsrs	r3, r3, #3
 8002858:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	e003      	b.n	800287c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002874:	2302      	movs	r3, #2
 8002876:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d902      	bls.n	8002888 <HAL_I2S_Init+0x134>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	2bff      	cmp	r3, #255	; 0xff
 8002886:	d907      	bls.n	8002898 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	f043 0210 	orr.w	r2, r3, #16
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e08f      	b.n	80029b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	ea42 0103 	orr.w	r1, r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028b6:	f023 030f 	bic.w	r3, r3, #15
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6851      	ldr	r1, [r2, #4]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68d2      	ldr	r2, [r2, #12]
 80028c8:	4311      	orrs	r1, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6992      	ldr	r2, [r2, #24]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d161      	bne.n	80029a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a38      	ldr	r2, [pc, #224]	; (80029c8 <HAL_I2S_Init+0x274>)
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a37      	ldr	r2, [pc, #220]	; (80029cc <HAL_I2S_Init+0x278>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_I2S_Init+0x1a4>
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <HAL_I2S_Init+0x27c>)
 80028f6:	e001      	b.n	80028fc <HAL_I2S_Init+0x1a8>
 80028f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	4932      	ldr	r1, [pc, #200]	; (80029cc <HAL_I2S_Init+0x278>)
 8002904:	428a      	cmp	r2, r1
 8002906:	d101      	bne.n	800290c <HAL_I2S_Init+0x1b8>
 8002908:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <HAL_I2S_Init+0x27c>)
 800290a:	e001      	b.n	8002910 <HAL_I2S_Init+0x1bc>
 800290c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002910:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002914:	f023 030f 	bic.w	r3, r3, #15
 8002918:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <HAL_I2S_Init+0x278>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_I2S_Init+0x1d4>
 8002924:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_I2S_Init+0x27c>)
 8002926:	e001      	b.n	800292c <HAL_I2S_Init+0x1d8>
 8002928:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800292c:	2202      	movs	r2, #2
 800292e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a25      	ldr	r2, [pc, #148]	; (80029cc <HAL_I2S_Init+0x278>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_I2S_Init+0x1ea>
 800293a:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <HAL_I2S_Init+0x27c>)
 800293c:	e001      	b.n	8002942 <HAL_I2S_Init+0x1ee>
 800293e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294e:	d003      	beq.n	8002958 <HAL_I2S_Init+0x204>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d103      	bne.n	8002960 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	e001      	b.n	8002964 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800296e:	4313      	orrs	r3, r2
 8002970:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002978:	4313      	orrs	r3, r2
 800297a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002982:	4313      	orrs	r3, r2
 8002984:	b29a      	uxth	r2, r3
 8002986:	897b      	ldrh	r3, [r7, #10]
 8002988:	4313      	orrs	r3, r2
 800298a:	b29b      	uxth	r3, r3
 800298c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002990:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a0d      	ldr	r2, [pc, #52]	; (80029cc <HAL_I2S_Init+0x278>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d101      	bne.n	80029a0 <HAL_I2S_Init+0x24c>
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_I2S_Init+0x27c>)
 800299e:	e001      	b.n	80029a4 <HAL_I2S_Init+0x250>
 80029a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029a4:	897a      	ldrh	r2, [r7, #10]
 80029a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	08002acb 	.word	0x08002acb
 80029c4:	cccccccd 	.word	0xcccccccd
 80029c8:	08002be1 	.word	0x08002be1
 80029cc:	40003800 	.word	0x40003800
 80029d0:	40003400 	.word	0x40003400

080029d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	1c9a      	adds	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10e      	bne.n	8002a64 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a54:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffb8 	bl	80029d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	1c9a      	adds	r2, r3, #2
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10e      	bne.n	8002ac2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ab2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff93 	bl	80029e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d13a      	bne.n	8002b5c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d109      	bne.n	8002b04 <I2S_IRQHandler+0x3a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d102      	bne.n	8002b04 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ffb4 	bl	8002a6c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d126      	bne.n	8002b5c <I2S_IRQHandler+0x92>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d11f      	bne.n	8002b5c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f043 0202 	orr.w	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ff50 	bl	80029fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d136      	bne.n	8002bd6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d109      	bne.n	8002b86 <I2S_IRQHandler+0xbc>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	d102      	bne.n	8002b86 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff45 	bl	8002a10 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d122      	bne.n	8002bd6 <I2S_IRQHandler+0x10c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d11b      	bne.n	8002bd6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f043 0204 	orr.w	r2, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff13 	bl	80029fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a92      	ldr	r2, [pc, #584]	; (8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bfa:	4b92      	ldr	r3, [pc, #584]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bfc:	e001      	b.n	8002c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a8b      	ldr	r2, [pc, #556]	; (8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c18:	4b8a      	ldr	r3, [pc, #552]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c1a:	e001      	b.n	8002c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2c:	d004      	beq.n	8002c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 8099 	bne.w	8002d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d107      	bne.n	8002c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f925 	bl	8002e9c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9c8 	bl	8002ffc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d13a      	bne.n	8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d035      	beq.n	8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6e      	ldr	r2, [pc, #440]	; (8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d101      	bne.n	8002c8e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c8a:	4b6e      	ldr	r3, [pc, #440]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c8c:	e001      	b.n	8002c92 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4969      	ldr	r1, [pc, #420]	; (8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c9a:	428b      	cmp	r3, r1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c9e:	4b69      	ldr	r3, [pc, #420]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ca0:	e001      	b.n	8002ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ca6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002caa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f043 0202 	orr.w	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fe88 	bl	80029fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	f040 80c3 	bne.w	8002e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80bd 	beq.w	8002e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d12:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a49      	ldr	r2, [pc, #292]	; (8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d1e:	4b49      	ldr	r3, [pc, #292]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d20:	e001      	b.n	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4944      	ldr	r1, [pc, #272]	; (8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d2e:	428b      	cmp	r3, r1
 8002d30:	d101      	bne.n	8002d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d32:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d34:	e001      	b.n	8002d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d3e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f043 0204 	orr.w	r2, r3, #4
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fe4a 	bl	80029fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d68:	e089      	b.n	8002e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d107      	bne.n	8002d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f8be 	bl	8002f00 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f8fd 	bl	8002f98 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d12f      	bne.n	8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d02a      	beq.n	8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dc0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d101      	bne.n	8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dce:	e001      	b.n	8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4919      	ldr	r1, [pc, #100]	; (8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ddc:	428b      	cmp	r3, r1
 8002dde:	d101      	bne.n	8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002de2:	e001      	b.n	8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f043 0202 	orr.w	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff fdfa 	bl	80029fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d136      	bne.n	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d031      	beq.n	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e28:	e001      	b.n	8002e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4902      	ldr	r1, [pc, #8]	; (8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e36:	428b      	cmp	r3, r1
 8002e38:	d106      	bne.n	8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002e3a:	4b02      	ldr	r3, [pc, #8]	; (8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e3c:	e006      	b.n	8002e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002e3e:	bf00      	nop
 8002e40:	40003800 	.word	0x40003800
 8002e44:	40003400 	.word	0x40003400
 8002e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e50:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f043 0204 	orr.w	r2, r3, #4
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff fdc0 	bl	80029fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e7c:	e000      	b.n	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e7e:	bf00      	nop
}
 8002e80:	bf00      	nop
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	1c99      	adds	r1, r3, #2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6251      	str	r1, [r2, #36]	; 0x24
 8002eae:	881a      	ldrh	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d113      	bne.n	8002ef6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002edc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ffc9 	bl	8002e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	1c99      	adds	r1, r3, #2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6251      	str	r1, [r2, #36]	; 0x24
 8002f12:	8819      	ldrh	r1, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <I2SEx_TxISR_I2SExt+0x90>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <I2SEx_TxISR_I2SExt+0x22>
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <I2SEx_TxISR_I2SExt+0x94>)
 8002f20:	e001      	b.n	8002f26 <I2SEx_TxISR_I2SExt+0x26>
 8002f22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f26:	460a      	mov	r2, r1
 8002f28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d121      	bne.n	8002f86 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <I2SEx_TxISR_I2SExt+0x90>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <I2SEx_TxISR_I2SExt+0x50>
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <I2SEx_TxISR_I2SExt+0x94>)
 8002f4e:	e001      	b.n	8002f54 <I2SEx_TxISR_I2SExt+0x54>
 8002f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	490d      	ldr	r1, [pc, #52]	; (8002f90 <I2SEx_TxISR_I2SExt+0x90>)
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	d101      	bne.n	8002f64 <I2SEx_TxISR_I2SExt+0x64>
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <I2SEx_TxISR_I2SExt+0x94>)
 8002f62:	e001      	b.n	8002f68 <I2SEx_TxISR_I2SExt+0x68>
 8002f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d106      	bne.n	8002f86 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff81 	bl	8002e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40003800 	.word	0x40003800
 8002f94:	40003400 	.word	0x40003400

08002f98 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68d8      	ldr	r0, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	1c99      	adds	r1, r3, #2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fb0:	b282      	uxth	r2, r0
 8002fb2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d113      	bne.n	8002ff4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fda:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff4a 	bl	8002e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a20      	ldr	r2, [pc, #128]	; (800308c <I2SEx_RxISR_I2SExt+0x90>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <I2SEx_RxISR_I2SExt+0x16>
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <I2SEx_RxISR_I2SExt+0x94>)
 8003010:	e001      	b.n	8003016 <I2SEx_RxISR_I2SExt+0x1a>
 8003012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003016:	68d8      	ldr	r0, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	1c99      	adds	r1, r3, #2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003022:	b282      	uxth	r2, r0
 8003024:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d121      	bne.n	8003082 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a12      	ldr	r2, [pc, #72]	; (800308c <I2SEx_RxISR_I2SExt+0x90>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <I2SEx_RxISR_I2SExt+0x50>
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <I2SEx_RxISR_I2SExt+0x94>)
 800304a:	e001      	b.n	8003050 <I2SEx_RxISR_I2SExt+0x54>
 800304c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	490d      	ldr	r1, [pc, #52]	; (800308c <I2SEx_RxISR_I2SExt+0x90>)
 8003058:	428b      	cmp	r3, r1
 800305a:	d101      	bne.n	8003060 <I2SEx_RxISR_I2SExt+0x64>
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <I2SEx_RxISR_I2SExt+0x94>)
 800305e:	e001      	b.n	8003064 <I2SEx_RxISR_I2SExt+0x68>
 8003060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003064:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003068:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ff03 	bl	8002e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40003800 	.word	0x40003800
 8003090:	40003400 	.word	0x40003400

08003094 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e267      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d075      	beq.n	800319e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030b2:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d00c      	beq.n	80030d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030be:	4b85      	ldr	r3, [pc, #532]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d112      	bne.n	80030f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ca:	4b82      	ldr	r3, [pc, #520]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d6:	d10b      	bne.n	80030f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d8:	4b7e      	ldr	r3, [pc, #504]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d05b      	beq.n	800319c <HAL_RCC_OscConfig+0x108>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d157      	bne.n	800319c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e242      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d106      	bne.n	8003108 <HAL_RCC_OscConfig+0x74>
 80030fa:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a75      	ldr	r2, [pc, #468]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e01d      	b.n	8003144 <HAL_RCC_OscConfig+0xb0>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x98>
 8003112:	4b70      	ldr	r3, [pc, #448]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6f      	ldr	r2, [pc, #444]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b6d      	ldr	r3, [pc, #436]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6c      	ldr	r2, [pc, #432]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0xb0>
 800312c:	4b69      	ldr	r3, [pc, #420]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a68      	ldr	r2, [pc, #416]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b66      	ldr	r3, [pc, #408]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a65      	ldr	r2, [pc, #404]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d013      	beq.n	8003174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe fa7a 	bl	8001644 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003154:	f7fe fa76 	bl	8001644 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e207      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b5b      	ldr	r3, [pc, #364]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0xc0>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe fa66 	bl	8001644 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800317c:	f7fe fa62 	bl	8001644 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1f3      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0xe8>
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d063      	beq.n	8003272 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031aa:	4b4a      	ldr	r3, [pc, #296]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d11c      	bne.n	80031fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c2:	4b44      	ldr	r3, [pc, #272]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_RCC_OscConfig+0x152>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e1c7      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4937      	ldr	r1, [pc, #220]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fa:	e03a      	b.n	8003272 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003204:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <HAL_RCC_OscConfig+0x244>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fe fa1b 	bl	8001644 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003212:	f7fe fa17 	bl	8001644 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e1a8      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4925      	ldr	r1, [pc, #148]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]
 8003244:	e015      	b.n	8003272 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003246:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <HAL_RCC_OscConfig+0x244>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fe f9fa 	bl	8001644 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003254:	f7fe f9f6 	bl	8001644 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e187      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003266:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d036      	beq.n	80032ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_RCC_OscConfig+0x248>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7fe f9da 	bl	8001644 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003294:	f7fe f9d6 	bl	8001644 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e167      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_OscConfig+0x240>)
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x200>
 80032b2:	e01b      	b.n	80032ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_RCC_OscConfig+0x248>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ba:	f7fe f9c3 	bl	8001644 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c0:	e00e      	b.n	80032e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c2:	f7fe f9bf 	bl	8001644 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d907      	bls.n	80032e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e150      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
 80032d4:	40023800 	.word	0x40023800
 80032d8:	42470000 	.word	0x42470000
 80032dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	4b88      	ldr	r3, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ea      	bne.n	80032c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8097 	beq.w	8003428 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fe:	4b81      	ldr	r3, [pc, #516]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10f      	bne.n	800332a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	4b7d      	ldr	r3, [pc, #500]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a7c      	ldr	r2, [pc, #496]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b7a      	ldr	r3, [pc, #488]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b77      	ldr	r3, [pc, #476]	; (8003508 <HAL_RCC_OscConfig+0x474>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d118      	bne.n	8003368 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003336:	4b74      	ldr	r3, [pc, #464]	; (8003508 <HAL_RCC_OscConfig+0x474>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a73      	ldr	r2, [pc, #460]	; (8003508 <HAL_RCC_OscConfig+0x474>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fe f97f 	bl	8001644 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7fe f97b 	bl	8001644 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e10c      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	4b6a      	ldr	r3, [pc, #424]	; (8003508 <HAL_RCC_OscConfig+0x474>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x2ea>
 8003370:	4b64      	ldr	r3, [pc, #400]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a63      	ldr	r2, [pc, #396]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
 800337c:	e01c      	b.n	80033b8 <HAL_RCC_OscConfig+0x324>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x30c>
 8003386:	4b5f      	ldr	r3, [pc, #380]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a5e      	ldr	r2, [pc, #376]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	4b5c      	ldr	r3, [pc, #368]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a5b      	ldr	r2, [pc, #364]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0x324>
 80033a0:	4b58      	ldr	r3, [pc, #352]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a57      	ldr	r2, [pc, #348]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	4b55      	ldr	r3, [pc, #340]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a54      	ldr	r2, [pc, #336]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 80033b2:	f023 0304 	bic.w	r3, r3, #4
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d015      	beq.n	80033ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fe f940 	bl	8001644 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fe f93c 	bl	8001644 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e0cb      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033de:	4b49      	ldr	r3, [pc, #292]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0ee      	beq.n	80033c8 <HAL_RCC_OscConfig+0x334>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ec:	f7fe f92a 	bl	8001644 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f2:	e00a      	b.n	800340a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7fe f926 	bl	8001644 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e0b5      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340a:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1ee      	bne.n	80033f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d105      	bne.n	8003428 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341c:	4b39      	ldr	r3, [pc, #228]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	4a38      	ldr	r2, [pc, #224]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003426:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a1 	beq.w	8003574 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003432:	4b34      	ldr	r3, [pc, #208]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b08      	cmp	r3, #8
 800343c:	d05c      	beq.n	80034f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d141      	bne.n	80034ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	4b31      	ldr	r3, [pc, #196]	; (800350c <HAL_RCC_OscConfig+0x478>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe f8fa 	bl	8001644 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003454:	f7fe f8f6 	bl	8001644 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e087      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	4b27      	ldr	r3, [pc, #156]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	3b01      	subs	r3, #1
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	491b      	ldr	r1, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x478>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a2:	f7fe f8cf 	bl	8001644 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fe f8cb 	bl	8001644 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e05c      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x416>
 80034c8:	e054      	b.n	8003574 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <HAL_RCC_OscConfig+0x478>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fe f8b8 	bl	8001644 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe f8b4 	bl	8001644 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e045      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_OscConfig+0x470>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x444>
 80034f6:	e03d      	b.n	8003574 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e038      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
 8003504:	40023800 	.word	0x40023800
 8003508:	40007000 	.word	0x40007000
 800350c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_RCC_OscConfig+0x4ec>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d028      	beq.n	8003570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d121      	bne.n	8003570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d11a      	bne.n	8003570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003540:	4013      	ands	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003546:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003548:	4293      	cmp	r3, r2
 800354a:	d111      	bne.n	8003570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	3b01      	subs	r3, #1
 800355a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d107      	bne.n	8003570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800

08003584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0cc      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b68      	ldr	r3, [pc, #416]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d90c      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b65      	ldr	r3, [pc, #404]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b63      	ldr	r3, [pc, #396]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0b8      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d8:	4b59      	ldr	r3, [pc, #356]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a58      	ldr	r2, [pc, #352]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f0:	4b53      	ldr	r3, [pc, #332]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a52      	ldr	r2, [pc, #328]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b50      	ldr	r3, [pc, #320]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	494d      	ldr	r1, [pc, #308]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d044      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b47      	ldr	r3, [pc, #284]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d119      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e07f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d003      	beq.n	8003642 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363e:	2b03      	cmp	r3, #3
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b3f      	ldr	r3, [pc, #252]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e06f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003652:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e067      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003662:	4b37      	ldr	r3, [pc, #220]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f023 0203 	bic.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4934      	ldr	r1, [pc, #208]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003674:	f7fd ffe6 	bl	8001644 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	e00a      	b.n	8003692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7fd ffe2 	bl	8001644 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e04f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 020c 	and.w	r2, r3, #12
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1eb      	bne.n	800367c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a4:	4b25      	ldr	r3, [pc, #148]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d20c      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b22      	ldr	r3, [pc, #136]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e032      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4916      	ldr	r1, [pc, #88]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	490e      	ldr	r1, [pc, #56]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800370a:	f000 f821 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800370e:	4602      	mov	r2, r0
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	490a      	ldr	r1, [pc, #40]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	5ccb      	ldrb	r3, [r1, r3]
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd ff46 	bl	80015bc <HAL_InitTick>

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40023c00 	.word	0x40023c00
 8003740:	40023800 	.word	0x40023800
 8003744:	08005c70 	.word	0x08005c70
 8003748:	20000000 	.word	0x20000000
 800374c:	20000004 	.word	0x20000004

08003750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003754:	b094      	sub	sp, #80	; 0x50
 8003756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	647b      	str	r3, [r7, #68]	; 0x44
 800375c:	2300      	movs	r3, #0
 800375e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003760:	2300      	movs	r3, #0
 8003762:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003768:	4b79      	ldr	r3, [pc, #484]	; (8003950 <HAL_RCC_GetSysClockFreq+0x200>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 030c 	and.w	r3, r3, #12
 8003770:	2b08      	cmp	r3, #8
 8003772:	d00d      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x40>
 8003774:	2b08      	cmp	r3, #8
 8003776:	f200 80e1 	bhi.w	800393c <HAL_RCC_GetSysClockFreq+0x1ec>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x34>
 800377e:	2b04      	cmp	r3, #4
 8003780:	d003      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0x3a>
 8003782:	e0db      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b73      	ldr	r3, [pc, #460]	; (8003954 <HAL_RCC_GetSysClockFreq+0x204>)
 8003786:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003788:	e0db      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378a:	4b73      	ldr	r3, [pc, #460]	; (8003958 <HAL_RCC_GetSysClockFreq+0x208>)
 800378c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800378e:	e0d8      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003790:	4b6f      	ldr	r3, [pc, #444]	; (8003950 <HAL_RCC_GetSysClockFreq+0x200>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003798:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379a:	4b6d      	ldr	r3, [pc, #436]	; (8003950 <HAL_RCC_GetSysClockFreq+0x200>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d063      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a6:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	2200      	movs	r2, #0
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80037b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b8:	633b      	str	r3, [r7, #48]	; 0x30
 80037ba:	2300      	movs	r3, #0
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
 80037be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037c2:	4622      	mov	r2, r4
 80037c4:	462b      	mov	r3, r5
 80037c6:	f04f 0000 	mov.w	r0, #0
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	0159      	lsls	r1, r3, #5
 80037d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d4:	0150      	lsls	r0, r2, #5
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4621      	mov	r1, r4
 80037dc:	1a51      	subs	r1, r2, r1
 80037de:	6139      	str	r1, [r7, #16]
 80037e0:	4629      	mov	r1, r5
 80037e2:	eb63 0301 	sbc.w	r3, r3, r1
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f4:	4659      	mov	r1, fp
 80037f6:	018b      	lsls	r3, r1, #6
 80037f8:	4651      	mov	r1, sl
 80037fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037fe:	4651      	mov	r1, sl
 8003800:	018a      	lsls	r2, r1, #6
 8003802:	4651      	mov	r1, sl
 8003804:	ebb2 0801 	subs.w	r8, r2, r1
 8003808:	4659      	mov	r1, fp
 800380a:	eb63 0901 	sbc.w	r9, r3, r1
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800381a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003822:	4690      	mov	r8, r2
 8003824:	4699      	mov	r9, r3
 8003826:	4623      	mov	r3, r4
 8003828:	eb18 0303 	adds.w	r3, r8, r3
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	462b      	mov	r3, r5
 8003830:	eb49 0303 	adc.w	r3, r9, r3
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003842:	4629      	mov	r1, r5
 8003844:	024b      	lsls	r3, r1, #9
 8003846:	4621      	mov	r1, r4
 8003848:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800384c:	4621      	mov	r1, r4
 800384e:	024a      	lsls	r2, r1, #9
 8003850:	4610      	mov	r0, r2
 8003852:	4619      	mov	r1, r3
 8003854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003856:	2200      	movs	r2, #0
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
 800385a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800385c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003860:	f7fc fd06 	bl	8000270 <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4613      	mov	r3, r2
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800386c:	e058      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386e:	4b38      	ldr	r3, [pc, #224]	; (8003950 <HAL_RCC_GetSysClockFreq+0x200>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	099b      	lsrs	r3, r3, #6
 8003874:	2200      	movs	r2, #0
 8003876:	4618      	mov	r0, r3
 8003878:	4611      	mov	r1, r2
 800387a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800387e:	623b      	str	r3, [r7, #32]
 8003880:	2300      	movs	r3, #0
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
 8003884:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003888:	4642      	mov	r2, r8
 800388a:	464b      	mov	r3, r9
 800388c:	f04f 0000 	mov.w	r0, #0
 8003890:	f04f 0100 	mov.w	r1, #0
 8003894:	0159      	lsls	r1, r3, #5
 8003896:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800389a:	0150      	lsls	r0, r2, #5
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4641      	mov	r1, r8
 80038a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038a6:	4649      	mov	r1, r9
 80038a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038c0:	ebb2 040a 	subs.w	r4, r2, sl
 80038c4:	eb63 050b 	sbc.w	r5, r3, fp
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	00eb      	lsls	r3, r5, #3
 80038d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d6:	00e2      	lsls	r2, r4, #3
 80038d8:	4614      	mov	r4, r2
 80038da:	461d      	mov	r5, r3
 80038dc:	4643      	mov	r3, r8
 80038de:	18e3      	adds	r3, r4, r3
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	464b      	mov	r3, r9
 80038e4:	eb45 0303 	adc.w	r3, r5, r3
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f6:	4629      	mov	r1, r5
 80038f8:	028b      	lsls	r3, r1, #10
 80038fa:	4621      	mov	r1, r4
 80038fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003900:	4621      	mov	r1, r4
 8003902:	028a      	lsls	r2, r1, #10
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390a:	2200      	movs	r2, #0
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	61fa      	str	r2, [r7, #28]
 8003910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003914:	f7fc fcac 	bl	8000270 <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4613      	mov	r3, r2
 800391e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_GetSysClockFreq+0x200>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	3301      	adds	r3, #1
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800393a:	e002      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_GetSysClockFreq+0x204>)
 800393e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003944:	4618      	mov	r0, r3
 8003946:	3750      	adds	r7, #80	; 0x50
 8003948:	46bd      	mov	sp, r7
 800394a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	00f42400 	.word	0x00f42400
 8003958:	007a1200 	.word	0x007a1200

0800395c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCC_GetHCLKFreq+0x14>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000000 	.word	0x20000000

08003974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003978:	f7ff fff0 	bl	800395c <HAL_RCC_GetHCLKFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4903      	ldr	r1, [pc, #12]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	08005c80 	.word	0x08005c80

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a0:	f7ff ffdc 	bl	800395c <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0b5b      	lsrs	r3, r3, #13
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	08005c80 	.word	0x08005c80

080039c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d105      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d035      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039ec:	4b62      	ldr	r3, [pc, #392]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039f2:	f7fd fe27 	bl	8001644 <HAL_GetTick>
 80039f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039fa:	f7fd fe23 	bl	8001644 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e0b0      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a0c:	4b5b      	ldr	r3, [pc, #364]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f0      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	019a      	lsls	r2, r3, #6
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	071b      	lsls	r3, r3, #28
 8003a24:	4955      	ldr	r1, [pc, #340]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a2c:	4b52      	ldr	r3, [pc, #328]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a32:	f7fd fe07 	bl	8001644 <HAL_GetTick>
 8003a36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a3a:	f7fd fe03 	bl	8001644 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e090      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a4c:	4b4b      	ldr	r3, [pc, #300]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8083 	beq.w	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4a43      	ldr	r2, [pc, #268]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6413      	str	r3, [r2, #64]	; 0x40
 8003a76:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a82:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a3e      	ldr	r2, [pc, #248]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a8e:	f7fd fdd9 	bl	8001644 <HAL_GetTick>
 8003a92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a96:	f7fd fdd5 	bl	8001644 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e062      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003aa8:	4b35      	ldr	r3, [pc, #212]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ab4:	4b31      	ldr	r3, [pc, #196]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d02f      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d028      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ada:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003adc:	4b29      	ldr	r3, [pc, #164]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae2:	4b28      	ldr	r3, [pc, #160]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ae8:	4a24      	ldr	r2, [pc, #144]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003aee:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d114      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003afa:	f7fd fda3 	bl	8001644 <HAL_GetTick>
 8003afe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fd fd9f 	bl	8001644 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e02a      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b18:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ee      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b30:	d10d      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b46:	490d      	ldr	r1, [pc, #52]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	608b      	str	r3, [r1, #8]
 8003b4c:	e005      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b58:	6093      	str	r3, [r2, #8]
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b66:	4905      	ldr	r1, [pc, #20]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	42470068 	.word	0x42470068
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40007000 	.word	0x40007000
 8003b84:	42470e40 	.word	0x42470e40

08003b88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d13e      	bne.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d12f      	bne.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003bbe:	617b      	str	r3, [r7, #20]
          break;
 8003bc0:	e02f      	b.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bce:	d108      	bne.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003bd0:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd8:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	e007      	b.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bea:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003bf2:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	fb02 f303 	mul.w	r3, r2, r3
 8003c04:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003c06:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0c:	0f1b      	lsrs	r3, r3, #28
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	617b      	str	r3, [r7, #20]
          break;
 8003c1a:	e002      	b.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
          break;
 8003c20:	bf00      	nop
        }
      }
      break;
 8003c22:	bf00      	nop
    }
  }
  return frequency;
 8003c24:	697b      	ldr	r3, [r7, #20]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00bb8000 	.word	0x00bb8000
 8003c3c:	007a1200 	.word	0x007a1200
 8003c40:	00f42400 	.word	0x00f42400

08003c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e07b      	b.n	8003d4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d108      	bne.n	8003c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c66:	d009      	beq.n	8003c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61da      	str	r2, [r3, #28]
 8003c6e:	e005      	b.n	8003c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd fa1a 	bl	80010d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d00:	ea42 0103 	orr.w	r1, r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	f003 0104 	and.w	r1, r3, #4
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	f003 0210 	and.w	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e097      	b.n	8003e9a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fd f9ee 	bl	8001160 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d9a:	f023 0307 	bic.w	r3, r3, #7
 8003d9e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f000 fa62 	bl	8004274 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd8:	f023 0303 	bic.w	r3, r3, #3
 8003ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	4313      	orrs	r3, r2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003df6:	f023 030c 	bic.w	r3, r3, #12
 8003dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	4313      	orrs	r3, r2
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	011a      	lsls	r2, r3, #4
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	031b      	lsls	r3, r3, #12
 8003e26:	4313      	orrs	r3, r2
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e34:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e3c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003eba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ec2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003eca:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d110      	bne.n	8003ef4 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d102      	bne.n	8003ede <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ed8:	7b7b      	ldrb	r3, [r7, #13]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d001      	beq.n	8003ee2 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e089      	b.n	8003ff6 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef2:	e031      	b.n	8003f58 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d110      	bne.n	8003f1c <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003efa:	7bbb      	ldrb	r3, [r7, #14]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d102      	bne.n	8003f06 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f00:	7b3b      	ldrb	r3, [r7, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e075      	b.n	8003ff6 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f1a:	e01d      	b.n	8003f58 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d108      	bne.n	8003f34 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f22:	7bbb      	ldrb	r3, [r7, #14]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f28:	7b7b      	ldrb	r3, [r7, #13]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d102      	bne.n	8003f34 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f2e:	7b3b      	ldrb	r3, [r7, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d001      	beq.n	8003f38 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e05e      	b.n	8003ff6 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d010      	beq.n	8003f86 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003f64:	e01f      	b.n	8003fa6 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fa20 	bl	80043b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0202 	orr.w	r2, r2, #2
 8003f82:	60da      	str	r2, [r3, #12]
      break;
 8003f84:	e02e      	b.n	8003fe4 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fa10 	bl	80043b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0204 	orr.w	r2, r2, #4
 8003fa2:	60da      	str	r2, [r3, #12]
      break;
 8003fa4:	e01e      	b.n	8003fe4 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2201      	movs	r2, #1
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fa00 	bl	80043b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	2104      	movs	r1, #4
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f9f9 	bl	80043b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0202 	orr.w	r2, r2, #2
 8003fd0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0204 	orr.w	r2, r2, #4
 8003fe0:	60da      	str	r2, [r3, #12]
      break;
 8003fe2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d122      	bne.n	800405a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b02      	cmp	r3, #2
 8004020:	d11b      	bne.n	800405a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f06f 0202 	mvn.w	r2, #2
 800402a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f8f8 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 8004046:	e005      	b.n	8004054 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f8ea 	bl	8004222 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f8fb 	bl	800424a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d122      	bne.n	80040ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b04      	cmp	r3, #4
 8004074:	d11b      	bne.n	80040ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f06f 0204 	mvn.w	r2, #4
 800407e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f8ce 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 800409a:	e005      	b.n	80040a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f8c0 	bl	8004222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8d1 	bl	800424a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d122      	bne.n	8004102 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d11b      	bne.n	8004102 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0208 	mvn.w	r2, #8
 80040d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2204      	movs	r2, #4
 80040d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8a4 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 80040ee:	e005      	b.n	80040fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f896 	bl	8004222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8a7 	bl	800424a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d122      	bne.n	8004156 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b10      	cmp	r3, #16
 800411c:	d11b      	bne.n	8004156 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f06f 0210 	mvn.w	r2, #16
 8004126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2208      	movs	r2, #8
 800412c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f87a 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 8004142:	e005      	b.n	8004150 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f86c 	bl	8004222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f87d 	bl	800424a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10e      	bne.n	8004182 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d107      	bne.n	8004182 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 0201 	mvn.w	r2, #1
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f846 	bl	800420e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d10e      	bne.n	80041ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	d107      	bne.n	80041ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f9af 	bl	800450c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b40      	cmp	r3, #64	; 0x40
 80041ba:	d10e      	bne.n	80041da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b40      	cmp	r3, #64	; 0x40
 80041c8:	d107      	bne.n	80041da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f842 	bl	800425e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d10e      	bne.n	8004206 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d107      	bne.n	8004206 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f06f 0220 	mvn.w	r2, #32
 80041fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f979 	bl	80044f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a40      	ldr	r2, [pc, #256]	; (8004388 <TIM_Base_SetConfig+0x114>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d013      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d00f      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a3d      	ldr	r2, [pc, #244]	; (800438c <TIM_Base_SetConfig+0x118>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00b      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <TIM_Base_SetConfig+0x11c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a3b      	ldr	r2, [pc, #236]	; (8004394 <TIM_Base_SetConfig+0x120>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3a      	ldr	r2, [pc, #232]	; (8004398 <TIM_Base_SetConfig+0x124>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d108      	bne.n	80042c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a2f      	ldr	r2, [pc, #188]	; (8004388 <TIM_Base_SetConfig+0x114>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d02b      	beq.n	8004326 <TIM_Base_SetConfig+0xb2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d4:	d027      	beq.n	8004326 <TIM_Base_SetConfig+0xb2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a2c      	ldr	r2, [pc, #176]	; (800438c <TIM_Base_SetConfig+0x118>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d023      	beq.n	8004326 <TIM_Base_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <TIM_Base_SetConfig+0x11c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01f      	beq.n	8004326 <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a2a      	ldr	r2, [pc, #168]	; (8004394 <TIM_Base_SetConfig+0x120>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01b      	beq.n	8004326 <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a29      	ldr	r2, [pc, #164]	; (8004398 <TIM_Base_SetConfig+0x124>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d017      	beq.n	8004326 <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a28      	ldr	r2, [pc, #160]	; (800439c <TIM_Base_SetConfig+0x128>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a27      	ldr	r2, [pc, #156]	; (80043a0 <TIM_Base_SetConfig+0x12c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00f      	beq.n	8004326 <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a26      	ldr	r2, [pc, #152]	; (80043a4 <TIM_Base_SetConfig+0x130>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00b      	beq.n	8004326 <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a25      	ldr	r2, [pc, #148]	; (80043a8 <TIM_Base_SetConfig+0x134>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a24      	ldr	r2, [pc, #144]	; (80043ac <TIM_Base_SetConfig+0x138>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a23      	ldr	r2, [pc, #140]	; (80043b0 <TIM_Base_SetConfig+0x13c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d108      	bne.n	8004338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <TIM_Base_SetConfig+0x114>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0xf8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a0c      	ldr	r2, [pc, #48]	; (8004398 <TIM_Base_SetConfig+0x124>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d103      	bne.n	8004374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	615a      	str	r2, [r3, #20]
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40010000 	.word	0x40010000
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800
 8004394:	40000c00 	.word	0x40000c00
 8004398:	40010400 	.word	0x40010400
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800
 80043a8:	40001800 	.word	0x40001800
 80043ac:	40001c00 	.word	0x40001c00
 80043b0:	40002000 	.word	0x40002000

080043b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2201      	movs	r2, #1
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a1a      	ldr	r2, [r3, #32]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	401a      	ands	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a1a      	ldr	r2, [r3, #32]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	431a      	orrs	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004414:	2302      	movs	r3, #2
 8004416:	e05a      	b.n	80044ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a21      	ldr	r2, [pc, #132]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d022      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004464:	d01d      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1d      	ldr	r2, [pc, #116]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d018      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1b      	ldr	r2, [pc, #108]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d013      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1a      	ldr	r2, [pc, #104]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00e      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a18      	ldr	r2, [pc, #96]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d009      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a17      	ldr	r2, [pc, #92]	; (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d004      	beq.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d10c      	bne.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40000800 	.word	0x40000800
 80044e8:	40000c00 	.word	0x40000c00
 80044ec:	40010400 	.word	0x40010400
 80044f0:	40014000 	.word	0x40014000
 80044f4:	40001800 	.word	0x40001800

080044f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e03f      	b.n	80045b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc feae 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2224      	movs	r2, #36	; 0x24
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f929 	bl	80047bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b08a      	sub	sp, #40	; 0x28
 80045be:	af02      	add	r7, sp, #8
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d17c      	bne.n	80046d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_UART_Transmit+0x2c>
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e075      	b.n	80046d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Transmit+0x3e>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e06e      	b.n	80046d6 <HAL_UART_Transmit+0x11c>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2221      	movs	r2, #33	; 0x21
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800460e:	f7fd f819 	bl	8001644 <HAL_GetTick>
 8004612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004628:	d108      	bne.n	800463c <HAL_UART_Transmit+0x82>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d104      	bne.n	800463c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	e003      	b.n	8004644 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004640:	2300      	movs	r3, #0
 8004642:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800464c:	e02a      	b.n	80046a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2200      	movs	r2, #0
 8004656:	2180      	movs	r1, #128	; 0x80
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f840 	bl	80046de <UART_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e036      	b.n	80046d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10b      	bne.n	8004686 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800467c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	3302      	adds	r3, #2
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	e007      	b.n	8004696 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	3301      	adds	r3, #1
 8004694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1cf      	bne.n	800464e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2200      	movs	r2, #0
 80046b6:	2140      	movs	r1, #64	; 0x40
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f810 	bl	80046de <UART_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e006      	b.n	80046d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b090      	sub	sp, #64	; 0x40
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ee:	e050      	b.n	8004792 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f6:	d04c      	beq.n	8004792 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <UART_WaitOnFlagUntilTimeout+0x30>
 80046fe:	f7fc ffa1 	bl	8001644 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800470a:	429a      	cmp	r2, r3
 800470c:	d241      	bcs.n	8004792 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	330c      	adds	r3, #12
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800472e:	637a      	str	r2, [r7, #52]	; 0x34
 8004730:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e5      	bne.n	800470e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3314      	adds	r3, #20
 8004748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	613b      	str	r3, [r7, #16]
   return(result);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	63bb      	str	r3, [r7, #56]	; 0x38
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3314      	adds	r3, #20
 8004760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004762:	623a      	str	r2, [r7, #32]
 8004764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	69f9      	ldr	r1, [r7, #28]
 8004768:	6a3a      	ldr	r2, [r7, #32]
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e5      	bne.n	8004742 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e00f      	b.n	80047b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4013      	ands	r3, r2
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	429a      	cmp	r2, r3
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d09f      	beq.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3740      	adds	r7, #64	; 0x40
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c0:	b0c0      	sub	sp, #256	; 0x100
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	68d9      	ldr	r1, [r3, #12]
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	ea40 0301 	orr.w	r3, r0, r1
 80047e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004814:	f021 010c 	bic.w	r1, r1, #12
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004822:	430b      	orrs	r3, r1
 8004824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004836:	6999      	ldr	r1, [r3, #24]
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	ea40 0301 	orr.w	r3, r0, r1
 8004842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b8f      	ldr	r3, [pc, #572]	; (8004a88 <UART_SetConfig+0x2cc>)
 800484c:	429a      	cmp	r2, r3
 800484e:	d005      	beq.n	800485c <UART_SetConfig+0xa0>
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b8d      	ldr	r3, [pc, #564]	; (8004a8c <UART_SetConfig+0x2d0>)
 8004858:	429a      	cmp	r2, r3
 800485a:	d104      	bne.n	8004866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800485c:	f7ff f89e 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8004860:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004864:	e003      	b.n	800486e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004866:	f7ff f885 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 800486a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004878:	f040 810c 	bne.w	8004a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800487c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004880:	2200      	movs	r2, #0
 8004882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004886:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800488a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800488e:	4622      	mov	r2, r4
 8004890:	462b      	mov	r3, r5
 8004892:	1891      	adds	r1, r2, r2
 8004894:	65b9      	str	r1, [r7, #88]	; 0x58
 8004896:	415b      	adcs	r3, r3
 8004898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800489a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800489e:	4621      	mov	r1, r4
 80048a0:	eb12 0801 	adds.w	r8, r2, r1
 80048a4:	4629      	mov	r1, r5
 80048a6:	eb43 0901 	adc.w	r9, r3, r1
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048be:	4690      	mov	r8, r2
 80048c0:	4699      	mov	r9, r3
 80048c2:	4623      	mov	r3, r4
 80048c4:	eb18 0303 	adds.w	r3, r8, r3
 80048c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048cc:	462b      	mov	r3, r5
 80048ce:	eb49 0303 	adc.w	r3, r9, r3
 80048d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048ea:	460b      	mov	r3, r1
 80048ec:	18db      	adds	r3, r3, r3
 80048ee:	653b      	str	r3, [r7, #80]	; 0x50
 80048f0:	4613      	mov	r3, r2
 80048f2:	eb42 0303 	adc.w	r3, r2, r3
 80048f6:	657b      	str	r3, [r7, #84]	; 0x54
 80048f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004900:	f7fb fcb6 	bl	8000270 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4b61      	ldr	r3, [pc, #388]	; (8004a90 <UART_SetConfig+0x2d4>)
 800490a:	fba3 2302 	umull	r2, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	011c      	lsls	r4, r3, #4
 8004912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004916:	2200      	movs	r2, #0
 8004918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800491c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004924:	4642      	mov	r2, r8
 8004926:	464b      	mov	r3, r9
 8004928:	1891      	adds	r1, r2, r2
 800492a:	64b9      	str	r1, [r7, #72]	; 0x48
 800492c:	415b      	adcs	r3, r3
 800492e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004934:	4641      	mov	r1, r8
 8004936:	eb12 0a01 	adds.w	sl, r2, r1
 800493a:	4649      	mov	r1, r9
 800493c:	eb43 0b01 	adc.w	fp, r3, r1
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800494c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004954:	4692      	mov	sl, r2
 8004956:	469b      	mov	fp, r3
 8004958:	4643      	mov	r3, r8
 800495a:	eb1a 0303 	adds.w	r3, sl, r3
 800495e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004962:	464b      	mov	r3, r9
 8004964:	eb4b 0303 	adc.w	r3, fp, r3
 8004968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004978:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800497c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004980:	460b      	mov	r3, r1
 8004982:	18db      	adds	r3, r3, r3
 8004984:	643b      	str	r3, [r7, #64]	; 0x40
 8004986:	4613      	mov	r3, r2
 8004988:	eb42 0303 	adc.w	r3, r2, r3
 800498c:	647b      	str	r3, [r7, #68]	; 0x44
 800498e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004996:	f7fb fc6b 	bl	8000270 <__aeabi_uldivmod>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	4b3b      	ldr	r3, [pc, #236]	; (8004a90 <UART_SetConfig+0x2d4>)
 80049a2:	fba3 2301 	umull	r2, r3, r3, r1
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2264      	movs	r2, #100	; 0x64
 80049aa:	fb02 f303 	mul.w	r3, r2, r3
 80049ae:	1acb      	subs	r3, r1, r3
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049b6:	4b36      	ldr	r3, [pc, #216]	; (8004a90 <UART_SetConfig+0x2d4>)
 80049b8:	fba3 2302 	umull	r2, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049c4:	441c      	add	r4, r3
 80049c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049d8:	4642      	mov	r2, r8
 80049da:	464b      	mov	r3, r9
 80049dc:	1891      	adds	r1, r2, r2
 80049de:	63b9      	str	r1, [r7, #56]	; 0x38
 80049e0:	415b      	adcs	r3, r3
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049e8:	4641      	mov	r1, r8
 80049ea:	1851      	adds	r1, r2, r1
 80049ec:	6339      	str	r1, [r7, #48]	; 0x30
 80049ee:	4649      	mov	r1, r9
 80049f0:	414b      	adcs	r3, r1
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a00:	4659      	mov	r1, fp
 8004a02:	00cb      	lsls	r3, r1, #3
 8004a04:	4651      	mov	r1, sl
 8004a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a0a:	4651      	mov	r1, sl
 8004a0c:	00ca      	lsls	r2, r1, #3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	4642      	mov	r2, r8
 8004a16:	189b      	adds	r3, r3, r2
 8004a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	460a      	mov	r2, r1
 8004a20:	eb42 0303 	adc.w	r3, r2, r3
 8004a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	18db      	adds	r3, r3, r3
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a42:	4613      	mov	r3, r2
 8004a44:	eb42 0303 	adc.w	r3, r2, r3
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a52:	f7fb fc0d 	bl	8000270 <__aeabi_uldivmod>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <UART_SetConfig+0x2d4>)
 8004a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	2164      	movs	r1, #100	; 0x64
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	3332      	adds	r3, #50	; 0x32
 8004a6e:	4a08      	ldr	r2, [pc, #32]	; (8004a90 <UART_SetConfig+0x2d4>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	f003 0207 	and.w	r2, r3, #7
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4422      	add	r2, r4
 8004a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a84:	e105      	b.n	8004c92 <UART_SetConfig+0x4d6>
 8004a86:	bf00      	nop
 8004a88:	40011000 	.word	0x40011000
 8004a8c:	40011400 	.word	0x40011400
 8004a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aa6:	4642      	mov	r2, r8
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	1891      	adds	r1, r2, r2
 8004aac:	6239      	str	r1, [r7, #32]
 8004aae:	415b      	adcs	r3, r3
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ab6:	4641      	mov	r1, r8
 8004ab8:	1854      	adds	r4, r2, r1
 8004aba:	4649      	mov	r1, r9
 8004abc:	eb43 0501 	adc.w	r5, r3, r1
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	00eb      	lsls	r3, r5, #3
 8004aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ace:	00e2      	lsls	r2, r4, #3
 8004ad0:	4614      	mov	r4, r2
 8004ad2:	461d      	mov	r5, r3
 8004ad4:	4643      	mov	r3, r8
 8004ad6:	18e3      	adds	r3, r4, r3
 8004ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004adc:	464b      	mov	r3, r9
 8004ade:	eb45 0303 	adc.w	r3, r5, r3
 8004ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004af2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b02:	4629      	mov	r1, r5
 8004b04:	008b      	lsls	r3, r1, #2
 8004b06:	4621      	mov	r1, r4
 8004b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	008a      	lsls	r2, r1, #2
 8004b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b14:	f7fb fbac 	bl	8000270 <__aeabi_uldivmod>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4b60      	ldr	r3, [pc, #384]	; (8004ca0 <UART_SetConfig+0x4e4>)
 8004b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	011c      	lsls	r4, r3, #4
 8004b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b38:	4642      	mov	r2, r8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	1891      	adds	r1, r2, r2
 8004b3e:	61b9      	str	r1, [r7, #24]
 8004b40:	415b      	adcs	r3, r3
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b48:	4641      	mov	r1, r8
 8004b4a:	1851      	adds	r1, r2, r1
 8004b4c:	6139      	str	r1, [r7, #16]
 8004b4e:	4649      	mov	r1, r9
 8004b50:	414b      	adcs	r3, r1
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b60:	4659      	mov	r1, fp
 8004b62:	00cb      	lsls	r3, r1, #3
 8004b64:	4651      	mov	r1, sl
 8004b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6a:	4651      	mov	r1, sl
 8004b6c:	00ca      	lsls	r2, r1, #3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	4642      	mov	r2, r8
 8004b76:	189b      	adds	r3, r3, r2
 8004b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b7c:	464b      	mov	r3, r9
 8004b7e:	460a      	mov	r2, r1
 8004b80:	eb42 0303 	adc.w	r3, r2, r3
 8004b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	008b      	lsls	r3, r1, #2
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004baa:	4641      	mov	r1, r8
 8004bac:	008a      	lsls	r2, r1, #2
 8004bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bb2:	f7fb fb5d 	bl	8000270 <__aeabi_uldivmod>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <UART_SetConfig+0x4e4>)
 8004bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	2164      	movs	r1, #100	; 0x64
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	3332      	adds	r3, #50	; 0x32
 8004bce:	4a34      	ldr	r2, [pc, #208]	; (8004ca0 <UART_SetConfig+0x4e4>)
 8004bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bda:	441c      	add	r4, r3
 8004bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be0:	2200      	movs	r2, #0
 8004be2:	673b      	str	r3, [r7, #112]	; 0x70
 8004be4:	677a      	str	r2, [r7, #116]	; 0x74
 8004be6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bea:	4642      	mov	r2, r8
 8004bec:	464b      	mov	r3, r9
 8004bee:	1891      	adds	r1, r2, r2
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	415b      	adcs	r3, r3
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bfa:	4641      	mov	r1, r8
 8004bfc:	1851      	adds	r1, r2, r1
 8004bfe:	6039      	str	r1, [r7, #0]
 8004c00:	4649      	mov	r1, r9
 8004c02:	414b      	adcs	r3, r1
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c12:	4659      	mov	r1, fp
 8004c14:	00cb      	lsls	r3, r1, #3
 8004c16:	4651      	mov	r1, sl
 8004c18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c1c:	4651      	mov	r1, sl
 8004c1e:	00ca      	lsls	r2, r1, #3
 8004c20:	4610      	mov	r0, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	4603      	mov	r3, r0
 8004c26:	4642      	mov	r2, r8
 8004c28:	189b      	adds	r3, r3, r2
 8004c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	460a      	mov	r2, r1
 8004c30:	eb42 0303 	adc.w	r3, r2, r3
 8004c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c40:	667a      	str	r2, [r7, #100]	; 0x64
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c4e:	4649      	mov	r1, r9
 8004c50:	008b      	lsls	r3, r1, #2
 8004c52:	4641      	mov	r1, r8
 8004c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c58:	4641      	mov	r1, r8
 8004c5a:	008a      	lsls	r2, r1, #2
 8004c5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c60:	f7fb fb06 	bl	8000270 <__aeabi_uldivmod>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <UART_SetConfig+0x4e4>)
 8004c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	2164      	movs	r1, #100	; 0x64
 8004c72:	fb01 f303 	mul.w	r3, r1, r3
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	3332      	adds	r3, #50	; 0x32
 8004c7c:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <UART_SetConfig+0x4e4>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	f003 020f 	and.w	r2, r3, #15
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4422      	add	r2, r4
 8004c90:	609a      	str	r2, [r3, #8]
}
 8004c92:	bf00      	nop
 8004c94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9e:	bf00      	nop
 8004ca0:	51eb851f 	.word	0x51eb851f

08004ca4 <__errno>:
 8004ca4:	4b01      	ldr	r3, [pc, #4]	; (8004cac <__errno+0x8>)
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	2000000c 	.word	0x2000000c

08004cb0 <__libc_init_array>:
 8004cb0:	b570      	push	{r4, r5, r6, lr}
 8004cb2:	4d0d      	ldr	r5, [pc, #52]	; (8004ce8 <__libc_init_array+0x38>)
 8004cb4:	4c0d      	ldr	r4, [pc, #52]	; (8004cec <__libc_init_array+0x3c>)
 8004cb6:	1b64      	subs	r4, r4, r5
 8004cb8:	10a4      	asrs	r4, r4, #2
 8004cba:	2600      	movs	r6, #0
 8004cbc:	42a6      	cmp	r6, r4
 8004cbe:	d109      	bne.n	8004cd4 <__libc_init_array+0x24>
 8004cc0:	4d0b      	ldr	r5, [pc, #44]	; (8004cf0 <__libc_init_array+0x40>)
 8004cc2:	4c0c      	ldr	r4, [pc, #48]	; (8004cf4 <__libc_init_array+0x44>)
 8004cc4:	f000 ffae 	bl	8005c24 <_init>
 8004cc8:	1b64      	subs	r4, r4, r5
 8004cca:	10a4      	asrs	r4, r4, #2
 8004ccc:	2600      	movs	r6, #0
 8004cce:	42a6      	cmp	r6, r4
 8004cd0:	d105      	bne.n	8004cde <__libc_init_array+0x2e>
 8004cd2:	bd70      	pop	{r4, r5, r6, pc}
 8004cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd8:	4798      	blx	r3
 8004cda:	3601      	adds	r6, #1
 8004cdc:	e7ee      	b.n	8004cbc <__libc_init_array+0xc>
 8004cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce2:	4798      	blx	r3
 8004ce4:	3601      	adds	r6, #1
 8004ce6:	e7f2      	b.n	8004cce <__libc_init_array+0x1e>
 8004ce8:	08005d28 	.word	0x08005d28
 8004cec:	08005d28 	.word	0x08005d28
 8004cf0:	08005d28 	.word	0x08005d28
 8004cf4:	08005d2c 	.word	0x08005d2c

08004cf8 <memset>:
 8004cf8:	4402      	add	r2, r0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d100      	bne.n	8004d02 <memset+0xa>
 8004d00:	4770      	bx	lr
 8004d02:	f803 1b01 	strb.w	r1, [r3], #1
 8004d06:	e7f9      	b.n	8004cfc <memset+0x4>

08004d08 <iprintf>:
 8004d08:	b40f      	push	{r0, r1, r2, r3}
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <iprintf+0x2c>)
 8004d0c:	b513      	push	{r0, r1, r4, lr}
 8004d0e:	681c      	ldr	r4, [r3, #0]
 8004d10:	b124      	cbz	r4, 8004d1c <iprintf+0x14>
 8004d12:	69a3      	ldr	r3, [r4, #24]
 8004d14:	b913      	cbnz	r3, 8004d1c <iprintf+0x14>
 8004d16:	4620      	mov	r0, r4
 8004d18:	f000 f866 	bl	8004de8 <__sinit>
 8004d1c:	ab05      	add	r3, sp, #20
 8004d1e:	9a04      	ldr	r2, [sp, #16]
 8004d20:	68a1      	ldr	r1, [r4, #8]
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	4620      	mov	r0, r4
 8004d26:	f000 f9bd 	bl	80050a4 <_vfiprintf_r>
 8004d2a:	b002      	add	sp, #8
 8004d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d30:	b004      	add	sp, #16
 8004d32:	4770      	bx	lr
 8004d34:	2000000c 	.word	0x2000000c

08004d38 <std>:
 8004d38:	2300      	movs	r3, #0
 8004d3a:	b510      	push	{r4, lr}
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d46:	6083      	str	r3, [r0, #8]
 8004d48:	8181      	strh	r1, [r0, #12]
 8004d4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d4c:	81c2      	strh	r2, [r0, #14]
 8004d4e:	6183      	str	r3, [r0, #24]
 8004d50:	4619      	mov	r1, r3
 8004d52:	2208      	movs	r2, #8
 8004d54:	305c      	adds	r0, #92	; 0x5c
 8004d56:	f7ff ffcf 	bl	8004cf8 <memset>
 8004d5a:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <std+0x38>)
 8004d5c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <std+0x3c>)
 8004d60:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <std+0x40>)
 8004d64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <std+0x44>)
 8004d68:	6224      	str	r4, [r4, #32]
 8004d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	bf00      	nop
 8004d70:	0800564d 	.word	0x0800564d
 8004d74:	0800566f 	.word	0x0800566f
 8004d78:	080056a7 	.word	0x080056a7
 8004d7c:	080056cb 	.word	0x080056cb

08004d80 <_cleanup_r>:
 8004d80:	4901      	ldr	r1, [pc, #4]	; (8004d88 <_cleanup_r+0x8>)
 8004d82:	f000 b8af 	b.w	8004ee4 <_fwalk_reent>
 8004d86:	bf00      	nop
 8004d88:	080059a5 	.word	0x080059a5

08004d8c <__sfmoreglue>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	2268      	movs	r2, #104	; 0x68
 8004d90:	1e4d      	subs	r5, r1, #1
 8004d92:	4355      	muls	r5, r2
 8004d94:	460e      	mov	r6, r1
 8004d96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d9a:	f000 f8e5 	bl	8004f68 <_malloc_r>
 8004d9e:	4604      	mov	r4, r0
 8004da0:	b140      	cbz	r0, 8004db4 <__sfmoreglue+0x28>
 8004da2:	2100      	movs	r1, #0
 8004da4:	e9c0 1600 	strd	r1, r6, [r0]
 8004da8:	300c      	adds	r0, #12
 8004daa:	60a0      	str	r0, [r4, #8]
 8004dac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004db0:	f7ff ffa2 	bl	8004cf8 <memset>
 8004db4:	4620      	mov	r0, r4
 8004db6:	bd70      	pop	{r4, r5, r6, pc}

08004db8 <__sfp_lock_acquire>:
 8004db8:	4801      	ldr	r0, [pc, #4]	; (8004dc0 <__sfp_lock_acquire+0x8>)
 8004dba:	f000 b8b3 	b.w	8004f24 <__retarget_lock_acquire_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	200002d1 	.word	0x200002d1

08004dc4 <__sfp_lock_release>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	; (8004dcc <__sfp_lock_release+0x8>)
 8004dc6:	f000 b8ae 	b.w	8004f26 <__retarget_lock_release_recursive>
 8004dca:	bf00      	nop
 8004dcc:	200002d1 	.word	0x200002d1

08004dd0 <__sinit_lock_acquire>:
 8004dd0:	4801      	ldr	r0, [pc, #4]	; (8004dd8 <__sinit_lock_acquire+0x8>)
 8004dd2:	f000 b8a7 	b.w	8004f24 <__retarget_lock_acquire_recursive>
 8004dd6:	bf00      	nop
 8004dd8:	200002d2 	.word	0x200002d2

08004ddc <__sinit_lock_release>:
 8004ddc:	4801      	ldr	r0, [pc, #4]	; (8004de4 <__sinit_lock_release+0x8>)
 8004dde:	f000 b8a2 	b.w	8004f26 <__retarget_lock_release_recursive>
 8004de2:	bf00      	nop
 8004de4:	200002d2 	.word	0x200002d2

08004de8 <__sinit>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	4604      	mov	r4, r0
 8004dec:	f7ff fff0 	bl	8004dd0 <__sinit_lock_acquire>
 8004df0:	69a3      	ldr	r3, [r4, #24]
 8004df2:	b11b      	cbz	r3, 8004dfc <__sinit+0x14>
 8004df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df8:	f7ff bff0 	b.w	8004ddc <__sinit_lock_release>
 8004dfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e00:	6523      	str	r3, [r4, #80]	; 0x50
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <__sinit+0x68>)
 8004e04:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <__sinit+0x6c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e0a:	42a3      	cmp	r3, r4
 8004e0c:	bf04      	itt	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	61a3      	streq	r3, [r4, #24]
 8004e12:	4620      	mov	r0, r4
 8004e14:	f000 f820 	bl	8004e58 <__sfp>
 8004e18:	6060      	str	r0, [r4, #4]
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 f81c 	bl	8004e58 <__sfp>
 8004e20:	60a0      	str	r0, [r4, #8]
 8004e22:	4620      	mov	r0, r4
 8004e24:	f000 f818 	bl	8004e58 <__sfp>
 8004e28:	2200      	movs	r2, #0
 8004e2a:	60e0      	str	r0, [r4, #12]
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	6860      	ldr	r0, [r4, #4]
 8004e30:	f7ff ff82 	bl	8004d38 <std>
 8004e34:	68a0      	ldr	r0, [r4, #8]
 8004e36:	2201      	movs	r2, #1
 8004e38:	2109      	movs	r1, #9
 8004e3a:	f7ff ff7d 	bl	8004d38 <std>
 8004e3e:	68e0      	ldr	r0, [r4, #12]
 8004e40:	2202      	movs	r2, #2
 8004e42:	2112      	movs	r1, #18
 8004e44:	f7ff ff78 	bl	8004d38 <std>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	61a3      	str	r3, [r4, #24]
 8004e4c:	e7d2      	b.n	8004df4 <__sinit+0xc>
 8004e4e:	bf00      	nop
 8004e50:	08005c88 	.word	0x08005c88
 8004e54:	08004d81 	.word	0x08004d81

08004e58 <__sfp>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	4607      	mov	r7, r0
 8004e5c:	f7ff ffac 	bl	8004db8 <__sfp_lock_acquire>
 8004e60:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <__sfp+0x84>)
 8004e62:	681e      	ldr	r6, [r3, #0]
 8004e64:	69b3      	ldr	r3, [r6, #24]
 8004e66:	b913      	cbnz	r3, 8004e6e <__sfp+0x16>
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f7ff ffbd 	bl	8004de8 <__sinit>
 8004e6e:	3648      	adds	r6, #72	; 0x48
 8004e70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	d503      	bpl.n	8004e80 <__sfp+0x28>
 8004e78:	6833      	ldr	r3, [r6, #0]
 8004e7a:	b30b      	cbz	r3, 8004ec0 <__sfp+0x68>
 8004e7c:	6836      	ldr	r6, [r6, #0]
 8004e7e:	e7f7      	b.n	8004e70 <__sfp+0x18>
 8004e80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e84:	b9d5      	cbnz	r5, 8004ebc <__sfp+0x64>
 8004e86:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <__sfp+0x88>)
 8004e88:	60e3      	str	r3, [r4, #12]
 8004e8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e8e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e90:	f000 f847 	bl	8004f22 <__retarget_lock_init_recursive>
 8004e94:	f7ff ff96 	bl	8004dc4 <__sfp_lock_release>
 8004e98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ea0:	6025      	str	r5, [r4, #0]
 8004ea2:	61a5      	str	r5, [r4, #24]
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004eac:	f7ff ff24 	bl	8004cf8 <memset>
 8004eb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004eb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004eb8:	4620      	mov	r0, r4
 8004eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ebc:	3468      	adds	r4, #104	; 0x68
 8004ebe:	e7d9      	b.n	8004e74 <__sfp+0x1c>
 8004ec0:	2104      	movs	r1, #4
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	f7ff ff62 	bl	8004d8c <__sfmoreglue>
 8004ec8:	4604      	mov	r4, r0
 8004eca:	6030      	str	r0, [r6, #0]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d1d5      	bne.n	8004e7c <__sfp+0x24>
 8004ed0:	f7ff ff78 	bl	8004dc4 <__sfp_lock_release>
 8004ed4:	230c      	movs	r3, #12
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	e7ee      	b.n	8004eb8 <__sfp+0x60>
 8004eda:	bf00      	nop
 8004edc:	08005c88 	.word	0x08005c88
 8004ee0:	ffff0001 	.word	0xffff0001

08004ee4 <_fwalk_reent>:
 8004ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee8:	4606      	mov	r6, r0
 8004eea:	4688      	mov	r8, r1
 8004eec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ef0:	2700      	movs	r7, #0
 8004ef2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ef6:	f1b9 0901 	subs.w	r9, r9, #1
 8004efa:	d505      	bpl.n	8004f08 <_fwalk_reent+0x24>
 8004efc:	6824      	ldr	r4, [r4, #0]
 8004efe:	2c00      	cmp	r4, #0
 8004f00:	d1f7      	bne.n	8004ef2 <_fwalk_reent+0xe>
 8004f02:	4638      	mov	r0, r7
 8004f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f08:	89ab      	ldrh	r3, [r5, #12]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d907      	bls.n	8004f1e <_fwalk_reent+0x3a>
 8004f0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f12:	3301      	adds	r3, #1
 8004f14:	d003      	beq.n	8004f1e <_fwalk_reent+0x3a>
 8004f16:	4629      	mov	r1, r5
 8004f18:	4630      	mov	r0, r6
 8004f1a:	47c0      	blx	r8
 8004f1c:	4307      	orrs	r7, r0
 8004f1e:	3568      	adds	r5, #104	; 0x68
 8004f20:	e7e9      	b.n	8004ef6 <_fwalk_reent+0x12>

08004f22 <__retarget_lock_init_recursive>:
 8004f22:	4770      	bx	lr

08004f24 <__retarget_lock_acquire_recursive>:
 8004f24:	4770      	bx	lr

08004f26 <__retarget_lock_release_recursive>:
 8004f26:	4770      	bx	lr

08004f28 <sbrk_aligned>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	4e0e      	ldr	r6, [pc, #56]	; (8004f64 <sbrk_aligned+0x3c>)
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	6831      	ldr	r1, [r6, #0]
 8004f30:	4605      	mov	r5, r0
 8004f32:	b911      	cbnz	r1, 8004f3a <sbrk_aligned+0x12>
 8004f34:	f000 fb7a 	bl	800562c <_sbrk_r>
 8004f38:	6030      	str	r0, [r6, #0]
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f000 fb75 	bl	800562c <_sbrk_r>
 8004f42:	1c43      	adds	r3, r0, #1
 8004f44:	d00a      	beq.n	8004f5c <sbrk_aligned+0x34>
 8004f46:	1cc4      	adds	r4, r0, #3
 8004f48:	f024 0403 	bic.w	r4, r4, #3
 8004f4c:	42a0      	cmp	r0, r4
 8004f4e:	d007      	beq.n	8004f60 <sbrk_aligned+0x38>
 8004f50:	1a21      	subs	r1, r4, r0
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 fb6a 	bl	800562c <_sbrk_r>
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d101      	bne.n	8004f60 <sbrk_aligned+0x38>
 8004f5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f60:	4620      	mov	r0, r4
 8004f62:	bd70      	pop	{r4, r5, r6, pc}
 8004f64:	200002d8 	.word	0x200002d8

08004f68 <_malloc_r>:
 8004f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6c:	1ccd      	adds	r5, r1, #3
 8004f6e:	f025 0503 	bic.w	r5, r5, #3
 8004f72:	3508      	adds	r5, #8
 8004f74:	2d0c      	cmp	r5, #12
 8004f76:	bf38      	it	cc
 8004f78:	250c      	movcc	r5, #12
 8004f7a:	2d00      	cmp	r5, #0
 8004f7c:	4607      	mov	r7, r0
 8004f7e:	db01      	blt.n	8004f84 <_malloc_r+0x1c>
 8004f80:	42a9      	cmp	r1, r5
 8004f82:	d905      	bls.n	8004f90 <_malloc_r+0x28>
 8004f84:	230c      	movs	r3, #12
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	2600      	movs	r6, #0
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f90:	4e2e      	ldr	r6, [pc, #184]	; (800504c <_malloc_r+0xe4>)
 8004f92:	f000 fdbb 	bl	8005b0c <__malloc_lock>
 8004f96:	6833      	ldr	r3, [r6, #0]
 8004f98:	461c      	mov	r4, r3
 8004f9a:	bb34      	cbnz	r4, 8004fea <_malloc_r+0x82>
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f7ff ffc2 	bl	8004f28 <sbrk_aligned>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	d14d      	bne.n	8005046 <_malloc_r+0xde>
 8004faa:	6834      	ldr	r4, [r6, #0]
 8004fac:	4626      	mov	r6, r4
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	d140      	bne.n	8005034 <_malloc_r+0xcc>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	eb04 0803 	add.w	r8, r4, r3
 8004fbc:	f000 fb36 	bl	800562c <_sbrk_r>
 8004fc0:	4580      	cmp	r8, r0
 8004fc2:	d13a      	bne.n	800503a <_malloc_r+0xd2>
 8004fc4:	6821      	ldr	r1, [r4, #0]
 8004fc6:	3503      	adds	r5, #3
 8004fc8:	1a6d      	subs	r5, r5, r1
 8004fca:	f025 0503 	bic.w	r5, r5, #3
 8004fce:	3508      	adds	r5, #8
 8004fd0:	2d0c      	cmp	r5, #12
 8004fd2:	bf38      	it	cc
 8004fd4:	250c      	movcc	r5, #12
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f7ff ffa5 	bl	8004f28 <sbrk_aligned>
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d02b      	beq.n	800503a <_malloc_r+0xd2>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	442b      	add	r3, r5
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	e00e      	b.n	8005008 <_malloc_r+0xa0>
 8004fea:	6822      	ldr	r2, [r4, #0]
 8004fec:	1b52      	subs	r2, r2, r5
 8004fee:	d41e      	bmi.n	800502e <_malloc_r+0xc6>
 8004ff0:	2a0b      	cmp	r2, #11
 8004ff2:	d916      	bls.n	8005022 <_malloc_r+0xba>
 8004ff4:	1961      	adds	r1, r4, r5
 8004ff6:	42a3      	cmp	r3, r4
 8004ff8:	6025      	str	r5, [r4, #0]
 8004ffa:	bf18      	it	ne
 8004ffc:	6059      	strne	r1, [r3, #4]
 8004ffe:	6863      	ldr	r3, [r4, #4]
 8005000:	bf08      	it	eq
 8005002:	6031      	streq	r1, [r6, #0]
 8005004:	5162      	str	r2, [r4, r5]
 8005006:	604b      	str	r3, [r1, #4]
 8005008:	4638      	mov	r0, r7
 800500a:	f104 060b 	add.w	r6, r4, #11
 800500e:	f000 fd83 	bl	8005b18 <__malloc_unlock>
 8005012:	f026 0607 	bic.w	r6, r6, #7
 8005016:	1d23      	adds	r3, r4, #4
 8005018:	1af2      	subs	r2, r6, r3
 800501a:	d0b6      	beq.n	8004f8a <_malloc_r+0x22>
 800501c:	1b9b      	subs	r3, r3, r6
 800501e:	50a3      	str	r3, [r4, r2]
 8005020:	e7b3      	b.n	8004f8a <_malloc_r+0x22>
 8005022:	6862      	ldr	r2, [r4, #4]
 8005024:	42a3      	cmp	r3, r4
 8005026:	bf0c      	ite	eq
 8005028:	6032      	streq	r2, [r6, #0]
 800502a:	605a      	strne	r2, [r3, #4]
 800502c:	e7ec      	b.n	8005008 <_malloc_r+0xa0>
 800502e:	4623      	mov	r3, r4
 8005030:	6864      	ldr	r4, [r4, #4]
 8005032:	e7b2      	b.n	8004f9a <_malloc_r+0x32>
 8005034:	4634      	mov	r4, r6
 8005036:	6876      	ldr	r6, [r6, #4]
 8005038:	e7b9      	b.n	8004fae <_malloc_r+0x46>
 800503a:	230c      	movs	r3, #12
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	4638      	mov	r0, r7
 8005040:	f000 fd6a 	bl	8005b18 <__malloc_unlock>
 8005044:	e7a1      	b.n	8004f8a <_malloc_r+0x22>
 8005046:	6025      	str	r5, [r4, #0]
 8005048:	e7de      	b.n	8005008 <_malloc_r+0xa0>
 800504a:	bf00      	nop
 800504c:	200002d4 	.word	0x200002d4

08005050 <__sfputc_r>:
 8005050:	6893      	ldr	r3, [r2, #8]
 8005052:	3b01      	subs	r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	b410      	push	{r4}
 8005058:	6093      	str	r3, [r2, #8]
 800505a:	da08      	bge.n	800506e <__sfputc_r+0x1e>
 800505c:	6994      	ldr	r4, [r2, #24]
 800505e:	42a3      	cmp	r3, r4
 8005060:	db01      	blt.n	8005066 <__sfputc_r+0x16>
 8005062:	290a      	cmp	r1, #10
 8005064:	d103      	bne.n	800506e <__sfputc_r+0x1e>
 8005066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800506a:	f000 bb33 	b.w	80056d4 <__swbuf_r>
 800506e:	6813      	ldr	r3, [r2, #0]
 8005070:	1c58      	adds	r0, r3, #1
 8005072:	6010      	str	r0, [r2, #0]
 8005074:	7019      	strb	r1, [r3, #0]
 8005076:	4608      	mov	r0, r1
 8005078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800507c:	4770      	bx	lr

0800507e <__sfputs_r>:
 800507e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005080:	4606      	mov	r6, r0
 8005082:	460f      	mov	r7, r1
 8005084:	4614      	mov	r4, r2
 8005086:	18d5      	adds	r5, r2, r3
 8005088:	42ac      	cmp	r4, r5
 800508a:	d101      	bne.n	8005090 <__sfputs_r+0x12>
 800508c:	2000      	movs	r0, #0
 800508e:	e007      	b.n	80050a0 <__sfputs_r+0x22>
 8005090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005094:	463a      	mov	r2, r7
 8005096:	4630      	mov	r0, r6
 8005098:	f7ff ffda 	bl	8005050 <__sfputc_r>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d1f3      	bne.n	8005088 <__sfputs_r+0xa>
 80050a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050a4 <_vfiprintf_r>:
 80050a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a8:	460d      	mov	r5, r1
 80050aa:	b09d      	sub	sp, #116	; 0x74
 80050ac:	4614      	mov	r4, r2
 80050ae:	4698      	mov	r8, r3
 80050b0:	4606      	mov	r6, r0
 80050b2:	b118      	cbz	r0, 80050bc <_vfiprintf_r+0x18>
 80050b4:	6983      	ldr	r3, [r0, #24]
 80050b6:	b90b      	cbnz	r3, 80050bc <_vfiprintf_r+0x18>
 80050b8:	f7ff fe96 	bl	8004de8 <__sinit>
 80050bc:	4b89      	ldr	r3, [pc, #548]	; (80052e4 <_vfiprintf_r+0x240>)
 80050be:	429d      	cmp	r5, r3
 80050c0:	d11b      	bne.n	80050fa <_vfiprintf_r+0x56>
 80050c2:	6875      	ldr	r5, [r6, #4]
 80050c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050c6:	07d9      	lsls	r1, r3, #31
 80050c8:	d405      	bmi.n	80050d6 <_vfiprintf_r+0x32>
 80050ca:	89ab      	ldrh	r3, [r5, #12]
 80050cc:	059a      	lsls	r2, r3, #22
 80050ce:	d402      	bmi.n	80050d6 <_vfiprintf_r+0x32>
 80050d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050d2:	f7ff ff27 	bl	8004f24 <__retarget_lock_acquire_recursive>
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	071b      	lsls	r3, r3, #28
 80050da:	d501      	bpl.n	80050e0 <_vfiprintf_r+0x3c>
 80050dc:	692b      	ldr	r3, [r5, #16]
 80050de:	b9eb      	cbnz	r3, 800511c <_vfiprintf_r+0x78>
 80050e0:	4629      	mov	r1, r5
 80050e2:	4630      	mov	r0, r6
 80050e4:	f000 fb5a 	bl	800579c <__swsetup_r>
 80050e8:	b1c0      	cbz	r0, 800511c <_vfiprintf_r+0x78>
 80050ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050ec:	07dc      	lsls	r4, r3, #31
 80050ee:	d50e      	bpl.n	800510e <_vfiprintf_r+0x6a>
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050f4:	b01d      	add	sp, #116	; 0x74
 80050f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fa:	4b7b      	ldr	r3, [pc, #492]	; (80052e8 <_vfiprintf_r+0x244>)
 80050fc:	429d      	cmp	r5, r3
 80050fe:	d101      	bne.n	8005104 <_vfiprintf_r+0x60>
 8005100:	68b5      	ldr	r5, [r6, #8]
 8005102:	e7df      	b.n	80050c4 <_vfiprintf_r+0x20>
 8005104:	4b79      	ldr	r3, [pc, #484]	; (80052ec <_vfiprintf_r+0x248>)
 8005106:	429d      	cmp	r5, r3
 8005108:	bf08      	it	eq
 800510a:	68f5      	ldreq	r5, [r6, #12]
 800510c:	e7da      	b.n	80050c4 <_vfiprintf_r+0x20>
 800510e:	89ab      	ldrh	r3, [r5, #12]
 8005110:	0598      	lsls	r0, r3, #22
 8005112:	d4ed      	bmi.n	80050f0 <_vfiprintf_r+0x4c>
 8005114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005116:	f7ff ff06 	bl	8004f26 <__retarget_lock_release_recursive>
 800511a:	e7e9      	b.n	80050f0 <_vfiprintf_r+0x4c>
 800511c:	2300      	movs	r3, #0
 800511e:	9309      	str	r3, [sp, #36]	; 0x24
 8005120:	2320      	movs	r3, #32
 8005122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005126:	f8cd 800c 	str.w	r8, [sp, #12]
 800512a:	2330      	movs	r3, #48	; 0x30
 800512c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80052f0 <_vfiprintf_r+0x24c>
 8005130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005134:	f04f 0901 	mov.w	r9, #1
 8005138:	4623      	mov	r3, r4
 800513a:	469a      	mov	sl, r3
 800513c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005140:	b10a      	cbz	r2, 8005146 <_vfiprintf_r+0xa2>
 8005142:	2a25      	cmp	r2, #37	; 0x25
 8005144:	d1f9      	bne.n	800513a <_vfiprintf_r+0x96>
 8005146:	ebba 0b04 	subs.w	fp, sl, r4
 800514a:	d00b      	beq.n	8005164 <_vfiprintf_r+0xc0>
 800514c:	465b      	mov	r3, fp
 800514e:	4622      	mov	r2, r4
 8005150:	4629      	mov	r1, r5
 8005152:	4630      	mov	r0, r6
 8005154:	f7ff ff93 	bl	800507e <__sfputs_r>
 8005158:	3001      	adds	r0, #1
 800515a:	f000 80aa 	beq.w	80052b2 <_vfiprintf_r+0x20e>
 800515e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005160:	445a      	add	r2, fp
 8005162:	9209      	str	r2, [sp, #36]	; 0x24
 8005164:	f89a 3000 	ldrb.w	r3, [sl]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 80a2 	beq.w	80052b2 <_vfiprintf_r+0x20e>
 800516e:	2300      	movs	r3, #0
 8005170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005178:	f10a 0a01 	add.w	sl, sl, #1
 800517c:	9304      	str	r3, [sp, #16]
 800517e:	9307      	str	r3, [sp, #28]
 8005180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005184:	931a      	str	r3, [sp, #104]	; 0x68
 8005186:	4654      	mov	r4, sl
 8005188:	2205      	movs	r2, #5
 800518a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800518e:	4858      	ldr	r0, [pc, #352]	; (80052f0 <_vfiprintf_r+0x24c>)
 8005190:	f7fb f81e 	bl	80001d0 <memchr>
 8005194:	9a04      	ldr	r2, [sp, #16]
 8005196:	b9d8      	cbnz	r0, 80051d0 <_vfiprintf_r+0x12c>
 8005198:	06d1      	lsls	r1, r2, #27
 800519a:	bf44      	itt	mi
 800519c:	2320      	movmi	r3, #32
 800519e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051a2:	0713      	lsls	r3, r2, #28
 80051a4:	bf44      	itt	mi
 80051a6:	232b      	movmi	r3, #43	; 0x2b
 80051a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ac:	f89a 3000 	ldrb.w	r3, [sl]
 80051b0:	2b2a      	cmp	r3, #42	; 0x2a
 80051b2:	d015      	beq.n	80051e0 <_vfiprintf_r+0x13c>
 80051b4:	9a07      	ldr	r2, [sp, #28]
 80051b6:	4654      	mov	r4, sl
 80051b8:	2000      	movs	r0, #0
 80051ba:	f04f 0c0a 	mov.w	ip, #10
 80051be:	4621      	mov	r1, r4
 80051c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051c4:	3b30      	subs	r3, #48	; 0x30
 80051c6:	2b09      	cmp	r3, #9
 80051c8:	d94e      	bls.n	8005268 <_vfiprintf_r+0x1c4>
 80051ca:	b1b0      	cbz	r0, 80051fa <_vfiprintf_r+0x156>
 80051cc:	9207      	str	r2, [sp, #28]
 80051ce:	e014      	b.n	80051fa <_vfiprintf_r+0x156>
 80051d0:	eba0 0308 	sub.w	r3, r0, r8
 80051d4:	fa09 f303 	lsl.w	r3, r9, r3
 80051d8:	4313      	orrs	r3, r2
 80051da:	9304      	str	r3, [sp, #16]
 80051dc:	46a2      	mov	sl, r4
 80051de:	e7d2      	b.n	8005186 <_vfiprintf_r+0xe2>
 80051e0:	9b03      	ldr	r3, [sp, #12]
 80051e2:	1d19      	adds	r1, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	9103      	str	r1, [sp, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bfbb      	ittet	lt
 80051ec:	425b      	neglt	r3, r3
 80051ee:	f042 0202 	orrlt.w	r2, r2, #2
 80051f2:	9307      	strge	r3, [sp, #28]
 80051f4:	9307      	strlt	r3, [sp, #28]
 80051f6:	bfb8      	it	lt
 80051f8:	9204      	strlt	r2, [sp, #16]
 80051fa:	7823      	ldrb	r3, [r4, #0]
 80051fc:	2b2e      	cmp	r3, #46	; 0x2e
 80051fe:	d10c      	bne.n	800521a <_vfiprintf_r+0x176>
 8005200:	7863      	ldrb	r3, [r4, #1]
 8005202:	2b2a      	cmp	r3, #42	; 0x2a
 8005204:	d135      	bne.n	8005272 <_vfiprintf_r+0x1ce>
 8005206:	9b03      	ldr	r3, [sp, #12]
 8005208:	1d1a      	adds	r2, r3, #4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	9203      	str	r2, [sp, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	bfb8      	it	lt
 8005212:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005216:	3402      	adds	r4, #2
 8005218:	9305      	str	r3, [sp, #20]
 800521a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005300 <_vfiprintf_r+0x25c>
 800521e:	7821      	ldrb	r1, [r4, #0]
 8005220:	2203      	movs	r2, #3
 8005222:	4650      	mov	r0, sl
 8005224:	f7fa ffd4 	bl	80001d0 <memchr>
 8005228:	b140      	cbz	r0, 800523c <_vfiprintf_r+0x198>
 800522a:	2340      	movs	r3, #64	; 0x40
 800522c:	eba0 000a 	sub.w	r0, r0, sl
 8005230:	fa03 f000 	lsl.w	r0, r3, r0
 8005234:	9b04      	ldr	r3, [sp, #16]
 8005236:	4303      	orrs	r3, r0
 8005238:	3401      	adds	r4, #1
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005240:	482c      	ldr	r0, [pc, #176]	; (80052f4 <_vfiprintf_r+0x250>)
 8005242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005246:	2206      	movs	r2, #6
 8005248:	f7fa ffc2 	bl	80001d0 <memchr>
 800524c:	2800      	cmp	r0, #0
 800524e:	d03f      	beq.n	80052d0 <_vfiprintf_r+0x22c>
 8005250:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <_vfiprintf_r+0x254>)
 8005252:	bb1b      	cbnz	r3, 800529c <_vfiprintf_r+0x1f8>
 8005254:	9b03      	ldr	r3, [sp, #12]
 8005256:	3307      	adds	r3, #7
 8005258:	f023 0307 	bic.w	r3, r3, #7
 800525c:	3308      	adds	r3, #8
 800525e:	9303      	str	r3, [sp, #12]
 8005260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005262:	443b      	add	r3, r7
 8005264:	9309      	str	r3, [sp, #36]	; 0x24
 8005266:	e767      	b.n	8005138 <_vfiprintf_r+0x94>
 8005268:	fb0c 3202 	mla	r2, ip, r2, r3
 800526c:	460c      	mov	r4, r1
 800526e:	2001      	movs	r0, #1
 8005270:	e7a5      	b.n	80051be <_vfiprintf_r+0x11a>
 8005272:	2300      	movs	r3, #0
 8005274:	3401      	adds	r4, #1
 8005276:	9305      	str	r3, [sp, #20]
 8005278:	4619      	mov	r1, r3
 800527a:	f04f 0c0a 	mov.w	ip, #10
 800527e:	4620      	mov	r0, r4
 8005280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005284:	3a30      	subs	r2, #48	; 0x30
 8005286:	2a09      	cmp	r2, #9
 8005288:	d903      	bls.n	8005292 <_vfiprintf_r+0x1ee>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0c5      	beq.n	800521a <_vfiprintf_r+0x176>
 800528e:	9105      	str	r1, [sp, #20]
 8005290:	e7c3      	b.n	800521a <_vfiprintf_r+0x176>
 8005292:	fb0c 2101 	mla	r1, ip, r1, r2
 8005296:	4604      	mov	r4, r0
 8005298:	2301      	movs	r3, #1
 800529a:	e7f0      	b.n	800527e <_vfiprintf_r+0x1da>
 800529c:	ab03      	add	r3, sp, #12
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	462a      	mov	r2, r5
 80052a2:	4b16      	ldr	r3, [pc, #88]	; (80052fc <_vfiprintf_r+0x258>)
 80052a4:	a904      	add	r1, sp, #16
 80052a6:	4630      	mov	r0, r6
 80052a8:	f3af 8000 	nop.w
 80052ac:	4607      	mov	r7, r0
 80052ae:	1c78      	adds	r0, r7, #1
 80052b0:	d1d6      	bne.n	8005260 <_vfiprintf_r+0x1bc>
 80052b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052b4:	07d9      	lsls	r1, r3, #31
 80052b6:	d405      	bmi.n	80052c4 <_vfiprintf_r+0x220>
 80052b8:	89ab      	ldrh	r3, [r5, #12]
 80052ba:	059a      	lsls	r2, r3, #22
 80052bc:	d402      	bmi.n	80052c4 <_vfiprintf_r+0x220>
 80052be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052c0:	f7ff fe31 	bl	8004f26 <__retarget_lock_release_recursive>
 80052c4:	89ab      	ldrh	r3, [r5, #12]
 80052c6:	065b      	lsls	r3, r3, #25
 80052c8:	f53f af12 	bmi.w	80050f0 <_vfiprintf_r+0x4c>
 80052cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052ce:	e711      	b.n	80050f4 <_vfiprintf_r+0x50>
 80052d0:	ab03      	add	r3, sp, #12
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	462a      	mov	r2, r5
 80052d6:	4b09      	ldr	r3, [pc, #36]	; (80052fc <_vfiprintf_r+0x258>)
 80052d8:	a904      	add	r1, sp, #16
 80052da:	4630      	mov	r0, r6
 80052dc:	f000 f880 	bl	80053e0 <_printf_i>
 80052e0:	e7e4      	b.n	80052ac <_vfiprintf_r+0x208>
 80052e2:	bf00      	nop
 80052e4:	08005cac 	.word	0x08005cac
 80052e8:	08005ccc 	.word	0x08005ccc
 80052ec:	08005c8c 	.word	0x08005c8c
 80052f0:	08005cec 	.word	0x08005cec
 80052f4:	08005cf6 	.word	0x08005cf6
 80052f8:	00000000 	.word	0x00000000
 80052fc:	0800507f 	.word	0x0800507f
 8005300:	08005cf2 	.word	0x08005cf2

08005304 <_printf_common>:
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	4616      	mov	r6, r2
 800530a:	4699      	mov	r9, r3
 800530c:	688a      	ldr	r2, [r1, #8]
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005314:	4293      	cmp	r3, r2
 8005316:	bfb8      	it	lt
 8005318:	4613      	movlt	r3, r2
 800531a:	6033      	str	r3, [r6, #0]
 800531c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005320:	4607      	mov	r7, r0
 8005322:	460c      	mov	r4, r1
 8005324:	b10a      	cbz	r2, 800532a <_printf_common+0x26>
 8005326:	3301      	adds	r3, #1
 8005328:	6033      	str	r3, [r6, #0]
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	0699      	lsls	r1, r3, #26
 800532e:	bf42      	ittt	mi
 8005330:	6833      	ldrmi	r3, [r6, #0]
 8005332:	3302      	addmi	r3, #2
 8005334:	6033      	strmi	r3, [r6, #0]
 8005336:	6825      	ldr	r5, [r4, #0]
 8005338:	f015 0506 	ands.w	r5, r5, #6
 800533c:	d106      	bne.n	800534c <_printf_common+0x48>
 800533e:	f104 0a19 	add.w	sl, r4, #25
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	6832      	ldr	r2, [r6, #0]
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	42ab      	cmp	r3, r5
 800534a:	dc26      	bgt.n	800539a <_printf_common+0x96>
 800534c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005350:	1e13      	subs	r3, r2, #0
 8005352:	6822      	ldr	r2, [r4, #0]
 8005354:	bf18      	it	ne
 8005356:	2301      	movne	r3, #1
 8005358:	0692      	lsls	r2, r2, #26
 800535a:	d42b      	bmi.n	80053b4 <_printf_common+0xb0>
 800535c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005360:	4649      	mov	r1, r9
 8005362:	4638      	mov	r0, r7
 8005364:	47c0      	blx	r8
 8005366:	3001      	adds	r0, #1
 8005368:	d01e      	beq.n	80053a8 <_printf_common+0xa4>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	68e5      	ldr	r5, [r4, #12]
 800536e:	6832      	ldr	r2, [r6, #0]
 8005370:	f003 0306 	and.w	r3, r3, #6
 8005374:	2b04      	cmp	r3, #4
 8005376:	bf08      	it	eq
 8005378:	1aad      	subeq	r5, r5, r2
 800537a:	68a3      	ldr	r3, [r4, #8]
 800537c:	6922      	ldr	r2, [r4, #16]
 800537e:	bf0c      	ite	eq
 8005380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005384:	2500      	movne	r5, #0
 8005386:	4293      	cmp	r3, r2
 8005388:	bfc4      	itt	gt
 800538a:	1a9b      	subgt	r3, r3, r2
 800538c:	18ed      	addgt	r5, r5, r3
 800538e:	2600      	movs	r6, #0
 8005390:	341a      	adds	r4, #26
 8005392:	42b5      	cmp	r5, r6
 8005394:	d11a      	bne.n	80053cc <_printf_common+0xc8>
 8005396:	2000      	movs	r0, #0
 8005398:	e008      	b.n	80053ac <_printf_common+0xa8>
 800539a:	2301      	movs	r3, #1
 800539c:	4652      	mov	r2, sl
 800539e:	4649      	mov	r1, r9
 80053a0:	4638      	mov	r0, r7
 80053a2:	47c0      	blx	r8
 80053a4:	3001      	adds	r0, #1
 80053a6:	d103      	bne.n	80053b0 <_printf_common+0xac>
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b0:	3501      	adds	r5, #1
 80053b2:	e7c6      	b.n	8005342 <_printf_common+0x3e>
 80053b4:	18e1      	adds	r1, r4, r3
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	2030      	movs	r0, #48	; 0x30
 80053ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053be:	4422      	add	r2, r4
 80053c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053c8:	3302      	adds	r3, #2
 80053ca:	e7c7      	b.n	800535c <_printf_common+0x58>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4622      	mov	r2, r4
 80053d0:	4649      	mov	r1, r9
 80053d2:	4638      	mov	r0, r7
 80053d4:	47c0      	blx	r8
 80053d6:	3001      	adds	r0, #1
 80053d8:	d0e6      	beq.n	80053a8 <_printf_common+0xa4>
 80053da:	3601      	adds	r6, #1
 80053dc:	e7d9      	b.n	8005392 <_printf_common+0x8e>
	...

080053e0 <_printf_i>:
 80053e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	7e0f      	ldrb	r7, [r1, #24]
 80053e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053e8:	2f78      	cmp	r7, #120	; 0x78
 80053ea:	4691      	mov	r9, r2
 80053ec:	4680      	mov	r8, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	469a      	mov	sl, r3
 80053f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053f6:	d807      	bhi.n	8005408 <_printf_i+0x28>
 80053f8:	2f62      	cmp	r7, #98	; 0x62
 80053fa:	d80a      	bhi.n	8005412 <_printf_i+0x32>
 80053fc:	2f00      	cmp	r7, #0
 80053fe:	f000 80d8 	beq.w	80055b2 <_printf_i+0x1d2>
 8005402:	2f58      	cmp	r7, #88	; 0x58
 8005404:	f000 80a3 	beq.w	800554e <_printf_i+0x16e>
 8005408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800540c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005410:	e03a      	b.n	8005488 <_printf_i+0xa8>
 8005412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005416:	2b15      	cmp	r3, #21
 8005418:	d8f6      	bhi.n	8005408 <_printf_i+0x28>
 800541a:	a101      	add	r1, pc, #4	; (adr r1, 8005420 <_printf_i+0x40>)
 800541c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005420:	08005479 	.word	0x08005479
 8005424:	0800548d 	.word	0x0800548d
 8005428:	08005409 	.word	0x08005409
 800542c:	08005409 	.word	0x08005409
 8005430:	08005409 	.word	0x08005409
 8005434:	08005409 	.word	0x08005409
 8005438:	0800548d 	.word	0x0800548d
 800543c:	08005409 	.word	0x08005409
 8005440:	08005409 	.word	0x08005409
 8005444:	08005409 	.word	0x08005409
 8005448:	08005409 	.word	0x08005409
 800544c:	08005599 	.word	0x08005599
 8005450:	080054bd 	.word	0x080054bd
 8005454:	0800557b 	.word	0x0800557b
 8005458:	08005409 	.word	0x08005409
 800545c:	08005409 	.word	0x08005409
 8005460:	080055bb 	.word	0x080055bb
 8005464:	08005409 	.word	0x08005409
 8005468:	080054bd 	.word	0x080054bd
 800546c:	08005409 	.word	0x08005409
 8005470:	08005409 	.word	0x08005409
 8005474:	08005583 	.word	0x08005583
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	1d1a      	adds	r2, r3, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	602a      	str	r2, [r5, #0]
 8005480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005488:	2301      	movs	r3, #1
 800548a:	e0a3      	b.n	80055d4 <_printf_i+0x1f4>
 800548c:	6820      	ldr	r0, [r4, #0]
 800548e:	6829      	ldr	r1, [r5, #0]
 8005490:	0606      	lsls	r6, r0, #24
 8005492:	f101 0304 	add.w	r3, r1, #4
 8005496:	d50a      	bpl.n	80054ae <_printf_i+0xce>
 8005498:	680e      	ldr	r6, [r1, #0]
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	2e00      	cmp	r6, #0
 800549e:	da03      	bge.n	80054a8 <_printf_i+0xc8>
 80054a0:	232d      	movs	r3, #45	; 0x2d
 80054a2:	4276      	negs	r6, r6
 80054a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a8:	485e      	ldr	r0, [pc, #376]	; (8005624 <_printf_i+0x244>)
 80054aa:	230a      	movs	r3, #10
 80054ac:	e019      	b.n	80054e2 <_printf_i+0x102>
 80054ae:	680e      	ldr	r6, [r1, #0]
 80054b0:	602b      	str	r3, [r5, #0]
 80054b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054b6:	bf18      	it	ne
 80054b8:	b236      	sxthne	r6, r6
 80054ba:	e7ef      	b.n	800549c <_printf_i+0xbc>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	6820      	ldr	r0, [r4, #0]
 80054c0:	1d19      	adds	r1, r3, #4
 80054c2:	6029      	str	r1, [r5, #0]
 80054c4:	0601      	lsls	r1, r0, #24
 80054c6:	d501      	bpl.n	80054cc <_printf_i+0xec>
 80054c8:	681e      	ldr	r6, [r3, #0]
 80054ca:	e002      	b.n	80054d2 <_printf_i+0xf2>
 80054cc:	0646      	lsls	r6, r0, #25
 80054ce:	d5fb      	bpl.n	80054c8 <_printf_i+0xe8>
 80054d0:	881e      	ldrh	r6, [r3, #0]
 80054d2:	4854      	ldr	r0, [pc, #336]	; (8005624 <_printf_i+0x244>)
 80054d4:	2f6f      	cmp	r7, #111	; 0x6f
 80054d6:	bf0c      	ite	eq
 80054d8:	2308      	moveq	r3, #8
 80054da:	230a      	movne	r3, #10
 80054dc:	2100      	movs	r1, #0
 80054de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054e2:	6865      	ldr	r5, [r4, #4]
 80054e4:	60a5      	str	r5, [r4, #8]
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	bfa2      	ittt	ge
 80054ea:	6821      	ldrge	r1, [r4, #0]
 80054ec:	f021 0104 	bicge.w	r1, r1, #4
 80054f0:	6021      	strge	r1, [r4, #0]
 80054f2:	b90e      	cbnz	r6, 80054f8 <_printf_i+0x118>
 80054f4:	2d00      	cmp	r5, #0
 80054f6:	d04d      	beq.n	8005594 <_printf_i+0x1b4>
 80054f8:	4615      	mov	r5, r2
 80054fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80054fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005502:	5dc7      	ldrb	r7, [r0, r7]
 8005504:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005508:	4637      	mov	r7, r6
 800550a:	42bb      	cmp	r3, r7
 800550c:	460e      	mov	r6, r1
 800550e:	d9f4      	bls.n	80054fa <_printf_i+0x11a>
 8005510:	2b08      	cmp	r3, #8
 8005512:	d10b      	bne.n	800552c <_printf_i+0x14c>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	07de      	lsls	r6, r3, #31
 8005518:	d508      	bpl.n	800552c <_printf_i+0x14c>
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	6861      	ldr	r1, [r4, #4]
 800551e:	4299      	cmp	r1, r3
 8005520:	bfde      	ittt	le
 8005522:	2330      	movle	r3, #48	; 0x30
 8005524:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005528:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800552c:	1b52      	subs	r2, r2, r5
 800552e:	6122      	str	r2, [r4, #16]
 8005530:	f8cd a000 	str.w	sl, [sp]
 8005534:	464b      	mov	r3, r9
 8005536:	aa03      	add	r2, sp, #12
 8005538:	4621      	mov	r1, r4
 800553a:	4640      	mov	r0, r8
 800553c:	f7ff fee2 	bl	8005304 <_printf_common>
 8005540:	3001      	adds	r0, #1
 8005542:	d14c      	bne.n	80055de <_printf_i+0x1fe>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005548:	b004      	add	sp, #16
 800554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554e:	4835      	ldr	r0, [pc, #212]	; (8005624 <_printf_i+0x244>)
 8005550:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005554:	6829      	ldr	r1, [r5, #0]
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	f851 6b04 	ldr.w	r6, [r1], #4
 800555c:	6029      	str	r1, [r5, #0]
 800555e:	061d      	lsls	r5, r3, #24
 8005560:	d514      	bpl.n	800558c <_printf_i+0x1ac>
 8005562:	07df      	lsls	r7, r3, #31
 8005564:	bf44      	itt	mi
 8005566:	f043 0320 	orrmi.w	r3, r3, #32
 800556a:	6023      	strmi	r3, [r4, #0]
 800556c:	b91e      	cbnz	r6, 8005576 <_printf_i+0x196>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	f023 0320 	bic.w	r3, r3, #32
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	2310      	movs	r3, #16
 8005578:	e7b0      	b.n	80054dc <_printf_i+0xfc>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	f043 0320 	orr.w	r3, r3, #32
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	2378      	movs	r3, #120	; 0x78
 8005584:	4828      	ldr	r0, [pc, #160]	; (8005628 <_printf_i+0x248>)
 8005586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800558a:	e7e3      	b.n	8005554 <_printf_i+0x174>
 800558c:	0659      	lsls	r1, r3, #25
 800558e:	bf48      	it	mi
 8005590:	b2b6      	uxthmi	r6, r6
 8005592:	e7e6      	b.n	8005562 <_printf_i+0x182>
 8005594:	4615      	mov	r5, r2
 8005596:	e7bb      	b.n	8005510 <_printf_i+0x130>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	6826      	ldr	r6, [r4, #0]
 800559c:	6961      	ldr	r1, [r4, #20]
 800559e:	1d18      	adds	r0, r3, #4
 80055a0:	6028      	str	r0, [r5, #0]
 80055a2:	0635      	lsls	r5, r6, #24
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	d501      	bpl.n	80055ac <_printf_i+0x1cc>
 80055a8:	6019      	str	r1, [r3, #0]
 80055aa:	e002      	b.n	80055b2 <_printf_i+0x1d2>
 80055ac:	0670      	lsls	r0, r6, #25
 80055ae:	d5fb      	bpl.n	80055a8 <_printf_i+0x1c8>
 80055b0:	8019      	strh	r1, [r3, #0]
 80055b2:	2300      	movs	r3, #0
 80055b4:	6123      	str	r3, [r4, #16]
 80055b6:	4615      	mov	r5, r2
 80055b8:	e7ba      	b.n	8005530 <_printf_i+0x150>
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	1d1a      	adds	r2, r3, #4
 80055be:	602a      	str	r2, [r5, #0]
 80055c0:	681d      	ldr	r5, [r3, #0]
 80055c2:	6862      	ldr	r2, [r4, #4]
 80055c4:	2100      	movs	r1, #0
 80055c6:	4628      	mov	r0, r5
 80055c8:	f7fa fe02 	bl	80001d0 <memchr>
 80055cc:	b108      	cbz	r0, 80055d2 <_printf_i+0x1f2>
 80055ce:	1b40      	subs	r0, r0, r5
 80055d0:	6060      	str	r0, [r4, #4]
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	6123      	str	r3, [r4, #16]
 80055d6:	2300      	movs	r3, #0
 80055d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055dc:	e7a8      	b.n	8005530 <_printf_i+0x150>
 80055de:	6923      	ldr	r3, [r4, #16]
 80055e0:	462a      	mov	r2, r5
 80055e2:	4649      	mov	r1, r9
 80055e4:	4640      	mov	r0, r8
 80055e6:	47d0      	blx	sl
 80055e8:	3001      	adds	r0, #1
 80055ea:	d0ab      	beq.n	8005544 <_printf_i+0x164>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	079b      	lsls	r3, r3, #30
 80055f0:	d413      	bmi.n	800561a <_printf_i+0x23a>
 80055f2:	68e0      	ldr	r0, [r4, #12]
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	4298      	cmp	r0, r3
 80055f8:	bfb8      	it	lt
 80055fa:	4618      	movlt	r0, r3
 80055fc:	e7a4      	b.n	8005548 <_printf_i+0x168>
 80055fe:	2301      	movs	r3, #1
 8005600:	4632      	mov	r2, r6
 8005602:	4649      	mov	r1, r9
 8005604:	4640      	mov	r0, r8
 8005606:	47d0      	blx	sl
 8005608:	3001      	adds	r0, #1
 800560a:	d09b      	beq.n	8005544 <_printf_i+0x164>
 800560c:	3501      	adds	r5, #1
 800560e:	68e3      	ldr	r3, [r4, #12]
 8005610:	9903      	ldr	r1, [sp, #12]
 8005612:	1a5b      	subs	r3, r3, r1
 8005614:	42ab      	cmp	r3, r5
 8005616:	dcf2      	bgt.n	80055fe <_printf_i+0x21e>
 8005618:	e7eb      	b.n	80055f2 <_printf_i+0x212>
 800561a:	2500      	movs	r5, #0
 800561c:	f104 0619 	add.w	r6, r4, #25
 8005620:	e7f5      	b.n	800560e <_printf_i+0x22e>
 8005622:	bf00      	nop
 8005624:	08005cfd 	.word	0x08005cfd
 8005628:	08005d0e 	.word	0x08005d0e

0800562c <_sbrk_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4d06      	ldr	r5, [pc, #24]	; (8005648 <_sbrk_r+0x1c>)
 8005630:	2300      	movs	r3, #0
 8005632:	4604      	mov	r4, r0
 8005634:	4608      	mov	r0, r1
 8005636:	602b      	str	r3, [r5, #0]
 8005638:	f7fb ff2c 	bl	8001494 <_sbrk>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d102      	bne.n	8005646 <_sbrk_r+0x1a>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	b103      	cbz	r3, 8005646 <_sbrk_r+0x1a>
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	bd38      	pop	{r3, r4, r5, pc}
 8005648:	200002dc 	.word	0x200002dc

0800564c <__sread>:
 800564c:	b510      	push	{r4, lr}
 800564e:	460c      	mov	r4, r1
 8005650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005654:	f000 fab2 	bl	8005bbc <_read_r>
 8005658:	2800      	cmp	r0, #0
 800565a:	bfab      	itete	ge
 800565c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800565e:	89a3      	ldrhlt	r3, [r4, #12]
 8005660:	181b      	addge	r3, r3, r0
 8005662:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005666:	bfac      	ite	ge
 8005668:	6563      	strge	r3, [r4, #84]	; 0x54
 800566a:	81a3      	strhlt	r3, [r4, #12]
 800566c:	bd10      	pop	{r4, pc}

0800566e <__swrite>:
 800566e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005672:	461f      	mov	r7, r3
 8005674:	898b      	ldrh	r3, [r1, #12]
 8005676:	05db      	lsls	r3, r3, #23
 8005678:	4605      	mov	r5, r0
 800567a:	460c      	mov	r4, r1
 800567c:	4616      	mov	r6, r2
 800567e:	d505      	bpl.n	800568c <__swrite+0x1e>
 8005680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005684:	2302      	movs	r3, #2
 8005686:	2200      	movs	r2, #0
 8005688:	f000 f9c8 	bl	8005a1c <_lseek_r>
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005696:	81a3      	strh	r3, [r4, #12]
 8005698:	4632      	mov	r2, r6
 800569a:	463b      	mov	r3, r7
 800569c:	4628      	mov	r0, r5
 800569e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056a2:	f000 b869 	b.w	8005778 <_write_r>

080056a6 <__sseek>:
 80056a6:	b510      	push	{r4, lr}
 80056a8:	460c      	mov	r4, r1
 80056aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ae:	f000 f9b5 	bl	8005a1c <_lseek_r>
 80056b2:	1c43      	adds	r3, r0, #1
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	bf15      	itete	ne
 80056b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80056ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056c2:	81a3      	strheq	r3, [r4, #12]
 80056c4:	bf18      	it	ne
 80056c6:	81a3      	strhne	r3, [r4, #12]
 80056c8:	bd10      	pop	{r4, pc}

080056ca <__sclose>:
 80056ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ce:	f000 b8d3 	b.w	8005878 <_close_r>
	...

080056d4 <__swbuf_r>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	460e      	mov	r6, r1
 80056d8:	4614      	mov	r4, r2
 80056da:	4605      	mov	r5, r0
 80056dc:	b118      	cbz	r0, 80056e6 <__swbuf_r+0x12>
 80056de:	6983      	ldr	r3, [r0, #24]
 80056e0:	b90b      	cbnz	r3, 80056e6 <__swbuf_r+0x12>
 80056e2:	f7ff fb81 	bl	8004de8 <__sinit>
 80056e6:	4b21      	ldr	r3, [pc, #132]	; (800576c <__swbuf_r+0x98>)
 80056e8:	429c      	cmp	r4, r3
 80056ea:	d12b      	bne.n	8005744 <__swbuf_r+0x70>
 80056ec:	686c      	ldr	r4, [r5, #4]
 80056ee:	69a3      	ldr	r3, [r4, #24]
 80056f0:	60a3      	str	r3, [r4, #8]
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	071a      	lsls	r2, r3, #28
 80056f6:	d52f      	bpl.n	8005758 <__swbuf_r+0x84>
 80056f8:	6923      	ldr	r3, [r4, #16]
 80056fa:	b36b      	cbz	r3, 8005758 <__swbuf_r+0x84>
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	6820      	ldr	r0, [r4, #0]
 8005700:	1ac0      	subs	r0, r0, r3
 8005702:	6963      	ldr	r3, [r4, #20]
 8005704:	b2f6      	uxtb	r6, r6
 8005706:	4283      	cmp	r3, r0
 8005708:	4637      	mov	r7, r6
 800570a:	dc04      	bgt.n	8005716 <__swbuf_r+0x42>
 800570c:	4621      	mov	r1, r4
 800570e:	4628      	mov	r0, r5
 8005710:	f000 f948 	bl	80059a4 <_fflush_r>
 8005714:	bb30      	cbnz	r0, 8005764 <__swbuf_r+0x90>
 8005716:	68a3      	ldr	r3, [r4, #8]
 8005718:	3b01      	subs	r3, #1
 800571a:	60a3      	str	r3, [r4, #8]
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	6022      	str	r2, [r4, #0]
 8005722:	701e      	strb	r6, [r3, #0]
 8005724:	6963      	ldr	r3, [r4, #20]
 8005726:	3001      	adds	r0, #1
 8005728:	4283      	cmp	r3, r0
 800572a:	d004      	beq.n	8005736 <__swbuf_r+0x62>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	07db      	lsls	r3, r3, #31
 8005730:	d506      	bpl.n	8005740 <__swbuf_r+0x6c>
 8005732:	2e0a      	cmp	r6, #10
 8005734:	d104      	bne.n	8005740 <__swbuf_r+0x6c>
 8005736:	4621      	mov	r1, r4
 8005738:	4628      	mov	r0, r5
 800573a:	f000 f933 	bl	80059a4 <_fflush_r>
 800573e:	b988      	cbnz	r0, 8005764 <__swbuf_r+0x90>
 8005740:	4638      	mov	r0, r7
 8005742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005744:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <__swbuf_r+0x9c>)
 8005746:	429c      	cmp	r4, r3
 8005748:	d101      	bne.n	800574e <__swbuf_r+0x7a>
 800574a:	68ac      	ldr	r4, [r5, #8]
 800574c:	e7cf      	b.n	80056ee <__swbuf_r+0x1a>
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <__swbuf_r+0xa0>)
 8005750:	429c      	cmp	r4, r3
 8005752:	bf08      	it	eq
 8005754:	68ec      	ldreq	r4, [r5, #12]
 8005756:	e7ca      	b.n	80056ee <__swbuf_r+0x1a>
 8005758:	4621      	mov	r1, r4
 800575a:	4628      	mov	r0, r5
 800575c:	f000 f81e 	bl	800579c <__swsetup_r>
 8005760:	2800      	cmp	r0, #0
 8005762:	d0cb      	beq.n	80056fc <__swbuf_r+0x28>
 8005764:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005768:	e7ea      	b.n	8005740 <__swbuf_r+0x6c>
 800576a:	bf00      	nop
 800576c:	08005cac 	.word	0x08005cac
 8005770:	08005ccc 	.word	0x08005ccc
 8005774:	08005c8c 	.word	0x08005c8c

08005778 <_write_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4d07      	ldr	r5, [pc, #28]	; (8005798 <_write_r+0x20>)
 800577c:	4604      	mov	r4, r0
 800577e:	4608      	mov	r0, r1
 8005780:	4611      	mov	r1, r2
 8005782:	2200      	movs	r2, #0
 8005784:	602a      	str	r2, [r5, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	f7fa fef4 	bl	8000574 <_write>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_write_r+0x1e>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b103      	cbz	r3, 8005796 <_write_r+0x1e>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	200002dc 	.word	0x200002dc

0800579c <__swsetup_r>:
 800579c:	4b32      	ldr	r3, [pc, #200]	; (8005868 <__swsetup_r+0xcc>)
 800579e:	b570      	push	{r4, r5, r6, lr}
 80057a0:	681d      	ldr	r5, [r3, #0]
 80057a2:	4606      	mov	r6, r0
 80057a4:	460c      	mov	r4, r1
 80057a6:	b125      	cbz	r5, 80057b2 <__swsetup_r+0x16>
 80057a8:	69ab      	ldr	r3, [r5, #24]
 80057aa:	b913      	cbnz	r3, 80057b2 <__swsetup_r+0x16>
 80057ac:	4628      	mov	r0, r5
 80057ae:	f7ff fb1b 	bl	8004de8 <__sinit>
 80057b2:	4b2e      	ldr	r3, [pc, #184]	; (800586c <__swsetup_r+0xd0>)
 80057b4:	429c      	cmp	r4, r3
 80057b6:	d10f      	bne.n	80057d8 <__swsetup_r+0x3c>
 80057b8:	686c      	ldr	r4, [r5, #4]
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057c0:	0719      	lsls	r1, r3, #28
 80057c2:	d42c      	bmi.n	800581e <__swsetup_r+0x82>
 80057c4:	06dd      	lsls	r5, r3, #27
 80057c6:	d411      	bmi.n	80057ec <__swsetup_r+0x50>
 80057c8:	2309      	movs	r3, #9
 80057ca:	6033      	str	r3, [r6, #0]
 80057cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057d0:	81a3      	strh	r3, [r4, #12]
 80057d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d6:	e03e      	b.n	8005856 <__swsetup_r+0xba>
 80057d8:	4b25      	ldr	r3, [pc, #148]	; (8005870 <__swsetup_r+0xd4>)
 80057da:	429c      	cmp	r4, r3
 80057dc:	d101      	bne.n	80057e2 <__swsetup_r+0x46>
 80057de:	68ac      	ldr	r4, [r5, #8]
 80057e0:	e7eb      	b.n	80057ba <__swsetup_r+0x1e>
 80057e2:	4b24      	ldr	r3, [pc, #144]	; (8005874 <__swsetup_r+0xd8>)
 80057e4:	429c      	cmp	r4, r3
 80057e6:	bf08      	it	eq
 80057e8:	68ec      	ldreq	r4, [r5, #12]
 80057ea:	e7e6      	b.n	80057ba <__swsetup_r+0x1e>
 80057ec:	0758      	lsls	r0, r3, #29
 80057ee:	d512      	bpl.n	8005816 <__swsetup_r+0x7a>
 80057f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057f2:	b141      	cbz	r1, 8005806 <__swsetup_r+0x6a>
 80057f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057f8:	4299      	cmp	r1, r3
 80057fa:	d002      	beq.n	8005802 <__swsetup_r+0x66>
 80057fc:	4630      	mov	r0, r6
 80057fe:	f000 f991 	bl	8005b24 <_free_r>
 8005802:	2300      	movs	r3, #0
 8005804:	6363      	str	r3, [r4, #52]	; 0x34
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800580c:	81a3      	strh	r3, [r4, #12]
 800580e:	2300      	movs	r3, #0
 8005810:	6063      	str	r3, [r4, #4]
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	f043 0308 	orr.w	r3, r3, #8
 800581c:	81a3      	strh	r3, [r4, #12]
 800581e:	6923      	ldr	r3, [r4, #16]
 8005820:	b94b      	cbnz	r3, 8005836 <__swsetup_r+0x9a>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800582c:	d003      	beq.n	8005836 <__swsetup_r+0x9a>
 800582e:	4621      	mov	r1, r4
 8005830:	4630      	mov	r0, r6
 8005832:	f000 f92b 	bl	8005a8c <__smakebuf_r>
 8005836:	89a0      	ldrh	r0, [r4, #12]
 8005838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800583c:	f010 0301 	ands.w	r3, r0, #1
 8005840:	d00a      	beq.n	8005858 <__swsetup_r+0xbc>
 8005842:	2300      	movs	r3, #0
 8005844:	60a3      	str	r3, [r4, #8]
 8005846:	6963      	ldr	r3, [r4, #20]
 8005848:	425b      	negs	r3, r3
 800584a:	61a3      	str	r3, [r4, #24]
 800584c:	6923      	ldr	r3, [r4, #16]
 800584e:	b943      	cbnz	r3, 8005862 <__swsetup_r+0xc6>
 8005850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005854:	d1ba      	bne.n	80057cc <__swsetup_r+0x30>
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	0781      	lsls	r1, r0, #30
 800585a:	bf58      	it	pl
 800585c:	6963      	ldrpl	r3, [r4, #20]
 800585e:	60a3      	str	r3, [r4, #8]
 8005860:	e7f4      	b.n	800584c <__swsetup_r+0xb0>
 8005862:	2000      	movs	r0, #0
 8005864:	e7f7      	b.n	8005856 <__swsetup_r+0xba>
 8005866:	bf00      	nop
 8005868:	2000000c 	.word	0x2000000c
 800586c:	08005cac 	.word	0x08005cac
 8005870:	08005ccc 	.word	0x08005ccc
 8005874:	08005c8c 	.word	0x08005c8c

08005878 <_close_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4d06      	ldr	r5, [pc, #24]	; (8005894 <_close_r+0x1c>)
 800587c:	2300      	movs	r3, #0
 800587e:	4604      	mov	r4, r0
 8005880:	4608      	mov	r0, r1
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	f7fb fdd1 	bl	800142a <_close>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_close_r+0x1a>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b103      	cbz	r3, 8005892 <_close_r+0x1a>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	200002dc 	.word	0x200002dc

08005898 <__sflush_r>:
 8005898:	898a      	ldrh	r2, [r1, #12]
 800589a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589e:	4605      	mov	r5, r0
 80058a0:	0710      	lsls	r0, r2, #28
 80058a2:	460c      	mov	r4, r1
 80058a4:	d458      	bmi.n	8005958 <__sflush_r+0xc0>
 80058a6:	684b      	ldr	r3, [r1, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	dc05      	bgt.n	80058b8 <__sflush_r+0x20>
 80058ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	dc02      	bgt.n	80058b8 <__sflush_r+0x20>
 80058b2:	2000      	movs	r0, #0
 80058b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058ba:	2e00      	cmp	r6, #0
 80058bc:	d0f9      	beq.n	80058b2 <__sflush_r+0x1a>
 80058be:	2300      	movs	r3, #0
 80058c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058c4:	682f      	ldr	r7, [r5, #0]
 80058c6:	602b      	str	r3, [r5, #0]
 80058c8:	d032      	beq.n	8005930 <__sflush_r+0x98>
 80058ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	075a      	lsls	r2, r3, #29
 80058d0:	d505      	bpl.n	80058de <__sflush_r+0x46>
 80058d2:	6863      	ldr	r3, [r4, #4]
 80058d4:	1ac0      	subs	r0, r0, r3
 80058d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058d8:	b10b      	cbz	r3, 80058de <__sflush_r+0x46>
 80058da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058dc:	1ac0      	subs	r0, r0, r3
 80058de:	2300      	movs	r3, #0
 80058e0:	4602      	mov	r2, r0
 80058e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058e4:	6a21      	ldr	r1, [r4, #32]
 80058e6:	4628      	mov	r0, r5
 80058e8:	47b0      	blx	r6
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	d106      	bne.n	80058fe <__sflush_r+0x66>
 80058f0:	6829      	ldr	r1, [r5, #0]
 80058f2:	291d      	cmp	r1, #29
 80058f4:	d82c      	bhi.n	8005950 <__sflush_r+0xb8>
 80058f6:	4a2a      	ldr	r2, [pc, #168]	; (80059a0 <__sflush_r+0x108>)
 80058f8:	40ca      	lsrs	r2, r1
 80058fa:	07d6      	lsls	r6, r2, #31
 80058fc:	d528      	bpl.n	8005950 <__sflush_r+0xb8>
 80058fe:	2200      	movs	r2, #0
 8005900:	6062      	str	r2, [r4, #4]
 8005902:	04d9      	lsls	r1, r3, #19
 8005904:	6922      	ldr	r2, [r4, #16]
 8005906:	6022      	str	r2, [r4, #0]
 8005908:	d504      	bpl.n	8005914 <__sflush_r+0x7c>
 800590a:	1c42      	adds	r2, r0, #1
 800590c:	d101      	bne.n	8005912 <__sflush_r+0x7a>
 800590e:	682b      	ldr	r3, [r5, #0]
 8005910:	b903      	cbnz	r3, 8005914 <__sflush_r+0x7c>
 8005912:	6560      	str	r0, [r4, #84]	; 0x54
 8005914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005916:	602f      	str	r7, [r5, #0]
 8005918:	2900      	cmp	r1, #0
 800591a:	d0ca      	beq.n	80058b2 <__sflush_r+0x1a>
 800591c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005920:	4299      	cmp	r1, r3
 8005922:	d002      	beq.n	800592a <__sflush_r+0x92>
 8005924:	4628      	mov	r0, r5
 8005926:	f000 f8fd 	bl	8005b24 <_free_r>
 800592a:	2000      	movs	r0, #0
 800592c:	6360      	str	r0, [r4, #52]	; 0x34
 800592e:	e7c1      	b.n	80058b4 <__sflush_r+0x1c>
 8005930:	6a21      	ldr	r1, [r4, #32]
 8005932:	2301      	movs	r3, #1
 8005934:	4628      	mov	r0, r5
 8005936:	47b0      	blx	r6
 8005938:	1c41      	adds	r1, r0, #1
 800593a:	d1c7      	bne.n	80058cc <__sflush_r+0x34>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0c4      	beq.n	80058cc <__sflush_r+0x34>
 8005942:	2b1d      	cmp	r3, #29
 8005944:	d001      	beq.n	800594a <__sflush_r+0xb2>
 8005946:	2b16      	cmp	r3, #22
 8005948:	d101      	bne.n	800594e <__sflush_r+0xb6>
 800594a:	602f      	str	r7, [r5, #0]
 800594c:	e7b1      	b.n	80058b2 <__sflush_r+0x1a>
 800594e:	89a3      	ldrh	r3, [r4, #12]
 8005950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005954:	81a3      	strh	r3, [r4, #12]
 8005956:	e7ad      	b.n	80058b4 <__sflush_r+0x1c>
 8005958:	690f      	ldr	r7, [r1, #16]
 800595a:	2f00      	cmp	r7, #0
 800595c:	d0a9      	beq.n	80058b2 <__sflush_r+0x1a>
 800595e:	0793      	lsls	r3, r2, #30
 8005960:	680e      	ldr	r6, [r1, #0]
 8005962:	bf08      	it	eq
 8005964:	694b      	ldreq	r3, [r1, #20]
 8005966:	600f      	str	r7, [r1, #0]
 8005968:	bf18      	it	ne
 800596a:	2300      	movne	r3, #0
 800596c:	eba6 0807 	sub.w	r8, r6, r7
 8005970:	608b      	str	r3, [r1, #8]
 8005972:	f1b8 0f00 	cmp.w	r8, #0
 8005976:	dd9c      	ble.n	80058b2 <__sflush_r+0x1a>
 8005978:	6a21      	ldr	r1, [r4, #32]
 800597a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800597c:	4643      	mov	r3, r8
 800597e:	463a      	mov	r2, r7
 8005980:	4628      	mov	r0, r5
 8005982:	47b0      	blx	r6
 8005984:	2800      	cmp	r0, #0
 8005986:	dc06      	bgt.n	8005996 <__sflush_r+0xfe>
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005994:	e78e      	b.n	80058b4 <__sflush_r+0x1c>
 8005996:	4407      	add	r7, r0
 8005998:	eba8 0800 	sub.w	r8, r8, r0
 800599c:	e7e9      	b.n	8005972 <__sflush_r+0xda>
 800599e:	bf00      	nop
 80059a0:	20400001 	.word	0x20400001

080059a4 <_fflush_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	690b      	ldr	r3, [r1, #16]
 80059a8:	4605      	mov	r5, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	b913      	cbnz	r3, 80059b4 <_fflush_r+0x10>
 80059ae:	2500      	movs	r5, #0
 80059b0:	4628      	mov	r0, r5
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	b118      	cbz	r0, 80059be <_fflush_r+0x1a>
 80059b6:	6983      	ldr	r3, [r0, #24]
 80059b8:	b90b      	cbnz	r3, 80059be <_fflush_r+0x1a>
 80059ba:	f7ff fa15 	bl	8004de8 <__sinit>
 80059be:	4b14      	ldr	r3, [pc, #80]	; (8005a10 <_fflush_r+0x6c>)
 80059c0:	429c      	cmp	r4, r3
 80059c2:	d11b      	bne.n	80059fc <_fflush_r+0x58>
 80059c4:	686c      	ldr	r4, [r5, #4]
 80059c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0ef      	beq.n	80059ae <_fflush_r+0xa>
 80059ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059d0:	07d0      	lsls	r0, r2, #31
 80059d2:	d404      	bmi.n	80059de <_fflush_r+0x3a>
 80059d4:	0599      	lsls	r1, r3, #22
 80059d6:	d402      	bmi.n	80059de <_fflush_r+0x3a>
 80059d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059da:	f7ff faa3 	bl	8004f24 <__retarget_lock_acquire_recursive>
 80059de:	4628      	mov	r0, r5
 80059e0:	4621      	mov	r1, r4
 80059e2:	f7ff ff59 	bl	8005898 <__sflush_r>
 80059e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059e8:	07da      	lsls	r2, r3, #31
 80059ea:	4605      	mov	r5, r0
 80059ec:	d4e0      	bmi.n	80059b0 <_fflush_r+0xc>
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	059b      	lsls	r3, r3, #22
 80059f2:	d4dd      	bmi.n	80059b0 <_fflush_r+0xc>
 80059f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059f6:	f7ff fa96 	bl	8004f26 <__retarget_lock_release_recursive>
 80059fa:	e7d9      	b.n	80059b0 <_fflush_r+0xc>
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <_fflush_r+0x70>)
 80059fe:	429c      	cmp	r4, r3
 8005a00:	d101      	bne.n	8005a06 <_fflush_r+0x62>
 8005a02:	68ac      	ldr	r4, [r5, #8]
 8005a04:	e7df      	b.n	80059c6 <_fflush_r+0x22>
 8005a06:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <_fflush_r+0x74>)
 8005a08:	429c      	cmp	r4, r3
 8005a0a:	bf08      	it	eq
 8005a0c:	68ec      	ldreq	r4, [r5, #12]
 8005a0e:	e7da      	b.n	80059c6 <_fflush_r+0x22>
 8005a10:	08005cac 	.word	0x08005cac
 8005a14:	08005ccc 	.word	0x08005ccc
 8005a18:	08005c8c 	.word	0x08005c8c

08005a1c <_lseek_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4d07      	ldr	r5, [pc, #28]	; (8005a3c <_lseek_r+0x20>)
 8005a20:	4604      	mov	r4, r0
 8005a22:	4608      	mov	r0, r1
 8005a24:	4611      	mov	r1, r2
 8005a26:	2200      	movs	r2, #0
 8005a28:	602a      	str	r2, [r5, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f7fb fd24 	bl	8001478 <_lseek>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_lseek_r+0x1e>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_lseek_r+0x1e>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	200002dc 	.word	0x200002dc

08005a40 <__swhatbuf_r>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	460e      	mov	r6, r1
 8005a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a48:	2900      	cmp	r1, #0
 8005a4a:	b096      	sub	sp, #88	; 0x58
 8005a4c:	4614      	mov	r4, r2
 8005a4e:	461d      	mov	r5, r3
 8005a50:	da08      	bge.n	8005a64 <__swhatbuf_r+0x24>
 8005a52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	602a      	str	r2, [r5, #0]
 8005a5a:	061a      	lsls	r2, r3, #24
 8005a5c:	d410      	bmi.n	8005a80 <__swhatbuf_r+0x40>
 8005a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a62:	e00e      	b.n	8005a82 <__swhatbuf_r+0x42>
 8005a64:	466a      	mov	r2, sp
 8005a66:	f000 f8bb 	bl	8005be0 <_fstat_r>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	dbf1      	blt.n	8005a52 <__swhatbuf_r+0x12>
 8005a6e:	9a01      	ldr	r2, [sp, #4]
 8005a70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a78:	425a      	negs	r2, r3
 8005a7a:	415a      	adcs	r2, r3
 8005a7c:	602a      	str	r2, [r5, #0]
 8005a7e:	e7ee      	b.n	8005a5e <__swhatbuf_r+0x1e>
 8005a80:	2340      	movs	r3, #64	; 0x40
 8005a82:	2000      	movs	r0, #0
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	b016      	add	sp, #88	; 0x58
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a8c <__smakebuf_r>:
 8005a8c:	898b      	ldrh	r3, [r1, #12]
 8005a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a90:	079d      	lsls	r5, r3, #30
 8005a92:	4606      	mov	r6, r0
 8005a94:	460c      	mov	r4, r1
 8005a96:	d507      	bpl.n	8005aa8 <__smakebuf_r+0x1c>
 8005a98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	6163      	str	r3, [r4, #20]
 8005aa4:	b002      	add	sp, #8
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
 8005aa8:	ab01      	add	r3, sp, #4
 8005aaa:	466a      	mov	r2, sp
 8005aac:	f7ff ffc8 	bl	8005a40 <__swhatbuf_r>
 8005ab0:	9900      	ldr	r1, [sp, #0]
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f7ff fa57 	bl	8004f68 <_malloc_r>
 8005aba:	b948      	cbnz	r0, 8005ad0 <__smakebuf_r+0x44>
 8005abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac0:	059a      	lsls	r2, r3, #22
 8005ac2:	d4ef      	bmi.n	8005aa4 <__smakebuf_r+0x18>
 8005ac4:	f023 0303 	bic.w	r3, r3, #3
 8005ac8:	f043 0302 	orr.w	r3, r3, #2
 8005acc:	81a3      	strh	r3, [r4, #12]
 8005ace:	e7e3      	b.n	8005a98 <__smakebuf_r+0xc>
 8005ad0:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <__smakebuf_r+0x7c>)
 8005ad2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	6020      	str	r0, [r4, #0]
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005adc:	81a3      	strh	r3, [r4, #12]
 8005ade:	9b00      	ldr	r3, [sp, #0]
 8005ae0:	6163      	str	r3, [r4, #20]
 8005ae2:	9b01      	ldr	r3, [sp, #4]
 8005ae4:	6120      	str	r0, [r4, #16]
 8005ae6:	b15b      	cbz	r3, 8005b00 <__smakebuf_r+0x74>
 8005ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aec:	4630      	mov	r0, r6
 8005aee:	f000 f889 	bl	8005c04 <_isatty_r>
 8005af2:	b128      	cbz	r0, 8005b00 <__smakebuf_r+0x74>
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	f023 0303 	bic.w	r3, r3, #3
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	81a3      	strh	r3, [r4, #12]
 8005b00:	89a0      	ldrh	r0, [r4, #12]
 8005b02:	4305      	orrs	r5, r0
 8005b04:	81a5      	strh	r5, [r4, #12]
 8005b06:	e7cd      	b.n	8005aa4 <__smakebuf_r+0x18>
 8005b08:	08004d81 	.word	0x08004d81

08005b0c <__malloc_lock>:
 8005b0c:	4801      	ldr	r0, [pc, #4]	; (8005b14 <__malloc_lock+0x8>)
 8005b0e:	f7ff ba09 	b.w	8004f24 <__retarget_lock_acquire_recursive>
 8005b12:	bf00      	nop
 8005b14:	200002d0 	.word	0x200002d0

08005b18 <__malloc_unlock>:
 8005b18:	4801      	ldr	r0, [pc, #4]	; (8005b20 <__malloc_unlock+0x8>)
 8005b1a:	f7ff ba04 	b.w	8004f26 <__retarget_lock_release_recursive>
 8005b1e:	bf00      	nop
 8005b20:	200002d0 	.word	0x200002d0

08005b24 <_free_r>:
 8005b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b26:	2900      	cmp	r1, #0
 8005b28:	d044      	beq.n	8005bb4 <_free_r+0x90>
 8005b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b2e:	9001      	str	r0, [sp, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f1a1 0404 	sub.w	r4, r1, #4
 8005b36:	bfb8      	it	lt
 8005b38:	18e4      	addlt	r4, r4, r3
 8005b3a:	f7ff ffe7 	bl	8005b0c <__malloc_lock>
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	; (8005bb8 <_free_r+0x94>)
 8005b40:	9801      	ldr	r0, [sp, #4]
 8005b42:	6813      	ldr	r3, [r2, #0]
 8005b44:	b933      	cbnz	r3, 8005b54 <_free_r+0x30>
 8005b46:	6063      	str	r3, [r4, #4]
 8005b48:	6014      	str	r4, [r2, #0]
 8005b4a:	b003      	add	sp, #12
 8005b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b50:	f7ff bfe2 	b.w	8005b18 <__malloc_unlock>
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	d908      	bls.n	8005b6a <_free_r+0x46>
 8005b58:	6825      	ldr	r5, [r4, #0]
 8005b5a:	1961      	adds	r1, r4, r5
 8005b5c:	428b      	cmp	r3, r1
 8005b5e:	bf01      	itttt	eq
 8005b60:	6819      	ldreq	r1, [r3, #0]
 8005b62:	685b      	ldreq	r3, [r3, #4]
 8005b64:	1949      	addeq	r1, r1, r5
 8005b66:	6021      	streq	r1, [r4, #0]
 8005b68:	e7ed      	b.n	8005b46 <_free_r+0x22>
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	b10b      	cbz	r3, 8005b74 <_free_r+0x50>
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	d9fa      	bls.n	8005b6a <_free_r+0x46>
 8005b74:	6811      	ldr	r1, [r2, #0]
 8005b76:	1855      	adds	r5, r2, r1
 8005b78:	42a5      	cmp	r5, r4
 8005b7a:	d10b      	bne.n	8005b94 <_free_r+0x70>
 8005b7c:	6824      	ldr	r4, [r4, #0]
 8005b7e:	4421      	add	r1, r4
 8005b80:	1854      	adds	r4, r2, r1
 8005b82:	42a3      	cmp	r3, r4
 8005b84:	6011      	str	r1, [r2, #0]
 8005b86:	d1e0      	bne.n	8005b4a <_free_r+0x26>
 8005b88:	681c      	ldr	r4, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	6053      	str	r3, [r2, #4]
 8005b8e:	4421      	add	r1, r4
 8005b90:	6011      	str	r1, [r2, #0]
 8005b92:	e7da      	b.n	8005b4a <_free_r+0x26>
 8005b94:	d902      	bls.n	8005b9c <_free_r+0x78>
 8005b96:	230c      	movs	r3, #12
 8005b98:	6003      	str	r3, [r0, #0]
 8005b9a:	e7d6      	b.n	8005b4a <_free_r+0x26>
 8005b9c:	6825      	ldr	r5, [r4, #0]
 8005b9e:	1961      	adds	r1, r4, r5
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	bf04      	itt	eq
 8005ba4:	6819      	ldreq	r1, [r3, #0]
 8005ba6:	685b      	ldreq	r3, [r3, #4]
 8005ba8:	6063      	str	r3, [r4, #4]
 8005baa:	bf04      	itt	eq
 8005bac:	1949      	addeq	r1, r1, r5
 8005bae:	6021      	streq	r1, [r4, #0]
 8005bb0:	6054      	str	r4, [r2, #4]
 8005bb2:	e7ca      	b.n	8005b4a <_free_r+0x26>
 8005bb4:	b003      	add	sp, #12
 8005bb6:	bd30      	pop	{r4, r5, pc}
 8005bb8:	200002d4 	.word	0x200002d4

08005bbc <_read_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4d07      	ldr	r5, [pc, #28]	; (8005bdc <_read_r+0x20>)
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	4608      	mov	r0, r1
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	602a      	str	r2, [r5, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f7fb fc10 	bl	80013f0 <_read>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	d102      	bne.n	8005bda <_read_r+0x1e>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	b103      	cbz	r3, 8005bda <_read_r+0x1e>
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	200002dc 	.word	0x200002dc

08005be0 <_fstat_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4d07      	ldr	r5, [pc, #28]	; (8005c00 <_fstat_r+0x20>)
 8005be4:	2300      	movs	r3, #0
 8005be6:	4604      	mov	r4, r0
 8005be8:	4608      	mov	r0, r1
 8005bea:	4611      	mov	r1, r2
 8005bec:	602b      	str	r3, [r5, #0]
 8005bee:	f7fb fc28 	bl	8001442 <_fstat>
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	d102      	bne.n	8005bfc <_fstat_r+0x1c>
 8005bf6:	682b      	ldr	r3, [r5, #0]
 8005bf8:	b103      	cbz	r3, 8005bfc <_fstat_r+0x1c>
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	bd38      	pop	{r3, r4, r5, pc}
 8005bfe:	bf00      	nop
 8005c00:	200002dc 	.word	0x200002dc

08005c04 <_isatty_r>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4d06      	ldr	r5, [pc, #24]	; (8005c20 <_isatty_r+0x1c>)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	602b      	str	r3, [r5, #0]
 8005c10:	f7fb fc27 	bl	8001462 <_isatty>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d102      	bne.n	8005c1e <_isatty_r+0x1a>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	b103      	cbz	r3, 8005c1e <_isatty_r+0x1a>
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	200002dc 	.word	0x200002dc

08005c24 <_init>:
 8005c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c26:	bf00      	nop
 8005c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2a:	bc08      	pop	{r3}
 8005c2c:	469e      	mov	lr, r3
 8005c2e:	4770      	bx	lr

08005c30 <_fini>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	bf00      	nop
 8005c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c36:	bc08      	pop	{r3}
 8005c38:	469e      	mov	lr, r3
 8005c3a:	4770      	bx	lr
