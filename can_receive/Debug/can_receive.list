
can_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b40  08004b40  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b48  08004b48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000174  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f31d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e16  00000000  00000000  0002f3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  000311d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf0  00000000  00000000  00031f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f26  00000000  00000000  00032c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7aa  00000000  00000000  00054b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf14f  00000000  00000000  00063340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013248f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041b8  00000000  00000000  001324e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a48 	.word	0x08004a48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004a48 	.word	0x08004a48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:
uint32_t rot_old_state;
uint32_t rot_cnt;
int rot_new_state1;
int rot_old_state1;
int rot_cnt1;
uint32_t _write(int file, char* p, int len){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	230a      	movs	r3, #10
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <_write+0x24>)
 800058a:	f002 ff28 	bl	80033de <HAL_UART_Transmit>
	return len;
 800058e:	687b      	ldr	r3, [r7, #4]

}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000144 	.word	0x20000144

0800059c <HAL_CAN_RxFifo1MsgPendingCallback>:
uint8_t datacheck;
uint8_t cntt = 0;


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &RxHeader, RxData) ;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 80005a6:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>)
 80005a8:	2101      	movs	r1, #1
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f001 f8d8 	bl	8001760 <HAL_CAN_GetRxMessage>
  cntt++;
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 80005ba:	701a      	strb	r2, [r3, #0]
  printf("count %u and", cntt);
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	4816      	ldr	r0, [pc, #88]	; (800061c <HAL_CAN_RxFifo1MsgPendingCallback+0x80>)
 80005c4:	f003 fab2 	bl	8003b2c <iprintf>
  while (cntt - 100 > 0)
 80005c8:	e007      	b.n	80005da <HAL_CAN_RxFifo1MsgPendingCallback+0x3e>
  	{
  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ce:	4814      	ldr	r0, [pc, #80]	; (8000620 <HAL_CAN_RxFifo1MsgPendingCallback+0x84>)
 80005d0:	f001 fef5 	bl	80023be <HAL_GPIO_TogglePin>
  		cntt = 0;
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
  while (cntt - 100 > 0)
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b64      	cmp	r3, #100	; 0x64
 80005e0:	d8f3      	bhi.n	80005ca <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
  	}
  printf("data0 = %lu and data1 = %lu \n",RxData[0], RxData[1]);
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 80005ea:	785b      	ldrb	r3, [r3, #1]
 80005ec:	461a      	mov	r2, r3
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 80005f0:	f003 fa9c 	bl	8003b2c <iprintf>
//  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
  if ((RxHeader.StdId == 0x111))
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f240 1211 	movw	r2, #273	; 0x111
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d102      	bne.n	8000606 <HAL_CAN_RxFifo1MsgPendingCallback+0x6a>
  {
	  datacheck = 1;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
  }
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200001bc 	.word	0x200001bc
 8000614:	20000188 	.word	0x20000188
 8000618:	200001c9 	.word	0x200001c9
 800061c:	08004a60 	.word	0x08004a60
 8000620:	40020c00 	.word	0x40020c00
 8000624:	08004a70 	.word	0x08004a70
 8000628:	200001c8 	.word	0x200001c8

0800062c <main>:
  ////			printf(countq);
  //
  //			last_print = now;

int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fddf 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f84d 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f9ef 	bl	8000a1c <MX_GPIO_Init>
  MX_TIM2_Init();
 800063e:	f000 f907 	bl	8000850 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000642:	f000 f959 	bl	80008f8 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8000646:	f000 f9bf 	bl	80009c8 <MX_USART2_UART_Init>
  MX_CAN2_Init();
 800064a:	f000 f8ad 	bl	80007a8 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan2);
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <main+0x94>)
 8000650:	f001 f842 	bl	80016d8 <HAL_CAN_Start>
//  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000654:	2110      	movs	r1, #16
 8000656:	481a      	ldr	r0, [pc, #104]	; (80006c0 <main+0x94>)
 8000658:	f001 f994 	bl	8001984 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 1;
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <main+0x98>)
 800065e:	2201      	movs	r2, #1
 8000660:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <main+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <main+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <main+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <main+0x98>)
 8000676:	f240 1203 	movw	r2, #259	; 0x103
 800067a:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <main+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	751a      	strb	r2, [r3, #20]
  /* USER CODE BEGIN WHILE */
  while (1)

  {
//	  printf("Hello");
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000688:	480f      	ldr	r0, [pc, #60]	; (80006c8 <main+0x9c>)
 800068a:	f001 fe7f 	bl	800238c <HAL_GPIO_WritePin>
	 			  if (datacheck==1)
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <main+0xa0>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d10b      	bne.n	80006ae <main+0x82>
	 			  {
	 			   HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <main+0x9c>)
 800069c:	f001 fe8f 	bl	80023be <HAL_GPIO_TogglePin>
	 			   HAL_Delay(1000);
 80006a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a4:	f000 fe18 	bl	80012d8 <HAL_Delay>
	 			   datacheck =0;
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <main+0xa0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
	 			  }
    /* USER CODE END WHILE */
	  uint32_t last_print = 0, now = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
	  TxData[0] = 0x03 & 0x00ff;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <main+0xa4>)
 80006b8:	2203      	movs	r2, #3
 80006ba:	701a      	strb	r2, [r3, #0]
  {
 80006bc:	e7e1      	b.n	8000682 <main+0x56>
 80006be:	bf00      	nop
 80006c0:	2000008c 	.word	0x2000008c
 80006c4:	200001a4 	.word	0x200001a4
 80006c8:	40020c00 	.word	0x40020c00
 80006cc:	200001c8 	.word	0x200001c8
 80006d0:	200001c4 	.word	0x200001c4

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fa1a 	bl	8003b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000748:	23a8      	movs	r3, #168	; 0xa8
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000750:	2307      	movs	r3, #7
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fe4b 	bl	80023f4 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000764:	f000 faaa 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2105      	movs	r1, #5
 8000786:	4618      	mov	r0, r3
 8000788:	f002 f8ac 	bl	80028e4 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000792:	f000 fa93 	bl	8000cbc <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007b0:	4a26      	ldr	r2, [pc, #152]	; (800084c <MX_CAN2_Init+0xa4>)
 80007b2:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007b6:	2215      	movs	r2, #21
 80007b8:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007c8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007cc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007d0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007d4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007fa:	4813      	ldr	r0, [pc, #76]	; (8000848 <MX_CAN2_Init+0xa0>)
 80007fc:	f000 fd90 	bl	8001320 <HAL_CAN_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000806:	f000 fa59 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 800080e:	230a      	movs	r3, #10
 8000810:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000812:	2301      	movs	r3, #1
 8000814:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x111<<5;
 8000816:	f242 2320 	movw	r3, #8736	; 0x2220
 800081a:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x111<<5;
 8000820:	f242 2320 	movw	r3, #8736	; 0x2220
 8000824:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800082e:	2301      	movs	r3, #1
 8000830:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <MX_CAN2_Init+0xa0>)
 800083c:	f000 fe6c 	bl	8001518 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000008c 	.word	0x2000008c
 800084c:	40006800 	.word	0x40006800

08000850 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2224      	movs	r2, #36	; 0x24
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f003 f95c 	bl	8003b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_TIM2_Init+0xa4>)
 800086e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000872:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_TIM2_Init+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_TIM2_Init+0xa4>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_TIM2_Init+0xa4>)
 8000882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000886:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_TIM2_Init+0xa4>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_TIM2_Init+0xa4>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000894:	2303      	movs	r3, #3
 8000896:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800089c:	2301      	movs	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ac:	2301      	movs	r3, #1
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_TIM2_Init+0xa4>)
 80008c0:	f002 fa30 	bl	8002d24 <HAL_TIM_Encoder_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80008ca:	f000 f9f7 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_TIM2_Init+0xa4>)
 80008dc:	f002 fca2 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008e6:	f000 f9e9 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3730      	adds	r7, #48	; 0x30
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000b4 	.word	0x200000b4

080008f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2224      	movs	r2, #36	; 0x24
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f003 f908 	bl	8003b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000914:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <MX_TIM5_Init+0xc0>)
 8000916:	4a29      	ldr	r2, [pc, #164]	; (80009bc <MX_TIM5_Init+0xc4>)
 8000918:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_TIM5_Init+0xc0>)
 800091c:	2200      	movs	r2, #0
 800091e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <MX_TIM5_Init+0xc0>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <MX_TIM5_Init+0xc0>)
 8000928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800092c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_TIM5_Init+0xc0>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <MX_TIM5_Init+0xc0>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800093a:	2303      	movs	r3, #3
 800093c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000942:	2301      	movs	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000952:	2301      	movs	r3, #1
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4619      	mov	r1, r3
 8000964:	4814      	ldr	r0, [pc, #80]	; (80009b8 <MX_TIM5_Init+0xc0>)
 8000966:	f002 f9dd 	bl	8002d24 <HAL_TIM_Encoder_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000970:	f000 f9a4 	bl	8000cbc <Error_Handler>
  }  if (datacheck)
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_TIM5_Init+0xc8>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00a      	beq.n	8000992 <MX_TIM5_Init+0x9a>
  {
   printf(datacheck);
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_TIM5_Init+0xc8>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f003 f8d3 	bl	8003b2c <iprintf>
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_TIM5_Init+0xcc>)
 800098e:	f001 fcfd 	bl	800238c <HAL_GPIO_WritePin>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <MX_TIM5_Init+0xc0>)
 80009a0:	f002 fc40 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 80009aa:	f000 f987 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3730      	adds	r7, #48	; 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000fc 	.word	0x200000fc
 80009bc:	40000c00 	.word	0x40000c00
 80009c0:	200001c8 	.word	0x200001c8
 80009c4:	40020c00 	.word	0x40020c00

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_USART2_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f002 fca0 	bl	8003344 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f000 f957 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000144 	.word	0x20000144
 8000a18:	40004400 	.word	0x40004400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	4b9b      	ldr	r3, [pc, #620]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a9a      	ldr	r2, [pc, #616]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b98      	ldr	r3, [pc, #608]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	4b94      	ldr	r3, [pc, #592]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a93      	ldr	r2, [pc, #588]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b91      	ldr	r3, [pc, #580]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b8d      	ldr	r3, [pc, #564]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a8c      	ldr	r2, [pc, #560]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b8a      	ldr	r3, [pc, #552]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b86      	ldr	r3, [pc, #536]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a85      	ldr	r2, [pc, #532]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b83      	ldr	r3, [pc, #524]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b7f      	ldr	r3, [pc, #508]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a7e      	ldr	r2, [pc, #504]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b7c      	ldr	r3, [pc, #496]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b78      	ldr	r3, [pc, #480]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a77      	ldr	r2, [pc, #476]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b75      	ldr	r3, [pc, #468]	; (8000ca4 <MX_GPIO_Init+0x288>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2108      	movs	r1, #8
 8000ade:	4872      	ldr	r0, [pc, #456]	; (8000ca8 <MX_GPIO_Init+0x28c>)
 8000ae0:	f001 fc54 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4870      	ldr	r0, [pc, #448]	; (8000cac <MX_GPIO_Init+0x290>)
 8000aea:	f001 fc4f 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aee:	2200      	movs	r2, #0
 8000af0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000af4:	486e      	ldr	r0, [pc, #440]	; (8000cb0 <MX_GPIO_Init+0x294>)
 8000af6:	f001 fc49 	bl	800238c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000afa:	2308      	movs	r3, #8
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4865      	ldr	r0, [pc, #404]	; (8000ca8 <MX_GPIO_Init+0x28c>)
 8000b12:	f001 fa9f 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	485f      	ldr	r0, [pc, #380]	; (8000cac <MX_GPIO_Init+0x290>)
 8000b2e:	f001 fa91 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b32:	2308      	movs	r3, #8
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b42:	2305      	movs	r3, #5
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4857      	ldr	r0, [pc, #348]	; (8000cac <MX_GPIO_Init+0x290>)
 8000b4e:	f001 fa81 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b52:	2310      	movs	r3, #16
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b62:	2306      	movs	r3, #6
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4851      	ldr	r0, [pc, #324]	; (8000cb4 <MX_GPIO_Init+0x298>)
 8000b6e:	f001 fa71 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b72:	23e0      	movs	r3, #224	; 0xe0
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b82:	2305      	movs	r3, #5
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4849      	ldr	r0, [pc, #292]	; (8000cb4 <MX_GPIO_Init+0x298>)
 8000b8e:	f001 fa61 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b92:	2304      	movs	r3, #4
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4844      	ldr	r0, [pc, #272]	; (8000cb8 <MX_GPIO_Init+0x29c>)
 8000ba6:	f001 fa55 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bbc:	2305      	movs	r3, #5
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	483c      	ldr	r0, [pc, #240]	; (8000cb8 <MX_GPIO_Init+0x29c>)
 8000bc8:	f001 fa44 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bcc:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bd0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4832      	ldr	r0, [pc, #200]	; (8000cb0 <MX_GPIO_Init+0x294>)
 8000be6:	f001 fa35 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4829      	ldr	r0, [pc, #164]	; (8000cac <MX_GPIO_Init+0x290>)
 8000c08:	f001 fa24 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4824      	ldr	r0, [pc, #144]	; (8000cb4 <MX_GPIO_Init+0x298>)
 8000c22:	f001 fa17 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000c26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c38:	230a      	movs	r3, #10
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	481c      	ldr	r0, [pc, #112]	; (8000cb4 <MX_GPIO_Init+0x298>)
 8000c44:	f001 fa06 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c48:	2320      	movs	r3, #32
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4815      	ldr	r0, [pc, #84]	; (8000cb0 <MX_GPIO_Init+0x294>)
 8000c5c:	f001 f9fa 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c60:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c66:	2312      	movs	r3, #18
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c72:	2304      	movs	r3, #4
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <MX_GPIO_Init+0x29c>)
 8000c7e:	f001 f9e9 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_GPIO_Init+0x28c>)
 8000c98:	f001 f9dc 	bl	8002054 <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3730      	adds	r7, #48	; 0x30
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020c00 	.word	0x40020c00
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40020400 	.word	0x40020400

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d06:	2007      	movs	r0, #7
 8000d08:	f001 f962 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <HAL_CAN_MspInit+0xc0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d14a      	bne.n	8000dd0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <HAL_CAN_MspInit+0xc4>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a26      	ldr	r2, [pc, #152]	; (8000ddc <HAL_CAN_MspInit+0xc4>)
 8000d44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <HAL_CAN_MspInit+0xc4>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_CAN_MspInit+0xc4>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <HAL_CAN_MspInit+0xc4>)
 8000d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_CAN_MspInit+0xc4>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_CAN_MspInit+0xc4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <HAL_CAN_MspInit+0xc4>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_CAN_MspInit+0xc4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000da0:	2309      	movs	r3, #9
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <HAL_CAN_MspInit+0xc8>)
 8000dac:	f001 f952 	bl	8002054 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	2040      	movs	r0, #64	; 0x40
 8000db6:	f001 f916 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000dba:	2040      	movs	r0, #64	; 0x40
 8000dbc:	f001 f92f 	bl	800201e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2041      	movs	r0, #65	; 0x41
 8000dc6:	f001 f90e 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000dca:	2041      	movs	r0, #65	; 0x41
 8000dcc:	f001 f927 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40006800 	.word	0x40006800
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400

08000de4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	; 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e04:	d153      	bne.n	8000eae <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a46      	ldr	r2, [pc, #280]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b44      	ldr	r3, [pc, #272]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a38      	ldr	r2, [pc, #224]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	482d      	ldr	r0, [pc, #180]	; (8000f2c <HAL_TIM_Encoder_MspInit+0x148>)
 8000e78:	f001 f8ec 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4826      	ldr	r0, [pc, #152]	; (8000f30 <HAL_TIM_Encoder_MspInit+0x14c>)
 8000e98:	f001 f8dc 	bl	8002054 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	201c      	movs	r0, #28
 8000ea2:	f001 f8a0 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ea6:	201c      	movs	r0, #28
 8000ea8:	f001 f8b9 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000eac:	e038      	b.n	8000f20 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM5)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a20      	ldr	r2, [pc, #128]	; (8000f34 <HAL_TIM_Encoder_MspInit+0x150>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d133      	bne.n	8000f20 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x144>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f00:	2302      	movs	r3, #2
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4808      	ldr	r0, [pc, #32]	; (8000f2c <HAL_TIM_Encoder_MspInit+0x148>)
 8000f0c:	f001 f8a2 	bl	8002054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	2032      	movs	r0, #50	; 0x32
 8000f16:	f001 f866 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f1a:	2032      	movs	r0, #50	; 0x32
 8000f1c:	f001 f87f 	bl	800201e <HAL_NVIC_EnableIRQ>
}
 8000f20:	bf00      	nop
 8000f22:	3730      	adds	r7, #48	; 0x30
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40000c00 	.word	0x40000c00

08000f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <HAL_UART_MspInit+0x84>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d12b      	bne.n	8000fb2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_UART_MspInit+0x88>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_UART_MspInit+0x88>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_UART_MspInit+0x88>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_UART_MspInit+0x88>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <HAL_UART_MspInit+0x88>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_UART_MspInit+0x88>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f92:	230c      	movs	r3, #12
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <HAL_UART_MspInit+0x8c>)
 8000fae:	f001 f851 	bl	8002054 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40004400 	.word	0x40004400
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <NMI_Handler+0x4>

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 f940 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <TIM2_IRQHandler+0x10>)
 8001022:	f001 ff25 	bl	8002e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200000b4 	.word	0x200000b4

08001030 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <TIM5_IRQHandler+0x10>)
 8001036:	f001 ff1b 	bl	8002e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000fc 	.word	0x200000fc

08001044 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <CAN2_RX0_IRQHandler+0x10>)
 800104a:	f000 fcc1 	bl	80019d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000008c 	.word	0x2000008c

08001058 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <CAN2_RX1_IRQHandler+0x10>)
 800105e:	f000 fcb7 	bl	80019d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000008c 	.word	0x2000008c

0800106c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e00a      	b.n	8001094 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800107e:	f3af 8000 	nop.w
 8001082:	4601      	mov	r1, r0
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	60ba      	str	r2, [r7, #8]
 800108a:	b2ca      	uxtb	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbf0      	blt.n	800107e <_read+0x12>
  }

  return len;
 800109c:	687b      	ldr	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ce:	605a      	str	r2, [r3, #4]
  return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_isatty>:

int _isatty(int file)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f002 fcc2 	bl	8003ac8 <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20020000 	.word	0x20020000
 8001170:	00000400 	.word	0x00000400
 8001174:	200001cc 	.word	0x200001cc
 8001178:	200001e8 	.word	0x200001e8

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <SystemInit+0x20>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <SystemInit+0x20>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011a6:	490e      	ldr	r1, [pc, #56]	; (80011e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011bc:	4c0b      	ldr	r4, [pc, #44]	; (80011ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ca:	f7ff ffd7 	bl	800117c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f002 fc81 	bl	8003ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff fa2b 	bl	800062c <main>
  bx  lr    
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011e4:	08004b50 	.word	0x08004b50
  ldr r2, =_sbss
 80011e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011ec:	200001e4 	.word	0x200001e4

080011f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 fed7 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fd4e 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 feef 	bl	800203a <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001274:	f000 feb7 	bl	8001fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	20000008 	.word	0x20000008
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	200001d0 	.word	0x200001d0

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200001d0 	.word	0x200001d0

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008

08001320 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e0ed      	b.n	800150e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fcea 	bl	8000d18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001354:	f7ff ffb4 	bl	80012c0 <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800135a:	e012      	b.n	8001382 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800135c:	f7ff ffb0 	bl	80012c0 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b0a      	cmp	r3, #10
 8001368:	d90b      	bls.n	8001382 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2205      	movs	r2, #5
 800137a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0c5      	b.n	800150e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0e5      	beq.n	800135c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0202 	bic.w	r2, r2, #2
 800139e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a0:	f7ff ff8e 	bl	80012c0 <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013a6:	e012      	b.n	80013ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013a8:	f7ff ff8a 	bl	80012c0 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b0a      	cmp	r3, #10
 80013b4:	d90b      	bls.n	80013ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2205      	movs	r2, #5
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e09f      	b.n	800150e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e5      	bne.n	80013a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e1b      	ldrb	r3, [r3, #24]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d108      	bne.n	80013f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e007      	b.n	8001406 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7e5b      	ldrb	r3, [r3, #25]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e007      	b.n	8001430 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800142e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7e9b      	ldrb	r3, [r3, #26]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d108      	bne.n	800144a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0220 	orr.w	r2, r2, #32
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e007      	b.n	800145a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0220 	bic.w	r2, r2, #32
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7edb      	ldrb	r3, [r3, #27]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d108      	bne.n	8001474 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0210 	bic.w	r2, r2, #16
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e007      	b.n	8001484 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0210 	orr.w	r2, r2, #16
 8001482:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7f1b      	ldrb	r3, [r3, #28]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d108      	bne.n	800149e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0208 	orr.w	r2, r2, #8
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e007      	b.n	80014ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0208 	bic.w	r2, r2, #8
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7f5b      	ldrb	r3, [r3, #29]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d108      	bne.n	80014c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0204 	orr.w	r2, r2, #4
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e007      	b.n	80014d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0204 	bic.w	r2, r2, #4
 80014d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	ea42 0103 	orr.w	r1, r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001530:	7cfb      	ldrb	r3, [r7, #19]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d003      	beq.n	800153e <HAL_CAN_ConfigFilter+0x26>
 8001536:	7cfb      	ldrb	r3, [r7, #19]
 8001538:	2b02      	cmp	r3, #2
 800153a:	f040 80be 	bne.w	80016ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800153e:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001540:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001558:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	431a      	orrs	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	2201      	movs	r2, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43db      	mvns	r3, r3
 8001590:	401a      	ands	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d123      	bne.n	80015e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3248      	adds	r2, #72	; 0x48
 80015c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015de:	6979      	ldr	r1, [r7, #20]
 80015e0:	3348      	adds	r3, #72	; 0x48
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d122      	bne.n	8001636 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	431a      	orrs	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001610:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3248      	adds	r2, #72	; 0x48
 8001616:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800162a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800162c:	6979      	ldr	r1, [r7, #20]
 800162e:	3348      	adds	r3, #72	; 0x48
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	43db      	mvns	r3, r3
 8001648:	401a      	ands	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001650:	e007      	b.n	8001662 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	431a      	orrs	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	401a      	ands	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800167c:	e007      	b.n	800168e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	431a      	orrs	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d107      	bne.n	80016a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	431a      	orrs	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016ac:	f023 0201 	bic.w	r2, r3, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e006      	b.n	80016c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
  }
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40006400 	.word	0x40006400

080016d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d12e      	bne.n	800174a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2202      	movs	r2, #2
 80016f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff fddc 	bl	80012c0 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800170a:	e012      	b.n	8001732 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800170c:	f7ff fdd8 	bl	80012c0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b0a      	cmp	r3, #10
 8001718:	d90b      	bls.n	8001732 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2205      	movs	r2, #5
 800172a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e012      	b.n	8001758 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e5      	bne.n	800170c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e006      	b.n	8001758 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
  }
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001774:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d003      	beq.n	8001784 <HAL_CAN_GetRxMessage+0x24>
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b02      	cmp	r3, #2
 8001780:	f040 80f3 	bne.w	800196a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10e      	bne.n	80017a8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d116      	bne.n	80017c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0e7      	b.n	8001978 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d107      	bne.n	80017c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0d8      	b.n	8001978 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	331b      	adds	r3, #27
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	4413      	add	r3, r2
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0204 	and.w	r2, r3, #4
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10c      	bne.n	80017fe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	331b      	adds	r3, #27
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0d5b      	lsrs	r3, r3, #21
 80017f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e00b      	b.n	8001816 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	331b      	adds	r3, #27
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	4413      	add	r3, r2
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	08db      	lsrs	r3, r3, #3
 800180e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	331b      	adds	r3, #27
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	4413      	add	r3, r2
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0202 	and.w	r2, r3, #2
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	331b      	adds	r3, #27
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	3304      	adds	r3, #4
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 020f 	and.w	r2, r3, #15
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	331b      	adds	r3, #27
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4413      	add	r3, r2
 8001850:	3304      	adds	r3, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b2da      	uxtb	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	331b      	adds	r3, #27
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4413      	add	r3, r2
 8001868:	3304      	adds	r3, #4
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0c1b      	lsrs	r3, r3, #16
 800186e:	b29a      	uxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	4413      	add	r3, r2
 800187e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4413      	add	r3, r2
 8001894:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	0a1a      	lsrs	r2, r3, #8
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0c1a      	lsrs	r2, r3, #16
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3302      	adds	r3, #2
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	0e1a      	lsrs	r2, r3, #24
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	3303      	adds	r3, #3
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	3304      	adds	r3, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0a1a      	lsrs	r2, r3, #8
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	3305      	adds	r3, #5
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	4413      	add	r3, r2
 8001914:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	0c1a      	lsrs	r2, r3, #16
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	3306      	adds	r3, #6
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	4413      	add	r3, r2
 800192e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0e1a      	lsrs	r2, r3, #24
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	3307      	adds	r3, #7
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d108      	bne.n	8001956 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0220 	orr.w	r2, r2, #32
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	e007      	b.n	8001966 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e006      	b.n	8001978 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
  }
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001994:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d002      	beq.n	80019a2 <HAL_CAN_ActivateNotification+0x1e>
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d109      	bne.n	80019b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6959      	ldr	r1, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e006      	b.n	80019c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
  }
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d07c      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d023      	beq.n	8001a68 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f983 	bl	8001d3e <HAL_CAN_TxMailbox0CompleteCallback>
 8001a38:	e016      	b.n	8001a68 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4c:	e00c      	b.n	8001a68 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a60:	e002      	b.n	8001a68 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f989 	bl	8001d7a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d024      	beq.n	8001abc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f963 	bl	8001d52 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a8c:	e016      	b.n	8001abc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa0:	e00c      	b.n	8001abc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab4:	e002      	b.n	8001abc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f969 	bl	8001d8e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d024      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ace:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f943 	bl	8001d66 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ae0:	e016      	b.n	8001b10 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
 8001af4:	e00c      	b.n	8001b10 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	e002      	b.n	8001b10 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f949 	bl	8001da2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00c      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2210      	movs	r2, #16
 8001b32:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f93a 	bl	8001dca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f921 	bl	8001db6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00c      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2210      	movs	r2, #16
 8001b96:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f912 	bl	8001dde <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d009      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fce2 	bl	800059c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8fc 	bl	8001df2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00b      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2208      	movs	r2, #8
 8001c14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8f5 	bl	8001e06 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d07b      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d072      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d008      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	f043 0302 	orr.w	r3, r3, #2
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d043      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d03e      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c9e:	2b60      	cmp	r3, #96	; 0x60
 8001ca0:	d02b      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x32a>
 8001ca2:	2b60      	cmp	r3, #96	; 0x60
 8001ca4:	d82e      	bhi.n	8001d04 <HAL_CAN_IRQHandler+0x334>
 8001ca6:	2b50      	cmp	r3, #80	; 0x50
 8001ca8:	d022      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x320>
 8001caa:	2b50      	cmp	r3, #80	; 0x50
 8001cac:	d82a      	bhi.n	8001d04 <HAL_CAN_IRQHandler+0x334>
 8001cae:	2b40      	cmp	r3, #64	; 0x40
 8001cb0:	d019      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x316>
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d826      	bhi.n	8001d04 <HAL_CAN_IRQHandler+0x334>
 8001cb6:	2b30      	cmp	r3, #48	; 0x30
 8001cb8:	d010      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x30c>
 8001cba:	2b30      	cmp	r3, #48	; 0x30
 8001cbc:	d822      	bhi.n	8001d04 <HAL_CAN_IRQHandler+0x334>
 8001cbe:	2b10      	cmp	r3, #16
 8001cc0:	d002      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x2f8>
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d005      	beq.n	8001cd2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cc6:	e01d      	b.n	8001d04 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cd0:	e019      	b.n	8001d06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cda:	e014      	b.n	8001d06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	f043 0320 	orr.w	r3, r3, #32
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ce4:	e00f      	b.n	8001d06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cee:	e00a      	b.n	8001d06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cf8:	e005      	b.n	8001d06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d02:	e000      	b.n	8001d06 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d04:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699a      	ldr	r2, [r3, #24]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d14:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f872 	bl	8001e1a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <__NVIC_GetPriorityGrouping+0x18>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 0307 	and.w	r3, r3, #7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db0b      	blt.n	8001ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4907      	ldr	r1, [pc, #28]	; (8001ecc <__NVIC_EnableIRQ+0x38>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	; (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff29 	bl	8001e30 <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff8:	f7ff ff3e 	bl	8001e78 <__NVIC_GetPriorityGrouping>
 8001ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff ff8e 	bl	8001f24 <NVIC_EncodePriority>
 8002008:	4602      	mov	r2, r0
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5d 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff31 	bl	8001e94 <__NVIC_EnableIRQ>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffa2 	bl	8001f8c <SysTick_Config>
 8002048:	4603      	mov	r3, r0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	e16b      	b.n	8002348 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	429a      	cmp	r2, r3
 800208a:	f040 815a 	bne.w	8002342 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d005      	beq.n	80020a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d130      	bne.n	8002108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 0201 	and.w	r2, r3, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b03      	cmp	r3, #3
 8002112:	d017      	beq.n	8002144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d123      	bne.n	8002198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	220f      	movs	r2, #15
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	69b9      	ldr	r1, [r7, #24]
 8002194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0203 	and.w	r2, r3, #3
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80b4 	beq.w	8002342 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b60      	ldr	r3, [pc, #384]	; (8002360 <HAL_GPIO_Init+0x30c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a5f      	ldr	r2, [pc, #380]	; (8002360 <HAL_GPIO_Init+0x30c>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_GPIO_Init+0x30c>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f6:	4a5b      	ldr	r2, [pc, #364]	; (8002364 <HAL_GPIO_Init+0x310>)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a52      	ldr	r2, [pc, #328]	; (8002368 <HAL_GPIO_Init+0x314>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d02b      	beq.n	800227a <HAL_GPIO_Init+0x226>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a51      	ldr	r2, [pc, #324]	; (800236c <HAL_GPIO_Init+0x318>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d025      	beq.n	8002276 <HAL_GPIO_Init+0x222>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a50      	ldr	r2, [pc, #320]	; (8002370 <HAL_GPIO_Init+0x31c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01f      	beq.n	8002272 <HAL_GPIO_Init+0x21e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4f      	ldr	r2, [pc, #316]	; (8002374 <HAL_GPIO_Init+0x320>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d019      	beq.n	800226e <HAL_GPIO_Init+0x21a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <HAL_GPIO_Init+0x324>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_GPIO_Init+0x216>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4d      	ldr	r2, [pc, #308]	; (800237c <HAL_GPIO_Init+0x328>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00d      	beq.n	8002266 <HAL_GPIO_Init+0x212>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4c      	ldr	r2, [pc, #304]	; (8002380 <HAL_GPIO_Init+0x32c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d007      	beq.n	8002262 <HAL_GPIO_Init+0x20e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4b      	ldr	r2, [pc, #300]	; (8002384 <HAL_GPIO_Init+0x330>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_GPIO_Init+0x20a>
 800225a:	2307      	movs	r3, #7
 800225c:	e00e      	b.n	800227c <HAL_GPIO_Init+0x228>
 800225e:	2308      	movs	r3, #8
 8002260:	e00c      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002262:	2306      	movs	r3, #6
 8002264:	e00a      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002266:	2305      	movs	r3, #5
 8002268:	e008      	b.n	800227c <HAL_GPIO_Init+0x228>
 800226a:	2304      	movs	r3, #4
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x228>
 800226e:	2303      	movs	r3, #3
 8002270:	e004      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002272:	2302      	movs	r3, #2
 8002274:	e002      	b.n	800227c <HAL_GPIO_Init+0x228>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x228>
 800227a:	2300      	movs	r3, #0
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f002 0203 	and.w	r2, r2, #3
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	4093      	lsls	r3, r2
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228c:	4935      	ldr	r1, [pc, #212]	; (8002364 <HAL_GPIO_Init+0x310>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_GPIO_Init+0x334>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a32      	ldr	r2, [pc, #200]	; (8002388 <HAL_GPIO_Init+0x334>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_GPIO_Init+0x334>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a27      	ldr	r2, [pc, #156]	; (8002388 <HAL_GPIO_Init+0x334>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <HAL_GPIO_Init+0x334>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002312:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <HAL_GPIO_Init+0x334>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_GPIO_Init+0x334>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800233c:	4a12      	ldr	r2, [pc, #72]	; (8002388 <HAL_GPIO_Init+0x334>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	f67f ae90 	bls.w	8002070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40013800 	.word	0x40013800
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400
 8002370:	40020800 	.word	0x40020800
 8002374:	40020c00 	.word	0x40020c00
 8002378:	40021000 	.word	0x40021000
 800237c:	40021400 	.word	0x40021400
 8002380:	40021800 	.word	0x40021800
 8002384:	40021c00 	.word	0x40021c00
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
 8002398:	4613      	mov	r3, r2
 800239a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800239c:	787b      	ldrb	r3, [r7, #1]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023a8:	e003      	b.n	80023b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	041a      	lsls	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	619a      	str	r2, [r3, #24]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023be:	b480      	push	{r7}
 80023c0:	b085      	sub	sp, #20
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023d0:	887a      	ldrh	r2, [r7, #2]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	041a      	lsls	r2, r3, #16
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43d9      	mvns	r1, r3
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	400b      	ands	r3, r1
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	619a      	str	r2, [r3, #24]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e267      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d075      	beq.n	80024fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002412:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d00c      	beq.n	8002438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241e:	4b85      	ldr	r3, [pc, #532]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002426:	2b08      	cmp	r3, #8
 8002428:	d112      	bne.n	8002450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242a:	4b82      	ldr	r3, [pc, #520]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002436:	d10b      	bne.n	8002450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	4b7e      	ldr	r3, [pc, #504]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d05b      	beq.n	80024fc <HAL_RCC_OscConfig+0x108>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d157      	bne.n	80024fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e242      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x74>
 800245a:	4b76      	ldr	r3, [pc, #472]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a75      	ldr	r2, [pc, #468]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e01d      	b.n	80024a4 <HAL_RCC_OscConfig+0xb0>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x98>
 8002472:	4b70      	ldr	r3, [pc, #448]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6f      	ldr	r2, [pc, #444]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6c      	ldr	r2, [pc, #432]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0xb0>
 800248c:	4b69      	ldr	r3, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a68      	ldr	r2, [pc, #416]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b66      	ldr	r3, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a65      	ldr	r2, [pc, #404]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe ff08 	bl	80012c0 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe ff04 	bl	80012c0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e207      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0xc0>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fef4 	bl	80012c0 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe fef0 	bl	80012c0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1f3      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	4b51      	ldr	r3, [pc, #324]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0xe8>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250a:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800251e:	2b08      	cmp	r3, #8
 8002520:	d11c      	bne.n	800255c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b44      	ldr	r3, [pc, #272]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x152>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1c7      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4937      	ldr	r1, [pc, #220]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	e03a      	b.n	80025d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_RCC_OscConfig+0x244>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7fe fea9 	bl	80012c0 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002572:	f7fe fea5 	bl	80012c0 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1a8      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4925      	ldr	r1, [pc, #148]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_OscConfig+0x244>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe fe88 	bl	80012c0 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b4:	f7fe fe84 	bl	80012c0 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e187      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d036      	beq.n	800264c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d016      	beq.n	8002614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCC_OscConfig+0x248>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe fe68 	bl	80012c0 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f4:	f7fe fe64 	bl	80012c0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e167      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x200>
 8002612:	e01b      	b.n	800264c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_OscConfig+0x248>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7fe fe51 	bl	80012c0 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	e00e      	b.n	8002640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002622:	f7fe fe4d 	bl	80012c0 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d907      	bls.n	8002640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e150      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
 8002634:	40023800 	.word	0x40023800
 8002638:	42470000 	.word	0x42470000
 800263c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	4b88      	ldr	r3, [pc, #544]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ea      	bne.n	8002622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8097 	beq.w	8002788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265e:	4b81      	ldr	r3, [pc, #516]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b7d      	ldr	r3, [pc, #500]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a7c      	ldr	r2, [pc, #496]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b7a      	ldr	r3, [pc, #488]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268a:	4b77      	ldr	r3, [pc, #476]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d118      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002696:	4b74      	ldr	r3, [pc, #464]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a73      	ldr	r2, [pc, #460]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a2:	f7fe fe0d 	bl	80012c0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7fe fe09 	bl	80012c0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e10c      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x2ea>
 80026d0:	4b64      	ldr	r3, [pc, #400]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a63      	ldr	r2, [pc, #396]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	e01c      	b.n	8002718 <HAL_RCC_OscConfig+0x324>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x30c>
 80026e6:	4b5f      	ldr	r3, [pc, #380]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a5e      	ldr	r2, [pc, #376]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	4b5c      	ldr	r3, [pc, #368]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0x324>
 8002700:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	4b55      	ldr	r3, [pc, #340]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a54      	ldr	r2, [pc, #336]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002712:	f023 0304 	bic.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d015      	beq.n	800274c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe fdce 	bl	80012c0 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	e00a      	b.n	800273e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7fe fdca 	bl	80012c0 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0cb      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	4b49      	ldr	r3, [pc, #292]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0ee      	beq.n	8002728 <HAL_RCC_OscConfig+0x334>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7fe fdb8 	bl	80012c0 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe fdb4 	bl	80012c0 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0b5      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276a:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ee      	bne.n	8002754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277c:	4b39      	ldr	r3, [pc, #228]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	4a38      	ldr	r2, [pc, #224]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80a1 	beq.w	80028d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d05c      	beq.n	8002858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d141      	bne.n	800282a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b31      	ldr	r3, [pc, #196]	; (800286c <HAL_RCC_OscConfig+0x478>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fd88 	bl	80012c0 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe fd84 	bl	80012c0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e087      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c6:	4b27      	ldr	r3, [pc, #156]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	019b      	lsls	r3, r3, #6
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	3b01      	subs	r3, #1
 80027ec:	041b      	lsls	r3, r3, #16
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	491b      	ldr	r1, [pc, #108]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x478>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe fd5d 	bl	80012c0 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe fd59 	bl	80012c0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e05c      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x416>
 8002828:	e054      	b.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_RCC_OscConfig+0x478>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fd46 	bl	80012c0 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe fd42 	bl	80012c0 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e045      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x444>
 8002856:	e03d      	b.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e038      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000
 800286c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x4ec>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d028      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d121      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d11a      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a0:	4013      	ands	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d111      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	3b01      	subs	r3, #1
 80028ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800

080028e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0cc      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d90c      	bls.n	8002920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b65      	ldr	r3, [pc, #404]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b8      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d044      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d119      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e067      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4934      	ldr	r1, [pc, #208]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d4:	f7fe fc74 	bl	80012c0 <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7fe fc70 	bl	80012c0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e04f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d20c      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a6a:	f000 f821 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	490a      	ldr	r1, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	5ccb      	ldrb	r3, [r1, r3]
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fbd4 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	08004a90 	.word	0x08004a90
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	20000004 	.word	0x20000004

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab4:	b094      	sub	sp, #80	; 0x50
 8002ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	647b      	str	r3, [r7, #68]	; 0x44
 8002abc:	2300      	movs	r3, #0
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac8:	4b79      	ldr	r3, [pc, #484]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d00d      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	f200 80e1 	bhi.w	8002c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x3a>
 8002ae2:	e0db      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae4:	4b73      	ldr	r3, [pc, #460]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ae8:	e0db      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aea:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aee:	e0d8      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af0:	4b6f      	ldr	r3, [pc, #444]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afa:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b06:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	099b      	lsrs	r3, r3, #6
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b22:	4622      	mov	r2, r4
 8002b24:	462b      	mov	r3, r5
 8002b26:	f04f 0000 	mov.w	r0, #0
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	0159      	lsls	r1, r3, #5
 8002b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b34:	0150      	lsls	r0, r2, #5
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	1a51      	subs	r1, r2, r1
 8002b3e:	6139      	str	r1, [r7, #16]
 8002b40:	4629      	mov	r1, r5
 8002b42:	eb63 0301 	sbc.w	r3, r3, r1
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b54:	4659      	mov	r1, fp
 8002b56:	018b      	lsls	r3, r1, #6
 8002b58:	4651      	mov	r1, sl
 8002b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b5e:	4651      	mov	r1, sl
 8002b60:	018a      	lsls	r2, r1, #6
 8002b62:	4651      	mov	r1, sl
 8002b64:	ebb2 0801 	subs.w	r8, r2, r1
 8002b68:	4659      	mov	r1, fp
 8002b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b82:	4690      	mov	r8, r2
 8002b84:	4699      	mov	r9, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	eb18 0303 	adds.w	r3, r8, r3
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	462b      	mov	r3, r5
 8002b90:	eb49 0303 	adc.w	r3, r9, r3
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	024b      	lsls	r3, r1, #9
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bac:	4621      	mov	r1, r4
 8002bae:	024a      	lsls	r2, r1, #9
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bc0:	f7fd fb56 	bl	8000270 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bcc:	e058      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	4611      	mov	r1, r2
 8002bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	2300      	movs	r3, #0
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002be8:	4642      	mov	r2, r8
 8002bea:	464b      	mov	r3, r9
 8002bec:	f04f 0000 	mov.w	r0, #0
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	0159      	lsls	r1, r3, #5
 8002bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfa:	0150      	lsls	r0, r2, #5
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4641      	mov	r1, r8
 8002c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c06:	4649      	mov	r1, r9
 8002c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c20:	ebb2 040a 	subs.w	r4, r2, sl
 8002c24:	eb63 050b 	sbc.w	r5, r3, fp
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	00eb      	lsls	r3, r5, #3
 8002c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c36:	00e2      	lsls	r2, r4, #3
 8002c38:	4614      	mov	r4, r2
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	4643      	mov	r3, r8
 8002c3e:	18e3      	adds	r3, r4, r3
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	464b      	mov	r3, r9
 8002c44:	eb45 0303 	adc.w	r3, r5, r3
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c56:	4629      	mov	r1, r5
 8002c58:	028b      	lsls	r3, r1, #10
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c60:	4621      	mov	r1, r4
 8002c62:	028a      	lsls	r2, r1, #10
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	61fa      	str	r2, [r7, #28]
 8002c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c74:	f7fd fafc 	bl	8000270 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3750      	adds	r7, #80	; 0x50
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	00f42400 	.word	0x00f42400
 8002cb8:	007a1200 	.word	0x007a1200

08002cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000000 	.word	0x20000000

08002cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cd8:	f7ff fff0 	bl	8002cbc <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0a9b      	lsrs	r3, r3, #10
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08004aa0 	.word	0x08004aa0

08002cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d00:	f7ff ffdc 	bl	8002cbc <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	0b5b      	lsrs	r3, r3, #13
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4903      	ldr	r1, [pc, #12]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	08004aa0 	.word	0x08004aa0

08002d24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e097      	b.n	8002e68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7fe f849 	bl	8000de4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d68:	f023 0307 	bic.w	r3, r3, #7
 8002d6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3304      	adds	r3, #4
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f000 f9b3 	bl	80030e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	4313      	orrs	r3, r2
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002dc4:	f023 030c 	bic.w	r3, r3, #12
 8002dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	4313      	orrs	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	011a      	lsls	r2, r3, #4
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	031b      	lsls	r3, r3, #12
 8002df4:	4313      	orrs	r3, r2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002e0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	4313      	orrs	r3, r2
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d122      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d11b      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0202 	mvn.w	r2, #2
 8002e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8f8 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f8ea 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f8fb 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d122      	bne.n	8002f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d11b      	bne.n	8002f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0204 	mvn.w	r2, #4
 8002ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8ce 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002f0c:	e005      	b.n	8002f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f8c0 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f8d1 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d122      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d11b      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0208 	mvn.w	r2, #8
 8002f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8a4 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f896 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f8a7 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0210 	mvn.w	r2, #16
 8002f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f87a 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f86c 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f87d 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d107      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0201 	mvn.w	r2, #1
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f846 	bl	8003080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffe:	2b80      	cmp	r3, #128	; 0x80
 8003000:	d10e      	bne.n	8003020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	d107      	bne.n	8003020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f988 	bl	8003330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f842 	bl	80030d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b20      	cmp	r3, #32
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b20      	cmp	r3, #32
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0220 	mvn.w	r2, #32
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f952 	bl	800331c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d013      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003102:	d00f      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3d      	ldr	r2, [pc, #244]	; (80031fc <TIM_Base_SetConfig+0x118>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00b      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <TIM_Base_SetConfig+0x11c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <TIM_Base_SetConfig+0x120>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a3a      	ldr	r2, [pc, #232]	; (8003208 <TIM_Base_SetConfig+0x124>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d108      	bne.n	8003136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d027      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2c      	ldr	r2, [pc, #176]	; (80031fc <TIM_Base_SetConfig+0x118>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d023      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a2b      	ldr	r2, [pc, #172]	; (8003200 <TIM_Base_SetConfig+0x11c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01f      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <TIM_Base_SetConfig+0x120>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <TIM_Base_SetConfig+0x124>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d017      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a28      	ldr	r2, [pc, #160]	; (800320c <TIM_Base_SetConfig+0x128>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <TIM_Base_SetConfig+0x12c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00f      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <TIM_Base_SetConfig+0x130>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a25      	ldr	r2, [pc, #148]	; (8003218 <TIM_Base_SetConfig+0x134>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a24      	ldr	r2, [pc, #144]	; (800321c <TIM_Base_SetConfig+0x138>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a23      	ldr	r2, [pc, #140]	; (8003220 <TIM_Base_SetConfig+0x13c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_Base_SetConfig+0xf8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <TIM_Base_SetConfig+0x124>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	615a      	str	r2, [r3, #20]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40010000 	.word	0x40010000
 80031fc:	40000400 	.word	0x40000400
 8003200:	40000800 	.word	0x40000800
 8003204:	40000c00 	.word	0x40000c00
 8003208:	40010400 	.word	0x40010400
 800320c:	40014000 	.word	0x40014000
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800
 8003218:	40001800 	.word	0x40001800
 800321c:	40001c00 	.word	0x40001c00
 8003220:	40002000 	.word	0x40002000

08003224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003238:	2302      	movs	r3, #2
 800323a:	e05a      	b.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d01d      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d018      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10c      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40010000 	.word	0x40010000
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40010400 	.word	0x40010400
 8003314:	40014000 	.word	0x40014000
 8003318:	40001800 	.word	0x40001800

0800331c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e03f      	b.n	80033d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fde4 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	; 0x24
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f929 	bl	80035e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b08a      	sub	sp, #40	; 0x28
 80033e2:	af02      	add	r7, sp, #8
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d17c      	bne.n	80034f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_UART_Transmit+0x2c>
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e075      	b.n	80034fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_UART_Transmit+0x3e>
 8003418:	2302      	movs	r3, #2
 800341a:	e06e      	b.n	80034fa <HAL_UART_Transmit+0x11c>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2221      	movs	r2, #33	; 0x21
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003432:	f7fd ff45 	bl	80012c0 <HAL_GetTick>
 8003436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344c:	d108      	bne.n	8003460 <HAL_UART_Transmit+0x82>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	e003      	b.n	8003468 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003470:	e02a      	b.n	80034c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f840 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e036      	b.n	80034fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	3302      	adds	r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	e007      	b.n	80034ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	3301      	adds	r3, #1
 80034b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1cf      	bne.n	8003472 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	2140      	movs	r1, #64	; 0x40
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f810 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e006      	b.n	80034fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b090      	sub	sp, #64	; 0x40
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e050      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800351a:	d04c      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800351c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 8003522:	f7fd fecd 	bl	80012c0 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800352e:	429a      	cmp	r2, r3
 8003530:	d241      	bcs.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	330c      	adds	r3, #12
 8003550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003552:	637a      	str	r2, [r7, #52]	; 0x34
 8003554:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e5      	bne.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3314      	adds	r3, #20
 800356c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	613b      	str	r3, [r7, #16]
   return(result);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	63bb      	str	r3, [r7, #56]	; 0x38
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3314      	adds	r3, #20
 8003584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003586:	623a      	str	r2, [r7, #32]
 8003588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	69f9      	ldr	r1, [r7, #28]
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	61bb      	str	r3, [r7, #24]
   return(result);
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1e5      	bne.n	8003566 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e00f      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d09f      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3740      	adds	r7, #64	; 0x40
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b0c0      	sub	sp, #256	; 0x100
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fc:	68d9      	ldr	r1, [r3, #12]
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	ea40 0301 	orr.w	r3, r0, r1
 8003608:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	431a      	orrs	r2, r3
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	431a      	orrs	r2, r3
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003638:	f021 010c 	bic.w	r1, r1, #12
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003646:	430b      	orrs	r3, r1
 8003648:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365a:	6999      	ldr	r1, [r3, #24]
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	ea40 0301 	orr.w	r3, r0, r1
 8003666:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b8f      	ldr	r3, [pc, #572]	; (80038ac <UART_SetConfig+0x2cc>)
 8003670:	429a      	cmp	r2, r3
 8003672:	d005      	beq.n	8003680 <UART_SetConfig+0xa0>
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b8d      	ldr	r3, [pc, #564]	; (80038b0 <UART_SetConfig+0x2d0>)
 800367c:	429a      	cmp	r2, r3
 800367e:	d104      	bne.n	800368a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7ff fb3c 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 8003684:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003688:	e003      	b.n	8003692 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800368a:	f7ff fb23 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 800368e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369c:	f040 810c 	bne.w	80038b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036b2:	4622      	mov	r2, r4
 80036b4:	462b      	mov	r3, r5
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80036ba:	415b      	adcs	r3, r3
 80036bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036c2:	4621      	mov	r1, r4
 80036c4:	eb12 0801 	adds.w	r8, r2, r1
 80036c8:	4629      	mov	r1, r5
 80036ca:	eb43 0901 	adc.w	r9, r3, r1
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036e2:	4690      	mov	r8, r2
 80036e4:	4699      	mov	r9, r3
 80036e6:	4623      	mov	r3, r4
 80036e8:	eb18 0303 	adds.w	r3, r8, r3
 80036ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036f0:	462b      	mov	r3, r5
 80036f2:	eb49 0303 	adc.w	r3, r9, r3
 80036f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003706:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800370a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800370e:	460b      	mov	r3, r1
 8003710:	18db      	adds	r3, r3, r3
 8003712:	653b      	str	r3, [r7, #80]	; 0x50
 8003714:	4613      	mov	r3, r2
 8003716:	eb42 0303 	adc.w	r3, r2, r3
 800371a:	657b      	str	r3, [r7, #84]	; 0x54
 800371c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003720:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003724:	f7fc fda4 	bl	8000270 <__aeabi_uldivmod>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4b61      	ldr	r3, [pc, #388]	; (80038b4 <UART_SetConfig+0x2d4>)
 800372e:	fba3 2302 	umull	r2, r3, r3, r2
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	011c      	lsls	r4, r3, #4
 8003736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800373a:	2200      	movs	r2, #0
 800373c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003740:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003744:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003748:	4642      	mov	r2, r8
 800374a:	464b      	mov	r3, r9
 800374c:	1891      	adds	r1, r2, r2
 800374e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003750:	415b      	adcs	r3, r3
 8003752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003754:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003758:	4641      	mov	r1, r8
 800375a:	eb12 0a01 	adds.w	sl, r2, r1
 800375e:	4649      	mov	r1, r9
 8003760:	eb43 0b01 	adc.w	fp, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003770:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003778:	4692      	mov	sl, r2
 800377a:	469b      	mov	fp, r3
 800377c:	4643      	mov	r3, r8
 800377e:	eb1a 0303 	adds.w	r3, sl, r3
 8003782:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003786:	464b      	mov	r3, r9
 8003788:	eb4b 0303 	adc.w	r3, fp, r3
 800378c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800379c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037a4:	460b      	mov	r3, r1
 80037a6:	18db      	adds	r3, r3, r3
 80037a8:	643b      	str	r3, [r7, #64]	; 0x40
 80037aa:	4613      	mov	r3, r2
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	647b      	str	r3, [r7, #68]	; 0x44
 80037b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037ba:	f7fc fd59 	bl	8000270 <__aeabi_uldivmod>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <UART_SetConfig+0x2d4>)
 80037c6:	fba3 2301 	umull	r2, r3, r3, r1
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2264      	movs	r2, #100	; 0x64
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	1acb      	subs	r3, r1, r3
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037da:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <UART_SetConfig+0x2d4>)
 80037dc:	fba3 2302 	umull	r2, r3, r3, r2
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037e8:	441c      	add	r4, r3
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	1891      	adds	r1, r2, r2
 8003802:	63b9      	str	r1, [r7, #56]	; 0x38
 8003804:	415b      	adcs	r3, r3
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800380c:	4641      	mov	r1, r8
 800380e:	1851      	adds	r1, r2, r1
 8003810:	6339      	str	r1, [r7, #48]	; 0x30
 8003812:	4649      	mov	r1, r9
 8003814:	414b      	adcs	r3, r1
 8003816:	637b      	str	r3, [r7, #52]	; 0x34
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003824:	4659      	mov	r1, fp
 8003826:	00cb      	lsls	r3, r1, #3
 8003828:	4651      	mov	r1, sl
 800382a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382e:	4651      	mov	r1, sl
 8003830:	00ca      	lsls	r2, r1, #3
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	4603      	mov	r3, r0
 8003838:	4642      	mov	r2, r8
 800383a:	189b      	adds	r3, r3, r2
 800383c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003840:	464b      	mov	r3, r9
 8003842:	460a      	mov	r2, r1
 8003844:	eb42 0303 	adc.w	r3, r2, r3
 8003848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003858:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800385c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003860:	460b      	mov	r3, r1
 8003862:	18db      	adds	r3, r3, r3
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
 8003866:	4613      	mov	r3, r2
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003872:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003876:	f7fc fcfb 	bl	8000270 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <UART_SetConfig+0x2d4>)
 8003880:	fba3 1302 	umull	r1, r3, r3, r2
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	2164      	movs	r1, #100	; 0x64
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	3332      	adds	r3, #50	; 0x32
 8003892:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <UART_SetConfig+0x2d4>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	f003 0207 	and.w	r2, r3, #7
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4422      	add	r2, r4
 80038a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038a8:	e105      	b.n	8003ab6 <UART_SetConfig+0x4d6>
 80038aa:	bf00      	nop
 80038ac:	40011000 	.word	0x40011000
 80038b0:	40011400 	.word	0x40011400
 80038b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038ca:	4642      	mov	r2, r8
 80038cc:	464b      	mov	r3, r9
 80038ce:	1891      	adds	r1, r2, r2
 80038d0:	6239      	str	r1, [r7, #32]
 80038d2:	415b      	adcs	r3, r3
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038da:	4641      	mov	r1, r8
 80038dc:	1854      	adds	r4, r2, r1
 80038de:	4649      	mov	r1, r9
 80038e0:	eb43 0501 	adc.w	r5, r3, r1
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	00eb      	lsls	r3, r5, #3
 80038ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f2:	00e2      	lsls	r2, r4, #3
 80038f4:	4614      	mov	r4, r2
 80038f6:	461d      	mov	r5, r3
 80038f8:	4643      	mov	r3, r8
 80038fa:	18e3      	adds	r3, r4, r3
 80038fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003900:	464b      	mov	r3, r9
 8003902:	eb45 0303 	adc.w	r3, r5, r3
 8003906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003916:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003926:	4629      	mov	r1, r5
 8003928:	008b      	lsls	r3, r1, #2
 800392a:	4621      	mov	r1, r4
 800392c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003930:	4621      	mov	r1, r4
 8003932:	008a      	lsls	r2, r1, #2
 8003934:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003938:	f7fc fc9a 	bl	8000270 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4b60      	ldr	r3, [pc, #384]	; (8003ac4 <UART_SetConfig+0x4e4>)
 8003942:	fba3 2302 	umull	r2, r3, r3, r2
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	011c      	lsls	r4, r3, #4
 800394a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800394e:	2200      	movs	r2, #0
 8003950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003954:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003958:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800395c:	4642      	mov	r2, r8
 800395e:	464b      	mov	r3, r9
 8003960:	1891      	adds	r1, r2, r2
 8003962:	61b9      	str	r1, [r7, #24]
 8003964:	415b      	adcs	r3, r3
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800396c:	4641      	mov	r1, r8
 800396e:	1851      	adds	r1, r2, r1
 8003970:	6139      	str	r1, [r7, #16]
 8003972:	4649      	mov	r1, r9
 8003974:	414b      	adcs	r3, r1
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003984:	4659      	mov	r1, fp
 8003986:	00cb      	lsls	r3, r1, #3
 8003988:	4651      	mov	r1, sl
 800398a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398e:	4651      	mov	r1, sl
 8003990:	00ca      	lsls	r2, r1, #3
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	4603      	mov	r3, r0
 8003998:	4642      	mov	r2, r8
 800399a:	189b      	adds	r3, r3, r2
 800399c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039a0:	464b      	mov	r3, r9
 80039a2:	460a      	mov	r2, r1
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039c4:	4649      	mov	r1, r9
 80039c6:	008b      	lsls	r3, r1, #2
 80039c8:	4641      	mov	r1, r8
 80039ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ce:	4641      	mov	r1, r8
 80039d0:	008a      	lsls	r2, r1, #2
 80039d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039d6:	f7fc fc4b 	bl	8000270 <__aeabi_uldivmod>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <UART_SetConfig+0x4e4>)
 80039e0:	fba3 1302 	umull	r1, r3, r3, r2
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	2164      	movs	r1, #100	; 0x64
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	3332      	adds	r3, #50	; 0x32
 80039f2:	4a34      	ldr	r2, [pc, #208]	; (8003ac4 <UART_SetConfig+0x4e4>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039fe:	441c      	add	r4, r3
 8003a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a04:	2200      	movs	r2, #0
 8003a06:	673b      	str	r3, [r7, #112]	; 0x70
 8003a08:	677a      	str	r2, [r7, #116]	; 0x74
 8003a0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a0e:	4642      	mov	r2, r8
 8003a10:	464b      	mov	r3, r9
 8003a12:	1891      	adds	r1, r2, r2
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	415b      	adcs	r3, r3
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a1e:	4641      	mov	r1, r8
 8003a20:	1851      	adds	r1, r2, r1
 8003a22:	6039      	str	r1, [r7, #0]
 8003a24:	4649      	mov	r1, r9
 8003a26:	414b      	adcs	r3, r1
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a36:	4659      	mov	r1, fp
 8003a38:	00cb      	lsls	r3, r1, #3
 8003a3a:	4651      	mov	r1, sl
 8003a3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a40:	4651      	mov	r1, sl
 8003a42:	00ca      	lsls	r2, r1, #3
 8003a44:	4610      	mov	r0, r2
 8003a46:	4619      	mov	r1, r3
 8003a48:	4603      	mov	r3, r0
 8003a4a:	4642      	mov	r2, r8
 8003a4c:	189b      	adds	r3, r3, r2
 8003a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a50:	464b      	mov	r3, r9
 8003a52:	460a      	mov	r2, r1
 8003a54:	eb42 0303 	adc.w	r3, r2, r3
 8003a58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	663b      	str	r3, [r7, #96]	; 0x60
 8003a64:	667a      	str	r2, [r7, #100]	; 0x64
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a72:	4649      	mov	r1, r9
 8003a74:	008b      	lsls	r3, r1, #2
 8003a76:	4641      	mov	r1, r8
 8003a78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	008a      	lsls	r2, r1, #2
 8003a80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a84:	f7fc fbf4 	bl	8000270 <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <UART_SetConfig+0x4e4>)
 8003a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	2164      	movs	r1, #100	; 0x64
 8003a96:	fb01 f303 	mul.w	r3, r1, r3
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	3332      	adds	r3, #50	; 0x32
 8003aa0:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <UART_SetConfig+0x4e4>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	f003 020f 	and.w	r2, r3, #15
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4422      	add	r2, r4
 8003ab4:	609a      	str	r2, [r3, #8]
}
 8003ab6:	bf00      	nop
 8003ab8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac2:	bf00      	nop
 8003ac4:	51eb851f 	.word	0x51eb851f

08003ac8 <__errno>:
 8003ac8:	4b01      	ldr	r3, [pc, #4]	; (8003ad0 <__errno+0x8>)
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	2000000c 	.word	0x2000000c

08003ad4 <__libc_init_array>:
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	4d0d      	ldr	r5, [pc, #52]	; (8003b0c <__libc_init_array+0x38>)
 8003ad8:	4c0d      	ldr	r4, [pc, #52]	; (8003b10 <__libc_init_array+0x3c>)
 8003ada:	1b64      	subs	r4, r4, r5
 8003adc:	10a4      	asrs	r4, r4, #2
 8003ade:	2600      	movs	r6, #0
 8003ae0:	42a6      	cmp	r6, r4
 8003ae2:	d109      	bne.n	8003af8 <__libc_init_array+0x24>
 8003ae4:	4d0b      	ldr	r5, [pc, #44]	; (8003b14 <__libc_init_array+0x40>)
 8003ae6:	4c0c      	ldr	r4, [pc, #48]	; (8003b18 <__libc_init_array+0x44>)
 8003ae8:	f000 ffae 	bl	8004a48 <_init>
 8003aec:	1b64      	subs	r4, r4, r5
 8003aee:	10a4      	asrs	r4, r4, #2
 8003af0:	2600      	movs	r6, #0
 8003af2:	42a6      	cmp	r6, r4
 8003af4:	d105      	bne.n	8003b02 <__libc_init_array+0x2e>
 8003af6:	bd70      	pop	{r4, r5, r6, pc}
 8003af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003afc:	4798      	blx	r3
 8003afe:	3601      	adds	r6, #1
 8003b00:	e7ee      	b.n	8003ae0 <__libc_init_array+0xc>
 8003b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b06:	4798      	blx	r3
 8003b08:	3601      	adds	r6, #1
 8003b0a:	e7f2      	b.n	8003af2 <__libc_init_array+0x1e>
 8003b0c:	08004b48 	.word	0x08004b48
 8003b10:	08004b48 	.word	0x08004b48
 8003b14:	08004b48 	.word	0x08004b48
 8003b18:	08004b4c 	.word	0x08004b4c

08003b1c <memset>:
 8003b1c:	4402      	add	r2, r0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d100      	bne.n	8003b26 <memset+0xa>
 8003b24:	4770      	bx	lr
 8003b26:	f803 1b01 	strb.w	r1, [r3], #1
 8003b2a:	e7f9      	b.n	8003b20 <memset+0x4>

08003b2c <iprintf>:
 8003b2c:	b40f      	push	{r0, r1, r2, r3}
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <iprintf+0x2c>)
 8003b30:	b513      	push	{r0, r1, r4, lr}
 8003b32:	681c      	ldr	r4, [r3, #0]
 8003b34:	b124      	cbz	r4, 8003b40 <iprintf+0x14>
 8003b36:	69a3      	ldr	r3, [r4, #24]
 8003b38:	b913      	cbnz	r3, 8003b40 <iprintf+0x14>
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f000 f866 	bl	8003c0c <__sinit>
 8003b40:	ab05      	add	r3, sp, #20
 8003b42:	9a04      	ldr	r2, [sp, #16]
 8003b44:	68a1      	ldr	r1, [r4, #8]
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f000 f9bd 	bl	8003ec8 <_vfiprintf_r>
 8003b4e:	b002      	add	sp, #8
 8003b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b54:	b004      	add	sp, #16
 8003b56:	4770      	bx	lr
 8003b58:	2000000c 	.word	0x2000000c

08003b5c <std>:
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	b510      	push	{r4, lr}
 8003b60:	4604      	mov	r4, r0
 8003b62:	e9c0 3300 	strd	r3, r3, [r0]
 8003b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b6a:	6083      	str	r3, [r0, #8]
 8003b6c:	8181      	strh	r1, [r0, #12]
 8003b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b70:	81c2      	strh	r2, [r0, #14]
 8003b72:	6183      	str	r3, [r0, #24]
 8003b74:	4619      	mov	r1, r3
 8003b76:	2208      	movs	r2, #8
 8003b78:	305c      	adds	r0, #92	; 0x5c
 8003b7a:	f7ff ffcf 	bl	8003b1c <memset>
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <std+0x38>)
 8003b80:	6263      	str	r3, [r4, #36]	; 0x24
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <std+0x3c>)
 8003b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <std+0x40>)
 8003b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <std+0x44>)
 8003b8c:	6224      	str	r4, [r4, #32]
 8003b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b90:	bd10      	pop	{r4, pc}
 8003b92:	bf00      	nop
 8003b94:	08004471 	.word	0x08004471
 8003b98:	08004493 	.word	0x08004493
 8003b9c:	080044cb 	.word	0x080044cb
 8003ba0:	080044ef 	.word	0x080044ef

08003ba4 <_cleanup_r>:
 8003ba4:	4901      	ldr	r1, [pc, #4]	; (8003bac <_cleanup_r+0x8>)
 8003ba6:	f000 b8af 	b.w	8003d08 <_fwalk_reent>
 8003baa:	bf00      	nop
 8003bac:	080047c9 	.word	0x080047c9

08003bb0 <__sfmoreglue>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	2268      	movs	r2, #104	; 0x68
 8003bb4:	1e4d      	subs	r5, r1, #1
 8003bb6:	4355      	muls	r5, r2
 8003bb8:	460e      	mov	r6, r1
 8003bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bbe:	f000 f8e5 	bl	8003d8c <_malloc_r>
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	b140      	cbz	r0, 8003bd8 <__sfmoreglue+0x28>
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8003bcc:	300c      	adds	r0, #12
 8003bce:	60a0      	str	r0, [r4, #8]
 8003bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bd4:	f7ff ffa2 	bl	8003b1c <memset>
 8003bd8:	4620      	mov	r0, r4
 8003bda:	bd70      	pop	{r4, r5, r6, pc}

08003bdc <__sfp_lock_acquire>:
 8003bdc:	4801      	ldr	r0, [pc, #4]	; (8003be4 <__sfp_lock_acquire+0x8>)
 8003bde:	f000 b8b3 	b.w	8003d48 <__retarget_lock_acquire_recursive>
 8003be2:	bf00      	nop
 8003be4:	200001d5 	.word	0x200001d5

08003be8 <__sfp_lock_release>:
 8003be8:	4801      	ldr	r0, [pc, #4]	; (8003bf0 <__sfp_lock_release+0x8>)
 8003bea:	f000 b8ae 	b.w	8003d4a <__retarget_lock_release_recursive>
 8003bee:	bf00      	nop
 8003bf0:	200001d5 	.word	0x200001d5

08003bf4 <__sinit_lock_acquire>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	; (8003bfc <__sinit_lock_acquire+0x8>)
 8003bf6:	f000 b8a7 	b.w	8003d48 <__retarget_lock_acquire_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	200001d6 	.word	0x200001d6

08003c00 <__sinit_lock_release>:
 8003c00:	4801      	ldr	r0, [pc, #4]	; (8003c08 <__sinit_lock_release+0x8>)
 8003c02:	f000 b8a2 	b.w	8003d4a <__retarget_lock_release_recursive>
 8003c06:	bf00      	nop
 8003c08:	200001d6 	.word	0x200001d6

08003c0c <__sinit>:
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	4604      	mov	r4, r0
 8003c10:	f7ff fff0 	bl	8003bf4 <__sinit_lock_acquire>
 8003c14:	69a3      	ldr	r3, [r4, #24]
 8003c16:	b11b      	cbz	r3, 8003c20 <__sinit+0x14>
 8003c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c1c:	f7ff bff0 	b.w	8003c00 <__sinit_lock_release>
 8003c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c24:	6523      	str	r3, [r4, #80]	; 0x50
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <__sinit+0x68>)
 8003c28:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <__sinit+0x6c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c2e:	42a3      	cmp	r3, r4
 8003c30:	bf04      	itt	eq
 8003c32:	2301      	moveq	r3, #1
 8003c34:	61a3      	streq	r3, [r4, #24]
 8003c36:	4620      	mov	r0, r4
 8003c38:	f000 f820 	bl	8003c7c <__sfp>
 8003c3c:	6060      	str	r0, [r4, #4]
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 f81c 	bl	8003c7c <__sfp>
 8003c44:	60a0      	str	r0, [r4, #8]
 8003c46:	4620      	mov	r0, r4
 8003c48:	f000 f818 	bl	8003c7c <__sfp>
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	60e0      	str	r0, [r4, #12]
 8003c50:	2104      	movs	r1, #4
 8003c52:	6860      	ldr	r0, [r4, #4]
 8003c54:	f7ff ff82 	bl	8003b5c <std>
 8003c58:	68a0      	ldr	r0, [r4, #8]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	2109      	movs	r1, #9
 8003c5e:	f7ff ff7d 	bl	8003b5c <std>
 8003c62:	68e0      	ldr	r0, [r4, #12]
 8003c64:	2202      	movs	r2, #2
 8003c66:	2112      	movs	r1, #18
 8003c68:	f7ff ff78 	bl	8003b5c <std>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	61a3      	str	r3, [r4, #24]
 8003c70:	e7d2      	b.n	8003c18 <__sinit+0xc>
 8003c72:	bf00      	nop
 8003c74:	08004aa8 	.word	0x08004aa8
 8003c78:	08003ba5 	.word	0x08003ba5

08003c7c <__sfp>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	4607      	mov	r7, r0
 8003c80:	f7ff ffac 	bl	8003bdc <__sfp_lock_acquire>
 8003c84:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <__sfp+0x84>)
 8003c86:	681e      	ldr	r6, [r3, #0]
 8003c88:	69b3      	ldr	r3, [r6, #24]
 8003c8a:	b913      	cbnz	r3, 8003c92 <__sfp+0x16>
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f7ff ffbd 	bl	8003c0c <__sinit>
 8003c92:	3648      	adds	r6, #72	; 0x48
 8003c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	d503      	bpl.n	8003ca4 <__sfp+0x28>
 8003c9c:	6833      	ldr	r3, [r6, #0]
 8003c9e:	b30b      	cbz	r3, 8003ce4 <__sfp+0x68>
 8003ca0:	6836      	ldr	r6, [r6, #0]
 8003ca2:	e7f7      	b.n	8003c94 <__sfp+0x18>
 8003ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ca8:	b9d5      	cbnz	r5, 8003ce0 <__sfp+0x64>
 8003caa:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <__sfp+0x88>)
 8003cac:	60e3      	str	r3, [r4, #12]
 8003cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8003cb4:	f000 f847 	bl	8003d46 <__retarget_lock_init_recursive>
 8003cb8:	f7ff ff96 	bl	8003be8 <__sfp_lock_release>
 8003cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003cc4:	6025      	str	r5, [r4, #0]
 8003cc6:	61a5      	str	r5, [r4, #24]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	4629      	mov	r1, r5
 8003ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003cd0:	f7ff ff24 	bl	8003b1c <memset>
 8003cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003cdc:	4620      	mov	r0, r4
 8003cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ce0:	3468      	adds	r4, #104	; 0x68
 8003ce2:	e7d9      	b.n	8003c98 <__sfp+0x1c>
 8003ce4:	2104      	movs	r1, #4
 8003ce6:	4638      	mov	r0, r7
 8003ce8:	f7ff ff62 	bl	8003bb0 <__sfmoreglue>
 8003cec:	4604      	mov	r4, r0
 8003cee:	6030      	str	r0, [r6, #0]
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d1d5      	bne.n	8003ca0 <__sfp+0x24>
 8003cf4:	f7ff ff78 	bl	8003be8 <__sfp_lock_release>
 8003cf8:	230c      	movs	r3, #12
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	e7ee      	b.n	8003cdc <__sfp+0x60>
 8003cfe:	bf00      	nop
 8003d00:	08004aa8 	.word	0x08004aa8
 8003d04:	ffff0001 	.word	0xffff0001

08003d08 <_fwalk_reent>:
 8003d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	4688      	mov	r8, r1
 8003d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d14:	2700      	movs	r7, #0
 8003d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8003d1e:	d505      	bpl.n	8003d2c <_fwalk_reent+0x24>
 8003d20:	6824      	ldr	r4, [r4, #0]
 8003d22:	2c00      	cmp	r4, #0
 8003d24:	d1f7      	bne.n	8003d16 <_fwalk_reent+0xe>
 8003d26:	4638      	mov	r0, r7
 8003d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2c:	89ab      	ldrh	r3, [r5, #12]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d907      	bls.n	8003d42 <_fwalk_reent+0x3a>
 8003d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d36:	3301      	adds	r3, #1
 8003d38:	d003      	beq.n	8003d42 <_fwalk_reent+0x3a>
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	47c0      	blx	r8
 8003d40:	4307      	orrs	r7, r0
 8003d42:	3568      	adds	r5, #104	; 0x68
 8003d44:	e7e9      	b.n	8003d1a <_fwalk_reent+0x12>

08003d46 <__retarget_lock_init_recursive>:
 8003d46:	4770      	bx	lr

08003d48 <__retarget_lock_acquire_recursive>:
 8003d48:	4770      	bx	lr

08003d4a <__retarget_lock_release_recursive>:
 8003d4a:	4770      	bx	lr

08003d4c <sbrk_aligned>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	4e0e      	ldr	r6, [pc, #56]	; (8003d88 <sbrk_aligned+0x3c>)
 8003d50:	460c      	mov	r4, r1
 8003d52:	6831      	ldr	r1, [r6, #0]
 8003d54:	4605      	mov	r5, r0
 8003d56:	b911      	cbnz	r1, 8003d5e <sbrk_aligned+0x12>
 8003d58:	f000 fb7a 	bl	8004450 <_sbrk_r>
 8003d5c:	6030      	str	r0, [r6, #0]
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 fb75 	bl	8004450 <_sbrk_r>
 8003d66:	1c43      	adds	r3, r0, #1
 8003d68:	d00a      	beq.n	8003d80 <sbrk_aligned+0x34>
 8003d6a:	1cc4      	adds	r4, r0, #3
 8003d6c:	f024 0403 	bic.w	r4, r4, #3
 8003d70:	42a0      	cmp	r0, r4
 8003d72:	d007      	beq.n	8003d84 <sbrk_aligned+0x38>
 8003d74:	1a21      	subs	r1, r4, r0
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 fb6a 	bl	8004450 <_sbrk_r>
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d101      	bne.n	8003d84 <sbrk_aligned+0x38>
 8003d80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d84:	4620      	mov	r0, r4
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	200001dc 	.word	0x200001dc

08003d8c <_malloc_r>:
 8003d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d90:	1ccd      	adds	r5, r1, #3
 8003d92:	f025 0503 	bic.w	r5, r5, #3
 8003d96:	3508      	adds	r5, #8
 8003d98:	2d0c      	cmp	r5, #12
 8003d9a:	bf38      	it	cc
 8003d9c:	250c      	movcc	r5, #12
 8003d9e:	2d00      	cmp	r5, #0
 8003da0:	4607      	mov	r7, r0
 8003da2:	db01      	blt.n	8003da8 <_malloc_r+0x1c>
 8003da4:	42a9      	cmp	r1, r5
 8003da6:	d905      	bls.n	8003db4 <_malloc_r+0x28>
 8003da8:	230c      	movs	r3, #12
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	2600      	movs	r6, #0
 8003dae:	4630      	mov	r0, r6
 8003db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db4:	4e2e      	ldr	r6, [pc, #184]	; (8003e70 <_malloc_r+0xe4>)
 8003db6:	f000 fdbb 	bl	8004930 <__malloc_lock>
 8003dba:	6833      	ldr	r3, [r6, #0]
 8003dbc:	461c      	mov	r4, r3
 8003dbe:	bb34      	cbnz	r4, 8003e0e <_malloc_r+0x82>
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f7ff ffc2 	bl	8003d4c <sbrk_aligned>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	4604      	mov	r4, r0
 8003dcc:	d14d      	bne.n	8003e6a <_malloc_r+0xde>
 8003dce:	6834      	ldr	r4, [r6, #0]
 8003dd0:	4626      	mov	r6, r4
 8003dd2:	2e00      	cmp	r6, #0
 8003dd4:	d140      	bne.n	8003e58 <_malloc_r+0xcc>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	4631      	mov	r1, r6
 8003dda:	4638      	mov	r0, r7
 8003ddc:	eb04 0803 	add.w	r8, r4, r3
 8003de0:	f000 fb36 	bl	8004450 <_sbrk_r>
 8003de4:	4580      	cmp	r8, r0
 8003de6:	d13a      	bne.n	8003e5e <_malloc_r+0xd2>
 8003de8:	6821      	ldr	r1, [r4, #0]
 8003dea:	3503      	adds	r5, #3
 8003dec:	1a6d      	subs	r5, r5, r1
 8003dee:	f025 0503 	bic.w	r5, r5, #3
 8003df2:	3508      	adds	r5, #8
 8003df4:	2d0c      	cmp	r5, #12
 8003df6:	bf38      	it	cc
 8003df8:	250c      	movcc	r5, #12
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	4638      	mov	r0, r7
 8003dfe:	f7ff ffa5 	bl	8003d4c <sbrk_aligned>
 8003e02:	3001      	adds	r0, #1
 8003e04:	d02b      	beq.n	8003e5e <_malloc_r+0xd2>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	442b      	add	r3, r5
 8003e0a:	6023      	str	r3, [r4, #0]
 8003e0c:	e00e      	b.n	8003e2c <_malloc_r+0xa0>
 8003e0e:	6822      	ldr	r2, [r4, #0]
 8003e10:	1b52      	subs	r2, r2, r5
 8003e12:	d41e      	bmi.n	8003e52 <_malloc_r+0xc6>
 8003e14:	2a0b      	cmp	r2, #11
 8003e16:	d916      	bls.n	8003e46 <_malloc_r+0xba>
 8003e18:	1961      	adds	r1, r4, r5
 8003e1a:	42a3      	cmp	r3, r4
 8003e1c:	6025      	str	r5, [r4, #0]
 8003e1e:	bf18      	it	ne
 8003e20:	6059      	strne	r1, [r3, #4]
 8003e22:	6863      	ldr	r3, [r4, #4]
 8003e24:	bf08      	it	eq
 8003e26:	6031      	streq	r1, [r6, #0]
 8003e28:	5162      	str	r2, [r4, r5]
 8003e2a:	604b      	str	r3, [r1, #4]
 8003e2c:	4638      	mov	r0, r7
 8003e2e:	f104 060b 	add.w	r6, r4, #11
 8003e32:	f000 fd83 	bl	800493c <__malloc_unlock>
 8003e36:	f026 0607 	bic.w	r6, r6, #7
 8003e3a:	1d23      	adds	r3, r4, #4
 8003e3c:	1af2      	subs	r2, r6, r3
 8003e3e:	d0b6      	beq.n	8003dae <_malloc_r+0x22>
 8003e40:	1b9b      	subs	r3, r3, r6
 8003e42:	50a3      	str	r3, [r4, r2]
 8003e44:	e7b3      	b.n	8003dae <_malloc_r+0x22>
 8003e46:	6862      	ldr	r2, [r4, #4]
 8003e48:	42a3      	cmp	r3, r4
 8003e4a:	bf0c      	ite	eq
 8003e4c:	6032      	streq	r2, [r6, #0]
 8003e4e:	605a      	strne	r2, [r3, #4]
 8003e50:	e7ec      	b.n	8003e2c <_malloc_r+0xa0>
 8003e52:	4623      	mov	r3, r4
 8003e54:	6864      	ldr	r4, [r4, #4]
 8003e56:	e7b2      	b.n	8003dbe <_malloc_r+0x32>
 8003e58:	4634      	mov	r4, r6
 8003e5a:	6876      	ldr	r6, [r6, #4]
 8003e5c:	e7b9      	b.n	8003dd2 <_malloc_r+0x46>
 8003e5e:	230c      	movs	r3, #12
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	4638      	mov	r0, r7
 8003e64:	f000 fd6a 	bl	800493c <__malloc_unlock>
 8003e68:	e7a1      	b.n	8003dae <_malloc_r+0x22>
 8003e6a:	6025      	str	r5, [r4, #0]
 8003e6c:	e7de      	b.n	8003e2c <_malloc_r+0xa0>
 8003e6e:	bf00      	nop
 8003e70:	200001d8 	.word	0x200001d8

08003e74 <__sfputc_r>:
 8003e74:	6893      	ldr	r3, [r2, #8]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	b410      	push	{r4}
 8003e7c:	6093      	str	r3, [r2, #8]
 8003e7e:	da08      	bge.n	8003e92 <__sfputc_r+0x1e>
 8003e80:	6994      	ldr	r4, [r2, #24]
 8003e82:	42a3      	cmp	r3, r4
 8003e84:	db01      	blt.n	8003e8a <__sfputc_r+0x16>
 8003e86:	290a      	cmp	r1, #10
 8003e88:	d103      	bne.n	8003e92 <__sfputc_r+0x1e>
 8003e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e8e:	f000 bb33 	b.w	80044f8 <__swbuf_r>
 8003e92:	6813      	ldr	r3, [r2, #0]
 8003e94:	1c58      	adds	r0, r3, #1
 8003e96:	6010      	str	r0, [r2, #0]
 8003e98:	7019      	strb	r1, [r3, #0]
 8003e9a:	4608      	mov	r0, r1
 8003e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <__sfputs_r>:
 8003ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	460f      	mov	r7, r1
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	18d5      	adds	r5, r2, r3
 8003eac:	42ac      	cmp	r4, r5
 8003eae:	d101      	bne.n	8003eb4 <__sfputs_r+0x12>
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	e007      	b.n	8003ec4 <__sfputs_r+0x22>
 8003eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb8:	463a      	mov	r2, r7
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f7ff ffda 	bl	8003e74 <__sfputc_r>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d1f3      	bne.n	8003eac <__sfputs_r+0xa>
 8003ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ec8 <_vfiprintf_r>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	460d      	mov	r5, r1
 8003ece:	b09d      	sub	sp, #116	; 0x74
 8003ed0:	4614      	mov	r4, r2
 8003ed2:	4698      	mov	r8, r3
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	b118      	cbz	r0, 8003ee0 <_vfiprintf_r+0x18>
 8003ed8:	6983      	ldr	r3, [r0, #24]
 8003eda:	b90b      	cbnz	r3, 8003ee0 <_vfiprintf_r+0x18>
 8003edc:	f7ff fe96 	bl	8003c0c <__sinit>
 8003ee0:	4b89      	ldr	r3, [pc, #548]	; (8004108 <_vfiprintf_r+0x240>)
 8003ee2:	429d      	cmp	r5, r3
 8003ee4:	d11b      	bne.n	8003f1e <_vfiprintf_r+0x56>
 8003ee6:	6875      	ldr	r5, [r6, #4]
 8003ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eea:	07d9      	lsls	r1, r3, #31
 8003eec:	d405      	bmi.n	8003efa <_vfiprintf_r+0x32>
 8003eee:	89ab      	ldrh	r3, [r5, #12]
 8003ef0:	059a      	lsls	r2, r3, #22
 8003ef2:	d402      	bmi.n	8003efa <_vfiprintf_r+0x32>
 8003ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ef6:	f7ff ff27 	bl	8003d48 <__retarget_lock_acquire_recursive>
 8003efa:	89ab      	ldrh	r3, [r5, #12]
 8003efc:	071b      	lsls	r3, r3, #28
 8003efe:	d501      	bpl.n	8003f04 <_vfiprintf_r+0x3c>
 8003f00:	692b      	ldr	r3, [r5, #16]
 8003f02:	b9eb      	cbnz	r3, 8003f40 <_vfiprintf_r+0x78>
 8003f04:	4629      	mov	r1, r5
 8003f06:	4630      	mov	r0, r6
 8003f08:	f000 fb5a 	bl	80045c0 <__swsetup_r>
 8003f0c:	b1c0      	cbz	r0, 8003f40 <_vfiprintf_r+0x78>
 8003f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f10:	07dc      	lsls	r4, r3, #31
 8003f12:	d50e      	bpl.n	8003f32 <_vfiprintf_r+0x6a>
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f18:	b01d      	add	sp, #116	; 0x74
 8003f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f1e:	4b7b      	ldr	r3, [pc, #492]	; (800410c <_vfiprintf_r+0x244>)
 8003f20:	429d      	cmp	r5, r3
 8003f22:	d101      	bne.n	8003f28 <_vfiprintf_r+0x60>
 8003f24:	68b5      	ldr	r5, [r6, #8]
 8003f26:	e7df      	b.n	8003ee8 <_vfiprintf_r+0x20>
 8003f28:	4b79      	ldr	r3, [pc, #484]	; (8004110 <_vfiprintf_r+0x248>)
 8003f2a:	429d      	cmp	r5, r3
 8003f2c:	bf08      	it	eq
 8003f2e:	68f5      	ldreq	r5, [r6, #12]
 8003f30:	e7da      	b.n	8003ee8 <_vfiprintf_r+0x20>
 8003f32:	89ab      	ldrh	r3, [r5, #12]
 8003f34:	0598      	lsls	r0, r3, #22
 8003f36:	d4ed      	bmi.n	8003f14 <_vfiprintf_r+0x4c>
 8003f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f3a:	f7ff ff06 	bl	8003d4a <__retarget_lock_release_recursive>
 8003f3e:	e7e9      	b.n	8003f14 <_vfiprintf_r+0x4c>
 8003f40:	2300      	movs	r3, #0
 8003f42:	9309      	str	r3, [sp, #36]	; 0x24
 8003f44:	2320      	movs	r3, #32
 8003f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f4e:	2330      	movs	r3, #48	; 0x30
 8003f50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004114 <_vfiprintf_r+0x24c>
 8003f54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f58:	f04f 0901 	mov.w	r9, #1
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	469a      	mov	sl, r3
 8003f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f64:	b10a      	cbz	r2, 8003f6a <_vfiprintf_r+0xa2>
 8003f66:	2a25      	cmp	r2, #37	; 0x25
 8003f68:	d1f9      	bne.n	8003f5e <_vfiprintf_r+0x96>
 8003f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8003f6e:	d00b      	beq.n	8003f88 <_vfiprintf_r+0xc0>
 8003f70:	465b      	mov	r3, fp
 8003f72:	4622      	mov	r2, r4
 8003f74:	4629      	mov	r1, r5
 8003f76:	4630      	mov	r0, r6
 8003f78:	f7ff ff93 	bl	8003ea2 <__sfputs_r>
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	f000 80aa 	beq.w	80040d6 <_vfiprintf_r+0x20e>
 8003f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f84:	445a      	add	r2, fp
 8003f86:	9209      	str	r2, [sp, #36]	; 0x24
 8003f88:	f89a 3000 	ldrb.w	r3, [sl]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80a2 	beq.w	80040d6 <_vfiprintf_r+0x20e>
 8003f92:	2300      	movs	r3, #0
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f9c:	f10a 0a01 	add.w	sl, sl, #1
 8003fa0:	9304      	str	r3, [sp, #16]
 8003fa2:	9307      	str	r3, [sp, #28]
 8003fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8003faa:	4654      	mov	r4, sl
 8003fac:	2205      	movs	r2, #5
 8003fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fb2:	4858      	ldr	r0, [pc, #352]	; (8004114 <_vfiprintf_r+0x24c>)
 8003fb4:	f7fc f90c 	bl	80001d0 <memchr>
 8003fb8:	9a04      	ldr	r2, [sp, #16]
 8003fba:	b9d8      	cbnz	r0, 8003ff4 <_vfiprintf_r+0x12c>
 8003fbc:	06d1      	lsls	r1, r2, #27
 8003fbe:	bf44      	itt	mi
 8003fc0:	2320      	movmi	r3, #32
 8003fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fc6:	0713      	lsls	r3, r2, #28
 8003fc8:	bf44      	itt	mi
 8003fca:	232b      	movmi	r3, #43	; 0x2b
 8003fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8003fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd6:	d015      	beq.n	8004004 <_vfiprintf_r+0x13c>
 8003fd8:	9a07      	ldr	r2, [sp, #28]
 8003fda:	4654      	mov	r4, sl
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f04f 0c0a 	mov.w	ip, #10
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fe8:	3b30      	subs	r3, #48	; 0x30
 8003fea:	2b09      	cmp	r3, #9
 8003fec:	d94e      	bls.n	800408c <_vfiprintf_r+0x1c4>
 8003fee:	b1b0      	cbz	r0, 800401e <_vfiprintf_r+0x156>
 8003ff0:	9207      	str	r2, [sp, #28]
 8003ff2:	e014      	b.n	800401e <_vfiprintf_r+0x156>
 8003ff4:	eba0 0308 	sub.w	r3, r0, r8
 8003ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	9304      	str	r3, [sp, #16]
 8004000:	46a2      	mov	sl, r4
 8004002:	e7d2      	b.n	8003faa <_vfiprintf_r+0xe2>
 8004004:	9b03      	ldr	r3, [sp, #12]
 8004006:	1d19      	adds	r1, r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	9103      	str	r1, [sp, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	bfbb      	ittet	lt
 8004010:	425b      	neglt	r3, r3
 8004012:	f042 0202 	orrlt.w	r2, r2, #2
 8004016:	9307      	strge	r3, [sp, #28]
 8004018:	9307      	strlt	r3, [sp, #28]
 800401a:	bfb8      	it	lt
 800401c:	9204      	strlt	r2, [sp, #16]
 800401e:	7823      	ldrb	r3, [r4, #0]
 8004020:	2b2e      	cmp	r3, #46	; 0x2e
 8004022:	d10c      	bne.n	800403e <_vfiprintf_r+0x176>
 8004024:	7863      	ldrb	r3, [r4, #1]
 8004026:	2b2a      	cmp	r3, #42	; 0x2a
 8004028:	d135      	bne.n	8004096 <_vfiprintf_r+0x1ce>
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	1d1a      	adds	r2, r3, #4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	9203      	str	r2, [sp, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	bfb8      	it	lt
 8004036:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800403a:	3402      	adds	r4, #2
 800403c:	9305      	str	r3, [sp, #20]
 800403e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004124 <_vfiprintf_r+0x25c>
 8004042:	7821      	ldrb	r1, [r4, #0]
 8004044:	2203      	movs	r2, #3
 8004046:	4650      	mov	r0, sl
 8004048:	f7fc f8c2 	bl	80001d0 <memchr>
 800404c:	b140      	cbz	r0, 8004060 <_vfiprintf_r+0x198>
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	eba0 000a 	sub.w	r0, r0, sl
 8004054:	fa03 f000 	lsl.w	r0, r3, r0
 8004058:	9b04      	ldr	r3, [sp, #16]
 800405a:	4303      	orrs	r3, r0
 800405c:	3401      	adds	r4, #1
 800405e:	9304      	str	r3, [sp, #16]
 8004060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004064:	482c      	ldr	r0, [pc, #176]	; (8004118 <_vfiprintf_r+0x250>)
 8004066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800406a:	2206      	movs	r2, #6
 800406c:	f7fc f8b0 	bl	80001d0 <memchr>
 8004070:	2800      	cmp	r0, #0
 8004072:	d03f      	beq.n	80040f4 <_vfiprintf_r+0x22c>
 8004074:	4b29      	ldr	r3, [pc, #164]	; (800411c <_vfiprintf_r+0x254>)
 8004076:	bb1b      	cbnz	r3, 80040c0 <_vfiprintf_r+0x1f8>
 8004078:	9b03      	ldr	r3, [sp, #12]
 800407a:	3307      	adds	r3, #7
 800407c:	f023 0307 	bic.w	r3, r3, #7
 8004080:	3308      	adds	r3, #8
 8004082:	9303      	str	r3, [sp, #12]
 8004084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004086:	443b      	add	r3, r7
 8004088:	9309      	str	r3, [sp, #36]	; 0x24
 800408a:	e767      	b.n	8003f5c <_vfiprintf_r+0x94>
 800408c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004090:	460c      	mov	r4, r1
 8004092:	2001      	movs	r0, #1
 8004094:	e7a5      	b.n	8003fe2 <_vfiprintf_r+0x11a>
 8004096:	2300      	movs	r3, #0
 8004098:	3401      	adds	r4, #1
 800409a:	9305      	str	r3, [sp, #20]
 800409c:	4619      	mov	r1, r3
 800409e:	f04f 0c0a 	mov.w	ip, #10
 80040a2:	4620      	mov	r0, r4
 80040a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040a8:	3a30      	subs	r2, #48	; 0x30
 80040aa:	2a09      	cmp	r2, #9
 80040ac:	d903      	bls.n	80040b6 <_vfiprintf_r+0x1ee>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0c5      	beq.n	800403e <_vfiprintf_r+0x176>
 80040b2:	9105      	str	r1, [sp, #20]
 80040b4:	e7c3      	b.n	800403e <_vfiprintf_r+0x176>
 80040b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ba:	4604      	mov	r4, r0
 80040bc:	2301      	movs	r3, #1
 80040be:	e7f0      	b.n	80040a2 <_vfiprintf_r+0x1da>
 80040c0:	ab03      	add	r3, sp, #12
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	462a      	mov	r2, r5
 80040c6:	4b16      	ldr	r3, [pc, #88]	; (8004120 <_vfiprintf_r+0x258>)
 80040c8:	a904      	add	r1, sp, #16
 80040ca:	4630      	mov	r0, r6
 80040cc:	f3af 8000 	nop.w
 80040d0:	4607      	mov	r7, r0
 80040d2:	1c78      	adds	r0, r7, #1
 80040d4:	d1d6      	bne.n	8004084 <_vfiprintf_r+0x1bc>
 80040d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040d8:	07d9      	lsls	r1, r3, #31
 80040da:	d405      	bmi.n	80040e8 <_vfiprintf_r+0x220>
 80040dc:	89ab      	ldrh	r3, [r5, #12]
 80040de:	059a      	lsls	r2, r3, #22
 80040e0:	d402      	bmi.n	80040e8 <_vfiprintf_r+0x220>
 80040e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040e4:	f7ff fe31 	bl	8003d4a <__retarget_lock_release_recursive>
 80040e8:	89ab      	ldrh	r3, [r5, #12]
 80040ea:	065b      	lsls	r3, r3, #25
 80040ec:	f53f af12 	bmi.w	8003f14 <_vfiprintf_r+0x4c>
 80040f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040f2:	e711      	b.n	8003f18 <_vfiprintf_r+0x50>
 80040f4:	ab03      	add	r3, sp, #12
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	462a      	mov	r2, r5
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <_vfiprintf_r+0x258>)
 80040fc:	a904      	add	r1, sp, #16
 80040fe:	4630      	mov	r0, r6
 8004100:	f000 f880 	bl	8004204 <_printf_i>
 8004104:	e7e4      	b.n	80040d0 <_vfiprintf_r+0x208>
 8004106:	bf00      	nop
 8004108:	08004acc 	.word	0x08004acc
 800410c:	08004aec 	.word	0x08004aec
 8004110:	08004aac 	.word	0x08004aac
 8004114:	08004b0c 	.word	0x08004b0c
 8004118:	08004b16 	.word	0x08004b16
 800411c:	00000000 	.word	0x00000000
 8004120:	08003ea3 	.word	0x08003ea3
 8004124:	08004b12 	.word	0x08004b12

08004128 <_printf_common>:
 8004128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800412c:	4616      	mov	r6, r2
 800412e:	4699      	mov	r9, r3
 8004130:	688a      	ldr	r2, [r1, #8]
 8004132:	690b      	ldr	r3, [r1, #16]
 8004134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004138:	4293      	cmp	r3, r2
 800413a:	bfb8      	it	lt
 800413c:	4613      	movlt	r3, r2
 800413e:	6033      	str	r3, [r6, #0]
 8004140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004144:	4607      	mov	r7, r0
 8004146:	460c      	mov	r4, r1
 8004148:	b10a      	cbz	r2, 800414e <_printf_common+0x26>
 800414a:	3301      	adds	r3, #1
 800414c:	6033      	str	r3, [r6, #0]
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	0699      	lsls	r1, r3, #26
 8004152:	bf42      	ittt	mi
 8004154:	6833      	ldrmi	r3, [r6, #0]
 8004156:	3302      	addmi	r3, #2
 8004158:	6033      	strmi	r3, [r6, #0]
 800415a:	6825      	ldr	r5, [r4, #0]
 800415c:	f015 0506 	ands.w	r5, r5, #6
 8004160:	d106      	bne.n	8004170 <_printf_common+0x48>
 8004162:	f104 0a19 	add.w	sl, r4, #25
 8004166:	68e3      	ldr	r3, [r4, #12]
 8004168:	6832      	ldr	r2, [r6, #0]
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	42ab      	cmp	r3, r5
 800416e:	dc26      	bgt.n	80041be <_printf_common+0x96>
 8004170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004174:	1e13      	subs	r3, r2, #0
 8004176:	6822      	ldr	r2, [r4, #0]
 8004178:	bf18      	it	ne
 800417a:	2301      	movne	r3, #1
 800417c:	0692      	lsls	r2, r2, #26
 800417e:	d42b      	bmi.n	80041d8 <_printf_common+0xb0>
 8004180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004184:	4649      	mov	r1, r9
 8004186:	4638      	mov	r0, r7
 8004188:	47c0      	blx	r8
 800418a:	3001      	adds	r0, #1
 800418c:	d01e      	beq.n	80041cc <_printf_common+0xa4>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	68e5      	ldr	r5, [r4, #12]
 8004192:	6832      	ldr	r2, [r6, #0]
 8004194:	f003 0306 	and.w	r3, r3, #6
 8004198:	2b04      	cmp	r3, #4
 800419a:	bf08      	it	eq
 800419c:	1aad      	subeq	r5, r5, r2
 800419e:	68a3      	ldr	r3, [r4, #8]
 80041a0:	6922      	ldr	r2, [r4, #16]
 80041a2:	bf0c      	ite	eq
 80041a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041a8:	2500      	movne	r5, #0
 80041aa:	4293      	cmp	r3, r2
 80041ac:	bfc4      	itt	gt
 80041ae:	1a9b      	subgt	r3, r3, r2
 80041b0:	18ed      	addgt	r5, r5, r3
 80041b2:	2600      	movs	r6, #0
 80041b4:	341a      	adds	r4, #26
 80041b6:	42b5      	cmp	r5, r6
 80041b8:	d11a      	bne.n	80041f0 <_printf_common+0xc8>
 80041ba:	2000      	movs	r0, #0
 80041bc:	e008      	b.n	80041d0 <_printf_common+0xa8>
 80041be:	2301      	movs	r3, #1
 80041c0:	4652      	mov	r2, sl
 80041c2:	4649      	mov	r1, r9
 80041c4:	4638      	mov	r0, r7
 80041c6:	47c0      	blx	r8
 80041c8:	3001      	adds	r0, #1
 80041ca:	d103      	bne.n	80041d4 <_printf_common+0xac>
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d4:	3501      	adds	r5, #1
 80041d6:	e7c6      	b.n	8004166 <_printf_common+0x3e>
 80041d8:	18e1      	adds	r1, r4, r3
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	2030      	movs	r0, #48	; 0x30
 80041de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041e2:	4422      	add	r2, r4
 80041e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041ec:	3302      	adds	r3, #2
 80041ee:	e7c7      	b.n	8004180 <_printf_common+0x58>
 80041f0:	2301      	movs	r3, #1
 80041f2:	4622      	mov	r2, r4
 80041f4:	4649      	mov	r1, r9
 80041f6:	4638      	mov	r0, r7
 80041f8:	47c0      	blx	r8
 80041fa:	3001      	adds	r0, #1
 80041fc:	d0e6      	beq.n	80041cc <_printf_common+0xa4>
 80041fe:	3601      	adds	r6, #1
 8004200:	e7d9      	b.n	80041b6 <_printf_common+0x8e>
	...

08004204 <_printf_i>:
 8004204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004208:	7e0f      	ldrb	r7, [r1, #24]
 800420a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800420c:	2f78      	cmp	r7, #120	; 0x78
 800420e:	4691      	mov	r9, r2
 8004210:	4680      	mov	r8, r0
 8004212:	460c      	mov	r4, r1
 8004214:	469a      	mov	sl, r3
 8004216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800421a:	d807      	bhi.n	800422c <_printf_i+0x28>
 800421c:	2f62      	cmp	r7, #98	; 0x62
 800421e:	d80a      	bhi.n	8004236 <_printf_i+0x32>
 8004220:	2f00      	cmp	r7, #0
 8004222:	f000 80d8 	beq.w	80043d6 <_printf_i+0x1d2>
 8004226:	2f58      	cmp	r7, #88	; 0x58
 8004228:	f000 80a3 	beq.w	8004372 <_printf_i+0x16e>
 800422c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004234:	e03a      	b.n	80042ac <_printf_i+0xa8>
 8004236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800423a:	2b15      	cmp	r3, #21
 800423c:	d8f6      	bhi.n	800422c <_printf_i+0x28>
 800423e:	a101      	add	r1, pc, #4	; (adr r1, 8004244 <_printf_i+0x40>)
 8004240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004244:	0800429d 	.word	0x0800429d
 8004248:	080042b1 	.word	0x080042b1
 800424c:	0800422d 	.word	0x0800422d
 8004250:	0800422d 	.word	0x0800422d
 8004254:	0800422d 	.word	0x0800422d
 8004258:	0800422d 	.word	0x0800422d
 800425c:	080042b1 	.word	0x080042b1
 8004260:	0800422d 	.word	0x0800422d
 8004264:	0800422d 	.word	0x0800422d
 8004268:	0800422d 	.word	0x0800422d
 800426c:	0800422d 	.word	0x0800422d
 8004270:	080043bd 	.word	0x080043bd
 8004274:	080042e1 	.word	0x080042e1
 8004278:	0800439f 	.word	0x0800439f
 800427c:	0800422d 	.word	0x0800422d
 8004280:	0800422d 	.word	0x0800422d
 8004284:	080043df 	.word	0x080043df
 8004288:	0800422d 	.word	0x0800422d
 800428c:	080042e1 	.word	0x080042e1
 8004290:	0800422d 	.word	0x0800422d
 8004294:	0800422d 	.word	0x0800422d
 8004298:	080043a7 	.word	0x080043a7
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	1d1a      	adds	r2, r3, #4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	602a      	str	r2, [r5, #0]
 80042a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0a3      	b.n	80043f8 <_printf_i+0x1f4>
 80042b0:	6820      	ldr	r0, [r4, #0]
 80042b2:	6829      	ldr	r1, [r5, #0]
 80042b4:	0606      	lsls	r6, r0, #24
 80042b6:	f101 0304 	add.w	r3, r1, #4
 80042ba:	d50a      	bpl.n	80042d2 <_printf_i+0xce>
 80042bc:	680e      	ldr	r6, [r1, #0]
 80042be:	602b      	str	r3, [r5, #0]
 80042c0:	2e00      	cmp	r6, #0
 80042c2:	da03      	bge.n	80042cc <_printf_i+0xc8>
 80042c4:	232d      	movs	r3, #45	; 0x2d
 80042c6:	4276      	negs	r6, r6
 80042c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042cc:	485e      	ldr	r0, [pc, #376]	; (8004448 <_printf_i+0x244>)
 80042ce:	230a      	movs	r3, #10
 80042d0:	e019      	b.n	8004306 <_printf_i+0x102>
 80042d2:	680e      	ldr	r6, [r1, #0]
 80042d4:	602b      	str	r3, [r5, #0]
 80042d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042da:	bf18      	it	ne
 80042dc:	b236      	sxthne	r6, r6
 80042de:	e7ef      	b.n	80042c0 <_printf_i+0xbc>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	6820      	ldr	r0, [r4, #0]
 80042e4:	1d19      	adds	r1, r3, #4
 80042e6:	6029      	str	r1, [r5, #0]
 80042e8:	0601      	lsls	r1, r0, #24
 80042ea:	d501      	bpl.n	80042f0 <_printf_i+0xec>
 80042ec:	681e      	ldr	r6, [r3, #0]
 80042ee:	e002      	b.n	80042f6 <_printf_i+0xf2>
 80042f0:	0646      	lsls	r6, r0, #25
 80042f2:	d5fb      	bpl.n	80042ec <_printf_i+0xe8>
 80042f4:	881e      	ldrh	r6, [r3, #0]
 80042f6:	4854      	ldr	r0, [pc, #336]	; (8004448 <_printf_i+0x244>)
 80042f8:	2f6f      	cmp	r7, #111	; 0x6f
 80042fa:	bf0c      	ite	eq
 80042fc:	2308      	moveq	r3, #8
 80042fe:	230a      	movne	r3, #10
 8004300:	2100      	movs	r1, #0
 8004302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004306:	6865      	ldr	r5, [r4, #4]
 8004308:	60a5      	str	r5, [r4, #8]
 800430a:	2d00      	cmp	r5, #0
 800430c:	bfa2      	ittt	ge
 800430e:	6821      	ldrge	r1, [r4, #0]
 8004310:	f021 0104 	bicge.w	r1, r1, #4
 8004314:	6021      	strge	r1, [r4, #0]
 8004316:	b90e      	cbnz	r6, 800431c <_printf_i+0x118>
 8004318:	2d00      	cmp	r5, #0
 800431a:	d04d      	beq.n	80043b8 <_printf_i+0x1b4>
 800431c:	4615      	mov	r5, r2
 800431e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004322:	fb03 6711 	mls	r7, r3, r1, r6
 8004326:	5dc7      	ldrb	r7, [r0, r7]
 8004328:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800432c:	4637      	mov	r7, r6
 800432e:	42bb      	cmp	r3, r7
 8004330:	460e      	mov	r6, r1
 8004332:	d9f4      	bls.n	800431e <_printf_i+0x11a>
 8004334:	2b08      	cmp	r3, #8
 8004336:	d10b      	bne.n	8004350 <_printf_i+0x14c>
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	07de      	lsls	r6, r3, #31
 800433c:	d508      	bpl.n	8004350 <_printf_i+0x14c>
 800433e:	6923      	ldr	r3, [r4, #16]
 8004340:	6861      	ldr	r1, [r4, #4]
 8004342:	4299      	cmp	r1, r3
 8004344:	bfde      	ittt	le
 8004346:	2330      	movle	r3, #48	; 0x30
 8004348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800434c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004350:	1b52      	subs	r2, r2, r5
 8004352:	6122      	str	r2, [r4, #16]
 8004354:	f8cd a000 	str.w	sl, [sp]
 8004358:	464b      	mov	r3, r9
 800435a:	aa03      	add	r2, sp, #12
 800435c:	4621      	mov	r1, r4
 800435e:	4640      	mov	r0, r8
 8004360:	f7ff fee2 	bl	8004128 <_printf_common>
 8004364:	3001      	adds	r0, #1
 8004366:	d14c      	bne.n	8004402 <_printf_i+0x1fe>
 8004368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800436c:	b004      	add	sp, #16
 800436e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004372:	4835      	ldr	r0, [pc, #212]	; (8004448 <_printf_i+0x244>)
 8004374:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004378:	6829      	ldr	r1, [r5, #0]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004380:	6029      	str	r1, [r5, #0]
 8004382:	061d      	lsls	r5, r3, #24
 8004384:	d514      	bpl.n	80043b0 <_printf_i+0x1ac>
 8004386:	07df      	lsls	r7, r3, #31
 8004388:	bf44      	itt	mi
 800438a:	f043 0320 	orrmi.w	r3, r3, #32
 800438e:	6023      	strmi	r3, [r4, #0]
 8004390:	b91e      	cbnz	r6, 800439a <_printf_i+0x196>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	f023 0320 	bic.w	r3, r3, #32
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	2310      	movs	r3, #16
 800439c:	e7b0      	b.n	8004300 <_printf_i+0xfc>
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	f043 0320 	orr.w	r3, r3, #32
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	2378      	movs	r3, #120	; 0x78
 80043a8:	4828      	ldr	r0, [pc, #160]	; (800444c <_printf_i+0x248>)
 80043aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043ae:	e7e3      	b.n	8004378 <_printf_i+0x174>
 80043b0:	0659      	lsls	r1, r3, #25
 80043b2:	bf48      	it	mi
 80043b4:	b2b6      	uxthmi	r6, r6
 80043b6:	e7e6      	b.n	8004386 <_printf_i+0x182>
 80043b8:	4615      	mov	r5, r2
 80043ba:	e7bb      	b.n	8004334 <_printf_i+0x130>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	6826      	ldr	r6, [r4, #0]
 80043c0:	6961      	ldr	r1, [r4, #20]
 80043c2:	1d18      	adds	r0, r3, #4
 80043c4:	6028      	str	r0, [r5, #0]
 80043c6:	0635      	lsls	r5, r6, #24
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	d501      	bpl.n	80043d0 <_printf_i+0x1cc>
 80043cc:	6019      	str	r1, [r3, #0]
 80043ce:	e002      	b.n	80043d6 <_printf_i+0x1d2>
 80043d0:	0670      	lsls	r0, r6, #25
 80043d2:	d5fb      	bpl.n	80043cc <_printf_i+0x1c8>
 80043d4:	8019      	strh	r1, [r3, #0]
 80043d6:	2300      	movs	r3, #0
 80043d8:	6123      	str	r3, [r4, #16]
 80043da:	4615      	mov	r5, r2
 80043dc:	e7ba      	b.n	8004354 <_printf_i+0x150>
 80043de:	682b      	ldr	r3, [r5, #0]
 80043e0:	1d1a      	adds	r2, r3, #4
 80043e2:	602a      	str	r2, [r5, #0]
 80043e4:	681d      	ldr	r5, [r3, #0]
 80043e6:	6862      	ldr	r2, [r4, #4]
 80043e8:	2100      	movs	r1, #0
 80043ea:	4628      	mov	r0, r5
 80043ec:	f7fb fef0 	bl	80001d0 <memchr>
 80043f0:	b108      	cbz	r0, 80043f6 <_printf_i+0x1f2>
 80043f2:	1b40      	subs	r0, r0, r5
 80043f4:	6060      	str	r0, [r4, #4]
 80043f6:	6863      	ldr	r3, [r4, #4]
 80043f8:	6123      	str	r3, [r4, #16]
 80043fa:	2300      	movs	r3, #0
 80043fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004400:	e7a8      	b.n	8004354 <_printf_i+0x150>
 8004402:	6923      	ldr	r3, [r4, #16]
 8004404:	462a      	mov	r2, r5
 8004406:	4649      	mov	r1, r9
 8004408:	4640      	mov	r0, r8
 800440a:	47d0      	blx	sl
 800440c:	3001      	adds	r0, #1
 800440e:	d0ab      	beq.n	8004368 <_printf_i+0x164>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	079b      	lsls	r3, r3, #30
 8004414:	d413      	bmi.n	800443e <_printf_i+0x23a>
 8004416:	68e0      	ldr	r0, [r4, #12]
 8004418:	9b03      	ldr	r3, [sp, #12]
 800441a:	4298      	cmp	r0, r3
 800441c:	bfb8      	it	lt
 800441e:	4618      	movlt	r0, r3
 8004420:	e7a4      	b.n	800436c <_printf_i+0x168>
 8004422:	2301      	movs	r3, #1
 8004424:	4632      	mov	r2, r6
 8004426:	4649      	mov	r1, r9
 8004428:	4640      	mov	r0, r8
 800442a:	47d0      	blx	sl
 800442c:	3001      	adds	r0, #1
 800442e:	d09b      	beq.n	8004368 <_printf_i+0x164>
 8004430:	3501      	adds	r5, #1
 8004432:	68e3      	ldr	r3, [r4, #12]
 8004434:	9903      	ldr	r1, [sp, #12]
 8004436:	1a5b      	subs	r3, r3, r1
 8004438:	42ab      	cmp	r3, r5
 800443a:	dcf2      	bgt.n	8004422 <_printf_i+0x21e>
 800443c:	e7eb      	b.n	8004416 <_printf_i+0x212>
 800443e:	2500      	movs	r5, #0
 8004440:	f104 0619 	add.w	r6, r4, #25
 8004444:	e7f5      	b.n	8004432 <_printf_i+0x22e>
 8004446:	bf00      	nop
 8004448:	08004b1d 	.word	0x08004b1d
 800444c:	08004b2e 	.word	0x08004b2e

08004450 <_sbrk_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	4d06      	ldr	r5, [pc, #24]	; (800446c <_sbrk_r+0x1c>)
 8004454:	2300      	movs	r3, #0
 8004456:	4604      	mov	r4, r0
 8004458:	4608      	mov	r0, r1
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	f7fc fe58 	bl	8001110 <_sbrk>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d102      	bne.n	800446a <_sbrk_r+0x1a>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	b103      	cbz	r3, 800446a <_sbrk_r+0x1a>
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	200001e0 	.word	0x200001e0

08004470 <__sread>:
 8004470:	b510      	push	{r4, lr}
 8004472:	460c      	mov	r4, r1
 8004474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004478:	f000 fab2 	bl	80049e0 <_read_r>
 800447c:	2800      	cmp	r0, #0
 800447e:	bfab      	itete	ge
 8004480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004482:	89a3      	ldrhlt	r3, [r4, #12]
 8004484:	181b      	addge	r3, r3, r0
 8004486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800448a:	bfac      	ite	ge
 800448c:	6563      	strge	r3, [r4, #84]	; 0x54
 800448e:	81a3      	strhlt	r3, [r4, #12]
 8004490:	bd10      	pop	{r4, pc}

08004492 <__swrite>:
 8004492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004496:	461f      	mov	r7, r3
 8004498:	898b      	ldrh	r3, [r1, #12]
 800449a:	05db      	lsls	r3, r3, #23
 800449c:	4605      	mov	r5, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	4616      	mov	r6, r2
 80044a2:	d505      	bpl.n	80044b0 <__swrite+0x1e>
 80044a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a8:	2302      	movs	r3, #2
 80044aa:	2200      	movs	r2, #0
 80044ac:	f000 f9c8 	bl	8004840 <_lseek_r>
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ba:	81a3      	strh	r3, [r4, #12]
 80044bc:	4632      	mov	r2, r6
 80044be:	463b      	mov	r3, r7
 80044c0:	4628      	mov	r0, r5
 80044c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044c6:	f000 b869 	b.w	800459c <_write_r>

080044ca <__sseek>:
 80044ca:	b510      	push	{r4, lr}
 80044cc:	460c      	mov	r4, r1
 80044ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d2:	f000 f9b5 	bl	8004840 <_lseek_r>
 80044d6:	1c43      	adds	r3, r0, #1
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	bf15      	itete	ne
 80044dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80044de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044e6:	81a3      	strheq	r3, [r4, #12]
 80044e8:	bf18      	it	ne
 80044ea:	81a3      	strhne	r3, [r4, #12]
 80044ec:	bd10      	pop	{r4, pc}

080044ee <__sclose>:
 80044ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f2:	f000 b8d3 	b.w	800469c <_close_r>
	...

080044f8 <__swbuf_r>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	460e      	mov	r6, r1
 80044fc:	4614      	mov	r4, r2
 80044fe:	4605      	mov	r5, r0
 8004500:	b118      	cbz	r0, 800450a <__swbuf_r+0x12>
 8004502:	6983      	ldr	r3, [r0, #24]
 8004504:	b90b      	cbnz	r3, 800450a <__swbuf_r+0x12>
 8004506:	f7ff fb81 	bl	8003c0c <__sinit>
 800450a:	4b21      	ldr	r3, [pc, #132]	; (8004590 <__swbuf_r+0x98>)
 800450c:	429c      	cmp	r4, r3
 800450e:	d12b      	bne.n	8004568 <__swbuf_r+0x70>
 8004510:	686c      	ldr	r4, [r5, #4]
 8004512:	69a3      	ldr	r3, [r4, #24]
 8004514:	60a3      	str	r3, [r4, #8]
 8004516:	89a3      	ldrh	r3, [r4, #12]
 8004518:	071a      	lsls	r2, r3, #28
 800451a:	d52f      	bpl.n	800457c <__swbuf_r+0x84>
 800451c:	6923      	ldr	r3, [r4, #16]
 800451e:	b36b      	cbz	r3, 800457c <__swbuf_r+0x84>
 8004520:	6923      	ldr	r3, [r4, #16]
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	1ac0      	subs	r0, r0, r3
 8004526:	6963      	ldr	r3, [r4, #20]
 8004528:	b2f6      	uxtb	r6, r6
 800452a:	4283      	cmp	r3, r0
 800452c:	4637      	mov	r7, r6
 800452e:	dc04      	bgt.n	800453a <__swbuf_r+0x42>
 8004530:	4621      	mov	r1, r4
 8004532:	4628      	mov	r0, r5
 8004534:	f000 f948 	bl	80047c8 <_fflush_r>
 8004538:	bb30      	cbnz	r0, 8004588 <__swbuf_r+0x90>
 800453a:	68a3      	ldr	r3, [r4, #8]
 800453c:	3b01      	subs	r3, #1
 800453e:	60a3      	str	r3, [r4, #8]
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	6022      	str	r2, [r4, #0]
 8004546:	701e      	strb	r6, [r3, #0]
 8004548:	6963      	ldr	r3, [r4, #20]
 800454a:	3001      	adds	r0, #1
 800454c:	4283      	cmp	r3, r0
 800454e:	d004      	beq.n	800455a <__swbuf_r+0x62>
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	07db      	lsls	r3, r3, #31
 8004554:	d506      	bpl.n	8004564 <__swbuf_r+0x6c>
 8004556:	2e0a      	cmp	r6, #10
 8004558:	d104      	bne.n	8004564 <__swbuf_r+0x6c>
 800455a:	4621      	mov	r1, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 f933 	bl	80047c8 <_fflush_r>
 8004562:	b988      	cbnz	r0, 8004588 <__swbuf_r+0x90>
 8004564:	4638      	mov	r0, r7
 8004566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <__swbuf_r+0x9c>)
 800456a:	429c      	cmp	r4, r3
 800456c:	d101      	bne.n	8004572 <__swbuf_r+0x7a>
 800456e:	68ac      	ldr	r4, [r5, #8]
 8004570:	e7cf      	b.n	8004512 <__swbuf_r+0x1a>
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <__swbuf_r+0xa0>)
 8004574:	429c      	cmp	r4, r3
 8004576:	bf08      	it	eq
 8004578:	68ec      	ldreq	r4, [r5, #12]
 800457a:	e7ca      	b.n	8004512 <__swbuf_r+0x1a>
 800457c:	4621      	mov	r1, r4
 800457e:	4628      	mov	r0, r5
 8004580:	f000 f81e 	bl	80045c0 <__swsetup_r>
 8004584:	2800      	cmp	r0, #0
 8004586:	d0cb      	beq.n	8004520 <__swbuf_r+0x28>
 8004588:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800458c:	e7ea      	b.n	8004564 <__swbuf_r+0x6c>
 800458e:	bf00      	nop
 8004590:	08004acc 	.word	0x08004acc
 8004594:	08004aec 	.word	0x08004aec
 8004598:	08004aac 	.word	0x08004aac

0800459c <_write_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d07      	ldr	r5, [pc, #28]	; (80045bc <_write_r+0x20>)
 80045a0:	4604      	mov	r4, r0
 80045a2:	4608      	mov	r0, r1
 80045a4:	4611      	mov	r1, r2
 80045a6:	2200      	movs	r2, #0
 80045a8:	602a      	str	r2, [r5, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7fb ffe2 	bl	8000574 <_write>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_write_r+0x1e>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_write_r+0x1e>
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	200001e0 	.word	0x200001e0

080045c0 <__swsetup_r>:
 80045c0:	4b32      	ldr	r3, [pc, #200]	; (800468c <__swsetup_r+0xcc>)
 80045c2:	b570      	push	{r4, r5, r6, lr}
 80045c4:	681d      	ldr	r5, [r3, #0]
 80045c6:	4606      	mov	r6, r0
 80045c8:	460c      	mov	r4, r1
 80045ca:	b125      	cbz	r5, 80045d6 <__swsetup_r+0x16>
 80045cc:	69ab      	ldr	r3, [r5, #24]
 80045ce:	b913      	cbnz	r3, 80045d6 <__swsetup_r+0x16>
 80045d0:	4628      	mov	r0, r5
 80045d2:	f7ff fb1b 	bl	8003c0c <__sinit>
 80045d6:	4b2e      	ldr	r3, [pc, #184]	; (8004690 <__swsetup_r+0xd0>)
 80045d8:	429c      	cmp	r4, r3
 80045da:	d10f      	bne.n	80045fc <__swsetup_r+0x3c>
 80045dc:	686c      	ldr	r4, [r5, #4]
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045e4:	0719      	lsls	r1, r3, #28
 80045e6:	d42c      	bmi.n	8004642 <__swsetup_r+0x82>
 80045e8:	06dd      	lsls	r5, r3, #27
 80045ea:	d411      	bmi.n	8004610 <__swsetup_r+0x50>
 80045ec:	2309      	movs	r3, #9
 80045ee:	6033      	str	r3, [r6, #0]
 80045f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045f4:	81a3      	strh	r3, [r4, #12]
 80045f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045fa:	e03e      	b.n	800467a <__swsetup_r+0xba>
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <__swsetup_r+0xd4>)
 80045fe:	429c      	cmp	r4, r3
 8004600:	d101      	bne.n	8004606 <__swsetup_r+0x46>
 8004602:	68ac      	ldr	r4, [r5, #8]
 8004604:	e7eb      	b.n	80045de <__swsetup_r+0x1e>
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <__swsetup_r+0xd8>)
 8004608:	429c      	cmp	r4, r3
 800460a:	bf08      	it	eq
 800460c:	68ec      	ldreq	r4, [r5, #12]
 800460e:	e7e6      	b.n	80045de <__swsetup_r+0x1e>
 8004610:	0758      	lsls	r0, r3, #29
 8004612:	d512      	bpl.n	800463a <__swsetup_r+0x7a>
 8004614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004616:	b141      	cbz	r1, 800462a <__swsetup_r+0x6a>
 8004618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800461c:	4299      	cmp	r1, r3
 800461e:	d002      	beq.n	8004626 <__swsetup_r+0x66>
 8004620:	4630      	mov	r0, r6
 8004622:	f000 f991 	bl	8004948 <_free_r>
 8004626:	2300      	movs	r3, #0
 8004628:	6363      	str	r3, [r4, #52]	; 0x34
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	2300      	movs	r3, #0
 8004634:	6063      	str	r3, [r4, #4]
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	f043 0308 	orr.w	r3, r3, #8
 8004640:	81a3      	strh	r3, [r4, #12]
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	b94b      	cbnz	r3, 800465a <__swsetup_r+0x9a>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800464c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004650:	d003      	beq.n	800465a <__swsetup_r+0x9a>
 8004652:	4621      	mov	r1, r4
 8004654:	4630      	mov	r0, r6
 8004656:	f000 f92b 	bl	80048b0 <__smakebuf_r>
 800465a:	89a0      	ldrh	r0, [r4, #12]
 800465c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004660:	f010 0301 	ands.w	r3, r0, #1
 8004664:	d00a      	beq.n	800467c <__swsetup_r+0xbc>
 8004666:	2300      	movs	r3, #0
 8004668:	60a3      	str	r3, [r4, #8]
 800466a:	6963      	ldr	r3, [r4, #20]
 800466c:	425b      	negs	r3, r3
 800466e:	61a3      	str	r3, [r4, #24]
 8004670:	6923      	ldr	r3, [r4, #16]
 8004672:	b943      	cbnz	r3, 8004686 <__swsetup_r+0xc6>
 8004674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004678:	d1ba      	bne.n	80045f0 <__swsetup_r+0x30>
 800467a:	bd70      	pop	{r4, r5, r6, pc}
 800467c:	0781      	lsls	r1, r0, #30
 800467e:	bf58      	it	pl
 8004680:	6963      	ldrpl	r3, [r4, #20]
 8004682:	60a3      	str	r3, [r4, #8]
 8004684:	e7f4      	b.n	8004670 <__swsetup_r+0xb0>
 8004686:	2000      	movs	r0, #0
 8004688:	e7f7      	b.n	800467a <__swsetup_r+0xba>
 800468a:	bf00      	nop
 800468c:	2000000c 	.word	0x2000000c
 8004690:	08004acc 	.word	0x08004acc
 8004694:	08004aec 	.word	0x08004aec
 8004698:	08004aac 	.word	0x08004aac

0800469c <_close_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4d06      	ldr	r5, [pc, #24]	; (80046b8 <_close_r+0x1c>)
 80046a0:	2300      	movs	r3, #0
 80046a2:	4604      	mov	r4, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	f7fc fcfd 	bl	80010a6 <_close>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_close_r+0x1a>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_close_r+0x1a>
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	200001e0 	.word	0x200001e0

080046bc <__sflush_r>:
 80046bc:	898a      	ldrh	r2, [r1, #12]
 80046be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c2:	4605      	mov	r5, r0
 80046c4:	0710      	lsls	r0, r2, #28
 80046c6:	460c      	mov	r4, r1
 80046c8:	d458      	bmi.n	800477c <__sflush_r+0xc0>
 80046ca:	684b      	ldr	r3, [r1, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	dc05      	bgt.n	80046dc <__sflush_r+0x20>
 80046d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	dc02      	bgt.n	80046dc <__sflush_r+0x20>
 80046d6:	2000      	movs	r0, #0
 80046d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046de:	2e00      	cmp	r6, #0
 80046e0:	d0f9      	beq.n	80046d6 <__sflush_r+0x1a>
 80046e2:	2300      	movs	r3, #0
 80046e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046e8:	682f      	ldr	r7, [r5, #0]
 80046ea:	602b      	str	r3, [r5, #0]
 80046ec:	d032      	beq.n	8004754 <__sflush_r+0x98>
 80046ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	075a      	lsls	r2, r3, #29
 80046f4:	d505      	bpl.n	8004702 <__sflush_r+0x46>
 80046f6:	6863      	ldr	r3, [r4, #4]
 80046f8:	1ac0      	subs	r0, r0, r3
 80046fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046fc:	b10b      	cbz	r3, 8004702 <__sflush_r+0x46>
 80046fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004700:	1ac0      	subs	r0, r0, r3
 8004702:	2300      	movs	r3, #0
 8004704:	4602      	mov	r2, r0
 8004706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004708:	6a21      	ldr	r1, [r4, #32]
 800470a:	4628      	mov	r0, r5
 800470c:	47b0      	blx	r6
 800470e:	1c43      	adds	r3, r0, #1
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	d106      	bne.n	8004722 <__sflush_r+0x66>
 8004714:	6829      	ldr	r1, [r5, #0]
 8004716:	291d      	cmp	r1, #29
 8004718:	d82c      	bhi.n	8004774 <__sflush_r+0xb8>
 800471a:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <__sflush_r+0x108>)
 800471c:	40ca      	lsrs	r2, r1
 800471e:	07d6      	lsls	r6, r2, #31
 8004720:	d528      	bpl.n	8004774 <__sflush_r+0xb8>
 8004722:	2200      	movs	r2, #0
 8004724:	6062      	str	r2, [r4, #4]
 8004726:	04d9      	lsls	r1, r3, #19
 8004728:	6922      	ldr	r2, [r4, #16]
 800472a:	6022      	str	r2, [r4, #0]
 800472c:	d504      	bpl.n	8004738 <__sflush_r+0x7c>
 800472e:	1c42      	adds	r2, r0, #1
 8004730:	d101      	bne.n	8004736 <__sflush_r+0x7a>
 8004732:	682b      	ldr	r3, [r5, #0]
 8004734:	b903      	cbnz	r3, 8004738 <__sflush_r+0x7c>
 8004736:	6560      	str	r0, [r4, #84]	; 0x54
 8004738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800473a:	602f      	str	r7, [r5, #0]
 800473c:	2900      	cmp	r1, #0
 800473e:	d0ca      	beq.n	80046d6 <__sflush_r+0x1a>
 8004740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004744:	4299      	cmp	r1, r3
 8004746:	d002      	beq.n	800474e <__sflush_r+0x92>
 8004748:	4628      	mov	r0, r5
 800474a:	f000 f8fd 	bl	8004948 <_free_r>
 800474e:	2000      	movs	r0, #0
 8004750:	6360      	str	r0, [r4, #52]	; 0x34
 8004752:	e7c1      	b.n	80046d8 <__sflush_r+0x1c>
 8004754:	6a21      	ldr	r1, [r4, #32]
 8004756:	2301      	movs	r3, #1
 8004758:	4628      	mov	r0, r5
 800475a:	47b0      	blx	r6
 800475c:	1c41      	adds	r1, r0, #1
 800475e:	d1c7      	bne.n	80046f0 <__sflush_r+0x34>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0c4      	beq.n	80046f0 <__sflush_r+0x34>
 8004766:	2b1d      	cmp	r3, #29
 8004768:	d001      	beq.n	800476e <__sflush_r+0xb2>
 800476a:	2b16      	cmp	r3, #22
 800476c:	d101      	bne.n	8004772 <__sflush_r+0xb6>
 800476e:	602f      	str	r7, [r5, #0]
 8004770:	e7b1      	b.n	80046d6 <__sflush_r+0x1a>
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004778:	81a3      	strh	r3, [r4, #12]
 800477a:	e7ad      	b.n	80046d8 <__sflush_r+0x1c>
 800477c:	690f      	ldr	r7, [r1, #16]
 800477e:	2f00      	cmp	r7, #0
 8004780:	d0a9      	beq.n	80046d6 <__sflush_r+0x1a>
 8004782:	0793      	lsls	r3, r2, #30
 8004784:	680e      	ldr	r6, [r1, #0]
 8004786:	bf08      	it	eq
 8004788:	694b      	ldreq	r3, [r1, #20]
 800478a:	600f      	str	r7, [r1, #0]
 800478c:	bf18      	it	ne
 800478e:	2300      	movne	r3, #0
 8004790:	eba6 0807 	sub.w	r8, r6, r7
 8004794:	608b      	str	r3, [r1, #8]
 8004796:	f1b8 0f00 	cmp.w	r8, #0
 800479a:	dd9c      	ble.n	80046d6 <__sflush_r+0x1a>
 800479c:	6a21      	ldr	r1, [r4, #32]
 800479e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047a0:	4643      	mov	r3, r8
 80047a2:	463a      	mov	r2, r7
 80047a4:	4628      	mov	r0, r5
 80047a6:	47b0      	blx	r6
 80047a8:	2800      	cmp	r0, #0
 80047aa:	dc06      	bgt.n	80047ba <__sflush_r+0xfe>
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047b8:	e78e      	b.n	80046d8 <__sflush_r+0x1c>
 80047ba:	4407      	add	r7, r0
 80047bc:	eba8 0800 	sub.w	r8, r8, r0
 80047c0:	e7e9      	b.n	8004796 <__sflush_r+0xda>
 80047c2:	bf00      	nop
 80047c4:	20400001 	.word	0x20400001

080047c8 <_fflush_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	690b      	ldr	r3, [r1, #16]
 80047cc:	4605      	mov	r5, r0
 80047ce:	460c      	mov	r4, r1
 80047d0:	b913      	cbnz	r3, 80047d8 <_fflush_r+0x10>
 80047d2:	2500      	movs	r5, #0
 80047d4:	4628      	mov	r0, r5
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	b118      	cbz	r0, 80047e2 <_fflush_r+0x1a>
 80047da:	6983      	ldr	r3, [r0, #24]
 80047dc:	b90b      	cbnz	r3, 80047e2 <_fflush_r+0x1a>
 80047de:	f7ff fa15 	bl	8003c0c <__sinit>
 80047e2:	4b14      	ldr	r3, [pc, #80]	; (8004834 <_fflush_r+0x6c>)
 80047e4:	429c      	cmp	r4, r3
 80047e6:	d11b      	bne.n	8004820 <_fflush_r+0x58>
 80047e8:	686c      	ldr	r4, [r5, #4]
 80047ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ef      	beq.n	80047d2 <_fflush_r+0xa>
 80047f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047f4:	07d0      	lsls	r0, r2, #31
 80047f6:	d404      	bmi.n	8004802 <_fflush_r+0x3a>
 80047f8:	0599      	lsls	r1, r3, #22
 80047fa:	d402      	bmi.n	8004802 <_fflush_r+0x3a>
 80047fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047fe:	f7ff faa3 	bl	8003d48 <__retarget_lock_acquire_recursive>
 8004802:	4628      	mov	r0, r5
 8004804:	4621      	mov	r1, r4
 8004806:	f7ff ff59 	bl	80046bc <__sflush_r>
 800480a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800480c:	07da      	lsls	r2, r3, #31
 800480e:	4605      	mov	r5, r0
 8004810:	d4e0      	bmi.n	80047d4 <_fflush_r+0xc>
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	059b      	lsls	r3, r3, #22
 8004816:	d4dd      	bmi.n	80047d4 <_fflush_r+0xc>
 8004818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800481a:	f7ff fa96 	bl	8003d4a <__retarget_lock_release_recursive>
 800481e:	e7d9      	b.n	80047d4 <_fflush_r+0xc>
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <_fflush_r+0x70>)
 8004822:	429c      	cmp	r4, r3
 8004824:	d101      	bne.n	800482a <_fflush_r+0x62>
 8004826:	68ac      	ldr	r4, [r5, #8]
 8004828:	e7df      	b.n	80047ea <_fflush_r+0x22>
 800482a:	4b04      	ldr	r3, [pc, #16]	; (800483c <_fflush_r+0x74>)
 800482c:	429c      	cmp	r4, r3
 800482e:	bf08      	it	eq
 8004830:	68ec      	ldreq	r4, [r5, #12]
 8004832:	e7da      	b.n	80047ea <_fflush_r+0x22>
 8004834:	08004acc 	.word	0x08004acc
 8004838:	08004aec 	.word	0x08004aec
 800483c:	08004aac 	.word	0x08004aac

08004840 <_lseek_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	4d07      	ldr	r5, [pc, #28]	; (8004860 <_lseek_r+0x20>)
 8004844:	4604      	mov	r4, r0
 8004846:	4608      	mov	r0, r1
 8004848:	4611      	mov	r1, r2
 800484a:	2200      	movs	r2, #0
 800484c:	602a      	str	r2, [r5, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	f7fc fc50 	bl	80010f4 <_lseek>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d102      	bne.n	800485e <_lseek_r+0x1e>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	b103      	cbz	r3, 800485e <_lseek_r+0x1e>
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	bd38      	pop	{r3, r4, r5, pc}
 8004860:	200001e0 	.word	0x200001e0

08004864 <__swhatbuf_r>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	460e      	mov	r6, r1
 8004868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486c:	2900      	cmp	r1, #0
 800486e:	b096      	sub	sp, #88	; 0x58
 8004870:	4614      	mov	r4, r2
 8004872:	461d      	mov	r5, r3
 8004874:	da08      	bge.n	8004888 <__swhatbuf_r+0x24>
 8004876:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	602a      	str	r2, [r5, #0]
 800487e:	061a      	lsls	r2, r3, #24
 8004880:	d410      	bmi.n	80048a4 <__swhatbuf_r+0x40>
 8004882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004886:	e00e      	b.n	80048a6 <__swhatbuf_r+0x42>
 8004888:	466a      	mov	r2, sp
 800488a:	f000 f8bb 	bl	8004a04 <_fstat_r>
 800488e:	2800      	cmp	r0, #0
 8004890:	dbf1      	blt.n	8004876 <__swhatbuf_r+0x12>
 8004892:	9a01      	ldr	r2, [sp, #4]
 8004894:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004898:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800489c:	425a      	negs	r2, r3
 800489e:	415a      	adcs	r2, r3
 80048a0:	602a      	str	r2, [r5, #0]
 80048a2:	e7ee      	b.n	8004882 <__swhatbuf_r+0x1e>
 80048a4:	2340      	movs	r3, #64	; 0x40
 80048a6:	2000      	movs	r0, #0
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	b016      	add	sp, #88	; 0x58
 80048ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080048b0 <__smakebuf_r>:
 80048b0:	898b      	ldrh	r3, [r1, #12]
 80048b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048b4:	079d      	lsls	r5, r3, #30
 80048b6:	4606      	mov	r6, r0
 80048b8:	460c      	mov	r4, r1
 80048ba:	d507      	bpl.n	80048cc <__smakebuf_r+0x1c>
 80048bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	6123      	str	r3, [r4, #16]
 80048c4:	2301      	movs	r3, #1
 80048c6:	6163      	str	r3, [r4, #20]
 80048c8:	b002      	add	sp, #8
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
 80048cc:	ab01      	add	r3, sp, #4
 80048ce:	466a      	mov	r2, sp
 80048d0:	f7ff ffc8 	bl	8004864 <__swhatbuf_r>
 80048d4:	9900      	ldr	r1, [sp, #0]
 80048d6:	4605      	mov	r5, r0
 80048d8:	4630      	mov	r0, r6
 80048da:	f7ff fa57 	bl	8003d8c <_malloc_r>
 80048de:	b948      	cbnz	r0, 80048f4 <__smakebuf_r+0x44>
 80048e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e4:	059a      	lsls	r2, r3, #22
 80048e6:	d4ef      	bmi.n	80048c8 <__smakebuf_r+0x18>
 80048e8:	f023 0303 	bic.w	r3, r3, #3
 80048ec:	f043 0302 	orr.w	r3, r3, #2
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	e7e3      	b.n	80048bc <__smakebuf_r+0xc>
 80048f4:	4b0d      	ldr	r3, [pc, #52]	; (800492c <__smakebuf_r+0x7c>)
 80048f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	6020      	str	r0, [r4, #0]
 80048fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004900:	81a3      	strh	r3, [r4, #12]
 8004902:	9b00      	ldr	r3, [sp, #0]
 8004904:	6163      	str	r3, [r4, #20]
 8004906:	9b01      	ldr	r3, [sp, #4]
 8004908:	6120      	str	r0, [r4, #16]
 800490a:	b15b      	cbz	r3, 8004924 <__smakebuf_r+0x74>
 800490c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004910:	4630      	mov	r0, r6
 8004912:	f000 f889 	bl	8004a28 <_isatty_r>
 8004916:	b128      	cbz	r0, 8004924 <__smakebuf_r+0x74>
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	f023 0303 	bic.w	r3, r3, #3
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	81a3      	strh	r3, [r4, #12]
 8004924:	89a0      	ldrh	r0, [r4, #12]
 8004926:	4305      	orrs	r5, r0
 8004928:	81a5      	strh	r5, [r4, #12]
 800492a:	e7cd      	b.n	80048c8 <__smakebuf_r+0x18>
 800492c:	08003ba5 	.word	0x08003ba5

08004930 <__malloc_lock>:
 8004930:	4801      	ldr	r0, [pc, #4]	; (8004938 <__malloc_lock+0x8>)
 8004932:	f7ff ba09 	b.w	8003d48 <__retarget_lock_acquire_recursive>
 8004936:	bf00      	nop
 8004938:	200001d4 	.word	0x200001d4

0800493c <__malloc_unlock>:
 800493c:	4801      	ldr	r0, [pc, #4]	; (8004944 <__malloc_unlock+0x8>)
 800493e:	f7ff ba04 	b.w	8003d4a <__retarget_lock_release_recursive>
 8004942:	bf00      	nop
 8004944:	200001d4 	.word	0x200001d4

08004948 <_free_r>:
 8004948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800494a:	2900      	cmp	r1, #0
 800494c:	d044      	beq.n	80049d8 <_free_r+0x90>
 800494e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004952:	9001      	str	r0, [sp, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f1a1 0404 	sub.w	r4, r1, #4
 800495a:	bfb8      	it	lt
 800495c:	18e4      	addlt	r4, r4, r3
 800495e:	f7ff ffe7 	bl	8004930 <__malloc_lock>
 8004962:	4a1e      	ldr	r2, [pc, #120]	; (80049dc <_free_r+0x94>)
 8004964:	9801      	ldr	r0, [sp, #4]
 8004966:	6813      	ldr	r3, [r2, #0]
 8004968:	b933      	cbnz	r3, 8004978 <_free_r+0x30>
 800496a:	6063      	str	r3, [r4, #4]
 800496c:	6014      	str	r4, [r2, #0]
 800496e:	b003      	add	sp, #12
 8004970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004974:	f7ff bfe2 	b.w	800493c <__malloc_unlock>
 8004978:	42a3      	cmp	r3, r4
 800497a:	d908      	bls.n	800498e <_free_r+0x46>
 800497c:	6825      	ldr	r5, [r4, #0]
 800497e:	1961      	adds	r1, r4, r5
 8004980:	428b      	cmp	r3, r1
 8004982:	bf01      	itttt	eq
 8004984:	6819      	ldreq	r1, [r3, #0]
 8004986:	685b      	ldreq	r3, [r3, #4]
 8004988:	1949      	addeq	r1, r1, r5
 800498a:	6021      	streq	r1, [r4, #0]
 800498c:	e7ed      	b.n	800496a <_free_r+0x22>
 800498e:	461a      	mov	r2, r3
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	b10b      	cbz	r3, 8004998 <_free_r+0x50>
 8004994:	42a3      	cmp	r3, r4
 8004996:	d9fa      	bls.n	800498e <_free_r+0x46>
 8004998:	6811      	ldr	r1, [r2, #0]
 800499a:	1855      	adds	r5, r2, r1
 800499c:	42a5      	cmp	r5, r4
 800499e:	d10b      	bne.n	80049b8 <_free_r+0x70>
 80049a0:	6824      	ldr	r4, [r4, #0]
 80049a2:	4421      	add	r1, r4
 80049a4:	1854      	adds	r4, r2, r1
 80049a6:	42a3      	cmp	r3, r4
 80049a8:	6011      	str	r1, [r2, #0]
 80049aa:	d1e0      	bne.n	800496e <_free_r+0x26>
 80049ac:	681c      	ldr	r4, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	6053      	str	r3, [r2, #4]
 80049b2:	4421      	add	r1, r4
 80049b4:	6011      	str	r1, [r2, #0]
 80049b6:	e7da      	b.n	800496e <_free_r+0x26>
 80049b8:	d902      	bls.n	80049c0 <_free_r+0x78>
 80049ba:	230c      	movs	r3, #12
 80049bc:	6003      	str	r3, [r0, #0]
 80049be:	e7d6      	b.n	800496e <_free_r+0x26>
 80049c0:	6825      	ldr	r5, [r4, #0]
 80049c2:	1961      	adds	r1, r4, r5
 80049c4:	428b      	cmp	r3, r1
 80049c6:	bf04      	itt	eq
 80049c8:	6819      	ldreq	r1, [r3, #0]
 80049ca:	685b      	ldreq	r3, [r3, #4]
 80049cc:	6063      	str	r3, [r4, #4]
 80049ce:	bf04      	itt	eq
 80049d0:	1949      	addeq	r1, r1, r5
 80049d2:	6021      	streq	r1, [r4, #0]
 80049d4:	6054      	str	r4, [r2, #4]
 80049d6:	e7ca      	b.n	800496e <_free_r+0x26>
 80049d8:	b003      	add	sp, #12
 80049da:	bd30      	pop	{r4, r5, pc}
 80049dc:	200001d8 	.word	0x200001d8

080049e0 <_read_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d07      	ldr	r5, [pc, #28]	; (8004a00 <_read_r+0x20>)
 80049e4:	4604      	mov	r4, r0
 80049e6:	4608      	mov	r0, r1
 80049e8:	4611      	mov	r1, r2
 80049ea:	2200      	movs	r2, #0
 80049ec:	602a      	str	r2, [r5, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	f7fc fb3c 	bl	800106c <_read>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_read_r+0x1e>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_read_r+0x1e>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	200001e0 	.word	0x200001e0

08004a04 <_fstat_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d07      	ldr	r5, [pc, #28]	; (8004a24 <_fstat_r+0x20>)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	602b      	str	r3, [r5, #0]
 8004a12:	f7fc fb54 	bl	80010be <_fstat>
 8004a16:	1c43      	adds	r3, r0, #1
 8004a18:	d102      	bne.n	8004a20 <_fstat_r+0x1c>
 8004a1a:	682b      	ldr	r3, [r5, #0]
 8004a1c:	b103      	cbz	r3, 8004a20 <_fstat_r+0x1c>
 8004a1e:	6023      	str	r3, [r4, #0]
 8004a20:	bd38      	pop	{r3, r4, r5, pc}
 8004a22:	bf00      	nop
 8004a24:	200001e0 	.word	0x200001e0

08004a28 <_isatty_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	4d06      	ldr	r5, [pc, #24]	; (8004a44 <_isatty_r+0x1c>)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4604      	mov	r4, r0
 8004a30:	4608      	mov	r0, r1
 8004a32:	602b      	str	r3, [r5, #0]
 8004a34:	f7fc fb53 	bl	80010de <_isatty>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d102      	bne.n	8004a42 <_isatty_r+0x1a>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	b103      	cbz	r3, 8004a42 <_isatty_r+0x1a>
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	200001e0 	.word	0x200001e0

08004a48 <_init>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	bf00      	nop
 8004a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4e:	bc08      	pop	{r3}
 8004a50:	469e      	mov	lr, r3
 8004a52:	4770      	bx	lr

08004a54 <_fini>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	bf00      	nop
 8004a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5a:	bc08      	pop	{r3}
 8004a5c:	469e      	mov	lr, r3
 8004a5e:	4770      	bx	lr
