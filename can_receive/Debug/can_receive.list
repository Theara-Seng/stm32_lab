
can_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080071a0  080071a0  000171a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d4  080075d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080075d4  080075d4  000175d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075dc  080075dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075e0  080075e0  000175e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080075e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000184  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000360  20000360  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3b4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e25  00000000  00000000  0002f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  000313e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf8  00000000  00000000  00032198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f26  00000000  00000000  00032e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7f4  00000000  00000000  00054db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf18b  00000000  00000000  000635aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00132735  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ad4  00000000  00000000  00132788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007188 	.word	0x08007188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007188 	.word	0x08007188

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_write>:
uint32_t rot_old_state;
uint32_t rot_cnt;
int rot_new_state1;
int rot_old_state1;
int rot_cnt1;
uint32_t _write(int file, char* p, int len){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <_write+0x24>)
 8000ec2:	f003 f88c 	bl	8003fde <HAL_UART_Transmit>
	return len;
 8000ec6:	687b      	ldr	r3, [r7, #4]

}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200002b0 	.word	0x200002b0

08000ed4 <map>:
uint8_t cntt = 0;

long int data1 = 0;
long int data2 = 0;
float map(float Input, float Min_Input, float Max_Input, float Min_Output, float Max_Output)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	ed87 0a05 	vstr	s0, [r7, #20]
 8000ede:	edc7 0a04 	vstr	s1, [r7, #16]
 8000ee2:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ee6:	edc7 1a02 	vstr	s3, [r7, #8]
 8000eea:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float)((Input - Min_Input) * ((Max_Output - Min_Output) / (Max_Input - Min_Input)) + Min_Output);
 8000eee:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ef2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ef6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000efa:	edd7 6a01 	vldr	s13, [r7, #4]
 8000efe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f02:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8000f06:	edd7 6a03 	vldr	s13, [r7, #12]
 8000f0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f12:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f22:	eeb0 0a67 	vmov.f32	s0, s15
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2)
{
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &RxHeader, RxData) ;
 8000f38:	4b43      	ldr	r3, [pc, #268]	; (8001048 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8000f3a:	4a44      	ldr	r2, [pc, #272]	; (800104c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f001 fa0f 	bl	8002362 <HAL_CAN_GetRxMessage>
  cntt++;
 8000f44:	4b42      	ldr	r3, [pc, #264]	; (8001050 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b40      	ldr	r3, [pc, #256]	; (8001050 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000f4e:	701a      	strb	r2, [r3, #0]
  printf("count %u and", cntt);
 8000f50:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	483f      	ldr	r0, [pc, #252]	; (8001054 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000f58:	f004 f852 	bl	8005000 <iprintf>
  while (cntt - 100 > 0)
 8000f5c:	e007      	b.n	8000f6e <HAL_CAN_RxFifo1MsgPendingCallback+0x3e>
  	{
  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	483d      	ldr	r0, [pc, #244]	; (8001058 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8000f64:	f002 f82b 	bl	8002fbe <HAL_GPIO_TogglePin>
  		cntt = 0;
 8000f68:	4b39      	ldr	r3, [pc, #228]	; (8001050 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
  while (cntt - 100 > 0)
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b64      	cmp	r3, #100	; 0x64
 8000f74:	d8f3      	bhi.n	8000f5e <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
  	}
  data1 = RxData[0]<<8  | RxData[1];
 8000f76:	4b34      	ldr	r3, [pc, #208]	; (8001048 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	4a32      	ldr	r2, [pc, #200]	; (8001048 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8000f7e:	7852      	ldrb	r2, [r2, #1]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	4a36      	ldr	r2, [pc, #216]	; (800105c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000f84:	6013      	str	r3, [r2, #0]
  data2 = RxData[2]<< 8 | RxData[3];
 8000f86:	4b30      	ldr	r3, [pc, #192]	; (8001048 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8000f88:	789b      	ldrb	r3, [r3, #2]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	4a2e      	ldr	r2, [pc, #184]	; (8001048 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8000f8e:	78d2      	ldrb	r2, [r2, #3]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	4a33      	ldr	r2, [pc, #204]	; (8001060 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000f94:	6013      	str	r3, [r2, #0]
  printf("data0 = %ld and data1 = %ld \n",data1,data2);
 8000f96:	4b31      	ldr	r3, [pc, #196]	; (800105c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a31      	ldr	r2, [pc, #196]	; (8001060 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000f9c:	6812      	ldr	r2, [r2, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4830      	ldr	r0, [pc, #192]	; (8001064 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8000fa2:	f004 f82d 	bl	8005000 <iprintf>
  V1 = map(data1,0,65535,-10,10);
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb2:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 8000fb6:	eefa 1a04 	vmov.f32	s3, #164	; 0xc1200000 -10.0
 8000fba:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001068 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>
 8000fbe:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800106c <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>
 8000fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc6:	f7ff ff85 	bl	8000ed4 <map>
 8000fca:	eef0 7a40 	vmov.f32	s15, s0
 8000fce:	4b28      	ldr	r3, [pc, #160]	; (8001070 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8000fd0:	edc3 7a00 	vstr	s15, [r3]
  V2 = map(data2,0,65535,-10,10);
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 8000fe4:	eefa 1a04 	vmov.f32	s3, #164	; 0xc1200000 -10.0
 8000fe8:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8001068 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>
 8000fec:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800106c <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>
 8000ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff4:	f7ff ff6e 	bl	8000ed4 <map>
 8000ff8:	eef0 7a40 	vmov.f32	s15, s0
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8000ffe:	edc3 7a00 	vstr	s15, [r3]
  printf("V1=%f and V2=%f\n",V1,V2);
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa9e 	bl	8000548 <__aeabi_f2d>
 800100c:	4604      	mov	r4, r0
 800100e:	460d      	mov	r5, r1
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa97 	bl	8000548 <__aeabi_f2d>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	e9cd 2300 	strd	r2, r3, [sp]
 8001022:	4622      	mov	r2, r4
 8001024:	462b      	mov	r3, r5
 8001026:	4814      	ldr	r0, [pc, #80]	; (8001078 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8001028:	f003 ffea 	bl	8005000 <iprintf>
//  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
  if ((RxHeader.StdId == 0x111))
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f240 1211 	movw	r2, #273	; 0x111
 8001034:	4293      	cmp	r3, r2
 8001036:	d102      	bne.n	800103e <HAL_CAN_RxFifo1MsgPendingCallback+0x10e>
  {
	  datacheck = 1;
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
  }
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bdb0      	pop	{r4, r5, r7, pc}
 8001046:	bf00      	nop
 8001048:	20000328 	.word	0x20000328
 800104c:	200002f4 	.word	0x200002f4
 8001050:	2000033d 	.word	0x2000033d
 8001054:	080071a0 	.word	0x080071a0
 8001058:	40020c00 	.word	0x40020c00
 800105c:	20000340 	.word	0x20000340
 8001060:	20000344 	.word	0x20000344
 8001064:	080071b0 	.word	0x080071b0
 8001068:	477fff00 	.word	0x477fff00
 800106c:	00000000 	.word	0x00000000
 8001070:	20000330 	.word	0x20000330
 8001074:	20000334 	.word	0x20000334
 8001078:	080071d0 	.word	0x080071d0
 800107c:	2000033c 	.word	0x2000033c

08001080 <main>:
  ////			printf(countq);
  //
  //			last_print = now;

int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f000 fe00 	bl	8001c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f84c 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f000 f9ee 	bl	800146c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001090:	f000 f906 	bl	80012a0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001094:	f000 f958 	bl	8001348 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001098:	f000 f9be 	bl	8001418 <MX_USART2_UART_Init>
  MX_CAN2_Init();
 800109c:	f000 f8ac 	bl	80011f8 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan2);
 80010a0:	481a      	ldr	r0, [pc, #104]	; (800110c <main+0x8c>)
 80010a2:	f001 f83f 	bl	8002124 <HAL_CAN_Start>
//  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 80010a6:	2110      	movs	r1, #16
 80010a8:	4818      	ldr	r0, [pc, #96]	; (800110c <main+0x8c>)
 80010aa:	f001 fa6c 	bl	8002586 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 1;
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <main+0x90>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <main+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <main+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <main+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <main+0x90>)
 80010c8:	f240 1203 	movw	r2, #259	; 0x103
 80010cc:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <main+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	751a      	strb	r2, [r3, #20]
  /* USER CODE BEGIN WHILE */
  while (1)

  {
//	  printf("Hello");
	  TxData[0] = 0x03 ;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <main+0x94>)
 80010d6:	2203      	movs	r2, #3
 80010d8:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <main+0x98>)
 80010e2:	f001 ff53 	bl	8002f8c <HAL_GPIO_WritePin>
	  if (datacheck==1)
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <main+0x9c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d1f2      	bne.n	80010d4 <main+0x54>
	  {
	   HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80010ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f2:	4809      	ldr	r0, [pc, #36]	; (8001118 <main+0x98>)
 80010f4:	f001 ff63 	bl	8002fbe <HAL_GPIO_TogglePin>
	  HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &txMailBox);
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <main+0xa0>)
 80010fa:	4a06      	ldr	r2, [pc, #24]	; (8001114 <main+0x94>)
 80010fc:	4904      	ldr	r1, [pc, #16]	; (8001110 <main+0x90>)
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <main+0x8c>)
 8001100:	f001 f854 	bl	80021ac <HAL_CAN_AddTxMessage>
//	   HAL_Delay(1000);
	   datacheck =0;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <main+0x9c>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
	  TxData[0] = 0x03 ;
 800110a:	e7e3      	b.n	80010d4 <main+0x54>
 800110c:	200001f8 	.word	0x200001f8
 8001110:	20000310 	.word	0x20000310
 8001114:	20000338 	.word	0x20000338
 8001118:	40020c00 	.word	0x40020c00
 800111c:	2000033c 	.word	0x2000033c
 8001120:	2000032c 	.word	0x2000032c

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	; 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0320 	add.w	r3, r7, #32
 800112e:	2230      	movs	r2, #48	; 0x30
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f003 faf2 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <SystemClock_Config+0xcc>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <SystemClock_Config+0xcc>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <SystemClock_Config+0xcc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <SystemClock_Config+0xd0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <SystemClock_Config+0xd0>)
 800116e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <SystemClock_Config+0xd0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001180:	2302      	movs	r3, #2
 8001182:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001184:	2301      	movs	r3, #1
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001188:	2310      	movs	r3, #16
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001190:	2300      	movs	r3, #0
 8001192:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001194:	2308      	movs	r3, #8
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001198:	23a8      	movs	r3, #168	; 0xa8
 800119a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a0:	2307      	movs	r3, #7
 80011a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 ff23 	bl	8002ff4 <HAL_RCC_OscConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b4:	f000 faaa 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b8:	230f      	movs	r3, #15
 80011ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011bc:	2302      	movs	r3, #2
 80011be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2105      	movs	r1, #5
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 f984 	bl	80034e4 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011e2:	f000 fa93 	bl	800170c <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3750      	adds	r7, #80	; 0x50
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40007000 	.word	0x40007000

080011f8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_CAN2_Init+0xa0>)
 8001200:	4a26      	ldr	r2, [pc, #152]	; (800129c <MX_CAN2_Init+0xa4>)
 8001202:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <MX_CAN2_Init+0xa0>)
 8001206:	2215      	movs	r2, #21
 8001208:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <MX_CAN2_Init+0xa0>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <MX_CAN2_Init+0xa0>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_CAN2_Init+0xa0>)
 8001218:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800121c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_CAN2_Init+0xa0>)
 8001220:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001224:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_CAN2_Init+0xa0>)
 8001228:	2200      	movs	r2, #0
 800122a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_CAN2_Init+0xa0>)
 800122e:	2200      	movs	r2, #0
 8001230:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_CAN2_Init+0xa0>)
 8001234:	2200      	movs	r2, #0
 8001236:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_CAN2_Init+0xa0>)
 800123a:	2200      	movs	r2, #0
 800123c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_CAN2_Init+0xa0>)
 8001240:	2200      	movs	r2, #0
 8001242:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_CAN2_Init+0xa0>)
 8001246:	2200      	movs	r2, #0
 8001248:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800124a:	4813      	ldr	r0, [pc, #76]	; (8001298 <MX_CAN2_Init+0xa0>)
 800124c:	f000 fd8e 	bl	8001d6c <HAL_CAN_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8001256:	f000 fa59 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800125a:	2301      	movs	r3, #1
 800125c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 800125e:	230a      	movs	r3, #10
 8001260:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001262:	2301      	movs	r3, #1
 8001264:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x111<<5;
 8001266:	f242 2320 	movw	r3, #8736	; 0x2220
 800126a:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x111<<5;
 8001270:	f242 2320 	movw	r3, #8736	; 0x2220
 8001274:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800127e:	2301      	movs	r3, #1
 8001280:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	4803      	ldr	r0, [pc, #12]	; (8001298 <MX_CAN2_Init+0xa0>)
 800128c:	f000 fe6a 	bl	8001f64 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200001f8 	.word	0x200001f8
 800129c:	40006800 	.word	0x40006800

080012a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2224      	movs	r2, #36	; 0x24
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 fa34 	bl	800471c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_TIM2_Init+0xa4>)
 80012be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_TIM2_Init+0xa4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <MX_TIM2_Init+0xa4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012d0:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_TIM2_Init+0xa4>)
 80012d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_TIM2_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_TIM2_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012e4:	2303      	movs	r3, #3
 80012e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ec:	2301      	movs	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012fc:	2301      	movs	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_TIM2_Init+0xa4>)
 8001310:	f002 fb08 	bl	8003924 <HAL_TIM_Encoder_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800131a:	f000 f9f7 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_TIM2_Init+0xa4>)
 800132c:	f002 fd7a 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001336:	f000 f9e9 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000220 	.word	0x20000220

08001348 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2224      	movs	r2, #36	; 0x24
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f003 f9e0 	bl	800471c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001364:	4b28      	ldr	r3, [pc, #160]	; (8001408 <MX_TIM5_Init+0xc0>)
 8001366:	4a29      	ldr	r2, [pc, #164]	; (800140c <MX_TIM5_Init+0xc4>)
 8001368:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <MX_TIM5_Init+0xc0>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <MX_TIM5_Init+0xc0>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <MX_TIM5_Init+0xc0>)
 8001378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800137c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <MX_TIM5_Init+0xc0>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001384:	4b20      	ldr	r3, [pc, #128]	; (8001408 <MX_TIM5_Init+0xc0>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800138a:	2303      	movs	r3, #3
 800138c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001392:	2301      	movs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a2:	2301      	movs	r3, #1
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4814      	ldr	r0, [pc, #80]	; (8001408 <MX_TIM5_Init+0xc0>)
 80013b6:	f002 fab5 	bl	8003924 <HAL_TIM_Encoder_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80013c0:	f000 f9a4 	bl	800170c <Error_Handler>
  }  if (datacheck)
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_TIM5_Init+0xc8>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00a      	beq.n	80013e2 <MX_TIM5_Init+0x9a>
  {
   printf(datacheck);
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_TIM5_Init+0xc8>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fe15 	bl	8005000 <iprintf>
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <MX_TIM5_Init+0xcc>)
 80013de:	f001 fdd5 	bl	8002f8c <HAL_GPIO_WritePin>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MX_TIM5_Init+0xc0>)
 80013f0:	f002 fd18 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 80013fa:	f000 f987 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	; 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000268 	.word	0x20000268
 800140c:	40000c00 	.word	0x40000c00
 8001410:	2000033c 	.word	0x2000033c
 8001414:	40020c00 	.word	0x40020c00

08001418 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <MX_USART2_UART_Init+0x50>)
 8001420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 8001450:	f002 fd78 	bl	8003f44 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800145a:	f000 f957 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200002b0 	.word	0x200002b0
 8001468:	40004400 	.word	0x40004400

0800146c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	4b9b      	ldr	r3, [pc, #620]	; (80016f4 <MX_GPIO_Init+0x288>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a9a      	ldr	r2, [pc, #616]	; (80016f4 <MX_GPIO_Init+0x288>)
 800148c:	f043 0310 	orr.w	r3, r3, #16
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b98      	ldr	r3, [pc, #608]	; (80016f4 <MX_GPIO_Init+0x288>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	4b94      	ldr	r3, [pc, #592]	; (80016f4 <MX_GPIO_Init+0x288>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a93      	ldr	r2, [pc, #588]	; (80016f4 <MX_GPIO_Init+0x288>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b91      	ldr	r3, [pc, #580]	; (80016f4 <MX_GPIO_Init+0x288>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b8d      	ldr	r3, [pc, #564]	; (80016f4 <MX_GPIO_Init+0x288>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a8c      	ldr	r2, [pc, #560]	; (80016f4 <MX_GPIO_Init+0x288>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b8a      	ldr	r3, [pc, #552]	; (80016f4 <MX_GPIO_Init+0x288>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b86      	ldr	r3, [pc, #536]	; (80016f4 <MX_GPIO_Init+0x288>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a85      	ldr	r2, [pc, #532]	; (80016f4 <MX_GPIO_Init+0x288>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b83      	ldr	r3, [pc, #524]	; (80016f4 <MX_GPIO_Init+0x288>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b7f      	ldr	r3, [pc, #508]	; (80016f4 <MX_GPIO_Init+0x288>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a7e      	ldr	r2, [pc, #504]	; (80016f4 <MX_GPIO_Init+0x288>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <MX_GPIO_Init+0x288>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b78      	ldr	r3, [pc, #480]	; (80016f4 <MX_GPIO_Init+0x288>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a77      	ldr	r2, [pc, #476]	; (80016f4 <MX_GPIO_Init+0x288>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b75      	ldr	r3, [pc, #468]	; (80016f4 <MX_GPIO_Init+0x288>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2108      	movs	r1, #8
 800152e:	4872      	ldr	r0, [pc, #456]	; (80016f8 <MX_GPIO_Init+0x28c>)
 8001530:	f001 fd2c 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	2101      	movs	r1, #1
 8001538:	4870      	ldr	r0, [pc, #448]	; (80016fc <MX_GPIO_Init+0x290>)
 800153a:	f001 fd27 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800153e:	2200      	movs	r2, #0
 8001540:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001544:	486e      	ldr	r0, [pc, #440]	; (8001700 <MX_GPIO_Init+0x294>)
 8001546:	f001 fd21 	bl	8002f8c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800154a:	2308      	movs	r3, #8
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	4865      	ldr	r0, [pc, #404]	; (80016f8 <MX_GPIO_Init+0x28c>)
 8001562:	f001 fb77 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001566:	2301      	movs	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	485f      	ldr	r0, [pc, #380]	; (80016fc <MX_GPIO_Init+0x290>)
 800157e:	f001 fb69 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001582:	2308      	movs	r3, #8
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001592:	2305      	movs	r3, #5
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4857      	ldr	r0, [pc, #348]	; (80016fc <MX_GPIO_Init+0x290>)
 800159e:	f001 fb59 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015a2:	2310      	movs	r3, #16
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4851      	ldr	r0, [pc, #324]	; (8001704 <MX_GPIO_Init+0x298>)
 80015be:	f001 fb49 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015c2:	23e0      	movs	r3, #224	; 0xe0
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d2:	2305      	movs	r3, #5
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	4849      	ldr	r0, [pc, #292]	; (8001704 <MX_GPIO_Init+0x298>)
 80015de:	f001 fb39 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015e2:	2304      	movs	r3, #4
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4844      	ldr	r0, [pc, #272]	; (8001708 <MX_GPIO_Init+0x29c>)
 80015f6:	f001 fb2d 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800160c:	2305      	movs	r3, #5
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	483c      	ldr	r0, [pc, #240]	; (8001708 <MX_GPIO_Init+0x29c>)
 8001618:	f001 fb1c 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800161c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001620:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	4832      	ldr	r0, [pc, #200]	; (8001700 <MX_GPIO_Init+0x294>)
 8001636:	f001 fb0d 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800163a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800164c:	2306      	movs	r3, #6
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	4829      	ldr	r0, [pc, #164]	; (80016fc <MX_GPIO_Init+0x290>)
 8001658:	f001 fafc 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800165c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4824      	ldr	r0, [pc, #144]	; (8001704 <MX_GPIO_Init+0x298>)
 8001672:	f001 faef 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001676:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001688:	230a      	movs	r3, #10
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	481c      	ldr	r0, [pc, #112]	; (8001704 <MX_GPIO_Init+0x298>)
 8001694:	f001 fade 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001698:	2320      	movs	r3, #32
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	4815      	ldr	r0, [pc, #84]	; (8001700 <MX_GPIO_Init+0x294>)
 80016ac:	f001 fad2 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016b0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b6:	2312      	movs	r3, #18
 80016b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c2:	2304      	movs	r3, #4
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	480e      	ldr	r0, [pc, #56]	; (8001708 <MX_GPIO_Init+0x29c>)
 80016ce:	f001 fac1 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	4619      	mov	r1, r3
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_GPIO_Init+0x28c>)
 80016e8:	f001 fab4 	bl	8002c54 <HAL_GPIO_Init>

}
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	; 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40020800 	.word	0x40020800
 8001700:	40020c00 	.word	0x40020c00
 8001704:	40020000 	.word	0x40020000
 8001708:	40020400 	.word	0x40020400

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>
	...

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_MspInit+0x4c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <HAL_MspInit+0x4c>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_MspInit+0x4c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_MspInit+0x4c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_MspInit+0x4c>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_MspInit+0x4c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001756:	2007      	movs	r0, #7
 8001758:	f001 fa3a 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800

08001768 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a28      	ldr	r2, [pc, #160]	; (8001828 <HAL_CAN_MspInit+0xc0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d14a      	bne.n	8001820 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_CAN_MspInit+0xc4>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a26      	ldr	r2, [pc, #152]	; (800182c <HAL_CAN_MspInit+0xc4>)
 8001794:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_CAN_MspInit+0xc4>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_CAN_MspInit+0xc4>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a1f      	ldr	r2, [pc, #124]	; (800182c <HAL_CAN_MspInit+0xc4>)
 80017b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_CAN_MspInit+0xc4>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_CAN_MspInit+0xc4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a18      	ldr	r2, [pc, #96]	; (800182c <HAL_CAN_MspInit+0xc4>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_CAN_MspInit+0xc4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80017de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80017f0:	2309      	movs	r3, #9
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <HAL_CAN_MspInit+0xc8>)
 80017fc:	f001 fa2a 	bl	8002c54 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	2040      	movs	r0, #64	; 0x40
 8001806:	f001 f9ee 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800180a:	2040      	movs	r0, #64	; 0x40
 800180c:	f001 fa07 	bl	8002c1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	2041      	movs	r0, #65	; 0x41
 8001816:	f001 f9e6 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800181a:	2041      	movs	r0, #65	; 0x41
 800181c:	f001 f9ff 	bl	8002c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40006800 	.word	0x40006800
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400

08001834 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001854:	d153      	bne.n	80018fe <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a46      	ldr	r2, [pc, #280]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b44      	ldr	r3, [pc, #272]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	4b40      	ldr	r3, [pc, #256]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a3f      	ldr	r2, [pc, #252]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b39      	ldr	r3, [pc, #228]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a38      	ldr	r2, [pc, #224]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b36      	ldr	r3, [pc, #216]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018bc:	2301      	movs	r3, #1
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	4619      	mov	r1, r3
 80018c6:	482d      	ldr	r0, [pc, #180]	; (800197c <HAL_TIM_Encoder_MspInit+0x148>)
 80018c8:	f001 f9c4 	bl	8002c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018cc:	2308      	movs	r3, #8
 80018ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018dc:	2301      	movs	r3, #1
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	4826      	ldr	r0, [pc, #152]	; (8001980 <HAL_TIM_Encoder_MspInit+0x14c>)
 80018e8:	f001 f9b4 	bl	8002c54 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	201c      	movs	r0, #28
 80018f2:	f001 f978 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f6:	201c      	movs	r0, #28
 80018f8:	f001 f991 	bl	8002c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018fc:	e038      	b.n	8001970 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM5)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a20      	ldr	r2, [pc, #128]	; (8001984 <HAL_TIM_Encoder_MspInit+0x150>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d133      	bne.n	8001970 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	4a12      	ldr	r2, [pc, #72]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6313      	str	r3, [r2, #48]	; 0x30
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_TIM_Encoder_MspInit+0x144>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001940:	2303      	movs	r3, #3
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001950:	2302      	movs	r3, #2
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	4808      	ldr	r0, [pc, #32]	; (800197c <HAL_TIM_Encoder_MspInit+0x148>)
 800195c:	f001 f97a 	bl	8002c54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	2032      	movs	r0, #50	; 0x32
 8001966:	f001 f93e 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800196a:	2032      	movs	r0, #50	; 0x32
 800196c:	f001 f957 	bl	8002c1e <HAL_NVIC_EnableIRQ>
}
 8001970:	bf00      	nop
 8001972:	3730      	adds	r7, #48	; 0x30
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000
 8001980:	40020400 	.word	0x40020400
 8001984:	40000c00 	.word	0x40000c00

08001988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_UART_MspInit+0x84>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12b      	bne.n	8001a02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e2:	230c      	movs	r3, #12
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f2:	2307      	movs	r3, #7
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_UART_MspInit+0x8c>)
 80019fe:	f001 f929 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40004400 	.word	0x40004400
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <NMI_Handler+0x4>

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a64:	f000 f962 	bl	8001d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <TIM2_IRQHandler+0x10>)
 8001a72:	f001 fffd 	bl	8003a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000220 	.word	0x20000220

08001a80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <TIM5_IRQHandler+0x10>)
 8001a86:	f001 fff3 	bl	8003a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000268 	.word	0x20000268

08001a94 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <CAN2_RX0_IRQHandler+0x10>)
 8001a9a:	f000 fd9a 	bl	80025d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200001f8 	.word	0x200001f8

08001aa8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <CAN2_RX1_IRQHandler+0x10>)
 8001aae:	f000 fd90 	bl	80025d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200001f8 	.word	0x200001f8

08001abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return 1;
 8001ac0:	2301      	movs	r3, #1
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_kill>:

int _kill(int pid, int sig)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ad6:	f002 fdf7 	bl	80046c8 <__errno>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2216      	movs	r2, #22
 8001ade:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_exit>:

void _exit (int status)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ffe7 	bl	8001acc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001afe:	e7fe      	b.n	8001afe <_exit+0x12>

08001b00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e00a      	b.n	8001b28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b12:	f3af 8000 	nop.w
 8001b16:	4601      	mov	r1, r0
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	60ba      	str	r2, [r7, #8]
 8001b1e:	b2ca      	uxtb	r2, r1
 8001b20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dbf0      	blt.n	8001b12 <_read+0x12>
  }

  return len;
 8001b30:	687b      	ldr	r3, [r7, #4]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b62:	605a      	str	r2, [r3, #4]
  return 0;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <_isatty>:

int _isatty(int file)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bac:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <_sbrk+0x5c>)
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <_sbrk+0x60>)
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <_sbrk+0x64>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <_sbrk+0x68>)
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d207      	bcs.n	8001be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd4:	f002 fd78 	bl	80046c8 <__errno>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	220c      	movs	r2, #12
 8001bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001be2:	e009      	b.n	8001bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <_sbrk+0x64>)
 8001bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20020000 	.word	0x20020000
 8001c04:	00000400 	.word	0x00000400
 8001c08:	20000348 	.word	0x20000348
 8001c0c:	20000360 	.word	0x20000360

08001c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <SystemInit+0x20>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <SystemInit+0x20>)
 8001c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c38:	480d      	ldr	r0, [pc, #52]	; (8001c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c3a:	490e      	ldr	r1, [pc, #56]	; (8001c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c3c:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c40:	e002      	b.n	8001c48 <LoopCopyDataInit>

08001c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c46:	3304      	adds	r3, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c4c:	d3f9      	bcc.n	8001c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c50:	4c0b      	ldr	r4, [pc, #44]	; (8001c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c54:	e001      	b.n	8001c5a <LoopFillZerobss>

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c58:	3204      	adds	r2, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c5e:	f7ff ffd7 	bl	8001c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c62:	f002 fd37 	bl	80046d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c66:	f7ff fa0b 	bl	8001080 <main>
  bx  lr    
 8001c6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c74:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c78:	080075e4 	.word	0x080075e4
  ldr r2, =_sbss
 8001c7c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c80:	20000360 	.word	0x20000360

08001c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c84:	e7fe      	b.n	8001c84 <ADC_IRQHandler>
	...

08001c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <HAL_Init+0x40>)
 8001c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <HAL_Init+0x40>)
 8001c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_Init+0x40>)
 8001caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f000 ff8d 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f000 f808 	bl	8001ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cbc:	f7ff fd2c 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023c00 	.word	0x40023c00

08001ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x54>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_InitTick+0x58>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 ffa5 	bl	8002c3a <HAL_SYSTICK_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00e      	b.n	8001d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	d80a      	bhi.n	8001d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d00:	2200      	movs	r2, #0
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d08:	f000 ff6d 	bl	8002be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <HAL_InitTick+0x5c>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000004 	.word	0x20000004

08001d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x20>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x24>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_IncTick+0x24>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	2000034c 	.word	0x2000034c

08001d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_GetTick+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	2000034c 	.word	0x2000034c

08001d6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0ed      	b.n	8001f5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fcec 	bl	8001768 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da0:	f7ff ffd8 	bl	8001d54 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001da6:	e012      	b.n	8001dce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da8:	f7ff ffd4 	bl	8001d54 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b0a      	cmp	r3, #10
 8001db4:	d90b      	bls.n	8001dce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2205      	movs	r2, #5
 8001dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0c5      	b.n	8001f5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0e5      	beq.n	8001da8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0202 	bic.w	r2, r2, #2
 8001dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dec:	f7ff ffb2 	bl	8001d54 <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001df2:	e012      	b.n	8001e1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001df4:	f7ff ffae 	bl	8001d54 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b0a      	cmp	r3, #10
 8001e00:	d90b      	bls.n	8001e1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2205      	movs	r2, #5
 8001e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e09f      	b.n	8001f5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1e5      	bne.n	8001df4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e1b      	ldrb	r3, [r3, #24]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7e5b      	ldrb	r3, [r3, #25]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7e9b      	ldrb	r3, [r3, #26]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0220 	orr.w	r2, r2, #32
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0220 	bic.w	r2, r2, #32
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7edb      	ldrb	r3, [r3, #27]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0210 	bic.w	r2, r2, #16
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0210 	orr.w	r2, r2, #16
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7f1b      	ldrb	r3, [r3, #28]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d108      	bne.n	8001eea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0208 	orr.w	r2, r2, #8
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e007      	b.n	8001efa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0208 	bic.w	r2, r2, #8
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7f5b      	ldrb	r3, [r3, #29]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d108      	bne.n	8001f14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0204 	orr.w	r2, r2, #4
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e007      	b.n	8001f24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0204 	bic.w	r2, r2, #4
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	ea42 0103 	orr.w	r1, r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	1e5a      	subs	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f7a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d003      	beq.n	8001f8a <HAL_CAN_ConfigFilter+0x26>
 8001f82:	7cfb      	ldrb	r3, [r7, #19]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	f040 80be 	bne.w	8002106 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f8a:	4b65      	ldr	r3, [pc, #404]	; (8002120 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f8c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fa4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	2201      	movs	r2, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	401a      	ands	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d123      	bne.n	8002034 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800200e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3248      	adds	r2, #72	; 0x48
 8002014:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002028:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800202a:	6979      	ldr	r1, [r7, #20]
 800202c:	3348      	adds	r3, #72	; 0x48
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d122      	bne.n	8002082 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	431a      	orrs	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800205c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3248      	adds	r2, #72	; 0x48
 8002062:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002076:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002078:	6979      	ldr	r1, [r7, #20]
 800207a:	3348      	adds	r3, #72	; 0x48
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43db      	mvns	r3, r3
 8002094:	401a      	ands	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800209c:	e007      	b.n	80020ae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43db      	mvns	r3, r3
 80020c0:	401a      	ands	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80020c8:	e007      	b.n	80020da <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020f8:	f023 0201 	bic.w	r2, r3, #1
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e006      	b.n	8002114 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
  }
}
 8002114:	4618      	mov	r0, r3
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40006400 	.word	0x40006400

08002124 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d12e      	bne.n	8002196 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002150:	f7ff fe00 	bl	8001d54 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002156:	e012      	b.n	800217e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002158:	f7ff fdfc 	bl	8001d54 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b0a      	cmp	r3, #10
 8002164:	d90b      	bls.n	800217e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2205      	movs	r2, #5
 8002176:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e012      	b.n	80021a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e5      	bne.n	8002158 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e006      	b.n	80021a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
  }
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80021ca:	7ffb      	ldrb	r3, [r7, #31]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d003      	beq.n	80021d8 <HAL_CAN_AddTxMessage+0x2c>
 80021d0:	7ffb      	ldrb	r3, [r7, #31]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	f040 80b8 	bne.w	8002348 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80a0 	beq.w	8002338 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	0e1b      	lsrs	r3, r3, #24
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d907      	bls.n	8002218 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e09e      	b.n	8002356 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002218:	2201      	movs	r2, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	409a      	lsls	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10d      	bne.n	8002246 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	6809      	ldr	r1, [r1, #0]
 8002238:	431a      	orrs	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3318      	adds	r3, #24
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	440b      	add	r3, r1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e00f      	b.n	8002266 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002250:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800225a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3318      	adds	r3, #24
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	440b      	add	r3, r1
 8002264:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6819      	ldr	r1, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3318      	adds	r3, #24
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	440b      	add	r3, r1
 8002276:	3304      	adds	r3, #4
 8002278:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	7d1b      	ldrb	r3, [r3, #20]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d111      	bne.n	80022a6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3318      	adds	r3, #24
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	6811      	ldr	r1, [r2, #0]
 8002296:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3318      	adds	r3, #24
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	440b      	add	r3, r1
 80022a2:	3304      	adds	r3, #4
 80022a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3307      	adds	r3, #7
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	061a      	lsls	r2, r3, #24
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3306      	adds	r3, #6
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3305      	adds	r3, #5
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	4313      	orrs	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	3204      	adds	r2, #4
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	4610      	mov	r0, r2
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	6811      	ldr	r1, [r2, #0]
 80022ce:	ea43 0200 	orr.w	r2, r3, r0
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80022dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3303      	adds	r3, #3
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	061a      	lsls	r2, r3, #24
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3302      	adds	r3, #2
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3301      	adds	r3, #1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	4313      	orrs	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	4610      	mov	r0, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	6811      	ldr	r1, [r2, #0]
 8002304:	ea43 0200 	orr.w	r2, r3, r0
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	440b      	add	r3, r1
 800230e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002312:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3318      	adds	r3, #24
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	4413      	add	r3, r2
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6811      	ldr	r1, [r2, #0]
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3318      	adds	r3, #24
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	440b      	add	r3, r1
 8002332:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e00e      	b.n	8002356 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e006      	b.n	8002356 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
  }
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002362:	b480      	push	{r7}
 8002364:	b087      	sub	sp, #28
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002376:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d003      	beq.n	8002386 <HAL_CAN_GetRxMessage+0x24>
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	2b02      	cmp	r3, #2
 8002382:	f040 80f3 	bne.w	800256c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10e      	bne.n	80023aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d116      	bne.n	80023c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0e7      	b.n	800257a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d107      	bne.n	80023c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0d8      	b.n	800257a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	331b      	adds	r3, #27
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0204 	and.w	r2, r3, #4
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	331b      	adds	r3, #27
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4413      	add	r3, r2
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0d5b      	lsrs	r3, r3, #21
 80023f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	331b      	adds	r3, #27
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4413      	add	r3, r2
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	08db      	lsrs	r3, r3, #3
 8002410:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	331b      	adds	r3, #27
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4413      	add	r3, r2
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0202 	and.w	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	331b      	adds	r3, #27
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	4413      	add	r3, r2
 800243a:	3304      	adds	r3, #4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 020f 	and.w	r2, r3, #15
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	331b      	adds	r3, #27
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	b2da      	uxtb	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	331b      	adds	r3, #27
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4413      	add	r3, r2
 800246a:	3304      	adds	r3, #4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0c1b      	lsrs	r3, r3, #16
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4413      	add	r3, r2
 8002480:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	4413      	add	r3, r2
 8002496:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0a1a      	lsrs	r2, r3, #8
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0c1a      	lsrs	r2, r3, #16
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3302      	adds	r3, #2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e1a      	lsrs	r2, r3, #24
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	3303      	adds	r3, #3
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	3304      	adds	r3, #4
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	0a1a      	lsrs	r2, r3, #8
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	3305      	adds	r3, #5
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4413      	add	r3, r2
 8002516:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0c1a      	lsrs	r2, r3, #16
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	3306      	adds	r3, #6
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	4413      	add	r3, r2
 8002530:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0e1a      	lsrs	r2, r3, #24
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	3307      	adds	r3, #7
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0220 	orr.w	r2, r2, #32
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	e007      	b.n	8002568 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0220 	orr.w	r2, r2, #32
 8002566:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	e006      	b.n	800257a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002596:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d002      	beq.n	80025a4 <HAL_CAN_ActivateNotification+0x1e>
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d109      	bne.n	80025b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6959      	ldr	r1, [r3, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e006      	b.n	80025c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
  }
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b08a      	sub	sp, #40	; 0x28
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d07c      	beq.n	8002712 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d023      	beq.n	800266a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2201      	movs	r2, #1
 8002628:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f983 	bl	8002940 <HAL_CAN_TxMailbox0CompleteCallback>
 800263a:	e016      	b.n	800266a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	e00c      	b.n	800266a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	e002      	b.n	800266a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f989 	bl	800297c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d024      	beq.n	80026be <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f963 	bl	8002954 <HAL_CAN_TxMailbox1CompleteCallback>
 800268e:	e016      	b.n	80026be <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e00c      	b.n	80026be <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
 80026b6:	e002      	b.n	80026be <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f969 	bl	8002990 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d024      	beq.n	8002712 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f943 	bl	8002968 <HAL_CAN_TxMailbox2CompleteCallback>
 80026e2:	e016      	b.n	8002712 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
 80026f6:	e00c      	b.n	8002712 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d004      	beq.n	800270c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	e002      	b.n	8002712 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f949 	bl	80029a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00c      	beq.n	8002736 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2210      	movs	r2, #16
 8002734:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2208      	movs	r2, #8
 8002750:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f93a 	bl	80029cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f921 	bl	80029b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00c      	beq.n	800279a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002790:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2210      	movs	r2, #16
 8002798:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2208      	movs	r2, #8
 80027b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f912 	bl	80029e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7fe fbab 	bl	8000f30 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d006      	beq.n	80027fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2210      	movs	r2, #16
 80027f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f8fc 	bl	80029f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2208      	movs	r2, #8
 8002816:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f8f5 	bl	8002a08 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d07b      	beq.n	8002920 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d072      	beq.n	8002918 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288c:	2b00      	cmp	r3, #0
 800288e:	d043      	beq.n	8002918 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002896:	2b00      	cmp	r3, #0
 8002898:	d03e      	beq.n	8002918 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d02b      	beq.n	80028fc <HAL_CAN_IRQHandler+0x32a>
 80028a4:	2b60      	cmp	r3, #96	; 0x60
 80028a6:	d82e      	bhi.n	8002906 <HAL_CAN_IRQHandler+0x334>
 80028a8:	2b50      	cmp	r3, #80	; 0x50
 80028aa:	d022      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x320>
 80028ac:	2b50      	cmp	r3, #80	; 0x50
 80028ae:	d82a      	bhi.n	8002906 <HAL_CAN_IRQHandler+0x334>
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d019      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x316>
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d826      	bhi.n	8002906 <HAL_CAN_IRQHandler+0x334>
 80028b8:	2b30      	cmp	r3, #48	; 0x30
 80028ba:	d010      	beq.n	80028de <HAL_CAN_IRQHandler+0x30c>
 80028bc:	2b30      	cmp	r3, #48	; 0x30
 80028be:	d822      	bhi.n	8002906 <HAL_CAN_IRQHandler+0x334>
 80028c0:	2b10      	cmp	r3, #16
 80028c2:	d002      	beq.n	80028ca <HAL_CAN_IRQHandler+0x2f8>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d005      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028c8:	e01d      	b.n	8002906 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028d2:	e019      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	f043 0310 	orr.w	r3, r3, #16
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028dc:	e014      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	f043 0320 	orr.w	r3, r3, #32
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028e6:	e00f      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028f0:	e00a      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028fa:	e005      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002904:	e000      	b.n	8002908 <HAL_CAN_IRQHandler+0x336>
            break;
 8002906:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002916:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2204      	movs	r2, #4
 800291e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f872 	bl	8002a1c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002938:	bf00      	nop
 800293a:	3728      	adds	r7, #40	; 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b9c:	d301      	bcc.n	8002ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <SysTick_Config+0x40>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bb0:	f7ff ff8e 	bl	8002ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <SysTick_Config+0x40>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <SysTick_Config+0x40>)
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff29 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf8:	f7ff ff3e 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	6978      	ldr	r0, [r7, #20]
 8002c04:	f7ff ff8e 	bl	8002b24 <NVIC_EncodePriority>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff5d 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff31 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ffa2 	bl	8002b8c <SysTick_Config>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e16b      	b.n	8002f48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c70:	2201      	movs	r2, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f040 815a 	bne.w	8002f42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d005      	beq.n	8002ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d130      	bne.n	8002d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 0201 	and.w	r2, r3, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d017      	beq.n	8002d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d123      	bne.n	8002d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	08da      	lsrs	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3208      	adds	r2, #8
 8002d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	220f      	movs	r2, #15
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	08da      	lsrs	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3208      	adds	r2, #8
 8002d92:	69b9      	ldr	r1, [r7, #24]
 8002d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	2203      	movs	r2, #3
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0203 	and.w	r2, r3, #3
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80b4 	beq.w	8002f42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b60      	ldr	r3, [pc, #384]	; (8002f60 <HAL_GPIO_Init+0x30c>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	4a5f      	ldr	r2, [pc, #380]	; (8002f60 <HAL_GPIO_Init+0x30c>)
 8002de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dea:	4b5d      	ldr	r3, [pc, #372]	; (8002f60 <HAL_GPIO_Init+0x30c>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df6:	4a5b      	ldr	r2, [pc, #364]	; (8002f64 <HAL_GPIO_Init+0x310>)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_GPIO_Init+0x314>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02b      	beq.n	8002e7a <HAL_GPIO_Init+0x226>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a51      	ldr	r2, [pc, #324]	; (8002f6c <HAL_GPIO_Init+0x318>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d025      	beq.n	8002e76 <HAL_GPIO_Init+0x222>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_GPIO_Init+0x31c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <HAL_GPIO_Init+0x21e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4f      	ldr	r2, [pc, #316]	; (8002f74 <HAL_GPIO_Init+0x320>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d019      	beq.n	8002e6e <HAL_GPIO_Init+0x21a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4e      	ldr	r2, [pc, #312]	; (8002f78 <HAL_GPIO_Init+0x324>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_GPIO_Init+0x216>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4d      	ldr	r2, [pc, #308]	; (8002f7c <HAL_GPIO_Init+0x328>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00d      	beq.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4c      	ldr	r2, [pc, #304]	; (8002f80 <HAL_GPIO_Init+0x32c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <HAL_GPIO_Init+0x20e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4b      	ldr	r2, [pc, #300]	; (8002f84 <HAL_GPIO_Init+0x330>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_GPIO_Init+0x20a>
 8002e5a:	2307      	movs	r3, #7
 8002e5c:	e00e      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e5e:	2308      	movs	r3, #8
 8002e60:	e00c      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e62:	2306      	movs	r3, #6
 8002e64:	e00a      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e66:	2305      	movs	r3, #5
 8002e68:	e008      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	e006      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e004      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e002      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	f002 0203 	and.w	r2, r2, #3
 8002e82:	0092      	lsls	r2, r2, #2
 8002e84:	4093      	lsls	r3, r2
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e8c:	4935      	ldr	r1, [pc, #212]	; (8002f64 <HAL_GPIO_Init+0x310>)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	3302      	adds	r3, #2
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ebe:	4a32      	ldr	r2, [pc, #200]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec4:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee8:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f12:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f3c:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3301      	adds	r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2b0f      	cmp	r3, #15
 8002f4c:	f67f ae90 	bls.w	8002c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	3724      	adds	r7, #36	; 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020400 	.word	0x40020400
 8002f70:	40020800 	.word	0x40020800
 8002f74:	40020c00 	.word	0x40020c00
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40021400 	.word	0x40021400
 8002f80:	40021800 	.word	0x40021800
 8002f84:	40021c00 	.word	0x40021c00
 8002f88:	40013c00 	.word	0x40013c00

08002f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f9c:	787b      	ldrb	r3, [r7, #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa8:	e003      	b.n	8002fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002faa:	887b      	ldrh	r3, [r7, #2]
 8002fac:	041a      	lsls	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	619a      	str	r2, [r3, #24]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fd0:	887a      	ldrh	r2, [r7, #2]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	041a      	lsls	r2, r3, #16
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	43d9      	mvns	r1, r3
 8002fdc:	887b      	ldrh	r3, [r7, #2]
 8002fde:	400b      	ands	r3, r1
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e267      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d075      	beq.n	80030fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003012:	4b88      	ldr	r3, [pc, #544]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d00c      	beq.n	8003038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4b85      	ldr	r3, [pc, #532]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003026:	2b08      	cmp	r3, #8
 8003028:	d112      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b82      	ldr	r3, [pc, #520]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003036:	d10b      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	4b7e      	ldr	r3, [pc, #504]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05b      	beq.n	80030fc <HAL_RCC_OscConfig+0x108>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d157      	bne.n	80030fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e242      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x74>
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a75      	ldr	r2, [pc, #468]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x98>
 8003072:	4b70      	ldr	r3, [pc, #448]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6f      	ldr	r2, [pc, #444]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b6d      	ldr	r3, [pc, #436]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a6c      	ldr	r2, [pc, #432]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 800308c:	4b69      	ldr	r3, [pc, #420]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a68      	ldr	r2, [pc, #416]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b66      	ldr	r3, [pc, #408]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a65      	ldr	r2, [pc, #404]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fe52 	bl	8001d54 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe fe4e 	bl	8001d54 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e207      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xc0>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe fe3e 	bl	8001d54 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fe fe3a 	bl	8001d54 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1f3      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b51      	ldr	r3, [pc, #324]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0xe8>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d063      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310a:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b41      	ldr	r3, [pc, #260]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1c7      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b3b      	ldr	r3, [pc, #236]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4937      	ldr	r1, [pc, #220]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e03a      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b34      	ldr	r3, [pc, #208]	; (8003238 <HAL_RCC_OscConfig+0x244>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fdf3 	bl	8001d54 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003172:	f7fe fdef 	bl	8001d54 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1a8      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4925      	ldr	r1, [pc, #148]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e015      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_RCC_OscConfig+0x244>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fdd2 	bl	8001d54 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fe fdce 	bl	8001d54 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e187      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d036      	beq.n	800324c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_RCC_OscConfig+0x248>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe fdb2 	bl	8001d54 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe fdae 	bl	8001d54 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e167      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_OscConfig+0x240>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x200>
 8003212:	e01b      	b.n	800324c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_OscConfig+0x248>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe fd9b 	bl	8001d54 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e00e      	b.n	8003240 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe fd97 	bl	8001d54 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d907      	bls.n	8003240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e150      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
 8003234:	40023800 	.word	0x40023800
 8003238:	42470000 	.word	0x42470000
 800323c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	4b88      	ldr	r3, [pc, #544]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ea      	bne.n	8003222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8097 	beq.w	8003388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b81      	ldr	r3, [pc, #516]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b7d      	ldr	r3, [pc, #500]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a7c      	ldr	r2, [pc, #496]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	4b7a      	ldr	r3, [pc, #488]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b77      	ldr	r3, [pc, #476]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b74      	ldr	r3, [pc, #464]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a73      	ldr	r2, [pc, #460]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7fe fd57 	bl	8001d54 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7fe fd53 	bl	8001d54 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e10c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <HAL_RCC_OscConfig+0x474>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x2ea>
 80032d0:	4b64      	ldr	r3, [pc, #400]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	4a63      	ldr	r2, [pc, #396]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6713      	str	r3, [r2, #112]	; 0x70
 80032dc:	e01c      	b.n	8003318 <HAL_RCC_OscConfig+0x324>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x30c>
 80032e6:	4b5f      	ldr	r3, [pc, #380]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	4a5e      	ldr	r2, [pc, #376]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
 80032f2:	4b5c      	ldr	r3, [pc, #368]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a5b      	ldr	r2, [pc, #364]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0x324>
 8003300:	4b58      	ldr	r3, [pc, #352]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	4a57      	ldr	r2, [pc, #348]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	6713      	str	r3, [r2, #112]	; 0x70
 800330c:	4b55      	ldr	r3, [pc, #340]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	4a54      	ldr	r2, [pc, #336]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003312:	f023 0304 	bic.w	r3, r3, #4
 8003316:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe fd18 	bl	8001d54 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fe fd14 	bl	8001d54 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0cb      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	4b49      	ldr	r3, [pc, #292]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ee      	beq.n	8003328 <HAL_RCC_OscConfig+0x334>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334c:	f7fe fd02 	bl	8001d54 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fe fcfe 	bl	8001d54 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0b5      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	4b3e      	ldr	r3, [pc, #248]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ee      	bne.n	8003354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337c:	4b39      	ldr	r3, [pc, #228]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	4a38      	ldr	r2, [pc, #224]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003386:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a1 	beq.w	80034d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003392:	4b34      	ldr	r3, [pc, #208]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b08      	cmp	r3, #8
 800339c:	d05c      	beq.n	8003458 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d141      	bne.n	800342a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b31      	ldr	r3, [pc, #196]	; (800346c <HAL_RCC_OscConfig+0x478>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fe fcd2 	bl	8001d54 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe fcce 	bl	8001d54 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e087      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	4b27      	ldr	r3, [pc, #156]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	491b      	ldr	r1, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <HAL_RCC_OscConfig+0x478>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fe fca7 	bl	8001d54 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340a:	f7fe fca3 	bl	8001d54 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e05c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x416>
 8003428:	e054      	b.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <HAL_RCC_OscConfig+0x478>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fc90 	bl	8001d54 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003438:	f7fe fc8c 	bl	8001d54 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e045      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_OscConfig+0x470>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x444>
 8003456:	e03d      	b.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e038      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
 8003464:	40023800 	.word	0x40023800
 8003468:	40007000 	.word	0x40007000
 800346c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x4ec>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d028      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d121      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d11a      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d111      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	3b01      	subs	r3, #1
 80034ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0cc      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b68      	ldr	r3, [pc, #416]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d90c      	bls.n	8003520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b65      	ldr	r3, [pc, #404]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b8      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003538:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003550:	4b53      	ldr	r3, [pc, #332]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800355a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355c:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	494d      	ldr	r1, [pc, #308]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d044      	beq.n	8003604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d119      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e06f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e067      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4934      	ldr	r1, [pc, #208]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d4:	f7fe fbbe 	bl	8001d54 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7fe fbba 	bl	8001d54 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e04f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 020c 	and.w	r2, r3, #12
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	429a      	cmp	r2, r3
 8003602:	d1eb      	bne.n	80035dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d20c      	bcs.n	800362c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e032      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4916      	ldr	r1, [pc, #88]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	490e      	ldr	r1, [pc, #56]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800366a:	f000 f821 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800366e:	4602      	mov	r2, r0
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	490a      	ldr	r1, [pc, #40]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	5ccb      	ldrb	r3, [r1, r3]
 800367e:	fa22 f303 	lsr.w	r3, r2, r3
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fb1e 	bl	8001ccc <HAL_InitTick>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023c00 	.word	0x40023c00
 80036a0:	40023800 	.word	0x40023800
 80036a4:	080071e4 	.word	0x080071e4
 80036a8:	20000000 	.word	0x20000000
 80036ac:	20000004 	.word	0x20000004

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b4:	b094      	sub	sp, #80	; 0x50
 80036b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	647b      	str	r3, [r7, #68]	; 0x44
 80036bc:	2300      	movs	r3, #0
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c0:	2300      	movs	r3, #0
 80036c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c8:	4b79      	ldr	r3, [pc, #484]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x40>
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	f200 80e1 	bhi.w	800389c <HAL_RCC_GetSysClockFreq+0x1ec>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x34>
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x3a>
 80036e2:	e0db      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b73      	ldr	r3, [pc, #460]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036e8:	e0db      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ea:	4b73      	ldr	r3, [pc, #460]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80036ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ee:	e0d8      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f0:	4b6f      	ldr	r3, [pc, #444]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fa:	4b6d      	ldr	r3, [pc, #436]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d063      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b6a      	ldr	r3, [pc, #424]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	2200      	movs	r2, #0
 800370e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003710:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003718:	633b      	str	r3, [r7, #48]	; 0x30
 800371a:	2300      	movs	r3, #0
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
 800371e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003722:	4622      	mov	r2, r4
 8003724:	462b      	mov	r3, r5
 8003726:	f04f 0000 	mov.w	r0, #0
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	0159      	lsls	r1, r3, #5
 8003730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003734:	0150      	lsls	r0, r2, #5
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4621      	mov	r1, r4
 800373c:	1a51      	subs	r1, r2, r1
 800373e:	6139      	str	r1, [r7, #16]
 8003740:	4629      	mov	r1, r5
 8003742:	eb63 0301 	sbc.w	r3, r3, r1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003754:	4659      	mov	r1, fp
 8003756:	018b      	lsls	r3, r1, #6
 8003758:	4651      	mov	r1, sl
 800375a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800375e:	4651      	mov	r1, sl
 8003760:	018a      	lsls	r2, r1, #6
 8003762:	4651      	mov	r1, sl
 8003764:	ebb2 0801 	subs.w	r8, r2, r1
 8003768:	4659      	mov	r1, fp
 800376a:	eb63 0901 	sbc.w	r9, r3, r1
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800377a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800377e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003782:	4690      	mov	r8, r2
 8003784:	4699      	mov	r9, r3
 8003786:	4623      	mov	r3, r4
 8003788:	eb18 0303 	adds.w	r3, r8, r3
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	462b      	mov	r3, r5
 8003790:	eb49 0303 	adc.w	r3, r9, r3
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037a2:	4629      	mov	r1, r5
 80037a4:	024b      	lsls	r3, r1, #9
 80037a6:	4621      	mov	r1, r4
 80037a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037ac:	4621      	mov	r1, r4
 80037ae:	024a      	lsls	r2, r1, #9
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b6:	2200      	movs	r2, #0
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037c0:	f7fd f9f2 	bl	8000ba8 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037cc:	e058      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ce:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	2200      	movs	r2, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	4611      	mov	r1, r2
 80037da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037de:	623b      	str	r3, [r7, #32]
 80037e0:	2300      	movs	r3, #0
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
 80037e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037e8:	4642      	mov	r2, r8
 80037ea:	464b      	mov	r3, r9
 80037ec:	f04f 0000 	mov.w	r0, #0
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	0159      	lsls	r1, r3, #5
 80037f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037fa:	0150      	lsls	r0, r2, #5
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4641      	mov	r1, r8
 8003802:	ebb2 0a01 	subs.w	sl, r2, r1
 8003806:	4649      	mov	r1, r9
 8003808:	eb63 0b01 	sbc.w	fp, r3, r1
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003818:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800381c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003820:	ebb2 040a 	subs.w	r4, r2, sl
 8003824:	eb63 050b 	sbc.w	r5, r3, fp
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	00eb      	lsls	r3, r5, #3
 8003832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003836:	00e2      	lsls	r2, r4, #3
 8003838:	4614      	mov	r4, r2
 800383a:	461d      	mov	r5, r3
 800383c:	4643      	mov	r3, r8
 800383e:	18e3      	adds	r3, r4, r3
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	464b      	mov	r3, r9
 8003844:	eb45 0303 	adc.w	r3, r5, r3
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003856:	4629      	mov	r1, r5
 8003858:	028b      	lsls	r3, r1, #10
 800385a:	4621      	mov	r1, r4
 800385c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003860:	4621      	mov	r1, r4
 8003862:	028a      	lsls	r2, r1, #10
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386a:	2200      	movs	r2, #0
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	61fa      	str	r2, [r7, #28]
 8003870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003874:	f7fd f998 	bl	8000ba8 <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4613      	mov	r3, r2
 800387e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	3301      	adds	r3, #1
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800389a:	e002      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800389e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3750      	adds	r7, #80	; 0x50
 80038a8:	46bd      	mov	sp, r7
 80038aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800
 80038b4:	00f42400 	.word	0x00f42400
 80038b8:	007a1200 	.word	0x007a1200

080038bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000000 	.word	0x20000000

080038d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038d8:	f7ff fff0 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0a9b      	lsrs	r3, r3, #10
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800
 80038f8:	080071f4 	.word	0x080071f4

080038fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003900:	f7ff ffdc 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	0b5b      	lsrs	r3, r3, #13
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	080071f4 	.word	0x080071f4

08003924 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e097      	b.n	8003a68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7fd ff71 	bl	8001834 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003968:	f023 0307 	bic.w	r3, r3, #7
 800396c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f000 f9b3 	bl	8003ce4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	4313      	orrs	r3, r2
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039c4:	f023 030c 	bic.w	r3, r3, #12
 80039c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	4313      	orrs	r3, r2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	011a      	lsls	r2, r3, #4
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	031b      	lsls	r3, r3, #12
 80039f4:	4313      	orrs	r3, r2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	4313      	orrs	r3, r2
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d122      	bne.n	8003acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d11b      	bne.n	8003acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0202 	mvn.w	r2, #2
 8003a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8f8 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003ab8:	e005      	b.n	8003ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8ea 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f8fb 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d122      	bne.n	8003b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d11b      	bne.n	8003b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0204 	mvn.w	r2, #4
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8ce 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8c0 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f8d1 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0208 	mvn.w	r2, #8
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2204      	movs	r2, #4
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8a4 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f896 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f8a7 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0210 	mvn.w	r2, #16
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f87a 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f86c 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f87d 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d107      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0201 	mvn.w	r2, #1
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f846 	bl	8003c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfe:	2b80      	cmp	r3, #128	; 0x80
 8003c00:	d10e      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d107      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f988 	bl	8003f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d10e      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d107      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f842 	bl	8003cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d10e      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d107      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0220 	mvn.w	r2, #32
 8003c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f952 	bl	8003f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a40      	ldr	r2, [pc, #256]	; (8003df8 <TIM_Base_SetConfig+0x114>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d02:	d00f      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a3d      	ldr	r2, [pc, #244]	; (8003dfc <TIM_Base_SetConfig+0x118>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a3c      	ldr	r2, [pc, #240]	; (8003e00 <TIM_Base_SetConfig+0x11c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a3b      	ldr	r2, [pc, #236]	; (8003e04 <TIM_Base_SetConfig+0x120>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a3a      	ldr	r2, [pc, #232]	; (8003e08 <TIM_Base_SetConfig+0x124>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d108      	bne.n	8003d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <TIM_Base_SetConfig+0x114>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d02b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d027      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <TIM_Base_SetConfig+0x118>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d023      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2b      	ldr	r2, [pc, #172]	; (8003e00 <TIM_Base_SetConfig+0x11c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01f      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <TIM_Base_SetConfig+0x120>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a29      	ldr	r2, [pc, #164]	; (8003e08 <TIM_Base_SetConfig+0x124>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d017      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a28      	ldr	r2, [pc, #160]	; (8003e0c <TIM_Base_SetConfig+0x128>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00f      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <TIM_Base_SetConfig+0x130>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <TIM_Base_SetConfig+0x134>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d007      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a24      	ldr	r2, [pc, #144]	; (8003e1c <TIM_Base_SetConfig+0x138>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <TIM_Base_SetConfig+0x13c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <TIM_Base_SetConfig+0x114>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_Base_SetConfig+0xf8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a0c      	ldr	r2, [pc, #48]	; (8003e08 <TIM_Base_SetConfig+0x124>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	615a      	str	r2, [r3, #20]
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800
 8003e04:	40000c00 	.word	0x40000c00
 8003e08:	40010400 	.word	0x40010400
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400
 8003e14:	40014800 	.word	0x40014800
 8003e18:	40001800 	.word	0x40001800
 8003e1c:	40001c00 	.word	0x40001c00
 8003e20:	40002000 	.word	0x40002000

08003e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e05a      	b.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d022      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e88:	d01d      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d018      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d009      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a15      	ldr	r2, [pc, #84]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40010000 	.word	0x40010000
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40000c00 	.word	0x40000c00
 8003f10:	40010400 	.word	0x40010400
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40001800 	.word	0x40001800

08003f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e03f      	b.n	8003fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd fd0c 	bl	8001988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	; 0x24
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f929 	bl	80041e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08a      	sub	sp, #40	; 0x28
 8003fe2:	af02      	add	r7, sp, #8
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d17c      	bne.n	80040f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_UART_Transmit+0x2c>
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e075      	b.n	80040fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_UART_Transmit+0x3e>
 8004018:	2302      	movs	r3, #2
 800401a:	e06e      	b.n	80040fa <HAL_UART_Transmit+0x11c>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2221      	movs	r2, #33	; 0x21
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004032:	f7fd fe8f 	bl	8001d54 <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404c:	d108      	bne.n	8004060 <HAL_UART_Transmit+0x82>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d104      	bne.n	8004060 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	e003      	b.n	8004068 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004064:	2300      	movs	r3, #0
 8004066:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004070:	e02a      	b.n	80040c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f840 	bl	8004102 <UART_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e036      	b.n	80040fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	3302      	adds	r3, #2
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	e007      	b.n	80040ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	781a      	ldrb	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	3301      	adds	r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1cf      	bne.n	8004072 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2200      	movs	r2, #0
 80040da:	2140      	movs	r1, #64	; 0x40
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f810 	bl	8004102 <UART_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e006      	b.n	80040fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b090      	sub	sp, #64	; 0x40
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	4613      	mov	r3, r2
 8004110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004112:	e050      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800411a:	d04c      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800411c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0x30>
 8004122:	f7fd fe17 	bl	8001d54 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800412e:	429a      	cmp	r2, r3
 8004130:	d241      	bcs.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004152:	637a      	str	r2, [r7, #52]	; 0x34
 8004154:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	613b      	str	r3, [r7, #16]
   return(result);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	63bb      	str	r3, [r7, #56]	; 0x38
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3314      	adds	r3, #20
 8004184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004186:	623a      	str	r2, [r7, #32]
 8004188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	69f9      	ldr	r1, [r7, #28]
 800418c:	6a3a      	ldr	r2, [r7, #32]
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	61bb      	str	r3, [r7, #24]
   return(result);
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e5      	bne.n	8004166 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e00f      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d09f      	beq.n	8004114 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3740      	adds	r7, #64	; 0x40
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e4:	b0c0      	sub	sp, #256	; 0x100
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fc:	68d9      	ldr	r1, [r3, #12]
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	ea40 0301 	orr.w	r3, r0, r1
 8004208:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	431a      	orrs	r2, r3
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	431a      	orrs	r2, r3
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004238:	f021 010c 	bic.w	r1, r1, #12
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004246:	430b      	orrs	r3, r1
 8004248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425a:	6999      	ldr	r1, [r3, #24]
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	ea40 0301 	orr.w	r3, r0, r1
 8004266:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b8f      	ldr	r3, [pc, #572]	; (80044ac <UART_SetConfig+0x2cc>)
 8004270:	429a      	cmp	r2, r3
 8004272:	d005      	beq.n	8004280 <UART_SetConfig+0xa0>
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	4b8d      	ldr	r3, [pc, #564]	; (80044b0 <UART_SetConfig+0x2d0>)
 800427c:	429a      	cmp	r2, r3
 800427e:	d104      	bne.n	800428a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004280:	f7ff fb3c 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 8004284:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004288:	e003      	b.n	8004292 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800428a:	f7ff fb23 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 800428e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429c:	f040 810c 	bne.w	80044b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a4:	2200      	movs	r2, #0
 80042a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	1891      	adds	r1, r2, r2
 80042b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80042ba:	415b      	adcs	r3, r3
 80042bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042c2:	4621      	mov	r1, r4
 80042c4:	eb12 0801 	adds.w	r8, r2, r1
 80042c8:	4629      	mov	r1, r5
 80042ca:	eb43 0901 	adc.w	r9, r3, r1
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042e2:	4690      	mov	r8, r2
 80042e4:	4699      	mov	r9, r3
 80042e6:	4623      	mov	r3, r4
 80042e8:	eb18 0303 	adds.w	r3, r8, r3
 80042ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042f0:	462b      	mov	r3, r5
 80042f2:	eb49 0303 	adc.w	r3, r9, r3
 80042f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004306:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800430a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800430e:	460b      	mov	r3, r1
 8004310:	18db      	adds	r3, r3, r3
 8004312:	653b      	str	r3, [r7, #80]	; 0x50
 8004314:	4613      	mov	r3, r2
 8004316:	eb42 0303 	adc.w	r3, r2, r3
 800431a:	657b      	str	r3, [r7, #84]	; 0x54
 800431c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004320:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004324:	f7fc fc40 	bl	8000ba8 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <UART_SetConfig+0x2d4>)
 800432e:	fba3 2302 	umull	r2, r3, r3, r2
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	011c      	lsls	r4, r3, #4
 8004336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800433a:	2200      	movs	r2, #0
 800433c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004340:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004344:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004348:	4642      	mov	r2, r8
 800434a:	464b      	mov	r3, r9
 800434c:	1891      	adds	r1, r2, r2
 800434e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004350:	415b      	adcs	r3, r3
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004354:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004358:	4641      	mov	r1, r8
 800435a:	eb12 0a01 	adds.w	sl, r2, r1
 800435e:	4649      	mov	r1, r9
 8004360:	eb43 0b01 	adc.w	fp, r3, r1
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004370:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004374:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004378:	4692      	mov	sl, r2
 800437a:	469b      	mov	fp, r3
 800437c:	4643      	mov	r3, r8
 800437e:	eb1a 0303 	adds.w	r3, sl, r3
 8004382:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004386:	464b      	mov	r3, r9
 8004388:	eb4b 0303 	adc.w	r3, fp, r3
 800438c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800439c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043a4:	460b      	mov	r3, r1
 80043a6:	18db      	adds	r3, r3, r3
 80043a8:	643b      	str	r3, [r7, #64]	; 0x40
 80043aa:	4613      	mov	r3, r2
 80043ac:	eb42 0303 	adc.w	r3, r2, r3
 80043b0:	647b      	str	r3, [r7, #68]	; 0x44
 80043b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043ba:	f7fc fbf5 	bl	8000ba8 <__aeabi_uldivmod>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	4b3b      	ldr	r3, [pc, #236]	; (80044b4 <UART_SetConfig+0x2d4>)
 80043c6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	2264      	movs	r2, #100	; 0x64
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	1acb      	subs	r3, r1, r3
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043da:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <UART_SetConfig+0x2d4>)
 80043dc:	fba3 2302 	umull	r2, r3, r3, r2
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043e8:	441c      	add	r4, r3
 80043ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043fc:	4642      	mov	r2, r8
 80043fe:	464b      	mov	r3, r9
 8004400:	1891      	adds	r1, r2, r2
 8004402:	63b9      	str	r1, [r7, #56]	; 0x38
 8004404:	415b      	adcs	r3, r3
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800440c:	4641      	mov	r1, r8
 800440e:	1851      	adds	r1, r2, r1
 8004410:	6339      	str	r1, [r7, #48]	; 0x30
 8004412:	4649      	mov	r1, r9
 8004414:	414b      	adcs	r3, r1
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004424:	4659      	mov	r1, fp
 8004426:	00cb      	lsls	r3, r1, #3
 8004428:	4651      	mov	r1, sl
 800442a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800442e:	4651      	mov	r1, sl
 8004430:	00ca      	lsls	r2, r1, #3
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	4603      	mov	r3, r0
 8004438:	4642      	mov	r2, r8
 800443a:	189b      	adds	r3, r3, r2
 800443c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004440:	464b      	mov	r3, r9
 8004442:	460a      	mov	r2, r1
 8004444:	eb42 0303 	adc.w	r3, r2, r3
 8004448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004458:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800445c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004460:	460b      	mov	r3, r1
 8004462:	18db      	adds	r3, r3, r3
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
 8004466:	4613      	mov	r3, r2
 8004468:	eb42 0303 	adc.w	r3, r2, r3
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004472:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004476:	f7fc fb97 	bl	8000ba8 <__aeabi_uldivmod>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <UART_SetConfig+0x2d4>)
 8004480:	fba3 1302 	umull	r1, r3, r3, r2
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	2164      	movs	r1, #100	; 0x64
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	3332      	adds	r3, #50	; 0x32
 8004492:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <UART_SetConfig+0x2d4>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	f003 0207 	and.w	r2, r3, #7
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4422      	add	r2, r4
 80044a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044a8:	e105      	b.n	80046b6 <UART_SetConfig+0x4d6>
 80044aa:	bf00      	nop
 80044ac:	40011000 	.word	0x40011000
 80044b0:	40011400 	.word	0x40011400
 80044b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044bc:	2200      	movs	r2, #0
 80044be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044ca:	4642      	mov	r2, r8
 80044cc:	464b      	mov	r3, r9
 80044ce:	1891      	adds	r1, r2, r2
 80044d0:	6239      	str	r1, [r7, #32]
 80044d2:	415b      	adcs	r3, r3
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
 80044d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044da:	4641      	mov	r1, r8
 80044dc:	1854      	adds	r4, r2, r1
 80044de:	4649      	mov	r1, r9
 80044e0:	eb43 0501 	adc.w	r5, r3, r1
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	00eb      	lsls	r3, r5, #3
 80044ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044f2:	00e2      	lsls	r2, r4, #3
 80044f4:	4614      	mov	r4, r2
 80044f6:	461d      	mov	r5, r3
 80044f8:	4643      	mov	r3, r8
 80044fa:	18e3      	adds	r3, r4, r3
 80044fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004500:	464b      	mov	r3, r9
 8004502:	eb45 0303 	adc.w	r3, r5, r3
 8004506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004526:	4629      	mov	r1, r5
 8004528:	008b      	lsls	r3, r1, #2
 800452a:	4621      	mov	r1, r4
 800452c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004530:	4621      	mov	r1, r4
 8004532:	008a      	lsls	r2, r1, #2
 8004534:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004538:	f7fc fb36 	bl	8000ba8 <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4b60      	ldr	r3, [pc, #384]	; (80046c4 <UART_SetConfig+0x4e4>)
 8004542:	fba3 2302 	umull	r2, r3, r3, r2
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	011c      	lsls	r4, r3, #4
 800454a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454e:	2200      	movs	r2, #0
 8004550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004558:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800455c:	4642      	mov	r2, r8
 800455e:	464b      	mov	r3, r9
 8004560:	1891      	adds	r1, r2, r2
 8004562:	61b9      	str	r1, [r7, #24]
 8004564:	415b      	adcs	r3, r3
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456c:	4641      	mov	r1, r8
 800456e:	1851      	adds	r1, r2, r1
 8004570:	6139      	str	r1, [r7, #16]
 8004572:	4649      	mov	r1, r9
 8004574:	414b      	adcs	r3, r1
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004584:	4659      	mov	r1, fp
 8004586:	00cb      	lsls	r3, r1, #3
 8004588:	4651      	mov	r1, sl
 800458a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800458e:	4651      	mov	r1, sl
 8004590:	00ca      	lsls	r2, r1, #3
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	4603      	mov	r3, r0
 8004598:	4642      	mov	r2, r8
 800459a:	189b      	adds	r3, r3, r2
 800459c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045a0:	464b      	mov	r3, r9
 80045a2:	460a      	mov	r2, r1
 80045a4:	eb42 0303 	adc.w	r3, r2, r3
 80045a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80045b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045c4:	4649      	mov	r1, r9
 80045c6:	008b      	lsls	r3, r1, #2
 80045c8:	4641      	mov	r1, r8
 80045ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ce:	4641      	mov	r1, r8
 80045d0:	008a      	lsls	r2, r1, #2
 80045d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045d6:	f7fc fae7 	bl	8000ba8 <__aeabi_uldivmod>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4b39      	ldr	r3, [pc, #228]	; (80046c4 <UART_SetConfig+0x4e4>)
 80045e0:	fba3 1302 	umull	r1, r3, r3, r2
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	2164      	movs	r1, #100	; 0x64
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	3332      	adds	r3, #50	; 0x32
 80045f2:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <UART_SetConfig+0x4e4>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045fe:	441c      	add	r4, r3
 8004600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004604:	2200      	movs	r2, #0
 8004606:	673b      	str	r3, [r7, #112]	; 0x70
 8004608:	677a      	str	r2, [r7, #116]	; 0x74
 800460a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800460e:	4642      	mov	r2, r8
 8004610:	464b      	mov	r3, r9
 8004612:	1891      	adds	r1, r2, r2
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	415b      	adcs	r3, r3
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800461e:	4641      	mov	r1, r8
 8004620:	1851      	adds	r1, r2, r1
 8004622:	6039      	str	r1, [r7, #0]
 8004624:	4649      	mov	r1, r9
 8004626:	414b      	adcs	r3, r1
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004636:	4659      	mov	r1, fp
 8004638:	00cb      	lsls	r3, r1, #3
 800463a:	4651      	mov	r1, sl
 800463c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004640:	4651      	mov	r1, sl
 8004642:	00ca      	lsls	r2, r1, #3
 8004644:	4610      	mov	r0, r2
 8004646:	4619      	mov	r1, r3
 8004648:	4603      	mov	r3, r0
 800464a:	4642      	mov	r2, r8
 800464c:	189b      	adds	r3, r3, r2
 800464e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004650:	464b      	mov	r3, r9
 8004652:	460a      	mov	r2, r1
 8004654:	eb42 0303 	adc.w	r3, r2, r3
 8004658:	66fb      	str	r3, [r7, #108]	; 0x6c
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	663b      	str	r3, [r7, #96]	; 0x60
 8004664:	667a      	str	r2, [r7, #100]	; 0x64
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004672:	4649      	mov	r1, r9
 8004674:	008b      	lsls	r3, r1, #2
 8004676:	4641      	mov	r1, r8
 8004678:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467c:	4641      	mov	r1, r8
 800467e:	008a      	lsls	r2, r1, #2
 8004680:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004684:	f7fc fa90 	bl	8000ba8 <__aeabi_uldivmod>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <UART_SetConfig+0x4e4>)
 800468e:	fba3 1302 	umull	r1, r3, r3, r2
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	2164      	movs	r1, #100	; 0x64
 8004696:	fb01 f303 	mul.w	r3, r1, r3
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	3332      	adds	r3, #50	; 0x32
 80046a0:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <UART_SetConfig+0x4e4>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	f003 020f 	and.w	r2, r3, #15
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4422      	add	r2, r4
 80046b4:	609a      	str	r2, [r3, #8]
}
 80046b6:	bf00      	nop
 80046b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046bc:	46bd      	mov	sp, r7
 80046be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c2:	bf00      	nop
 80046c4:	51eb851f 	.word	0x51eb851f

080046c8 <__errno>:
 80046c8:	4b01      	ldr	r3, [pc, #4]	; (80046d0 <__errno+0x8>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	2000000c 	.word	0x2000000c

080046d4 <__libc_init_array>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4d0d      	ldr	r5, [pc, #52]	; (800470c <__libc_init_array+0x38>)
 80046d8:	4c0d      	ldr	r4, [pc, #52]	; (8004710 <__libc_init_array+0x3c>)
 80046da:	1b64      	subs	r4, r4, r5
 80046dc:	10a4      	asrs	r4, r4, #2
 80046de:	2600      	movs	r6, #0
 80046e0:	42a6      	cmp	r6, r4
 80046e2:	d109      	bne.n	80046f8 <__libc_init_array+0x24>
 80046e4:	4d0b      	ldr	r5, [pc, #44]	; (8004714 <__libc_init_array+0x40>)
 80046e6:	4c0c      	ldr	r4, [pc, #48]	; (8004718 <__libc_init_array+0x44>)
 80046e8:	f002 fd4e 	bl	8007188 <_init>
 80046ec:	1b64      	subs	r4, r4, r5
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	2600      	movs	r6, #0
 80046f2:	42a6      	cmp	r6, r4
 80046f4:	d105      	bne.n	8004702 <__libc_init_array+0x2e>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fc:	4798      	blx	r3
 80046fe:	3601      	adds	r6, #1
 8004700:	e7ee      	b.n	80046e0 <__libc_init_array+0xc>
 8004702:	f855 3b04 	ldr.w	r3, [r5], #4
 8004706:	4798      	blx	r3
 8004708:	3601      	adds	r6, #1
 800470a:	e7f2      	b.n	80046f2 <__libc_init_array+0x1e>
 800470c:	080075dc 	.word	0x080075dc
 8004710:	080075dc 	.word	0x080075dc
 8004714:	080075dc 	.word	0x080075dc
 8004718:	080075e0 	.word	0x080075e0

0800471c <memset>:
 800471c:	4402      	add	r2, r0
 800471e:	4603      	mov	r3, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	f803 1b01 	strb.w	r1, [r3], #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <__cvt>:
 800472c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004730:	ec55 4b10 	vmov	r4, r5, d0
 8004734:	2d00      	cmp	r5, #0
 8004736:	460e      	mov	r6, r1
 8004738:	4619      	mov	r1, r3
 800473a:	462b      	mov	r3, r5
 800473c:	bfbb      	ittet	lt
 800473e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004742:	461d      	movlt	r5, r3
 8004744:	2300      	movge	r3, #0
 8004746:	232d      	movlt	r3, #45	; 0x2d
 8004748:	700b      	strb	r3, [r1, #0]
 800474a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800474c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004750:	4691      	mov	r9, r2
 8004752:	f023 0820 	bic.w	r8, r3, #32
 8004756:	bfbc      	itt	lt
 8004758:	4622      	movlt	r2, r4
 800475a:	4614      	movlt	r4, r2
 800475c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004760:	d005      	beq.n	800476e <__cvt+0x42>
 8004762:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004766:	d100      	bne.n	800476a <__cvt+0x3e>
 8004768:	3601      	adds	r6, #1
 800476a:	2102      	movs	r1, #2
 800476c:	e000      	b.n	8004770 <__cvt+0x44>
 800476e:	2103      	movs	r1, #3
 8004770:	ab03      	add	r3, sp, #12
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	ab02      	add	r3, sp, #8
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	ec45 4b10 	vmov	d0, r4, r5
 800477c:	4653      	mov	r3, sl
 800477e:	4632      	mov	r2, r6
 8004780:	f000 fce2 	bl	8005148 <_dtoa_r>
 8004784:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004788:	4607      	mov	r7, r0
 800478a:	d102      	bne.n	8004792 <__cvt+0x66>
 800478c:	f019 0f01 	tst.w	r9, #1
 8004790:	d022      	beq.n	80047d8 <__cvt+0xac>
 8004792:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004796:	eb07 0906 	add.w	r9, r7, r6
 800479a:	d110      	bne.n	80047be <__cvt+0x92>
 800479c:	783b      	ldrb	r3, [r7, #0]
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	d10a      	bne.n	80047b8 <__cvt+0x8c>
 80047a2:	2200      	movs	r2, #0
 80047a4:	2300      	movs	r3, #0
 80047a6:	4620      	mov	r0, r4
 80047a8:	4629      	mov	r1, r5
 80047aa:	f7fc f98d 	bl	8000ac8 <__aeabi_dcmpeq>
 80047ae:	b918      	cbnz	r0, 80047b8 <__cvt+0x8c>
 80047b0:	f1c6 0601 	rsb	r6, r6, #1
 80047b4:	f8ca 6000 	str.w	r6, [sl]
 80047b8:	f8da 3000 	ldr.w	r3, [sl]
 80047bc:	4499      	add	r9, r3
 80047be:	2200      	movs	r2, #0
 80047c0:	2300      	movs	r3, #0
 80047c2:	4620      	mov	r0, r4
 80047c4:	4629      	mov	r1, r5
 80047c6:	f7fc f97f 	bl	8000ac8 <__aeabi_dcmpeq>
 80047ca:	b108      	cbz	r0, 80047d0 <__cvt+0xa4>
 80047cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80047d0:	2230      	movs	r2, #48	; 0x30
 80047d2:	9b03      	ldr	r3, [sp, #12]
 80047d4:	454b      	cmp	r3, r9
 80047d6:	d307      	bcc.n	80047e8 <__cvt+0xbc>
 80047d8:	9b03      	ldr	r3, [sp, #12]
 80047da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047dc:	1bdb      	subs	r3, r3, r7
 80047de:	4638      	mov	r0, r7
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	b004      	add	sp, #16
 80047e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e8:	1c59      	adds	r1, r3, #1
 80047ea:	9103      	str	r1, [sp, #12]
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e7f0      	b.n	80047d2 <__cvt+0xa6>

080047f0 <__exponent>:
 80047f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f2:	4603      	mov	r3, r0
 80047f4:	2900      	cmp	r1, #0
 80047f6:	bfb8      	it	lt
 80047f8:	4249      	neglt	r1, r1
 80047fa:	f803 2b02 	strb.w	r2, [r3], #2
 80047fe:	bfb4      	ite	lt
 8004800:	222d      	movlt	r2, #45	; 0x2d
 8004802:	222b      	movge	r2, #43	; 0x2b
 8004804:	2909      	cmp	r1, #9
 8004806:	7042      	strb	r2, [r0, #1]
 8004808:	dd2a      	ble.n	8004860 <__exponent+0x70>
 800480a:	f10d 0407 	add.w	r4, sp, #7
 800480e:	46a4      	mov	ip, r4
 8004810:	270a      	movs	r7, #10
 8004812:	46a6      	mov	lr, r4
 8004814:	460a      	mov	r2, r1
 8004816:	fb91 f6f7 	sdiv	r6, r1, r7
 800481a:	fb07 1516 	mls	r5, r7, r6, r1
 800481e:	3530      	adds	r5, #48	; 0x30
 8004820:	2a63      	cmp	r2, #99	; 0x63
 8004822:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004826:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800482a:	4631      	mov	r1, r6
 800482c:	dcf1      	bgt.n	8004812 <__exponent+0x22>
 800482e:	3130      	adds	r1, #48	; 0x30
 8004830:	f1ae 0502 	sub.w	r5, lr, #2
 8004834:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004838:	1c44      	adds	r4, r0, #1
 800483a:	4629      	mov	r1, r5
 800483c:	4561      	cmp	r1, ip
 800483e:	d30a      	bcc.n	8004856 <__exponent+0x66>
 8004840:	f10d 0209 	add.w	r2, sp, #9
 8004844:	eba2 020e 	sub.w	r2, r2, lr
 8004848:	4565      	cmp	r5, ip
 800484a:	bf88      	it	hi
 800484c:	2200      	movhi	r2, #0
 800484e:	4413      	add	r3, r2
 8004850:	1a18      	subs	r0, r3, r0
 8004852:	b003      	add	sp, #12
 8004854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800485a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800485e:	e7ed      	b.n	800483c <__exponent+0x4c>
 8004860:	2330      	movs	r3, #48	; 0x30
 8004862:	3130      	adds	r1, #48	; 0x30
 8004864:	7083      	strb	r3, [r0, #2]
 8004866:	70c1      	strb	r1, [r0, #3]
 8004868:	1d03      	adds	r3, r0, #4
 800486a:	e7f1      	b.n	8004850 <__exponent+0x60>

0800486c <_printf_float>:
 800486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004870:	ed2d 8b02 	vpush	{d8}
 8004874:	b08d      	sub	sp, #52	; 0x34
 8004876:	460c      	mov	r4, r1
 8004878:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800487c:	4616      	mov	r6, r2
 800487e:	461f      	mov	r7, r3
 8004880:	4605      	mov	r5, r0
 8004882:	f001 fb45 	bl	8005f10 <_localeconv_r>
 8004886:	f8d0 a000 	ldr.w	sl, [r0]
 800488a:	4650      	mov	r0, sl
 800488c:	f7fb fca0 	bl	80001d0 <strlen>
 8004890:	2300      	movs	r3, #0
 8004892:	930a      	str	r3, [sp, #40]	; 0x28
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	9305      	str	r3, [sp, #20]
 8004898:	f8d8 3000 	ldr.w	r3, [r8]
 800489c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80048a0:	3307      	adds	r3, #7
 80048a2:	f023 0307 	bic.w	r3, r3, #7
 80048a6:	f103 0208 	add.w	r2, r3, #8
 80048aa:	f8c8 2000 	str.w	r2, [r8]
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80048ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048be:	9307      	str	r3, [sp, #28]
 80048c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80048c4:	ee08 0a10 	vmov	s16, r0
 80048c8:	4b9f      	ldr	r3, [pc, #636]	; (8004b48 <_printf_float+0x2dc>)
 80048ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048d2:	f7fc f92b 	bl	8000b2c <__aeabi_dcmpun>
 80048d6:	bb88      	cbnz	r0, 800493c <_printf_float+0xd0>
 80048d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048dc:	4b9a      	ldr	r3, [pc, #616]	; (8004b48 <_printf_float+0x2dc>)
 80048de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048e2:	f7fc f905 	bl	8000af0 <__aeabi_dcmple>
 80048e6:	bb48      	cbnz	r0, 800493c <_printf_float+0xd0>
 80048e8:	2200      	movs	r2, #0
 80048ea:	2300      	movs	r3, #0
 80048ec:	4640      	mov	r0, r8
 80048ee:	4649      	mov	r1, r9
 80048f0:	f7fc f8f4 	bl	8000adc <__aeabi_dcmplt>
 80048f4:	b110      	cbz	r0, 80048fc <_printf_float+0x90>
 80048f6:	232d      	movs	r3, #45	; 0x2d
 80048f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048fc:	4b93      	ldr	r3, [pc, #588]	; (8004b4c <_printf_float+0x2e0>)
 80048fe:	4894      	ldr	r0, [pc, #592]	; (8004b50 <_printf_float+0x2e4>)
 8004900:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004904:	bf94      	ite	ls
 8004906:	4698      	movls	r8, r3
 8004908:	4680      	movhi	r8, r0
 800490a:	2303      	movs	r3, #3
 800490c:	6123      	str	r3, [r4, #16]
 800490e:	9b05      	ldr	r3, [sp, #20]
 8004910:	f023 0204 	bic.w	r2, r3, #4
 8004914:	6022      	str	r2, [r4, #0]
 8004916:	f04f 0900 	mov.w	r9, #0
 800491a:	9700      	str	r7, [sp, #0]
 800491c:	4633      	mov	r3, r6
 800491e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004920:	4621      	mov	r1, r4
 8004922:	4628      	mov	r0, r5
 8004924:	f000 f9d8 	bl	8004cd8 <_printf_common>
 8004928:	3001      	adds	r0, #1
 800492a:	f040 8090 	bne.w	8004a4e <_printf_float+0x1e2>
 800492e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004932:	b00d      	add	sp, #52	; 0x34
 8004934:	ecbd 8b02 	vpop	{d8}
 8004938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493c:	4642      	mov	r2, r8
 800493e:	464b      	mov	r3, r9
 8004940:	4640      	mov	r0, r8
 8004942:	4649      	mov	r1, r9
 8004944:	f7fc f8f2 	bl	8000b2c <__aeabi_dcmpun>
 8004948:	b140      	cbz	r0, 800495c <_printf_float+0xf0>
 800494a:	464b      	mov	r3, r9
 800494c:	2b00      	cmp	r3, #0
 800494e:	bfbc      	itt	lt
 8004950:	232d      	movlt	r3, #45	; 0x2d
 8004952:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004956:	487f      	ldr	r0, [pc, #508]	; (8004b54 <_printf_float+0x2e8>)
 8004958:	4b7f      	ldr	r3, [pc, #508]	; (8004b58 <_printf_float+0x2ec>)
 800495a:	e7d1      	b.n	8004900 <_printf_float+0x94>
 800495c:	6863      	ldr	r3, [r4, #4]
 800495e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004962:	9206      	str	r2, [sp, #24]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	d13f      	bne.n	80049e8 <_printf_float+0x17c>
 8004968:	2306      	movs	r3, #6
 800496a:	6063      	str	r3, [r4, #4]
 800496c:	9b05      	ldr	r3, [sp, #20]
 800496e:	6861      	ldr	r1, [r4, #4]
 8004970:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004974:	2300      	movs	r3, #0
 8004976:	9303      	str	r3, [sp, #12]
 8004978:	ab0a      	add	r3, sp, #40	; 0x28
 800497a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800497e:	ab09      	add	r3, sp, #36	; 0x24
 8004980:	ec49 8b10 	vmov	d0, r8, r9
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	6022      	str	r2, [r4, #0]
 8004988:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800498c:	4628      	mov	r0, r5
 800498e:	f7ff fecd 	bl	800472c <__cvt>
 8004992:	9b06      	ldr	r3, [sp, #24]
 8004994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004996:	2b47      	cmp	r3, #71	; 0x47
 8004998:	4680      	mov	r8, r0
 800499a:	d108      	bne.n	80049ae <_printf_float+0x142>
 800499c:	1cc8      	adds	r0, r1, #3
 800499e:	db02      	blt.n	80049a6 <_printf_float+0x13a>
 80049a0:	6863      	ldr	r3, [r4, #4]
 80049a2:	4299      	cmp	r1, r3
 80049a4:	dd41      	ble.n	8004a2a <_printf_float+0x1be>
 80049a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80049aa:	fa5f fb8b 	uxtb.w	fp, fp
 80049ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049b2:	d820      	bhi.n	80049f6 <_printf_float+0x18a>
 80049b4:	3901      	subs	r1, #1
 80049b6:	465a      	mov	r2, fp
 80049b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049bc:	9109      	str	r1, [sp, #36]	; 0x24
 80049be:	f7ff ff17 	bl	80047f0 <__exponent>
 80049c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049c4:	1813      	adds	r3, r2, r0
 80049c6:	2a01      	cmp	r2, #1
 80049c8:	4681      	mov	r9, r0
 80049ca:	6123      	str	r3, [r4, #16]
 80049cc:	dc02      	bgt.n	80049d4 <_printf_float+0x168>
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	07d2      	lsls	r2, r2, #31
 80049d2:	d501      	bpl.n	80049d8 <_printf_float+0x16c>
 80049d4:	3301      	adds	r3, #1
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d09c      	beq.n	800491a <_printf_float+0xae>
 80049e0:	232d      	movs	r3, #45	; 0x2d
 80049e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e6:	e798      	b.n	800491a <_printf_float+0xae>
 80049e8:	9a06      	ldr	r2, [sp, #24]
 80049ea:	2a47      	cmp	r2, #71	; 0x47
 80049ec:	d1be      	bne.n	800496c <_printf_float+0x100>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1bc      	bne.n	800496c <_printf_float+0x100>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e7b9      	b.n	800496a <_printf_float+0xfe>
 80049f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80049fa:	d118      	bne.n	8004a2e <_printf_float+0x1c2>
 80049fc:	2900      	cmp	r1, #0
 80049fe:	6863      	ldr	r3, [r4, #4]
 8004a00:	dd0b      	ble.n	8004a1a <_printf_float+0x1ae>
 8004a02:	6121      	str	r1, [r4, #16]
 8004a04:	b913      	cbnz	r3, 8004a0c <_printf_float+0x1a0>
 8004a06:	6822      	ldr	r2, [r4, #0]
 8004a08:	07d0      	lsls	r0, r2, #31
 8004a0a:	d502      	bpl.n	8004a12 <_printf_float+0x1a6>
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	440b      	add	r3, r1
 8004a10:	6123      	str	r3, [r4, #16]
 8004a12:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a14:	f04f 0900 	mov.w	r9, #0
 8004a18:	e7de      	b.n	80049d8 <_printf_float+0x16c>
 8004a1a:	b913      	cbnz	r3, 8004a22 <_printf_float+0x1b6>
 8004a1c:	6822      	ldr	r2, [r4, #0]
 8004a1e:	07d2      	lsls	r2, r2, #31
 8004a20:	d501      	bpl.n	8004a26 <_printf_float+0x1ba>
 8004a22:	3302      	adds	r3, #2
 8004a24:	e7f4      	b.n	8004a10 <_printf_float+0x1a4>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e7f2      	b.n	8004a10 <_printf_float+0x1a4>
 8004a2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a30:	4299      	cmp	r1, r3
 8004a32:	db05      	blt.n	8004a40 <_printf_float+0x1d4>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	6121      	str	r1, [r4, #16]
 8004a38:	07d8      	lsls	r0, r3, #31
 8004a3a:	d5ea      	bpl.n	8004a12 <_printf_float+0x1a6>
 8004a3c:	1c4b      	adds	r3, r1, #1
 8004a3e:	e7e7      	b.n	8004a10 <_printf_float+0x1a4>
 8004a40:	2900      	cmp	r1, #0
 8004a42:	bfd4      	ite	le
 8004a44:	f1c1 0202 	rsble	r2, r1, #2
 8004a48:	2201      	movgt	r2, #1
 8004a4a:	4413      	add	r3, r2
 8004a4c:	e7e0      	b.n	8004a10 <_printf_float+0x1a4>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	055a      	lsls	r2, r3, #21
 8004a52:	d407      	bmi.n	8004a64 <_printf_float+0x1f8>
 8004a54:	6923      	ldr	r3, [r4, #16]
 8004a56:	4642      	mov	r2, r8
 8004a58:	4631      	mov	r1, r6
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b8      	blx	r7
 8004a5e:	3001      	adds	r0, #1
 8004a60:	d12c      	bne.n	8004abc <_printf_float+0x250>
 8004a62:	e764      	b.n	800492e <_printf_float+0xc2>
 8004a64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a68:	f240 80e0 	bls.w	8004c2c <_printf_float+0x3c0>
 8004a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a70:	2200      	movs	r2, #0
 8004a72:	2300      	movs	r3, #0
 8004a74:	f7fc f828 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d034      	beq.n	8004ae6 <_printf_float+0x27a>
 8004a7c:	4a37      	ldr	r2, [pc, #220]	; (8004b5c <_printf_float+0x2f0>)
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4631      	mov	r1, r6
 8004a82:	4628      	mov	r0, r5
 8004a84:	47b8      	blx	r7
 8004a86:	3001      	adds	r0, #1
 8004a88:	f43f af51 	beq.w	800492e <_printf_float+0xc2>
 8004a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a90:	429a      	cmp	r2, r3
 8004a92:	db02      	blt.n	8004a9a <_printf_float+0x22e>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	07d8      	lsls	r0, r3, #31
 8004a98:	d510      	bpl.n	8004abc <_printf_float+0x250>
 8004a9a:	ee18 3a10 	vmov	r3, s16
 8004a9e:	4652      	mov	r2, sl
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b8      	blx	r7
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f43f af41 	beq.w	800492e <_printf_float+0xc2>
 8004aac:	f04f 0800 	mov.w	r8, #0
 8004ab0:	f104 091a 	add.w	r9, r4, #26
 8004ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	4543      	cmp	r3, r8
 8004aba:	dc09      	bgt.n	8004ad0 <_printf_float+0x264>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	079b      	lsls	r3, r3, #30
 8004ac0:	f100 8105 	bmi.w	8004cce <_printf_float+0x462>
 8004ac4:	68e0      	ldr	r0, [r4, #12]
 8004ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ac8:	4298      	cmp	r0, r3
 8004aca:	bfb8      	it	lt
 8004acc:	4618      	movlt	r0, r3
 8004ace:	e730      	b.n	8004932 <_printf_float+0xc6>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	464a      	mov	r2, r9
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	47b8      	blx	r7
 8004ada:	3001      	adds	r0, #1
 8004adc:	f43f af27 	beq.w	800492e <_printf_float+0xc2>
 8004ae0:	f108 0801 	add.w	r8, r8, #1
 8004ae4:	e7e6      	b.n	8004ab4 <_printf_float+0x248>
 8004ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	dc39      	bgt.n	8004b60 <_printf_float+0x2f4>
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <_printf_float+0x2f0>)
 8004aee:	2301      	movs	r3, #1
 8004af0:	4631      	mov	r1, r6
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	f43f af19 	beq.w	800492e <_printf_float+0xc2>
 8004afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b00:	4313      	orrs	r3, r2
 8004b02:	d102      	bne.n	8004b0a <_printf_float+0x29e>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	07d9      	lsls	r1, r3, #31
 8004b08:	d5d8      	bpl.n	8004abc <_printf_float+0x250>
 8004b0a:	ee18 3a10 	vmov	r3, s16
 8004b0e:	4652      	mov	r2, sl
 8004b10:	4631      	mov	r1, r6
 8004b12:	4628      	mov	r0, r5
 8004b14:	47b8      	blx	r7
 8004b16:	3001      	adds	r0, #1
 8004b18:	f43f af09 	beq.w	800492e <_printf_float+0xc2>
 8004b1c:	f04f 0900 	mov.w	r9, #0
 8004b20:	f104 0a1a 	add.w	sl, r4, #26
 8004b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b26:	425b      	negs	r3, r3
 8004b28:	454b      	cmp	r3, r9
 8004b2a:	dc01      	bgt.n	8004b30 <_printf_float+0x2c4>
 8004b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b2e:	e792      	b.n	8004a56 <_printf_float+0x1ea>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4652      	mov	r2, sl
 8004b34:	4631      	mov	r1, r6
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b8      	blx	r7
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	f43f aef7 	beq.w	800492e <_printf_float+0xc2>
 8004b40:	f109 0901 	add.w	r9, r9, #1
 8004b44:	e7ee      	b.n	8004b24 <_printf_float+0x2b8>
 8004b46:	bf00      	nop
 8004b48:	7fefffff 	.word	0x7fefffff
 8004b4c:	08007200 	.word	0x08007200
 8004b50:	08007204 	.word	0x08007204
 8004b54:	0800720c 	.word	0x0800720c
 8004b58:	08007208 	.word	0x08007208
 8004b5c:	08007210 	.word	0x08007210
 8004b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b64:	429a      	cmp	r2, r3
 8004b66:	bfa8      	it	ge
 8004b68:	461a      	movge	r2, r3
 8004b6a:	2a00      	cmp	r2, #0
 8004b6c:	4691      	mov	r9, r2
 8004b6e:	dc37      	bgt.n	8004be0 <_printf_float+0x374>
 8004b70:	f04f 0b00 	mov.w	fp, #0
 8004b74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b78:	f104 021a 	add.w	r2, r4, #26
 8004b7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b7e:	9305      	str	r3, [sp, #20]
 8004b80:	eba3 0309 	sub.w	r3, r3, r9
 8004b84:	455b      	cmp	r3, fp
 8004b86:	dc33      	bgt.n	8004bf0 <_printf_float+0x384>
 8004b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	db3b      	blt.n	8004c08 <_printf_float+0x39c>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	07da      	lsls	r2, r3, #31
 8004b94:	d438      	bmi.n	8004c08 <_printf_float+0x39c>
 8004b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b98:	9a05      	ldr	r2, [sp, #20]
 8004b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b9c:	1a9a      	subs	r2, r3, r2
 8004b9e:	eba3 0901 	sub.w	r9, r3, r1
 8004ba2:	4591      	cmp	r9, r2
 8004ba4:	bfa8      	it	ge
 8004ba6:	4691      	movge	r9, r2
 8004ba8:	f1b9 0f00 	cmp.w	r9, #0
 8004bac:	dc35      	bgt.n	8004c1a <_printf_float+0x3ae>
 8004bae:	f04f 0800 	mov.w	r8, #0
 8004bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bb6:	f104 0a1a 	add.w	sl, r4, #26
 8004bba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	eba3 0309 	sub.w	r3, r3, r9
 8004bc4:	4543      	cmp	r3, r8
 8004bc6:	f77f af79 	ble.w	8004abc <_printf_float+0x250>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	4652      	mov	r2, sl
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	47b8      	blx	r7
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	f43f aeaa 	beq.w	800492e <_printf_float+0xc2>
 8004bda:	f108 0801 	add.w	r8, r8, #1
 8004bde:	e7ec      	b.n	8004bba <_printf_float+0x34e>
 8004be0:	4613      	mov	r3, r2
 8004be2:	4631      	mov	r1, r6
 8004be4:	4642      	mov	r2, r8
 8004be6:	4628      	mov	r0, r5
 8004be8:	47b8      	blx	r7
 8004bea:	3001      	adds	r0, #1
 8004bec:	d1c0      	bne.n	8004b70 <_printf_float+0x304>
 8004bee:	e69e      	b.n	800492e <_printf_float+0xc2>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	9205      	str	r2, [sp, #20]
 8004bf8:	47b8      	blx	r7
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	f43f ae97 	beq.w	800492e <_printf_float+0xc2>
 8004c00:	9a05      	ldr	r2, [sp, #20]
 8004c02:	f10b 0b01 	add.w	fp, fp, #1
 8004c06:	e7b9      	b.n	8004b7c <_printf_float+0x310>
 8004c08:	ee18 3a10 	vmov	r3, s16
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b8      	blx	r7
 8004c14:	3001      	adds	r0, #1
 8004c16:	d1be      	bne.n	8004b96 <_printf_float+0x32a>
 8004c18:	e689      	b.n	800492e <_printf_float+0xc2>
 8004c1a:	9a05      	ldr	r2, [sp, #20]
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	4442      	add	r2, r8
 8004c20:	4631      	mov	r1, r6
 8004c22:	4628      	mov	r0, r5
 8004c24:	47b8      	blx	r7
 8004c26:	3001      	adds	r0, #1
 8004c28:	d1c1      	bne.n	8004bae <_printf_float+0x342>
 8004c2a:	e680      	b.n	800492e <_printf_float+0xc2>
 8004c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c2e:	2a01      	cmp	r2, #1
 8004c30:	dc01      	bgt.n	8004c36 <_printf_float+0x3ca>
 8004c32:	07db      	lsls	r3, r3, #31
 8004c34:	d538      	bpl.n	8004ca8 <_printf_float+0x43c>
 8004c36:	2301      	movs	r3, #1
 8004c38:	4642      	mov	r2, r8
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	47b8      	blx	r7
 8004c40:	3001      	adds	r0, #1
 8004c42:	f43f ae74 	beq.w	800492e <_printf_float+0xc2>
 8004c46:	ee18 3a10 	vmov	r3, s16
 8004c4a:	4652      	mov	r2, sl
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f ae6b 	beq.w	800492e <_printf_float+0xc2>
 8004c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f7fb ff32 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c64:	b9d8      	cbnz	r0, 8004c9e <_printf_float+0x432>
 8004c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c68:	f108 0201 	add.w	r2, r8, #1
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	d10e      	bne.n	8004c96 <_printf_float+0x42a>
 8004c78:	e659      	b.n	800492e <_printf_float+0xc2>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4652      	mov	r2, sl
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4628      	mov	r0, r5
 8004c82:	47b8      	blx	r7
 8004c84:	3001      	adds	r0, #1
 8004c86:	f43f ae52 	beq.w	800492e <_printf_float+0xc2>
 8004c8a:	f108 0801 	add.w	r8, r8, #1
 8004c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c90:	3b01      	subs	r3, #1
 8004c92:	4543      	cmp	r3, r8
 8004c94:	dcf1      	bgt.n	8004c7a <_printf_float+0x40e>
 8004c96:	464b      	mov	r3, r9
 8004c98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c9c:	e6dc      	b.n	8004a58 <_printf_float+0x1ec>
 8004c9e:	f04f 0800 	mov.w	r8, #0
 8004ca2:	f104 0a1a 	add.w	sl, r4, #26
 8004ca6:	e7f2      	b.n	8004c8e <_printf_float+0x422>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	4642      	mov	r2, r8
 8004cac:	e7df      	b.n	8004c6e <_printf_float+0x402>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	464a      	mov	r2, r9
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	47b8      	blx	r7
 8004cb8:	3001      	adds	r0, #1
 8004cba:	f43f ae38 	beq.w	800492e <_printf_float+0xc2>
 8004cbe:	f108 0801 	add.w	r8, r8, #1
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cc6:	1a5b      	subs	r3, r3, r1
 8004cc8:	4543      	cmp	r3, r8
 8004cca:	dcf0      	bgt.n	8004cae <_printf_float+0x442>
 8004ccc:	e6fa      	b.n	8004ac4 <_printf_float+0x258>
 8004cce:	f04f 0800 	mov.w	r8, #0
 8004cd2:	f104 0919 	add.w	r9, r4, #25
 8004cd6:	e7f4      	b.n	8004cc2 <_printf_float+0x456>

08004cd8 <_printf_common>:
 8004cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cdc:	4616      	mov	r6, r2
 8004cde:	4699      	mov	r9, r3
 8004ce0:	688a      	ldr	r2, [r1, #8]
 8004ce2:	690b      	ldr	r3, [r1, #16]
 8004ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	bfb8      	it	lt
 8004cec:	4613      	movlt	r3, r2
 8004cee:	6033      	str	r3, [r6, #0]
 8004cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cf4:	4607      	mov	r7, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	b10a      	cbz	r2, 8004cfe <_printf_common+0x26>
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	6033      	str	r3, [r6, #0]
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	0699      	lsls	r1, r3, #26
 8004d02:	bf42      	ittt	mi
 8004d04:	6833      	ldrmi	r3, [r6, #0]
 8004d06:	3302      	addmi	r3, #2
 8004d08:	6033      	strmi	r3, [r6, #0]
 8004d0a:	6825      	ldr	r5, [r4, #0]
 8004d0c:	f015 0506 	ands.w	r5, r5, #6
 8004d10:	d106      	bne.n	8004d20 <_printf_common+0x48>
 8004d12:	f104 0a19 	add.w	sl, r4, #25
 8004d16:	68e3      	ldr	r3, [r4, #12]
 8004d18:	6832      	ldr	r2, [r6, #0]
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	42ab      	cmp	r3, r5
 8004d1e:	dc26      	bgt.n	8004d6e <_printf_common+0x96>
 8004d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d24:	1e13      	subs	r3, r2, #0
 8004d26:	6822      	ldr	r2, [r4, #0]
 8004d28:	bf18      	it	ne
 8004d2a:	2301      	movne	r3, #1
 8004d2c:	0692      	lsls	r2, r2, #26
 8004d2e:	d42b      	bmi.n	8004d88 <_printf_common+0xb0>
 8004d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d34:	4649      	mov	r1, r9
 8004d36:	4638      	mov	r0, r7
 8004d38:	47c0      	blx	r8
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d01e      	beq.n	8004d7c <_printf_common+0xa4>
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	68e5      	ldr	r5, [r4, #12]
 8004d42:	6832      	ldr	r2, [r6, #0]
 8004d44:	f003 0306 	and.w	r3, r3, #6
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	bf08      	it	eq
 8004d4c:	1aad      	subeq	r5, r5, r2
 8004d4e:	68a3      	ldr	r3, [r4, #8]
 8004d50:	6922      	ldr	r2, [r4, #16]
 8004d52:	bf0c      	ite	eq
 8004d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d58:	2500      	movne	r5, #0
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	bfc4      	itt	gt
 8004d5e:	1a9b      	subgt	r3, r3, r2
 8004d60:	18ed      	addgt	r5, r5, r3
 8004d62:	2600      	movs	r6, #0
 8004d64:	341a      	adds	r4, #26
 8004d66:	42b5      	cmp	r5, r6
 8004d68:	d11a      	bne.n	8004da0 <_printf_common+0xc8>
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e008      	b.n	8004d80 <_printf_common+0xa8>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4652      	mov	r2, sl
 8004d72:	4649      	mov	r1, r9
 8004d74:	4638      	mov	r0, r7
 8004d76:	47c0      	blx	r8
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d103      	bne.n	8004d84 <_printf_common+0xac>
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d84:	3501      	adds	r5, #1
 8004d86:	e7c6      	b.n	8004d16 <_printf_common+0x3e>
 8004d88:	18e1      	adds	r1, r4, r3
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	2030      	movs	r0, #48	; 0x30
 8004d8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d92:	4422      	add	r2, r4
 8004d94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	e7c7      	b.n	8004d30 <_printf_common+0x58>
 8004da0:	2301      	movs	r3, #1
 8004da2:	4622      	mov	r2, r4
 8004da4:	4649      	mov	r1, r9
 8004da6:	4638      	mov	r0, r7
 8004da8:	47c0      	blx	r8
 8004daa:	3001      	adds	r0, #1
 8004dac:	d0e6      	beq.n	8004d7c <_printf_common+0xa4>
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7d9      	b.n	8004d66 <_printf_common+0x8e>
	...

08004db4 <_printf_i>:
 8004db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004db8:	7e0f      	ldrb	r7, [r1, #24]
 8004dba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dbc:	2f78      	cmp	r7, #120	; 0x78
 8004dbe:	4691      	mov	r9, r2
 8004dc0:	4680      	mov	r8, r0
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	469a      	mov	sl, r3
 8004dc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dca:	d807      	bhi.n	8004ddc <_printf_i+0x28>
 8004dcc:	2f62      	cmp	r7, #98	; 0x62
 8004dce:	d80a      	bhi.n	8004de6 <_printf_i+0x32>
 8004dd0:	2f00      	cmp	r7, #0
 8004dd2:	f000 80d8 	beq.w	8004f86 <_printf_i+0x1d2>
 8004dd6:	2f58      	cmp	r7, #88	; 0x58
 8004dd8:	f000 80a3 	beq.w	8004f22 <_printf_i+0x16e>
 8004ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004de4:	e03a      	b.n	8004e5c <_printf_i+0xa8>
 8004de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dea:	2b15      	cmp	r3, #21
 8004dec:	d8f6      	bhi.n	8004ddc <_printf_i+0x28>
 8004dee:	a101      	add	r1, pc, #4	; (adr r1, 8004df4 <_printf_i+0x40>)
 8004df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004df4:	08004e4d 	.word	0x08004e4d
 8004df8:	08004e61 	.word	0x08004e61
 8004dfc:	08004ddd 	.word	0x08004ddd
 8004e00:	08004ddd 	.word	0x08004ddd
 8004e04:	08004ddd 	.word	0x08004ddd
 8004e08:	08004ddd 	.word	0x08004ddd
 8004e0c:	08004e61 	.word	0x08004e61
 8004e10:	08004ddd 	.word	0x08004ddd
 8004e14:	08004ddd 	.word	0x08004ddd
 8004e18:	08004ddd 	.word	0x08004ddd
 8004e1c:	08004ddd 	.word	0x08004ddd
 8004e20:	08004f6d 	.word	0x08004f6d
 8004e24:	08004e91 	.word	0x08004e91
 8004e28:	08004f4f 	.word	0x08004f4f
 8004e2c:	08004ddd 	.word	0x08004ddd
 8004e30:	08004ddd 	.word	0x08004ddd
 8004e34:	08004f8f 	.word	0x08004f8f
 8004e38:	08004ddd 	.word	0x08004ddd
 8004e3c:	08004e91 	.word	0x08004e91
 8004e40:	08004ddd 	.word	0x08004ddd
 8004e44:	08004ddd 	.word	0x08004ddd
 8004e48:	08004f57 	.word	0x08004f57
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	1d1a      	adds	r2, r3, #4
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	602a      	str	r2, [r5, #0]
 8004e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0a3      	b.n	8004fa8 <_printf_i+0x1f4>
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	6829      	ldr	r1, [r5, #0]
 8004e64:	0606      	lsls	r6, r0, #24
 8004e66:	f101 0304 	add.w	r3, r1, #4
 8004e6a:	d50a      	bpl.n	8004e82 <_printf_i+0xce>
 8004e6c:	680e      	ldr	r6, [r1, #0]
 8004e6e:	602b      	str	r3, [r5, #0]
 8004e70:	2e00      	cmp	r6, #0
 8004e72:	da03      	bge.n	8004e7c <_printf_i+0xc8>
 8004e74:	232d      	movs	r3, #45	; 0x2d
 8004e76:	4276      	negs	r6, r6
 8004e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e7c:	485e      	ldr	r0, [pc, #376]	; (8004ff8 <_printf_i+0x244>)
 8004e7e:	230a      	movs	r3, #10
 8004e80:	e019      	b.n	8004eb6 <_printf_i+0x102>
 8004e82:	680e      	ldr	r6, [r1, #0]
 8004e84:	602b      	str	r3, [r5, #0]
 8004e86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e8a:	bf18      	it	ne
 8004e8c:	b236      	sxthne	r6, r6
 8004e8e:	e7ef      	b.n	8004e70 <_printf_i+0xbc>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	6820      	ldr	r0, [r4, #0]
 8004e94:	1d19      	adds	r1, r3, #4
 8004e96:	6029      	str	r1, [r5, #0]
 8004e98:	0601      	lsls	r1, r0, #24
 8004e9a:	d501      	bpl.n	8004ea0 <_printf_i+0xec>
 8004e9c:	681e      	ldr	r6, [r3, #0]
 8004e9e:	e002      	b.n	8004ea6 <_printf_i+0xf2>
 8004ea0:	0646      	lsls	r6, r0, #25
 8004ea2:	d5fb      	bpl.n	8004e9c <_printf_i+0xe8>
 8004ea4:	881e      	ldrh	r6, [r3, #0]
 8004ea6:	4854      	ldr	r0, [pc, #336]	; (8004ff8 <_printf_i+0x244>)
 8004ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8004eaa:	bf0c      	ite	eq
 8004eac:	2308      	moveq	r3, #8
 8004eae:	230a      	movne	r3, #10
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eb6:	6865      	ldr	r5, [r4, #4]
 8004eb8:	60a5      	str	r5, [r4, #8]
 8004eba:	2d00      	cmp	r5, #0
 8004ebc:	bfa2      	ittt	ge
 8004ebe:	6821      	ldrge	r1, [r4, #0]
 8004ec0:	f021 0104 	bicge.w	r1, r1, #4
 8004ec4:	6021      	strge	r1, [r4, #0]
 8004ec6:	b90e      	cbnz	r6, 8004ecc <_printf_i+0x118>
 8004ec8:	2d00      	cmp	r5, #0
 8004eca:	d04d      	beq.n	8004f68 <_printf_i+0x1b4>
 8004ecc:	4615      	mov	r5, r2
 8004ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8004ed6:	5dc7      	ldrb	r7, [r0, r7]
 8004ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004edc:	4637      	mov	r7, r6
 8004ede:	42bb      	cmp	r3, r7
 8004ee0:	460e      	mov	r6, r1
 8004ee2:	d9f4      	bls.n	8004ece <_printf_i+0x11a>
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d10b      	bne.n	8004f00 <_printf_i+0x14c>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	07de      	lsls	r6, r3, #31
 8004eec:	d508      	bpl.n	8004f00 <_printf_i+0x14c>
 8004eee:	6923      	ldr	r3, [r4, #16]
 8004ef0:	6861      	ldr	r1, [r4, #4]
 8004ef2:	4299      	cmp	r1, r3
 8004ef4:	bfde      	ittt	le
 8004ef6:	2330      	movle	r3, #48	; 0x30
 8004ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004efc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f00:	1b52      	subs	r2, r2, r5
 8004f02:	6122      	str	r2, [r4, #16]
 8004f04:	f8cd a000 	str.w	sl, [sp]
 8004f08:	464b      	mov	r3, r9
 8004f0a:	aa03      	add	r2, sp, #12
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	4640      	mov	r0, r8
 8004f10:	f7ff fee2 	bl	8004cd8 <_printf_common>
 8004f14:	3001      	adds	r0, #1
 8004f16:	d14c      	bne.n	8004fb2 <_printf_i+0x1fe>
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f1c:	b004      	add	sp, #16
 8004f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f22:	4835      	ldr	r0, [pc, #212]	; (8004ff8 <_printf_i+0x244>)
 8004f24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f28:	6829      	ldr	r1, [r5, #0]
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f30:	6029      	str	r1, [r5, #0]
 8004f32:	061d      	lsls	r5, r3, #24
 8004f34:	d514      	bpl.n	8004f60 <_printf_i+0x1ac>
 8004f36:	07df      	lsls	r7, r3, #31
 8004f38:	bf44      	itt	mi
 8004f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8004f3e:	6023      	strmi	r3, [r4, #0]
 8004f40:	b91e      	cbnz	r6, 8004f4a <_printf_i+0x196>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	f023 0320 	bic.w	r3, r3, #32
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	2310      	movs	r3, #16
 8004f4c:	e7b0      	b.n	8004eb0 <_printf_i+0xfc>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	f043 0320 	orr.w	r3, r3, #32
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	2378      	movs	r3, #120	; 0x78
 8004f58:	4828      	ldr	r0, [pc, #160]	; (8004ffc <_printf_i+0x248>)
 8004f5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f5e:	e7e3      	b.n	8004f28 <_printf_i+0x174>
 8004f60:	0659      	lsls	r1, r3, #25
 8004f62:	bf48      	it	mi
 8004f64:	b2b6      	uxthmi	r6, r6
 8004f66:	e7e6      	b.n	8004f36 <_printf_i+0x182>
 8004f68:	4615      	mov	r5, r2
 8004f6a:	e7bb      	b.n	8004ee4 <_printf_i+0x130>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	6826      	ldr	r6, [r4, #0]
 8004f70:	6961      	ldr	r1, [r4, #20]
 8004f72:	1d18      	adds	r0, r3, #4
 8004f74:	6028      	str	r0, [r5, #0]
 8004f76:	0635      	lsls	r5, r6, #24
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	d501      	bpl.n	8004f80 <_printf_i+0x1cc>
 8004f7c:	6019      	str	r1, [r3, #0]
 8004f7e:	e002      	b.n	8004f86 <_printf_i+0x1d2>
 8004f80:	0670      	lsls	r0, r6, #25
 8004f82:	d5fb      	bpl.n	8004f7c <_printf_i+0x1c8>
 8004f84:	8019      	strh	r1, [r3, #0]
 8004f86:	2300      	movs	r3, #0
 8004f88:	6123      	str	r3, [r4, #16]
 8004f8a:	4615      	mov	r5, r2
 8004f8c:	e7ba      	b.n	8004f04 <_printf_i+0x150>
 8004f8e:	682b      	ldr	r3, [r5, #0]
 8004f90:	1d1a      	adds	r2, r3, #4
 8004f92:	602a      	str	r2, [r5, #0]
 8004f94:	681d      	ldr	r5, [r3, #0]
 8004f96:	6862      	ldr	r2, [r4, #4]
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f7fb f920 	bl	80001e0 <memchr>
 8004fa0:	b108      	cbz	r0, 8004fa6 <_printf_i+0x1f2>
 8004fa2:	1b40      	subs	r0, r0, r5
 8004fa4:	6060      	str	r0, [r4, #4]
 8004fa6:	6863      	ldr	r3, [r4, #4]
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	2300      	movs	r3, #0
 8004fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb0:	e7a8      	b.n	8004f04 <_printf_i+0x150>
 8004fb2:	6923      	ldr	r3, [r4, #16]
 8004fb4:	462a      	mov	r2, r5
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	4640      	mov	r0, r8
 8004fba:	47d0      	blx	sl
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d0ab      	beq.n	8004f18 <_printf_i+0x164>
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	079b      	lsls	r3, r3, #30
 8004fc4:	d413      	bmi.n	8004fee <_printf_i+0x23a>
 8004fc6:	68e0      	ldr	r0, [r4, #12]
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	4298      	cmp	r0, r3
 8004fcc:	bfb8      	it	lt
 8004fce:	4618      	movlt	r0, r3
 8004fd0:	e7a4      	b.n	8004f1c <_printf_i+0x168>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	4640      	mov	r0, r8
 8004fda:	47d0      	blx	sl
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d09b      	beq.n	8004f18 <_printf_i+0x164>
 8004fe0:	3501      	adds	r5, #1
 8004fe2:	68e3      	ldr	r3, [r4, #12]
 8004fe4:	9903      	ldr	r1, [sp, #12]
 8004fe6:	1a5b      	subs	r3, r3, r1
 8004fe8:	42ab      	cmp	r3, r5
 8004fea:	dcf2      	bgt.n	8004fd2 <_printf_i+0x21e>
 8004fec:	e7eb      	b.n	8004fc6 <_printf_i+0x212>
 8004fee:	2500      	movs	r5, #0
 8004ff0:	f104 0619 	add.w	r6, r4, #25
 8004ff4:	e7f5      	b.n	8004fe2 <_printf_i+0x22e>
 8004ff6:	bf00      	nop
 8004ff8:	08007212 	.word	0x08007212
 8004ffc:	08007223 	.word	0x08007223

08005000 <iprintf>:
 8005000:	b40f      	push	{r0, r1, r2, r3}
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <iprintf+0x2c>)
 8005004:	b513      	push	{r0, r1, r4, lr}
 8005006:	681c      	ldr	r4, [r3, #0]
 8005008:	b124      	cbz	r4, 8005014 <iprintf+0x14>
 800500a:	69a3      	ldr	r3, [r4, #24]
 800500c:	b913      	cbnz	r3, 8005014 <iprintf+0x14>
 800500e:	4620      	mov	r0, r4
 8005010:	f000 fee0 	bl	8005dd4 <__sinit>
 8005014:	ab05      	add	r3, sp, #20
 8005016:	9a04      	ldr	r2, [sp, #16]
 8005018:	68a1      	ldr	r1, [r4, #8]
 800501a:	9301      	str	r3, [sp, #4]
 800501c:	4620      	mov	r0, r4
 800501e:	f001 fc39 	bl	8006894 <_vfiprintf_r>
 8005022:	b002      	add	sp, #8
 8005024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005028:	b004      	add	sp, #16
 800502a:	4770      	bx	lr
 800502c:	2000000c 	.word	0x2000000c

08005030 <quorem>:
 8005030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005034:	6903      	ldr	r3, [r0, #16]
 8005036:	690c      	ldr	r4, [r1, #16]
 8005038:	42a3      	cmp	r3, r4
 800503a:	4607      	mov	r7, r0
 800503c:	f2c0 8081 	blt.w	8005142 <quorem+0x112>
 8005040:	3c01      	subs	r4, #1
 8005042:	f101 0814 	add.w	r8, r1, #20
 8005046:	f100 0514 	add.w	r5, r0, #20
 800504a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005054:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005058:	3301      	adds	r3, #1
 800505a:	429a      	cmp	r2, r3
 800505c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005064:	fbb2 f6f3 	udiv	r6, r2, r3
 8005068:	d331      	bcc.n	80050ce <quorem+0x9e>
 800506a:	f04f 0e00 	mov.w	lr, #0
 800506e:	4640      	mov	r0, r8
 8005070:	46ac      	mov	ip, r5
 8005072:	46f2      	mov	sl, lr
 8005074:	f850 2b04 	ldr.w	r2, [r0], #4
 8005078:	b293      	uxth	r3, r2
 800507a:	fb06 e303 	mla	r3, r6, r3, lr
 800507e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005082:	b29b      	uxth	r3, r3
 8005084:	ebaa 0303 	sub.w	r3, sl, r3
 8005088:	f8dc a000 	ldr.w	sl, [ip]
 800508c:	0c12      	lsrs	r2, r2, #16
 800508e:	fa13 f38a 	uxtah	r3, r3, sl
 8005092:	fb06 e202 	mla	r2, r6, r2, lr
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	9b00      	ldr	r3, [sp, #0]
 800509a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800509e:	b292      	uxth	r2, r2
 80050a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80050ac:	4581      	cmp	r9, r0
 80050ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050b2:	f84c 3b04 	str.w	r3, [ip], #4
 80050b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050ba:	d2db      	bcs.n	8005074 <quorem+0x44>
 80050bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80050c0:	b92b      	cbnz	r3, 80050ce <quorem+0x9e>
 80050c2:	9b01      	ldr	r3, [sp, #4]
 80050c4:	3b04      	subs	r3, #4
 80050c6:	429d      	cmp	r5, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	d32e      	bcc.n	800512a <quorem+0xfa>
 80050cc:	613c      	str	r4, [r7, #16]
 80050ce:	4638      	mov	r0, r7
 80050d0:	f001 f9be 	bl	8006450 <__mcmp>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	db24      	blt.n	8005122 <quorem+0xf2>
 80050d8:	3601      	adds	r6, #1
 80050da:	4628      	mov	r0, r5
 80050dc:	f04f 0c00 	mov.w	ip, #0
 80050e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80050e4:	f8d0 e000 	ldr.w	lr, [r0]
 80050e8:	b293      	uxth	r3, r2
 80050ea:	ebac 0303 	sub.w	r3, ip, r3
 80050ee:	0c12      	lsrs	r2, r2, #16
 80050f0:	fa13 f38e 	uxtah	r3, r3, lr
 80050f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80050f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005102:	45c1      	cmp	r9, r8
 8005104:	f840 3b04 	str.w	r3, [r0], #4
 8005108:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800510c:	d2e8      	bcs.n	80050e0 <quorem+0xb0>
 800510e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005116:	b922      	cbnz	r2, 8005122 <quorem+0xf2>
 8005118:	3b04      	subs	r3, #4
 800511a:	429d      	cmp	r5, r3
 800511c:	461a      	mov	r2, r3
 800511e:	d30a      	bcc.n	8005136 <quorem+0x106>
 8005120:	613c      	str	r4, [r7, #16]
 8005122:	4630      	mov	r0, r6
 8005124:	b003      	add	sp, #12
 8005126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	3b04      	subs	r3, #4
 800512e:	2a00      	cmp	r2, #0
 8005130:	d1cc      	bne.n	80050cc <quorem+0x9c>
 8005132:	3c01      	subs	r4, #1
 8005134:	e7c7      	b.n	80050c6 <quorem+0x96>
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	3b04      	subs	r3, #4
 800513a:	2a00      	cmp	r2, #0
 800513c:	d1f0      	bne.n	8005120 <quorem+0xf0>
 800513e:	3c01      	subs	r4, #1
 8005140:	e7eb      	b.n	800511a <quorem+0xea>
 8005142:	2000      	movs	r0, #0
 8005144:	e7ee      	b.n	8005124 <quorem+0xf4>
	...

08005148 <_dtoa_r>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	ed2d 8b04 	vpush	{d8-d9}
 8005150:	ec57 6b10 	vmov	r6, r7, d0
 8005154:	b093      	sub	sp, #76	; 0x4c
 8005156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005158:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800515c:	9106      	str	r1, [sp, #24]
 800515e:	ee10 aa10 	vmov	sl, s0
 8005162:	4604      	mov	r4, r0
 8005164:	9209      	str	r2, [sp, #36]	; 0x24
 8005166:	930c      	str	r3, [sp, #48]	; 0x30
 8005168:	46bb      	mov	fp, r7
 800516a:	b975      	cbnz	r5, 800518a <_dtoa_r+0x42>
 800516c:	2010      	movs	r0, #16
 800516e:	f000 fed7 	bl	8005f20 <malloc>
 8005172:	4602      	mov	r2, r0
 8005174:	6260      	str	r0, [r4, #36]	; 0x24
 8005176:	b920      	cbnz	r0, 8005182 <_dtoa_r+0x3a>
 8005178:	4ba7      	ldr	r3, [pc, #668]	; (8005418 <_dtoa_r+0x2d0>)
 800517a:	21ea      	movs	r1, #234	; 0xea
 800517c:	48a7      	ldr	r0, [pc, #668]	; (800541c <_dtoa_r+0x2d4>)
 800517e:	f001 fddf 	bl	8006d40 <__assert_func>
 8005182:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005186:	6005      	str	r5, [r0, #0]
 8005188:	60c5      	str	r5, [r0, #12]
 800518a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800518c:	6819      	ldr	r1, [r3, #0]
 800518e:	b151      	cbz	r1, 80051a6 <_dtoa_r+0x5e>
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	604a      	str	r2, [r1, #4]
 8005194:	2301      	movs	r3, #1
 8005196:	4093      	lsls	r3, r2
 8005198:	608b      	str	r3, [r1, #8]
 800519a:	4620      	mov	r0, r4
 800519c:	f000 ff16 	bl	8005fcc <_Bfree>
 80051a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	1e3b      	subs	r3, r7, #0
 80051a8:	bfaa      	itet	ge
 80051aa:	2300      	movge	r3, #0
 80051ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80051b0:	f8c8 3000 	strge.w	r3, [r8]
 80051b4:	4b9a      	ldr	r3, [pc, #616]	; (8005420 <_dtoa_r+0x2d8>)
 80051b6:	bfbc      	itt	lt
 80051b8:	2201      	movlt	r2, #1
 80051ba:	f8c8 2000 	strlt.w	r2, [r8]
 80051be:	ea33 030b 	bics.w	r3, r3, fp
 80051c2:	d11b      	bne.n	80051fc <_dtoa_r+0xb4>
 80051c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80051d0:	4333      	orrs	r3, r6
 80051d2:	f000 8592 	beq.w	8005cfa <_dtoa_r+0xbb2>
 80051d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051d8:	b963      	cbnz	r3, 80051f4 <_dtoa_r+0xac>
 80051da:	4b92      	ldr	r3, [pc, #584]	; (8005424 <_dtoa_r+0x2dc>)
 80051dc:	e022      	b.n	8005224 <_dtoa_r+0xdc>
 80051de:	4b92      	ldr	r3, [pc, #584]	; (8005428 <_dtoa_r+0x2e0>)
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	3308      	adds	r3, #8
 80051e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	9801      	ldr	r0, [sp, #4]
 80051ea:	b013      	add	sp, #76	; 0x4c
 80051ec:	ecbd 8b04 	vpop	{d8-d9}
 80051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f4:	4b8b      	ldr	r3, [pc, #556]	; (8005424 <_dtoa_r+0x2dc>)
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	3303      	adds	r3, #3
 80051fa:	e7f3      	b.n	80051e4 <_dtoa_r+0x9c>
 80051fc:	2200      	movs	r2, #0
 80051fe:	2300      	movs	r3, #0
 8005200:	4650      	mov	r0, sl
 8005202:	4659      	mov	r1, fp
 8005204:	f7fb fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 8005208:	ec4b ab19 	vmov	d9, sl, fp
 800520c:	4680      	mov	r8, r0
 800520e:	b158      	cbz	r0, 8005228 <_dtoa_r+0xe0>
 8005210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005212:	2301      	movs	r3, #1
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 856b 	beq.w	8005cf4 <_dtoa_r+0xbac>
 800521e:	4883      	ldr	r0, [pc, #524]	; (800542c <_dtoa_r+0x2e4>)
 8005220:	6018      	str	r0, [r3, #0]
 8005222:	1e43      	subs	r3, r0, #1
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	e7df      	b.n	80051e8 <_dtoa_r+0xa0>
 8005228:	ec4b ab10 	vmov	d0, sl, fp
 800522c:	aa10      	add	r2, sp, #64	; 0x40
 800522e:	a911      	add	r1, sp, #68	; 0x44
 8005230:	4620      	mov	r0, r4
 8005232:	f001 f9b3 	bl	800659c <__d2b>
 8005236:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800523a:	ee08 0a10 	vmov	s16, r0
 800523e:	2d00      	cmp	r5, #0
 8005240:	f000 8084 	beq.w	800534c <_dtoa_r+0x204>
 8005244:	ee19 3a90 	vmov	r3, s19
 8005248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800524c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005250:	4656      	mov	r6, sl
 8005252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800525a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800525e:	4b74      	ldr	r3, [pc, #464]	; (8005430 <_dtoa_r+0x2e8>)
 8005260:	2200      	movs	r2, #0
 8005262:	4630      	mov	r0, r6
 8005264:	4639      	mov	r1, r7
 8005266:	f7fb f80f 	bl	8000288 <__aeabi_dsub>
 800526a:	a365      	add	r3, pc, #404	; (adr r3, 8005400 <_dtoa_r+0x2b8>)
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	f7fb f9c2 	bl	80005f8 <__aeabi_dmul>
 8005274:	a364      	add	r3, pc, #400	; (adr r3, 8005408 <_dtoa_r+0x2c0>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f7fb f807 	bl	800028c <__adddf3>
 800527e:	4606      	mov	r6, r0
 8005280:	4628      	mov	r0, r5
 8005282:	460f      	mov	r7, r1
 8005284:	f7fb f94e 	bl	8000524 <__aeabi_i2d>
 8005288:	a361      	add	r3, pc, #388	; (adr r3, 8005410 <_dtoa_r+0x2c8>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fb f9b3 	bl	80005f8 <__aeabi_dmul>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4630      	mov	r0, r6
 8005298:	4639      	mov	r1, r7
 800529a:	f7fa fff7 	bl	800028c <__adddf3>
 800529e:	4606      	mov	r6, r0
 80052a0:	460f      	mov	r7, r1
 80052a2:	f7fb fc59 	bl	8000b58 <__aeabi_d2iz>
 80052a6:	2200      	movs	r2, #0
 80052a8:	9000      	str	r0, [sp, #0]
 80052aa:	2300      	movs	r3, #0
 80052ac:	4630      	mov	r0, r6
 80052ae:	4639      	mov	r1, r7
 80052b0:	f7fb fc14 	bl	8000adc <__aeabi_dcmplt>
 80052b4:	b150      	cbz	r0, 80052cc <_dtoa_r+0x184>
 80052b6:	9800      	ldr	r0, [sp, #0]
 80052b8:	f7fb f934 	bl	8000524 <__aeabi_i2d>
 80052bc:	4632      	mov	r2, r6
 80052be:	463b      	mov	r3, r7
 80052c0:	f7fb fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80052c4:	b910      	cbnz	r0, 80052cc <_dtoa_r+0x184>
 80052c6:	9b00      	ldr	r3, [sp, #0]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	9b00      	ldr	r3, [sp, #0]
 80052ce:	2b16      	cmp	r3, #22
 80052d0:	d85a      	bhi.n	8005388 <_dtoa_r+0x240>
 80052d2:	9a00      	ldr	r2, [sp, #0]
 80052d4:	4b57      	ldr	r3, [pc, #348]	; (8005434 <_dtoa_r+0x2ec>)
 80052d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	ec51 0b19 	vmov	r0, r1, d9
 80052e2:	f7fb fbfb 	bl	8000adc <__aeabi_dcmplt>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d050      	beq.n	800538c <_dtoa_r+0x244>
 80052ea:	9b00      	ldr	r3, [sp, #0]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	2300      	movs	r3, #0
 80052f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80052f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052f6:	1b5d      	subs	r5, r3, r5
 80052f8:	1e6b      	subs	r3, r5, #1
 80052fa:	9305      	str	r3, [sp, #20]
 80052fc:	bf45      	ittet	mi
 80052fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005302:	9304      	strmi	r3, [sp, #16]
 8005304:	2300      	movpl	r3, #0
 8005306:	2300      	movmi	r3, #0
 8005308:	bf4c      	ite	mi
 800530a:	9305      	strmi	r3, [sp, #20]
 800530c:	9304      	strpl	r3, [sp, #16]
 800530e:	9b00      	ldr	r3, [sp, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	db3d      	blt.n	8005390 <_dtoa_r+0x248>
 8005314:	9b05      	ldr	r3, [sp, #20]
 8005316:	9a00      	ldr	r2, [sp, #0]
 8005318:	920a      	str	r2, [sp, #40]	; 0x28
 800531a:	4413      	add	r3, r2
 800531c:	9305      	str	r3, [sp, #20]
 800531e:	2300      	movs	r3, #0
 8005320:	9307      	str	r3, [sp, #28]
 8005322:	9b06      	ldr	r3, [sp, #24]
 8005324:	2b09      	cmp	r3, #9
 8005326:	f200 8089 	bhi.w	800543c <_dtoa_r+0x2f4>
 800532a:	2b05      	cmp	r3, #5
 800532c:	bfc4      	itt	gt
 800532e:	3b04      	subgt	r3, #4
 8005330:	9306      	strgt	r3, [sp, #24]
 8005332:	9b06      	ldr	r3, [sp, #24]
 8005334:	f1a3 0302 	sub.w	r3, r3, #2
 8005338:	bfcc      	ite	gt
 800533a:	2500      	movgt	r5, #0
 800533c:	2501      	movle	r5, #1
 800533e:	2b03      	cmp	r3, #3
 8005340:	f200 8087 	bhi.w	8005452 <_dtoa_r+0x30a>
 8005344:	e8df f003 	tbb	[pc, r3]
 8005348:	59383a2d 	.word	0x59383a2d
 800534c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005350:	441d      	add	r5, r3
 8005352:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005356:	2b20      	cmp	r3, #32
 8005358:	bfc1      	itttt	gt
 800535a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800535e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005362:	fa0b f303 	lslgt.w	r3, fp, r3
 8005366:	fa26 f000 	lsrgt.w	r0, r6, r0
 800536a:	bfda      	itte	le
 800536c:	f1c3 0320 	rsble	r3, r3, #32
 8005370:	fa06 f003 	lslle.w	r0, r6, r3
 8005374:	4318      	orrgt	r0, r3
 8005376:	f7fb f8c5 	bl	8000504 <__aeabi_ui2d>
 800537a:	2301      	movs	r3, #1
 800537c:	4606      	mov	r6, r0
 800537e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005382:	3d01      	subs	r5, #1
 8005384:	930e      	str	r3, [sp, #56]	; 0x38
 8005386:	e76a      	b.n	800525e <_dtoa_r+0x116>
 8005388:	2301      	movs	r3, #1
 800538a:	e7b2      	b.n	80052f2 <_dtoa_r+0x1aa>
 800538c:	900b      	str	r0, [sp, #44]	; 0x2c
 800538e:	e7b1      	b.n	80052f4 <_dtoa_r+0x1ac>
 8005390:	9b04      	ldr	r3, [sp, #16]
 8005392:	9a00      	ldr	r2, [sp, #0]
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	4253      	negs	r3, r2
 800539a:	9307      	str	r3, [sp, #28]
 800539c:	2300      	movs	r3, #0
 800539e:	930a      	str	r3, [sp, #40]	; 0x28
 80053a0:	e7bf      	b.n	8005322 <_dtoa_r+0x1da>
 80053a2:	2300      	movs	r3, #0
 80053a4:	9308      	str	r3, [sp, #32]
 80053a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dc55      	bgt.n	8005458 <_dtoa_r+0x310>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80053b2:	461a      	mov	r2, r3
 80053b4:	9209      	str	r2, [sp, #36]	; 0x24
 80053b6:	e00c      	b.n	80053d2 <_dtoa_r+0x28a>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e7f3      	b.n	80053a4 <_dtoa_r+0x25c>
 80053bc:	2300      	movs	r3, #0
 80053be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053c0:	9308      	str	r3, [sp, #32]
 80053c2:	9b00      	ldr	r3, [sp, #0]
 80053c4:	4413      	add	r3, r2
 80053c6:	9302      	str	r3, [sp, #8]
 80053c8:	3301      	adds	r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	9303      	str	r3, [sp, #12]
 80053ce:	bfb8      	it	lt
 80053d0:	2301      	movlt	r3, #1
 80053d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80053d4:	2200      	movs	r2, #0
 80053d6:	6042      	str	r2, [r0, #4]
 80053d8:	2204      	movs	r2, #4
 80053da:	f102 0614 	add.w	r6, r2, #20
 80053de:	429e      	cmp	r6, r3
 80053e0:	6841      	ldr	r1, [r0, #4]
 80053e2:	d93d      	bls.n	8005460 <_dtoa_r+0x318>
 80053e4:	4620      	mov	r0, r4
 80053e6:	f000 fdb1 	bl	8005f4c <_Balloc>
 80053ea:	9001      	str	r0, [sp, #4]
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d13b      	bne.n	8005468 <_dtoa_r+0x320>
 80053f0:	4b11      	ldr	r3, [pc, #68]	; (8005438 <_dtoa_r+0x2f0>)
 80053f2:	4602      	mov	r2, r0
 80053f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053f8:	e6c0      	b.n	800517c <_dtoa_r+0x34>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e7df      	b.n	80053be <_dtoa_r+0x276>
 80053fe:	bf00      	nop
 8005400:	636f4361 	.word	0x636f4361
 8005404:	3fd287a7 	.word	0x3fd287a7
 8005408:	8b60c8b3 	.word	0x8b60c8b3
 800540c:	3fc68a28 	.word	0x3fc68a28
 8005410:	509f79fb 	.word	0x509f79fb
 8005414:	3fd34413 	.word	0x3fd34413
 8005418:	08007241 	.word	0x08007241
 800541c:	08007258 	.word	0x08007258
 8005420:	7ff00000 	.word	0x7ff00000
 8005424:	0800723d 	.word	0x0800723d
 8005428:	08007234 	.word	0x08007234
 800542c:	08007211 	.word	0x08007211
 8005430:	3ff80000 	.word	0x3ff80000
 8005434:	080073a8 	.word	0x080073a8
 8005438:	080072b3 	.word	0x080072b3
 800543c:	2501      	movs	r5, #1
 800543e:	2300      	movs	r3, #0
 8005440:	9306      	str	r3, [sp, #24]
 8005442:	9508      	str	r5, [sp, #32]
 8005444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005448:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800544c:	2200      	movs	r2, #0
 800544e:	2312      	movs	r3, #18
 8005450:	e7b0      	b.n	80053b4 <_dtoa_r+0x26c>
 8005452:	2301      	movs	r3, #1
 8005454:	9308      	str	r3, [sp, #32]
 8005456:	e7f5      	b.n	8005444 <_dtoa_r+0x2fc>
 8005458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800545e:	e7b8      	b.n	80053d2 <_dtoa_r+0x28a>
 8005460:	3101      	adds	r1, #1
 8005462:	6041      	str	r1, [r0, #4]
 8005464:	0052      	lsls	r2, r2, #1
 8005466:	e7b8      	b.n	80053da <_dtoa_r+0x292>
 8005468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800546a:	9a01      	ldr	r2, [sp, #4]
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	9b03      	ldr	r3, [sp, #12]
 8005470:	2b0e      	cmp	r3, #14
 8005472:	f200 809d 	bhi.w	80055b0 <_dtoa_r+0x468>
 8005476:	2d00      	cmp	r5, #0
 8005478:	f000 809a 	beq.w	80055b0 <_dtoa_r+0x468>
 800547c:	9b00      	ldr	r3, [sp, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	dd32      	ble.n	80054e8 <_dtoa_r+0x3a0>
 8005482:	4ab7      	ldr	r2, [pc, #732]	; (8005760 <_dtoa_r+0x618>)
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800548c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005490:	9b00      	ldr	r3, [sp, #0]
 8005492:	05d8      	lsls	r0, r3, #23
 8005494:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005498:	d516      	bpl.n	80054c8 <_dtoa_r+0x380>
 800549a:	4bb2      	ldr	r3, [pc, #712]	; (8005764 <_dtoa_r+0x61c>)
 800549c:	ec51 0b19 	vmov	r0, r1, d9
 80054a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054a4:	f7fb f9d2 	bl	800084c <__aeabi_ddiv>
 80054a8:	f007 070f 	and.w	r7, r7, #15
 80054ac:	4682      	mov	sl, r0
 80054ae:	468b      	mov	fp, r1
 80054b0:	2503      	movs	r5, #3
 80054b2:	4eac      	ldr	r6, [pc, #688]	; (8005764 <_dtoa_r+0x61c>)
 80054b4:	b957      	cbnz	r7, 80054cc <_dtoa_r+0x384>
 80054b6:	4642      	mov	r2, r8
 80054b8:	464b      	mov	r3, r9
 80054ba:	4650      	mov	r0, sl
 80054bc:	4659      	mov	r1, fp
 80054be:	f7fb f9c5 	bl	800084c <__aeabi_ddiv>
 80054c2:	4682      	mov	sl, r0
 80054c4:	468b      	mov	fp, r1
 80054c6:	e028      	b.n	800551a <_dtoa_r+0x3d2>
 80054c8:	2502      	movs	r5, #2
 80054ca:	e7f2      	b.n	80054b2 <_dtoa_r+0x36a>
 80054cc:	07f9      	lsls	r1, r7, #31
 80054ce:	d508      	bpl.n	80054e2 <_dtoa_r+0x39a>
 80054d0:	4640      	mov	r0, r8
 80054d2:	4649      	mov	r1, r9
 80054d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054d8:	f7fb f88e 	bl	80005f8 <__aeabi_dmul>
 80054dc:	3501      	adds	r5, #1
 80054de:	4680      	mov	r8, r0
 80054e0:	4689      	mov	r9, r1
 80054e2:	107f      	asrs	r7, r7, #1
 80054e4:	3608      	adds	r6, #8
 80054e6:	e7e5      	b.n	80054b4 <_dtoa_r+0x36c>
 80054e8:	f000 809b 	beq.w	8005622 <_dtoa_r+0x4da>
 80054ec:	9b00      	ldr	r3, [sp, #0]
 80054ee:	4f9d      	ldr	r7, [pc, #628]	; (8005764 <_dtoa_r+0x61c>)
 80054f0:	425e      	negs	r6, r3
 80054f2:	4b9b      	ldr	r3, [pc, #620]	; (8005760 <_dtoa_r+0x618>)
 80054f4:	f006 020f 	and.w	r2, r6, #15
 80054f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	ec51 0b19 	vmov	r0, r1, d9
 8005504:	f7fb f878 	bl	80005f8 <__aeabi_dmul>
 8005508:	1136      	asrs	r6, r6, #4
 800550a:	4682      	mov	sl, r0
 800550c:	468b      	mov	fp, r1
 800550e:	2300      	movs	r3, #0
 8005510:	2502      	movs	r5, #2
 8005512:	2e00      	cmp	r6, #0
 8005514:	d17a      	bne.n	800560c <_dtoa_r+0x4c4>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1d3      	bne.n	80054c2 <_dtoa_r+0x37a>
 800551a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8082 	beq.w	8005626 <_dtoa_r+0x4de>
 8005522:	4b91      	ldr	r3, [pc, #580]	; (8005768 <_dtoa_r+0x620>)
 8005524:	2200      	movs	r2, #0
 8005526:	4650      	mov	r0, sl
 8005528:	4659      	mov	r1, fp
 800552a:	f7fb fad7 	bl	8000adc <__aeabi_dcmplt>
 800552e:	2800      	cmp	r0, #0
 8005530:	d079      	beq.n	8005626 <_dtoa_r+0x4de>
 8005532:	9b03      	ldr	r3, [sp, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d076      	beq.n	8005626 <_dtoa_r+0x4de>
 8005538:	9b02      	ldr	r3, [sp, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	dd36      	ble.n	80055ac <_dtoa_r+0x464>
 800553e:	9b00      	ldr	r3, [sp, #0]
 8005540:	4650      	mov	r0, sl
 8005542:	4659      	mov	r1, fp
 8005544:	1e5f      	subs	r7, r3, #1
 8005546:	2200      	movs	r2, #0
 8005548:	4b88      	ldr	r3, [pc, #544]	; (800576c <_dtoa_r+0x624>)
 800554a:	f7fb f855 	bl	80005f8 <__aeabi_dmul>
 800554e:	9e02      	ldr	r6, [sp, #8]
 8005550:	4682      	mov	sl, r0
 8005552:	468b      	mov	fp, r1
 8005554:	3501      	adds	r5, #1
 8005556:	4628      	mov	r0, r5
 8005558:	f7fa ffe4 	bl	8000524 <__aeabi_i2d>
 800555c:	4652      	mov	r2, sl
 800555e:	465b      	mov	r3, fp
 8005560:	f7fb f84a 	bl	80005f8 <__aeabi_dmul>
 8005564:	4b82      	ldr	r3, [pc, #520]	; (8005770 <_dtoa_r+0x628>)
 8005566:	2200      	movs	r2, #0
 8005568:	f7fa fe90 	bl	800028c <__adddf3>
 800556c:	46d0      	mov	r8, sl
 800556e:	46d9      	mov	r9, fp
 8005570:	4682      	mov	sl, r0
 8005572:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005576:	2e00      	cmp	r6, #0
 8005578:	d158      	bne.n	800562c <_dtoa_r+0x4e4>
 800557a:	4b7e      	ldr	r3, [pc, #504]	; (8005774 <_dtoa_r+0x62c>)
 800557c:	2200      	movs	r2, #0
 800557e:	4640      	mov	r0, r8
 8005580:	4649      	mov	r1, r9
 8005582:	f7fa fe81 	bl	8000288 <__aeabi_dsub>
 8005586:	4652      	mov	r2, sl
 8005588:	465b      	mov	r3, fp
 800558a:	4680      	mov	r8, r0
 800558c:	4689      	mov	r9, r1
 800558e:	f7fb fac3 	bl	8000b18 <__aeabi_dcmpgt>
 8005592:	2800      	cmp	r0, #0
 8005594:	f040 8295 	bne.w	8005ac2 <_dtoa_r+0x97a>
 8005598:	4652      	mov	r2, sl
 800559a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800559e:	4640      	mov	r0, r8
 80055a0:	4649      	mov	r1, r9
 80055a2:	f7fb fa9b 	bl	8000adc <__aeabi_dcmplt>
 80055a6:	2800      	cmp	r0, #0
 80055a8:	f040 8289 	bne.w	8005abe <_dtoa_r+0x976>
 80055ac:	ec5b ab19 	vmov	sl, fp, d9
 80055b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f2c0 8148 	blt.w	8005848 <_dtoa_r+0x700>
 80055b8:	9a00      	ldr	r2, [sp, #0]
 80055ba:	2a0e      	cmp	r2, #14
 80055bc:	f300 8144 	bgt.w	8005848 <_dtoa_r+0x700>
 80055c0:	4b67      	ldr	r3, [pc, #412]	; (8005760 <_dtoa_r+0x618>)
 80055c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f280 80d5 	bge.w	800577c <_dtoa_r+0x634>
 80055d2:	9b03      	ldr	r3, [sp, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f300 80d1 	bgt.w	800577c <_dtoa_r+0x634>
 80055da:	f040 826f 	bne.w	8005abc <_dtoa_r+0x974>
 80055de:	4b65      	ldr	r3, [pc, #404]	; (8005774 <_dtoa_r+0x62c>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	4640      	mov	r0, r8
 80055e4:	4649      	mov	r1, r9
 80055e6:	f7fb f807 	bl	80005f8 <__aeabi_dmul>
 80055ea:	4652      	mov	r2, sl
 80055ec:	465b      	mov	r3, fp
 80055ee:	f7fb fa89 	bl	8000b04 <__aeabi_dcmpge>
 80055f2:	9e03      	ldr	r6, [sp, #12]
 80055f4:	4637      	mov	r7, r6
 80055f6:	2800      	cmp	r0, #0
 80055f8:	f040 8245 	bne.w	8005a86 <_dtoa_r+0x93e>
 80055fc:	9d01      	ldr	r5, [sp, #4]
 80055fe:	2331      	movs	r3, #49	; 0x31
 8005600:	f805 3b01 	strb.w	r3, [r5], #1
 8005604:	9b00      	ldr	r3, [sp, #0]
 8005606:	3301      	adds	r3, #1
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	e240      	b.n	8005a8e <_dtoa_r+0x946>
 800560c:	07f2      	lsls	r2, r6, #31
 800560e:	d505      	bpl.n	800561c <_dtoa_r+0x4d4>
 8005610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005614:	f7fa fff0 	bl	80005f8 <__aeabi_dmul>
 8005618:	3501      	adds	r5, #1
 800561a:	2301      	movs	r3, #1
 800561c:	1076      	asrs	r6, r6, #1
 800561e:	3708      	adds	r7, #8
 8005620:	e777      	b.n	8005512 <_dtoa_r+0x3ca>
 8005622:	2502      	movs	r5, #2
 8005624:	e779      	b.n	800551a <_dtoa_r+0x3d2>
 8005626:	9f00      	ldr	r7, [sp, #0]
 8005628:	9e03      	ldr	r6, [sp, #12]
 800562a:	e794      	b.n	8005556 <_dtoa_r+0x40e>
 800562c:	9901      	ldr	r1, [sp, #4]
 800562e:	4b4c      	ldr	r3, [pc, #304]	; (8005760 <_dtoa_r+0x618>)
 8005630:	4431      	add	r1, r6
 8005632:	910d      	str	r1, [sp, #52]	; 0x34
 8005634:	9908      	ldr	r1, [sp, #32]
 8005636:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800563a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800563e:	2900      	cmp	r1, #0
 8005640:	d043      	beq.n	80056ca <_dtoa_r+0x582>
 8005642:	494d      	ldr	r1, [pc, #308]	; (8005778 <_dtoa_r+0x630>)
 8005644:	2000      	movs	r0, #0
 8005646:	f7fb f901 	bl	800084c <__aeabi_ddiv>
 800564a:	4652      	mov	r2, sl
 800564c:	465b      	mov	r3, fp
 800564e:	f7fa fe1b 	bl	8000288 <__aeabi_dsub>
 8005652:	9d01      	ldr	r5, [sp, #4]
 8005654:	4682      	mov	sl, r0
 8005656:	468b      	mov	fp, r1
 8005658:	4649      	mov	r1, r9
 800565a:	4640      	mov	r0, r8
 800565c:	f7fb fa7c 	bl	8000b58 <__aeabi_d2iz>
 8005660:	4606      	mov	r6, r0
 8005662:	f7fa ff5f 	bl	8000524 <__aeabi_i2d>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4640      	mov	r0, r8
 800566c:	4649      	mov	r1, r9
 800566e:	f7fa fe0b 	bl	8000288 <__aeabi_dsub>
 8005672:	3630      	adds	r6, #48	; 0x30
 8005674:	f805 6b01 	strb.w	r6, [r5], #1
 8005678:	4652      	mov	r2, sl
 800567a:	465b      	mov	r3, fp
 800567c:	4680      	mov	r8, r0
 800567e:	4689      	mov	r9, r1
 8005680:	f7fb fa2c 	bl	8000adc <__aeabi_dcmplt>
 8005684:	2800      	cmp	r0, #0
 8005686:	d163      	bne.n	8005750 <_dtoa_r+0x608>
 8005688:	4642      	mov	r2, r8
 800568a:	464b      	mov	r3, r9
 800568c:	4936      	ldr	r1, [pc, #216]	; (8005768 <_dtoa_r+0x620>)
 800568e:	2000      	movs	r0, #0
 8005690:	f7fa fdfa 	bl	8000288 <__aeabi_dsub>
 8005694:	4652      	mov	r2, sl
 8005696:	465b      	mov	r3, fp
 8005698:	f7fb fa20 	bl	8000adc <__aeabi_dcmplt>
 800569c:	2800      	cmp	r0, #0
 800569e:	f040 80b5 	bne.w	800580c <_dtoa_r+0x6c4>
 80056a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056a4:	429d      	cmp	r5, r3
 80056a6:	d081      	beq.n	80055ac <_dtoa_r+0x464>
 80056a8:	4b30      	ldr	r3, [pc, #192]	; (800576c <_dtoa_r+0x624>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	4650      	mov	r0, sl
 80056ae:	4659      	mov	r1, fp
 80056b0:	f7fa ffa2 	bl	80005f8 <__aeabi_dmul>
 80056b4:	4b2d      	ldr	r3, [pc, #180]	; (800576c <_dtoa_r+0x624>)
 80056b6:	4682      	mov	sl, r0
 80056b8:	468b      	mov	fp, r1
 80056ba:	4640      	mov	r0, r8
 80056bc:	4649      	mov	r1, r9
 80056be:	2200      	movs	r2, #0
 80056c0:	f7fa ff9a 	bl	80005f8 <__aeabi_dmul>
 80056c4:	4680      	mov	r8, r0
 80056c6:	4689      	mov	r9, r1
 80056c8:	e7c6      	b.n	8005658 <_dtoa_r+0x510>
 80056ca:	4650      	mov	r0, sl
 80056cc:	4659      	mov	r1, fp
 80056ce:	f7fa ff93 	bl	80005f8 <__aeabi_dmul>
 80056d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056d4:	9d01      	ldr	r5, [sp, #4]
 80056d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80056d8:	4682      	mov	sl, r0
 80056da:	468b      	mov	fp, r1
 80056dc:	4649      	mov	r1, r9
 80056de:	4640      	mov	r0, r8
 80056e0:	f7fb fa3a 	bl	8000b58 <__aeabi_d2iz>
 80056e4:	4606      	mov	r6, r0
 80056e6:	f7fa ff1d 	bl	8000524 <__aeabi_i2d>
 80056ea:	3630      	adds	r6, #48	; 0x30
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4640      	mov	r0, r8
 80056f2:	4649      	mov	r1, r9
 80056f4:	f7fa fdc8 	bl	8000288 <__aeabi_dsub>
 80056f8:	f805 6b01 	strb.w	r6, [r5], #1
 80056fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056fe:	429d      	cmp	r5, r3
 8005700:	4680      	mov	r8, r0
 8005702:	4689      	mov	r9, r1
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	d124      	bne.n	8005754 <_dtoa_r+0x60c>
 800570a:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <_dtoa_r+0x630>)
 800570c:	4650      	mov	r0, sl
 800570e:	4659      	mov	r1, fp
 8005710:	f7fa fdbc 	bl	800028c <__adddf3>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4640      	mov	r0, r8
 800571a:	4649      	mov	r1, r9
 800571c:	f7fb f9fc 	bl	8000b18 <__aeabi_dcmpgt>
 8005720:	2800      	cmp	r0, #0
 8005722:	d173      	bne.n	800580c <_dtoa_r+0x6c4>
 8005724:	4652      	mov	r2, sl
 8005726:	465b      	mov	r3, fp
 8005728:	4913      	ldr	r1, [pc, #76]	; (8005778 <_dtoa_r+0x630>)
 800572a:	2000      	movs	r0, #0
 800572c:	f7fa fdac 	bl	8000288 <__aeabi_dsub>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4640      	mov	r0, r8
 8005736:	4649      	mov	r1, r9
 8005738:	f7fb f9d0 	bl	8000adc <__aeabi_dcmplt>
 800573c:	2800      	cmp	r0, #0
 800573e:	f43f af35 	beq.w	80055ac <_dtoa_r+0x464>
 8005742:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005744:	1e6b      	subs	r3, r5, #1
 8005746:	930f      	str	r3, [sp, #60]	; 0x3c
 8005748:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800574c:	2b30      	cmp	r3, #48	; 0x30
 800574e:	d0f8      	beq.n	8005742 <_dtoa_r+0x5fa>
 8005750:	9700      	str	r7, [sp, #0]
 8005752:	e049      	b.n	80057e8 <_dtoa_r+0x6a0>
 8005754:	4b05      	ldr	r3, [pc, #20]	; (800576c <_dtoa_r+0x624>)
 8005756:	f7fa ff4f 	bl	80005f8 <__aeabi_dmul>
 800575a:	4680      	mov	r8, r0
 800575c:	4689      	mov	r9, r1
 800575e:	e7bd      	b.n	80056dc <_dtoa_r+0x594>
 8005760:	080073a8 	.word	0x080073a8
 8005764:	08007380 	.word	0x08007380
 8005768:	3ff00000 	.word	0x3ff00000
 800576c:	40240000 	.word	0x40240000
 8005770:	401c0000 	.word	0x401c0000
 8005774:	40140000 	.word	0x40140000
 8005778:	3fe00000 	.word	0x3fe00000
 800577c:	9d01      	ldr	r5, [sp, #4]
 800577e:	4656      	mov	r6, sl
 8005780:	465f      	mov	r7, fp
 8005782:	4642      	mov	r2, r8
 8005784:	464b      	mov	r3, r9
 8005786:	4630      	mov	r0, r6
 8005788:	4639      	mov	r1, r7
 800578a:	f7fb f85f 	bl	800084c <__aeabi_ddiv>
 800578e:	f7fb f9e3 	bl	8000b58 <__aeabi_d2iz>
 8005792:	4682      	mov	sl, r0
 8005794:	f7fa fec6 	bl	8000524 <__aeabi_i2d>
 8005798:	4642      	mov	r2, r8
 800579a:	464b      	mov	r3, r9
 800579c:	f7fa ff2c 	bl	80005f8 <__aeabi_dmul>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4630      	mov	r0, r6
 80057a6:	4639      	mov	r1, r7
 80057a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80057ac:	f7fa fd6c 	bl	8000288 <__aeabi_dsub>
 80057b0:	f805 6b01 	strb.w	r6, [r5], #1
 80057b4:	9e01      	ldr	r6, [sp, #4]
 80057b6:	9f03      	ldr	r7, [sp, #12]
 80057b8:	1bae      	subs	r6, r5, r6
 80057ba:	42b7      	cmp	r7, r6
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	d135      	bne.n	800582e <_dtoa_r+0x6e6>
 80057c2:	f7fa fd63 	bl	800028c <__adddf3>
 80057c6:	4642      	mov	r2, r8
 80057c8:	464b      	mov	r3, r9
 80057ca:	4606      	mov	r6, r0
 80057cc:	460f      	mov	r7, r1
 80057ce:	f7fb f9a3 	bl	8000b18 <__aeabi_dcmpgt>
 80057d2:	b9d0      	cbnz	r0, 800580a <_dtoa_r+0x6c2>
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	4630      	mov	r0, r6
 80057da:	4639      	mov	r1, r7
 80057dc:	f7fb f974 	bl	8000ac8 <__aeabi_dcmpeq>
 80057e0:	b110      	cbz	r0, 80057e8 <_dtoa_r+0x6a0>
 80057e2:	f01a 0f01 	tst.w	sl, #1
 80057e6:	d110      	bne.n	800580a <_dtoa_r+0x6c2>
 80057e8:	4620      	mov	r0, r4
 80057ea:	ee18 1a10 	vmov	r1, s16
 80057ee:	f000 fbed 	bl	8005fcc <_Bfree>
 80057f2:	2300      	movs	r3, #0
 80057f4:	9800      	ldr	r0, [sp, #0]
 80057f6:	702b      	strb	r3, [r5, #0]
 80057f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057fa:	3001      	adds	r0, #1
 80057fc:	6018      	str	r0, [r3, #0]
 80057fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005800:	2b00      	cmp	r3, #0
 8005802:	f43f acf1 	beq.w	80051e8 <_dtoa_r+0xa0>
 8005806:	601d      	str	r5, [r3, #0]
 8005808:	e4ee      	b.n	80051e8 <_dtoa_r+0xa0>
 800580a:	9f00      	ldr	r7, [sp, #0]
 800580c:	462b      	mov	r3, r5
 800580e:	461d      	mov	r5, r3
 8005810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005814:	2a39      	cmp	r2, #57	; 0x39
 8005816:	d106      	bne.n	8005826 <_dtoa_r+0x6de>
 8005818:	9a01      	ldr	r2, [sp, #4]
 800581a:	429a      	cmp	r2, r3
 800581c:	d1f7      	bne.n	800580e <_dtoa_r+0x6c6>
 800581e:	9901      	ldr	r1, [sp, #4]
 8005820:	2230      	movs	r2, #48	; 0x30
 8005822:	3701      	adds	r7, #1
 8005824:	700a      	strb	r2, [r1, #0]
 8005826:	781a      	ldrb	r2, [r3, #0]
 8005828:	3201      	adds	r2, #1
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	e790      	b.n	8005750 <_dtoa_r+0x608>
 800582e:	4ba6      	ldr	r3, [pc, #664]	; (8005ac8 <_dtoa_r+0x980>)
 8005830:	2200      	movs	r2, #0
 8005832:	f7fa fee1 	bl	80005f8 <__aeabi_dmul>
 8005836:	2200      	movs	r2, #0
 8005838:	2300      	movs	r3, #0
 800583a:	4606      	mov	r6, r0
 800583c:	460f      	mov	r7, r1
 800583e:	f7fb f943 	bl	8000ac8 <__aeabi_dcmpeq>
 8005842:	2800      	cmp	r0, #0
 8005844:	d09d      	beq.n	8005782 <_dtoa_r+0x63a>
 8005846:	e7cf      	b.n	80057e8 <_dtoa_r+0x6a0>
 8005848:	9a08      	ldr	r2, [sp, #32]
 800584a:	2a00      	cmp	r2, #0
 800584c:	f000 80d7 	beq.w	80059fe <_dtoa_r+0x8b6>
 8005850:	9a06      	ldr	r2, [sp, #24]
 8005852:	2a01      	cmp	r2, #1
 8005854:	f300 80ba 	bgt.w	80059cc <_dtoa_r+0x884>
 8005858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800585a:	2a00      	cmp	r2, #0
 800585c:	f000 80b2 	beq.w	80059c4 <_dtoa_r+0x87c>
 8005860:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005864:	9e07      	ldr	r6, [sp, #28]
 8005866:	9d04      	ldr	r5, [sp, #16]
 8005868:	9a04      	ldr	r2, [sp, #16]
 800586a:	441a      	add	r2, r3
 800586c:	9204      	str	r2, [sp, #16]
 800586e:	9a05      	ldr	r2, [sp, #20]
 8005870:	2101      	movs	r1, #1
 8005872:	441a      	add	r2, r3
 8005874:	4620      	mov	r0, r4
 8005876:	9205      	str	r2, [sp, #20]
 8005878:	f000 fc60 	bl	800613c <__i2b>
 800587c:	4607      	mov	r7, r0
 800587e:	2d00      	cmp	r5, #0
 8005880:	dd0c      	ble.n	800589c <_dtoa_r+0x754>
 8005882:	9b05      	ldr	r3, [sp, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	dd09      	ble.n	800589c <_dtoa_r+0x754>
 8005888:	42ab      	cmp	r3, r5
 800588a:	9a04      	ldr	r2, [sp, #16]
 800588c:	bfa8      	it	ge
 800588e:	462b      	movge	r3, r5
 8005890:	1ad2      	subs	r2, r2, r3
 8005892:	9204      	str	r2, [sp, #16]
 8005894:	9a05      	ldr	r2, [sp, #20]
 8005896:	1aed      	subs	r5, r5, r3
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	9305      	str	r3, [sp, #20]
 800589c:	9b07      	ldr	r3, [sp, #28]
 800589e:	b31b      	cbz	r3, 80058e8 <_dtoa_r+0x7a0>
 80058a0:	9b08      	ldr	r3, [sp, #32]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80af 	beq.w	8005a06 <_dtoa_r+0x8be>
 80058a8:	2e00      	cmp	r6, #0
 80058aa:	dd13      	ble.n	80058d4 <_dtoa_r+0x78c>
 80058ac:	4639      	mov	r1, r7
 80058ae:	4632      	mov	r2, r6
 80058b0:	4620      	mov	r0, r4
 80058b2:	f000 fd03 	bl	80062bc <__pow5mult>
 80058b6:	ee18 2a10 	vmov	r2, s16
 80058ba:	4601      	mov	r1, r0
 80058bc:	4607      	mov	r7, r0
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 fc52 	bl	8006168 <__multiply>
 80058c4:	ee18 1a10 	vmov	r1, s16
 80058c8:	4680      	mov	r8, r0
 80058ca:	4620      	mov	r0, r4
 80058cc:	f000 fb7e 	bl	8005fcc <_Bfree>
 80058d0:	ee08 8a10 	vmov	s16, r8
 80058d4:	9b07      	ldr	r3, [sp, #28]
 80058d6:	1b9a      	subs	r2, r3, r6
 80058d8:	d006      	beq.n	80058e8 <_dtoa_r+0x7a0>
 80058da:	ee18 1a10 	vmov	r1, s16
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 fcec 	bl	80062bc <__pow5mult>
 80058e4:	ee08 0a10 	vmov	s16, r0
 80058e8:	2101      	movs	r1, #1
 80058ea:	4620      	mov	r0, r4
 80058ec:	f000 fc26 	bl	800613c <__i2b>
 80058f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	4606      	mov	r6, r0
 80058f6:	f340 8088 	ble.w	8005a0a <_dtoa_r+0x8c2>
 80058fa:	461a      	mov	r2, r3
 80058fc:	4601      	mov	r1, r0
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 fcdc 	bl	80062bc <__pow5mult>
 8005904:	9b06      	ldr	r3, [sp, #24]
 8005906:	2b01      	cmp	r3, #1
 8005908:	4606      	mov	r6, r0
 800590a:	f340 8081 	ble.w	8005a10 <_dtoa_r+0x8c8>
 800590e:	f04f 0800 	mov.w	r8, #0
 8005912:	6933      	ldr	r3, [r6, #16]
 8005914:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005918:	6918      	ldr	r0, [r3, #16]
 800591a:	f000 fbbf 	bl	800609c <__hi0bits>
 800591e:	f1c0 0020 	rsb	r0, r0, #32
 8005922:	9b05      	ldr	r3, [sp, #20]
 8005924:	4418      	add	r0, r3
 8005926:	f010 001f 	ands.w	r0, r0, #31
 800592a:	f000 8092 	beq.w	8005a52 <_dtoa_r+0x90a>
 800592e:	f1c0 0320 	rsb	r3, r0, #32
 8005932:	2b04      	cmp	r3, #4
 8005934:	f340 808a 	ble.w	8005a4c <_dtoa_r+0x904>
 8005938:	f1c0 001c 	rsb	r0, r0, #28
 800593c:	9b04      	ldr	r3, [sp, #16]
 800593e:	4403      	add	r3, r0
 8005940:	9304      	str	r3, [sp, #16]
 8005942:	9b05      	ldr	r3, [sp, #20]
 8005944:	4403      	add	r3, r0
 8005946:	4405      	add	r5, r0
 8005948:	9305      	str	r3, [sp, #20]
 800594a:	9b04      	ldr	r3, [sp, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	dd07      	ble.n	8005960 <_dtoa_r+0x818>
 8005950:	ee18 1a10 	vmov	r1, s16
 8005954:	461a      	mov	r2, r3
 8005956:	4620      	mov	r0, r4
 8005958:	f000 fd0a 	bl	8006370 <__lshift>
 800595c:	ee08 0a10 	vmov	s16, r0
 8005960:	9b05      	ldr	r3, [sp, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	dd05      	ble.n	8005972 <_dtoa_r+0x82a>
 8005966:	4631      	mov	r1, r6
 8005968:	461a      	mov	r2, r3
 800596a:	4620      	mov	r0, r4
 800596c:	f000 fd00 	bl	8006370 <__lshift>
 8005970:	4606      	mov	r6, r0
 8005972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d06e      	beq.n	8005a56 <_dtoa_r+0x90e>
 8005978:	ee18 0a10 	vmov	r0, s16
 800597c:	4631      	mov	r1, r6
 800597e:	f000 fd67 	bl	8006450 <__mcmp>
 8005982:	2800      	cmp	r0, #0
 8005984:	da67      	bge.n	8005a56 <_dtoa_r+0x90e>
 8005986:	9b00      	ldr	r3, [sp, #0]
 8005988:	3b01      	subs	r3, #1
 800598a:	ee18 1a10 	vmov	r1, s16
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	220a      	movs	r2, #10
 8005992:	2300      	movs	r3, #0
 8005994:	4620      	mov	r0, r4
 8005996:	f000 fb3b 	bl	8006010 <__multadd>
 800599a:	9b08      	ldr	r3, [sp, #32]
 800599c:	ee08 0a10 	vmov	s16, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 81b1 	beq.w	8005d08 <_dtoa_r+0xbc0>
 80059a6:	2300      	movs	r3, #0
 80059a8:	4639      	mov	r1, r7
 80059aa:	220a      	movs	r2, #10
 80059ac:	4620      	mov	r0, r4
 80059ae:	f000 fb2f 	bl	8006010 <__multadd>
 80059b2:	9b02      	ldr	r3, [sp, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	4607      	mov	r7, r0
 80059b8:	f300 808e 	bgt.w	8005ad8 <_dtoa_r+0x990>
 80059bc:	9b06      	ldr	r3, [sp, #24]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	dc51      	bgt.n	8005a66 <_dtoa_r+0x91e>
 80059c2:	e089      	b.n	8005ad8 <_dtoa_r+0x990>
 80059c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059ca:	e74b      	b.n	8005864 <_dtoa_r+0x71c>
 80059cc:	9b03      	ldr	r3, [sp, #12]
 80059ce:	1e5e      	subs	r6, r3, #1
 80059d0:	9b07      	ldr	r3, [sp, #28]
 80059d2:	42b3      	cmp	r3, r6
 80059d4:	bfbf      	itttt	lt
 80059d6:	9b07      	ldrlt	r3, [sp, #28]
 80059d8:	9607      	strlt	r6, [sp, #28]
 80059da:	1af2      	sublt	r2, r6, r3
 80059dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80059de:	bfb6      	itet	lt
 80059e0:	189b      	addlt	r3, r3, r2
 80059e2:	1b9e      	subge	r6, r3, r6
 80059e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80059e6:	9b03      	ldr	r3, [sp, #12]
 80059e8:	bfb8      	it	lt
 80059ea:	2600      	movlt	r6, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bfb7      	itett	lt
 80059f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80059f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80059f8:	1a9d      	sublt	r5, r3, r2
 80059fa:	2300      	movlt	r3, #0
 80059fc:	e734      	b.n	8005868 <_dtoa_r+0x720>
 80059fe:	9e07      	ldr	r6, [sp, #28]
 8005a00:	9d04      	ldr	r5, [sp, #16]
 8005a02:	9f08      	ldr	r7, [sp, #32]
 8005a04:	e73b      	b.n	800587e <_dtoa_r+0x736>
 8005a06:	9a07      	ldr	r2, [sp, #28]
 8005a08:	e767      	b.n	80058da <_dtoa_r+0x792>
 8005a0a:	9b06      	ldr	r3, [sp, #24]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	dc18      	bgt.n	8005a42 <_dtoa_r+0x8fa>
 8005a10:	f1ba 0f00 	cmp.w	sl, #0
 8005a14:	d115      	bne.n	8005a42 <_dtoa_r+0x8fa>
 8005a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a1a:	b993      	cbnz	r3, 8005a42 <_dtoa_r+0x8fa>
 8005a1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a20:	0d1b      	lsrs	r3, r3, #20
 8005a22:	051b      	lsls	r3, r3, #20
 8005a24:	b183      	cbz	r3, 8005a48 <_dtoa_r+0x900>
 8005a26:	9b04      	ldr	r3, [sp, #16]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	9304      	str	r3, [sp, #16]
 8005a2c:	9b05      	ldr	r3, [sp, #20]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	9305      	str	r3, [sp, #20]
 8005a32:	f04f 0801 	mov.w	r8, #1
 8005a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f47f af6a 	bne.w	8005912 <_dtoa_r+0x7ca>
 8005a3e:	2001      	movs	r0, #1
 8005a40:	e76f      	b.n	8005922 <_dtoa_r+0x7da>
 8005a42:	f04f 0800 	mov.w	r8, #0
 8005a46:	e7f6      	b.n	8005a36 <_dtoa_r+0x8ee>
 8005a48:	4698      	mov	r8, r3
 8005a4a:	e7f4      	b.n	8005a36 <_dtoa_r+0x8ee>
 8005a4c:	f43f af7d 	beq.w	800594a <_dtoa_r+0x802>
 8005a50:	4618      	mov	r0, r3
 8005a52:	301c      	adds	r0, #28
 8005a54:	e772      	b.n	800593c <_dtoa_r+0x7f4>
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	dc37      	bgt.n	8005acc <_dtoa_r+0x984>
 8005a5c:	9b06      	ldr	r3, [sp, #24]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	dd34      	ble.n	8005acc <_dtoa_r+0x984>
 8005a62:	9b03      	ldr	r3, [sp, #12]
 8005a64:	9302      	str	r3, [sp, #8]
 8005a66:	9b02      	ldr	r3, [sp, #8]
 8005a68:	b96b      	cbnz	r3, 8005a86 <_dtoa_r+0x93e>
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	2205      	movs	r2, #5
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 face 	bl	8006010 <__multadd>
 8005a74:	4601      	mov	r1, r0
 8005a76:	4606      	mov	r6, r0
 8005a78:	ee18 0a10 	vmov	r0, s16
 8005a7c:	f000 fce8 	bl	8006450 <__mcmp>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f73f adbb 	bgt.w	80055fc <_dtoa_r+0x4b4>
 8005a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a88:	9d01      	ldr	r5, [sp, #4]
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	f04f 0800 	mov.w	r8, #0
 8005a92:	4631      	mov	r1, r6
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 fa99 	bl	8005fcc <_Bfree>
 8005a9a:	2f00      	cmp	r7, #0
 8005a9c:	f43f aea4 	beq.w	80057e8 <_dtoa_r+0x6a0>
 8005aa0:	f1b8 0f00 	cmp.w	r8, #0
 8005aa4:	d005      	beq.n	8005ab2 <_dtoa_r+0x96a>
 8005aa6:	45b8      	cmp	r8, r7
 8005aa8:	d003      	beq.n	8005ab2 <_dtoa_r+0x96a>
 8005aaa:	4641      	mov	r1, r8
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 fa8d 	bl	8005fcc <_Bfree>
 8005ab2:	4639      	mov	r1, r7
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f000 fa89 	bl	8005fcc <_Bfree>
 8005aba:	e695      	b.n	80057e8 <_dtoa_r+0x6a0>
 8005abc:	2600      	movs	r6, #0
 8005abe:	4637      	mov	r7, r6
 8005ac0:	e7e1      	b.n	8005a86 <_dtoa_r+0x93e>
 8005ac2:	9700      	str	r7, [sp, #0]
 8005ac4:	4637      	mov	r7, r6
 8005ac6:	e599      	b.n	80055fc <_dtoa_r+0x4b4>
 8005ac8:	40240000 	.word	0x40240000
 8005acc:	9b08      	ldr	r3, [sp, #32]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80ca 	beq.w	8005c68 <_dtoa_r+0xb20>
 8005ad4:	9b03      	ldr	r3, [sp, #12]
 8005ad6:	9302      	str	r3, [sp, #8]
 8005ad8:	2d00      	cmp	r5, #0
 8005ada:	dd05      	ble.n	8005ae8 <_dtoa_r+0x9a0>
 8005adc:	4639      	mov	r1, r7
 8005ade:	462a      	mov	r2, r5
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 fc45 	bl	8006370 <__lshift>
 8005ae6:	4607      	mov	r7, r0
 8005ae8:	f1b8 0f00 	cmp.w	r8, #0
 8005aec:	d05b      	beq.n	8005ba6 <_dtoa_r+0xa5e>
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4620      	mov	r0, r4
 8005af2:	f000 fa2b 	bl	8005f4c <_Balloc>
 8005af6:	4605      	mov	r5, r0
 8005af8:	b928      	cbnz	r0, 8005b06 <_dtoa_r+0x9be>
 8005afa:	4b87      	ldr	r3, [pc, #540]	; (8005d18 <_dtoa_r+0xbd0>)
 8005afc:	4602      	mov	r2, r0
 8005afe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b02:	f7ff bb3b 	b.w	800517c <_dtoa_r+0x34>
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	3202      	adds	r2, #2
 8005b0a:	0092      	lsls	r2, r2, #2
 8005b0c:	f107 010c 	add.w	r1, r7, #12
 8005b10:	300c      	adds	r0, #12
 8005b12:	f000 fa0d 	bl	8005f30 <memcpy>
 8005b16:	2201      	movs	r2, #1
 8005b18:	4629      	mov	r1, r5
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 fc28 	bl	8006370 <__lshift>
 8005b20:	9b01      	ldr	r3, [sp, #4]
 8005b22:	f103 0901 	add.w	r9, r3, #1
 8005b26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	9305      	str	r3, [sp, #20]
 8005b2e:	f00a 0301 	and.w	r3, sl, #1
 8005b32:	46b8      	mov	r8, r7
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	4607      	mov	r7, r0
 8005b38:	4631      	mov	r1, r6
 8005b3a:	ee18 0a10 	vmov	r0, s16
 8005b3e:	f7ff fa77 	bl	8005030 <quorem>
 8005b42:	4641      	mov	r1, r8
 8005b44:	9002      	str	r0, [sp, #8]
 8005b46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005b4a:	ee18 0a10 	vmov	r0, s16
 8005b4e:	f000 fc7f 	bl	8006450 <__mcmp>
 8005b52:	463a      	mov	r2, r7
 8005b54:	9003      	str	r0, [sp, #12]
 8005b56:	4631      	mov	r1, r6
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 fc95 	bl	8006488 <__mdiff>
 8005b5e:	68c2      	ldr	r2, [r0, #12]
 8005b60:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005b64:	4605      	mov	r5, r0
 8005b66:	bb02      	cbnz	r2, 8005baa <_dtoa_r+0xa62>
 8005b68:	4601      	mov	r1, r0
 8005b6a:	ee18 0a10 	vmov	r0, s16
 8005b6e:	f000 fc6f 	bl	8006450 <__mcmp>
 8005b72:	4602      	mov	r2, r0
 8005b74:	4629      	mov	r1, r5
 8005b76:	4620      	mov	r0, r4
 8005b78:	9207      	str	r2, [sp, #28]
 8005b7a:	f000 fa27 	bl	8005fcc <_Bfree>
 8005b7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005b82:	ea43 0102 	orr.w	r1, r3, r2
 8005b86:	9b04      	ldr	r3, [sp, #16]
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	464d      	mov	r5, r9
 8005b8c:	d10f      	bne.n	8005bae <_dtoa_r+0xa66>
 8005b8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005b92:	d02a      	beq.n	8005bea <_dtoa_r+0xaa2>
 8005b94:	9b03      	ldr	r3, [sp, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dd02      	ble.n	8005ba0 <_dtoa_r+0xa58>
 8005b9a:	9b02      	ldr	r3, [sp, #8]
 8005b9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005ba0:	f88b a000 	strb.w	sl, [fp]
 8005ba4:	e775      	b.n	8005a92 <_dtoa_r+0x94a>
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	e7ba      	b.n	8005b20 <_dtoa_r+0x9d8>
 8005baa:	2201      	movs	r2, #1
 8005bac:	e7e2      	b.n	8005b74 <_dtoa_r+0xa2c>
 8005bae:	9b03      	ldr	r3, [sp, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	db04      	blt.n	8005bbe <_dtoa_r+0xa76>
 8005bb4:	9906      	ldr	r1, [sp, #24]
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	9904      	ldr	r1, [sp, #16]
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	d122      	bne.n	8005c04 <_dtoa_r+0xabc>
 8005bbe:	2a00      	cmp	r2, #0
 8005bc0:	ddee      	ble.n	8005ba0 <_dtoa_r+0xa58>
 8005bc2:	ee18 1a10 	vmov	r1, s16
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 fbd1 	bl	8006370 <__lshift>
 8005bce:	4631      	mov	r1, r6
 8005bd0:	ee08 0a10 	vmov	s16, r0
 8005bd4:	f000 fc3c 	bl	8006450 <__mcmp>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	dc03      	bgt.n	8005be4 <_dtoa_r+0xa9c>
 8005bdc:	d1e0      	bne.n	8005ba0 <_dtoa_r+0xa58>
 8005bde:	f01a 0f01 	tst.w	sl, #1
 8005be2:	d0dd      	beq.n	8005ba0 <_dtoa_r+0xa58>
 8005be4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005be8:	d1d7      	bne.n	8005b9a <_dtoa_r+0xa52>
 8005bea:	2339      	movs	r3, #57	; 0x39
 8005bec:	f88b 3000 	strb.w	r3, [fp]
 8005bf0:	462b      	mov	r3, r5
 8005bf2:	461d      	mov	r5, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005bfa:	2a39      	cmp	r2, #57	; 0x39
 8005bfc:	d071      	beq.n	8005ce2 <_dtoa_r+0xb9a>
 8005bfe:	3201      	adds	r2, #1
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	e746      	b.n	8005a92 <_dtoa_r+0x94a>
 8005c04:	2a00      	cmp	r2, #0
 8005c06:	dd07      	ble.n	8005c18 <_dtoa_r+0xad0>
 8005c08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c0c:	d0ed      	beq.n	8005bea <_dtoa_r+0xaa2>
 8005c0e:	f10a 0301 	add.w	r3, sl, #1
 8005c12:	f88b 3000 	strb.w	r3, [fp]
 8005c16:	e73c      	b.n	8005a92 <_dtoa_r+0x94a>
 8005c18:	9b05      	ldr	r3, [sp, #20]
 8005c1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005c1e:	4599      	cmp	r9, r3
 8005c20:	d047      	beq.n	8005cb2 <_dtoa_r+0xb6a>
 8005c22:	ee18 1a10 	vmov	r1, s16
 8005c26:	2300      	movs	r3, #0
 8005c28:	220a      	movs	r2, #10
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 f9f0 	bl	8006010 <__multadd>
 8005c30:	45b8      	cmp	r8, r7
 8005c32:	ee08 0a10 	vmov	s16, r0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	f04f 020a 	mov.w	r2, #10
 8005c3e:	4641      	mov	r1, r8
 8005c40:	4620      	mov	r0, r4
 8005c42:	d106      	bne.n	8005c52 <_dtoa_r+0xb0a>
 8005c44:	f000 f9e4 	bl	8006010 <__multadd>
 8005c48:	4680      	mov	r8, r0
 8005c4a:	4607      	mov	r7, r0
 8005c4c:	f109 0901 	add.w	r9, r9, #1
 8005c50:	e772      	b.n	8005b38 <_dtoa_r+0x9f0>
 8005c52:	f000 f9dd 	bl	8006010 <__multadd>
 8005c56:	4639      	mov	r1, r7
 8005c58:	4680      	mov	r8, r0
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	220a      	movs	r2, #10
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 f9d6 	bl	8006010 <__multadd>
 8005c64:	4607      	mov	r7, r0
 8005c66:	e7f1      	b.n	8005c4c <_dtoa_r+0xb04>
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	9302      	str	r3, [sp, #8]
 8005c6c:	9d01      	ldr	r5, [sp, #4]
 8005c6e:	ee18 0a10 	vmov	r0, s16
 8005c72:	4631      	mov	r1, r6
 8005c74:	f7ff f9dc 	bl	8005030 <quorem>
 8005c78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c7c:	9b01      	ldr	r3, [sp, #4]
 8005c7e:	f805 ab01 	strb.w	sl, [r5], #1
 8005c82:	1aea      	subs	r2, r5, r3
 8005c84:	9b02      	ldr	r3, [sp, #8]
 8005c86:	4293      	cmp	r3, r2
 8005c88:	dd09      	ble.n	8005c9e <_dtoa_r+0xb56>
 8005c8a:	ee18 1a10 	vmov	r1, s16
 8005c8e:	2300      	movs	r3, #0
 8005c90:	220a      	movs	r2, #10
 8005c92:	4620      	mov	r0, r4
 8005c94:	f000 f9bc 	bl	8006010 <__multadd>
 8005c98:	ee08 0a10 	vmov	s16, r0
 8005c9c:	e7e7      	b.n	8005c6e <_dtoa_r+0xb26>
 8005c9e:	9b02      	ldr	r3, [sp, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	bfc8      	it	gt
 8005ca4:	461d      	movgt	r5, r3
 8005ca6:	9b01      	ldr	r3, [sp, #4]
 8005ca8:	bfd8      	it	le
 8005caa:	2501      	movle	r5, #1
 8005cac:	441d      	add	r5, r3
 8005cae:	f04f 0800 	mov.w	r8, #0
 8005cb2:	ee18 1a10 	vmov	r1, s16
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fb59 	bl	8006370 <__lshift>
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	ee08 0a10 	vmov	s16, r0
 8005cc4:	f000 fbc4 	bl	8006450 <__mcmp>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	dc91      	bgt.n	8005bf0 <_dtoa_r+0xaa8>
 8005ccc:	d102      	bne.n	8005cd4 <_dtoa_r+0xb8c>
 8005cce:	f01a 0f01 	tst.w	sl, #1
 8005cd2:	d18d      	bne.n	8005bf0 <_dtoa_r+0xaa8>
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cdc:	2a30      	cmp	r2, #48	; 0x30
 8005cde:	d0fa      	beq.n	8005cd6 <_dtoa_r+0xb8e>
 8005ce0:	e6d7      	b.n	8005a92 <_dtoa_r+0x94a>
 8005ce2:	9a01      	ldr	r2, [sp, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d184      	bne.n	8005bf2 <_dtoa_r+0xaaa>
 8005ce8:	9b00      	ldr	r3, [sp, #0]
 8005cea:	3301      	adds	r3, #1
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	2331      	movs	r3, #49	; 0x31
 8005cf0:	7013      	strb	r3, [r2, #0]
 8005cf2:	e6ce      	b.n	8005a92 <_dtoa_r+0x94a>
 8005cf4:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <_dtoa_r+0xbd4>)
 8005cf6:	f7ff ba95 	b.w	8005224 <_dtoa_r+0xdc>
 8005cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f47f aa6e 	bne.w	80051de <_dtoa_r+0x96>
 8005d02:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <_dtoa_r+0xbd8>)
 8005d04:	f7ff ba8e 	b.w	8005224 <_dtoa_r+0xdc>
 8005d08:	9b02      	ldr	r3, [sp, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	dcae      	bgt.n	8005c6c <_dtoa_r+0xb24>
 8005d0e:	9b06      	ldr	r3, [sp, #24]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	f73f aea8 	bgt.w	8005a66 <_dtoa_r+0x91e>
 8005d16:	e7a9      	b.n	8005c6c <_dtoa_r+0xb24>
 8005d18:	080072b3 	.word	0x080072b3
 8005d1c:	08007210 	.word	0x08007210
 8005d20:	08007234 	.word	0x08007234

08005d24 <std>:
 8005d24:	2300      	movs	r3, #0
 8005d26:	b510      	push	{r4, lr}
 8005d28:	4604      	mov	r4, r0
 8005d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d32:	6083      	str	r3, [r0, #8]
 8005d34:	8181      	strh	r1, [r0, #12]
 8005d36:	6643      	str	r3, [r0, #100]	; 0x64
 8005d38:	81c2      	strh	r2, [r0, #14]
 8005d3a:	6183      	str	r3, [r0, #24]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	2208      	movs	r2, #8
 8005d40:	305c      	adds	r0, #92	; 0x5c
 8005d42:	f7fe fceb 	bl	800471c <memset>
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <std+0x38>)
 8005d48:	6263      	str	r3, [r4, #36]	; 0x24
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <std+0x3c>)
 8005d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <std+0x40>)
 8005d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d52:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <std+0x44>)
 8005d54:	6224      	str	r4, [r4, #32]
 8005d56:	6323      	str	r3, [r4, #48]	; 0x30
 8005d58:	bd10      	pop	{r4, pc}
 8005d5a:	bf00      	nop
 8005d5c:	08006b15 	.word	0x08006b15
 8005d60:	08006b37 	.word	0x08006b37
 8005d64:	08006b6f 	.word	0x08006b6f
 8005d68:	08006b93 	.word	0x08006b93

08005d6c <_cleanup_r>:
 8005d6c:	4901      	ldr	r1, [pc, #4]	; (8005d74 <_cleanup_r+0x8>)
 8005d6e:	f000 b8af 	b.w	8005ed0 <_fwalk_reent>
 8005d72:	bf00      	nop
 8005d74:	08006ea9 	.word	0x08006ea9

08005d78 <__sfmoreglue>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	2268      	movs	r2, #104	; 0x68
 8005d7c:	1e4d      	subs	r5, r1, #1
 8005d7e:	4355      	muls	r5, r2
 8005d80:	460e      	mov	r6, r1
 8005d82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d86:	f000 fce7 	bl	8006758 <_malloc_r>
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	b140      	cbz	r0, 8005da0 <__sfmoreglue+0x28>
 8005d8e:	2100      	movs	r1, #0
 8005d90:	e9c0 1600 	strd	r1, r6, [r0]
 8005d94:	300c      	adds	r0, #12
 8005d96:	60a0      	str	r0, [r4, #8]
 8005d98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d9c:	f7fe fcbe 	bl	800471c <memset>
 8005da0:	4620      	mov	r0, r4
 8005da2:	bd70      	pop	{r4, r5, r6, pc}

08005da4 <__sfp_lock_acquire>:
 8005da4:	4801      	ldr	r0, [pc, #4]	; (8005dac <__sfp_lock_acquire+0x8>)
 8005da6:	f000 b8b8 	b.w	8005f1a <__retarget_lock_acquire_recursive>
 8005daa:	bf00      	nop
 8005dac:	20000351 	.word	0x20000351

08005db0 <__sfp_lock_release>:
 8005db0:	4801      	ldr	r0, [pc, #4]	; (8005db8 <__sfp_lock_release+0x8>)
 8005db2:	f000 b8b3 	b.w	8005f1c <__retarget_lock_release_recursive>
 8005db6:	bf00      	nop
 8005db8:	20000351 	.word	0x20000351

08005dbc <__sinit_lock_acquire>:
 8005dbc:	4801      	ldr	r0, [pc, #4]	; (8005dc4 <__sinit_lock_acquire+0x8>)
 8005dbe:	f000 b8ac 	b.w	8005f1a <__retarget_lock_acquire_recursive>
 8005dc2:	bf00      	nop
 8005dc4:	20000352 	.word	0x20000352

08005dc8 <__sinit_lock_release>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	; (8005dd0 <__sinit_lock_release+0x8>)
 8005dca:	f000 b8a7 	b.w	8005f1c <__retarget_lock_release_recursive>
 8005dce:	bf00      	nop
 8005dd0:	20000352 	.word	0x20000352

08005dd4 <__sinit>:
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	f7ff fff0 	bl	8005dbc <__sinit_lock_acquire>
 8005ddc:	69a3      	ldr	r3, [r4, #24]
 8005dde:	b11b      	cbz	r3, 8005de8 <__sinit+0x14>
 8005de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de4:	f7ff bff0 	b.w	8005dc8 <__sinit_lock_release>
 8005de8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005dec:	6523      	str	r3, [r4, #80]	; 0x50
 8005dee:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <__sinit+0x68>)
 8005df0:	4a13      	ldr	r2, [pc, #76]	; (8005e40 <__sinit+0x6c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	bf04      	itt	eq
 8005dfa:	2301      	moveq	r3, #1
 8005dfc:	61a3      	streq	r3, [r4, #24]
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f000 f820 	bl	8005e44 <__sfp>
 8005e04:	6060      	str	r0, [r4, #4]
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 f81c 	bl	8005e44 <__sfp>
 8005e0c:	60a0      	str	r0, [r4, #8]
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 f818 	bl	8005e44 <__sfp>
 8005e14:	2200      	movs	r2, #0
 8005e16:	60e0      	str	r0, [r4, #12]
 8005e18:	2104      	movs	r1, #4
 8005e1a:	6860      	ldr	r0, [r4, #4]
 8005e1c:	f7ff ff82 	bl	8005d24 <std>
 8005e20:	68a0      	ldr	r0, [r4, #8]
 8005e22:	2201      	movs	r2, #1
 8005e24:	2109      	movs	r1, #9
 8005e26:	f7ff ff7d 	bl	8005d24 <std>
 8005e2a:	68e0      	ldr	r0, [r4, #12]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	2112      	movs	r1, #18
 8005e30:	f7ff ff78 	bl	8005d24 <std>
 8005e34:	2301      	movs	r3, #1
 8005e36:	61a3      	str	r3, [r4, #24]
 8005e38:	e7d2      	b.n	8005de0 <__sinit+0xc>
 8005e3a:	bf00      	nop
 8005e3c:	080071fc 	.word	0x080071fc
 8005e40:	08005d6d 	.word	0x08005d6d

08005e44 <__sfp>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	4607      	mov	r7, r0
 8005e48:	f7ff ffac 	bl	8005da4 <__sfp_lock_acquire>
 8005e4c:	4b1e      	ldr	r3, [pc, #120]	; (8005ec8 <__sfp+0x84>)
 8005e4e:	681e      	ldr	r6, [r3, #0]
 8005e50:	69b3      	ldr	r3, [r6, #24]
 8005e52:	b913      	cbnz	r3, 8005e5a <__sfp+0x16>
 8005e54:	4630      	mov	r0, r6
 8005e56:	f7ff ffbd 	bl	8005dd4 <__sinit>
 8005e5a:	3648      	adds	r6, #72	; 0x48
 8005e5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	d503      	bpl.n	8005e6c <__sfp+0x28>
 8005e64:	6833      	ldr	r3, [r6, #0]
 8005e66:	b30b      	cbz	r3, 8005eac <__sfp+0x68>
 8005e68:	6836      	ldr	r6, [r6, #0]
 8005e6a:	e7f7      	b.n	8005e5c <__sfp+0x18>
 8005e6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e70:	b9d5      	cbnz	r5, 8005ea8 <__sfp+0x64>
 8005e72:	4b16      	ldr	r3, [pc, #88]	; (8005ecc <__sfp+0x88>)
 8005e74:	60e3      	str	r3, [r4, #12]
 8005e76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e7a:	6665      	str	r5, [r4, #100]	; 0x64
 8005e7c:	f000 f84c 	bl	8005f18 <__retarget_lock_init_recursive>
 8005e80:	f7ff ff96 	bl	8005db0 <__sfp_lock_release>
 8005e84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e8c:	6025      	str	r5, [r4, #0]
 8005e8e:	61a5      	str	r5, [r4, #24]
 8005e90:	2208      	movs	r2, #8
 8005e92:	4629      	mov	r1, r5
 8005e94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e98:	f7fe fc40 	bl	800471c <memset>
 8005e9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ea0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ea8:	3468      	adds	r4, #104	; 0x68
 8005eaa:	e7d9      	b.n	8005e60 <__sfp+0x1c>
 8005eac:	2104      	movs	r1, #4
 8005eae:	4638      	mov	r0, r7
 8005eb0:	f7ff ff62 	bl	8005d78 <__sfmoreglue>
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	6030      	str	r0, [r6, #0]
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d1d5      	bne.n	8005e68 <__sfp+0x24>
 8005ebc:	f7ff ff78 	bl	8005db0 <__sfp_lock_release>
 8005ec0:	230c      	movs	r3, #12
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	e7ee      	b.n	8005ea4 <__sfp+0x60>
 8005ec6:	bf00      	nop
 8005ec8:	080071fc 	.word	0x080071fc
 8005ecc:	ffff0001 	.word	0xffff0001

08005ed0 <_fwalk_reent>:
 8005ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	4688      	mov	r8, r1
 8005ed8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005edc:	2700      	movs	r7, #0
 8005ede:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ee2:	f1b9 0901 	subs.w	r9, r9, #1
 8005ee6:	d505      	bpl.n	8005ef4 <_fwalk_reent+0x24>
 8005ee8:	6824      	ldr	r4, [r4, #0]
 8005eea:	2c00      	cmp	r4, #0
 8005eec:	d1f7      	bne.n	8005ede <_fwalk_reent+0xe>
 8005eee:	4638      	mov	r0, r7
 8005ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ef4:	89ab      	ldrh	r3, [r5, #12]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d907      	bls.n	8005f0a <_fwalk_reent+0x3a>
 8005efa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005efe:	3301      	adds	r3, #1
 8005f00:	d003      	beq.n	8005f0a <_fwalk_reent+0x3a>
 8005f02:	4629      	mov	r1, r5
 8005f04:	4630      	mov	r0, r6
 8005f06:	47c0      	blx	r8
 8005f08:	4307      	orrs	r7, r0
 8005f0a:	3568      	adds	r5, #104	; 0x68
 8005f0c:	e7e9      	b.n	8005ee2 <_fwalk_reent+0x12>
	...

08005f10 <_localeconv_r>:
 8005f10:	4800      	ldr	r0, [pc, #0]	; (8005f14 <_localeconv_r+0x4>)
 8005f12:	4770      	bx	lr
 8005f14:	20000160 	.word	0x20000160

08005f18 <__retarget_lock_init_recursive>:
 8005f18:	4770      	bx	lr

08005f1a <__retarget_lock_acquire_recursive>:
 8005f1a:	4770      	bx	lr

08005f1c <__retarget_lock_release_recursive>:
 8005f1c:	4770      	bx	lr
	...

08005f20 <malloc>:
 8005f20:	4b02      	ldr	r3, [pc, #8]	; (8005f2c <malloc+0xc>)
 8005f22:	4601      	mov	r1, r0
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	f000 bc17 	b.w	8006758 <_malloc_r>
 8005f2a:	bf00      	nop
 8005f2c:	2000000c 	.word	0x2000000c

08005f30 <memcpy>:
 8005f30:	440a      	add	r2, r1
 8005f32:	4291      	cmp	r1, r2
 8005f34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f38:	d100      	bne.n	8005f3c <memcpy+0xc>
 8005f3a:	4770      	bx	lr
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f46:	4291      	cmp	r1, r2
 8005f48:	d1f9      	bne.n	8005f3e <memcpy+0xe>
 8005f4a:	bd10      	pop	{r4, pc}

08005f4c <_Balloc>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f50:	4604      	mov	r4, r0
 8005f52:	460d      	mov	r5, r1
 8005f54:	b976      	cbnz	r6, 8005f74 <_Balloc+0x28>
 8005f56:	2010      	movs	r0, #16
 8005f58:	f7ff ffe2 	bl	8005f20 <malloc>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	6260      	str	r0, [r4, #36]	; 0x24
 8005f60:	b920      	cbnz	r0, 8005f6c <_Balloc+0x20>
 8005f62:	4b18      	ldr	r3, [pc, #96]	; (8005fc4 <_Balloc+0x78>)
 8005f64:	4818      	ldr	r0, [pc, #96]	; (8005fc8 <_Balloc+0x7c>)
 8005f66:	2166      	movs	r1, #102	; 0x66
 8005f68:	f000 feea 	bl	8006d40 <__assert_func>
 8005f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f70:	6006      	str	r6, [r0, #0]
 8005f72:	60c6      	str	r6, [r0, #12]
 8005f74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f76:	68f3      	ldr	r3, [r6, #12]
 8005f78:	b183      	cbz	r3, 8005f9c <_Balloc+0x50>
 8005f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f82:	b9b8      	cbnz	r0, 8005fb4 <_Balloc+0x68>
 8005f84:	2101      	movs	r1, #1
 8005f86:	fa01 f605 	lsl.w	r6, r1, r5
 8005f8a:	1d72      	adds	r2, r6, #5
 8005f8c:	0092      	lsls	r2, r2, #2
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f000 fb60 	bl	8006654 <_calloc_r>
 8005f94:	b160      	cbz	r0, 8005fb0 <_Balloc+0x64>
 8005f96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f9a:	e00e      	b.n	8005fba <_Balloc+0x6e>
 8005f9c:	2221      	movs	r2, #33	; 0x21
 8005f9e:	2104      	movs	r1, #4
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fb57 	bl	8006654 <_calloc_r>
 8005fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa8:	60f0      	str	r0, [r6, #12]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e4      	bne.n	8005f7a <_Balloc+0x2e>
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
 8005fb4:	6802      	ldr	r2, [r0, #0]
 8005fb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fc0:	e7f7      	b.n	8005fb2 <_Balloc+0x66>
 8005fc2:	bf00      	nop
 8005fc4:	08007241 	.word	0x08007241
 8005fc8:	08007324 	.word	0x08007324

08005fcc <_Bfree>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	b976      	cbnz	r6, 8005ff4 <_Bfree+0x28>
 8005fd6:	2010      	movs	r0, #16
 8005fd8:	f7ff ffa2 	bl	8005f20 <malloc>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6268      	str	r0, [r5, #36]	; 0x24
 8005fe0:	b920      	cbnz	r0, 8005fec <_Bfree+0x20>
 8005fe2:	4b09      	ldr	r3, [pc, #36]	; (8006008 <_Bfree+0x3c>)
 8005fe4:	4809      	ldr	r0, [pc, #36]	; (800600c <_Bfree+0x40>)
 8005fe6:	218a      	movs	r1, #138	; 0x8a
 8005fe8:	f000 feaa 	bl	8006d40 <__assert_func>
 8005fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ff0:	6006      	str	r6, [r0, #0]
 8005ff2:	60c6      	str	r6, [r0, #12]
 8005ff4:	b13c      	cbz	r4, 8006006 <_Bfree+0x3a>
 8005ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ff8:	6862      	ldr	r2, [r4, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006000:	6021      	str	r1, [r4, #0]
 8006002:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 8006008:	08007241 	.word	0x08007241
 800600c:	08007324 	.word	0x08007324

08006010 <__multadd>:
 8006010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006014:	690d      	ldr	r5, [r1, #16]
 8006016:	4607      	mov	r7, r0
 8006018:	460c      	mov	r4, r1
 800601a:	461e      	mov	r6, r3
 800601c:	f101 0c14 	add.w	ip, r1, #20
 8006020:	2000      	movs	r0, #0
 8006022:	f8dc 3000 	ldr.w	r3, [ip]
 8006026:	b299      	uxth	r1, r3
 8006028:	fb02 6101 	mla	r1, r2, r1, r6
 800602c:	0c1e      	lsrs	r6, r3, #16
 800602e:	0c0b      	lsrs	r3, r1, #16
 8006030:	fb02 3306 	mla	r3, r2, r6, r3
 8006034:	b289      	uxth	r1, r1
 8006036:	3001      	adds	r0, #1
 8006038:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800603c:	4285      	cmp	r5, r0
 800603e:	f84c 1b04 	str.w	r1, [ip], #4
 8006042:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006046:	dcec      	bgt.n	8006022 <__multadd+0x12>
 8006048:	b30e      	cbz	r6, 800608e <__multadd+0x7e>
 800604a:	68a3      	ldr	r3, [r4, #8]
 800604c:	42ab      	cmp	r3, r5
 800604e:	dc19      	bgt.n	8006084 <__multadd+0x74>
 8006050:	6861      	ldr	r1, [r4, #4]
 8006052:	4638      	mov	r0, r7
 8006054:	3101      	adds	r1, #1
 8006056:	f7ff ff79 	bl	8005f4c <_Balloc>
 800605a:	4680      	mov	r8, r0
 800605c:	b928      	cbnz	r0, 800606a <__multadd+0x5a>
 800605e:	4602      	mov	r2, r0
 8006060:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <__multadd+0x84>)
 8006062:	480d      	ldr	r0, [pc, #52]	; (8006098 <__multadd+0x88>)
 8006064:	21b5      	movs	r1, #181	; 0xb5
 8006066:	f000 fe6b 	bl	8006d40 <__assert_func>
 800606a:	6922      	ldr	r2, [r4, #16]
 800606c:	3202      	adds	r2, #2
 800606e:	f104 010c 	add.w	r1, r4, #12
 8006072:	0092      	lsls	r2, r2, #2
 8006074:	300c      	adds	r0, #12
 8006076:	f7ff ff5b 	bl	8005f30 <memcpy>
 800607a:	4621      	mov	r1, r4
 800607c:	4638      	mov	r0, r7
 800607e:	f7ff ffa5 	bl	8005fcc <_Bfree>
 8006082:	4644      	mov	r4, r8
 8006084:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006088:	3501      	adds	r5, #1
 800608a:	615e      	str	r6, [r3, #20]
 800608c:	6125      	str	r5, [r4, #16]
 800608e:	4620      	mov	r0, r4
 8006090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006094:	080072b3 	.word	0x080072b3
 8006098:	08007324 	.word	0x08007324

0800609c <__hi0bits>:
 800609c:	0c03      	lsrs	r3, r0, #16
 800609e:	041b      	lsls	r3, r3, #16
 80060a0:	b9d3      	cbnz	r3, 80060d8 <__hi0bits+0x3c>
 80060a2:	0400      	lsls	r0, r0, #16
 80060a4:	2310      	movs	r3, #16
 80060a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80060aa:	bf04      	itt	eq
 80060ac:	0200      	lsleq	r0, r0, #8
 80060ae:	3308      	addeq	r3, #8
 80060b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80060b4:	bf04      	itt	eq
 80060b6:	0100      	lsleq	r0, r0, #4
 80060b8:	3304      	addeq	r3, #4
 80060ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80060be:	bf04      	itt	eq
 80060c0:	0080      	lsleq	r0, r0, #2
 80060c2:	3302      	addeq	r3, #2
 80060c4:	2800      	cmp	r0, #0
 80060c6:	db05      	blt.n	80060d4 <__hi0bits+0x38>
 80060c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80060cc:	f103 0301 	add.w	r3, r3, #1
 80060d0:	bf08      	it	eq
 80060d2:	2320      	moveq	r3, #32
 80060d4:	4618      	mov	r0, r3
 80060d6:	4770      	bx	lr
 80060d8:	2300      	movs	r3, #0
 80060da:	e7e4      	b.n	80060a6 <__hi0bits+0xa>

080060dc <__lo0bits>:
 80060dc:	6803      	ldr	r3, [r0, #0]
 80060de:	f013 0207 	ands.w	r2, r3, #7
 80060e2:	4601      	mov	r1, r0
 80060e4:	d00b      	beq.n	80060fe <__lo0bits+0x22>
 80060e6:	07da      	lsls	r2, r3, #31
 80060e8:	d423      	bmi.n	8006132 <__lo0bits+0x56>
 80060ea:	0798      	lsls	r0, r3, #30
 80060ec:	bf49      	itett	mi
 80060ee:	085b      	lsrmi	r3, r3, #1
 80060f0:	089b      	lsrpl	r3, r3, #2
 80060f2:	2001      	movmi	r0, #1
 80060f4:	600b      	strmi	r3, [r1, #0]
 80060f6:	bf5c      	itt	pl
 80060f8:	600b      	strpl	r3, [r1, #0]
 80060fa:	2002      	movpl	r0, #2
 80060fc:	4770      	bx	lr
 80060fe:	b298      	uxth	r0, r3
 8006100:	b9a8      	cbnz	r0, 800612e <__lo0bits+0x52>
 8006102:	0c1b      	lsrs	r3, r3, #16
 8006104:	2010      	movs	r0, #16
 8006106:	b2da      	uxtb	r2, r3
 8006108:	b90a      	cbnz	r2, 800610e <__lo0bits+0x32>
 800610a:	3008      	adds	r0, #8
 800610c:	0a1b      	lsrs	r3, r3, #8
 800610e:	071a      	lsls	r2, r3, #28
 8006110:	bf04      	itt	eq
 8006112:	091b      	lsreq	r3, r3, #4
 8006114:	3004      	addeq	r0, #4
 8006116:	079a      	lsls	r2, r3, #30
 8006118:	bf04      	itt	eq
 800611a:	089b      	lsreq	r3, r3, #2
 800611c:	3002      	addeq	r0, #2
 800611e:	07da      	lsls	r2, r3, #31
 8006120:	d403      	bmi.n	800612a <__lo0bits+0x4e>
 8006122:	085b      	lsrs	r3, r3, #1
 8006124:	f100 0001 	add.w	r0, r0, #1
 8006128:	d005      	beq.n	8006136 <__lo0bits+0x5a>
 800612a:	600b      	str	r3, [r1, #0]
 800612c:	4770      	bx	lr
 800612e:	4610      	mov	r0, r2
 8006130:	e7e9      	b.n	8006106 <__lo0bits+0x2a>
 8006132:	2000      	movs	r0, #0
 8006134:	4770      	bx	lr
 8006136:	2020      	movs	r0, #32
 8006138:	4770      	bx	lr
	...

0800613c <__i2b>:
 800613c:	b510      	push	{r4, lr}
 800613e:	460c      	mov	r4, r1
 8006140:	2101      	movs	r1, #1
 8006142:	f7ff ff03 	bl	8005f4c <_Balloc>
 8006146:	4602      	mov	r2, r0
 8006148:	b928      	cbnz	r0, 8006156 <__i2b+0x1a>
 800614a:	4b05      	ldr	r3, [pc, #20]	; (8006160 <__i2b+0x24>)
 800614c:	4805      	ldr	r0, [pc, #20]	; (8006164 <__i2b+0x28>)
 800614e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006152:	f000 fdf5 	bl	8006d40 <__assert_func>
 8006156:	2301      	movs	r3, #1
 8006158:	6144      	str	r4, [r0, #20]
 800615a:	6103      	str	r3, [r0, #16]
 800615c:	bd10      	pop	{r4, pc}
 800615e:	bf00      	nop
 8006160:	080072b3 	.word	0x080072b3
 8006164:	08007324 	.word	0x08007324

08006168 <__multiply>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	4691      	mov	r9, r2
 800616e:	690a      	ldr	r2, [r1, #16]
 8006170:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006174:	429a      	cmp	r2, r3
 8006176:	bfb8      	it	lt
 8006178:	460b      	movlt	r3, r1
 800617a:	460c      	mov	r4, r1
 800617c:	bfbc      	itt	lt
 800617e:	464c      	movlt	r4, r9
 8006180:	4699      	movlt	r9, r3
 8006182:	6927      	ldr	r7, [r4, #16]
 8006184:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006188:	68a3      	ldr	r3, [r4, #8]
 800618a:	6861      	ldr	r1, [r4, #4]
 800618c:	eb07 060a 	add.w	r6, r7, sl
 8006190:	42b3      	cmp	r3, r6
 8006192:	b085      	sub	sp, #20
 8006194:	bfb8      	it	lt
 8006196:	3101      	addlt	r1, #1
 8006198:	f7ff fed8 	bl	8005f4c <_Balloc>
 800619c:	b930      	cbnz	r0, 80061ac <__multiply+0x44>
 800619e:	4602      	mov	r2, r0
 80061a0:	4b44      	ldr	r3, [pc, #272]	; (80062b4 <__multiply+0x14c>)
 80061a2:	4845      	ldr	r0, [pc, #276]	; (80062b8 <__multiply+0x150>)
 80061a4:	f240 115d 	movw	r1, #349	; 0x15d
 80061a8:	f000 fdca 	bl	8006d40 <__assert_func>
 80061ac:	f100 0514 	add.w	r5, r0, #20
 80061b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061b4:	462b      	mov	r3, r5
 80061b6:	2200      	movs	r2, #0
 80061b8:	4543      	cmp	r3, r8
 80061ba:	d321      	bcc.n	8006200 <__multiply+0x98>
 80061bc:	f104 0314 	add.w	r3, r4, #20
 80061c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80061c4:	f109 0314 	add.w	r3, r9, #20
 80061c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80061cc:	9202      	str	r2, [sp, #8]
 80061ce:	1b3a      	subs	r2, r7, r4
 80061d0:	3a15      	subs	r2, #21
 80061d2:	f022 0203 	bic.w	r2, r2, #3
 80061d6:	3204      	adds	r2, #4
 80061d8:	f104 0115 	add.w	r1, r4, #21
 80061dc:	428f      	cmp	r7, r1
 80061de:	bf38      	it	cc
 80061e0:	2204      	movcc	r2, #4
 80061e2:	9201      	str	r2, [sp, #4]
 80061e4:	9a02      	ldr	r2, [sp, #8]
 80061e6:	9303      	str	r3, [sp, #12]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d80c      	bhi.n	8006206 <__multiply+0x9e>
 80061ec:	2e00      	cmp	r6, #0
 80061ee:	dd03      	ble.n	80061f8 <__multiply+0x90>
 80061f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d05a      	beq.n	80062ae <__multiply+0x146>
 80061f8:	6106      	str	r6, [r0, #16]
 80061fa:	b005      	add	sp, #20
 80061fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006200:	f843 2b04 	str.w	r2, [r3], #4
 8006204:	e7d8      	b.n	80061b8 <__multiply+0x50>
 8006206:	f8b3 a000 	ldrh.w	sl, [r3]
 800620a:	f1ba 0f00 	cmp.w	sl, #0
 800620e:	d024      	beq.n	800625a <__multiply+0xf2>
 8006210:	f104 0e14 	add.w	lr, r4, #20
 8006214:	46a9      	mov	r9, r5
 8006216:	f04f 0c00 	mov.w	ip, #0
 800621a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800621e:	f8d9 1000 	ldr.w	r1, [r9]
 8006222:	fa1f fb82 	uxth.w	fp, r2
 8006226:	b289      	uxth	r1, r1
 8006228:	fb0a 110b 	mla	r1, sl, fp, r1
 800622c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006230:	f8d9 2000 	ldr.w	r2, [r9]
 8006234:	4461      	add	r1, ip
 8006236:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800623a:	fb0a c20b 	mla	r2, sl, fp, ip
 800623e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006242:	b289      	uxth	r1, r1
 8006244:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006248:	4577      	cmp	r7, lr
 800624a:	f849 1b04 	str.w	r1, [r9], #4
 800624e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006252:	d8e2      	bhi.n	800621a <__multiply+0xb2>
 8006254:	9a01      	ldr	r2, [sp, #4]
 8006256:	f845 c002 	str.w	ip, [r5, r2]
 800625a:	9a03      	ldr	r2, [sp, #12]
 800625c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006260:	3304      	adds	r3, #4
 8006262:	f1b9 0f00 	cmp.w	r9, #0
 8006266:	d020      	beq.n	80062aa <__multiply+0x142>
 8006268:	6829      	ldr	r1, [r5, #0]
 800626a:	f104 0c14 	add.w	ip, r4, #20
 800626e:	46ae      	mov	lr, r5
 8006270:	f04f 0a00 	mov.w	sl, #0
 8006274:	f8bc b000 	ldrh.w	fp, [ip]
 8006278:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800627c:	fb09 220b 	mla	r2, r9, fp, r2
 8006280:	4492      	add	sl, r2
 8006282:	b289      	uxth	r1, r1
 8006284:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006288:	f84e 1b04 	str.w	r1, [lr], #4
 800628c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006290:	f8be 1000 	ldrh.w	r1, [lr]
 8006294:	0c12      	lsrs	r2, r2, #16
 8006296:	fb09 1102 	mla	r1, r9, r2, r1
 800629a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800629e:	4567      	cmp	r7, ip
 80062a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80062a4:	d8e6      	bhi.n	8006274 <__multiply+0x10c>
 80062a6:	9a01      	ldr	r2, [sp, #4]
 80062a8:	50a9      	str	r1, [r5, r2]
 80062aa:	3504      	adds	r5, #4
 80062ac:	e79a      	b.n	80061e4 <__multiply+0x7c>
 80062ae:	3e01      	subs	r6, #1
 80062b0:	e79c      	b.n	80061ec <__multiply+0x84>
 80062b2:	bf00      	nop
 80062b4:	080072b3 	.word	0x080072b3
 80062b8:	08007324 	.word	0x08007324

080062bc <__pow5mult>:
 80062bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c0:	4615      	mov	r5, r2
 80062c2:	f012 0203 	ands.w	r2, r2, #3
 80062c6:	4606      	mov	r6, r0
 80062c8:	460f      	mov	r7, r1
 80062ca:	d007      	beq.n	80062dc <__pow5mult+0x20>
 80062cc:	4c25      	ldr	r4, [pc, #148]	; (8006364 <__pow5mult+0xa8>)
 80062ce:	3a01      	subs	r2, #1
 80062d0:	2300      	movs	r3, #0
 80062d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062d6:	f7ff fe9b 	bl	8006010 <__multadd>
 80062da:	4607      	mov	r7, r0
 80062dc:	10ad      	asrs	r5, r5, #2
 80062de:	d03d      	beq.n	800635c <__pow5mult+0xa0>
 80062e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062e2:	b97c      	cbnz	r4, 8006304 <__pow5mult+0x48>
 80062e4:	2010      	movs	r0, #16
 80062e6:	f7ff fe1b 	bl	8005f20 <malloc>
 80062ea:	4602      	mov	r2, r0
 80062ec:	6270      	str	r0, [r6, #36]	; 0x24
 80062ee:	b928      	cbnz	r0, 80062fc <__pow5mult+0x40>
 80062f0:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <__pow5mult+0xac>)
 80062f2:	481e      	ldr	r0, [pc, #120]	; (800636c <__pow5mult+0xb0>)
 80062f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80062f8:	f000 fd22 	bl	8006d40 <__assert_func>
 80062fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006300:	6004      	str	r4, [r0, #0]
 8006302:	60c4      	str	r4, [r0, #12]
 8006304:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006308:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800630c:	b94c      	cbnz	r4, 8006322 <__pow5mult+0x66>
 800630e:	f240 2171 	movw	r1, #625	; 0x271
 8006312:	4630      	mov	r0, r6
 8006314:	f7ff ff12 	bl	800613c <__i2b>
 8006318:	2300      	movs	r3, #0
 800631a:	f8c8 0008 	str.w	r0, [r8, #8]
 800631e:	4604      	mov	r4, r0
 8006320:	6003      	str	r3, [r0, #0]
 8006322:	f04f 0900 	mov.w	r9, #0
 8006326:	07eb      	lsls	r3, r5, #31
 8006328:	d50a      	bpl.n	8006340 <__pow5mult+0x84>
 800632a:	4639      	mov	r1, r7
 800632c:	4622      	mov	r2, r4
 800632e:	4630      	mov	r0, r6
 8006330:	f7ff ff1a 	bl	8006168 <__multiply>
 8006334:	4639      	mov	r1, r7
 8006336:	4680      	mov	r8, r0
 8006338:	4630      	mov	r0, r6
 800633a:	f7ff fe47 	bl	8005fcc <_Bfree>
 800633e:	4647      	mov	r7, r8
 8006340:	106d      	asrs	r5, r5, #1
 8006342:	d00b      	beq.n	800635c <__pow5mult+0xa0>
 8006344:	6820      	ldr	r0, [r4, #0]
 8006346:	b938      	cbnz	r0, 8006358 <__pow5mult+0x9c>
 8006348:	4622      	mov	r2, r4
 800634a:	4621      	mov	r1, r4
 800634c:	4630      	mov	r0, r6
 800634e:	f7ff ff0b 	bl	8006168 <__multiply>
 8006352:	6020      	str	r0, [r4, #0]
 8006354:	f8c0 9000 	str.w	r9, [r0]
 8006358:	4604      	mov	r4, r0
 800635a:	e7e4      	b.n	8006326 <__pow5mult+0x6a>
 800635c:	4638      	mov	r0, r7
 800635e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006362:	bf00      	nop
 8006364:	08007470 	.word	0x08007470
 8006368:	08007241 	.word	0x08007241
 800636c:	08007324 	.word	0x08007324

08006370 <__lshift>:
 8006370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006374:	460c      	mov	r4, r1
 8006376:	6849      	ldr	r1, [r1, #4]
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	4607      	mov	r7, r0
 8006382:	4691      	mov	r9, r2
 8006384:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006388:	f108 0601 	add.w	r6, r8, #1
 800638c:	42b3      	cmp	r3, r6
 800638e:	db0b      	blt.n	80063a8 <__lshift+0x38>
 8006390:	4638      	mov	r0, r7
 8006392:	f7ff fddb 	bl	8005f4c <_Balloc>
 8006396:	4605      	mov	r5, r0
 8006398:	b948      	cbnz	r0, 80063ae <__lshift+0x3e>
 800639a:	4602      	mov	r2, r0
 800639c:	4b2a      	ldr	r3, [pc, #168]	; (8006448 <__lshift+0xd8>)
 800639e:	482b      	ldr	r0, [pc, #172]	; (800644c <__lshift+0xdc>)
 80063a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80063a4:	f000 fccc 	bl	8006d40 <__assert_func>
 80063a8:	3101      	adds	r1, #1
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	e7ee      	b.n	800638c <__lshift+0x1c>
 80063ae:	2300      	movs	r3, #0
 80063b0:	f100 0114 	add.w	r1, r0, #20
 80063b4:	f100 0210 	add.w	r2, r0, #16
 80063b8:	4618      	mov	r0, r3
 80063ba:	4553      	cmp	r3, sl
 80063bc:	db37      	blt.n	800642e <__lshift+0xbe>
 80063be:	6920      	ldr	r0, [r4, #16]
 80063c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063c4:	f104 0314 	add.w	r3, r4, #20
 80063c8:	f019 091f 	ands.w	r9, r9, #31
 80063cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80063d4:	d02f      	beq.n	8006436 <__lshift+0xc6>
 80063d6:	f1c9 0e20 	rsb	lr, r9, #32
 80063da:	468a      	mov	sl, r1
 80063dc:	f04f 0c00 	mov.w	ip, #0
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	fa02 f209 	lsl.w	r2, r2, r9
 80063e6:	ea42 020c 	orr.w	r2, r2, ip
 80063ea:	f84a 2b04 	str.w	r2, [sl], #4
 80063ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80063f2:	4298      	cmp	r0, r3
 80063f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80063f8:	d8f2      	bhi.n	80063e0 <__lshift+0x70>
 80063fa:	1b03      	subs	r3, r0, r4
 80063fc:	3b15      	subs	r3, #21
 80063fe:	f023 0303 	bic.w	r3, r3, #3
 8006402:	3304      	adds	r3, #4
 8006404:	f104 0215 	add.w	r2, r4, #21
 8006408:	4290      	cmp	r0, r2
 800640a:	bf38      	it	cc
 800640c:	2304      	movcc	r3, #4
 800640e:	f841 c003 	str.w	ip, [r1, r3]
 8006412:	f1bc 0f00 	cmp.w	ip, #0
 8006416:	d001      	beq.n	800641c <__lshift+0xac>
 8006418:	f108 0602 	add.w	r6, r8, #2
 800641c:	3e01      	subs	r6, #1
 800641e:	4638      	mov	r0, r7
 8006420:	612e      	str	r6, [r5, #16]
 8006422:	4621      	mov	r1, r4
 8006424:	f7ff fdd2 	bl	8005fcc <_Bfree>
 8006428:	4628      	mov	r0, r5
 800642a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006432:	3301      	adds	r3, #1
 8006434:	e7c1      	b.n	80063ba <__lshift+0x4a>
 8006436:	3904      	subs	r1, #4
 8006438:	f853 2b04 	ldr.w	r2, [r3], #4
 800643c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006440:	4298      	cmp	r0, r3
 8006442:	d8f9      	bhi.n	8006438 <__lshift+0xc8>
 8006444:	e7ea      	b.n	800641c <__lshift+0xac>
 8006446:	bf00      	nop
 8006448:	080072b3 	.word	0x080072b3
 800644c:	08007324 	.word	0x08007324

08006450 <__mcmp>:
 8006450:	b530      	push	{r4, r5, lr}
 8006452:	6902      	ldr	r2, [r0, #16]
 8006454:	690c      	ldr	r4, [r1, #16]
 8006456:	1b12      	subs	r2, r2, r4
 8006458:	d10e      	bne.n	8006478 <__mcmp+0x28>
 800645a:	f100 0314 	add.w	r3, r0, #20
 800645e:	3114      	adds	r1, #20
 8006460:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006464:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006468:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800646c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006470:	42a5      	cmp	r5, r4
 8006472:	d003      	beq.n	800647c <__mcmp+0x2c>
 8006474:	d305      	bcc.n	8006482 <__mcmp+0x32>
 8006476:	2201      	movs	r2, #1
 8006478:	4610      	mov	r0, r2
 800647a:	bd30      	pop	{r4, r5, pc}
 800647c:	4283      	cmp	r3, r0
 800647e:	d3f3      	bcc.n	8006468 <__mcmp+0x18>
 8006480:	e7fa      	b.n	8006478 <__mcmp+0x28>
 8006482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006486:	e7f7      	b.n	8006478 <__mcmp+0x28>

08006488 <__mdiff>:
 8006488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	460c      	mov	r4, r1
 800648e:	4606      	mov	r6, r0
 8006490:	4611      	mov	r1, r2
 8006492:	4620      	mov	r0, r4
 8006494:	4690      	mov	r8, r2
 8006496:	f7ff ffdb 	bl	8006450 <__mcmp>
 800649a:	1e05      	subs	r5, r0, #0
 800649c:	d110      	bne.n	80064c0 <__mdiff+0x38>
 800649e:	4629      	mov	r1, r5
 80064a0:	4630      	mov	r0, r6
 80064a2:	f7ff fd53 	bl	8005f4c <_Balloc>
 80064a6:	b930      	cbnz	r0, 80064b6 <__mdiff+0x2e>
 80064a8:	4b3a      	ldr	r3, [pc, #232]	; (8006594 <__mdiff+0x10c>)
 80064aa:	4602      	mov	r2, r0
 80064ac:	f240 2132 	movw	r1, #562	; 0x232
 80064b0:	4839      	ldr	r0, [pc, #228]	; (8006598 <__mdiff+0x110>)
 80064b2:	f000 fc45 	bl	8006d40 <__assert_func>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c0:	bfa4      	itt	ge
 80064c2:	4643      	movge	r3, r8
 80064c4:	46a0      	movge	r8, r4
 80064c6:	4630      	mov	r0, r6
 80064c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064cc:	bfa6      	itte	ge
 80064ce:	461c      	movge	r4, r3
 80064d0:	2500      	movge	r5, #0
 80064d2:	2501      	movlt	r5, #1
 80064d4:	f7ff fd3a 	bl	8005f4c <_Balloc>
 80064d8:	b920      	cbnz	r0, 80064e4 <__mdiff+0x5c>
 80064da:	4b2e      	ldr	r3, [pc, #184]	; (8006594 <__mdiff+0x10c>)
 80064dc:	4602      	mov	r2, r0
 80064de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80064e2:	e7e5      	b.n	80064b0 <__mdiff+0x28>
 80064e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064e8:	6926      	ldr	r6, [r4, #16]
 80064ea:	60c5      	str	r5, [r0, #12]
 80064ec:	f104 0914 	add.w	r9, r4, #20
 80064f0:	f108 0514 	add.w	r5, r8, #20
 80064f4:	f100 0e14 	add.w	lr, r0, #20
 80064f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80064fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006500:	f108 0210 	add.w	r2, r8, #16
 8006504:	46f2      	mov	sl, lr
 8006506:	2100      	movs	r1, #0
 8006508:	f859 3b04 	ldr.w	r3, [r9], #4
 800650c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006510:	fa1f f883 	uxth.w	r8, r3
 8006514:	fa11 f18b 	uxtah	r1, r1, fp
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	eba1 0808 	sub.w	r8, r1, r8
 800651e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006522:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006526:	fa1f f888 	uxth.w	r8, r8
 800652a:	1419      	asrs	r1, r3, #16
 800652c:	454e      	cmp	r6, r9
 800652e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006532:	f84a 3b04 	str.w	r3, [sl], #4
 8006536:	d8e7      	bhi.n	8006508 <__mdiff+0x80>
 8006538:	1b33      	subs	r3, r6, r4
 800653a:	3b15      	subs	r3, #21
 800653c:	f023 0303 	bic.w	r3, r3, #3
 8006540:	3304      	adds	r3, #4
 8006542:	3415      	adds	r4, #21
 8006544:	42a6      	cmp	r6, r4
 8006546:	bf38      	it	cc
 8006548:	2304      	movcc	r3, #4
 800654a:	441d      	add	r5, r3
 800654c:	4473      	add	r3, lr
 800654e:	469e      	mov	lr, r3
 8006550:	462e      	mov	r6, r5
 8006552:	4566      	cmp	r6, ip
 8006554:	d30e      	bcc.n	8006574 <__mdiff+0xec>
 8006556:	f10c 0203 	add.w	r2, ip, #3
 800655a:	1b52      	subs	r2, r2, r5
 800655c:	f022 0203 	bic.w	r2, r2, #3
 8006560:	3d03      	subs	r5, #3
 8006562:	45ac      	cmp	ip, r5
 8006564:	bf38      	it	cc
 8006566:	2200      	movcc	r2, #0
 8006568:	441a      	add	r2, r3
 800656a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800656e:	b17b      	cbz	r3, 8006590 <__mdiff+0x108>
 8006570:	6107      	str	r7, [r0, #16]
 8006572:	e7a3      	b.n	80064bc <__mdiff+0x34>
 8006574:	f856 8b04 	ldr.w	r8, [r6], #4
 8006578:	fa11 f288 	uxtah	r2, r1, r8
 800657c:	1414      	asrs	r4, r2, #16
 800657e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006582:	b292      	uxth	r2, r2
 8006584:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006588:	f84e 2b04 	str.w	r2, [lr], #4
 800658c:	1421      	asrs	r1, r4, #16
 800658e:	e7e0      	b.n	8006552 <__mdiff+0xca>
 8006590:	3f01      	subs	r7, #1
 8006592:	e7ea      	b.n	800656a <__mdiff+0xe2>
 8006594:	080072b3 	.word	0x080072b3
 8006598:	08007324 	.word	0x08007324

0800659c <__d2b>:
 800659c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065a0:	4689      	mov	r9, r1
 80065a2:	2101      	movs	r1, #1
 80065a4:	ec57 6b10 	vmov	r6, r7, d0
 80065a8:	4690      	mov	r8, r2
 80065aa:	f7ff fccf 	bl	8005f4c <_Balloc>
 80065ae:	4604      	mov	r4, r0
 80065b0:	b930      	cbnz	r0, 80065c0 <__d2b+0x24>
 80065b2:	4602      	mov	r2, r0
 80065b4:	4b25      	ldr	r3, [pc, #148]	; (800664c <__d2b+0xb0>)
 80065b6:	4826      	ldr	r0, [pc, #152]	; (8006650 <__d2b+0xb4>)
 80065b8:	f240 310a 	movw	r1, #778	; 0x30a
 80065bc:	f000 fbc0 	bl	8006d40 <__assert_func>
 80065c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80065c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065c8:	bb35      	cbnz	r5, 8006618 <__d2b+0x7c>
 80065ca:	2e00      	cmp	r6, #0
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	d028      	beq.n	8006622 <__d2b+0x86>
 80065d0:	4668      	mov	r0, sp
 80065d2:	9600      	str	r6, [sp, #0]
 80065d4:	f7ff fd82 	bl	80060dc <__lo0bits>
 80065d8:	9900      	ldr	r1, [sp, #0]
 80065da:	b300      	cbz	r0, 800661e <__d2b+0x82>
 80065dc:	9a01      	ldr	r2, [sp, #4]
 80065de:	f1c0 0320 	rsb	r3, r0, #32
 80065e2:	fa02 f303 	lsl.w	r3, r2, r3
 80065e6:	430b      	orrs	r3, r1
 80065e8:	40c2      	lsrs	r2, r0
 80065ea:	6163      	str	r3, [r4, #20]
 80065ec:	9201      	str	r2, [sp, #4]
 80065ee:	9b01      	ldr	r3, [sp, #4]
 80065f0:	61a3      	str	r3, [r4, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bf14      	ite	ne
 80065f6:	2202      	movne	r2, #2
 80065f8:	2201      	moveq	r2, #1
 80065fa:	6122      	str	r2, [r4, #16]
 80065fc:	b1d5      	cbz	r5, 8006634 <__d2b+0x98>
 80065fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006602:	4405      	add	r5, r0
 8006604:	f8c9 5000 	str.w	r5, [r9]
 8006608:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800660c:	f8c8 0000 	str.w	r0, [r8]
 8006610:	4620      	mov	r0, r4
 8006612:	b003      	add	sp, #12
 8006614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800661c:	e7d5      	b.n	80065ca <__d2b+0x2e>
 800661e:	6161      	str	r1, [r4, #20]
 8006620:	e7e5      	b.n	80065ee <__d2b+0x52>
 8006622:	a801      	add	r0, sp, #4
 8006624:	f7ff fd5a 	bl	80060dc <__lo0bits>
 8006628:	9b01      	ldr	r3, [sp, #4]
 800662a:	6163      	str	r3, [r4, #20]
 800662c:	2201      	movs	r2, #1
 800662e:	6122      	str	r2, [r4, #16]
 8006630:	3020      	adds	r0, #32
 8006632:	e7e3      	b.n	80065fc <__d2b+0x60>
 8006634:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006638:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800663c:	f8c9 0000 	str.w	r0, [r9]
 8006640:	6918      	ldr	r0, [r3, #16]
 8006642:	f7ff fd2b 	bl	800609c <__hi0bits>
 8006646:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800664a:	e7df      	b.n	800660c <__d2b+0x70>
 800664c:	080072b3 	.word	0x080072b3
 8006650:	08007324 	.word	0x08007324

08006654 <_calloc_r>:
 8006654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006656:	fba1 2402 	umull	r2, r4, r1, r2
 800665a:	b94c      	cbnz	r4, 8006670 <_calloc_r+0x1c>
 800665c:	4611      	mov	r1, r2
 800665e:	9201      	str	r2, [sp, #4]
 8006660:	f000 f87a 	bl	8006758 <_malloc_r>
 8006664:	9a01      	ldr	r2, [sp, #4]
 8006666:	4605      	mov	r5, r0
 8006668:	b930      	cbnz	r0, 8006678 <_calloc_r+0x24>
 800666a:	4628      	mov	r0, r5
 800666c:	b003      	add	sp, #12
 800666e:	bd30      	pop	{r4, r5, pc}
 8006670:	220c      	movs	r2, #12
 8006672:	6002      	str	r2, [r0, #0]
 8006674:	2500      	movs	r5, #0
 8006676:	e7f8      	b.n	800666a <_calloc_r+0x16>
 8006678:	4621      	mov	r1, r4
 800667a:	f7fe f84f 	bl	800471c <memset>
 800667e:	e7f4      	b.n	800666a <_calloc_r+0x16>

08006680 <_free_r>:
 8006680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006682:	2900      	cmp	r1, #0
 8006684:	d044      	beq.n	8006710 <_free_r+0x90>
 8006686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800668a:	9001      	str	r0, [sp, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f1a1 0404 	sub.w	r4, r1, #4
 8006692:	bfb8      	it	lt
 8006694:	18e4      	addlt	r4, r4, r3
 8006696:	f000 fcdf 	bl	8007058 <__malloc_lock>
 800669a:	4a1e      	ldr	r2, [pc, #120]	; (8006714 <_free_r+0x94>)
 800669c:	9801      	ldr	r0, [sp, #4]
 800669e:	6813      	ldr	r3, [r2, #0]
 80066a0:	b933      	cbnz	r3, 80066b0 <_free_r+0x30>
 80066a2:	6063      	str	r3, [r4, #4]
 80066a4:	6014      	str	r4, [r2, #0]
 80066a6:	b003      	add	sp, #12
 80066a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066ac:	f000 bcda 	b.w	8007064 <__malloc_unlock>
 80066b0:	42a3      	cmp	r3, r4
 80066b2:	d908      	bls.n	80066c6 <_free_r+0x46>
 80066b4:	6825      	ldr	r5, [r4, #0]
 80066b6:	1961      	adds	r1, r4, r5
 80066b8:	428b      	cmp	r3, r1
 80066ba:	bf01      	itttt	eq
 80066bc:	6819      	ldreq	r1, [r3, #0]
 80066be:	685b      	ldreq	r3, [r3, #4]
 80066c0:	1949      	addeq	r1, r1, r5
 80066c2:	6021      	streq	r1, [r4, #0]
 80066c4:	e7ed      	b.n	80066a2 <_free_r+0x22>
 80066c6:	461a      	mov	r2, r3
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	b10b      	cbz	r3, 80066d0 <_free_r+0x50>
 80066cc:	42a3      	cmp	r3, r4
 80066ce:	d9fa      	bls.n	80066c6 <_free_r+0x46>
 80066d0:	6811      	ldr	r1, [r2, #0]
 80066d2:	1855      	adds	r5, r2, r1
 80066d4:	42a5      	cmp	r5, r4
 80066d6:	d10b      	bne.n	80066f0 <_free_r+0x70>
 80066d8:	6824      	ldr	r4, [r4, #0]
 80066da:	4421      	add	r1, r4
 80066dc:	1854      	adds	r4, r2, r1
 80066de:	42a3      	cmp	r3, r4
 80066e0:	6011      	str	r1, [r2, #0]
 80066e2:	d1e0      	bne.n	80066a6 <_free_r+0x26>
 80066e4:	681c      	ldr	r4, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	6053      	str	r3, [r2, #4]
 80066ea:	4421      	add	r1, r4
 80066ec:	6011      	str	r1, [r2, #0]
 80066ee:	e7da      	b.n	80066a6 <_free_r+0x26>
 80066f0:	d902      	bls.n	80066f8 <_free_r+0x78>
 80066f2:	230c      	movs	r3, #12
 80066f4:	6003      	str	r3, [r0, #0]
 80066f6:	e7d6      	b.n	80066a6 <_free_r+0x26>
 80066f8:	6825      	ldr	r5, [r4, #0]
 80066fa:	1961      	adds	r1, r4, r5
 80066fc:	428b      	cmp	r3, r1
 80066fe:	bf04      	itt	eq
 8006700:	6819      	ldreq	r1, [r3, #0]
 8006702:	685b      	ldreq	r3, [r3, #4]
 8006704:	6063      	str	r3, [r4, #4]
 8006706:	bf04      	itt	eq
 8006708:	1949      	addeq	r1, r1, r5
 800670a:	6021      	streq	r1, [r4, #0]
 800670c:	6054      	str	r4, [r2, #4]
 800670e:	e7ca      	b.n	80066a6 <_free_r+0x26>
 8006710:	b003      	add	sp, #12
 8006712:	bd30      	pop	{r4, r5, pc}
 8006714:	20000354 	.word	0x20000354

08006718 <sbrk_aligned>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4e0e      	ldr	r6, [pc, #56]	; (8006754 <sbrk_aligned+0x3c>)
 800671c:	460c      	mov	r4, r1
 800671e:	6831      	ldr	r1, [r6, #0]
 8006720:	4605      	mov	r5, r0
 8006722:	b911      	cbnz	r1, 800672a <sbrk_aligned+0x12>
 8006724:	f000 f9e6 	bl	8006af4 <_sbrk_r>
 8006728:	6030      	str	r0, [r6, #0]
 800672a:	4621      	mov	r1, r4
 800672c:	4628      	mov	r0, r5
 800672e:	f000 f9e1 	bl	8006af4 <_sbrk_r>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	d00a      	beq.n	800674c <sbrk_aligned+0x34>
 8006736:	1cc4      	adds	r4, r0, #3
 8006738:	f024 0403 	bic.w	r4, r4, #3
 800673c:	42a0      	cmp	r0, r4
 800673e:	d007      	beq.n	8006750 <sbrk_aligned+0x38>
 8006740:	1a21      	subs	r1, r4, r0
 8006742:	4628      	mov	r0, r5
 8006744:	f000 f9d6 	bl	8006af4 <_sbrk_r>
 8006748:	3001      	adds	r0, #1
 800674a:	d101      	bne.n	8006750 <sbrk_aligned+0x38>
 800674c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006750:	4620      	mov	r0, r4
 8006752:	bd70      	pop	{r4, r5, r6, pc}
 8006754:	20000358 	.word	0x20000358

08006758 <_malloc_r>:
 8006758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675c:	1ccd      	adds	r5, r1, #3
 800675e:	f025 0503 	bic.w	r5, r5, #3
 8006762:	3508      	adds	r5, #8
 8006764:	2d0c      	cmp	r5, #12
 8006766:	bf38      	it	cc
 8006768:	250c      	movcc	r5, #12
 800676a:	2d00      	cmp	r5, #0
 800676c:	4607      	mov	r7, r0
 800676e:	db01      	blt.n	8006774 <_malloc_r+0x1c>
 8006770:	42a9      	cmp	r1, r5
 8006772:	d905      	bls.n	8006780 <_malloc_r+0x28>
 8006774:	230c      	movs	r3, #12
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	2600      	movs	r6, #0
 800677a:	4630      	mov	r0, r6
 800677c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006780:	4e2e      	ldr	r6, [pc, #184]	; (800683c <_malloc_r+0xe4>)
 8006782:	f000 fc69 	bl	8007058 <__malloc_lock>
 8006786:	6833      	ldr	r3, [r6, #0]
 8006788:	461c      	mov	r4, r3
 800678a:	bb34      	cbnz	r4, 80067da <_malloc_r+0x82>
 800678c:	4629      	mov	r1, r5
 800678e:	4638      	mov	r0, r7
 8006790:	f7ff ffc2 	bl	8006718 <sbrk_aligned>
 8006794:	1c43      	adds	r3, r0, #1
 8006796:	4604      	mov	r4, r0
 8006798:	d14d      	bne.n	8006836 <_malloc_r+0xde>
 800679a:	6834      	ldr	r4, [r6, #0]
 800679c:	4626      	mov	r6, r4
 800679e:	2e00      	cmp	r6, #0
 80067a0:	d140      	bne.n	8006824 <_malloc_r+0xcc>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	4631      	mov	r1, r6
 80067a6:	4638      	mov	r0, r7
 80067a8:	eb04 0803 	add.w	r8, r4, r3
 80067ac:	f000 f9a2 	bl	8006af4 <_sbrk_r>
 80067b0:	4580      	cmp	r8, r0
 80067b2:	d13a      	bne.n	800682a <_malloc_r+0xd2>
 80067b4:	6821      	ldr	r1, [r4, #0]
 80067b6:	3503      	adds	r5, #3
 80067b8:	1a6d      	subs	r5, r5, r1
 80067ba:	f025 0503 	bic.w	r5, r5, #3
 80067be:	3508      	adds	r5, #8
 80067c0:	2d0c      	cmp	r5, #12
 80067c2:	bf38      	it	cc
 80067c4:	250c      	movcc	r5, #12
 80067c6:	4629      	mov	r1, r5
 80067c8:	4638      	mov	r0, r7
 80067ca:	f7ff ffa5 	bl	8006718 <sbrk_aligned>
 80067ce:	3001      	adds	r0, #1
 80067d0:	d02b      	beq.n	800682a <_malloc_r+0xd2>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	442b      	add	r3, r5
 80067d6:	6023      	str	r3, [r4, #0]
 80067d8:	e00e      	b.n	80067f8 <_malloc_r+0xa0>
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	1b52      	subs	r2, r2, r5
 80067de:	d41e      	bmi.n	800681e <_malloc_r+0xc6>
 80067e0:	2a0b      	cmp	r2, #11
 80067e2:	d916      	bls.n	8006812 <_malloc_r+0xba>
 80067e4:	1961      	adds	r1, r4, r5
 80067e6:	42a3      	cmp	r3, r4
 80067e8:	6025      	str	r5, [r4, #0]
 80067ea:	bf18      	it	ne
 80067ec:	6059      	strne	r1, [r3, #4]
 80067ee:	6863      	ldr	r3, [r4, #4]
 80067f0:	bf08      	it	eq
 80067f2:	6031      	streq	r1, [r6, #0]
 80067f4:	5162      	str	r2, [r4, r5]
 80067f6:	604b      	str	r3, [r1, #4]
 80067f8:	4638      	mov	r0, r7
 80067fa:	f104 060b 	add.w	r6, r4, #11
 80067fe:	f000 fc31 	bl	8007064 <__malloc_unlock>
 8006802:	f026 0607 	bic.w	r6, r6, #7
 8006806:	1d23      	adds	r3, r4, #4
 8006808:	1af2      	subs	r2, r6, r3
 800680a:	d0b6      	beq.n	800677a <_malloc_r+0x22>
 800680c:	1b9b      	subs	r3, r3, r6
 800680e:	50a3      	str	r3, [r4, r2]
 8006810:	e7b3      	b.n	800677a <_malloc_r+0x22>
 8006812:	6862      	ldr	r2, [r4, #4]
 8006814:	42a3      	cmp	r3, r4
 8006816:	bf0c      	ite	eq
 8006818:	6032      	streq	r2, [r6, #0]
 800681a:	605a      	strne	r2, [r3, #4]
 800681c:	e7ec      	b.n	80067f8 <_malloc_r+0xa0>
 800681e:	4623      	mov	r3, r4
 8006820:	6864      	ldr	r4, [r4, #4]
 8006822:	e7b2      	b.n	800678a <_malloc_r+0x32>
 8006824:	4634      	mov	r4, r6
 8006826:	6876      	ldr	r6, [r6, #4]
 8006828:	e7b9      	b.n	800679e <_malloc_r+0x46>
 800682a:	230c      	movs	r3, #12
 800682c:	603b      	str	r3, [r7, #0]
 800682e:	4638      	mov	r0, r7
 8006830:	f000 fc18 	bl	8007064 <__malloc_unlock>
 8006834:	e7a1      	b.n	800677a <_malloc_r+0x22>
 8006836:	6025      	str	r5, [r4, #0]
 8006838:	e7de      	b.n	80067f8 <_malloc_r+0xa0>
 800683a:	bf00      	nop
 800683c:	20000354 	.word	0x20000354

08006840 <__sfputc_r>:
 8006840:	6893      	ldr	r3, [r2, #8]
 8006842:	3b01      	subs	r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	b410      	push	{r4}
 8006848:	6093      	str	r3, [r2, #8]
 800684a:	da08      	bge.n	800685e <__sfputc_r+0x1e>
 800684c:	6994      	ldr	r4, [r2, #24]
 800684e:	42a3      	cmp	r3, r4
 8006850:	db01      	blt.n	8006856 <__sfputc_r+0x16>
 8006852:	290a      	cmp	r1, #10
 8006854:	d103      	bne.n	800685e <__sfputc_r+0x1e>
 8006856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800685a:	f000 b99f 	b.w	8006b9c <__swbuf_r>
 800685e:	6813      	ldr	r3, [r2, #0]
 8006860:	1c58      	adds	r0, r3, #1
 8006862:	6010      	str	r0, [r2, #0]
 8006864:	7019      	strb	r1, [r3, #0]
 8006866:	4608      	mov	r0, r1
 8006868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800686c:	4770      	bx	lr

0800686e <__sfputs_r>:
 800686e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006870:	4606      	mov	r6, r0
 8006872:	460f      	mov	r7, r1
 8006874:	4614      	mov	r4, r2
 8006876:	18d5      	adds	r5, r2, r3
 8006878:	42ac      	cmp	r4, r5
 800687a:	d101      	bne.n	8006880 <__sfputs_r+0x12>
 800687c:	2000      	movs	r0, #0
 800687e:	e007      	b.n	8006890 <__sfputs_r+0x22>
 8006880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006884:	463a      	mov	r2, r7
 8006886:	4630      	mov	r0, r6
 8006888:	f7ff ffda 	bl	8006840 <__sfputc_r>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	d1f3      	bne.n	8006878 <__sfputs_r+0xa>
 8006890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006894 <_vfiprintf_r>:
 8006894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006898:	460d      	mov	r5, r1
 800689a:	b09d      	sub	sp, #116	; 0x74
 800689c:	4614      	mov	r4, r2
 800689e:	4698      	mov	r8, r3
 80068a0:	4606      	mov	r6, r0
 80068a2:	b118      	cbz	r0, 80068ac <_vfiprintf_r+0x18>
 80068a4:	6983      	ldr	r3, [r0, #24]
 80068a6:	b90b      	cbnz	r3, 80068ac <_vfiprintf_r+0x18>
 80068a8:	f7ff fa94 	bl	8005dd4 <__sinit>
 80068ac:	4b89      	ldr	r3, [pc, #548]	; (8006ad4 <_vfiprintf_r+0x240>)
 80068ae:	429d      	cmp	r5, r3
 80068b0:	d11b      	bne.n	80068ea <_vfiprintf_r+0x56>
 80068b2:	6875      	ldr	r5, [r6, #4]
 80068b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068b6:	07d9      	lsls	r1, r3, #31
 80068b8:	d405      	bmi.n	80068c6 <_vfiprintf_r+0x32>
 80068ba:	89ab      	ldrh	r3, [r5, #12]
 80068bc:	059a      	lsls	r2, r3, #22
 80068be:	d402      	bmi.n	80068c6 <_vfiprintf_r+0x32>
 80068c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068c2:	f7ff fb2a 	bl	8005f1a <__retarget_lock_acquire_recursive>
 80068c6:	89ab      	ldrh	r3, [r5, #12]
 80068c8:	071b      	lsls	r3, r3, #28
 80068ca:	d501      	bpl.n	80068d0 <_vfiprintf_r+0x3c>
 80068cc:	692b      	ldr	r3, [r5, #16]
 80068ce:	b9eb      	cbnz	r3, 800690c <_vfiprintf_r+0x78>
 80068d0:	4629      	mov	r1, r5
 80068d2:	4630      	mov	r0, r6
 80068d4:	f000 f9c6 	bl	8006c64 <__swsetup_r>
 80068d8:	b1c0      	cbz	r0, 800690c <_vfiprintf_r+0x78>
 80068da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068dc:	07dc      	lsls	r4, r3, #31
 80068de:	d50e      	bpl.n	80068fe <_vfiprintf_r+0x6a>
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068e4:	b01d      	add	sp, #116	; 0x74
 80068e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ea:	4b7b      	ldr	r3, [pc, #492]	; (8006ad8 <_vfiprintf_r+0x244>)
 80068ec:	429d      	cmp	r5, r3
 80068ee:	d101      	bne.n	80068f4 <_vfiprintf_r+0x60>
 80068f0:	68b5      	ldr	r5, [r6, #8]
 80068f2:	e7df      	b.n	80068b4 <_vfiprintf_r+0x20>
 80068f4:	4b79      	ldr	r3, [pc, #484]	; (8006adc <_vfiprintf_r+0x248>)
 80068f6:	429d      	cmp	r5, r3
 80068f8:	bf08      	it	eq
 80068fa:	68f5      	ldreq	r5, [r6, #12]
 80068fc:	e7da      	b.n	80068b4 <_vfiprintf_r+0x20>
 80068fe:	89ab      	ldrh	r3, [r5, #12]
 8006900:	0598      	lsls	r0, r3, #22
 8006902:	d4ed      	bmi.n	80068e0 <_vfiprintf_r+0x4c>
 8006904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006906:	f7ff fb09 	bl	8005f1c <__retarget_lock_release_recursive>
 800690a:	e7e9      	b.n	80068e0 <_vfiprintf_r+0x4c>
 800690c:	2300      	movs	r3, #0
 800690e:	9309      	str	r3, [sp, #36]	; 0x24
 8006910:	2320      	movs	r3, #32
 8006912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006916:	f8cd 800c 	str.w	r8, [sp, #12]
 800691a:	2330      	movs	r3, #48	; 0x30
 800691c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ae0 <_vfiprintf_r+0x24c>
 8006920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006924:	f04f 0901 	mov.w	r9, #1
 8006928:	4623      	mov	r3, r4
 800692a:	469a      	mov	sl, r3
 800692c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006930:	b10a      	cbz	r2, 8006936 <_vfiprintf_r+0xa2>
 8006932:	2a25      	cmp	r2, #37	; 0x25
 8006934:	d1f9      	bne.n	800692a <_vfiprintf_r+0x96>
 8006936:	ebba 0b04 	subs.w	fp, sl, r4
 800693a:	d00b      	beq.n	8006954 <_vfiprintf_r+0xc0>
 800693c:	465b      	mov	r3, fp
 800693e:	4622      	mov	r2, r4
 8006940:	4629      	mov	r1, r5
 8006942:	4630      	mov	r0, r6
 8006944:	f7ff ff93 	bl	800686e <__sfputs_r>
 8006948:	3001      	adds	r0, #1
 800694a:	f000 80aa 	beq.w	8006aa2 <_vfiprintf_r+0x20e>
 800694e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006950:	445a      	add	r2, fp
 8006952:	9209      	str	r2, [sp, #36]	; 0x24
 8006954:	f89a 3000 	ldrb.w	r3, [sl]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 80a2 	beq.w	8006aa2 <_vfiprintf_r+0x20e>
 800695e:	2300      	movs	r3, #0
 8006960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006968:	f10a 0a01 	add.w	sl, sl, #1
 800696c:	9304      	str	r3, [sp, #16]
 800696e:	9307      	str	r3, [sp, #28]
 8006970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006974:	931a      	str	r3, [sp, #104]	; 0x68
 8006976:	4654      	mov	r4, sl
 8006978:	2205      	movs	r2, #5
 800697a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800697e:	4858      	ldr	r0, [pc, #352]	; (8006ae0 <_vfiprintf_r+0x24c>)
 8006980:	f7f9 fc2e 	bl	80001e0 <memchr>
 8006984:	9a04      	ldr	r2, [sp, #16]
 8006986:	b9d8      	cbnz	r0, 80069c0 <_vfiprintf_r+0x12c>
 8006988:	06d1      	lsls	r1, r2, #27
 800698a:	bf44      	itt	mi
 800698c:	2320      	movmi	r3, #32
 800698e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006992:	0713      	lsls	r3, r2, #28
 8006994:	bf44      	itt	mi
 8006996:	232b      	movmi	r3, #43	; 0x2b
 8006998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800699c:	f89a 3000 	ldrb.w	r3, [sl]
 80069a0:	2b2a      	cmp	r3, #42	; 0x2a
 80069a2:	d015      	beq.n	80069d0 <_vfiprintf_r+0x13c>
 80069a4:	9a07      	ldr	r2, [sp, #28]
 80069a6:	4654      	mov	r4, sl
 80069a8:	2000      	movs	r0, #0
 80069aa:	f04f 0c0a 	mov.w	ip, #10
 80069ae:	4621      	mov	r1, r4
 80069b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069b4:	3b30      	subs	r3, #48	; 0x30
 80069b6:	2b09      	cmp	r3, #9
 80069b8:	d94e      	bls.n	8006a58 <_vfiprintf_r+0x1c4>
 80069ba:	b1b0      	cbz	r0, 80069ea <_vfiprintf_r+0x156>
 80069bc:	9207      	str	r2, [sp, #28]
 80069be:	e014      	b.n	80069ea <_vfiprintf_r+0x156>
 80069c0:	eba0 0308 	sub.w	r3, r0, r8
 80069c4:	fa09 f303 	lsl.w	r3, r9, r3
 80069c8:	4313      	orrs	r3, r2
 80069ca:	9304      	str	r3, [sp, #16]
 80069cc:	46a2      	mov	sl, r4
 80069ce:	e7d2      	b.n	8006976 <_vfiprintf_r+0xe2>
 80069d0:	9b03      	ldr	r3, [sp, #12]
 80069d2:	1d19      	adds	r1, r3, #4
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	9103      	str	r1, [sp, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bfbb      	ittet	lt
 80069dc:	425b      	neglt	r3, r3
 80069de:	f042 0202 	orrlt.w	r2, r2, #2
 80069e2:	9307      	strge	r3, [sp, #28]
 80069e4:	9307      	strlt	r3, [sp, #28]
 80069e6:	bfb8      	it	lt
 80069e8:	9204      	strlt	r2, [sp, #16]
 80069ea:	7823      	ldrb	r3, [r4, #0]
 80069ec:	2b2e      	cmp	r3, #46	; 0x2e
 80069ee:	d10c      	bne.n	8006a0a <_vfiprintf_r+0x176>
 80069f0:	7863      	ldrb	r3, [r4, #1]
 80069f2:	2b2a      	cmp	r3, #42	; 0x2a
 80069f4:	d135      	bne.n	8006a62 <_vfiprintf_r+0x1ce>
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	1d1a      	adds	r2, r3, #4
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	9203      	str	r2, [sp, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bfb8      	it	lt
 8006a02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006a06:	3402      	adds	r4, #2
 8006a08:	9305      	str	r3, [sp, #20]
 8006a0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006af0 <_vfiprintf_r+0x25c>
 8006a0e:	7821      	ldrb	r1, [r4, #0]
 8006a10:	2203      	movs	r2, #3
 8006a12:	4650      	mov	r0, sl
 8006a14:	f7f9 fbe4 	bl	80001e0 <memchr>
 8006a18:	b140      	cbz	r0, 8006a2c <_vfiprintf_r+0x198>
 8006a1a:	2340      	movs	r3, #64	; 0x40
 8006a1c:	eba0 000a 	sub.w	r0, r0, sl
 8006a20:	fa03 f000 	lsl.w	r0, r3, r0
 8006a24:	9b04      	ldr	r3, [sp, #16]
 8006a26:	4303      	orrs	r3, r0
 8006a28:	3401      	adds	r4, #1
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a30:	482c      	ldr	r0, [pc, #176]	; (8006ae4 <_vfiprintf_r+0x250>)
 8006a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a36:	2206      	movs	r2, #6
 8006a38:	f7f9 fbd2 	bl	80001e0 <memchr>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d03f      	beq.n	8006ac0 <_vfiprintf_r+0x22c>
 8006a40:	4b29      	ldr	r3, [pc, #164]	; (8006ae8 <_vfiprintf_r+0x254>)
 8006a42:	bb1b      	cbnz	r3, 8006a8c <_vfiprintf_r+0x1f8>
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	3307      	adds	r3, #7
 8006a48:	f023 0307 	bic.w	r3, r3, #7
 8006a4c:	3308      	adds	r3, #8
 8006a4e:	9303      	str	r3, [sp, #12]
 8006a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a52:	443b      	add	r3, r7
 8006a54:	9309      	str	r3, [sp, #36]	; 0x24
 8006a56:	e767      	b.n	8006928 <_vfiprintf_r+0x94>
 8006a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	2001      	movs	r0, #1
 8006a60:	e7a5      	b.n	80069ae <_vfiprintf_r+0x11a>
 8006a62:	2300      	movs	r3, #0
 8006a64:	3401      	adds	r4, #1
 8006a66:	9305      	str	r3, [sp, #20]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	f04f 0c0a 	mov.w	ip, #10
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a74:	3a30      	subs	r2, #48	; 0x30
 8006a76:	2a09      	cmp	r2, #9
 8006a78:	d903      	bls.n	8006a82 <_vfiprintf_r+0x1ee>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0c5      	beq.n	8006a0a <_vfiprintf_r+0x176>
 8006a7e:	9105      	str	r1, [sp, #20]
 8006a80:	e7c3      	b.n	8006a0a <_vfiprintf_r+0x176>
 8006a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a86:	4604      	mov	r4, r0
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e7f0      	b.n	8006a6e <_vfiprintf_r+0x1da>
 8006a8c:	ab03      	add	r3, sp, #12
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	462a      	mov	r2, r5
 8006a92:	4b16      	ldr	r3, [pc, #88]	; (8006aec <_vfiprintf_r+0x258>)
 8006a94:	a904      	add	r1, sp, #16
 8006a96:	4630      	mov	r0, r6
 8006a98:	f7fd fee8 	bl	800486c <_printf_float>
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	1c78      	adds	r0, r7, #1
 8006aa0:	d1d6      	bne.n	8006a50 <_vfiprintf_r+0x1bc>
 8006aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aa4:	07d9      	lsls	r1, r3, #31
 8006aa6:	d405      	bmi.n	8006ab4 <_vfiprintf_r+0x220>
 8006aa8:	89ab      	ldrh	r3, [r5, #12]
 8006aaa:	059a      	lsls	r2, r3, #22
 8006aac:	d402      	bmi.n	8006ab4 <_vfiprintf_r+0x220>
 8006aae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ab0:	f7ff fa34 	bl	8005f1c <__retarget_lock_release_recursive>
 8006ab4:	89ab      	ldrh	r3, [r5, #12]
 8006ab6:	065b      	lsls	r3, r3, #25
 8006ab8:	f53f af12 	bmi.w	80068e0 <_vfiprintf_r+0x4c>
 8006abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006abe:	e711      	b.n	80068e4 <_vfiprintf_r+0x50>
 8006ac0:	ab03      	add	r3, sp, #12
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	462a      	mov	r2, r5
 8006ac6:	4b09      	ldr	r3, [pc, #36]	; (8006aec <_vfiprintf_r+0x258>)
 8006ac8:	a904      	add	r1, sp, #16
 8006aca:	4630      	mov	r0, r6
 8006acc:	f7fe f972 	bl	8004db4 <_printf_i>
 8006ad0:	e7e4      	b.n	8006a9c <_vfiprintf_r+0x208>
 8006ad2:	bf00      	nop
 8006ad4:	080072e4 	.word	0x080072e4
 8006ad8:	08007304 	.word	0x08007304
 8006adc:	080072c4 	.word	0x080072c4
 8006ae0:	0800747c 	.word	0x0800747c
 8006ae4:	08007486 	.word	0x08007486
 8006ae8:	0800486d 	.word	0x0800486d
 8006aec:	0800686f 	.word	0x0800686f
 8006af0:	08007482 	.word	0x08007482

08006af4 <_sbrk_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4d06      	ldr	r5, [pc, #24]	; (8006b10 <_sbrk_r+0x1c>)
 8006af8:	2300      	movs	r3, #0
 8006afa:	4604      	mov	r4, r0
 8006afc:	4608      	mov	r0, r1
 8006afe:	602b      	str	r3, [r5, #0]
 8006b00:	f7fb f850 	bl	8001ba4 <_sbrk>
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d102      	bne.n	8006b0e <_sbrk_r+0x1a>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	b103      	cbz	r3, 8006b0e <_sbrk_r+0x1a>
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
 8006b10:	2000035c 	.word	0x2000035c

08006b14 <__sread>:
 8006b14:	b510      	push	{r4, lr}
 8006b16:	460c      	mov	r4, r1
 8006b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1c:	f000 faa8 	bl	8007070 <_read_r>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	bfab      	itete	ge
 8006b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b26:	89a3      	ldrhlt	r3, [r4, #12]
 8006b28:	181b      	addge	r3, r3, r0
 8006b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b2e:	bfac      	ite	ge
 8006b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b32:	81a3      	strhlt	r3, [r4, #12]
 8006b34:	bd10      	pop	{r4, pc}

08006b36 <__swrite>:
 8006b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3a:	461f      	mov	r7, r3
 8006b3c:	898b      	ldrh	r3, [r1, #12]
 8006b3e:	05db      	lsls	r3, r3, #23
 8006b40:	4605      	mov	r5, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	4616      	mov	r6, r2
 8006b46:	d505      	bpl.n	8006b54 <__swrite+0x1e>
 8006b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f000 f9f8 	bl	8006f44 <_lseek_r>
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b5e:	81a3      	strh	r3, [r4, #12]
 8006b60:	4632      	mov	r2, r6
 8006b62:	463b      	mov	r3, r7
 8006b64:	4628      	mov	r0, r5
 8006b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6a:	f000 b869 	b.w	8006c40 <_write_r>

08006b6e <__sseek>:
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	460c      	mov	r4, r1
 8006b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b76:	f000 f9e5 	bl	8006f44 <_lseek_r>
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	bf15      	itete	ne
 8006b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b8a:	81a3      	strheq	r3, [r4, #12]
 8006b8c:	bf18      	it	ne
 8006b8e:	81a3      	strhne	r3, [r4, #12]
 8006b90:	bd10      	pop	{r4, pc}

08006b92 <__sclose>:
 8006b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b96:	f000 b8f1 	b.w	8006d7c <_close_r>
	...

08006b9c <__swbuf_r>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	460e      	mov	r6, r1
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	4605      	mov	r5, r0
 8006ba4:	b118      	cbz	r0, 8006bae <__swbuf_r+0x12>
 8006ba6:	6983      	ldr	r3, [r0, #24]
 8006ba8:	b90b      	cbnz	r3, 8006bae <__swbuf_r+0x12>
 8006baa:	f7ff f913 	bl	8005dd4 <__sinit>
 8006bae:	4b21      	ldr	r3, [pc, #132]	; (8006c34 <__swbuf_r+0x98>)
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	d12b      	bne.n	8006c0c <__swbuf_r+0x70>
 8006bb4:	686c      	ldr	r4, [r5, #4]
 8006bb6:	69a3      	ldr	r3, [r4, #24]
 8006bb8:	60a3      	str	r3, [r4, #8]
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	071a      	lsls	r2, r3, #28
 8006bbe:	d52f      	bpl.n	8006c20 <__swbuf_r+0x84>
 8006bc0:	6923      	ldr	r3, [r4, #16]
 8006bc2:	b36b      	cbz	r3, 8006c20 <__swbuf_r+0x84>
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	6820      	ldr	r0, [r4, #0]
 8006bc8:	1ac0      	subs	r0, r0, r3
 8006bca:	6963      	ldr	r3, [r4, #20]
 8006bcc:	b2f6      	uxtb	r6, r6
 8006bce:	4283      	cmp	r3, r0
 8006bd0:	4637      	mov	r7, r6
 8006bd2:	dc04      	bgt.n	8006bde <__swbuf_r+0x42>
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f000 f966 	bl	8006ea8 <_fflush_r>
 8006bdc:	bb30      	cbnz	r0, 8006c2c <__swbuf_r+0x90>
 8006bde:	68a3      	ldr	r3, [r4, #8]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	60a3      	str	r3, [r4, #8]
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	6022      	str	r2, [r4, #0]
 8006bea:	701e      	strb	r6, [r3, #0]
 8006bec:	6963      	ldr	r3, [r4, #20]
 8006bee:	3001      	adds	r0, #1
 8006bf0:	4283      	cmp	r3, r0
 8006bf2:	d004      	beq.n	8006bfe <__swbuf_r+0x62>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	07db      	lsls	r3, r3, #31
 8006bf8:	d506      	bpl.n	8006c08 <__swbuf_r+0x6c>
 8006bfa:	2e0a      	cmp	r6, #10
 8006bfc:	d104      	bne.n	8006c08 <__swbuf_r+0x6c>
 8006bfe:	4621      	mov	r1, r4
 8006c00:	4628      	mov	r0, r5
 8006c02:	f000 f951 	bl	8006ea8 <_fflush_r>
 8006c06:	b988      	cbnz	r0, 8006c2c <__swbuf_r+0x90>
 8006c08:	4638      	mov	r0, r7
 8006c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <__swbuf_r+0x9c>)
 8006c0e:	429c      	cmp	r4, r3
 8006c10:	d101      	bne.n	8006c16 <__swbuf_r+0x7a>
 8006c12:	68ac      	ldr	r4, [r5, #8]
 8006c14:	e7cf      	b.n	8006bb6 <__swbuf_r+0x1a>
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <__swbuf_r+0xa0>)
 8006c18:	429c      	cmp	r4, r3
 8006c1a:	bf08      	it	eq
 8006c1c:	68ec      	ldreq	r4, [r5, #12]
 8006c1e:	e7ca      	b.n	8006bb6 <__swbuf_r+0x1a>
 8006c20:	4621      	mov	r1, r4
 8006c22:	4628      	mov	r0, r5
 8006c24:	f000 f81e 	bl	8006c64 <__swsetup_r>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d0cb      	beq.n	8006bc4 <__swbuf_r+0x28>
 8006c2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006c30:	e7ea      	b.n	8006c08 <__swbuf_r+0x6c>
 8006c32:	bf00      	nop
 8006c34:	080072e4 	.word	0x080072e4
 8006c38:	08007304 	.word	0x08007304
 8006c3c:	080072c4 	.word	0x080072c4

08006c40 <_write_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4d07      	ldr	r5, [pc, #28]	; (8006c60 <_write_r+0x20>)
 8006c44:	4604      	mov	r4, r0
 8006c46:	4608      	mov	r0, r1
 8006c48:	4611      	mov	r1, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	602a      	str	r2, [r5, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f7fa f92c 	bl	8000eac <_write>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_write_r+0x1e>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_write_r+0x1e>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	2000035c 	.word	0x2000035c

08006c64 <__swsetup_r>:
 8006c64:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <__swsetup_r+0xcc>)
 8006c66:	b570      	push	{r4, r5, r6, lr}
 8006c68:	681d      	ldr	r5, [r3, #0]
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	b125      	cbz	r5, 8006c7a <__swsetup_r+0x16>
 8006c70:	69ab      	ldr	r3, [r5, #24]
 8006c72:	b913      	cbnz	r3, 8006c7a <__swsetup_r+0x16>
 8006c74:	4628      	mov	r0, r5
 8006c76:	f7ff f8ad 	bl	8005dd4 <__sinit>
 8006c7a:	4b2e      	ldr	r3, [pc, #184]	; (8006d34 <__swsetup_r+0xd0>)
 8006c7c:	429c      	cmp	r4, r3
 8006c7e:	d10f      	bne.n	8006ca0 <__swsetup_r+0x3c>
 8006c80:	686c      	ldr	r4, [r5, #4]
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c88:	0719      	lsls	r1, r3, #28
 8006c8a:	d42c      	bmi.n	8006ce6 <__swsetup_r+0x82>
 8006c8c:	06dd      	lsls	r5, r3, #27
 8006c8e:	d411      	bmi.n	8006cb4 <__swsetup_r+0x50>
 8006c90:	2309      	movs	r3, #9
 8006c92:	6033      	str	r3, [r6, #0]
 8006c94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c98:	81a3      	strh	r3, [r4, #12]
 8006c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c9e:	e03e      	b.n	8006d1e <__swsetup_r+0xba>
 8006ca0:	4b25      	ldr	r3, [pc, #148]	; (8006d38 <__swsetup_r+0xd4>)
 8006ca2:	429c      	cmp	r4, r3
 8006ca4:	d101      	bne.n	8006caa <__swsetup_r+0x46>
 8006ca6:	68ac      	ldr	r4, [r5, #8]
 8006ca8:	e7eb      	b.n	8006c82 <__swsetup_r+0x1e>
 8006caa:	4b24      	ldr	r3, [pc, #144]	; (8006d3c <__swsetup_r+0xd8>)
 8006cac:	429c      	cmp	r4, r3
 8006cae:	bf08      	it	eq
 8006cb0:	68ec      	ldreq	r4, [r5, #12]
 8006cb2:	e7e6      	b.n	8006c82 <__swsetup_r+0x1e>
 8006cb4:	0758      	lsls	r0, r3, #29
 8006cb6:	d512      	bpl.n	8006cde <__swsetup_r+0x7a>
 8006cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cba:	b141      	cbz	r1, 8006cce <__swsetup_r+0x6a>
 8006cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	d002      	beq.n	8006cca <__swsetup_r+0x66>
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f7ff fcdb 	bl	8006680 <_free_r>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	6363      	str	r3, [r4, #52]	; 0x34
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cd4:	81a3      	strh	r3, [r4, #12]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	6063      	str	r3, [r4, #4]
 8006cda:	6923      	ldr	r3, [r4, #16]
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	f043 0308 	orr.w	r3, r3, #8
 8006ce4:	81a3      	strh	r3, [r4, #12]
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	b94b      	cbnz	r3, 8006cfe <__swsetup_r+0x9a>
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf4:	d003      	beq.n	8006cfe <__swsetup_r+0x9a>
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f000 f95b 	bl	8006fb4 <__smakebuf_r>
 8006cfe:	89a0      	ldrh	r0, [r4, #12]
 8006d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d04:	f010 0301 	ands.w	r3, r0, #1
 8006d08:	d00a      	beq.n	8006d20 <__swsetup_r+0xbc>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60a3      	str	r3, [r4, #8]
 8006d0e:	6963      	ldr	r3, [r4, #20]
 8006d10:	425b      	negs	r3, r3
 8006d12:	61a3      	str	r3, [r4, #24]
 8006d14:	6923      	ldr	r3, [r4, #16]
 8006d16:	b943      	cbnz	r3, 8006d2a <__swsetup_r+0xc6>
 8006d18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d1c:	d1ba      	bne.n	8006c94 <__swsetup_r+0x30>
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	0781      	lsls	r1, r0, #30
 8006d22:	bf58      	it	pl
 8006d24:	6963      	ldrpl	r3, [r4, #20]
 8006d26:	60a3      	str	r3, [r4, #8]
 8006d28:	e7f4      	b.n	8006d14 <__swsetup_r+0xb0>
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	e7f7      	b.n	8006d1e <__swsetup_r+0xba>
 8006d2e:	bf00      	nop
 8006d30:	2000000c 	.word	0x2000000c
 8006d34:	080072e4 	.word	0x080072e4
 8006d38:	08007304 	.word	0x08007304
 8006d3c:	080072c4 	.word	0x080072c4

08006d40 <__assert_func>:
 8006d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d42:	4614      	mov	r4, r2
 8006d44:	461a      	mov	r2, r3
 8006d46:	4b09      	ldr	r3, [pc, #36]	; (8006d6c <__assert_func+0x2c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	68d8      	ldr	r0, [r3, #12]
 8006d4e:	b14c      	cbz	r4, 8006d64 <__assert_func+0x24>
 8006d50:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <__assert_func+0x30>)
 8006d52:	9100      	str	r1, [sp, #0]
 8006d54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d58:	4906      	ldr	r1, [pc, #24]	; (8006d74 <__assert_func+0x34>)
 8006d5a:	462b      	mov	r3, r5
 8006d5c:	f000 f8e0 	bl	8006f20 <fiprintf>
 8006d60:	f000 f9a5 	bl	80070ae <abort>
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <__assert_func+0x38>)
 8006d66:	461c      	mov	r4, r3
 8006d68:	e7f3      	b.n	8006d52 <__assert_func+0x12>
 8006d6a:	bf00      	nop
 8006d6c:	2000000c 	.word	0x2000000c
 8006d70:	0800748d 	.word	0x0800748d
 8006d74:	0800749a 	.word	0x0800749a
 8006d78:	080074c8 	.word	0x080074c8

08006d7c <_close_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d06      	ldr	r5, [pc, #24]	; (8006d98 <_close_r+0x1c>)
 8006d80:	2300      	movs	r3, #0
 8006d82:	4604      	mov	r4, r0
 8006d84:	4608      	mov	r0, r1
 8006d86:	602b      	str	r3, [r5, #0]
 8006d88:	f7fa fed7 	bl	8001b3a <_close>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_close_r+0x1a>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_close_r+0x1a>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	2000035c 	.word	0x2000035c

08006d9c <__sflush_r>:
 8006d9c:	898a      	ldrh	r2, [r1, #12]
 8006d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da2:	4605      	mov	r5, r0
 8006da4:	0710      	lsls	r0, r2, #28
 8006da6:	460c      	mov	r4, r1
 8006da8:	d458      	bmi.n	8006e5c <__sflush_r+0xc0>
 8006daa:	684b      	ldr	r3, [r1, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	dc05      	bgt.n	8006dbc <__sflush_r+0x20>
 8006db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dc02      	bgt.n	8006dbc <__sflush_r+0x20>
 8006db6:	2000      	movs	r0, #0
 8006db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dbe:	2e00      	cmp	r6, #0
 8006dc0:	d0f9      	beq.n	8006db6 <__sflush_r+0x1a>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006dc8:	682f      	ldr	r7, [r5, #0]
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	d032      	beq.n	8006e34 <__sflush_r+0x98>
 8006dce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	075a      	lsls	r2, r3, #29
 8006dd4:	d505      	bpl.n	8006de2 <__sflush_r+0x46>
 8006dd6:	6863      	ldr	r3, [r4, #4]
 8006dd8:	1ac0      	subs	r0, r0, r3
 8006dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ddc:	b10b      	cbz	r3, 8006de2 <__sflush_r+0x46>
 8006dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006de0:	1ac0      	subs	r0, r0, r3
 8006de2:	2300      	movs	r3, #0
 8006de4:	4602      	mov	r2, r0
 8006de6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006de8:	6a21      	ldr	r1, [r4, #32]
 8006dea:	4628      	mov	r0, r5
 8006dec:	47b0      	blx	r6
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	d106      	bne.n	8006e02 <__sflush_r+0x66>
 8006df4:	6829      	ldr	r1, [r5, #0]
 8006df6:	291d      	cmp	r1, #29
 8006df8:	d82c      	bhi.n	8006e54 <__sflush_r+0xb8>
 8006dfa:	4a2a      	ldr	r2, [pc, #168]	; (8006ea4 <__sflush_r+0x108>)
 8006dfc:	40ca      	lsrs	r2, r1
 8006dfe:	07d6      	lsls	r6, r2, #31
 8006e00:	d528      	bpl.n	8006e54 <__sflush_r+0xb8>
 8006e02:	2200      	movs	r2, #0
 8006e04:	6062      	str	r2, [r4, #4]
 8006e06:	04d9      	lsls	r1, r3, #19
 8006e08:	6922      	ldr	r2, [r4, #16]
 8006e0a:	6022      	str	r2, [r4, #0]
 8006e0c:	d504      	bpl.n	8006e18 <__sflush_r+0x7c>
 8006e0e:	1c42      	adds	r2, r0, #1
 8006e10:	d101      	bne.n	8006e16 <__sflush_r+0x7a>
 8006e12:	682b      	ldr	r3, [r5, #0]
 8006e14:	b903      	cbnz	r3, 8006e18 <__sflush_r+0x7c>
 8006e16:	6560      	str	r0, [r4, #84]	; 0x54
 8006e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e1a:	602f      	str	r7, [r5, #0]
 8006e1c:	2900      	cmp	r1, #0
 8006e1e:	d0ca      	beq.n	8006db6 <__sflush_r+0x1a>
 8006e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e24:	4299      	cmp	r1, r3
 8006e26:	d002      	beq.n	8006e2e <__sflush_r+0x92>
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f7ff fc29 	bl	8006680 <_free_r>
 8006e2e:	2000      	movs	r0, #0
 8006e30:	6360      	str	r0, [r4, #52]	; 0x34
 8006e32:	e7c1      	b.n	8006db8 <__sflush_r+0x1c>
 8006e34:	6a21      	ldr	r1, [r4, #32]
 8006e36:	2301      	movs	r3, #1
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b0      	blx	r6
 8006e3c:	1c41      	adds	r1, r0, #1
 8006e3e:	d1c7      	bne.n	8006dd0 <__sflush_r+0x34>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0c4      	beq.n	8006dd0 <__sflush_r+0x34>
 8006e46:	2b1d      	cmp	r3, #29
 8006e48:	d001      	beq.n	8006e4e <__sflush_r+0xb2>
 8006e4a:	2b16      	cmp	r3, #22
 8006e4c:	d101      	bne.n	8006e52 <__sflush_r+0xb6>
 8006e4e:	602f      	str	r7, [r5, #0]
 8006e50:	e7b1      	b.n	8006db6 <__sflush_r+0x1a>
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e58:	81a3      	strh	r3, [r4, #12]
 8006e5a:	e7ad      	b.n	8006db8 <__sflush_r+0x1c>
 8006e5c:	690f      	ldr	r7, [r1, #16]
 8006e5e:	2f00      	cmp	r7, #0
 8006e60:	d0a9      	beq.n	8006db6 <__sflush_r+0x1a>
 8006e62:	0793      	lsls	r3, r2, #30
 8006e64:	680e      	ldr	r6, [r1, #0]
 8006e66:	bf08      	it	eq
 8006e68:	694b      	ldreq	r3, [r1, #20]
 8006e6a:	600f      	str	r7, [r1, #0]
 8006e6c:	bf18      	it	ne
 8006e6e:	2300      	movne	r3, #0
 8006e70:	eba6 0807 	sub.w	r8, r6, r7
 8006e74:	608b      	str	r3, [r1, #8]
 8006e76:	f1b8 0f00 	cmp.w	r8, #0
 8006e7a:	dd9c      	ble.n	8006db6 <__sflush_r+0x1a>
 8006e7c:	6a21      	ldr	r1, [r4, #32]
 8006e7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e80:	4643      	mov	r3, r8
 8006e82:	463a      	mov	r2, r7
 8006e84:	4628      	mov	r0, r5
 8006e86:	47b0      	blx	r6
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	dc06      	bgt.n	8006e9a <__sflush_r+0xfe>
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e98:	e78e      	b.n	8006db8 <__sflush_r+0x1c>
 8006e9a:	4407      	add	r7, r0
 8006e9c:	eba8 0800 	sub.w	r8, r8, r0
 8006ea0:	e7e9      	b.n	8006e76 <__sflush_r+0xda>
 8006ea2:	bf00      	nop
 8006ea4:	20400001 	.word	0x20400001

08006ea8 <_fflush_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	690b      	ldr	r3, [r1, #16]
 8006eac:	4605      	mov	r5, r0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	b913      	cbnz	r3, 8006eb8 <_fflush_r+0x10>
 8006eb2:	2500      	movs	r5, #0
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	b118      	cbz	r0, 8006ec2 <_fflush_r+0x1a>
 8006eba:	6983      	ldr	r3, [r0, #24]
 8006ebc:	b90b      	cbnz	r3, 8006ec2 <_fflush_r+0x1a>
 8006ebe:	f7fe ff89 	bl	8005dd4 <__sinit>
 8006ec2:	4b14      	ldr	r3, [pc, #80]	; (8006f14 <_fflush_r+0x6c>)
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	d11b      	bne.n	8006f00 <_fflush_r+0x58>
 8006ec8:	686c      	ldr	r4, [r5, #4]
 8006eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0ef      	beq.n	8006eb2 <_fflush_r+0xa>
 8006ed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ed4:	07d0      	lsls	r0, r2, #31
 8006ed6:	d404      	bmi.n	8006ee2 <_fflush_r+0x3a>
 8006ed8:	0599      	lsls	r1, r3, #22
 8006eda:	d402      	bmi.n	8006ee2 <_fflush_r+0x3a>
 8006edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ede:	f7ff f81c 	bl	8005f1a <__retarget_lock_acquire_recursive>
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	f7ff ff59 	bl	8006d9c <__sflush_r>
 8006eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eec:	07da      	lsls	r2, r3, #31
 8006eee:	4605      	mov	r5, r0
 8006ef0:	d4e0      	bmi.n	8006eb4 <_fflush_r+0xc>
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	059b      	lsls	r3, r3, #22
 8006ef6:	d4dd      	bmi.n	8006eb4 <_fflush_r+0xc>
 8006ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006efa:	f7ff f80f 	bl	8005f1c <__retarget_lock_release_recursive>
 8006efe:	e7d9      	b.n	8006eb4 <_fflush_r+0xc>
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <_fflush_r+0x70>)
 8006f02:	429c      	cmp	r4, r3
 8006f04:	d101      	bne.n	8006f0a <_fflush_r+0x62>
 8006f06:	68ac      	ldr	r4, [r5, #8]
 8006f08:	e7df      	b.n	8006eca <_fflush_r+0x22>
 8006f0a:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <_fflush_r+0x74>)
 8006f0c:	429c      	cmp	r4, r3
 8006f0e:	bf08      	it	eq
 8006f10:	68ec      	ldreq	r4, [r5, #12]
 8006f12:	e7da      	b.n	8006eca <_fflush_r+0x22>
 8006f14:	080072e4 	.word	0x080072e4
 8006f18:	08007304 	.word	0x08007304
 8006f1c:	080072c4 	.word	0x080072c4

08006f20 <fiprintf>:
 8006f20:	b40e      	push	{r1, r2, r3}
 8006f22:	b503      	push	{r0, r1, lr}
 8006f24:	4601      	mov	r1, r0
 8006f26:	ab03      	add	r3, sp, #12
 8006f28:	4805      	ldr	r0, [pc, #20]	; (8006f40 <fiprintf+0x20>)
 8006f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f2e:	6800      	ldr	r0, [r0, #0]
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	f7ff fcaf 	bl	8006894 <_vfiprintf_r>
 8006f36:	b002      	add	sp, #8
 8006f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f3c:	b003      	add	sp, #12
 8006f3e:	4770      	bx	lr
 8006f40:	2000000c 	.word	0x2000000c

08006f44 <_lseek_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4d07      	ldr	r5, [pc, #28]	; (8006f64 <_lseek_r+0x20>)
 8006f48:	4604      	mov	r4, r0
 8006f4a:	4608      	mov	r0, r1
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	602a      	str	r2, [r5, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f7fa fe18 	bl	8001b88 <_lseek>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_lseek_r+0x1e>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_lseek_r+0x1e>
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	2000035c 	.word	0x2000035c

08006f68 <__swhatbuf_r>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	460e      	mov	r6, r1
 8006f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f70:	2900      	cmp	r1, #0
 8006f72:	b096      	sub	sp, #88	; 0x58
 8006f74:	4614      	mov	r4, r2
 8006f76:	461d      	mov	r5, r3
 8006f78:	da08      	bge.n	8006f8c <__swhatbuf_r+0x24>
 8006f7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	602a      	str	r2, [r5, #0]
 8006f82:	061a      	lsls	r2, r3, #24
 8006f84:	d410      	bmi.n	8006fa8 <__swhatbuf_r+0x40>
 8006f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f8a:	e00e      	b.n	8006faa <__swhatbuf_r+0x42>
 8006f8c:	466a      	mov	r2, sp
 8006f8e:	f000 f895 	bl	80070bc <_fstat_r>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	dbf1      	blt.n	8006f7a <__swhatbuf_r+0x12>
 8006f96:	9a01      	ldr	r2, [sp, #4]
 8006f98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fa0:	425a      	negs	r2, r3
 8006fa2:	415a      	adcs	r2, r3
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	e7ee      	b.n	8006f86 <__swhatbuf_r+0x1e>
 8006fa8:	2340      	movs	r3, #64	; 0x40
 8006faa:	2000      	movs	r0, #0
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	b016      	add	sp, #88	; 0x58
 8006fb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006fb4 <__smakebuf_r>:
 8006fb4:	898b      	ldrh	r3, [r1, #12]
 8006fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fb8:	079d      	lsls	r5, r3, #30
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	d507      	bpl.n	8006fd0 <__smakebuf_r+0x1c>
 8006fc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	6123      	str	r3, [r4, #16]
 8006fc8:	2301      	movs	r3, #1
 8006fca:	6163      	str	r3, [r4, #20]
 8006fcc:	b002      	add	sp, #8
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
 8006fd0:	ab01      	add	r3, sp, #4
 8006fd2:	466a      	mov	r2, sp
 8006fd4:	f7ff ffc8 	bl	8006f68 <__swhatbuf_r>
 8006fd8:	9900      	ldr	r1, [sp, #0]
 8006fda:	4605      	mov	r5, r0
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f7ff fbbb 	bl	8006758 <_malloc_r>
 8006fe2:	b948      	cbnz	r0, 8006ff8 <__smakebuf_r+0x44>
 8006fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe8:	059a      	lsls	r2, r3, #22
 8006fea:	d4ef      	bmi.n	8006fcc <__smakebuf_r+0x18>
 8006fec:	f023 0303 	bic.w	r3, r3, #3
 8006ff0:	f043 0302 	orr.w	r3, r3, #2
 8006ff4:	81a3      	strh	r3, [r4, #12]
 8006ff6:	e7e3      	b.n	8006fc0 <__smakebuf_r+0xc>
 8006ff8:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <__smakebuf_r+0x7c>)
 8006ffa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	6020      	str	r0, [r4, #0]
 8007000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	9b00      	ldr	r3, [sp, #0]
 8007008:	6163      	str	r3, [r4, #20]
 800700a:	9b01      	ldr	r3, [sp, #4]
 800700c:	6120      	str	r0, [r4, #16]
 800700e:	b15b      	cbz	r3, 8007028 <__smakebuf_r+0x74>
 8007010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007014:	4630      	mov	r0, r6
 8007016:	f000 f863 	bl	80070e0 <_isatty_r>
 800701a:	b128      	cbz	r0, 8007028 <__smakebuf_r+0x74>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	f023 0303 	bic.w	r3, r3, #3
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	89a0      	ldrh	r0, [r4, #12]
 800702a:	4305      	orrs	r5, r0
 800702c:	81a5      	strh	r5, [r4, #12]
 800702e:	e7cd      	b.n	8006fcc <__smakebuf_r+0x18>
 8007030:	08005d6d 	.word	0x08005d6d

08007034 <__ascii_mbtowc>:
 8007034:	b082      	sub	sp, #8
 8007036:	b901      	cbnz	r1, 800703a <__ascii_mbtowc+0x6>
 8007038:	a901      	add	r1, sp, #4
 800703a:	b142      	cbz	r2, 800704e <__ascii_mbtowc+0x1a>
 800703c:	b14b      	cbz	r3, 8007052 <__ascii_mbtowc+0x1e>
 800703e:	7813      	ldrb	r3, [r2, #0]
 8007040:	600b      	str	r3, [r1, #0]
 8007042:	7812      	ldrb	r2, [r2, #0]
 8007044:	1e10      	subs	r0, r2, #0
 8007046:	bf18      	it	ne
 8007048:	2001      	movne	r0, #1
 800704a:	b002      	add	sp, #8
 800704c:	4770      	bx	lr
 800704e:	4610      	mov	r0, r2
 8007050:	e7fb      	b.n	800704a <__ascii_mbtowc+0x16>
 8007052:	f06f 0001 	mvn.w	r0, #1
 8007056:	e7f8      	b.n	800704a <__ascii_mbtowc+0x16>

08007058 <__malloc_lock>:
 8007058:	4801      	ldr	r0, [pc, #4]	; (8007060 <__malloc_lock+0x8>)
 800705a:	f7fe bf5e 	b.w	8005f1a <__retarget_lock_acquire_recursive>
 800705e:	bf00      	nop
 8007060:	20000350 	.word	0x20000350

08007064 <__malloc_unlock>:
 8007064:	4801      	ldr	r0, [pc, #4]	; (800706c <__malloc_unlock+0x8>)
 8007066:	f7fe bf59 	b.w	8005f1c <__retarget_lock_release_recursive>
 800706a:	bf00      	nop
 800706c:	20000350 	.word	0x20000350

08007070 <_read_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d07      	ldr	r5, [pc, #28]	; (8007090 <_read_r+0x20>)
 8007074:	4604      	mov	r4, r0
 8007076:	4608      	mov	r0, r1
 8007078:	4611      	mov	r1, r2
 800707a:	2200      	movs	r2, #0
 800707c:	602a      	str	r2, [r5, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f7fa fd3e 	bl	8001b00 <_read>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_read_r+0x1e>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_read_r+0x1e>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	2000035c 	.word	0x2000035c

08007094 <__ascii_wctomb>:
 8007094:	b149      	cbz	r1, 80070aa <__ascii_wctomb+0x16>
 8007096:	2aff      	cmp	r2, #255	; 0xff
 8007098:	bf85      	ittet	hi
 800709a:	238a      	movhi	r3, #138	; 0x8a
 800709c:	6003      	strhi	r3, [r0, #0]
 800709e:	700a      	strbls	r2, [r1, #0]
 80070a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80070a4:	bf98      	it	ls
 80070a6:	2001      	movls	r0, #1
 80070a8:	4770      	bx	lr
 80070aa:	4608      	mov	r0, r1
 80070ac:	4770      	bx	lr

080070ae <abort>:
 80070ae:	b508      	push	{r3, lr}
 80070b0:	2006      	movs	r0, #6
 80070b2:	f000 f84d 	bl	8007150 <raise>
 80070b6:	2001      	movs	r0, #1
 80070b8:	f7fa fd18 	bl	8001aec <_exit>

080070bc <_fstat_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4d07      	ldr	r5, [pc, #28]	; (80070dc <_fstat_r+0x20>)
 80070c0:	2300      	movs	r3, #0
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	4611      	mov	r1, r2
 80070c8:	602b      	str	r3, [r5, #0]
 80070ca:	f7fa fd42 	bl	8001b52 <_fstat>
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	d102      	bne.n	80070d8 <_fstat_r+0x1c>
 80070d2:	682b      	ldr	r3, [r5, #0]
 80070d4:	b103      	cbz	r3, 80070d8 <_fstat_r+0x1c>
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	bd38      	pop	{r3, r4, r5, pc}
 80070da:	bf00      	nop
 80070dc:	2000035c 	.word	0x2000035c

080070e0 <_isatty_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d06      	ldr	r5, [pc, #24]	; (80070fc <_isatty_r+0x1c>)
 80070e4:	2300      	movs	r3, #0
 80070e6:	4604      	mov	r4, r0
 80070e8:	4608      	mov	r0, r1
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	f7fa fd41 	bl	8001b72 <_isatty>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_isatty_r+0x1a>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_isatty_r+0x1a>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	2000035c 	.word	0x2000035c

08007100 <_raise_r>:
 8007100:	291f      	cmp	r1, #31
 8007102:	b538      	push	{r3, r4, r5, lr}
 8007104:	4604      	mov	r4, r0
 8007106:	460d      	mov	r5, r1
 8007108:	d904      	bls.n	8007114 <_raise_r+0x14>
 800710a:	2316      	movs	r3, #22
 800710c:	6003      	str	r3, [r0, #0]
 800710e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007116:	b112      	cbz	r2, 800711e <_raise_r+0x1e>
 8007118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800711c:	b94b      	cbnz	r3, 8007132 <_raise_r+0x32>
 800711e:	4620      	mov	r0, r4
 8007120:	f000 f830 	bl	8007184 <_getpid_r>
 8007124:	462a      	mov	r2, r5
 8007126:	4601      	mov	r1, r0
 8007128:	4620      	mov	r0, r4
 800712a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800712e:	f000 b817 	b.w	8007160 <_kill_r>
 8007132:	2b01      	cmp	r3, #1
 8007134:	d00a      	beq.n	800714c <_raise_r+0x4c>
 8007136:	1c59      	adds	r1, r3, #1
 8007138:	d103      	bne.n	8007142 <_raise_r+0x42>
 800713a:	2316      	movs	r3, #22
 800713c:	6003      	str	r3, [r0, #0]
 800713e:	2001      	movs	r0, #1
 8007140:	e7e7      	b.n	8007112 <_raise_r+0x12>
 8007142:	2400      	movs	r4, #0
 8007144:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007148:	4628      	mov	r0, r5
 800714a:	4798      	blx	r3
 800714c:	2000      	movs	r0, #0
 800714e:	e7e0      	b.n	8007112 <_raise_r+0x12>

08007150 <raise>:
 8007150:	4b02      	ldr	r3, [pc, #8]	; (800715c <raise+0xc>)
 8007152:	4601      	mov	r1, r0
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f7ff bfd3 	b.w	8007100 <_raise_r>
 800715a:	bf00      	nop
 800715c:	2000000c 	.word	0x2000000c

08007160 <_kill_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4d07      	ldr	r5, [pc, #28]	; (8007180 <_kill_r+0x20>)
 8007164:	2300      	movs	r3, #0
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	4611      	mov	r1, r2
 800716c:	602b      	str	r3, [r5, #0]
 800716e:	f7fa fcad 	bl	8001acc <_kill>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	d102      	bne.n	800717c <_kill_r+0x1c>
 8007176:	682b      	ldr	r3, [r5, #0]
 8007178:	b103      	cbz	r3, 800717c <_kill_r+0x1c>
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	bd38      	pop	{r3, r4, r5, pc}
 800717e:	bf00      	nop
 8007180:	2000035c 	.word	0x2000035c

08007184 <_getpid_r>:
 8007184:	f7fa bc9a 	b.w	8001abc <_getpid>

08007188 <_init>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	bf00      	nop
 800718c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718e:	bc08      	pop	{r3}
 8007190:	469e      	mov	lr, r3
 8007192:	4770      	bx	lr

08007194 <_fini>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	bf00      	nop
 8007198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719a:	bc08      	pop	{r3}
 800719c:	469e      	mov	lr, r3
 800719e:	4770      	bx	lr
