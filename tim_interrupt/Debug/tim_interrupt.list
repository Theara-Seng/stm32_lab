
tim_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008754  08008754  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008754  08008754  00018754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800875c  0800875c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800875c  0800875c  0001875c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008760  08008760  00018760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000898  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000928  20000928  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aa73  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c89  00000000  00000000  0003ab33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e8  00000000  00000000  0003fe38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245cd  00000000  00000000  00041320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c504  00000000  00000000  000658ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b67  00000000  00000000  00081df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155958  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006188  00000000  00000000  001559a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008720 	.word	0x08008720

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008720 	.word	0x08008720

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fcd6 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f816 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f986 	bl	80007e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f87c 	bl	80005d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8a8 	bl	8000634 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8d6 	bl	8000694 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f007 fcd2 	bl	8007e90 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80004ec:	f000 f908 	bl	8000700 <MX_TIM1_Init>
  MX_TIM10_Init();
 80004f0:	f000 f956 	bl	80007a0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <main+0x34>)
 80004f6:	f004 f8c5 	bl	8004684 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004fa:	f007 fcef 	bl	8007edc <MX_USB_HOST_Process>
 80004fe:	e7fc      	b.n	80004fa <main+0x2e>
 8000500:	200001e8 	.word	0x200001e8

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f007 fffe 	bl	8008514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <SystemClock_Config+0xcc>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <SystemClock_Config+0xd0>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000574:	2308      	movs	r3, #8
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000578:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800057c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000582:	2307      	movs	r3, #7
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	4618      	mov	r0, r3
 800058c:	f003 f9de 	bl	800394c <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000596:	f000 fa3b 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2302      	movs	r3, #2
 80005a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2105      	movs	r1, #5
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fc3f 	bl	8003e3c <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c4:	f000 fa24 	bl	8000a10 <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3750      	adds	r7, #80	; 0x50
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_I2C1_Init+0x50>)
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <MX_I2C1_Init+0x54>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_I2C1_Init+0x50>)
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <MX_I2C1_Init+0x58>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_I2C1_Init+0x50>)
 8000616:	f002 fbb5 	bl	8002d84 <HAL_I2C_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000620:	f000 f9f6 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000ac 	.word	0x200000ac
 800062c:	40005400 	.word	0x40005400
 8000630:	000186a0 	.word	0x000186a0

08000634 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_I2S3_Init+0x54>)
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <MX_I2S3_Init+0x58>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_I2S3_Init+0x54>)
 8000640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000644:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_I2S3_Init+0x54>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_I2S3_Init+0x54>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_I2S3_Init+0x54>)
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_I2S3_Init+0x54>)
 800065c:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <MX_I2S3_Init+0x5c>)
 800065e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_I2S3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_I2S3_Init+0x54>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_I2S3_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_I2S3_Init+0x54>)
 8000674:	f002 fcca 	bl	800300c <HAL_I2S_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800067e:	f000 f9c7 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000100 	.word	0x20000100
 800068c:	40003c00 	.word	0x40003c00
 8000690:	00017700 	.word	0x00017700

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_SPI1_Init+0x64>)
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_SPI1_Init+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e6:	f003 fef5 	bl	80044d4 <HAL_SPI_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f0:	f000 f98e 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000148 	.word	0x20000148
 80006fc:	40013000 	.word	0x40013000

08000700 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_TIM1_Init+0x98>)
 800071e:	4a1f      	ldr	r2, [pc, #124]	; (800079c <MX_TIM1_Init+0x9c>)
 8000720:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_TIM1_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_TIM1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_TIM1_Init+0x98>)
 8000730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_TIM1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_TIM1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_TIM1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000748:	4813      	ldr	r0, [pc, #76]	; (8000798 <MX_TIM1_Init+0x98>)
 800074a:	f003 ff4c 	bl	80045e6 <HAL_TIM_Base_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000754:	f000 f95c 	bl	8000a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_TIM1_Init+0x98>)
 8000766:	f004 f905 	bl	8004974 <HAL_TIM_ConfigClockSource>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000770:	f000 f94e 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_TIM1_Init+0x98>)
 8000782:	f004 fb21 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800078c:	f000 f940 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001a0 	.word	0x200001a0
 800079c:	40010000 	.word	0x40010000

080007a0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_TIM10_Init+0x40>)
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <MX_TIM10_Init+0x44>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16800-1;
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_TIM10_Init+0x40>)
 80007ac:	f244 129f 	movw	r2, #16799	; 0x419f
 80007b0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_TIM10_Init+0x40>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_TIM10_Init+0x40>)
 80007ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80007be:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_TIM10_Init+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_TIM10_Init+0x40>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_TIM10_Init+0x40>)
 80007ce:	f003 ff0a 	bl	80045e6 <HAL_TIM_Base_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80007d8:	f000 f91a 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200001e8 	.word	0x200001e8
 80007e4:	40014400 	.word	0x40014400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	4b72      	ldr	r3, [pc, #456]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a71      	ldr	r2, [pc, #452]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b6f      	ldr	r3, [pc, #444]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	4b6b      	ldr	r3, [pc, #428]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a6a      	ldr	r2, [pc, #424]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b68      	ldr	r3, [pc, #416]	; (80009cc <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b64      	ldr	r3, [pc, #400]	; (80009cc <MX_GPIO_Init+0x1e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a63      	ldr	r2, [pc, #396]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b61      	ldr	r3, [pc, #388]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a5c      	ldr	r2, [pc, #368]	; (80009cc <MX_GPIO_Init+0x1e4>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b5a      	ldr	r3, [pc, #360]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b56      	ldr	r3, [pc, #344]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a55      	ldr	r2, [pc, #340]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b53      	ldr	r3, [pc, #332]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b4f      	ldr	r3, [pc, #316]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a4e      	ldr	r2, [pc, #312]	; (80009cc <MX_GPIO_Init+0x1e4>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b4c      	ldr	r3, [pc, #304]	; (80009cc <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	4849      	ldr	r0, [pc, #292]	; (80009d0 <MX_GPIO_Init+0x1e8>)
 80008ac:	f000 fe2c 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	4847      	ldr	r0, [pc, #284]	; (80009d4 <MX_GPIO_Init+0x1ec>)
 80008b6:	f000 fe27 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ba:	2200      	movs	r2, #0
 80008bc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008c0:	4845      	ldr	r0, [pc, #276]	; (80009d8 <MX_GPIO_Init+0x1f0>)
 80008c2:	f000 fe21 	bl	8001508 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483c      	ldr	r0, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x1e8>)
 80008de:	f000 fc77 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4836      	ldr	r0, [pc, #216]	; (80009d4 <MX_GPIO_Init+0x1ec>)
 80008fa:	f000 fc69 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008fe:	2308      	movs	r3, #8
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	482e      	ldr	r0, [pc, #184]	; (80009d4 <MX_GPIO_Init+0x1ec>)
 800091a:	f000 fc59 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091e:	2301      	movs	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000922:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	482a      	ldr	r0, [pc, #168]	; (80009dc <MX_GPIO_Init+0x1f4>)
 8000934:	f000 fc4c 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000938:	2304      	movs	r3, #4
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4825      	ldr	r0, [pc, #148]	; (80009e0 <MX_GPIO_Init+0x1f8>)
 800094c:	f000 fc40 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000962:	2305      	movs	r3, #5
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	481c      	ldr	r0, [pc, #112]	; (80009e0 <MX_GPIO_Init+0x1f8>)
 800096e:	f000 fc2f 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000972:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000976:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4813      	ldr	r0, [pc, #76]	; (80009d8 <MX_GPIO_Init+0x1f0>)
 800098c:	f000 fc20 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000990:	2320      	movs	r3, #32
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_GPIO_Init+0x1f0>)
 80009a4:	f000 fc14 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_GPIO_Init+0x1e8>)
 80009be:	f000 fc07 	bl	80011d0 <HAL_GPIO_Init>

}
 80009c2:	bf00      	nop
 80009c4:	3730      	adds	r7, #48	; 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020c00 	.word	0x40020c00
 80009dc:	40020000 	.word	0x40020000
 80009e0:	40020400 	.word	0x40020400

080009e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim10){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d104      	bne.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80009fa:	f000 fd9e 	bl	800153a <HAL_GPIO_TogglePin>
	}
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001e8 	.word	0x200001e8
 8000a0c:	40020c00 	.word	0x40020c00

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f000 fb76 	bl	800114c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <HAL_I2C_MspInit+0x84>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12c      	bne.n	8000ae8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aaa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab0:	2312      	movs	r3, #18
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000abc:	2304      	movs	r3, #4
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <HAL_I2C_MspInit+0x8c>)
 8000ac8:	f000 fb82 	bl	80011d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400

08000afc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	; 0x38
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a31      	ldr	r2, [pc, #196]	; (8000bec <HAL_I2S_MspInit+0xf0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d15a      	bne.n	8000be2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b30:	23c0      	movs	r3, #192	; 0xc0
 8000b32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 fb89 	bl	8004254 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b48:	f7ff ff62 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a26      	ldr	r2, [pc, #152]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <HAL_I2S_MspInit+0xf8>)
 8000bbc:	f000 fb08 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bc0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd2:	2306      	movs	r3, #6
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_I2S_MspInit+0xfc>)
 8000bde:	f000 faf7 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3738      	adds	r7, #56	; 0x38
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40003c00 	.word	0x40003c00
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020800 	.word	0x40020800

08000bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_SPI_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12b      	bne.n	8000c76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c56:	23e0      	movs	r3, #224	; 0xe0
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c66:	2305      	movs	r3, #5
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_SPI_MspInit+0x8c>)
 8000c72:	f000 faad 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <HAL_TIM_Base_MspInit+0x80>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d116      	bne.n	8000ccc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_TIM_Base_MspInit+0x84>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a1a      	ldr	r2, [pc, #104]	; (8000d10 <HAL_TIM_Base_MspInit+0x84>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_TIM_Base_MspInit+0x84>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2019      	movs	r0, #25
 8000cc0:	f000 fa4f 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cc4:	2019      	movs	r0, #25
 8000cc6:	f000 fa68 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000cca:	e01a      	b.n	8000d02 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_TIM_Base_MspInit+0x88>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d115      	bne.n	8000d02 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_TIM_Base_MspInit+0x84>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <HAL_TIM_Base_MspInit+0x84>)
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_TIM_Base_MspInit+0x84>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2019      	movs	r0, #25
 8000cf8:	f000 fa33 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cfc:	2019      	movs	r0, #25
 8000cfe:	f000 fa4c 	bl	800119a <HAL_NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40014400 	.word	0x40014400

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f8de 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000d72:	f003 fcf7 	bl	8004764 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000d78:	f003 fcf4 	bl	8004764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200001a0 	.word	0x200001a0
 8000d84:	200001e8 	.word	0x200001e8

08000d88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <OTG_FS_IRQHandler+0x10>)
 8000d8e:	f000 fe59 	bl	8001a44 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000614 	.word	0x20000614

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f007 fb68 	bl	80084a0 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20020000 	.word	0x20020000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	20000230 	.word	0x20000230
 8000e04:	20000928 	.word	0x20000928

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e32:	490e      	ldr	r1, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e48:	4c0b      	ldr	r4, [pc, #44]	; (8000e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ffd7 	bl	8000e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f007 fb27 	bl	80084ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fb35 	bl	80004cc <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e70:	08008764 	.word	0x08008764
  ldr r2, =_sbss
 8000e74:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e78:	20000928 	.word	0x20000928

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f94f 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fdb2 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f967 	bl	80011b6 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f00:	f000 f92f 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000234 	.word	0x20000234

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000234 	.word	0x20000234

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff3e 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff31 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	e16b      	b.n	80014c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 815a 	bne.w	80014be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d005      	beq.n	8001222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	2b02      	cmp	r3, #2
 8001220:	d130      	bne.n	8001284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 0201 	and.w	r2, r3, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b03      	cmp	r3, #3
 800128e:	d017      	beq.n	80012c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d123      	bne.n	8001314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	69b9      	ldr	r1, [r7, #24]
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80b4 	beq.w	80014be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b60      	ldr	r3, [pc, #384]	; (80014dc <HAL_GPIO_Init+0x30c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a5f      	ldr	r2, [pc, #380]	; (80014dc <HAL_GPIO_Init+0x30c>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_GPIO_Init+0x30c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001372:	4a5b      	ldr	r2, [pc, #364]	; (80014e0 <HAL_GPIO_Init+0x310>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_GPIO_Init+0x314>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d02b      	beq.n	80013f6 <HAL_GPIO_Init+0x226>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a51      	ldr	r2, [pc, #324]	; (80014e8 <HAL_GPIO_Init+0x318>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d025      	beq.n	80013f2 <HAL_GPIO_Init+0x222>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a50      	ldr	r2, [pc, #320]	; (80014ec <HAL_GPIO_Init+0x31c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01f      	beq.n	80013ee <HAL_GPIO_Init+0x21e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	; (80014f0 <HAL_GPIO_Init+0x320>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <HAL_GPIO_Init+0x324>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <HAL_GPIO_Init+0x328>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_GPIO_Init+0x32c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_GPIO_Init+0x330>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d101      	bne.n	80013da <HAL_GPIO_Init+0x20a>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00e      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013da:	2308      	movs	r3, #8
 80013dc:	e00c      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013de:	2306      	movs	r3, #6
 80013e0:	e00a      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e008      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e004      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013f6:	2300      	movs	r3, #0
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f002 0203 	and.w	r2, r2, #3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4093      	lsls	r3, r2
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001408:	4935      	ldr	r1, [pc, #212]	; (80014e0 <HAL_GPIO_Init+0x310>)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143a:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_GPIO_Init+0x334>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <HAL_GPIO_Init+0x334>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148e:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <HAL_GPIO_Init+0x334>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	f67f ae90 	bls.w	80011ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40021400 	.word	0x40021400
 80014fc:	40021800 	.word	0x40021800
 8001500:	40021c00 	.word	0x40021c00
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800154c:	887a      	ldrh	r2, [r7, #2]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	041a      	lsls	r2, r3, #16
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43d9      	mvns	r1, r3
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	400b      	ands	r3, r1
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800156e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001570:	b08f      	sub	sp, #60	; 0x3c
 8001572:	af0a      	add	r7, sp, #40	; 0x28
 8001574:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e054      	b.n	800162a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f006 fcd6 	bl	8007f4c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2203      	movs	r2, #3
 80015a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fd04 	bl	8004fcc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	687e      	ldr	r6, [r7, #4]
 80015cc:	466d      	mov	r5, sp
 80015ce:	f106 0410 	add.w	r4, r6, #16
 80015d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015de:	e885 0003 	stmia.w	r5, {r0, r1}
 80015e2:	1d33      	adds	r3, r6, #4
 80015e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f003 fc7e 	bl	8004ee8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fcfb 	bl	8004fee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	687e      	ldr	r6, [r7, #4]
 8001600:	466d      	mov	r5, sp
 8001602:	f106 0410 	add.w	r4, r6, #16
 8001606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001612:	e885 0003 	stmia.w	r5, {r0, r1}
 8001616:	1d33      	adds	r3, r6, #4
 8001618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800161a:	6838      	ldr	r0, [r7, #0]
 800161c:	f003 fe84 	bl	8005328 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001632 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001632:	b590      	push	{r4, r7, lr}
 8001634:	b089      	sub	sp, #36	; 0x24
 8001636:	af04      	add	r7, sp, #16
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	4608      	mov	r0, r1
 800163c:	4611      	mov	r1, r2
 800163e:	461a      	mov	r2, r3
 8001640:	4603      	mov	r3, r0
 8001642:	70fb      	strb	r3, [r7, #3]
 8001644:	460b      	mov	r3, r1
 8001646:	70bb      	strb	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_HCD_HC_Init+0x28>
 8001656:	2302      	movs	r3, #2
 8001658:	e076      	b.n	8001748 <HAL_HCD_HC_Init+0x116>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	212c      	movs	r1, #44	; 0x2c
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	4413      	add	r3, r2
 800166e:	333d      	adds	r3, #61	; 0x3d
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	212c      	movs	r1, #44	; 0x2c
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	4413      	add	r3, r2
 8001680:	3338      	adds	r3, #56	; 0x38
 8001682:	787a      	ldrb	r2, [r7, #1]
 8001684:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	212c      	movs	r1, #44	; 0x2c
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	4413      	add	r3, r2
 8001692:	3340      	adds	r3, #64	; 0x40
 8001694:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001696:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	212c      	movs	r1, #44	; 0x2c
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	4413      	add	r3, r2
 80016a4:	3339      	adds	r3, #57	; 0x39
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	212c      	movs	r1, #44	; 0x2c
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	333f      	adds	r3, #63	; 0x3f
 80016b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	78ba      	ldrb	r2, [r7, #2]
 80016c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016c6:	b2d0      	uxtb	r0, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	212c      	movs	r1, #44	; 0x2c
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	333a      	adds	r3, #58	; 0x3a
 80016d4:	4602      	mov	r2, r0
 80016d6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	da09      	bge.n	80016f4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	212c      	movs	r1, #44	; 0x2c
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	333b      	adds	r3, #59	; 0x3b
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e008      	b.n	8001706 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	212c      	movs	r1, #44	; 0x2c
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	333b      	adds	r3, #59	; 0x3b
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	212c      	movs	r1, #44	; 0x2c
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	4413      	add	r3, r2
 8001712:	333c      	adds	r3, #60	; 0x3c
 8001714:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001718:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	787c      	ldrb	r4, [r7, #1]
 8001720:	78ba      	ldrb	r2, [r7, #2]
 8001722:	78f9      	ldrb	r1, [r7, #3]
 8001724:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001726:	9302      	str	r3, [sp, #8]
 8001728:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4623      	mov	r3, r4
 8001736:	f003 ff7d 	bl	8005634 <USB_HC_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bd90      	pop	{r4, r7, pc}

08001750 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_HCD_HC_Halt+0x1e>
 800176a:	2302      	movs	r3, #2
 800176c:	e00f      	b.n	800178e <HAL_HCD_HC_Halt+0x3e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f004 f9cd 	bl	8005b1e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	70fb      	strb	r3, [r7, #3]
 80017aa:	460b      	mov	r3, r1
 80017ac:	70bb      	strb	r3, [r7, #2]
 80017ae:	4613      	mov	r3, r2
 80017b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	212c      	movs	r1, #44	; 0x2c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	333b      	adds	r3, #59	; 0x3b
 80017c0:	78ba      	ldrb	r2, [r7, #2]
 80017c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	333f      	adds	r3, #63	; 0x3f
 80017d2:	787a      	ldrb	r2, [r7, #1]
 80017d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017d6:	7c3b      	ldrb	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d112      	bne.n	8001802 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	3342      	adds	r3, #66	; 0x42
 80017ea:	2203      	movs	r2, #3
 80017ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	333d      	adds	r3, #61	; 0x3d
 80017fc:	7f3a      	ldrb	r2, [r7, #28]
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e008      	b.n	8001814 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	212c      	movs	r1, #44	; 0x2c
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	4413      	add	r3, r2
 800180e:	3342      	adds	r3, #66	; 0x42
 8001810:	2202      	movs	r2, #2
 8001812:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	2b03      	cmp	r3, #3
 8001818:	f200 80c6 	bhi.w	80019a8 <HAL_HCD_HC_SubmitRequest+0x210>
 800181c:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001822:	bf00      	nop
 8001824:	08001835 	.word	0x08001835
 8001828:	08001995 	.word	0x08001995
 800182c:	08001899 	.word	0x08001899
 8001830:	08001917 	.word	0x08001917
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001834:	7c3b      	ldrb	r3, [r7, #16]
 8001836:	2b01      	cmp	r3, #1
 8001838:	f040 80b8 	bne.w	80019ac <HAL_HCD_HC_SubmitRequest+0x214>
 800183c:	78bb      	ldrb	r3, [r7, #2]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 80b4 	bne.w	80019ac <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001844:	8b3b      	ldrh	r3, [r7, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d108      	bne.n	800185c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	212c      	movs	r1, #44	; 0x2c
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	3355      	adds	r3, #85	; 0x55
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	212c      	movs	r1, #44	; 0x2c
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	3355      	adds	r3, #85	; 0x55
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	212c      	movs	r1, #44	; 0x2c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4413      	add	r3, r2
 800187c:	3342      	adds	r3, #66	; 0x42
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001882:	e093      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	212c      	movs	r1, #44	; 0x2c
 800188a:	fb01 f303 	mul.w	r3, r1, r3
 800188e:	4413      	add	r3, r2
 8001890:	3342      	adds	r3, #66	; 0x42
 8001892:	2202      	movs	r2, #2
 8001894:	701a      	strb	r2, [r3, #0]
      break;
 8001896:	e089      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001898:	78bb      	ldrb	r3, [r7, #2]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d11d      	bne.n	80018da <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	3355      	adds	r3, #85	; 0x55
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	212c      	movs	r1, #44	; 0x2c
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	3342      	adds	r3, #66	; 0x42
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018c4:	e073      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3342      	adds	r3, #66	; 0x42
 80018d4:	2202      	movs	r2, #2
 80018d6:	701a      	strb	r2, [r3, #0]
      break;
 80018d8:	e069      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	212c      	movs	r1, #44	; 0x2c
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	3354      	adds	r3, #84	; 0x54
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	3342      	adds	r3, #66	; 0x42
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
      break;
 8001900:	e055      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3342      	adds	r3, #66	; 0x42
 8001910:	2202      	movs	r2, #2
 8001912:	701a      	strb	r2, [r3, #0]
      break;
 8001914:	e04b      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001916:	78bb      	ldrb	r3, [r7, #2]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d11d      	bne.n	8001958 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	212c      	movs	r1, #44	; 0x2c
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	3355      	adds	r3, #85	; 0x55
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d109      	bne.n	8001944 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	212c      	movs	r1, #44	; 0x2c
 8001936:	fb01 f303 	mul.w	r3, r1, r3
 800193a:	4413      	add	r3, r2
 800193c:	3342      	adds	r3, #66	; 0x42
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001942:	e034      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	212c      	movs	r1, #44	; 0x2c
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	3342      	adds	r3, #66	; 0x42
 8001952:	2202      	movs	r2, #2
 8001954:	701a      	strb	r2, [r3, #0]
      break;
 8001956:	e02a      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	212c      	movs	r1, #44	; 0x2c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	3354      	adds	r3, #84	; 0x54
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	212c      	movs	r1, #44	; 0x2c
 8001972:	fb01 f303 	mul.w	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	3342      	adds	r3, #66	; 0x42
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
      break;
 800197e:	e016      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	212c      	movs	r1, #44	; 0x2c
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	3342      	adds	r3, #66	; 0x42
 800198e:	2202      	movs	r2, #2
 8001990:	701a      	strb	r2, [r3, #0]
      break;
 8001992:	e00c      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	212c      	movs	r1, #44	; 0x2c
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	3342      	adds	r3, #66	; 0x42
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
      break;
 80019a6:	e002      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019a8:	bf00      	nop
 80019aa:	e000      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019ac:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	3344      	adds	r3, #68	; 0x44
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	8b3a      	ldrh	r2, [r7, #24]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	202c      	movs	r0, #44	; 0x2c
 80019c8:	fb00 f303 	mul.w	r3, r0, r3
 80019cc:	440b      	add	r3, r1
 80019ce:	334c      	adds	r3, #76	; 0x4c
 80019d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	212c      	movs	r1, #44	; 0x2c
 80019d8:	fb01 f303 	mul.w	r3, r1, r3
 80019dc:	4413      	add	r3, r2
 80019de:	3360      	adds	r3, #96	; 0x60
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	212c      	movs	r1, #44	; 0x2c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	3350      	adds	r3, #80	; 0x50
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	212c      	movs	r1, #44	; 0x2c
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	3339      	adds	r3, #57	; 0x39
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3361      	adds	r3, #97	; 0x61
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	222c      	movs	r2, #44	; 0x2c
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	3338      	adds	r3, #56	; 0x38
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	18d1      	adds	r1, r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	f003 ff20 	bl	8005878 <USB_HC_StartXfer>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop

08001a44 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fc21 	bl	80052a2 <USB_GetMode>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	f040 80f6 	bne.w	8001c54 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fc05 	bl	800527c <USB_ReadInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80ec 	beq.w	8001c52 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fbfc 	bl	800527c <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a8e:	d104      	bne.n	8001a9a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 fbec 	bl	800527c <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aae:	d104      	bne.n	8001aba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ab8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fbdc 	bl	800527c <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ace:	d104      	bne.n	8001ada <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ad8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fbcc 	bl	800527c <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d103      	bne.n	8001af6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2202      	movs	r2, #2
 8001af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fbbe 	bl	800527c <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b0a:	d11c      	bne.n	8001b46 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b14:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10f      	bne.n	8001b46 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b26:	2110      	movs	r1, #16
 8001b28:	6938      	ldr	r0, [r7, #16]
 8001b2a:	f003 faad 	bl	8005088 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b2e:	6938      	ldr	r0, [r7, #16]
 8001b30:	f003 fade 	bl	80050f0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fcb4 	bl	80054a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f006 fa81 	bl	8008048 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fb96 	bl	800527c <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5a:	d102      	bne.n	8001b62 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f001 f89e 	bl	8002c9e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fb88 	bl	800527c <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d106      	bne.n	8001b84 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f006 fa4a 	bl	8008010 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2208      	movs	r2, #8
 8001b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fb77 	bl	800527c <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	d101      	bne.n	8001b9c <HAL_HCD_IRQHandler+0x158>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_HCD_IRQHandler+0x15a>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d012      	beq.n	8001bc8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0210 	bic.w	r2, r2, #16
 8001bb0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 ffa1 	bl	8002afa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0210 	orr.w	r2, r2, #16
 8001bc6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fb55 	bl	800527c <USB_ReadInterrupts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bdc:	d13a      	bne.n	8001c54 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 ff8a 	bl	8005afc <USB_HC_ReadInterrupt>
 8001be8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e025      	b.n	8001c3c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d018      	beq.n	8001c36 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c1a:	d106      	bne.n	8001c2a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8ab 	bl	8001d7e <HCD_HC_IN_IRQHandler>
 8001c28:	e005      	b.n	8001c36 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fbf9 	bl	8002428 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d3d4      	bcc.n	8001bf0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c4e:	615a      	str	r2, [r3, #20]
 8001c50:	e000      	b.n	8001c54 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c52:	bf00      	nop
    }
  }
}
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_HCD_Start+0x16>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e013      	b.n	8001c98 <HAL_HCD_Start+0x3e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 fc76 	bl	8005570 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 f98e 	bl	8004faa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_HCD_Stop+0x16>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e00d      	b.n	8001cd2 <HAL_HCD_Stop+0x32>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 f864 	bl	8005d90 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fc18 	bl	800551c <USB_ResetPort>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	212c      	movs	r1, #44	; 0x2c
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3360      	adds	r3, #96	; 0x60
 8001d10:	781b      	ldrb	r3, [r3, #0]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3350      	adds	r3, #80	; 0x50
 8001d38:	681b      	ldr	r3, [r3, #0]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 fc5c 	bl	8005610 <USB_GetCurrentFrame>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fc37 	bl	80055e2 <USB_GetHostSpeed>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d11a      	bne.n	8001de4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	212c      	movs	r1, #44	; 0x2c
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	3361      	adds	r3, #97	; 0x61
 8001dce:	2206      	movs	r2, #6
 8001dd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 fe9e 	bl	8005b1e <USB_HC_Halt>
 8001de2:	e0af      	b.n	8001f44 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dfa:	d11b      	bne.n	8001e34 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	212c      	movs	r1, #44	; 0x2c
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3361      	adds	r3, #97	; 0x61
 8001e1e:	2207      	movs	r2, #7
 8001e20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 fe76 	bl	8005b1e <USB_HC_Halt>
 8001e32:	e087      	b.n	8001f44 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d109      	bne.n	8001e5e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	461a      	mov	r2, r3
 8001e58:	2320      	movs	r3, #32
 8001e5a:	6093      	str	r3, [r2, #8]
 8001e5c:	e072      	b.n	8001f44 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d11a      	bne.n	8001eaa <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	461a      	mov	r2, r3
 8001e82:	2308      	movs	r3, #8
 8001e84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	212c      	movs	r1, #44	; 0x2c
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	3361      	adds	r3, #97	; 0x61
 8001e94:	2205      	movs	r2, #5
 8001e96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fe3b 	bl	8005b1e <USB_HC_Halt>
 8001ea8:	e04c      	b.n	8001f44 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec0:	d11b      	bne.n	8001efa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ed4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	212c      	movs	r1, #44	; 0x2c
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3361      	adds	r3, #97	; 0x61
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 fe13 	bl	8005b1e <USB_HC_Halt>
 8001ef8:	e024      	b.n	8001f44 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d119      	bne.n	8001f44 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3361      	adds	r3, #97	; 0x61
 8001f30:	2206      	movs	r2, #6
 8001f32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fded 	bl	8005b1e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f5a:	d112      	bne.n	8001f82 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fdd9 	bl	8005b1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f80:	e24e      	b.n	8002420 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	f040 80df 	bne.w	8002158 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d019      	beq.n	8001fd6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3348      	adds	r3, #72	; 0x48
 8001fb0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	0159      	lsls	r1, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	440b      	add	r3, r1
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fc4:	1ad2      	subs	r2, r2, r3
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	202c      	movs	r0, #44	; 0x2c
 8001fcc:	fb00 f303 	mul.w	r3, r0, r3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3350      	adds	r3, #80	; 0x50
 8001fd4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	212c      	movs	r1, #44	; 0x2c
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3361      	adds	r3, #97	; 0x61
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	335c      	adds	r3, #92	; 0x5c
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	461a      	mov	r2, r3
 8002008:	2301      	movs	r3, #1
 800200a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	333f      	adds	r3, #63	; 0x3f
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	333f      	adds	r3, #63	; 0x3f
 800202e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002030:	2b02      	cmp	r3, #2
 8002032:	d111      	bne.n	8002058 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fd6d 	bl	8005b1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	461a      	mov	r2, r3
 8002052:	2310      	movs	r3, #16
 8002054:	6093      	str	r3, [r2, #8]
 8002056:	e03a      	b.n	80020ce <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	212c      	movs	r1, #44	; 0x2c
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	333f      	adds	r3, #63	; 0x3f
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d009      	beq.n	8002080 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	333f      	adds	r3, #63	; 0x3f
 800207a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800207c:	2b01      	cmp	r3, #1
 800207e:	d126      	bne.n	80020ce <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4413      	add	r3, r2
 8002088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	0151      	lsls	r1, r2, #5
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	440a      	add	r2, r1
 8002096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800209a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800209e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	3360      	adds	r3, #96	; 0x60
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	b2d9      	uxtb	r1, r3
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	202c      	movs	r0, #44	; 0x2c
 80020bc:	fb00 f303 	mul.w	r3, r0, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3360      	adds	r3, #96	; 0x60
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f005 ffcb 	bl	8008064 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d12b      	bne.n	800212e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3348      	adds	r3, #72	; 0x48
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	202c      	movs	r0, #44	; 0x2c
 80020ec:	fb00 f202 	mul.w	r2, r0, r2
 80020f0:	440a      	add	r2, r1
 80020f2:	3240      	adds	r2, #64	; 0x40
 80020f4:	8812      	ldrh	r2, [r2, #0]
 80020f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 818e 	beq.w	8002420 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3354      	adds	r3, #84	; 0x54
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	f083 0301 	eor.w	r3, r3, #1
 8002118:	b2d8      	uxtb	r0, r3
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3354      	adds	r3, #84	; 0x54
 8002128:	4602      	mov	r2, r0
 800212a:	701a      	strb	r2, [r3, #0]
}
 800212c:	e178      	b.n	8002420 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	3354      	adds	r3, #84	; 0x54
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	f083 0301 	eor.w	r3, r3, #1
 8002142:	b2d8      	uxtb	r0, r3
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3354      	adds	r3, #84	; 0x54
 8002152:	4602      	mov	r2, r0
 8002154:	701a      	strb	r2, [r3, #0]
}
 8002156:	e163      	b.n	8002420 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	f040 80f6 	bne.w	800235c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3361      	adds	r3, #97	; 0x61
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d109      	bne.n	8002198 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3360      	adds	r3, #96	; 0x60
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	e0c9      	b.n	800232c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3361      	adds	r3, #97	; 0x61
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d109      	bne.n	80021c0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3360      	adds	r3, #96	; 0x60
 80021ba:	2205      	movs	r2, #5
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e0b5      	b.n	800232c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	212c      	movs	r1, #44	; 0x2c
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	3361      	adds	r3, #97	; 0x61
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b06      	cmp	r3, #6
 80021d2:	d009      	beq.n	80021e8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3361      	adds	r3, #97	; 0x61
 80021e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d150      	bne.n	800228a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	335c      	adds	r3, #92	; 0x5c
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	202c      	movs	r0, #44	; 0x2c
 8002200:	fb00 f303 	mul.w	r3, r0, r3
 8002204:	440b      	add	r3, r1
 8002206:	335c      	adds	r3, #92	; 0x5c
 8002208:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	335c      	adds	r3, #92	; 0x5c
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d912      	bls.n	8002244 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	335c      	adds	r3, #92	; 0x5c
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3360      	adds	r3, #96	; 0x60
 800223e:	2204      	movs	r2, #4
 8002240:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002242:	e073      	b.n	800232c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3360      	adds	r3, #96	; 0x60
 8002252:	2202      	movs	r2, #2
 8002254:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800226c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002274:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	461a      	mov	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002288:	e050      	b.n	800232c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	3361      	adds	r3, #97	; 0x61
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d122      	bne.n	80022e4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3360      	adds	r3, #96	; 0x60
 80022ac:	2202      	movs	r2, #2
 80022ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022dc:	461a      	mov	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e023      	b.n	800232c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3361      	adds	r3, #97	; 0x61
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	d119      	bne.n	800232c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	335c      	adds	r3, #92	; 0x5c
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	202c      	movs	r0, #44	; 0x2c
 8002310:	fb00 f303 	mul.w	r3, r0, r3
 8002314:	440b      	add	r3, r1
 8002316:	335c      	adds	r3, #92	; 0x5c
 8002318:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3360      	adds	r3, #96	; 0x60
 8002328:	2204      	movs	r2, #4
 800232a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	461a      	mov	r2, r3
 800233a:	2302      	movs	r3, #2
 800233c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	b2d9      	uxtb	r1, r3
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	202c      	movs	r0, #44	; 0x2c
 8002348:	fb00 f303 	mul.w	r3, r0, r3
 800234c:	4413      	add	r3, r2
 800234e:	3360      	adds	r3, #96	; 0x60
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f005 fe85 	bl	8008064 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800235a:	e061      	b.n	8002420 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b10      	cmp	r3, #16
 8002370:	d156      	bne.n	8002420 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	333f      	adds	r3, #63	; 0x3f
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d111      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	335c      	adds	r3, #92	; 0x5c
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fbbb 	bl	8005b1e <USB_HC_Halt>
 80023a8:	e031      	b.n	800240e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	333f      	adds	r3, #63	; 0x3f
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	333f      	adds	r3, #63	; 0x3f
 80023cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d11d      	bne.n	800240e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	335c      	adds	r3, #92	; 0x5c
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d110      	bne.n	800240e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	3361      	adds	r3, #97	; 0x61
 80023fa:	2203      	movs	r2, #3
 80023fc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fb88 	bl	8005b1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	461a      	mov	r2, r3
 800241c:	2310      	movs	r3, #16
 800241e:	6093      	str	r3, [r2, #8]
}
 8002420:	bf00      	nop
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b04      	cmp	r3, #4
 8002456:	d11a      	bne.n	800248e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	461a      	mov	r2, r3
 8002466:	2304      	movs	r3, #4
 8002468:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	3361      	adds	r3, #97	; 0x61
 8002478:	2206      	movs	r2, #6
 800247a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f003 fb49 	bl	8005b1e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800248c:	e331      	b.n	8002af2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d12e      	bne.n	8002502 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	461a      	mov	r2, r3
 80024b2:	2320      	movs	r3, #32
 80024b4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	333d      	adds	r3, #61	; 0x3d
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	f040 8313 	bne.w	8002af2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	333d      	adds	r3, #61	; 0x3d
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	3360      	adds	r3, #96	; 0x60
 80024ec:	2202      	movs	r2, #2
 80024ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 fb0f 	bl	8005b1e <USB_HC_Halt>
}
 8002500:	e2f7      	b.n	8002af2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002518:	d112      	bne.n	8002540 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	461a      	mov	r2, r3
 8002528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800252c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f003 faf0 	bl	8005b1e <USB_HC_Halt>
}
 800253e:	e2d8      	b.n	8002af2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d140      	bne.n	80025d8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	335c      	adds	r3, #92	; 0x5c
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	d111      	bne.n	80025a2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	333d      	adds	r3, #61	; 0x3d
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259c:	461a      	mov	r2, r3
 800259e:	2340      	movs	r3, #64	; 0x40
 80025a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	461a      	mov	r2, r3
 80025b0:	2301      	movs	r3, #1
 80025b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3361      	adds	r3, #97	; 0x61
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 faa4 	bl	8005b1e <USB_HC_Halt>
}
 80025d6:	e28c      	b.n	8002af2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b40      	cmp	r3, #64	; 0x40
 80025ec:	d12c      	bne.n	8002648 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	3361      	adds	r3, #97	; 0x61
 80025fc:	2204      	movs	r2, #4
 80025fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	333d      	adds	r3, #61	; 0x3d
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	335c      	adds	r3, #92	; 0x5c
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f003 fa75 	bl	8005b1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	461a      	mov	r2, r3
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	6093      	str	r3, [r2, #8]
}
 8002646:	e254      	b.n	8002af2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b08      	cmp	r3, #8
 800265c:	d11a      	bne.n	8002694 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	461a      	mov	r2, r3
 800266c:	2308      	movs	r3, #8
 800266e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	3361      	adds	r3, #97	; 0x61
 800267e:	2205      	movs	r2, #5
 8002680:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fa46 	bl	8005b1e <USB_HC_Halt>
}
 8002692:	e22e      	b.n	8002af2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d140      	bne.n	800272c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	212c      	movs	r1, #44	; 0x2c
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	335c      	adds	r3, #92	; 0x5c
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3361      	adds	r3, #97	; 0x61
 80026ca:	2203      	movs	r2, #3
 80026cc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	333d      	adds	r3, #61	; 0x3d
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d112      	bne.n	8002708 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	333c      	adds	r3, #60	; 0x3c
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d108      	bne.n	8002708 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	333d      	adds	r3, #61	; 0x3d
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f003 fa03 	bl	8005b1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	2310      	movs	r3, #16
 8002728:	6093      	str	r3, [r2, #8]
}
 800272a:	e1e2      	b.n	8002af2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273e:	2b80      	cmp	r3, #128	; 0x80
 8002740:	d164      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d111      	bne.n	800276e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	3361      	adds	r3, #97	; 0x61
 8002758:	2206      	movs	r2, #6
 800275a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f003 f9d9 	bl	8005b1e <USB_HC_Halt>
 800276c:	e044      	b.n	80027f8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	335c      	adds	r3, #92	; 0x5c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	202c      	movs	r0, #44	; 0x2c
 8002786:	fb00 f303 	mul.w	r3, r0, r3
 800278a:	440b      	add	r3, r1
 800278c:	335c      	adds	r3, #92	; 0x5c
 800278e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	335c      	adds	r3, #92	; 0x5c
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d920      	bls.n	80027e6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	335c      	adds	r3, #92	; 0x5c
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	3360      	adds	r3, #96	; 0x60
 80027c4:	2204      	movs	r2, #4
 80027c6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	b2d9      	uxtb	r1, r3
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	202c      	movs	r0, #44	; 0x2c
 80027d2:	fb00 f303 	mul.w	r3, r0, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3360      	adds	r3, #96	; 0x60
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f005 fc40 	bl	8008064 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027e4:	e008      	b.n	80027f8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3360      	adds	r3, #96	; 0x60
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	6093      	str	r3, [r2, #8]
}
 800280a:	e172      	b.n	8002af2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002822:	d11b      	bne.n	800285c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3361      	adds	r3, #97	; 0x61
 8002832:	2208      	movs	r2, #8
 8002834:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f003 f96c 	bl	8005b1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	461a      	mov	r2, r3
 8002854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002858:	6093      	str	r3, [r2, #8]
}
 800285a:	e14a      	b.n	8002af2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b02      	cmp	r3, #2
 8002870:	f040 813f 	bne.w	8002af2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	3361      	adds	r3, #97	; 0x61
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d17d      	bne.n	8002984 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3360      	adds	r3, #96	; 0x60
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	333f      	adds	r3, #63	; 0x3f
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d00a      	beq.n	80028c4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	333f      	adds	r3, #63	; 0x3f
 80028bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028be:	2b03      	cmp	r3, #3
 80028c0:	f040 8100 	bne.w	8002ac4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d113      	bne.n	80028f4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3355      	adds	r3, #85	; 0x55
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	f083 0301 	eor.w	r3, r3, #1
 80028e0:	b2d8      	uxtb	r0, r3
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3355      	adds	r3, #85	; 0x55
 80028f0:	4602      	mov	r2, r0
 80028f2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	f040 80e3 	bne.w	8002ac4 <HCD_HC_OUT_IRQHandler+0x69c>
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	334c      	adds	r3, #76	; 0x4c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80d8 	beq.w	8002ac4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	334c      	adds	r3, #76	; 0x4c
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	202c      	movs	r0, #44	; 0x2c
 800292a:	fb00 f202 	mul.w	r2, r0, r2
 800292e:	440a      	add	r2, r1
 8002930:	3240      	adds	r2, #64	; 0x40
 8002932:	8812      	ldrh	r2, [r2, #0]
 8002934:	4413      	add	r3, r2
 8002936:	3b01      	subs	r3, #1
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	202c      	movs	r0, #44	; 0x2c
 800293e:	fb00 f202 	mul.w	r2, r0, r2
 8002942:	440a      	add	r2, r1
 8002944:	3240      	adds	r2, #64	; 0x40
 8002946:	8812      	ldrh	r2, [r2, #0]
 8002948:	fbb3 f3f2 	udiv	r3, r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80b5 	beq.w	8002ac4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	3355      	adds	r3, #85	; 0x55
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f083 0301 	eor.w	r3, r3, #1
 800296e:	b2d8      	uxtb	r0, r3
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3355      	adds	r3, #85	; 0x55
 800297e:	4602      	mov	r2, r0
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e09f      	b.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3361      	adds	r3, #97	; 0x61
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d109      	bne.n	80029ac <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3360      	adds	r3, #96	; 0x60
 80029a6:	2202      	movs	r2, #2
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e08b      	b.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3361      	adds	r3, #97	; 0x61
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d109      	bne.n	80029d4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3360      	adds	r3, #96	; 0x60
 80029ce:	2202      	movs	r2, #2
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e077      	b.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3361      	adds	r3, #97	; 0x61
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d109      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3360      	adds	r3, #96	; 0x60
 80029f6:	2205      	movs	r2, #5
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e063      	b.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3361      	adds	r3, #97	; 0x61
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d009      	beq.n	8002a24 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3361      	adds	r3, #97	; 0x61
 8002a1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d14f      	bne.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	335c      	adds	r3, #92	; 0x5c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	202c      	movs	r0, #44	; 0x2c
 8002a3c:	fb00 f303 	mul.w	r3, r0, r3
 8002a40:	440b      	add	r3, r1
 8002a42:	335c      	adds	r3, #92	; 0x5c
 8002a44:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	335c      	adds	r3, #92	; 0x5c
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d912      	bls.n	8002a80 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	335c      	adds	r3, #92	; 0x5c
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3360      	adds	r3, #96	; 0x60
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e021      	b.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3360      	adds	r3, #96	; 0x60
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aa8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ab0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	461a      	mov	r2, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	b2d9      	uxtb	r1, r3
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	202c      	movs	r0, #44	; 0x2c
 8002ae0:	fb00 f303 	mul.w	r3, r0, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3360      	adds	r3, #96	; 0x60
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f005 fab9 	bl	8008064 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002af2:	bf00      	nop
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b08a      	sub	sp, #40	; 0x28
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	0c5b      	lsrs	r3, r3, #17
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b2e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d004      	beq.n	8002b40 <HCD_RXQLVL_IRQHandler+0x46>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	f000 80a9 	beq.w	8002c90 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b3e:	e0aa      	b.n	8002c96 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80a6 	beq.w	8002c94 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3344      	adds	r3, #68	; 0x44
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 809b 	beq.w	8002c94 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	3350      	adds	r3, #80	; 0x50
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	441a      	add	r2, r3
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	202c      	movs	r0, #44	; 0x2c
 8002b78:	fb00 f303 	mul.w	r3, r0, r3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	334c      	adds	r3, #76	; 0x4c
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d87a      	bhi.n	8002c7c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	3344      	adds	r3, #68	; 0x44
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f002 fb14 	bl	80051cc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3344      	adds	r3, #68	; 0x44
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	441a      	add	r2, r3
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	202c      	movs	r0, #44	; 0x2c
 8002bbe:	fb00 f303 	mul.w	r3, r0, r3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3344      	adds	r3, #68	; 0x44
 8002bc6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3350      	adds	r3, #80	; 0x50
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	441a      	add	r2, r3
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	202c      	movs	r0, #44	; 0x2c
 8002be2:	fb00 f303 	mul.w	r3, r0, r3
 8002be6:	440b      	add	r3, r1
 8002be8:	3350      	adds	r3, #80	; 0x50
 8002bea:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	0cdb      	lsrs	r3, r3, #19
 8002bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c00:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3340      	adds	r3, #64	; 0x40
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d13c      	bne.n	8002c94 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d039      	beq.n	8002c94 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c36:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c3e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3354      	adds	r3, #84	; 0x54
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	f083 0301 	eor.w	r3, r3, #1
 8002c66:	b2d8      	uxtb	r0, r3
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3354      	adds	r3, #84	; 0x54
 8002c76:	4602      	mov	r2, r0
 8002c78:	701a      	strb	r2, [r3, #0]
      break;
 8002c7a:	e00b      	b.n	8002c94 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3360      	adds	r3, #96	; 0x60
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	701a      	strb	r2, [r3, #0]
      break;
 8002c8e:	e001      	b.n	8002c94 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c94:	bf00      	nop
  }
}
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	; 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cca:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d10b      	bne.n	8002cee <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d102      	bne.n	8002ce6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f005 f9a3 	bl	800802c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d132      	bne.n	8002d5e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f043 0308 	orr.w	r3, r3, #8
 8002cfe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d126      	bne.n	8002d58 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d113      	bne.n	8002d3a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d1c:	d106      	bne.n	8002d2c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2102      	movs	r1, #2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 fbbf 	bl	80054a8 <USB_InitFSLSPClkSel>
 8002d2a:	e011      	b.n	8002d50 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f002 fbb8 	bl	80054a8 <USB_InitFSLSPClkSel>
 8002d38:	e00a      	b.n	8002d50 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d106      	bne.n	8002d50 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d4e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f005 f995 	bl	8008080 <HAL_HCD_PortEnabled_Callback>
 8002d56:	e002      	b.n	8002d5e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f005 f99f 	bl	800809c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d103      	bne.n	8002d70 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f043 0320 	orr.w	r3, r3, #32
 8002d6e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d76:	461a      	mov	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6013      	str	r3, [r2, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e12b      	b.n	8002fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fd fe5e 	bl	8000a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002de8:	f001 fa20 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8002dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a81      	ldr	r2, [pc, #516]	; (8002ff8 <HAL_I2C_Init+0x274>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d807      	bhi.n	8002e08 <HAL_I2C_Init+0x84>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a80      	ldr	r2, [pc, #512]	; (8002ffc <HAL_I2C_Init+0x278>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	bf94      	ite	ls
 8002e00:	2301      	movls	r3, #1
 8002e02:	2300      	movhi	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e006      	b.n	8002e16 <HAL_I2C_Init+0x92>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a7d      	ldr	r2, [pc, #500]	; (8003000 <HAL_I2C_Init+0x27c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0e7      	b.n	8002fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a78      	ldr	r2, [pc, #480]	; (8003004 <HAL_I2C_Init+0x280>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0c9b      	lsrs	r3, r3, #18
 8002e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a6a      	ldr	r2, [pc, #424]	; (8002ff8 <HAL_I2C_Init+0x274>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d802      	bhi.n	8002e58 <HAL_I2C_Init+0xd4>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3301      	adds	r3, #1
 8002e56:	e009      	b.n	8002e6c <HAL_I2C_Init+0xe8>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	4a69      	ldr	r2, [pc, #420]	; (8003008 <HAL_I2C_Init+0x284>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	495c      	ldr	r1, [pc, #368]	; (8002ff8 <HAL_I2C_Init+0x274>)
 8002e88:	428b      	cmp	r3, r1
 8002e8a:	d819      	bhi.n	8002ec0 <HAL_I2C_Init+0x13c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e59      	subs	r1, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9a:	1c59      	adds	r1, r3, #1
 8002e9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ea0:	400b      	ands	r3, r1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_I2C_Init+0x138>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e59      	subs	r1, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eba:	e051      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	e04f      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d111      	bne.n	8002eec <HAL_I2C_Init+0x168>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e58      	subs	r0, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	440b      	add	r3, r1
 8002ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e012      	b.n	8002f12 <HAL_I2C_Init+0x18e>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e58      	subs	r0, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Init+0x196>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e022      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10e      	bne.n	8002f40 <HAL_I2C_Init+0x1bc>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1e58      	subs	r0, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	440b      	add	r3, r1
 8002f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3e:	e00f      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	0099      	lsls	r1, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	6809      	ldr	r1, [r1, #0]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6911      	ldr	r1, [r2, #16]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	000186a0 	.word	0x000186a0
 8002ffc:	001e847f 	.word	0x001e847f
 8003000:	003d08ff 	.word	0x003d08ff
 8003004:	431bde83 	.word	0x431bde83
 8003008:	10624dd3 	.word	0x10624dd3

0800300c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e128      	b.n	8003270 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a90      	ldr	r2, [pc, #576]	; (8003278 <HAL_I2S_Init+0x26c>)
 8003036:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fd fd5f 	bl	8000afc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2202      	movs	r2, #2
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003054:	f023 030f 	bic.w	r3, r3, #15
 8003058:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2202      	movs	r2, #2
 8003060:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d060      	beq.n	800312c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003072:	2310      	movs	r3, #16
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e001      	b.n	800307c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b20      	cmp	r3, #32
 8003082:	d802      	bhi.n	800308a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800308a:	2001      	movs	r0, #1
 800308c:	f001 f9c4 	bl	8004418 <HAL_RCCEx_GetPeriphCLKFreq>
 8003090:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800309a:	d125      	bne.n	80030e8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	461a      	mov	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	3305      	adds	r3, #5
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e01f      	b.n	8003106 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	461a      	mov	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	3305      	adds	r3, #5
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	e00e      	b.n	8003106 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	461a      	mov	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	3305      	adds	r3, #5
 8003104:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4a5c      	ldr	r2, [pc, #368]	; (800327c <HAL_I2S_Init+0x270>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	08db      	lsrs	r3, r3, #3
 8003110:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	e003      	b.n	8003134 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800312c:	2302      	movs	r3, #2
 800312e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d902      	bls.n	8003140 <HAL_I2S_Init+0x134>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2bff      	cmp	r3, #255	; 0xff
 800313e:	d907      	bls.n	8003150 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	f043 0210 	orr.w	r2, r3, #16
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e08f      	b.n	8003270 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	ea42 0103 	orr.w	r1, r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	430a      	orrs	r2, r1
 8003162:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800316e:	f023 030f 	bic.w	r3, r3, #15
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6851      	ldr	r1, [r2, #4]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6892      	ldr	r2, [r2, #8]
 800317a:	4311      	orrs	r1, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68d2      	ldr	r2, [r2, #12]
 8003180:	4311      	orrs	r1, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6992      	ldr	r2, [r2, #24]
 8003186:	430a      	orrs	r2, r1
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003192:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d161      	bne.n	8003260 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a38      	ldr	r2, [pc, #224]	; (8003280 <HAL_I2S_Init+0x274>)
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a37      	ldr	r2, [pc, #220]	; (8003284 <HAL_I2S_Init+0x278>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_I2S_Init+0x1a4>
 80031ac:	4b36      	ldr	r3, [pc, #216]	; (8003288 <HAL_I2S_Init+0x27c>)
 80031ae:	e001      	b.n	80031b4 <HAL_I2S_Init+0x1a8>
 80031b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	4932      	ldr	r1, [pc, #200]	; (8003284 <HAL_I2S_Init+0x278>)
 80031bc:	428a      	cmp	r2, r1
 80031be:	d101      	bne.n	80031c4 <HAL_I2S_Init+0x1b8>
 80031c0:	4a31      	ldr	r2, [pc, #196]	; (8003288 <HAL_I2S_Init+0x27c>)
 80031c2:	e001      	b.n	80031c8 <HAL_I2S_Init+0x1bc>
 80031c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031cc:	f023 030f 	bic.w	r3, r3, #15
 80031d0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2b      	ldr	r2, [pc, #172]	; (8003284 <HAL_I2S_Init+0x278>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_I2S_Init+0x1d4>
 80031dc:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <HAL_I2S_Init+0x27c>)
 80031de:	e001      	b.n	80031e4 <HAL_I2S_Init+0x1d8>
 80031e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031e4:	2202      	movs	r2, #2
 80031e6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a25      	ldr	r2, [pc, #148]	; (8003284 <HAL_I2S_Init+0x278>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_I2S_Init+0x1ea>
 80031f2:	4b25      	ldr	r3, [pc, #148]	; (8003288 <HAL_I2S_Init+0x27c>)
 80031f4:	e001      	b.n	80031fa <HAL_I2S_Init+0x1ee>
 80031f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003206:	d003      	beq.n	8003210 <HAL_I2S_Init+0x204>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	e001      	b.n	800321c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003226:	4313      	orrs	r3, r2
 8003228:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003230:	4313      	orrs	r3, r2
 8003232:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800323a:	4313      	orrs	r3, r2
 800323c:	b29a      	uxth	r2, r3
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	4313      	orrs	r3, r2
 8003242:	b29b      	uxth	r3, r3
 8003244:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003248:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <HAL_I2S_Init+0x278>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_I2S_Init+0x24c>
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <HAL_I2S_Init+0x27c>)
 8003256:	e001      	b.n	800325c <HAL_I2S_Init+0x250>
 8003258:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800325c:	897a      	ldrh	r2, [r7, #10]
 800325e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	08003383 	.word	0x08003383
 800327c:	cccccccd 	.word	0xcccccccd
 8003280:	08003499 	.word	0x08003499
 8003284:	40003800 	.word	0x40003800
 8003288:	40003400 	.word	0x40003400

0800328c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	1c9a      	adds	r2, r3, #2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10e      	bne.n	800331c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800330c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ffb8 	bl	800328c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	b292      	uxth	r2, r2
 8003338:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	1c9a      	adds	r2, r3, #2
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10e      	bne.n	800337a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800336a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff93 	bl	80032a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b04      	cmp	r3, #4
 800339c:	d13a      	bne.n	8003414 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d109      	bne.n	80033bc <I2S_IRQHandler+0x3a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d102      	bne.n	80033bc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ffb4 	bl	8003324 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d126      	bne.n	8003414 <I2S_IRQHandler+0x92>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d11f      	bne.n	8003414 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033e4:	2300      	movs	r3, #0
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f043 0202 	orr.w	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ff50 	bl	80032b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b03      	cmp	r3, #3
 800341e:	d136      	bne.n	800348e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d109      	bne.n	800343e <I2S_IRQHandler+0xbc>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b80      	cmp	r3, #128	; 0x80
 8003436:	d102      	bne.n	800343e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff45 	bl	80032c8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b08      	cmp	r3, #8
 8003446:	d122      	bne.n	800348e <I2S_IRQHandler+0x10c>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b20      	cmp	r3, #32
 8003454:	d11b      	bne.n	800348e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003464:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	f043 0204 	orr.w	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ff13 	bl	80032b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a92      	ldr	r2, [pc, #584]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d101      	bne.n	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034b2:	4b92      	ldr	r3, [pc, #584]	; (80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034b4:	e001      	b.n	80034ba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a8b      	ldr	r2, [pc, #556]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034d0:	4b8a      	ldr	r3, [pc, #552]	; (80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034d2:	e001      	b.n	80034d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e4:	d004      	beq.n	80034f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 8099 	bne.w	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d107      	bne.n	800350a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f925 	bl	8003754 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d107      	bne.n	8003524 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9c8 	bl	80038b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d13a      	bne.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d035      	beq.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6e      	ldr	r2, [pc, #440]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003542:	4b6e      	ldr	r3, [pc, #440]	; (80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003544:	e001      	b.n	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4969      	ldr	r1, [pc, #420]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003552:	428b      	cmp	r3, r1
 8003554:	d101      	bne.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003556:	4b69      	ldr	r3, [pc, #420]	; (80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003558:	e001      	b.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800355a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800355e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003562:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003572:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f043 0202 	orr.w	r2, r3, #2
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff fe88 	bl	80032b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	f040 80c3 	bne.w	8003736 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80bd 	beq.w	8003736 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a49      	ldr	r2, [pc, #292]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035d6:	4b49      	ldr	r3, [pc, #292]	; (80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d8:	e001      	b.n	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4944      	ldr	r1, [pc, #272]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035e6:	428b      	cmp	r3, r1
 80035e8:	d101      	bne.n	80035ee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80035ea:	4b44      	ldr	r3, [pc, #272]	; (80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ec:	e001      	b.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80035ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035f6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035f8:	2300      	movs	r3, #0
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	f043 0204 	orr.w	r2, r3, #4
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff fe4a 	bl	80032b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003620:	e089      	b.n	8003736 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b02      	cmp	r3, #2
 800362a:	d107      	bne.n	800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f8be 	bl	80037b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8fd 	bl	8003850 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d12f      	bne.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02a      	beq.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003678:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003686:	e001      	b.n	800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4919      	ldr	r1, [pc, #100]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003694:	428b      	cmp	r3, r1
 8003696:	d101      	bne.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003698:	4b18      	ldr	r3, [pc, #96]	; (80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800369a:	e001      	b.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800369c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fdfa 	bl	80032b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d136      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d031      	beq.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036e0:	e001      	b.n	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80036e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4902      	ldr	r1, [pc, #8]	; (80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ee:	428b      	cmp	r3, r1
 80036f0:	d106      	bne.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80036f2:	4b02      	ldr	r3, [pc, #8]	; (80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f4:	e006      	b.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80036f6:	bf00      	nop
 80036f8:	40003800 	.word	0x40003800
 80036fc:	40003400 	.word	0x40003400
 8003700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003704:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003708:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003718:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f043 0204 	orr.w	r2, r3, #4
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff fdc0 	bl	80032b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003734:	e000      	b.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003736:	bf00      	nop
}
 8003738:	bf00      	nop
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	1c99      	adds	r1, r3, #2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6251      	str	r1, [r2, #36]	; 0x24
 8003766:	881a      	ldrh	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d113      	bne.n	80037ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003794:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff ffc9 	bl	8003740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	1c99      	adds	r1, r3, #2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6251      	str	r1, [r2, #36]	; 0x24
 80037ca:	8819      	ldrh	r1, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <I2SEx_TxISR_I2SExt+0x90>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <I2SEx_TxISR_I2SExt+0x22>
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <I2SEx_TxISR_I2SExt+0x94>)
 80037d8:	e001      	b.n	80037de <I2SEx_TxISR_I2SExt+0x26>
 80037da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037de:	460a      	mov	r2, r1
 80037e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d121      	bne.n	800383e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a12      	ldr	r2, [pc, #72]	; (8003848 <I2SEx_TxISR_I2SExt+0x90>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d101      	bne.n	8003808 <I2SEx_TxISR_I2SExt+0x50>
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <I2SEx_TxISR_I2SExt+0x94>)
 8003806:	e001      	b.n	800380c <I2SEx_TxISR_I2SExt+0x54>
 8003808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	490d      	ldr	r1, [pc, #52]	; (8003848 <I2SEx_TxISR_I2SExt+0x90>)
 8003814:	428b      	cmp	r3, r1
 8003816:	d101      	bne.n	800381c <I2SEx_TxISR_I2SExt+0x64>
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <I2SEx_TxISR_I2SExt+0x94>)
 800381a:	e001      	b.n	8003820 <I2SEx_TxISR_I2SExt+0x68>
 800381c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003820:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003824:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff81 	bl	8003740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40003800 	.word	0x40003800
 800384c:	40003400 	.word	0x40003400

08003850 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68d8      	ldr	r0, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	1c99      	adds	r1, r3, #2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003868:	b282      	uxth	r2, r0
 800386a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d113      	bne.n	80038ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003892:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff4a 	bl	8003740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a20      	ldr	r2, [pc, #128]	; (8003944 <I2SEx_RxISR_I2SExt+0x90>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <I2SEx_RxISR_I2SExt+0x16>
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <I2SEx_RxISR_I2SExt+0x94>)
 80038c8:	e001      	b.n	80038ce <I2SEx_RxISR_I2SExt+0x1a>
 80038ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ce:	68d8      	ldr	r0, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	1c99      	adds	r1, r3, #2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038da:	b282      	uxth	r2, r0
 80038dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d121      	bne.n	800393a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a12      	ldr	r2, [pc, #72]	; (8003944 <I2SEx_RxISR_I2SExt+0x90>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d101      	bne.n	8003904 <I2SEx_RxISR_I2SExt+0x50>
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <I2SEx_RxISR_I2SExt+0x94>)
 8003902:	e001      	b.n	8003908 <I2SEx_RxISR_I2SExt+0x54>
 8003904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	490d      	ldr	r1, [pc, #52]	; (8003944 <I2SEx_RxISR_I2SExt+0x90>)
 8003910:	428b      	cmp	r3, r1
 8003912:	d101      	bne.n	8003918 <I2SEx_RxISR_I2SExt+0x64>
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <I2SEx_RxISR_I2SExt+0x94>)
 8003916:	e001      	b.n	800391c <I2SEx_RxISR_I2SExt+0x68>
 8003918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003920:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d106      	bne.n	800393a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ff03 	bl	8003740 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40003800 	.word	0x40003800
 8003948:	40003400 	.word	0x40003400

0800394c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e267      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d075      	beq.n	8003a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800396a:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b04      	cmp	r3, #4
 8003974:	d00c      	beq.n	8003990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003976:	4b85      	ldr	r3, [pc, #532]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397e:	2b08      	cmp	r3, #8
 8003980:	d112      	bne.n	80039a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003982:	4b82      	ldr	r3, [pc, #520]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800398e:	d10b      	bne.n	80039a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	4b7e      	ldr	r3, [pc, #504]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d05b      	beq.n	8003a54 <HAL_RCC_OscConfig+0x108>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d157      	bne.n	8003a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e242      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b0:	d106      	bne.n	80039c0 <HAL_RCC_OscConfig+0x74>
 80039b2:	4b76      	ldr	r3, [pc, #472]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a75      	ldr	r2, [pc, #468]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e01d      	b.n	80039fc <HAL_RCC_OscConfig+0xb0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x98>
 80039ca:	4b70      	ldr	r3, [pc, #448]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a6f      	ldr	r2, [pc, #444]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a6c      	ldr	r2, [pc, #432]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e00b      	b.n	80039fc <HAL_RCC_OscConfig+0xb0>
 80039e4:	4b69      	ldr	r3, [pc, #420]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a68      	ldr	r2, [pc, #416]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b66      	ldr	r3, [pc, #408]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a65      	ldr	r2, [pc, #404]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fd faa2 	bl	8000f4c <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fd fa9e 	bl	8000f4c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	; 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e207      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	4b5b      	ldr	r3, [pc, #364]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0xc0>
 8003a2a:	e014      	b.n	8003a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fa8e 	bl	8000f4c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fd fa8a 	bl	8000f4c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1f3      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	4b51      	ldr	r3, [pc, #324]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0xe8>
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d063      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a62:	4b4a      	ldr	r3, [pc, #296]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6e:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d11c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7a:	4b44      	ldr	r3, [pc, #272]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d116      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a86:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_RCC_OscConfig+0x152>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d001      	beq.n	8003a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e1c7      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4937      	ldr	r1, [pc, #220]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab2:	e03a      	b.n	8003b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d020      	beq.n	8003afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003abc:	4b34      	ldr	r3, [pc, #208]	; (8003b90 <HAL_RCC_OscConfig+0x244>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac2:	f7fd fa43 	bl	8000f4c <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aca:	f7fd fa3f 	bl	8000f4c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e1a8      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae8:	4b28      	ldr	r3, [pc, #160]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4925      	ldr	r1, [pc, #148]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]
 8003afc:	e015      	b.n	8003b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_RCC_OscConfig+0x244>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd fa22 	bl	8000f4c <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0c:	f7fd fa1e 	bl	8000f4c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e187      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d036      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d016      	beq.n	8003b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <HAL_RCC_OscConfig+0x248>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b44:	f7fd fa02 	bl	8000f4c <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4c:	f7fd f9fe 	bl	8000f4c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e167      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x200>
 8003b6a:	e01b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_OscConfig+0x248>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b72:	f7fd f9eb 	bl	8000f4c <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	e00e      	b.n	8003b98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b7a:	f7fd f9e7 	bl	8000f4c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d907      	bls.n	8003b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e150      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	42470000 	.word	0x42470000
 8003b94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b98:	4b88      	ldr	r3, [pc, #544]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ea      	bne.n	8003b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8097 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb6:	4b81      	ldr	r3, [pc, #516]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10f      	bne.n	8003be2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	4b7d      	ldr	r3, [pc, #500]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	4a7c      	ldr	r2, [pc, #496]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd2:	4b7a      	ldr	r3, [pc, #488]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bde:	2301      	movs	r3, #1
 8003be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be2:	4b77      	ldr	r3, [pc, #476]	; (8003dc0 <HAL_RCC_OscConfig+0x474>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d118      	bne.n	8003c20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bee:	4b74      	ldr	r3, [pc, #464]	; (8003dc0 <HAL_RCC_OscConfig+0x474>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a73      	ldr	r2, [pc, #460]	; (8003dc0 <HAL_RCC_OscConfig+0x474>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfa:	f7fd f9a7 	bl	8000f4c <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c02:	f7fd f9a3 	bl	8000f4c <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e10c      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	4b6a      	ldr	r3, [pc, #424]	; (8003dc0 <HAL_RCC_OscConfig+0x474>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d106      	bne.n	8003c36 <HAL_RCC_OscConfig+0x2ea>
 8003c28:	4b64      	ldr	r3, [pc, #400]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4a63      	ldr	r2, [pc, #396]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	6713      	str	r3, [r2, #112]	; 0x70
 8003c34:	e01c      	b.n	8003c70 <HAL_RCC_OscConfig+0x324>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x30c>
 8003c3e:	4b5f      	ldr	r3, [pc, #380]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	4a5e      	ldr	r2, [pc, #376]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c44:	f043 0304 	orr.w	r3, r3, #4
 8003c48:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4a:	4b5c      	ldr	r3, [pc, #368]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	4a5b      	ldr	r2, [pc, #364]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6713      	str	r3, [r2, #112]	; 0x70
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0x324>
 8003c58:	4b58      	ldr	r3, [pc, #352]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a57      	ldr	r2, [pc, #348]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	4b55      	ldr	r3, [pc, #340]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	4a54      	ldr	r2, [pc, #336]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c6a:	f023 0304 	bic.w	r3, r3, #4
 8003c6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d015      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd f968 	bl	8000f4c <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c80:	f7fd f964 	bl	8000f4c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e0cb      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c96:	4b49      	ldr	r3, [pc, #292]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ee      	beq.n	8003c80 <HAL_RCC_OscConfig+0x334>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca4:	f7fd f952 	bl	8000f4c <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cac:	f7fd f94e 	bl	8000f4c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e0b5      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc2:	4b3e      	ldr	r3, [pc, #248]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ee      	bne.n	8003cac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd4:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	4a38      	ldr	r2, [pc, #224]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80a1 	beq.w	8003e2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cea:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d05c      	beq.n	8003db0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d141      	bne.n	8003d82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfe:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <HAL_RCC_OscConfig+0x478>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fd f922 	bl	8000f4c <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fd f91e 	bl	8000f4c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e087      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	019b      	lsls	r3, r3, #6
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	041b      	lsls	r3, r3, #16
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	061b      	lsls	r3, r3, #24
 8003d4e:	491b      	ldr	r1, [pc, #108]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d54:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <HAL_RCC_OscConfig+0x478>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fd f8f7 	bl	8000f4c <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d62:	f7fd f8f3 	bl	8000f4c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e05c      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x416>
 8003d80:	e054      	b.n	8003e2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <HAL_RCC_OscConfig+0x478>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7fd f8e0 	bl	8000f4c <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d90:	f7fd f8dc 	bl	8000f4c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e045      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x444>
 8003dae:	e03d      	b.n	8003e2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e038      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dc8:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <HAL_RCC_OscConfig+0x4ec>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d028      	beq.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d121      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d11a      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003df8:	4013      	ands	r3, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d111      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	3b01      	subs	r3, #1
 8003e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d001      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800

08003e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0cc      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e50:	4b68      	ldr	r3, [pc, #416]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d90c      	bls.n	8003e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b65      	ldr	r3, [pc, #404]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b63      	ldr	r3, [pc, #396]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0b8      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d020      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e90:	4b59      	ldr	r3, [pc, #356]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4a58      	ldr	r2, [pc, #352]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea8:	4b53      	ldr	r3, [pc, #332]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a52      	ldr	r2, [pc, #328]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb4:	4b50      	ldr	r3, [pc, #320]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	494d      	ldr	r1, [pc, #308]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d044      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	4b47      	ldr	r3, [pc, #284]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d119      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e07f      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d003      	beq.n	8003efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003efa:	4b3f      	ldr	r3, [pc, #252]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e06f      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0a:	4b3b      	ldr	r3, [pc, #236]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e067      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f1a:	4b37      	ldr	r3, [pc, #220]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f023 0203 	bic.w	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4934      	ldr	r1, [pc, #208]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f2c:	f7fd f80e 	bl	8000f4c <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f34:	f7fd f80a 	bl	8000f4c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e04f      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 020c 	and.w	r2, r3, #12
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d1eb      	bne.n	8003f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f5c:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d20c      	bcs.n	8003f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	4b20      	ldr	r3, [pc, #128]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e032      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4916      	ldr	r1, [pc, #88]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fae:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	490e      	ldr	r1, [pc, #56]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fc2:	f000 f821 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	490a      	ldr	r1, [pc, #40]	; (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	5ccb      	ldrb	r3, [r1, r3]
 8003fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fde:	4b09      	ldr	r3, [pc, #36]	; (8004004 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc ff6e 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023c00 	.word	0x40023c00
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	0800873c 	.word	0x0800873c
 8004000:	20000000 	.word	0x20000000
 8004004:	20000004 	.word	0x20000004

08004008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800400c:	b094      	sub	sp, #80	; 0x50
 800400e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	647b      	str	r3, [r7, #68]	; 0x44
 8004014:	2300      	movs	r3, #0
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004018:	2300      	movs	r3, #0
 800401a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004020:	4b79      	ldr	r3, [pc, #484]	; (8004208 <HAL_RCC_GetSysClockFreq+0x200>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 030c 	and.w	r3, r3, #12
 8004028:	2b08      	cmp	r3, #8
 800402a:	d00d      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x40>
 800402c:	2b08      	cmp	r3, #8
 800402e:	f200 80e1 	bhi.w	80041f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_RCC_GetSysClockFreq+0x34>
 8004036:	2b04      	cmp	r3, #4
 8004038:	d003      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x3a>
 800403a:	e0db      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800403c:	4b73      	ldr	r3, [pc, #460]	; (800420c <HAL_RCC_GetSysClockFreq+0x204>)
 800403e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004040:	e0db      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004042:	4b73      	ldr	r3, [pc, #460]	; (8004210 <HAL_RCC_GetSysClockFreq+0x208>)
 8004044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004046:	e0d8      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004048:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <HAL_RCC_GetSysClockFreq+0x200>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004050:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004052:	4b6d      	ldr	r3, [pc, #436]	; (8004208 <HAL_RCC_GetSysClockFreq+0x200>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d063      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405e:	4b6a      	ldr	r3, [pc, #424]	; (8004208 <HAL_RCC_GetSysClockFreq+0x200>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	099b      	lsrs	r3, r3, #6
 8004064:	2200      	movs	r2, #0
 8004066:	63bb      	str	r3, [r7, #56]	; 0x38
 8004068:	63fa      	str	r2, [r7, #60]	; 0x3c
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004070:	633b      	str	r3, [r7, #48]	; 0x30
 8004072:	2300      	movs	r3, #0
 8004074:	637b      	str	r3, [r7, #52]	; 0x34
 8004076:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800407a:	4622      	mov	r2, r4
 800407c:	462b      	mov	r3, r5
 800407e:	f04f 0000 	mov.w	r0, #0
 8004082:	f04f 0100 	mov.w	r1, #0
 8004086:	0159      	lsls	r1, r3, #5
 8004088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800408c:	0150      	lsls	r0, r2, #5
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4621      	mov	r1, r4
 8004094:	1a51      	subs	r1, r2, r1
 8004096:	6139      	str	r1, [r7, #16]
 8004098:	4629      	mov	r1, r5
 800409a:	eb63 0301 	sbc.w	r3, r3, r1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040ac:	4659      	mov	r1, fp
 80040ae:	018b      	lsls	r3, r1, #6
 80040b0:	4651      	mov	r1, sl
 80040b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040b6:	4651      	mov	r1, sl
 80040b8:	018a      	lsls	r2, r1, #6
 80040ba:	4651      	mov	r1, sl
 80040bc:	ebb2 0801 	subs.w	r8, r2, r1
 80040c0:	4659      	mov	r1, fp
 80040c2:	eb63 0901 	sbc.w	r9, r3, r1
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040da:	4690      	mov	r8, r2
 80040dc:	4699      	mov	r9, r3
 80040de:	4623      	mov	r3, r4
 80040e0:	eb18 0303 	adds.w	r3, r8, r3
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	462b      	mov	r3, r5
 80040e8:	eb49 0303 	adc.w	r3, r9, r3
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040fa:	4629      	mov	r1, r5
 80040fc:	024b      	lsls	r3, r1, #9
 80040fe:	4621      	mov	r1, r4
 8004100:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004104:	4621      	mov	r1, r4
 8004106:	024a      	lsls	r2, r1, #9
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410e:	2200      	movs	r2, #0
 8004110:	62bb      	str	r3, [r7, #40]	; 0x28
 8004112:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004114:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004118:	f7fc f856 	bl	80001c8 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4613      	mov	r3, r2
 8004122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004124:	e058      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <HAL_RCC_GetSysClockFreq+0x200>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	099b      	lsrs	r3, r3, #6
 800412c:	2200      	movs	r2, #0
 800412e:	4618      	mov	r0, r3
 8004130:	4611      	mov	r1, r2
 8004132:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	2300      	movs	r3, #0
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
 800413c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004140:	4642      	mov	r2, r8
 8004142:	464b      	mov	r3, r9
 8004144:	f04f 0000 	mov.w	r0, #0
 8004148:	f04f 0100 	mov.w	r1, #0
 800414c:	0159      	lsls	r1, r3, #5
 800414e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004152:	0150      	lsls	r0, r2, #5
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4641      	mov	r1, r8
 800415a:	ebb2 0a01 	subs.w	sl, r2, r1
 800415e:	4649      	mov	r1, r9
 8004160:	eb63 0b01 	sbc.w	fp, r3, r1
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004170:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004174:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004178:	ebb2 040a 	subs.w	r4, r2, sl
 800417c:	eb63 050b 	sbc.w	r5, r3, fp
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	00eb      	lsls	r3, r5, #3
 800418a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800418e:	00e2      	lsls	r2, r4, #3
 8004190:	4614      	mov	r4, r2
 8004192:	461d      	mov	r5, r3
 8004194:	4643      	mov	r3, r8
 8004196:	18e3      	adds	r3, r4, r3
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	464b      	mov	r3, r9
 800419c:	eb45 0303 	adc.w	r3, r5, r3
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ae:	4629      	mov	r1, r5
 80041b0:	028b      	lsls	r3, r1, #10
 80041b2:	4621      	mov	r1, r4
 80041b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041b8:	4621      	mov	r1, r4
 80041ba:	028a      	lsls	r2, r1, #10
 80041bc:	4610      	mov	r0, r2
 80041be:	4619      	mov	r1, r3
 80041c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c2:	2200      	movs	r2, #0
 80041c4:	61bb      	str	r3, [r7, #24]
 80041c6:	61fa      	str	r2, [r7, #28]
 80041c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041cc:	f7fb fffc 	bl	80001c8 <__aeabi_uldivmod>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4613      	mov	r3, r2
 80041d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCC_GetSysClockFreq+0x200>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	3301      	adds	r3, #1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041f2:	e002      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_RCC_GetSysClockFreq+0x204>)
 80041f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3750      	adds	r7, #80	; 0x50
 8004200:	46bd      	mov	sp, r7
 8004202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800
 800420c:	00f42400 	.word	0x00f42400
 8004210:	007a1200 	.word	0x007a1200

08004214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_GetHCLKFreq+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000000 	.word	0x20000000

0800422c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004230:	f7ff fff0 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0a9b      	lsrs	r3, r3, #10
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	0800874c 	.word	0x0800874c

08004254 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004278:	2b00      	cmp	r3, #0
 800427a:	d035      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800427c:	4b62      	ldr	r3, [pc, #392]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004282:	f7fc fe63 	bl	8000f4c <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004288:	e008      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800428a:	f7fc fe5f 	bl	8000f4c <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e0b0      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800429c:	4b5b      	ldr	r3, [pc, #364]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	019a      	lsls	r2, r3, #6
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	071b      	lsls	r3, r3, #28
 80042b4:	4955      	ldr	r1, [pc, #340]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042bc:	4b52      	ldr	r3, [pc, #328]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042c2:	f7fc fe43 	bl	8000f4c <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042ca:	f7fc fe3f 	bl	8000f4c <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e090      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042dc:	4b4b      	ldr	r3, [pc, #300]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8083 	beq.w	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	4b44      	ldr	r3, [pc, #272]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a43      	ldr	r2, [pc, #268]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
 8004306:	4b41      	ldr	r3, [pc, #260]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004312:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a3e      	ldr	r2, [pc, #248]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800431e:	f7fc fe15 	bl	8000f4c <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004326:	f7fc fe11 	bl	8000f4c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e062      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004338:	4b35      	ldr	r3, [pc, #212]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004344:	4b31      	ldr	r3, [pc, #196]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02f      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	429a      	cmp	r2, r3
 8004360:	d028      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004362:	4b2a      	ldr	r3, [pc, #168]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800436c:	4b29      	ldr	r3, [pc, #164]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004372:	4b28      	ldr	r3, [pc, #160]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004378:	4a24      	ldr	r2, [pc, #144]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b01      	cmp	r3, #1
 8004388:	d114      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800438a:	f7fc fddf 	bl	8000f4c <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004390:	e00a      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fc fddb 	bl	8000f4c <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e02a      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a8:	4b18      	ldr	r3, [pc, #96]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ee      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c0:	d10d      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	490d      	ldr	r1, [pc, #52]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]
 80043dc:	e005      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043e8:	6093      	str	r3, [r2, #8]
 80043ea:	4b08      	ldr	r3, [pc, #32]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f6:	4905      	ldr	r1, [pc, #20]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	42470068 	.word	0x42470068
 800440c:	40023800 	.word	0x40023800
 8004410:	40007000 	.word	0x40007000
 8004414:	42470e40 	.word	0x42470e40

08004418 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d13e      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004436:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d12f      	bne.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800444c:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800444e:	617b      	str	r3, [r7, #20]
          break;
 8004450:	e02f      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004452:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800445e:	d108      	bne.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004460:	4b18      	ldr	r3, [pc, #96]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004468:	4a18      	ldr	r2, [pc, #96]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800446a:	fbb2 f3f3 	udiv	r3, r2, r3
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e007      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004472:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800447a:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004482:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004488:	099b      	lsrs	r3, r3, #6
 800448a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	fb02 f303 	mul.w	r3, r2, r3
 8004494:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449c:	0f1b      	lsrs	r3, r3, #28
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	617b      	str	r3, [r7, #20]
          break;
 80044aa:	e002      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
          break;
 80044b0:	bf00      	nop
        }
      }
      break;
 80044b2:	bf00      	nop
    }
  }
  return frequency;
 80044b4:	697b      	ldr	r3, [r7, #20]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800
 80044c8:	00bb8000 	.word	0x00bb8000
 80044cc:	007a1200 	.word	0x007a1200
 80044d0:	00f42400 	.word	0x00f42400

080044d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e07b      	b.n	80045de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d108      	bne.n	8004500 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f6:	d009      	beq.n	800450c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	61da      	str	r2, [r3, #28]
 80044fe:	e005      	b.n	800450c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fc fb68 	bl	8000bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004542:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	ea42 0103 	orr.w	r1, r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	f003 0104 	and.w	r1, r3, #4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0210 	and.w	r2, r3, #16
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e041      	b.n	800467c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7fc fb3d 	bl	8000c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 fa95 	bl	8004b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d001      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e04e      	b.n	800473a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a23      	ldr	r2, [pc, #140]	; (8004748 <HAL_TIM_Base_Start_IT+0xc4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d022      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c6:	d01d      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1f      	ldr	r2, [pc, #124]	; (800474c <HAL_TIM_Base_Start_IT+0xc8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <HAL_TIM_Base_Start_IT+0xcc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <HAL_TIM_Base_Start_IT+0xd0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1b      	ldr	r2, [pc, #108]	; (8004758 <HAL_TIM_Base_Start_IT+0xd4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a19      	ldr	r2, [pc, #100]	; (800475c <HAL_TIM_Base_Start_IT+0xd8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a18      	ldr	r2, [pc, #96]	; (8004760 <HAL_TIM_Base_Start_IT+0xdc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d111      	bne.n	8004728 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b06      	cmp	r3, #6
 8004714:	d010      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004726:	e007      	b.n	8004738 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40010400 	.word	0x40010400
 800475c:	40014000 	.word	0x40014000
 8004760:	40001800 	.word	0x40001800

08004764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d122      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b02      	cmp	r3, #2
 8004786:	d11b      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0202 	mvn.w	r2, #2
 8004790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f9b5 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 80047ac:	e005      	b.n	80047ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9a7 	bl	8004b02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f9b8 	bl	8004b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d122      	bne.n	8004814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d11b      	bne.n	8004814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0204 	mvn.w	r2, #4
 80047e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f98b 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 8004800:	e005      	b.n	800480e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f97d 	bl	8004b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f98e 	bl	8004b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b08      	cmp	r3, #8
 8004820:	d122      	bne.n	8004868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b08      	cmp	r3, #8
 800482e:	d11b      	bne.n	8004868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0208 	mvn.w	r2, #8
 8004838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2204      	movs	r2, #4
 800483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f961 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f953 	bl	8004b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f964 	bl	8004b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b10      	cmp	r3, #16
 8004874:	d122      	bne.n	80048bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b10      	cmp	r3, #16
 8004882:	d11b      	bne.n	80048bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0210 	mvn.w	r2, #16
 800488c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2208      	movs	r2, #8
 8004892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f937 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f929 	bl	8004b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f93a 	bl	8004b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d10e      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0201 	mvn.w	r2, #1
 80048e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc f87e 	bl	80009e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f2:	2b80      	cmp	r3, #128	; 0x80
 80048f4:	d10e      	bne.n	8004914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d107      	bne.n	8004914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fae0 	bl	8004ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491e:	2b40      	cmp	r3, #64	; 0x40
 8004920:	d10e      	bne.n	8004940 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d107      	bne.n	8004940 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8ff 	bl	8004b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b20      	cmp	r3, #32
 800494c:	d10e      	bne.n	800496c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b20      	cmp	r3, #32
 800495a:	d107      	bne.n	800496c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0220 	mvn.w	r2, #32
 8004964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 faaa 	bl	8004ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800496c:	bf00      	nop
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIM_ConfigClockSource+0x1c>
 800498c:	2302      	movs	r3, #2
 800498e:	e0b4      	b.n	8004afa <HAL_TIM_ConfigClockSource+0x186>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c8:	d03e      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0xd4>
 80049ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ce:	f200 8087 	bhi.w	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d6:	f000 8086 	beq.w	8004ae6 <HAL_TIM_ConfigClockSource+0x172>
 80049da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049de:	d87f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049e0:	2b70      	cmp	r3, #112	; 0x70
 80049e2:	d01a      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0xa6>
 80049e4:	2b70      	cmp	r3, #112	; 0x70
 80049e6:	d87b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049e8:	2b60      	cmp	r3, #96	; 0x60
 80049ea:	d050      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x11a>
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	d877      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049f0:	2b50      	cmp	r3, #80	; 0x50
 80049f2:	d03c      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0xfa>
 80049f4:	2b50      	cmp	r3, #80	; 0x50
 80049f6:	d873      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d058      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x13a>
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d86f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8004a00:	2b30      	cmp	r3, #48	; 0x30
 8004a02:	d064      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a04:	2b30      	cmp	r3, #48	; 0x30
 8004a06:	d86b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d060      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d867      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05c      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d05a      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a18:	e062      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6899      	ldr	r1, [r3, #8]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f000 f9ad 	bl	8004d88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	609a      	str	r2, [r3, #8]
      break;
 8004a46:	e04f      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f000 f996 	bl	8004d88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6a:	609a      	str	r2, [r3, #8]
      break;
 8004a6c:	e03c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6859      	ldr	r1, [r3, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f000 f90a 	bl	8004c94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2150      	movs	r1, #80	; 0x50
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f963 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004a8c:	e02c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 f929 	bl	8004cf2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2160      	movs	r1, #96	; 0x60
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f953 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004aac:	e01c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 f8ea 	bl	8004c94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f943 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e00c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f000 f93a 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004ade:	e003      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae4:	e000      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a40      	ldr	r2, [pc, #256]	; (8004c68 <TIM_Base_SetConfig+0x114>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b72:	d00f      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a3d      	ldr	r2, [pc, #244]	; (8004c6c <TIM_Base_SetConfig+0x118>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00b      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a3c      	ldr	r2, [pc, #240]	; (8004c70 <TIM_Base_SetConfig+0x11c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a3b      	ldr	r2, [pc, #236]	; (8004c74 <TIM_Base_SetConfig+0x120>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3a      	ldr	r2, [pc, #232]	; (8004c78 <TIM_Base_SetConfig+0x124>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d108      	bne.n	8004ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a2f      	ldr	r2, [pc, #188]	; (8004c68 <TIM_Base_SetConfig+0x114>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d02b      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb4:	d027      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2c      	ldr	r2, [pc, #176]	; (8004c6c <TIM_Base_SetConfig+0x118>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d023      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2b      	ldr	r2, [pc, #172]	; (8004c70 <TIM_Base_SetConfig+0x11c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01f      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2a      	ldr	r2, [pc, #168]	; (8004c74 <TIM_Base_SetConfig+0x120>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01b      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <TIM_Base_SetConfig+0x124>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d017      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <TIM_Base_SetConfig+0x128>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <TIM_Base_SetConfig+0x12c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00f      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a26      	ldr	r2, [pc, #152]	; (8004c84 <TIM_Base_SetConfig+0x130>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00b      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a25      	ldr	r2, [pc, #148]	; (8004c88 <TIM_Base_SetConfig+0x134>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d007      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a24      	ldr	r2, [pc, #144]	; (8004c8c <TIM_Base_SetConfig+0x138>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a23      	ldr	r2, [pc, #140]	; (8004c90 <TIM_Base_SetConfig+0x13c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d108      	bne.n	8004c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a0a      	ldr	r2, [pc, #40]	; (8004c68 <TIM_Base_SetConfig+0x114>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <TIM_Base_SetConfig+0xf8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a0c      	ldr	r2, [pc, #48]	; (8004c78 <TIM_Base_SetConfig+0x124>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d103      	bne.n	8004c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	615a      	str	r2, [r3, #20]
}
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40000400 	.word	0x40000400
 8004c70:	40000800 	.word	0x40000800
 8004c74:	40000c00 	.word	0x40000c00
 8004c78:	40010400 	.word	0x40010400
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40014400 	.word	0x40014400
 8004c84:	40014800 	.word	0x40014800
 8004c88:	40001800 	.word	0x40001800
 8004c8c:	40001c00 	.word	0x40001c00
 8004c90:	40002000 	.word	0x40002000

08004c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f023 0201 	bic.w	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 030a 	bic.w	r3, r3, #10
 8004cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	621a      	str	r2, [r3, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b087      	sub	sp, #28
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f023 0210 	bic.w	r2, r3, #16
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	031b      	lsls	r3, r3, #12
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f043 0307 	orr.w	r3, r3, #7
 8004d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	609a      	str	r2, [r3, #8]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	021a      	lsls	r2, r3, #8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	609a      	str	r2, [r3, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e05a      	b.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d01d      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1d      	ldr	r2, [pc, #116]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1a      	ldr	r2, [pc, #104]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a18      	ldr	r2, [pc, #96]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10c      	bne.n	8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	40010400 	.word	0x40010400
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40001800 	.word	0x40001800

08004ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ee8:	b084      	sub	sp, #16
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	f107 001c 	add.w	r0, r7, #28
 8004ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d122      	bne.n	8004f46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d105      	bne.n	8004f3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f9c0 	bl	80052c0 <USB_CoreReset>
 8004f40:	4603      	mov	r3, r0
 8004f42:	73fb      	strb	r3, [r7, #15]
 8004f44:	e01a      	b.n	8004f7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f9b4 	bl	80052c0 <USB_CoreReset>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f6e:	e005      	b.n	8004f7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10b      	bne.n	8004f9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f043 0206 	orr.w	r2, r3, #6
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fa6:	b004      	add	sp, #16
 8004fa8:	4770      	bx	lr

08004faa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f023 0201 	bic.w	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d115      	bne.n	800503c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800501c:	2001      	movs	r0, #1
 800501e:	f7fb ffa1 	bl	8000f64 <HAL_Delay>
      ms++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3301      	adds	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f93a 	bl	80052a2 <USB_GetMode>
 800502e:	4603      	mov	r3, r0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d01e      	beq.n	8005072 <USB_SetCurrentMode+0x84>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b31      	cmp	r3, #49	; 0x31
 8005038:	d9f0      	bls.n	800501c <USB_SetCurrentMode+0x2e>
 800503a:	e01a      	b.n	8005072 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d115      	bne.n	800506e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800504e:	2001      	movs	r0, #1
 8005050:	f7fb ff88 	bl	8000f64 <HAL_Delay>
      ms++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3301      	adds	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f921 	bl	80052a2 <USB_GetMode>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <USB_SetCurrentMode+0x84>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b31      	cmp	r3, #49	; 0x31
 800506a:	d9f0      	bls.n	800504e <USB_SetCurrentMode+0x60>
 800506c:	e001      	b.n	8005072 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e005      	b.n	800507e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b32      	cmp	r3, #50	; 0x32
 8005076:	d101      	bne.n	800507c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a13      	ldr	r2, [pc, #76]	; (80050ec <USB_FlushTxFifo+0x64>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e01b      	b.n	80050e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	daf2      	bge.n	8005096 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	019b      	lsls	r3, r3, #6
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3301      	adds	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a08      	ldr	r2, [pc, #32]	; (80050ec <USB_FlushTxFifo+0x64>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e006      	b.n	80050e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d0f0      	beq.n	80050c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	00030d40 	.word	0x00030d40

080050f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3301      	adds	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a11      	ldr	r2, [pc, #68]	; (800514c <USB_FlushRxFifo+0x5c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e018      	b.n	8005140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	daf2      	bge.n	80050fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2210      	movs	r2, #16
 800511e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3301      	adds	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4a08      	ldr	r2, [pc, #32]	; (800514c <USB_FlushRxFifo+0x5c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e006      	b.n	8005140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b10      	cmp	r3, #16
 800513c:	d0f0      	beq.n	8005120 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	00030d40 	.word	0x00030d40

08005150 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	; 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4611      	mov	r1, r2
 800515c:	461a      	mov	r2, r3
 800515e:	460b      	mov	r3, r1
 8005160:	71fb      	strb	r3, [r7, #7]
 8005162:	4613      	mov	r3, r2
 8005164:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800516e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005172:	2b00      	cmp	r3, #0
 8005174:	d123      	bne.n	80051be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005176:	88bb      	ldrh	r3, [r7, #4]
 8005178:	3303      	adds	r3, #3
 800517a:	089b      	lsrs	r3, r3, #2
 800517c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800517e:	2300      	movs	r3, #0
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	e018      	b.n	80051b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	031a      	lsls	r2, r3, #12
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	4413      	add	r3, r2
 800518c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005190:	461a      	mov	r2, r3
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	3301      	adds	r3, #1
 800519c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	3301      	adds	r3, #1
 80051a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	3301      	adds	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	3301      	adds	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d3e2      	bcc.n	8005184 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3724      	adds	r7, #36	; 0x24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b08b      	sub	sp, #44	; 0x2c
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	4613      	mov	r3, r2
 80051d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	e014      	b.n	8005222 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	601a      	str	r2, [r3, #0]
    pDest++;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	3301      	adds	r3, #1
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	3301      	adds	r3, #1
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	3301      	adds	r3, #1
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	3301      	adds	r3, #1
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	3301      	adds	r3, #1
 8005220:	623b      	str	r3, [r7, #32]
 8005222:	6a3a      	ldr	r2, [r7, #32]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	429a      	cmp	r2, r3
 8005228:	d3e6      	bcc.n	80051f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800522a:	8bfb      	ldrh	r3, [r7, #30]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01e      	beq.n	800526e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523a:	461a      	mov	r2, r3
 800523c:	f107 0310 	add.w	r3, r7, #16
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
 8005250:	b2da      	uxtb	r2, r3
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	701a      	strb	r2, [r3, #0]
      i++;
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	3301      	adds	r3, #1
 800525a:	623b      	str	r3, [r7, #32]
      pDest++;
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	3301      	adds	r3, #1
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005262:	8bfb      	ldrh	r3, [r7, #30]
 8005264:	3b01      	subs	r3, #1
 8005266:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005268:	8bfb      	ldrh	r3, [r7, #30]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1ea      	bne.n	8005244 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005270:	4618      	mov	r0, r3
 8005272:	372c      	adds	r7, #44	; 0x2c
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4013      	ands	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005294:	68fb      	ldr	r3, [r7, #12]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f003 0301 	and.w	r3, r3, #1
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3301      	adds	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a13      	ldr	r2, [pc, #76]	; (8005324 <USB_CoreReset+0x64>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e01b      	b.n	8005316 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	daf2      	bge.n	80052cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f043 0201 	orr.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3301      	adds	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a09      	ldr	r2, [pc, #36]	; (8005324 <USB_CoreReset+0x64>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e006      	b.n	8005316 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b01      	cmp	r3, #1
 8005312:	d0f0      	beq.n	80052f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	00030d40 	.word	0x00030d40

08005328 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005328:	b084      	sub	sp, #16
 800532a:	b580      	push	{r7, lr}
 800532c:	b086      	sub	sp, #24
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005348:	461a      	mov	r2, r3
 800534a:	2300      	movs	r3, #0
 800534c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d018      	beq.n	80053b0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d10a      	bne.n	800539a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	e014      	b.n	80053c4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053a8:	f023 0304 	bic.w	r3, r3, #4
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	e009      	b.n	80053c4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053be:	f023 0304 	bic.w	r3, r3, #4
 80053c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053c4:	2110      	movs	r1, #16
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff fe5e 	bl	8005088 <USB_FlushTxFifo>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff fe8a 	bl	80050f0 <USB_FlushRxFifo>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	e015      	b.n	8005418 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f8:	461a      	mov	r2, r3
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3301      	adds	r3, #1
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	429a      	cmp	r2, r3
 800541e:	d3e5      	bcc.n	80053ec <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800542c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00b      	beq.n	8005452 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005440:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a13      	ldr	r2, [pc, #76]	; (8005494 <USB_HostInit+0x16c>)
 8005446:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a13      	ldr	r2, [pc, #76]	; (8005498 <USB_HostInit+0x170>)
 800544c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005450:	e009      	b.n	8005466 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2280      	movs	r2, #128	; 0x80
 8005456:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a10      	ldr	r2, [pc, #64]	; (800549c <USB_HostInit+0x174>)
 800545c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a0f      	ldr	r2, [pc, #60]	; (80054a0 <USB_HostInit+0x178>)
 8005462:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	2b00      	cmp	r3, #0
 800546a:	d105      	bne.n	8005478 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f043 0210 	orr.w	r2, r3, #16
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <USB_HostInit+0x17c>)
 800547e:	4313      	orrs	r3, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005490:	b004      	add	sp, #16
 8005492:	4770      	bx	lr
 8005494:	01000200 	.word	0x01000200
 8005498:	00e00300 	.word	0x00e00300
 800549c:	00600080 	.word	0x00600080
 80054a0:	004000e0 	.word	0x004000e0
 80054a4:	a3200008 	.word	0xa3200008

080054a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054e0:	4313      	orrs	r3, r2
 80054e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d107      	bne.n	80054fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f0:	461a      	mov	r2, r3
 80054f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054f6:	6053      	str	r3, [r2, #4]
 80054f8:	e009      	b.n	800550e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d106      	bne.n	800550e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005506:	461a      	mov	r2, r3
 8005508:	f241 7370 	movw	r3, #6000	; 0x1770
 800550c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800553c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800554a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800554c:	2064      	movs	r0, #100	; 0x64
 800554e:	f7fb fd09 	bl	8000f64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800555a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800555e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005560:	200a      	movs	r0, #10
 8005562:	f7fb fcff 	bl	8000f64 <HAL_Delay>

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005594:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <USB_DriveVbus+0x44>
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d106      	bne.n	80055b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055be:	d109      	bne.n	80055d4 <USB_DriveVbus+0x64>
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b085      	sub	sp, #20
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	0c5b      	lsrs	r3, r3, #17
 8005600:	f003 0303 	and.w	r3, r3, #3
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	b29b      	uxth	r3, r3
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	4608      	mov	r0, r1
 800563e:	4611      	mov	r1, r2
 8005640:	461a      	mov	r2, r3
 8005642:	4603      	mov	r3, r0
 8005644:	70fb      	strb	r3, [r7, #3]
 8005646:	460b      	mov	r3, r1
 8005648:	70bb      	strb	r3, [r7, #2]
 800564a:	4613      	mov	r3, r2
 800564c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	461a      	mov	r2, r3
 8005664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005668:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800566a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800566e:	2b03      	cmp	r3, #3
 8005670:	d87e      	bhi.n	8005770 <USB_HC_Init+0x13c>
 8005672:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <USB_HC_Init+0x44>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	08005689 	.word	0x08005689
 800567c:	08005733 	.word	0x08005733
 8005680:	08005689 	.word	0x08005689
 8005684:	080056f5 	.word	0x080056f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4413      	add	r3, r2
 8005690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005694:	461a      	mov	r2, r3
 8005696:	f240 439d 	movw	r3, #1181	; 0x49d
 800569a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800569c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	da10      	bge.n	80056c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	78fa      	ldrb	r2, [r7, #3]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80056c4:	e057      	b.n	8005776 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d051      	beq.n	8005776 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	78fa      	ldrb	r2, [r7, #3]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056f0:	60d3      	str	r3, [r2, #12]
      break;
 80056f2:	e040      	b.n	8005776 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005700:	461a      	mov	r2, r3
 8005702:	f240 639d 	movw	r3, #1693	; 0x69d
 8005706:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800570c:	2b00      	cmp	r3, #0
 800570e:	da34      	bge.n	800577a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	4413      	add	r3, r2
 8005718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	440a      	add	r2, r1
 8005726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800572a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005730:	e023      	b.n	800577a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4413      	add	r3, r2
 800573a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573e:	461a      	mov	r2, r3
 8005740:	f240 2325 	movw	r3, #549	; 0x225
 8005744:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005746:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800574a:	2b00      	cmp	r3, #0
 800574c:	da17      	bge.n	800577e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	440a      	add	r2, r1
 8005764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005768:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800576c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800576e:	e006      	b.n	800577e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	77fb      	strb	r3, [r7, #31]
      break;
 8005774:	e004      	b.n	8005780 <USB_HC_Init+0x14c>
      break;
 8005776:	bf00      	nop
 8005778:	e002      	b.n	8005780 <USB_HC_Init+0x14c>
      break;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <USB_HC_Init+0x14c>
      break;
 800577e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4413      	add	r3, r2
 8005788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	440a      	add	r2, r1
 8005796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800579a:	f043 0302 	orr.w	r3, r3, #2
 800579e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057a6:	699a      	ldr	r2, [r3, #24]
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	2101      	movs	r1, #1
 80057b0:	fa01 f303 	lsl.w	r3, r1, r3
 80057b4:	6939      	ldr	r1, [r7, #16]
 80057b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057ba:	4313      	orrs	r3, r2
 80057bc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80057ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	da03      	bge.n	80057da <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80057d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e001      	b.n	80057de <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff feff 	bl	80055e2 <USB_GetHostSpeed>
 80057e4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80057e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d106      	bne.n	80057fc <USB_HC_Init+0x1c8>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d003      	beq.n	80057fc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80057f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e001      	b.n	8005800 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005800:	787b      	ldrb	r3, [r7, #1]
 8005802:	059b      	lsls	r3, r3, #22
 8005804:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005808:	78bb      	ldrb	r3, [r7, #2]
 800580a:	02db      	lsls	r3, r3, #11
 800580c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005810:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005812:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005816:	049b      	lsls	r3, r3, #18
 8005818:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800581c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800581e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005820:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005824:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	0159      	lsls	r1, r3, #5
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	440b      	add	r3, r1
 8005832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005836:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800583c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800583e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005842:	2b03      	cmp	r3, #3
 8005844:	d003      	beq.n	800584e <USB_HC_Init+0x21a>
 8005846:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d10f      	bne.n	800586e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	440a      	add	r2, r1
 8005864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005868:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800586c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800586e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08c      	sub	sp, #48	; 0x30
 800587c:	af02      	add	r7, sp, #8
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4613      	mov	r3, r2
 8005884:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005894:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d02d      	beq.n	80058fe <USB_HC_StartXfer+0x86>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	791b      	ldrb	r3, [r3, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d129      	bne.n	80058fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d117      	bne.n	80058e0 <USB_HC_StartXfer+0x68>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	79db      	ldrb	r3, [r3, #7]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <USB_HC_StartXfer+0x48>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	79db      	ldrb	r3, [r3, #7]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d10f      	bne.n	80058e0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	6a3a      	ldr	r2, [r7, #32]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058de:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10b      	bne.n	80058fe <USB_HC_StartXfer+0x86>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	795b      	ldrb	r3, [r3, #5]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d107      	bne.n	80058fe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	4619      	mov	r1, r3
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fa0f 	bl	8005d18 <USB_DoPing>
      return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e0f8      	b.n	8005af0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d018      	beq.n	8005938 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	8912      	ldrh	r2, [r2, #8]
 800590e:	4413      	add	r3, r2
 8005910:	3b01      	subs	r3, #1
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	8912      	ldrh	r2, [r2, #8]
 8005916:	fbb3 f3f2 	udiv	r3, r3, r2
 800591a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800591c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800591e:	8b7b      	ldrh	r3, [r7, #26]
 8005920:	429a      	cmp	r2, r3
 8005922:	d90b      	bls.n	800593c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005924:	8b7b      	ldrh	r3, [r7, #26]
 8005926:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005928:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	8912      	ldrh	r2, [r2, #8]
 800592e:	fb03 f202 	mul.w	r2, r3, r2
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	611a      	str	r2, [r3, #16]
 8005936:	e001      	b.n	800593c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005938:	2301      	movs	r3, #1
 800593a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	78db      	ldrb	r3, [r3, #3]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005944:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	8912      	ldrh	r2, [r2, #8]
 800594a:	fb03 f202 	mul.w	r2, r3, r2
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	611a      	str	r2, [r3, #16]
 8005952:	e003      	b.n	800595c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005966:	04d9      	lsls	r1, r3, #19
 8005968:	4b63      	ldr	r3, [pc, #396]	; (8005af8 <USB_HC_StartXfer+0x280>)
 800596a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800596c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	7a9b      	ldrb	r3, [r3, #10]
 8005972:	075b      	lsls	r3, r3, #29
 8005974:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005978:	69f9      	ldr	r1, [r7, #28]
 800597a:	0148      	lsls	r0, r1, #5
 800597c:	6a39      	ldr	r1, [r7, #32]
 800597e:	4401      	add	r1, r0
 8005980:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005984:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005986:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	68d9      	ldr	r1, [r3, #12]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	4413      	add	r3, r2
 800599a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599e:	460a      	mov	r2, r1
 80059a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bf0c      	ite	eq
 80059b2:	2301      	moveq	r3, #1
 80059b4:	2300      	movne	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69fa      	ldr	r2, [r7, #28]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	6a3a      	ldr	r2, [r7, #32]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	7e7b      	ldrb	r3, [r7, #25]
 80059ea:	075b      	lsls	r3, r3, #29
 80059ec:	69f9      	ldr	r1, [r7, #28]
 80059ee:	0148      	lsls	r0, r1, #5
 80059f0:	6a39      	ldr	r1, [r7, #32]
 80059f2:	4401      	add	r1, r0
 80059f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80059f8:	4313      	orrs	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a12:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	78db      	ldrb	r3, [r3, #3]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	e003      	b.n	8005a2e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a2c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a34:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a42:	461a      	mov	r2, r3
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e04e      	b.n	8005af0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	78db      	ldrb	r3, [r3, #3]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d149      	bne.n	8005aee <USB_HC_StartXfer+0x276>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d045      	beq.n	8005aee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	79db      	ldrb	r3, [r3, #7]
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d830      	bhi.n	8005acc <USB_HC_StartXfer+0x254>
 8005a6a:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <USB_HC_StartXfer+0x1f8>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005a81 	.word	0x08005a81
 8005a74:	08005aa5 	.word	0x08005aa5
 8005a78:	08005a81 	.word	0x08005a81
 8005a7c:	08005aa5 	.word	0x08005aa5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	3303      	adds	r3, #3
 8005a86:	089b      	lsrs	r3, r3, #2
 8005a88:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005a8a:	8afa      	ldrh	r2, [r7, #22]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d91c      	bls.n	8005ad0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005aa2:	e015      	b.n	8005ad0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	3303      	adds	r3, #3
 8005aaa:	089b      	lsrs	r3, r3, #2
 8005aac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005aae:	8afa      	ldrh	r2, [r7, #22]
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d90a      	bls.n	8005ad4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	619a      	str	r2, [r3, #24]
        }
        break;
 8005aca:	e003      	b.n	8005ad4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005acc:	bf00      	nop
 8005ace:	e002      	b.n	8005ad6 <USB_HC_StartXfer+0x25e>
        break;
 8005ad0:	bf00      	nop
 8005ad2:	e000      	b.n	8005ad6 <USB_HC_StartXfer+0x25e>
        break;
 8005ad4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68d9      	ldr	r1, [r3, #12]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	785a      	ldrb	r2, [r3, #1]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	9000      	str	r0, [sp, #0]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff fb31 	bl	8005150 <USB_WritePacket>
  }

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3728      	adds	r7, #40	; 0x28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	1ff80000 	.word	0x1ff80000

08005afc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	b29b      	uxth	r3, r3
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b089      	sub	sp, #36	; 0x24
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	460b      	mov	r3, r1
 8005b28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	0c9b      	lsrs	r3, r3, #18
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	0fdb      	lsrs	r3, r3, #31
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d104      	bne.n	8005b78 <USB_HC_Halt+0x5a>
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e0c8      	b.n	8005d0a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <USB_HC_Halt+0x66>
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d163      	bne.n	8005c4c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f040 80ab 	bne.w	8005d08 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d133      	bne.n	8005c26 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	0151      	lsls	r1, r2, #5
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bdc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bfc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3301      	adds	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c0a:	d81d      	bhi.n	8005c48 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c22:	d0ec      	beq.n	8005bfe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c24:	e070      	b.n	8005d08 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c44:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c46:	e05f      	b.n	8005d08 <USB_HC_Halt+0x1ea>
            break;
 8005c48:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c4a:	e05d      	b.n	8005d08 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c6a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d133      	bne.n	8005ce4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c9a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cc8:	d81d      	bhi.n	8005d06 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ce0:	d0ec      	beq.n	8005cbc <USB_HC_Halt+0x19e>
 8005ce2:	e011      	b.n	8005d08 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	e000      	b.n	8005d08 <USB_HC_Halt+0x1ea>
          break;
 8005d06:	bf00      	nop
    }
  }

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3724      	adds	r7, #36	; 0x24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	04da      	lsls	r2, r3, #19
 8005d34:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <USB_DoPing+0x74>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d48:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d60:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d68:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d76:	461a      	mov	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	1ff80000 	.word	0x1ff80000

08005d90 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff f911 	bl	8004fcc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005daa:	2110      	movs	r1, #16
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff f96b 	bl	8005088 <USB_FlushTxFifo>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff f997 	bl	80050f0 <USB_FlushRxFifo>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	e01f      	b.n	8005e12 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005de8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005df0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005df8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	461a      	mov	r2, r3
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	61bb      	str	r3, [r7, #24]
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b0f      	cmp	r3, #15
 8005e16:	d9dc      	bls.n	8005dd2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61bb      	str	r3, [r7, #24]
 8005e1c:	e034      	b.n	8005e88 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e34:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e52:	461a      	mov	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e64:	d80c      	bhi.n	8005e80 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e7c:	d0ec      	beq.n	8005e58 <USB_StopHost+0xc8>
 8005e7e:	e000      	b.n	8005e82 <USB_StopHost+0xf2>
        break;
 8005e80:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	3301      	adds	r3, #1
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	2b0f      	cmp	r3, #15
 8005e8c:	d9c7      	bls.n	8005e1e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e94:	461a      	mov	r2, r3
 8005e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e9a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ea2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff f880 	bl	8004faa <USB_EnableGlobalInt>

  return ret;
 8005eaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3720      	adds	r7, #32
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b089      	sub	sp, #36	; 0x24
 8005eb8:	af04      	add	r7, sp, #16
 8005eba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	2102      	movs	r1, #2
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fc66 	bl	8006794 <USBH_FindInterface>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	2bff      	cmp	r3, #255	; 0xff
 8005ed0:	d002      	beq.n	8005ed8 <USBH_CDC_InterfaceInit+0x24>
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d901      	bls.n	8005edc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e13d      	b.n	8006158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fc3b 	bl	800675c <USBH_SelectInterface>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005eea:	7bbb      	ldrb	r3, [r7, #14]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e131      	b.n	8006158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005efa:	2050      	movs	r0, #80	; 0x50
 8005efc:	f002 fafa 	bl	80084f4 <malloc>
 8005f00:	4603      	mov	r3, r0
 8005f02:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005f14:	2302      	movs	r3, #2
 8005f16:	e11f      	b.n	8006158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005f18:	2250      	movs	r2, #80	; 0x50
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	68b8      	ldr	r0, [r7, #8]
 8005f1e:	f002 faf9 	bl	8008514 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	211a      	movs	r1, #26
 8005f28:	fb01 f303 	mul.w	r3, r1, r3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	b25b      	sxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	da15      	bge.n	8005f66 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	211a      	movs	r1, #26
 8005f40:	fb01 f303 	mul.w	r3, r1, r3
 8005f44:	4413      	add	r3, r2
 8005f46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	211a      	movs	r1, #26
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f60:	881a      	ldrh	r2, [r3, #0]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 ff2c 	bl	8007dca <USBH_AllocPipe>
 8005f72:	4603      	mov	r3, r0
 8005f74:	461a      	mov	r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	7819      	ldrb	r1, [r3, #0]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	7858      	ldrb	r0, [r3, #1]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	8952      	ldrh	r2, [r2, #10]
 8005f92:	9202      	str	r2, [sp, #8]
 8005f94:	2203      	movs	r2, #3
 8005f96:	9201      	str	r2, [sp, #4]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 fee4 	bl	8007d6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f002 f9f3 	bl	8008398 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	210a      	movs	r1, #10
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fbeb 	bl	8006794 <USBH_FindInterface>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2bff      	cmp	r3, #255	; 0xff
 8005fc6:	d002      	beq.n	8005fce <USBH_CDC_InterfaceInit+0x11a>
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d901      	bls.n	8005fd2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e0c2      	b.n	8006158 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	211a      	movs	r1, #26
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	b25b      	sxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	da16      	bge.n	8006018 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	211a      	movs	r1, #26
 8005ff0:	fb01 f303 	mul.w	r3, r1, r3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ffa:	781a      	ldrb	r2, [r3, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	211a      	movs	r1, #26
 8006006:	fb01 f303 	mul.w	r3, r1, r3
 800600a:	4413      	add	r3, r2
 800600c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006010:	881a      	ldrh	r2, [r3, #0]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	835a      	strh	r2, [r3, #26]
 8006016:	e015      	b.n	8006044 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	211a      	movs	r1, #26
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	4413      	add	r3, r2
 8006024:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006028:	781a      	ldrb	r2, [r3, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	211a      	movs	r1, #26
 8006034:	fb01 f303 	mul.w	r3, r1, r3
 8006038:	4413      	add	r3, r2
 800603a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800603e:	881a      	ldrh	r2, [r3, #0]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	211a      	movs	r1, #26
 800604a:	fb01 f303 	mul.w	r3, r1, r3
 800604e:	4413      	add	r3, r2
 8006050:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	b25b      	sxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	da16      	bge.n	800608a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	211a      	movs	r1, #26
 8006062:	fb01 f303 	mul.w	r3, r1, r3
 8006066:	4413      	add	r3, r2
 8006068:	f203 3356 	addw	r3, r3, #854	; 0x356
 800606c:	781a      	ldrb	r2, [r3, #0]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	211a      	movs	r1, #26
 8006078:	fb01 f303 	mul.w	r3, r1, r3
 800607c:	4413      	add	r3, r2
 800607e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006082:	881a      	ldrh	r2, [r3, #0]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	835a      	strh	r2, [r3, #26]
 8006088:	e015      	b.n	80060b6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	211a      	movs	r1, #26
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	4413      	add	r3, r2
 8006096:	f203 3356 	addw	r3, r3, #854	; 0x356
 800609a:	781a      	ldrb	r2, [r3, #0]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	211a      	movs	r1, #26
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80060b0:	881a      	ldrh	r2, [r3, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	7b9b      	ldrb	r3, [r3, #14]
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 fe84 	bl	8007dca <USBH_AllocPipe>
 80060c2:	4603      	mov	r3, r0
 80060c4:	461a      	mov	r2, r3
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	7bdb      	ldrb	r3, [r3, #15]
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f001 fe7a 	bl	8007dca <USBH_AllocPipe>
 80060d6:	4603      	mov	r3, r0
 80060d8:	461a      	mov	r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	7b59      	ldrb	r1, [r3, #13]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	7b98      	ldrb	r0, [r3, #14]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	8b12      	ldrh	r2, [r2, #24]
 80060f6:	9202      	str	r2, [sp, #8]
 80060f8:	2202      	movs	r2, #2
 80060fa:	9201      	str	r2, [sp, #4]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	4623      	mov	r3, r4
 8006100:	4602      	mov	r2, r0
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 fe32 	bl	8007d6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	7b19      	ldrb	r1, [r3, #12]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	7bd8      	ldrb	r0, [r3, #15]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	8b52      	ldrh	r2, [r2, #26]
 8006120:	9202      	str	r2, [sp, #8]
 8006122:	2202      	movs	r2, #2
 8006124:	9201      	str	r2, [sp, #4]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	4623      	mov	r3, r4
 800612a:	4602      	mov	r2, r0
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 fe1d 	bl	8007d6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	7b5b      	ldrb	r3, [r3, #13]
 800613e:	2200      	movs	r2, #0
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f002 f928 	bl	8008398 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	7b1b      	ldrb	r3, [r3, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f002 f921 	bl	8008398 <USBH_LL_SetToggle>

  return USBH_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	bd90      	pop	{r4, r7, pc}

08006160 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00e      	beq.n	8006198 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 fe12 	bl	8007daa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 fe3d 	bl	8007e0c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	7b1b      	ldrb	r3, [r3, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00e      	beq.n	80061be <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	7b1b      	ldrb	r3, [r3, #12]
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 fdff 	bl	8007daa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	7b1b      	ldrb	r3, [r3, #12]
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 fe2a 	bl	8007e0c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	7b5b      	ldrb	r3, [r3, #13]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00e      	beq.n	80061e4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	7b5b      	ldrb	r3, [r3, #13]
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 fdec 	bl	8007daa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	7b5b      	ldrb	r3, [r3, #13]
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f001 fe17 	bl	8007e0c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f002 f983 	bl	8008504 <free>
    phost->pActiveClass->pData = 0U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006204:	2200      	movs	r2, #0
 8006206:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3340      	adds	r3, #64	; 0x40
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f8b1 	bl	8006392 <GetLineCoding>
 8006230:	4603      	mov	r3, r0
 8006232:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006234:	7afb      	ldrb	r3, [r7, #11]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d105      	bne.n	8006246 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006240:	2102      	movs	r1, #2
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006246:	7afb      	ldrb	r3, [r7, #11]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006258:	2301      	movs	r3, #1
 800625a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006270:	2b04      	cmp	r3, #4
 8006272:	d877      	bhi.n	8006364 <USBH_CDC_Process+0x114>
 8006274:	a201      	add	r2, pc, #4	; (adr r2, 800627c <USBH_CDC_Process+0x2c>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	08006291 	.word	0x08006291
 8006280:	08006297 	.word	0x08006297
 8006284:	080062c7 	.word	0x080062c7
 8006288:	0800633b 	.word	0x0800633b
 800628c:	08006349 	.word	0x08006349
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	73fb      	strb	r3, [r7, #15]
      break;
 8006294:	e06d      	b.n	8006372 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f897 	bl	80063d0 <SetLineCoding>
 80062a2:	4603      	mov	r3, r0
 80062a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80062b4:	e058      	b.n	8006368 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d055      	beq.n	8006368 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2204      	movs	r2, #4
 80062c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062c4:	e050      	b.n	8006368 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	3340      	adds	r3, #64	; 0x40
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f860 	bl	8006392 <GetLineCoding>
 80062d2:	4603      	mov	r3, r0
 80062d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062d6:	7bbb      	ldrb	r3, [r7, #14]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d126      	bne.n	800632a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ee:	791b      	ldrb	r3, [r3, #4]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d13b      	bne.n	800636c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062fe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006300:	429a      	cmp	r2, r3
 8006302:	d133      	bne.n	800636c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800630e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006310:	429a      	cmp	r2, r3
 8006312:	d12b      	bne.n	800636c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800631c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800631e:	429a      	cmp	r2, r3
 8006320:	d124      	bne.n	800636c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f958 	bl	80065d8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006328:	e020      	b.n	800636c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800632a:	7bbb      	ldrb	r3, [r7, #14]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d01d      	beq.n	800636c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2204      	movs	r2, #4
 8006334:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006338:	e018      	b.n	800636c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f867 	bl	800640e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f8da 	bl	80064fa <CDC_ProcessReception>
      break;
 8006346:	e014      	b.n	8006372 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006348:	2100      	movs	r1, #0
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 ffef 	bl	800732e <USBH_ClrFeature>
 8006350:	4603      	mov	r3, r0
 8006352:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006354:	7bbb      	ldrb	r3, [r7, #14]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006362:	e005      	b.n	8006370 <USBH_CDC_Process+0x120>

    default:
      break;
 8006364:	bf00      	nop
 8006366:	e004      	b.n	8006372 <USBH_CDC_Process+0x122>
      break;
 8006368:	bf00      	nop
 800636a:	e002      	b.n	8006372 <USBH_CDC_Process+0x122>
      break;
 800636c:	bf00      	nop
 800636e:	e000      	b.n	8006372 <USBH_CDC_Process+0x122>
      break;
 8006370:	bf00      	nop

  }

  return status;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	22a1      	movs	r2, #161	; 0xa1
 80063a0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2221      	movs	r2, #33	; 0x21
 80063a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2207      	movs	r2, #7
 80063b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2207      	movs	r2, #7
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 fa81 	bl	80078c8 <USBH_CtlReq>
 80063c6:	4603      	mov	r3, r0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2221      	movs	r2, #33	; 0x21
 80063de:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2207      	movs	r2, #7
 80063f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2207      	movs	r2, #7
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 fa62 	bl	80078c8 <USBH_CtlReq>
 8006404:	4603      	mov	r3, r0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b086      	sub	sp, #24
 8006412:	af02      	add	r7, sp, #8
 8006414:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006420:	2300      	movs	r3, #0
 8006422:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800642a:	2b01      	cmp	r3, #1
 800642c:	d002      	beq.n	8006434 <CDC_ProcessTransmission+0x26>
 800642e:	2b02      	cmp	r3, #2
 8006430:	d023      	beq.n	800647a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006432:	e05e      	b.n	80064f2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	8b12      	ldrh	r2, [r2, #24]
 800643c:	4293      	cmp	r3, r2
 800643e:	d90b      	bls.n	8006458 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	69d9      	ldr	r1, [r3, #28]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8b1a      	ldrh	r2, [r3, #24]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	7b5b      	ldrb	r3, [r3, #13]
 800644c:	2001      	movs	r0, #1
 800644e:	9000      	str	r0, [sp, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 fc48 	bl	8007ce6 <USBH_BulkSendData>
 8006456:	e00b      	b.n	8006470 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	7b5b      	ldrb	r3, [r3, #13]
 8006466:	2001      	movs	r0, #1
 8006468:	9000      	str	r0, [sp, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 fc3b 	bl	8007ce6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006478:	e03b      	b.n	80064f2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	7b5b      	ldrb	r3, [r3, #13]
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f001 ff5f 	bl	8008344 <USBH_LL_GetURBState>
 8006486:	4603      	mov	r3, r0
 8006488:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800648a:	7afb      	ldrb	r3, [r7, #11]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d128      	bne.n	80064e2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	8b12      	ldrh	r2, [r2, #24]
 8006498:	4293      	cmp	r3, r2
 800649a:	d90e      	bls.n	80064ba <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	8b12      	ldrh	r2, [r2, #24]
 80064a4:	1a9a      	subs	r2, r3, r2
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	8b12      	ldrh	r2, [r2, #24]
 80064b2:	441a      	add	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	61da      	str	r2, [r3, #28]
 80064b8:	e002      	b.n	80064c0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80064d0:	e00e      	b.n	80064f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f868 	bl	80065b0 <USBH_CDC_TransmitCallback>
      break;
 80064e0:	e006      	b.n	80064f0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80064e2:	7afb      	ldrb	r3, [r7, #11]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d103      	bne.n	80064f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80064f0:	bf00      	nop
  }
}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b086      	sub	sp, #24
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800650c:	2300      	movs	r3, #0
 800650e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006516:	2b03      	cmp	r3, #3
 8006518:	d002      	beq.n	8006520 <CDC_ProcessReception+0x26>
 800651a:	2b04      	cmp	r3, #4
 800651c:	d00e      	beq.n	800653c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800651e:	e043      	b.n	80065a8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	6a19      	ldr	r1, [r3, #32]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	8b5a      	ldrh	r2, [r3, #26]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	7b1b      	ldrb	r3, [r3, #12]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fbff 	bl	8007d30 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2204      	movs	r2, #4
 8006536:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800653a:	e035      	b.n	80065a8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	7b1b      	ldrb	r3, [r3, #12]
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 fefe 	bl	8008344 <USBH_LL_GetURBState>
 8006548:	4603      	mov	r3, r0
 800654a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800654c:	7cfb      	ldrb	r3, [r7, #19]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d129      	bne.n	80065a6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	7b1b      	ldrb	r3, [r3, #12]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fe61 	bl	8008220 <USBH_LL_GetLastXferSize>
 800655e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	429a      	cmp	r2, r3
 8006568:	d016      	beq.n	8006598 <CDC_ProcessReception+0x9e>
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	8b5b      	ldrh	r3, [r3, #26]
 800656e:	461a      	mov	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4293      	cmp	r3, r2
 8006574:	d910      	bls.n	8006598 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad2      	subs	r2, r2, r3
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	441a      	add	r2, r3
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2203      	movs	r2, #3
 8006592:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006596:	e006      	b.n	80065a6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f80f 	bl	80065c4 <USBH_CDC_ReceiveCallback>
      break;
 80065a6:	bf00      	nop
  }
}
 80065a8:	bf00      	nop
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006600:	2302      	movs	r3, #2
 8006602:	e029      	b.n	8006658 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	79fa      	ldrb	r2, [r7, #7]
 8006608:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f81f 	bl	8006660 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f001 fd31 	bl	80080b8 <USBH_LL_Init>

  return USBH_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e009      	b.n	8006686 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	33e0      	adds	r3, #224	; 0xe0
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	2200      	movs	r2, #0
 800667e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3301      	adds	r3, #1
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b0f      	cmp	r3, #15
 800668a:	d9f2      	bls.n	8006672 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	e009      	b.n	80066a6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3301      	adds	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ac:	d3f1      	bcc.n	8006692 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2240      	movs	r2, #64	; 0x40
 80066d2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d016      	beq.n	800674a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10e      	bne.n	8006744 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800672c:	1c59      	adds	r1, r3, #1
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	33de      	adds	r3, #222	; 0xde
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	73fb      	strb	r3, [r7, #15]
 8006742:	e004      	b.n	800674e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006744:	2302      	movs	r3, #2
 8006746:	73fb      	strb	r3, [r7, #15]
 8006748:	e001      	b.n	800674e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800674a:	2302      	movs	r3, #2
 800674c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006772:	78fa      	ldrb	r2, [r7, #3]
 8006774:	429a      	cmp	r2, r3
 8006776:	d204      	bcs.n	8006782 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006780:	e001      	b.n	8006786 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006782:	2302      	movs	r3, #2
 8006784:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	461a      	mov	r2, r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	70fb      	strb	r3, [r7, #3]
 80067a6:	460b      	mov	r3, r1
 80067a8:	70bb      	strb	r3, [r7, #2]
 80067aa:	4613      	mov	r3, r2
 80067ac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80067bc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80067be:	e025      	b.n	800680c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	221a      	movs	r2, #26
 80067c4:	fb02 f303 	mul.w	r3, r2, r3
 80067c8:	3308      	adds	r3, #8
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4413      	add	r3, r2
 80067ce:	3302      	adds	r3, #2
 80067d0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	795b      	ldrb	r3, [r3, #5]
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d002      	beq.n	80067e2 <USBH_FindInterface+0x4e>
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	2bff      	cmp	r3, #255	; 0xff
 80067e0:	d111      	bne.n	8006806 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80067e6:	78ba      	ldrb	r2, [r7, #2]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d002      	beq.n	80067f2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067ec:	78bb      	ldrb	r3, [r7, #2]
 80067ee:	2bff      	cmp	r3, #255	; 0xff
 80067f0:	d109      	bne.n	8006806 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067f6:	787a      	ldrb	r2, [r7, #1]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d002      	beq.n	8006802 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80067fc:	787b      	ldrb	r3, [r7, #1]
 80067fe:	2bff      	cmp	r3, #255	; 0xff
 8006800:	d101      	bne.n	8006806 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	e006      	b.n	8006814 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	3301      	adds	r3, #1
 800680a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d9d6      	bls.n	80067c0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006812:	23ff      	movs	r3, #255	; 0xff
}
 8006814:	4618      	mov	r0, r3
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fc81 	bl	8008130 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800682e:	2101      	movs	r1, #1
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 fd9a 	bl	800836a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af04      	add	r7, sp, #16
 8006846:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006848:	2302      	movs	r3, #2
 800684a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b01      	cmp	r3, #1
 800685a:	d102      	bne.n	8006862 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2203      	movs	r2, #3
 8006860:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b0b      	cmp	r3, #11
 800686a:	f200 81be 	bhi.w	8006bea <USBH_Process+0x3aa>
 800686e:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <USBH_Process+0x34>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	080068a5 	.word	0x080068a5
 8006878:	080068d7 	.word	0x080068d7
 800687c:	0800693f 	.word	0x0800693f
 8006880:	08006b85 	.word	0x08006b85
 8006884:	08006beb 	.word	0x08006beb
 8006888:	080069e3 	.word	0x080069e3
 800688c:	08006b2b 	.word	0x08006b2b
 8006890:	08006a19 	.word	0x08006a19
 8006894:	08006a39 	.word	0x08006a39
 8006898:	08006a59 	.word	0x08006a59
 800689c:	08006a9d 	.word	0x08006a9d
 80068a0:	08006b6d 	.word	0x08006b6d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 819e 	beq.w	8006bee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80068b8:	20c8      	movs	r0, #200	; 0xc8
 80068ba:	f001 fd9d 	bl	80083f8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fc93 	bl	80081ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80068d4:	e18b      	b.n	8006bee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d107      	bne.n	80068f0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068ee:	e18d      	b.n	8006c0c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80068f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068fa:	d914      	bls.n	8006926 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006902:	3301      	adds	r3, #1
 8006904:	b2da      	uxtb	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006912:	2b03      	cmp	r3, #3
 8006914:	d903      	bls.n	800691e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	220d      	movs	r2, #13
 800691a:	701a      	strb	r2, [r3, #0]
      break;
 800691c:	e176      	b.n	8006c0c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	701a      	strb	r2, [r3, #0]
      break;
 8006924:	e172      	b.n	8006c0c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800692c:	f103 020a 	add.w	r2, r3, #10
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006936:	200a      	movs	r0, #10
 8006938:	f001 fd5e 	bl	80083f8 <USBH_Delay>
      break;
 800693c:	e166      	b.n	8006c0c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800694e:	2104      	movs	r1, #4
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006954:	2064      	movs	r0, #100	; 0x64
 8006956:	f001 fd4f 	bl	80083f8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f001 fc1e 	bl	800819c <USBH_LL_GetSpeed>
 8006960:	4603      	mov	r3, r0
 8006962:	461a      	mov	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2205      	movs	r2, #5
 800696e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006970:	2100      	movs	r1, #0
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fa29 	bl	8007dca <USBH_AllocPipe>
 8006978:	4603      	mov	r3, r0
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006980:	2180      	movs	r1, #128	; 0x80
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 fa21 	bl	8007dca <USBH_AllocPipe>
 8006988:	4603      	mov	r3, r0
 800698a:	461a      	mov	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	7919      	ldrb	r1, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80069a4:	b292      	uxth	r2, r2
 80069a6:	9202      	str	r2, [sp, #8]
 80069a8:	2200      	movs	r2, #0
 80069aa:	9201      	str	r2, [sp, #4]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	4603      	mov	r3, r0
 80069b0:	2280      	movs	r2, #128	; 0x80
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 f9da 	bl	8007d6c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	7959      	ldrb	r1, [r3, #5]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80069cc:	b292      	uxth	r2, r2
 80069ce:	9202      	str	r2, [sp, #8]
 80069d0:	2200      	movs	r2, #0
 80069d2:	9201      	str	r2, [sp, #4]
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	4603      	mov	r3, r0
 80069d8:	2200      	movs	r2, #0
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f001 f9c6 	bl	8007d6c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069e0:	e114      	b.n	8006c0c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f918 	bl	8006c18 <USBH_HandleEnum>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80069ec:	7bbb      	ldrb	r3, [r7, #14]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f040 80fe 	bne.w	8006bf2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d103      	bne.n	8006a10 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006a0e:	e0f0      	b.n	8006bf2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2207      	movs	r2, #7
 8006a14:	701a      	strb	r2, [r3, #0]
      break;
 8006a16:	e0ec      	b.n	8006bf2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 80e9 	beq.w	8006bf6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2208      	movs	r2, #8
 8006a34:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006a36:	e0de      	b.n	8006bf6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fc2c 	bl	80072a0 <USBH_SetCfg>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 80d5 	bne.w	8006bfa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2209      	movs	r2, #9
 8006a54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a56:	e0d0      	b.n	8006bfa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d016      	beq.n	8006a94 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006a66:	2101      	movs	r1, #1
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fc3c 	bl	80072e6 <USBH_SetFeature>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a72:	7bbb      	ldrb	r3, [r7, #14]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d103      	bne.n	8006a82 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	220a      	movs	r2, #10
 8006a7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a80:	e0bd      	b.n	8006bfe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006a82:	7bbb      	ldrb	r3, [r7, #14]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	f040 80b9 	bne.w	8006bfe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	220a      	movs	r2, #10
 8006a90:	701a      	strb	r2, [r3, #0]
      break;
 8006a92:	e0b4      	b.n	8006bfe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	220a      	movs	r2, #10
 8006a98:	701a      	strb	r2, [r3, #0]
      break;
 8006a9a:	e0b0      	b.n	8006bfe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 80ad 	beq.w	8006c02 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	73fb      	strb	r3, [r7, #15]
 8006ab4:	e016      	b.n	8006ae4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006ab6:	7bfa      	ldrb	r2, [r7, #15]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	32de      	adds	r2, #222	; 0xde
 8006abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac0:	791a      	ldrb	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d108      	bne.n	8006ade <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006acc:	7bfa      	ldrb	r2, [r7, #15]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	32de      	adds	r2, #222	; 0xde
 8006ad2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006adc:	e005      	b.n	8006aea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0e5      	beq.n	8006ab6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d016      	beq.n	8006b22 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2206      	movs	r2, #6
 8006b0a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b12:	2103      	movs	r1, #3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b18:	e073      	b.n	8006c02 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	220d      	movs	r2, #13
 8006b1e:	701a      	strb	r2, [r3, #0]
      break;
 8006b20:	e06f      	b.n	8006c02 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	220d      	movs	r2, #13
 8006b26:	701a      	strb	r2, [r3, #0]
      break;
 8006b28:	e06b      	b.n	8006c02 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d017      	beq.n	8006b64 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
 8006b40:	4603      	mov	r3, r0
 8006b42:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d103      	bne.n	8006b54 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	220b      	movs	r2, #11
 8006b50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b52:	e058      	b.n	8006c06 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d154      	bne.n	8006c06 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	220d      	movs	r2, #13
 8006b60:	701a      	strb	r2, [r3, #0]
      break;
 8006b62:	e050      	b.n	8006c06 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	220d      	movs	r2, #13
 8006b68:	701a      	strb	r2, [r3, #0]
      break;
 8006b6a:	e04c      	b.n	8006c06 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d049      	beq.n	8006c0a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
      }
      break;
 8006b82:	e042      	b.n	8006c0a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff fd67 	bl	8006660 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bc0:	2105      	movs	r1, #5
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d107      	bne.n	8006be2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fe20 	bl	8006820 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006be0:	e014      	b.n	8006c0c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 faa4 	bl	8008130 <USBH_LL_Start>
      break;
 8006be8:	e010      	b.n	8006c0c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006bea:	bf00      	nop
 8006bec:	e00e      	b.n	8006c0c <USBH_Process+0x3cc>
      break;
 8006bee:	bf00      	nop
 8006bf0:	e00c      	b.n	8006c0c <USBH_Process+0x3cc>
      break;
 8006bf2:	bf00      	nop
 8006bf4:	e00a      	b.n	8006c0c <USBH_Process+0x3cc>
    break;
 8006bf6:	bf00      	nop
 8006bf8:	e008      	b.n	8006c0c <USBH_Process+0x3cc>
      break;
 8006bfa:	bf00      	nop
 8006bfc:	e006      	b.n	8006c0c <USBH_Process+0x3cc>
      break;
 8006bfe:	bf00      	nop
 8006c00:	e004      	b.n	8006c0c <USBH_Process+0x3cc>
      break;
 8006c02:	bf00      	nop
 8006c04:	e002      	b.n	8006c0c <USBH_Process+0x3cc>
      break;
 8006c06:	bf00      	nop
 8006c08:	e000      	b.n	8006c0c <USBH_Process+0x3cc>
      break;
 8006c0a:	bf00      	nop
  }
  return USBH_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop

08006c18 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af04      	add	r7, sp, #16
 8006c1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006c20:	2301      	movs	r3, #1
 8006c22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	785b      	ldrb	r3, [r3, #1]
 8006c2c:	2b07      	cmp	r3, #7
 8006c2e:	f200 81c1 	bhi.w	8006fb4 <USBH_HandleEnum+0x39c>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <USBH_HandleEnum+0x20>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c59 	.word	0x08006c59
 8006c3c:	08006d17 	.word	0x08006d17
 8006c40:	08006d81 	.word	0x08006d81
 8006c44:	08006e0f 	.word	0x08006e0f
 8006c48:	08006e79 	.word	0x08006e79
 8006c4c:	08006ee9 	.word	0x08006ee9
 8006c50:	08006f2f 	.word	0x08006f2f
 8006c54:	08006f75 	.word	0x08006f75
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006c58:	2108      	movs	r1, #8
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fa50 	bl	8007100 <USBH_Get_DevDesc>
 8006c60:	4603      	mov	r3, r0
 8006c62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d130      	bne.n	8006ccc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7919      	ldrb	r1, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c8e:	b292      	uxth	r2, r2
 8006c90:	9202      	str	r2, [sp, #8]
 8006c92:	2200      	movs	r2, #0
 8006c94:	9201      	str	r2, [sp, #4]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2280      	movs	r2, #128	; 0x80
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 f865 	bl	8007d6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	7959      	ldrb	r1, [r3, #5]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cb6:	b292      	uxth	r2, r2
 8006cb8:	9202      	str	r2, [sp, #8]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	9201      	str	r2, [sp, #4]
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 f851 	bl	8007d6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006cca:	e175      	b.n	8006fb8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	f040 8172 	bne.w	8006fb8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cda:	3301      	adds	r3, #1
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d903      	bls.n	8006cf6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	220d      	movs	r2, #13
 8006cf2:	701a      	strb	r2, [r3, #0]
      break;
 8006cf4:	e160      	b.n	8006fb8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	795b      	ldrb	r3, [r3, #5]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 f885 	bl	8007e0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	791b      	ldrb	r3, [r3, #4]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 f87f 	bl	8007e0c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
      break;
 8006d14:	e150      	b.n	8006fb8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006d16:	2112      	movs	r1, #18
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f9f1 	bl	8007100 <USBH_Get_DevDesc>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d2e:	e145      	b.n	8006fbc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	f040 8142 	bne.w	8006fbc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d3e:	3301      	adds	r3, #1
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d903      	bls.n	8006d5a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	220d      	movs	r2, #13
 8006d56:	701a      	strb	r2, [r3, #0]
      break;
 8006d58:	e130      	b.n	8006fbc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	795b      	ldrb	r3, [r3, #5]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 f853 	bl	8007e0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	791b      	ldrb	r3, [r3, #4]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 f84d 	bl	8007e0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
      break;
 8006d7e:	e11d      	b.n	8006fbc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006d80:	2101      	movs	r1, #1
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa68 	bl	8007258 <USBH_SetAddress>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d132      	bne.n	8006df8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006d92:	2002      	movs	r0, #2
 8006d94:	f001 fb30 	bl	80083f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2203      	movs	r2, #3
 8006da4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7919      	ldrb	r1, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006dba:	b292      	uxth	r2, r2
 8006dbc:	9202      	str	r2, [sp, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	9201      	str	r2, [sp, #4]
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2280      	movs	r2, #128	; 0x80
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 ffcf 	bl	8007d6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	7959      	ldrb	r1, [r3, #5]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006de2:	b292      	uxth	r2, r2
 8006de4:	9202      	str	r2, [sp, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	9201      	str	r2, [sp, #4]
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	4603      	mov	r3, r0
 8006dee:	2200      	movs	r2, #0
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 ffbb 	bl	8007d6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006df6:	e0e3      	b.n	8006fc0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	f040 80e0 	bne.w	8006fc0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	220d      	movs	r2, #13
 8006e04:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	705a      	strb	r2, [r3, #1]
      break;
 8006e0c:	e0d8      	b.n	8006fc0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006e0e:	2109      	movs	r1, #9
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f99d 	bl	8007150 <USBH_Get_CfgDesc>
 8006e16:	4603      	mov	r3, r0
 8006e18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2204      	movs	r2, #4
 8006e24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e26:	e0cd      	b.n	8006fc4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	f040 80ca 	bne.w	8006fc4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e36:	3301      	adds	r3, #1
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d903      	bls.n	8006e52 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	220d      	movs	r2, #13
 8006e4e:	701a      	strb	r2, [r3, #0]
      break;
 8006e50:	e0b8      	b.n	8006fc4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	795b      	ldrb	r3, [r3, #5]
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 ffd7 	bl	8007e0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	791b      	ldrb	r3, [r3, #4]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 ffd1 	bl	8007e0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	701a      	strb	r2, [r3, #0]
      break;
 8006e76:	e0a5      	b.n	8006fc4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f965 	bl	8007150 <USBH_Get_CfgDesc>
 8006e86:	4603      	mov	r3, r0
 8006e88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d103      	bne.n	8006e98 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2205      	movs	r2, #5
 8006e94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e96:	e097      	b.n	8006fc8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	f040 8094 	bne.w	8006fc8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d903      	bls.n	8006ec2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	220d      	movs	r2, #13
 8006ebe:	701a      	strb	r2, [r3, #0]
      break;
 8006ec0:	e082      	b.n	8006fc8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	795b      	ldrb	r3, [r3, #5]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 ff9f 	bl	8007e0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	791b      	ldrb	r3, [r3, #4]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 ff99 	bl	8007e0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	701a      	strb	r2, [r3, #0]
      break;
 8006ee6:	e06f      	b.n	8006fc8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d019      	beq.n	8006f26 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006efe:	23ff      	movs	r3, #255	; 0xff
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f949 	bl	8007198 <USBH_Get_StringDesc>
 8006f06:	4603      	mov	r3, r0
 8006f08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d103      	bne.n	8006f18 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2206      	movs	r2, #6
 8006f14:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f16:	e059      	b.n	8006fcc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d156      	bne.n	8006fcc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2206      	movs	r2, #6
 8006f22:	705a      	strb	r2, [r3, #1]
      break;
 8006f24:	e052      	b.n	8006fcc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2206      	movs	r2, #6
 8006f2a:	705a      	strb	r2, [r3, #1]
      break;
 8006f2c:	e04e      	b.n	8006fcc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d019      	beq.n	8006f6c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f44:	23ff      	movs	r3, #255	; 0xff
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f926 	bl	8007198 <USBH_Get_StringDesc>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d103      	bne.n	8006f5e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2207      	movs	r2, #7
 8006f5a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f5c:	e038      	b.n	8006fd0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d135      	bne.n	8006fd0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2207      	movs	r2, #7
 8006f68:	705a      	strb	r2, [r3, #1]
      break;
 8006f6a:	e031      	b.n	8006fd0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2207      	movs	r2, #7
 8006f70:	705a      	strb	r2, [r3, #1]
      break;
 8006f72:	e02d      	b.n	8006fd0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d017      	beq.n	8006fae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f8a:	23ff      	movs	r3, #255	; 0xff
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f903 	bl	8007198 <USBH_Get_StringDesc>
 8006f92:	4603      	mov	r3, r0
 8006f94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006fa0:	e018      	b.n	8006fd4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d115      	bne.n	8006fd4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73fb      	strb	r3, [r7, #15]
      break;
 8006fac:	e012      	b.n	8006fd4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb2:	e00f      	b.n	8006fd4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006fb4:	bf00      	nop
 8006fb6:	e00e      	b.n	8006fd6 <USBH_HandleEnum+0x3be>
      break;
 8006fb8:	bf00      	nop
 8006fba:	e00c      	b.n	8006fd6 <USBH_HandleEnum+0x3be>
      break;
 8006fbc:	bf00      	nop
 8006fbe:	e00a      	b.n	8006fd6 <USBH_HandleEnum+0x3be>
      break;
 8006fc0:	bf00      	nop
 8006fc2:	e008      	b.n	8006fd6 <USBH_HandleEnum+0x3be>
      break;
 8006fc4:	bf00      	nop
 8006fc6:	e006      	b.n	8006fd6 <USBH_HandleEnum+0x3be>
      break;
 8006fc8:	bf00      	nop
 8006fca:	e004      	b.n	8006fd6 <USBH_HandleEnum+0x3be>
      break;
 8006fcc:	bf00      	nop
 8006fce:	e002      	b.n	8006fd6 <USBH_HandleEnum+0x3be>
      break;
 8006fd0:	bf00      	nop
 8006fd2:	e000      	b.n	8006fd6 <USBH_HandleEnum+0x3be>
      break;
 8006fd4:	bf00      	nop
  }
  return Status;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f804 	bl	8007022 <USBH_HandleSof>
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b0b      	cmp	r3, #11
 8007032:	d10a      	bne.n	800704a <USBH_HandleSof+0x28>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	4798      	blx	r3
  }
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007062:	bf00      	nop
}
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800707e:	bf00      	nop
}
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 f844 	bl	8008166 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	791b      	ldrb	r3, [r3, #4]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fe91 	bl	8007e0c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	795b      	ldrb	r3, [r3, #5]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fe8b 	bl	8007e0c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af02      	add	r7, sp, #8
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007112:	78fb      	ldrb	r3, [r7, #3]
 8007114:	b29b      	uxth	r3, r3
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	4613      	mov	r3, r2
 800711a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800711e:	2100      	movs	r1, #0
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f864 	bl	80071ee <USBH_GetDescriptor>
 8007126:	4603      	mov	r3, r0
 8007128:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	b292      	uxth	r2, r2
 8007140:	4619      	mov	r1, r3
 8007142:	f000 f918 	bl	8007376 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af02      	add	r7, sp, #8
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	331c      	adds	r3, #28
 8007160:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007162:	887b      	ldrh	r3, [r7, #2]
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800716c:	2100      	movs	r1, #0
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f83d 	bl	80071ee <USBH_GetDescriptor>
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d107      	bne.n	800718e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800717e:	887b      	ldrh	r3, [r7, #2]
 8007180:	461a      	mov	r2, r3
 8007182:	68b9      	ldr	r1, [r7, #8]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f987 	bl	8007498 <USBH_ParseCfgDesc>
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	607a      	str	r2, [r7, #4]
 80071a2:	461a      	mov	r2, r3
 80071a4:	460b      	mov	r3, r1
 80071a6:	72fb      	strb	r3, [r7, #11]
 80071a8:	4613      	mov	r3, r2
 80071aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80071b4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80071bc:	893b      	ldrh	r3, [r7, #8]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	460b      	mov	r3, r1
 80071c2:	2100      	movs	r1, #0
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f812 	bl	80071ee <USBH_GetDescriptor>
 80071ca:	4603      	mov	r3, r0
 80071cc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d107      	bne.n	80071e4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071da:	893a      	ldrh	r2, [r7, #8]
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fb24 	bl	800782c <USBH_ParseStringDesc>
  }

  return status;
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	607b      	str	r3, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	72fb      	strb	r3, [r7, #11]
 80071fc:	4613      	mov	r3, r2
 80071fe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	789b      	ldrb	r3, [r3, #2]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d11c      	bne.n	8007242 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800720e:	b2da      	uxtb	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2206      	movs	r2, #6
 8007218:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	893a      	ldrh	r2, [r7, #8]
 800721e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007220:	893b      	ldrh	r3, [r7, #8]
 8007222:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800722a:	d104      	bne.n	8007236 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f240 4209 	movw	r2, #1033	; 0x409
 8007232:	829a      	strh	r2, [r3, #20]
 8007234:	e002      	b.n	800723c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8b3a      	ldrh	r2, [r7, #24]
 8007240:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007242:	8b3b      	ldrh	r3, [r7, #24]
 8007244:	461a      	mov	r2, r3
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 fb3d 	bl	80078c8 <USBH_CtlReq>
 800724e:	4603      	mov	r3, r0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	789b      	ldrb	r3, [r3, #2]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d10f      	bne.n	800728c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2205      	movs	r2, #5
 8007276:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	b29a      	uxth	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800728c:	2200      	movs	r2, #0
 800728e:	2100      	movs	r1, #0
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fb19 	bl	80078c8 <USBH_CtlReq>
 8007296:	4603      	mov	r3, r0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	789b      	ldrb	r3, [r3, #2]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d10e      	bne.n	80072d2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2209      	movs	r2, #9
 80072be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	887a      	ldrh	r2, [r7, #2]
 80072c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80072d2:	2200      	movs	r2, #0
 80072d4:	2100      	movs	r1, #0
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 faf6 	bl	80078c8 <USBH_CtlReq>
 80072dc:	4603      	mov	r3, r0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	789b      	ldrb	r3, [r3, #2]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d10f      	bne.n	800731a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2203      	movs	r2, #3
 8007304:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	b29a      	uxth	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800731a:	2200      	movs	r2, #0
 800731c:	2100      	movs	r1, #0
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fad2 	bl	80078c8 <USBH_CtlReq>
 8007324:	4603      	mov	r3, r0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	789b      	ldrb	r3, [r3, #2]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d10f      	bne.n	8007362 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2202      	movs	r2, #2
 8007346:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	b29a      	uxth	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007362:	2200      	movs	r2, #0
 8007364:	2100      	movs	r1, #0
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 faae 	bl	80078c8 <USBH_CtlReq>
 800736c:	4603      	mov	r3, r0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007376:	b480      	push	{r7}
 8007378:	b085      	sub	sp, #20
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	60b9      	str	r1, [r7, #8]
 8007380:	4613      	mov	r3, r2
 8007382:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	781a      	ldrb	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	785a      	ldrb	r2, [r3, #1]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	3302      	adds	r3, #2
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	b29a      	uxth	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	3303      	adds	r3, #3
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	4313      	orrs	r3, r2
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	791a      	ldrb	r2, [r3, #4]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	795a      	ldrb	r2, [r3, #5]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	799a      	ldrb	r2, [r3, #6]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	79da      	ldrb	r2, [r3, #7]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	79db      	ldrb	r3, [r3, #7]
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	dc11      	bgt.n	80073fc <USBH_ParseDevDesc+0x86>
 80073d8:	2b08      	cmp	r3, #8
 80073da:	db16      	blt.n	800740a <USBH_ParseDevDesc+0x94>
 80073dc:	3b08      	subs	r3, #8
 80073de:	2201      	movs	r2, #1
 80073e0:	fa02 f303 	lsl.w	r3, r2, r3
 80073e4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80073e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bf14      	ite	ne
 80073f0:	2301      	movne	r3, #1
 80073f2:	2300      	moveq	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d102      	bne.n	8007400 <USBH_ParseDevDesc+0x8a>
 80073fa:	e006      	b.n	800740a <USBH_ParseDevDesc+0x94>
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	d104      	bne.n	800740a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	79da      	ldrb	r2, [r3, #7]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	71da      	strb	r2, [r3, #7]
      break;
 8007408:	e003      	b.n	8007412 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2240      	movs	r2, #64	; 0x40
 800740e:	71da      	strb	r2, [r3, #7]
      break;
 8007410:	bf00      	nop
  }

  if (length > 8U)
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	2b08      	cmp	r3, #8
 8007416:	d939      	bls.n	800748c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	3308      	adds	r3, #8
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b29a      	uxth	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	3309      	adds	r3, #9
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	b29b      	uxth	r3, r3
 800742c:	4313      	orrs	r3, r2
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	330a      	adds	r3, #10
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	b29a      	uxth	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	330b      	adds	r3, #11
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	b29b      	uxth	r3, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	330c      	adds	r3, #12
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	b29a      	uxth	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	330d      	adds	r3, #13
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	b29b      	uxth	r3, r3
 8007464:	4313      	orrs	r3, r2
 8007466:	b29a      	uxth	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	7b9a      	ldrb	r2, [r3, #14]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	7bda      	ldrb	r2, [r3, #15]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	7c1a      	ldrb	r2, [r3, #16]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	7c5a      	ldrb	r2, [r3, #17]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	745a      	strb	r2, [r3, #17]
  }
}
 800748c:	bf00      	nop
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08c      	sub	sp, #48	; 0x30
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80074ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	785a      	ldrb	r2, [r3, #1]
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	3302      	adds	r3, #2
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b29a      	uxth	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	3303      	adds	r3, #3
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	4313      	orrs	r3, r2
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f4:	bf28      	it	cs
 80074f6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	791a      	ldrb	r2, [r3, #4]
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	795a      	ldrb	r2, [r3, #5]
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	799a      	ldrb	r2, [r3, #6]
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	79da      	ldrb	r2, [r3, #7]
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	7a1a      	ldrb	r2, [r3, #8]
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b09      	cmp	r3, #9
 800752e:	d002      	beq.n	8007536 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	2209      	movs	r2, #9
 8007534:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	2b09      	cmp	r3, #9
 800753a:	f240 809d 	bls.w	8007678 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800753e:	2309      	movs	r3, #9
 8007540:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007546:	e081      	b.n	800764c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007548:	f107 0316 	add.w	r3, r7, #22
 800754c:	4619      	mov	r1, r3
 800754e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007550:	f000 f99f 	bl	8007892 <USBH_GetNextDesc>
 8007554:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	2b04      	cmp	r3, #4
 800755c:	d176      	bne.n	800764c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b09      	cmp	r3, #9
 8007564:	d002      	beq.n	800756c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	2209      	movs	r2, #9
 800756a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800756c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007570:	221a      	movs	r2, #26
 8007572:	fb02 f303 	mul.w	r3, r2, r3
 8007576:	3308      	adds	r3, #8
 8007578:	6a3a      	ldr	r2, [r7, #32]
 800757a:	4413      	add	r3, r2
 800757c:	3302      	adds	r3, #2
 800757e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007582:	69f8      	ldr	r0, [r7, #28]
 8007584:	f000 f87e 	bl	8007684 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800758e:	2300      	movs	r3, #0
 8007590:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007592:	e043      	b.n	800761c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007594:	f107 0316 	add.w	r3, r7, #22
 8007598:	4619      	mov	r1, r3
 800759a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800759c:	f000 f979 	bl	8007892 <USBH_GetNextDesc>
 80075a0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80075a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a4:	785b      	ldrb	r3, [r3, #1]
 80075a6:	2b05      	cmp	r3, #5
 80075a8:	d138      	bne.n	800761c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	795b      	ldrb	r3, [r3, #5]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d10f      	bne.n	80075d2 <USBH_ParseCfgDesc+0x13a>
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	799b      	ldrb	r3, [r3, #6]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d10b      	bne.n	80075d2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	79db      	ldrb	r3, [r3, #7]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10f      	bne.n	80075e2 <USBH_ParseCfgDesc+0x14a>
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b09      	cmp	r3, #9
 80075c8:	d00b      	beq.n	80075e2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	2209      	movs	r2, #9
 80075ce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80075d0:	e007      	b.n	80075e2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b07      	cmp	r3, #7
 80075d8:	d004      	beq.n	80075e4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	2207      	movs	r2, #7
 80075de:	701a      	strb	r2, [r3, #0]
 80075e0:	e000      	b.n	80075e4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80075e2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80075e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075ec:	3201      	adds	r2, #1
 80075ee:	00d2      	lsls	r2, r2, #3
 80075f0:	211a      	movs	r1, #26
 80075f2:	fb01 f303 	mul.w	r3, r1, r3
 80075f6:	4413      	add	r3, r2
 80075f8:	3308      	adds	r3, #8
 80075fa:	6a3a      	ldr	r2, [r7, #32]
 80075fc:	4413      	add	r3, r2
 80075fe:	3304      	adds	r3, #4
 8007600:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007604:	69b9      	ldr	r1, [r7, #24]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 f86b 	bl	80076e2 <USBH_ParseEPDesc>
 800760c:	4603      	mov	r3, r0
 800760e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007612:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007616:	3301      	adds	r3, #1
 8007618:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	791b      	ldrb	r3, [r3, #4]
 8007620:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007624:	429a      	cmp	r2, r3
 8007626:	d204      	bcs.n	8007632 <USBH_ParseCfgDesc+0x19a>
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	885a      	ldrh	r2, [r3, #2]
 800762c:	8afb      	ldrh	r3, [r7, #22]
 800762e:	429a      	cmp	r2, r3
 8007630:	d8b0      	bhi.n	8007594 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	791b      	ldrb	r3, [r3, #4]
 8007636:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800763a:	429a      	cmp	r2, r3
 800763c:	d201      	bcs.n	8007642 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800763e:	2303      	movs	r3, #3
 8007640:	e01c      	b.n	800767c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007646:	3301      	adds	r3, #1
 8007648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800764c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007650:	2b01      	cmp	r3, #1
 8007652:	d805      	bhi.n	8007660 <USBH_ParseCfgDesc+0x1c8>
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	885a      	ldrh	r2, [r3, #2]
 8007658:	8afb      	ldrh	r3, [r7, #22]
 800765a:	429a      	cmp	r2, r3
 800765c:	f63f af74 	bhi.w	8007548 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	791b      	ldrb	r3, [r3, #4]
 8007664:	2b02      	cmp	r3, #2
 8007666:	bf28      	it	cs
 8007668:	2302      	movcs	r3, #2
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007670:	429a      	cmp	r2, r3
 8007672:	d201      	bcs.n	8007678 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007674:	2303      	movs	r3, #3
 8007676:	e001      	b.n	800767c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800767c:	4618      	mov	r0, r3
 800767e:	3730      	adds	r7, #48	; 0x30
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	785a      	ldrb	r2, [r3, #1]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	789a      	ldrb	r2, [r3, #2]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	78da      	ldrb	r2, [r3, #3]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	791a      	ldrb	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	795a      	ldrb	r2, [r3, #5]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	799a      	ldrb	r2, [r3, #6]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	79da      	ldrb	r2, [r3, #7]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	7a1a      	ldrb	r2, [r3, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	721a      	strb	r2, [r3, #8]
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b087      	sub	sp, #28
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	781a      	ldrb	r2, [r3, #0]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	785a      	ldrb	r2, [r3, #1]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	789a      	ldrb	r2, [r3, #2]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	78da      	ldrb	r2, [r3, #3]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3304      	adds	r3, #4
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	b29a      	uxth	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3305      	adds	r3, #5
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	021b      	lsls	r3, r3, #8
 8007724:	b29b      	uxth	r3, r3
 8007726:	4313      	orrs	r3, r2
 8007728:	b29a      	uxth	r2, r3
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	799a      	ldrb	r2, [r3, #6]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	889b      	ldrh	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d102      	bne.n	8007744 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800773e:	2303      	movs	r3, #3
 8007740:	75fb      	strb	r3, [r7, #23]
 8007742:	e033      	b.n	80077ac <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	889b      	ldrh	r3, [r3, #4]
 8007748:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800774c:	f023 0307 	bic.w	r3, r3, #7
 8007750:	b29a      	uxth	r2, r3
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	889b      	ldrh	r3, [r3, #4]
 800775a:	b21a      	sxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3304      	adds	r3, #4
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	b299      	uxth	r1, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3305      	adds	r3, #5
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	b29b      	uxth	r3, r3
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	b29b      	uxth	r3, r3
 8007770:	430b      	orrs	r3, r1
 8007772:	b29b      	uxth	r3, r3
 8007774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007778:	2b00      	cmp	r3, #0
 800777a:	d110      	bne.n	800779e <USBH_ParseEPDesc+0xbc>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3304      	adds	r3, #4
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	b299      	uxth	r1, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3305      	adds	r3, #5
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	b29b      	uxth	r3, r3
 8007790:	430b      	orrs	r3, r1
 8007792:	b29b      	uxth	r3, r3
 8007794:	b21b      	sxth	r3, r3
 8007796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800779a:	b21b      	sxth	r3, r3
 800779c:	e001      	b.n	80077a2 <USBH_ParseEPDesc+0xc0>
 800779e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a2:	4313      	orrs	r3, r2
 80077a4:	b21b      	sxth	r3, r3
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d116      	bne.n	80077e4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	78db      	ldrb	r3, [r3, #3]
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d005      	beq.n	80077ce <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	78db      	ldrb	r3, [r3, #3]
 80077c6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d127      	bne.n	800781e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	799b      	ldrb	r3, [r3, #6]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <USBH_ParseEPDesc+0xfc>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	799b      	ldrb	r3, [r3, #6]
 80077da:	2b10      	cmp	r3, #16
 80077dc:	d91f      	bls.n	800781e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80077de:	2303      	movs	r3, #3
 80077e0:	75fb      	strb	r3, [r7, #23]
 80077e2:	e01c      	b.n	800781e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	78db      	ldrb	r3, [r3, #3]
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d10a      	bne.n	8007806 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	799b      	ldrb	r3, [r3, #6]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <USBH_ParseEPDesc+0x11e>
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	799b      	ldrb	r3, [r3, #6]
 80077fc:	2b10      	cmp	r3, #16
 80077fe:	d90e      	bls.n	800781e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007800:	2303      	movs	r3, #3
 8007802:	75fb      	strb	r3, [r7, #23]
 8007804:	e00b      	b.n	800781e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	78db      	ldrb	r3, [r3, #3]
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	2b03      	cmp	r3, #3
 8007810:	d105      	bne.n	800781e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	799b      	ldrb	r3, [r3, #6]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800781a:	2303      	movs	r3, #3
 800781c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007820:	4618      	mov	r0, r3
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	4613      	mov	r3, r2
 8007838:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3301      	adds	r3, #1
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b03      	cmp	r3, #3
 8007842:	d120      	bne.n	8007886 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	1e9a      	subs	r2, r3, #2
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	4293      	cmp	r3, r2
 800784e:	bf28      	it	cs
 8007850:	4613      	movcs	r3, r2
 8007852:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3302      	adds	r3, #2
 8007858:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800785a:	2300      	movs	r3, #0
 800785c:	82fb      	strh	r3, [r7, #22]
 800785e:	e00b      	b.n	8007878 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007860:	8afb      	ldrh	r3, [r7, #22]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4413      	add	r3, r2
 8007866:	781a      	ldrb	r2, [r3, #0]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	3301      	adds	r3, #1
 8007870:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007872:	8afb      	ldrh	r3, [r7, #22]
 8007874:	3302      	adds	r3, #2
 8007876:	82fb      	strh	r3, [r7, #22]
 8007878:	8afa      	ldrh	r2, [r7, #22]
 800787a:	8abb      	ldrh	r3, [r7, #20]
 800787c:	429a      	cmp	r2, r3
 800787e:	d3ef      	bcc.n	8007860 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
  }
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007892:	b480      	push	{r7}
 8007894:	b085      	sub	sp, #20
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	881a      	ldrh	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4413      	add	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80078d6:	2301      	movs	r3, #1
 80078d8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	789b      	ldrb	r3, [r3, #2]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d002      	beq.n	80078e8 <USBH_CtlReq+0x20>
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d00f      	beq.n	8007906 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80078e6:	e027      	b.n	8007938 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	88fa      	ldrh	r2, [r7, #6]
 80078f2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2202      	movs	r2, #2
 80078fe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007900:	2301      	movs	r3, #1
 8007902:	75fb      	strb	r3, [r7, #23]
      break;
 8007904:	e018      	b.n	8007938 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f81c 	bl	8007944 <USBH_HandleControl>
 800790c:	4603      	mov	r3, r0
 800790e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007910:	7dfb      	ldrb	r3, [r7, #23]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <USBH_CtlReq+0x54>
 8007916:	7dfb      	ldrb	r3, [r7, #23]
 8007918:	2b03      	cmp	r3, #3
 800791a:	d106      	bne.n	800792a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	761a      	strb	r2, [r3, #24]
      break;
 8007928:	e005      	b.n	8007936 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d102      	bne.n	8007936 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2201      	movs	r2, #1
 8007934:	709a      	strb	r2, [r3, #2]
      break;
 8007936:	bf00      	nop
  }
  return status;
 8007938:	7dfb      	ldrb	r3, [r7, #23]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af02      	add	r7, sp, #8
 800794a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800794c:	2301      	movs	r3, #1
 800794e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007950:	2300      	movs	r3, #0
 8007952:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	7e1b      	ldrb	r3, [r3, #24]
 8007958:	3b01      	subs	r3, #1
 800795a:	2b0a      	cmp	r3, #10
 800795c:	f200 8156 	bhi.w	8007c0c <USBH_HandleControl+0x2c8>
 8007960:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <USBH_HandleControl+0x24>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	08007995 	.word	0x08007995
 800796c:	080079af 	.word	0x080079af
 8007970:	08007a19 	.word	0x08007a19
 8007974:	08007a3f 	.word	0x08007a3f
 8007978:	08007a77 	.word	0x08007a77
 800797c:	08007aa1 	.word	0x08007aa1
 8007980:	08007af3 	.word	0x08007af3
 8007984:	08007b15 	.word	0x08007b15
 8007988:	08007b51 	.word	0x08007b51
 800798c:	08007b77 	.word	0x08007b77
 8007990:	08007bb5 	.word	0x08007bb5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f103 0110 	add.w	r1, r3, #16
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	795b      	ldrb	r3, [r3, #5]
 800799e:	461a      	mov	r2, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f943 	bl	8007c2c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2202      	movs	r2, #2
 80079aa:	761a      	strb	r2, [r3, #24]
      break;
 80079ac:	e139      	b.n	8007c22 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	795b      	ldrb	r3, [r3, #5]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fcc5 	bl	8008344 <USBH_LL_GetURBState>
 80079ba:	4603      	mov	r3, r0
 80079bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d11e      	bne.n	8007a02 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7c1b      	ldrb	r3, [r3, #16]
 80079c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	8adb      	ldrh	r3, [r3, #22]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80079d6:	7b7b      	ldrb	r3, [r7, #13]
 80079d8:	2b80      	cmp	r3, #128	; 0x80
 80079da:	d103      	bne.n	80079e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2203      	movs	r2, #3
 80079e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079e2:	e115      	b.n	8007c10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2205      	movs	r2, #5
 80079e8:	761a      	strb	r2, [r3, #24]
      break;
 80079ea:	e111      	b.n	8007c10 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80079ec:	7b7b      	ldrb	r3, [r7, #13]
 80079ee:	2b80      	cmp	r3, #128	; 0x80
 80079f0:	d103      	bne.n	80079fa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2209      	movs	r2, #9
 80079f6:	761a      	strb	r2, [r3, #24]
      break;
 80079f8:	e10a      	b.n	8007c10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2207      	movs	r2, #7
 80079fe:	761a      	strb	r2, [r3, #24]
      break;
 8007a00:	e106      	b.n	8007c10 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	d003      	beq.n	8007a10 <USBH_HandleControl+0xcc>
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	f040 8100 	bne.w	8007c10 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	220b      	movs	r2, #11
 8007a14:	761a      	strb	r2, [r3, #24]
      break;
 8007a16:	e0fb      	b.n	8007c10 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6899      	ldr	r1, [r3, #8]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	899a      	ldrh	r2, [r3, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	791b      	ldrb	r3, [r3, #4]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f93a 	bl	8007caa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2204      	movs	r2, #4
 8007a3a:	761a      	strb	r2, [r3, #24]
      break;
 8007a3c:	e0f1      	b.n	8007c22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	791b      	ldrb	r3, [r3, #4]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fc7d 	bl	8008344 <USBH_LL_GetURBState>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d102      	bne.n	8007a5a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2209      	movs	r2, #9
 8007a58:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	d102      	bne.n	8007a66 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007a60:	2303      	movs	r3, #3
 8007a62:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a64:	e0d6      	b.n	8007c14 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	f040 80d3 	bne.w	8007c14 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	220b      	movs	r2, #11
 8007a72:	761a      	strb	r2, [r3, #24]
      break;
 8007a74:	e0ce      	b.n	8007c14 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6899      	ldr	r1, [r3, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	899a      	ldrh	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	795b      	ldrb	r3, [r3, #5]
 8007a82:	2001      	movs	r0, #1
 8007a84:	9000      	str	r0, [sp, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f8ea 	bl	8007c60 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2206      	movs	r2, #6
 8007a9c:	761a      	strb	r2, [r3, #24]
      break;
 8007a9e:	e0c0      	b.n	8007c22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	795b      	ldrb	r3, [r3, #5]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fc4c 	bl	8008344 <USBH_LL_GetURBState>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d103      	bne.n	8007abe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2207      	movs	r2, #7
 8007aba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007abc:	e0ac      	b.n	8007c18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b05      	cmp	r3, #5
 8007ac2:	d105      	bne.n	8007ad0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	220c      	movs	r2, #12
 8007ac8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007aca:	2303      	movs	r3, #3
 8007acc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ace:	e0a3      	b.n	8007c18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d103      	bne.n	8007ade <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2205      	movs	r2, #5
 8007ada:	761a      	strb	r2, [r3, #24]
      break;
 8007adc:	e09c      	b.n	8007c18 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b04      	cmp	r3, #4
 8007ae2:	f040 8099 	bne.w	8007c18 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	220b      	movs	r2, #11
 8007aea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007aec:	2302      	movs	r3, #2
 8007aee:	73fb      	strb	r3, [r7, #15]
      break;
 8007af0:	e092      	b.n	8007c18 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	791b      	ldrb	r3, [r3, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	2100      	movs	r1, #0
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f8d5 	bl	8007caa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2208      	movs	r2, #8
 8007b10:	761a      	strb	r2, [r3, #24]

      break;
 8007b12:	e086      	b.n	8007c22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	791b      	ldrb	r3, [r3, #4]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fc12 	bl	8008344 <USBH_LL_GetURBState>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d105      	bne.n	8007b36 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	220d      	movs	r2, #13
 8007b2e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b34:	e072      	b.n	8007c1c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	d103      	bne.n	8007b44 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	220b      	movs	r2, #11
 8007b40:	761a      	strb	r2, [r3, #24]
      break;
 8007b42:	e06b      	b.n	8007c1c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2b05      	cmp	r3, #5
 8007b48:	d168      	bne.n	8007c1c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4e:	e065      	b.n	8007c1c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	795b      	ldrb	r3, [r3, #5]
 8007b54:	2201      	movs	r2, #1
 8007b56:	9200      	str	r2, [sp, #0]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f87f 	bl	8007c60 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	220a      	movs	r2, #10
 8007b72:	761a      	strb	r2, [r3, #24]
      break;
 8007b74:	e055      	b.n	8007c22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	795b      	ldrb	r3, [r3, #5]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fbe1 	bl	8008344 <USBH_LL_GetURBState>
 8007b82:	4603      	mov	r3, r0
 8007b84:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d105      	bne.n	8007b98 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	220d      	movs	r2, #13
 8007b94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b96:	e043      	b.n	8007c20 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d103      	bne.n	8007ba6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2209      	movs	r2, #9
 8007ba2:	761a      	strb	r2, [r3, #24]
      break;
 8007ba4:	e03c      	b.n	8007c20 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	2b04      	cmp	r3, #4
 8007baa:	d139      	bne.n	8007c20 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	220b      	movs	r2, #11
 8007bb0:	761a      	strb	r2, [r3, #24]
      break;
 8007bb2:	e035      	b.n	8007c20 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	7e5b      	ldrb	r3, [r3, #25]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	765a      	strb	r2, [r3, #25]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	7e5b      	ldrb	r3, [r3, #25]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d806      	bhi.n	8007bd6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007bd4:	e025      	b.n	8007c22 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bdc:	2106      	movs	r1, #6
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	795b      	ldrb	r3, [r3, #5]
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f90c 	bl	8007e0c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	791b      	ldrb	r3, [r3, #4]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f906 	bl	8007e0c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007c06:	2302      	movs	r3, #2
 8007c08:	73fb      	strb	r3, [r7, #15]
      break;
 8007c0a:	e00a      	b.n	8007c22 <USBH_HandleControl+0x2de>

    default:
      break;
 8007c0c:	bf00      	nop
 8007c0e:	e008      	b.n	8007c22 <USBH_HandleControl+0x2de>
      break;
 8007c10:	bf00      	nop
 8007c12:	e006      	b.n	8007c22 <USBH_HandleControl+0x2de>
      break;
 8007c14:	bf00      	nop
 8007c16:	e004      	b.n	8007c22 <USBH_HandleControl+0x2de>
      break;
 8007c18:	bf00      	nop
 8007c1a:	e002      	b.n	8007c22 <USBH_HandleControl+0x2de>
      break;
 8007c1c:	bf00      	nop
 8007c1e:	e000      	b.n	8007c22 <USBH_HandleControl+0x2de>
      break;
 8007c20:	bf00      	nop
  }

  return status;
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b088      	sub	sp, #32
 8007c30:	af04      	add	r7, sp, #16
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	4613      	mov	r3, r2
 8007c38:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c3a:	79f9      	ldrb	r1, [r7, #7]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9303      	str	r3, [sp, #12]
 8007c40:	2308      	movs	r3, #8
 8007c42:	9302      	str	r3, [sp, #8]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2200      	movs	r2, #0
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 fb46 	bl	80082e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af04      	add	r7, sp, #16
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	460b      	mov	r3, r1
 8007c70:	80fb      	strh	r3, [r7, #6]
 8007c72:	4613      	mov	r3, r2
 8007c74:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c84:	7979      	ldrb	r1, [r7, #5]
 8007c86:	7e3b      	ldrb	r3, [r7, #24]
 8007c88:	9303      	str	r3, [sp, #12]
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	9302      	str	r3, [sp, #8]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	9301      	str	r3, [sp, #4]
 8007c92:	2301      	movs	r3, #1
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	2300      	movs	r3, #0
 8007c98:	2200      	movs	r2, #0
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fb21 	bl	80082e2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b088      	sub	sp, #32
 8007cae:	af04      	add	r7, sp, #16
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	460b      	mov	r3, r1
 8007cba:	80fb      	strh	r3, [r7, #6]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007cc0:	7979      	ldrb	r1, [r7, #5]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9303      	str	r3, [sp, #12]
 8007cc6:	88fb      	ldrh	r3, [r7, #6]
 8007cc8:	9302      	str	r3, [sp, #8]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	2301      	movs	r3, #1
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 fb03 	bl	80082e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007cdc:	2300      	movs	r3, #0

}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b088      	sub	sp, #32
 8007cea:	af04      	add	r7, sp, #16
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	80fb      	strh	r3, [r7, #6]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d0a:	7979      	ldrb	r1, [r7, #5]
 8007d0c:	7e3b      	ldrb	r3, [r7, #24]
 8007d0e:	9303      	str	r3, [sp, #12]
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	9302      	str	r3, [sp, #8]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	2301      	movs	r3, #1
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 fade 	bl	80082e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af04      	add	r7, sp, #16
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	460b      	mov	r3, r1
 8007d40:	80fb      	strh	r3, [r7, #6]
 8007d42:	4613      	mov	r3, r2
 8007d44:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d46:	7979      	ldrb	r1, [r7, #5]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9303      	str	r3, [sp, #12]
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	9302      	str	r3, [sp, #8]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	9301      	str	r3, [sp, #4]
 8007d54:	2301      	movs	r3, #1
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	2302      	movs	r3, #2
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 fac0 	bl	80082e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af04      	add	r7, sp, #16
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	4608      	mov	r0, r1
 8007d76:	4611      	mov	r1, r2
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	70fb      	strb	r3, [r7, #3]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70bb      	strb	r3, [r7, #2]
 8007d82:	4613      	mov	r3, r2
 8007d84:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007d86:	7878      	ldrb	r0, [r7, #1]
 8007d88:	78ba      	ldrb	r2, [r7, #2]
 8007d8a:	78f9      	ldrb	r1, [r7, #3]
 8007d8c:	8b3b      	ldrh	r3, [r7, #24]
 8007d8e:	9302      	str	r3, [sp, #8]
 8007d90:	7d3b      	ldrb	r3, [r7, #20]
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	7c3b      	ldrb	r3, [r7, #16]
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	4603      	mov	r3, r0
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa53 	bl	8008246 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa72 	bl	80082a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f836 	bl	8007e48 <USBH_GetFreePipe>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007de0:	89fb      	ldrh	r3, [r7, #14]
 8007de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00a      	beq.n	8007e00 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007dea:	78fa      	ldrb	r2, [r7, #3]
 8007dec:	89fb      	ldrh	r3, [r7, #14]
 8007dee:	f003 030f 	and.w	r3, r3, #15
 8007df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	33e0      	adds	r3, #224	; 0xe0
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007e00:	89fb      	ldrh	r3, [r7, #14]
 8007e02:	b2db      	uxtb	r3, r3
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	2b0f      	cmp	r3, #15
 8007e1c:	d80d      	bhi.n	8007e3a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	33e0      	adds	r3, #224	; 0xe0
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	33e0      	adds	r3, #224	; 0xe0
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	440b      	add	r3, r1
 8007e38:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007e54:	2300      	movs	r3, #0
 8007e56:	73fb      	strb	r3, [r7, #15]
 8007e58:	e00f      	b.n	8007e7a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	33e0      	adds	r3, #224	; 0xe0
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	e007      	b.n	8007e84 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	3301      	adds	r3, #1
 8007e78:	73fb      	strb	r3, [r7, #15]
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	2b0f      	cmp	r3, #15
 8007e7e:	d9ec      	bls.n	8007e5a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007e94:	2201      	movs	r2, #1
 8007e96:	490e      	ldr	r1, [pc, #56]	; (8007ed0 <MX_USB_HOST_Init+0x40>)
 8007e98:	480e      	ldr	r0, [pc, #56]	; (8007ed4 <MX_USB_HOST_Init+0x44>)
 8007e9a:	f7fe fba7 	bl	80065ec <USBH_Init>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007ea4:	f7f8 fdb4 	bl	8000a10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007ea8:	490b      	ldr	r1, [pc, #44]	; (8007ed8 <MX_USB_HOST_Init+0x48>)
 8007eaa:	480a      	ldr	r0, [pc, #40]	; (8007ed4 <MX_USB_HOST_Init+0x44>)
 8007eac:	f7fe fc2c 	bl	8006708 <USBH_RegisterClass>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007eb6:	f7f8 fdab 	bl	8000a10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007eba:	4806      	ldr	r0, [pc, #24]	; (8007ed4 <MX_USB_HOST_Init+0x44>)
 8007ebc:	f7fe fcb0 	bl	8006820 <USBH_Start>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007ec6:	f7f8 fda3 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007eca:	bf00      	nop
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	08007ef1 	.word	0x08007ef1
 8007ed4:	20000238 	.word	0x20000238
 8007ed8:	2000000c 	.word	0x2000000c

08007edc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007ee0:	4802      	ldr	r0, [pc, #8]	; (8007eec <MX_USB_HOST_Process+0x10>)
 8007ee2:	f7fe fcad 	bl	8006840 <USBH_Process>
}
 8007ee6:	bf00      	nop
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000238 	.word	0x20000238

08007ef0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007efc:	78fb      	ldrb	r3, [r7, #3]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d819      	bhi.n	8007f38 <USBH_UserProcess+0x48>
 8007f04:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <USBH_UserProcess+0x1c>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	08007f29 	.word	0x08007f29
 8007f14:	08007f39 	.word	0x08007f39
 8007f18:	08007f31 	.word	0x08007f31
 8007f1c:	08007f21 	.word	0x08007f21
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007f20:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <USBH_UserProcess+0x58>)
 8007f22:	2203      	movs	r2, #3
 8007f24:	701a      	strb	r2, [r3, #0]
  break;
 8007f26:	e008      	b.n	8007f3a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007f28:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <USBH_UserProcess+0x58>)
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	701a      	strb	r2, [r3, #0]
  break;
 8007f2e:	e004      	b.n	8007f3a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007f30:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <USBH_UserProcess+0x58>)
 8007f32:	2201      	movs	r2, #1
 8007f34:	701a      	strb	r2, [r3, #0]
  break;
 8007f36:	e000      	b.n	8007f3a <USBH_UserProcess+0x4a>

  default:
  break;
 8007f38:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	20000610 	.word	0x20000610

08007f4c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	; 0x28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f54:	f107 0314 	add.w	r3, r7, #20
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	605a      	str	r2, [r3, #4]
 8007f5e:	609a      	str	r2, [r3, #8]
 8007f60:	60da      	str	r2, [r3, #12]
 8007f62:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f6c:	d147      	bne.n	8007ffe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f6e:	2300      	movs	r3, #0
 8007f70:	613b      	str	r3, [r7, #16]
 8007f72:	4b25      	ldr	r3, [pc, #148]	; (8008008 <HAL_HCD_MspInit+0xbc>)
 8007f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f76:	4a24      	ldr	r2, [pc, #144]	; (8008008 <HAL_HCD_MspInit+0xbc>)
 8007f78:	f043 0301 	orr.w	r3, r3, #1
 8007f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f7e:	4b22      	ldr	r3, [pc, #136]	; (8008008 <HAL_HCD_MspInit+0xbc>)
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f98:	f107 0314 	add.w	r3, r7, #20
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	481b      	ldr	r0, [pc, #108]	; (800800c <HAL_HCD_MspInit+0xc0>)
 8007fa0:	f7f9 f916 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007fa4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007faa:	2302      	movs	r3, #2
 8007fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fb6:	230a      	movs	r3, #10
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fba:	f107 0314 	add.w	r3, r7, #20
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4812      	ldr	r0, [pc, #72]	; (800800c <HAL_HCD_MspInit+0xc0>)
 8007fc2:	f7f9 f905 	bl	80011d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fc6:	4b10      	ldr	r3, [pc, #64]	; (8008008 <HAL_HCD_MspInit+0xbc>)
 8007fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fca:	4a0f      	ldr	r2, [pc, #60]	; (8008008 <HAL_HCD_MspInit+0xbc>)
 8007fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd0:	6353      	str	r3, [r2, #52]	; 0x34
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <HAL_HCD_MspInit+0xbc>)
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fda:	4a0b      	ldr	r2, [pc, #44]	; (8008008 <HAL_HCD_MspInit+0xbc>)
 8007fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8007fe2:	4b09      	ldr	r3, [pc, #36]	; (8008008 <HAL_HCD_MspInit+0xbc>)
 8007fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	2043      	movs	r0, #67	; 0x43
 8007ff4:	f7f9 f8b5 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ff8:	2043      	movs	r0, #67	; 0x43
 8007ffa:	f7f9 f8ce 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ffe:	bf00      	nop
 8008000:	3728      	adds	r7, #40	; 0x28
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	40023800 	.word	0x40023800
 800800c:	40020000 	.word	0x40020000

08008010 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe ffed 	bl	8006ffe <USBH_LL_IncTimer>
}
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff f825 	bl	800708a <USBH_LL_Connect>
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff f82e 	bl	80070b8 <USBH_LL_Disconnect>
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
 8008070:	4613      	mov	r3, r2
 8008072:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe ffdf 	bl	8007052 <USBH_LL_PortEnabled>
}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fe ffdf 	bl	800706e <USBH_LL_PortDisabled>
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d12a      	bne.n	8008120 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80080ca:	4a18      	ldr	r2, [pc, #96]	; (800812c <USBH_LL_Init+0x74>)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a15      	ldr	r2, [pc, #84]	; (800812c <USBH_LL_Init+0x74>)
 80080d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80080da:	4b14      	ldr	r3, [pc, #80]	; (800812c <USBH_LL_Init+0x74>)
 80080dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80080e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80080e2:	4b12      	ldr	r3, [pc, #72]	; (800812c <USBH_LL_Init+0x74>)
 80080e4:	2208      	movs	r2, #8
 80080e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80080e8:	4b10      	ldr	r3, [pc, #64]	; (800812c <USBH_LL_Init+0x74>)
 80080ea:	2201      	movs	r2, #1
 80080ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80080ee:	4b0f      	ldr	r3, [pc, #60]	; (800812c <USBH_LL_Init+0x74>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80080f4:	4b0d      	ldr	r3, [pc, #52]	; (800812c <USBH_LL_Init+0x74>)
 80080f6:	2202      	movs	r2, #2
 80080f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80080fa:	4b0c      	ldr	r3, [pc, #48]	; (800812c <USBH_LL_Init+0x74>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008100:	480a      	ldr	r0, [pc, #40]	; (800812c <USBH_LL_Init+0x74>)
 8008102:	f7f9 fa34 	bl	800156e <HAL_HCD_Init>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800810c:	f7f8 fc80 	bl	8000a10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008110:	4806      	ldr	r0, [pc, #24]	; (800812c <USBH_LL_Init+0x74>)
 8008112:	f7f9 fe18 	bl	8001d46 <HAL_HCD_GetCurrentFrame>
 8008116:	4603      	mov	r3, r0
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7fe ff60 	bl	8006fe0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000614 	.word	0x20000614

08008130 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008146:	4618      	mov	r0, r3
 8008148:	f7f9 fd87 	bl	8001c5a <HAL_HCD_Start>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f95c 	bl	8008410 <USBH_Get_USB_Status>
 8008158:	4603      	mov	r3, r0
 800815a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815c:	7bbb      	ldrb	r3, [r7, #14]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800817c:	4618      	mov	r0, r3
 800817e:	f7f9 fd8f 	bl	8001ca0 <HAL_HCD_Stop>
 8008182:	4603      	mov	r3, r0
 8008184:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	4618      	mov	r0, r3
 800818a:	f000 f941 	bl	8008410 <USBH_Get_USB_Status>
 800818e:	4603      	mov	r3, r0
 8008190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008192:	7bbb      	ldrb	r3, [r7, #14]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80081a4:	2301      	movs	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7f9 fdd7 	bl	8001d62 <HAL_HCD_GetCurrentSpeed>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d00c      	beq.n	80081d4 <USBH_LL_GetSpeed+0x38>
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d80d      	bhi.n	80081da <USBH_LL_GetSpeed+0x3e>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <USBH_LL_GetSpeed+0x2c>
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d003      	beq.n	80081ce <USBH_LL_GetSpeed+0x32>
 80081c6:	e008      	b.n	80081da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
    break;
 80081cc:	e008      	b.n	80081e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80081ce:	2301      	movs	r3, #1
 80081d0:	73fb      	strb	r3, [r7, #15]
    break;
 80081d2:	e005      	b.n	80081e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80081d4:	2302      	movs	r3, #2
 80081d6:	73fb      	strb	r3, [r7, #15]
    break;
 80081d8:	e002      	b.n	80081e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80081da:	2301      	movs	r3, #1
 80081dc:	73fb      	strb	r3, [r7, #15]
    break;
 80081de:	bf00      	nop
  }
  return  speed;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008200:	4618      	mov	r0, r3
 8008202:	f7f9 fd6a 	bl	8001cda <HAL_HCD_ResetPort>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f8ff 	bl	8008410 <USBH_Get_USB_Status>
 8008212:	4603      	mov	r3, r0
 8008214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008216:	7bbb      	ldrb	r3, [r7, #14]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	4611      	mov	r1, r2
 8008236:	4618      	mov	r0, r3
 8008238:	f7f9 fd71 	bl	8001d1e <HAL_HCD_HC_GetXferCount>
 800823c:	4603      	mov	r3, r0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008246:	b590      	push	{r4, r7, lr}
 8008248:	b089      	sub	sp, #36	; 0x24
 800824a:	af04      	add	r7, sp, #16
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	4608      	mov	r0, r1
 8008250:	4611      	mov	r1, r2
 8008252:	461a      	mov	r2, r3
 8008254:	4603      	mov	r3, r0
 8008256:	70fb      	strb	r3, [r7, #3]
 8008258:	460b      	mov	r3, r1
 800825a:	70bb      	strb	r3, [r7, #2]
 800825c:	4613      	mov	r3, r2
 800825e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800826e:	787c      	ldrb	r4, [r7, #1]
 8008270:	78ba      	ldrb	r2, [r7, #2]
 8008272:	78f9      	ldrb	r1, [r7, #3]
 8008274:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008276:	9302      	str	r3, [sp, #8]
 8008278:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800827c:	9301      	str	r3, [sp, #4]
 800827e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	4623      	mov	r3, r4
 8008286:	f7f9 f9d4 	bl	8001632 <HAL_HCD_HC_Init>
 800828a:	4603      	mov	r3, r0
 800828c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	4618      	mov	r0, r3
 8008292:	f000 f8bd 	bl	8008410 <USBH_Get_USB_Status>
 8008296:	4603      	mov	r3, r0
 8008298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800829a:	7bbb      	ldrb	r3, [r7, #14]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd90      	pop	{r4, r7, pc}

080082a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082be:	78fa      	ldrb	r2, [r7, #3]
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f9 fa44 	bl	8001750 <HAL_HCD_HC_Halt>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f89e 	bl	8008410 <USBH_Get_USB_Status>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80082e2:	b590      	push	{r4, r7, lr}
 80082e4:	b089      	sub	sp, #36	; 0x24
 80082e6:	af04      	add	r7, sp, #16
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	4608      	mov	r0, r1
 80082ec:	4611      	mov	r1, r2
 80082ee:	461a      	mov	r2, r3
 80082f0:	4603      	mov	r3, r0
 80082f2:	70fb      	strb	r3, [r7, #3]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70bb      	strb	r3, [r7, #2]
 80082f8:	4613      	mov	r3, r2
 80082fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800830a:	787c      	ldrb	r4, [r7, #1]
 800830c:	78ba      	ldrb	r2, [r7, #2]
 800830e:	78f9      	ldrb	r1, [r7, #3]
 8008310:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008318:	9302      	str	r3, [sp, #8]
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	4623      	mov	r3, r4
 8008326:	f7f9 fa37 	bl	8001798 <HAL_HCD_HC_SubmitRequest>
 800832a:	4603      	mov	r3, r0
 800832c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	4618      	mov	r0, r3
 8008332:	f000 f86d 	bl	8008410 <USBH_Get_USB_Status>
 8008336:	4603      	mov	r3, r0
 8008338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800833a:	7bbb      	ldrb	r3, [r7, #14]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	bd90      	pop	{r4, r7, pc}

08008344 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7f9 fccb 	bl	8001cf6 <HAL_HCD_HC_GetURBState>
 8008360:	4603      	mov	r3, r0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800837c:	2b01      	cmp	r3, #1
 800837e:	d103      	bne.n	8008388 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	4618      	mov	r0, r3
 8008384:	f000 f870 	bl	8008468 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008388:	20c8      	movs	r0, #200	; 0xc8
 800838a:	f7f8 fdeb 	bl	8000f64 <HAL_Delay>
  return USBH_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]
 80083a4:	4613      	mov	r3, r2
 80083a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	212c      	movs	r1, #44	; 0x2c
 80083b6:	fb01 f303 	mul.w	r3, r1, r3
 80083ba:	4413      	add	r3, r2
 80083bc:	333b      	adds	r3, #59	; 0x3b
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d009      	beq.n	80083d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	212c      	movs	r1, #44	; 0x2c
 80083ca:	fb01 f303 	mul.w	r3, r1, r3
 80083ce:	4413      	add	r3, r2
 80083d0:	3354      	adds	r3, #84	; 0x54
 80083d2:	78ba      	ldrb	r2, [r7, #2]
 80083d4:	701a      	strb	r2, [r3, #0]
 80083d6:	e008      	b.n	80083ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	212c      	movs	r1, #44	; 0x2c
 80083de:	fb01 f303 	mul.w	r3, r1, r3
 80083e2:	4413      	add	r3, r2
 80083e4:	3355      	adds	r3, #85	; 0x55
 80083e6:	78ba      	ldrb	r2, [r7, #2]
 80083e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7f8 fdaf 	bl	8000f64 <HAL_Delay>
}
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	2b03      	cmp	r3, #3
 8008422:	d817      	bhi.n	8008454 <USBH_Get_USB_Status+0x44>
 8008424:	a201      	add	r2, pc, #4	; (adr r2, 800842c <USBH_Get_USB_Status+0x1c>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	0800843d 	.word	0x0800843d
 8008430:	08008443 	.word	0x08008443
 8008434:	08008449 	.word	0x08008449
 8008438:	0800844f 	.word	0x0800844f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
    break;
 8008440:	e00b      	b.n	800845a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008442:	2302      	movs	r3, #2
 8008444:	73fb      	strb	r3, [r7, #15]
    break;
 8008446:	e008      	b.n	800845a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008448:	2301      	movs	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
    break;
 800844c:	e005      	b.n	800845a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800844e:	2302      	movs	r3, #2
 8008450:	73fb      	strb	r3, [r7, #15]
    break;
 8008452:	e002      	b.n	800845a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008454:	2302      	movs	r3, #2
 8008456:	73fb      	strb	r3, [r7, #15]
    break;
 8008458:	bf00      	nop
  }
  return usb_status;
 800845a:	7bfb      	ldrb	r3, [r7, #15]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800847c:	2300      	movs	r3, #0
 800847e:	73fb      	strb	r3, [r7, #15]
 8008480:	e001      	b.n	8008486 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008482:	2301      	movs	r3, #1
 8008484:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	461a      	mov	r2, r3
 800848a:	2101      	movs	r1, #1
 800848c:	4803      	ldr	r0, [pc, #12]	; (800849c <MX_DriverVbusFS+0x34>)
 800848e:	f7f9 f83b 	bl	8001508 <HAL_GPIO_WritePin>
}
 8008492:	bf00      	nop
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	40020800 	.word	0x40020800

080084a0 <__errno>:
 80084a0:	4b01      	ldr	r3, [pc, #4]	; (80084a8 <__errno+0x8>)
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	2000002c 	.word	0x2000002c

080084ac <__libc_init_array>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	4d0d      	ldr	r5, [pc, #52]	; (80084e4 <__libc_init_array+0x38>)
 80084b0:	4c0d      	ldr	r4, [pc, #52]	; (80084e8 <__libc_init_array+0x3c>)
 80084b2:	1b64      	subs	r4, r4, r5
 80084b4:	10a4      	asrs	r4, r4, #2
 80084b6:	2600      	movs	r6, #0
 80084b8:	42a6      	cmp	r6, r4
 80084ba:	d109      	bne.n	80084d0 <__libc_init_array+0x24>
 80084bc:	4d0b      	ldr	r5, [pc, #44]	; (80084ec <__libc_init_array+0x40>)
 80084be:	4c0c      	ldr	r4, [pc, #48]	; (80084f0 <__libc_init_array+0x44>)
 80084c0:	f000 f92e 	bl	8008720 <_init>
 80084c4:	1b64      	subs	r4, r4, r5
 80084c6:	10a4      	asrs	r4, r4, #2
 80084c8:	2600      	movs	r6, #0
 80084ca:	42a6      	cmp	r6, r4
 80084cc:	d105      	bne.n	80084da <__libc_init_array+0x2e>
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d4:	4798      	blx	r3
 80084d6:	3601      	adds	r6, #1
 80084d8:	e7ee      	b.n	80084b8 <__libc_init_array+0xc>
 80084da:	f855 3b04 	ldr.w	r3, [r5], #4
 80084de:	4798      	blx	r3
 80084e0:	3601      	adds	r6, #1
 80084e2:	e7f2      	b.n	80084ca <__libc_init_array+0x1e>
 80084e4:	0800875c 	.word	0x0800875c
 80084e8:	0800875c 	.word	0x0800875c
 80084ec:	0800875c 	.word	0x0800875c
 80084f0:	08008760 	.word	0x08008760

080084f4 <malloc>:
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <malloc+0xc>)
 80084f6:	4601      	mov	r1, r0
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	f000 b87f 	b.w	80085fc <_malloc_r>
 80084fe:	bf00      	nop
 8008500:	2000002c 	.word	0x2000002c

08008504 <free>:
 8008504:	4b02      	ldr	r3, [pc, #8]	; (8008510 <free+0xc>)
 8008506:	4601      	mov	r1, r0
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	f000 b80b 	b.w	8008524 <_free_r>
 800850e:	bf00      	nop
 8008510:	2000002c 	.word	0x2000002c

08008514 <memset>:
 8008514:	4402      	add	r2, r0
 8008516:	4603      	mov	r3, r0
 8008518:	4293      	cmp	r3, r2
 800851a:	d100      	bne.n	800851e <memset+0xa>
 800851c:	4770      	bx	lr
 800851e:	f803 1b01 	strb.w	r1, [r3], #1
 8008522:	e7f9      	b.n	8008518 <memset+0x4>

08008524 <_free_r>:
 8008524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008526:	2900      	cmp	r1, #0
 8008528:	d044      	beq.n	80085b4 <_free_r+0x90>
 800852a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800852e:	9001      	str	r0, [sp, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f1a1 0404 	sub.w	r4, r1, #4
 8008536:	bfb8      	it	lt
 8008538:	18e4      	addlt	r4, r4, r3
 800853a:	f000 f8e3 	bl	8008704 <__malloc_lock>
 800853e:	4a1e      	ldr	r2, [pc, #120]	; (80085b8 <_free_r+0x94>)
 8008540:	9801      	ldr	r0, [sp, #4]
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	b933      	cbnz	r3, 8008554 <_free_r+0x30>
 8008546:	6063      	str	r3, [r4, #4]
 8008548:	6014      	str	r4, [r2, #0]
 800854a:	b003      	add	sp, #12
 800854c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008550:	f000 b8de 	b.w	8008710 <__malloc_unlock>
 8008554:	42a3      	cmp	r3, r4
 8008556:	d908      	bls.n	800856a <_free_r+0x46>
 8008558:	6825      	ldr	r5, [r4, #0]
 800855a:	1961      	adds	r1, r4, r5
 800855c:	428b      	cmp	r3, r1
 800855e:	bf01      	itttt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	1949      	addeq	r1, r1, r5
 8008566:	6021      	streq	r1, [r4, #0]
 8008568:	e7ed      	b.n	8008546 <_free_r+0x22>
 800856a:	461a      	mov	r2, r3
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	b10b      	cbz	r3, 8008574 <_free_r+0x50>
 8008570:	42a3      	cmp	r3, r4
 8008572:	d9fa      	bls.n	800856a <_free_r+0x46>
 8008574:	6811      	ldr	r1, [r2, #0]
 8008576:	1855      	adds	r5, r2, r1
 8008578:	42a5      	cmp	r5, r4
 800857a:	d10b      	bne.n	8008594 <_free_r+0x70>
 800857c:	6824      	ldr	r4, [r4, #0]
 800857e:	4421      	add	r1, r4
 8008580:	1854      	adds	r4, r2, r1
 8008582:	42a3      	cmp	r3, r4
 8008584:	6011      	str	r1, [r2, #0]
 8008586:	d1e0      	bne.n	800854a <_free_r+0x26>
 8008588:	681c      	ldr	r4, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	6053      	str	r3, [r2, #4]
 800858e:	4421      	add	r1, r4
 8008590:	6011      	str	r1, [r2, #0]
 8008592:	e7da      	b.n	800854a <_free_r+0x26>
 8008594:	d902      	bls.n	800859c <_free_r+0x78>
 8008596:	230c      	movs	r3, #12
 8008598:	6003      	str	r3, [r0, #0]
 800859a:	e7d6      	b.n	800854a <_free_r+0x26>
 800859c:	6825      	ldr	r5, [r4, #0]
 800859e:	1961      	adds	r1, r4, r5
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf04      	itt	eq
 80085a4:	6819      	ldreq	r1, [r3, #0]
 80085a6:	685b      	ldreq	r3, [r3, #4]
 80085a8:	6063      	str	r3, [r4, #4]
 80085aa:	bf04      	itt	eq
 80085ac:	1949      	addeq	r1, r1, r5
 80085ae:	6021      	streq	r1, [r4, #0]
 80085b0:	6054      	str	r4, [r2, #4]
 80085b2:	e7ca      	b.n	800854a <_free_r+0x26>
 80085b4:	b003      	add	sp, #12
 80085b6:	bd30      	pop	{r4, r5, pc}
 80085b8:	20000918 	.word	0x20000918

080085bc <sbrk_aligned>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	4e0e      	ldr	r6, [pc, #56]	; (80085f8 <sbrk_aligned+0x3c>)
 80085c0:	460c      	mov	r4, r1
 80085c2:	6831      	ldr	r1, [r6, #0]
 80085c4:	4605      	mov	r5, r0
 80085c6:	b911      	cbnz	r1, 80085ce <sbrk_aligned+0x12>
 80085c8:	f000 f88c 	bl	80086e4 <_sbrk_r>
 80085cc:	6030      	str	r0, [r6, #0]
 80085ce:	4621      	mov	r1, r4
 80085d0:	4628      	mov	r0, r5
 80085d2:	f000 f887 	bl	80086e4 <_sbrk_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d00a      	beq.n	80085f0 <sbrk_aligned+0x34>
 80085da:	1cc4      	adds	r4, r0, #3
 80085dc:	f024 0403 	bic.w	r4, r4, #3
 80085e0:	42a0      	cmp	r0, r4
 80085e2:	d007      	beq.n	80085f4 <sbrk_aligned+0x38>
 80085e4:	1a21      	subs	r1, r4, r0
 80085e6:	4628      	mov	r0, r5
 80085e8:	f000 f87c 	bl	80086e4 <_sbrk_r>
 80085ec:	3001      	adds	r0, #1
 80085ee:	d101      	bne.n	80085f4 <sbrk_aligned+0x38>
 80085f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80085f4:	4620      	mov	r0, r4
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	2000091c 	.word	0x2000091c

080085fc <_malloc_r>:
 80085fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	1ccd      	adds	r5, r1, #3
 8008602:	f025 0503 	bic.w	r5, r5, #3
 8008606:	3508      	adds	r5, #8
 8008608:	2d0c      	cmp	r5, #12
 800860a:	bf38      	it	cc
 800860c:	250c      	movcc	r5, #12
 800860e:	2d00      	cmp	r5, #0
 8008610:	4607      	mov	r7, r0
 8008612:	db01      	blt.n	8008618 <_malloc_r+0x1c>
 8008614:	42a9      	cmp	r1, r5
 8008616:	d905      	bls.n	8008624 <_malloc_r+0x28>
 8008618:	230c      	movs	r3, #12
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	2600      	movs	r6, #0
 800861e:	4630      	mov	r0, r6
 8008620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008624:	4e2e      	ldr	r6, [pc, #184]	; (80086e0 <_malloc_r+0xe4>)
 8008626:	f000 f86d 	bl	8008704 <__malloc_lock>
 800862a:	6833      	ldr	r3, [r6, #0]
 800862c:	461c      	mov	r4, r3
 800862e:	bb34      	cbnz	r4, 800867e <_malloc_r+0x82>
 8008630:	4629      	mov	r1, r5
 8008632:	4638      	mov	r0, r7
 8008634:	f7ff ffc2 	bl	80085bc <sbrk_aligned>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	4604      	mov	r4, r0
 800863c:	d14d      	bne.n	80086da <_malloc_r+0xde>
 800863e:	6834      	ldr	r4, [r6, #0]
 8008640:	4626      	mov	r6, r4
 8008642:	2e00      	cmp	r6, #0
 8008644:	d140      	bne.n	80086c8 <_malloc_r+0xcc>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	4631      	mov	r1, r6
 800864a:	4638      	mov	r0, r7
 800864c:	eb04 0803 	add.w	r8, r4, r3
 8008650:	f000 f848 	bl	80086e4 <_sbrk_r>
 8008654:	4580      	cmp	r8, r0
 8008656:	d13a      	bne.n	80086ce <_malloc_r+0xd2>
 8008658:	6821      	ldr	r1, [r4, #0]
 800865a:	3503      	adds	r5, #3
 800865c:	1a6d      	subs	r5, r5, r1
 800865e:	f025 0503 	bic.w	r5, r5, #3
 8008662:	3508      	adds	r5, #8
 8008664:	2d0c      	cmp	r5, #12
 8008666:	bf38      	it	cc
 8008668:	250c      	movcc	r5, #12
 800866a:	4629      	mov	r1, r5
 800866c:	4638      	mov	r0, r7
 800866e:	f7ff ffa5 	bl	80085bc <sbrk_aligned>
 8008672:	3001      	adds	r0, #1
 8008674:	d02b      	beq.n	80086ce <_malloc_r+0xd2>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	442b      	add	r3, r5
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	e00e      	b.n	800869c <_malloc_r+0xa0>
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	1b52      	subs	r2, r2, r5
 8008682:	d41e      	bmi.n	80086c2 <_malloc_r+0xc6>
 8008684:	2a0b      	cmp	r2, #11
 8008686:	d916      	bls.n	80086b6 <_malloc_r+0xba>
 8008688:	1961      	adds	r1, r4, r5
 800868a:	42a3      	cmp	r3, r4
 800868c:	6025      	str	r5, [r4, #0]
 800868e:	bf18      	it	ne
 8008690:	6059      	strne	r1, [r3, #4]
 8008692:	6863      	ldr	r3, [r4, #4]
 8008694:	bf08      	it	eq
 8008696:	6031      	streq	r1, [r6, #0]
 8008698:	5162      	str	r2, [r4, r5]
 800869a:	604b      	str	r3, [r1, #4]
 800869c:	4638      	mov	r0, r7
 800869e:	f104 060b 	add.w	r6, r4, #11
 80086a2:	f000 f835 	bl	8008710 <__malloc_unlock>
 80086a6:	f026 0607 	bic.w	r6, r6, #7
 80086aa:	1d23      	adds	r3, r4, #4
 80086ac:	1af2      	subs	r2, r6, r3
 80086ae:	d0b6      	beq.n	800861e <_malloc_r+0x22>
 80086b0:	1b9b      	subs	r3, r3, r6
 80086b2:	50a3      	str	r3, [r4, r2]
 80086b4:	e7b3      	b.n	800861e <_malloc_r+0x22>
 80086b6:	6862      	ldr	r2, [r4, #4]
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	bf0c      	ite	eq
 80086bc:	6032      	streq	r2, [r6, #0]
 80086be:	605a      	strne	r2, [r3, #4]
 80086c0:	e7ec      	b.n	800869c <_malloc_r+0xa0>
 80086c2:	4623      	mov	r3, r4
 80086c4:	6864      	ldr	r4, [r4, #4]
 80086c6:	e7b2      	b.n	800862e <_malloc_r+0x32>
 80086c8:	4634      	mov	r4, r6
 80086ca:	6876      	ldr	r6, [r6, #4]
 80086cc:	e7b9      	b.n	8008642 <_malloc_r+0x46>
 80086ce:	230c      	movs	r3, #12
 80086d0:	603b      	str	r3, [r7, #0]
 80086d2:	4638      	mov	r0, r7
 80086d4:	f000 f81c 	bl	8008710 <__malloc_unlock>
 80086d8:	e7a1      	b.n	800861e <_malloc_r+0x22>
 80086da:	6025      	str	r5, [r4, #0]
 80086dc:	e7de      	b.n	800869c <_malloc_r+0xa0>
 80086de:	bf00      	nop
 80086e0:	20000918 	.word	0x20000918

080086e4 <_sbrk_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4d06      	ldr	r5, [pc, #24]	; (8008700 <_sbrk_r+0x1c>)
 80086e8:	2300      	movs	r3, #0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	602b      	str	r3, [r5, #0]
 80086f0:	f7f8 fb54 	bl	8000d9c <_sbrk>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	d102      	bne.n	80086fe <_sbrk_r+0x1a>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	b103      	cbz	r3, 80086fe <_sbrk_r+0x1a>
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	20000920 	.word	0x20000920

08008704 <__malloc_lock>:
 8008704:	4801      	ldr	r0, [pc, #4]	; (800870c <__malloc_lock+0x8>)
 8008706:	f000 b809 	b.w	800871c <__retarget_lock_acquire_recursive>
 800870a:	bf00      	nop
 800870c:	20000924 	.word	0x20000924

08008710 <__malloc_unlock>:
 8008710:	4801      	ldr	r0, [pc, #4]	; (8008718 <__malloc_unlock+0x8>)
 8008712:	f000 b804 	b.w	800871e <__retarget_lock_release_recursive>
 8008716:	bf00      	nop
 8008718:	20000924 	.word	0x20000924

0800871c <__retarget_lock_acquire_recursive>:
 800871c:	4770      	bx	lr

0800871e <__retarget_lock_release_recursive>:
 800871e:	4770      	bx	lr

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
