
usart_polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08008db0  08008db0  00018db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e44  08008e44  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008e44  08008e44  00018e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e4c  08008e4c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e4c  08008e4c  00018e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e50  08008e50  00018e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000084c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008dc  200008dc  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001965b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bd7  00000000  00000000  0003971b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  0003d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001278  00000000  00000000  0003e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025228  00000000  00000000  0003f948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a583  00000000  00000000  00064b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cec50  00000000  00000000  0007f0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014dd43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059b0  00000000  00000000  0014dd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008d98 	.word	0x08008d98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008d98 	.word	0x08008d98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_write>:
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int _write(int file, char* p, int len){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	b29a      	uxth	r2, r3
 80004dc:	230a      	movs	r3, #10
 80004de:	68b9      	ldr	r1, [r7, #8]
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <_write+0x24>)
 80004e2:	f004 f8c9 	bl	8004678 <HAL_UART_Transmit>
	return len;
 80004e6:	687b      	ldr	r3, [r7, #4]

}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200001a0 	.word	0x200001a0

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fcc3 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f81d 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f943 	bl	800078c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000506:	f000 f883 	bl	8000610 <MX_I2C1_Init>
  MX_I2S3_Init();
 800050a:	f000 f8af 	bl	800066c <MX_I2S3_Init>
  MX_SPI1_Init();
 800050e:	f000 f8dd 	bl	80006cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000512:	f007 fbf9 	bl	8007d08 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f90f 	bl	8000738 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t msg[6] = "world\n";
 800051a:	4a06      	ldr	r2, [pc, #24]	; (8000534 <main+0x40>)
 800051c:	463b      	mov	r3, r7
 800051e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000522:	6018      	str	r0, [r3, #0]
 8000524:	3304      	adds	r3, #4
 8000526:	8019      	strh	r1, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000528:	f007 fc14 	bl	8007d54 <MX_USB_HOST_Process>
    printf("hello_world\n");
 800052c:	4802      	ldr	r0, [pc, #8]	; (8000538 <main+0x44>)
 800052e:	f008 f883 	bl	8008638 <puts>
    MX_USB_HOST_Process();
 8000532:	e7f9      	b.n	8000528 <main+0x34>
 8000534:	08008dbc 	.word	0x08008dbc
 8000538:	08008db0 	.word	0x08008db0

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f007 ff1e 	bl	800838c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 f9aa 	bl	800391c <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ce:	f000 f9db 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2105      	movs	r1, #5
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 fc0b 	bl	8003e0c <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 f9c4 	bl	8000988 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_I2C1_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MX_I2C1_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_I2C1_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_I2C1_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_I2C1_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_I2C1_Init+0x50>)
 800064e:	f002 fb81 	bl	8002d54 <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f996 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000ac 	.word	0x200000ac
 8000664:	40005400 	.word	0x40005400
 8000668:	000186a0 	.word	0x000186a0

0800066c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <MX_I2S3_Init+0x58>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_I2S3_Init+0x54>)
 800068c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000690:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000694:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <MX_I2S3_Init+0x5c>)
 8000696:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_I2S3_Init+0x54>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_I2S3_Init+0x54>)
 80006ac:	f002 fc96 	bl	8002fdc <HAL_I2S_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006b6:	f000 f967 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000100 	.word	0x20000100
 80006c4:	40003c00 	.word	0x40003c00
 80006c8:	00017700 	.word	0x00017700

080006cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_SPI1_Init+0x64>)
 80006d2:	4a18      	ldr	r2, [pc, #96]	; (8000734 <MX_SPI1_Init+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_SPI1_Init+0x64>)
 8000718:	220a      	movs	r2, #10
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_SPI1_Init+0x64>)
 800071e:	f003 fed5 	bl	80044cc <HAL_SPI_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000728:	f000 f92e 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000148 	.word	0x20000148
 8000734:	40013000 	.word	0x40013000

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_USART2_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000770:	f003 ff35 	bl	80045de <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 f905 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200001a0 	.word	0x200001a0
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4b72      	ldr	r3, [pc, #456]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a71      	ldr	r2, [pc, #452]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b6f      	ldr	r3, [pc, #444]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b6b      	ldr	r3, [pc, #428]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a6a      	ldr	r2, [pc, #424]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b68      	ldr	r3, [pc, #416]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b64      	ldr	r3, [pc, #400]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a63      	ldr	r2, [pc, #396]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b61      	ldr	r3, [pc, #388]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b5d      	ldr	r3, [pc, #372]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a5c      	ldr	r2, [pc, #368]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b5a      	ldr	r3, [pc, #360]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b56      	ldr	r3, [pc, #344]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a55      	ldr	r2, [pc, #340]	; (8000970 <MX_GPIO_Init+0x1e4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b53      	ldr	r3, [pc, #332]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b4f      	ldr	r3, [pc, #316]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a4e      	ldr	r2, [pc, #312]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b4c      	ldr	r3, [pc, #304]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4849      	ldr	r0, [pc, #292]	; (8000974 <MX_GPIO_Init+0x1e8>)
 8000850:	f000 fe5c 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4847      	ldr	r0, [pc, #284]	; (8000978 <MX_GPIO_Init+0x1ec>)
 800085a:	f000 fe57 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085e:	2200      	movs	r2, #0
 8000860:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000864:	4845      	ldr	r0, [pc, #276]	; (800097c <MX_GPIO_Init+0x1f0>)
 8000866:	f000 fe51 	bl	800150c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	483c      	ldr	r0, [pc, #240]	; (8000974 <MX_GPIO_Init+0x1e8>)
 8000882:	f000 fca7 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4836      	ldr	r0, [pc, #216]	; (8000978 <MX_GPIO_Init+0x1ec>)
 800089e:	f000 fc99 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b2:	2305      	movs	r3, #5
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	482e      	ldr	r0, [pc, #184]	; (8000978 <MX_GPIO_Init+0x1ec>)
 80008be:	f000 fc89 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	482a      	ldr	r0, [pc, #168]	; (8000980 <MX_GPIO_Init+0x1f4>)
 80008d8:	f000 fc7c 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008dc:	2304      	movs	r3, #4
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4825      	ldr	r0, [pc, #148]	; (8000984 <MX_GPIO_Init+0x1f8>)
 80008f0:	f000 fc70 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000906:	2305      	movs	r3, #5
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	481c      	ldr	r0, [pc, #112]	; (8000984 <MX_GPIO_Init+0x1f8>)
 8000912:	f000 fc5f 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000916:	f24f 0310 	movw	r3, #61456	; 0xf010
 800091a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4813      	ldr	r0, [pc, #76]	; (800097c <MX_GPIO_Init+0x1f0>)
 8000930:	f000 fc50 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000934:	2320      	movs	r3, #32
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_GPIO_Init+0x1f0>)
 8000948:	f000 fc44 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800094c:	2302      	movs	r3, #2
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000950:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_GPIO_Init+0x1e8>)
 8000962:	f000 fc37 	bl	80011d4 <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	; 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40020800 	.word	0x40020800
 800097c:	40020c00 	.word	0x40020c00
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 fbbc 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_I2C_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <HAL_I2C_MspInit+0x8c>)
 8000a40:	f000 fbc8 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400

08000a74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <HAL_I2S_MspInit+0xf0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d15a      	bne.n	8000b5a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aa8:	23c0      	movs	r3, #192	; 0xc0
 8000aaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fbc9 	bl	800424c <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ac0:	f7ff ff62 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b28:	2306      	movs	r3, #6
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	480e      	ldr	r0, [pc, #56]	; (8000b6c <HAL_I2S_MspInit+0xf8>)
 8000b34:	f000 fb4e 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b38:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <HAL_I2S_MspInit+0xfc>)
 8000b56:	f000 fb3d 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	; 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40003c00 	.word	0x40003c00
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020800 	.word	0x40020800

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_SPI_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12b      	bne.n	8000bee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bce:	23e0      	movs	r3, #224	; 0xe0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bde:	2305      	movs	r3, #5
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000bea:	f000 faf3 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40013000 	.word	0x40013000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <HAL_UART_MspInit+0x84>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12b      	bne.n	8000c7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c5e:	230c      	movs	r3, #12
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0x8c>)
 8000c7a:	f000 faab 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f922 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <OTG_FS_IRQHandler+0x10>)
 8000cee:	f000 fe91 	bl	8001a14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200005c8 	.word	0x200005c8

08000cfc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e00a      	b.n	8000d24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d0e:	f3af 8000 	nop.w
 8000d12:	4601      	mov	r1, r0
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	b2ca      	uxtb	r2, r1
 8000d1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbf0      	blt.n	8000d0e <_read+0x12>
  }

  return len;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f007 faa2 	bl	8008318 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20020000 	.word	0x20020000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	200001e4 	.word	0x200001e4
 8000e08:	200008e0 	.word	0x200008e0

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e36:	490e      	ldr	r1, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	; (8000e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5a:	f7ff ffd7 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f007 fa61 	bl	8008324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fb47 	bl	80004f4 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e74:	08008e54 	.word	0x08008e54
  ldr r2, =_sbss
 8000e78:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e7c:	200008dc 	.word	0x200008dc

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f94f 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fd6c 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f967 	bl	80011ba <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f04:	f000 f92f 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200001e8 	.word	0x200001e8

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001e8 	.word	0x200001e8

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e16b      	b.n	80014c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 815a 	bne.w	80014c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d005      	beq.n	8001226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	2b02      	cmp	r3, #2
 8001224:	d130      	bne.n	8001288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b03      	cmp	r3, #3
 8001292:	d017      	beq.n	80012c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d123      	bne.n	8001318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	08da      	lsrs	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3208      	adds	r2, #8
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80b4 	beq.w	80014c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b60      	ldr	r3, [pc, #384]	; (80014e0 <HAL_GPIO_Init+0x30c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a5f      	ldr	r2, [pc, #380]	; (80014e0 <HAL_GPIO_Init+0x30c>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b5d      	ldr	r3, [pc, #372]	; (80014e0 <HAL_GPIO_Init+0x30c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a5b      	ldr	r2, [pc, #364]	; (80014e4 <HAL_GPIO_Init+0x310>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a52      	ldr	r2, [pc, #328]	; (80014e8 <HAL_GPIO_Init+0x314>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d02b      	beq.n	80013fa <HAL_GPIO_Init+0x226>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a51      	ldr	r2, [pc, #324]	; (80014ec <HAL_GPIO_Init+0x318>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x222>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a50      	ldr	r2, [pc, #320]	; (80014f0 <HAL_GPIO_Init+0x31c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x21e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <HAL_GPIO_Init+0x320>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x21a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4e      	ldr	r2, [pc, #312]	; (80014f8 <HAL_GPIO_Init+0x324>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x216>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <HAL_GPIO_Init+0x328>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x212>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4c      	ldr	r2, [pc, #304]	; (8001500 <HAL_GPIO_Init+0x32c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x20e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4b      	ldr	r2, [pc, #300]	; (8001504 <HAL_GPIO_Init+0x330>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x20a>
 80013da:	2307      	movs	r3, #7
 80013dc:	e00e      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013de:	2308      	movs	r3, #8
 80013e0:	e00c      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013e2:	2306      	movs	r3, #6
 80013e4:	e00a      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013e6:	2305      	movs	r3, #5
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013ea:	2304      	movs	r3, #4
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013fa:	2300      	movs	r3, #0
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	; (80014e4 <HAL_GPIO_Init+0x310>)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_GPIO_Init+0x334>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a32      	ldr	r2, [pc, #200]	; (8001508 <HAL_GPIO_Init+0x334>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_GPIO_Init+0x334>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a27      	ldr	r2, [pc, #156]	; (8001508 <HAL_GPIO_Init+0x334>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_GPIO_Init+0x334>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001492:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <HAL_GPIO_Init+0x334>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_GPIO_Init+0x334>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014bc:	4a12      	ldr	r2, [pc, #72]	; (8001508 <HAL_GPIO_Init+0x334>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	f67f ae90 	bls.w	80011f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40021400 	.word	0x40021400
 8001500:	40021800 	.word	0x40021800
 8001504:	40021c00 	.word	0x40021c00
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800153e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001540:	b08f      	sub	sp, #60	; 0x3c
 8001542:	af0a      	add	r7, sp, #40	; 0x28
 8001544:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e054      	b.n	80015fa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f006 fc2a 	bl	8007dc4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2203      	movs	r2, #3
 8001574:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f003 fc58 	bl	8004e44 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	687e      	ldr	r6, [r7, #4]
 800159c:	466d      	mov	r5, sp
 800159e:	f106 0410 	add.w	r4, r6, #16
 80015a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80015b2:	1d33      	adds	r3, r6, #4
 80015b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b6:	6838      	ldr	r0, [r7, #0]
 80015b8:	f003 fbd2 	bl	8004d60 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2101      	movs	r1, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fc4f 	bl	8004e66 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	687e      	ldr	r6, [r7, #4]
 80015d0:	466d      	mov	r5, sp
 80015d2:	f106 0410 	add.w	r4, r6, #16
 80015d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80015e6:	1d33      	adds	r3, r6, #4
 80015e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ea:	6838      	ldr	r0, [r7, #0]
 80015ec:	f003 fdd8 	bl	80051a0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001602 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001602:	b590      	push	{r4, r7, lr}
 8001604:	b089      	sub	sp, #36	; 0x24
 8001606:	af04      	add	r7, sp, #16
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	4608      	mov	r0, r1
 800160c:	4611      	mov	r1, r2
 800160e:	461a      	mov	r2, r3
 8001610:	4603      	mov	r3, r0
 8001612:	70fb      	strb	r3, [r7, #3]
 8001614:	460b      	mov	r3, r1
 8001616:	70bb      	strb	r3, [r7, #2]
 8001618:	4613      	mov	r3, r2
 800161a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_HCD_HC_Init+0x28>
 8001626:	2302      	movs	r3, #2
 8001628:	e076      	b.n	8001718 <HAL_HCD_HC_Init+0x116>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	212c      	movs	r1, #44	; 0x2c
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	4413      	add	r3, r2
 800163e:	333d      	adds	r3, #61	; 0x3d
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	212c      	movs	r1, #44	; 0x2c
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	3338      	adds	r3, #56	; 0x38
 8001652:	787a      	ldrb	r2, [r7, #1]
 8001654:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	212c      	movs	r1, #44	; 0x2c
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	3340      	adds	r3, #64	; 0x40
 8001664:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001666:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	212c      	movs	r1, #44	; 0x2c
 800166e:	fb01 f303 	mul.w	r3, r1, r3
 8001672:	4413      	add	r3, r2
 8001674:	3339      	adds	r3, #57	; 0x39
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	212c      	movs	r1, #44	; 0x2c
 8001680:	fb01 f303 	mul.w	r3, r1, r3
 8001684:	4413      	add	r3, r2
 8001686:	333f      	adds	r3, #63	; 0x3f
 8001688:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800168c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	78ba      	ldrb	r2, [r7, #2]
 8001692:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001696:	b2d0      	uxtb	r0, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	212c      	movs	r1, #44	; 0x2c
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	333a      	adds	r3, #58	; 0x3a
 80016a4:	4602      	mov	r2, r0
 80016a6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	da09      	bge.n	80016c4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	212c      	movs	r1, #44	; 0x2c
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	333b      	adds	r3, #59	; 0x3b
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e008      	b.n	80016d6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	212c      	movs	r1, #44	; 0x2c
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	333b      	adds	r3, #59	; 0x3b
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	212c      	movs	r1, #44	; 0x2c
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	333c      	adds	r3, #60	; 0x3c
 80016e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016e8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	787c      	ldrb	r4, [r7, #1]
 80016f0:	78ba      	ldrb	r2, [r7, #2]
 80016f2:	78f9      	ldrb	r1, [r7, #3]
 80016f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	4623      	mov	r3, r4
 8001706:	f003 fed1 	bl	80054ac <USB_HC_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bd90      	pop	{r4, r7, pc}

08001720 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_HCD_HC_Halt+0x1e>
 800173a:	2302      	movs	r3, #2
 800173c:	e00f      	b.n	800175e <HAL_HCD_HC_Halt+0x3e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f004 f921 	bl	8005996 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	4608      	mov	r0, r1
 8001772:	4611      	mov	r1, r2
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	70fb      	strb	r3, [r7, #3]
 800177a:	460b      	mov	r3, r1
 800177c:	70bb      	strb	r3, [r7, #2]
 800177e:	4613      	mov	r3, r2
 8001780:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	212c      	movs	r1, #44	; 0x2c
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	4413      	add	r3, r2
 800178e:	333b      	adds	r3, #59	; 0x3b
 8001790:	78ba      	ldrb	r2, [r7, #2]
 8001792:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	212c      	movs	r1, #44	; 0x2c
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	4413      	add	r3, r2
 80017a0:	333f      	adds	r3, #63	; 0x3f
 80017a2:	787a      	ldrb	r2, [r7, #1]
 80017a4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017a6:	7c3b      	ldrb	r3, [r7, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d112      	bne.n	80017d2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	212c      	movs	r1, #44	; 0x2c
 80017b2:	fb01 f303 	mul.w	r3, r1, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	3342      	adds	r3, #66	; 0x42
 80017ba:	2203      	movs	r2, #3
 80017bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	333d      	adds	r3, #61	; 0x3d
 80017cc:	7f3a      	ldrb	r2, [r7, #28]
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	e008      	b.n	80017e4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	212c      	movs	r1, #44	; 0x2c
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	3342      	adds	r3, #66	; 0x42
 80017e0:	2202      	movs	r2, #2
 80017e2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017e4:	787b      	ldrb	r3, [r7, #1]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	f200 80c6 	bhi.w	8001978 <HAL_HCD_HC_SubmitRequest+0x210>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001805 	.word	0x08001805
 80017f8:	08001965 	.word	0x08001965
 80017fc:	08001869 	.word	0x08001869
 8001800:	080018e7 	.word	0x080018e7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001804:	7c3b      	ldrb	r3, [r7, #16]
 8001806:	2b01      	cmp	r3, #1
 8001808:	f040 80b8 	bne.w	800197c <HAL_HCD_HC_SubmitRequest+0x214>
 800180c:	78bb      	ldrb	r3, [r7, #2]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 80b4 	bne.w	800197c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001814:	8b3b      	ldrh	r3, [r7, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d108      	bne.n	800182c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	212c      	movs	r1, #44	; 0x2c
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	3355      	adds	r3, #85	; 0x55
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3355      	adds	r3, #85	; 0x55
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d109      	bne.n	8001854 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3342      	adds	r3, #66	; 0x42
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001852:	e093      	b.n	800197c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	212c      	movs	r1, #44	; 0x2c
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4413      	add	r3, r2
 8001860:	3342      	adds	r3, #66	; 0x42
 8001862:	2202      	movs	r2, #2
 8001864:	701a      	strb	r2, [r3, #0]
      break;
 8001866:	e089      	b.n	800197c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001868:	78bb      	ldrb	r3, [r7, #2]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d11d      	bne.n	80018aa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	3355      	adds	r3, #85	; 0x55
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	212c      	movs	r1, #44	; 0x2c
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	3342      	adds	r3, #66	; 0x42
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001894:	e073      	b.n	800197e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	212c      	movs	r1, #44	; 0x2c
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	3342      	adds	r3, #66	; 0x42
 80018a4:	2202      	movs	r2, #2
 80018a6:	701a      	strb	r2, [r3, #0]
      break;
 80018a8:	e069      	b.n	800197e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3354      	adds	r3, #84	; 0x54
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	3342      	adds	r3, #66	; 0x42
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
      break;
 80018d0:	e055      	b.n	800197e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	3342      	adds	r3, #66	; 0x42
 80018e0:	2202      	movs	r2, #2
 80018e2:	701a      	strb	r2, [r3, #0]
      break;
 80018e4:	e04b      	b.n	800197e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018e6:	78bb      	ldrb	r3, [r7, #2]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d11d      	bne.n	8001928 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	3355      	adds	r3, #85	; 0x55
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3342      	adds	r3, #66	; 0x42
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001912:	e034      	b.n	800197e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	3342      	adds	r3, #66	; 0x42
 8001922:	2202      	movs	r2, #2
 8001924:	701a      	strb	r2, [r3, #0]
      break;
 8001926:	e02a      	b.n	800197e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3354      	adds	r3, #84	; 0x54
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3342      	adds	r3, #66	; 0x42
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
      break;
 800194e:	e016      	b.n	800197e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3342      	adds	r3, #66	; 0x42
 800195e:	2202      	movs	r2, #2
 8001960:	701a      	strb	r2, [r3, #0]
      break;
 8001962:	e00c      	b.n	800197e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	3342      	adds	r3, #66	; 0x42
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
      break;
 8001976:	e002      	b.n	800197e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001978:	bf00      	nop
 800197a:	e000      	b.n	800197e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800197c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	212c      	movs	r1, #44	; 0x2c
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	3344      	adds	r3, #68	; 0x44
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	8b3a      	ldrh	r2, [r7, #24]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	202c      	movs	r0, #44	; 0x2c
 8001998:	fb00 f303 	mul.w	r3, r0, r3
 800199c:	440b      	add	r3, r1
 800199e:	334c      	adds	r3, #76	; 0x4c
 80019a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	3360      	adds	r3, #96	; 0x60
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3350      	adds	r3, #80	; 0x50
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3339      	adds	r3, #57	; 0x39
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	212c      	movs	r1, #44	; 0x2c
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	3361      	adds	r3, #97	; 0x61
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	222c      	movs	r2, #44	; 0x2c
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	3338      	adds	r3, #56	; 0x38
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	18d1      	adds	r1, r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	f003 fe74 	bl	80056f0 <USB_HC_StartXfer>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop

08001a14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fb75 	bl	800511a <USB_GetMode>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	f040 80f6 	bne.w	8001c24 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fb59 	bl	80050f4 <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80ec 	beq.w	8001c22 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fb50 	bl	80050f4 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a5e:	d104      	bne.n	8001a6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fb40 	bl	80050f4 <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a7e:	d104      	bne.n	8001a8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fb30 	bl	80050f4 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a9e:	d104      	bne.n	8001aaa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fb20 	bl	80050f4 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d103      	bne.n	8001ac6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fb12 	bl	80050f4 <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ada:	d11c      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ae4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10f      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001af6:	2110      	movs	r1, #16
 8001af8:	6938      	ldr	r0, [r7, #16]
 8001afa:	f003 fa01 	bl	8004f00 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001afe:	6938      	ldr	r0, [r7, #16]
 8001b00:	f003 fa32 	bl	8004f68 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fc08 	bl	8005320 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f006 f9d5 	bl	8007ec0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 faea 	bl	80050f4 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2a:	d102      	bne.n	8001b32 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f001 f89e 	bl	8002c6e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fadc 	bl	80050f4 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d106      	bne.n	8001b54 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f006 f99e 	bl	8007e88 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2208      	movs	r2, #8
 8001b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 facb 	bl	80050f4 <USB_ReadInterrupts>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d101      	bne.n	8001b6c <HAL_HCD_IRQHandler+0x158>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_HCD_IRQHandler+0x15a>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d012      	beq.n	8001b98 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0210 	bic.w	r2, r2, #16
 8001b80:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 ffa1 	bl	8002aca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0210 	orr.w	r2, r2, #16
 8001b96:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 faa9 	bl	80050f4 <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bac:	d13a      	bne.n	8001c24 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fede 	bl	8005974 <USB_HC_ReadInterrupt>
 8001bb8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e025      	b.n	8001c0c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d018      	beq.n	8001c06 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bea:	d106      	bne.n	8001bfa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f8ab 	bl	8001d4e <HCD_HC_IN_IRQHandler>
 8001bf8:	e005      	b.n	8001c06 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fbf9 	bl	80023f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d3d4      	bcc.n	8001bc0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1e:	615a      	str	r2, [r3, #20]
 8001c20:	e000      	b.n	8001c24 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c22:	bf00      	nop
    }
  }
}
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_HCD_Start+0x16>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e013      	b.n	8001c68 <HAL_HCD_Start+0x3e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fbca 	bl	80053e8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 f8e2 	bl	8004e22 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_HCD_Stop+0x16>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e00d      	b.n	8001ca2 <HAL_HCD_Stop+0x32>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 ffb8 	bl	8005c08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 fb6c 	bl	8005394 <USB_ResetPort>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	212c      	movs	r1, #44	; 0x2c
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3360      	adds	r3, #96	; 0x60
 8001ce0:	781b      	ldrb	r3, [r3, #0]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	212c      	movs	r1, #44	; 0x2c
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	3350      	adds	r3, #80	; 0x50
 8001d08:	681b      	ldr	r3, [r3, #0]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 fbb0 	bl	8005488 <USB_GetCurrentFrame>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 fb8b 	bl	800545a <USB_GetHostSpeed>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d11a      	bne.n	8001db4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	212c      	movs	r1, #44	; 0x2c
 8001d96:	fb01 f303 	mul.w	r3, r1, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3361      	adds	r3, #97	; 0x61
 8001d9e:	2206      	movs	r2, #6
 8001da0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 fdf2 	bl	8005996 <USB_HC_Halt>
 8001db2:	e0af      	b.n	8001f14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dca:	d11b      	bne.n	8001e04 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	212c      	movs	r1, #44	; 0x2c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	3361      	adds	r3, #97	; 0x61
 8001dee:	2207      	movs	r2, #7
 8001df0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fdca 	bl	8005996 <USB_HC_Halt>
 8001e02:	e087      	b.n	8001f14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d109      	bne.n	8001e2e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	461a      	mov	r2, r3
 8001e28:	2320      	movs	r3, #32
 8001e2a:	6093      	str	r3, [r2, #8]
 8001e2c:	e072      	b.n	8001f14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d11a      	bne.n	8001e7a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	2308      	movs	r3, #8
 8001e54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	212c      	movs	r1, #44	; 0x2c
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	3361      	adds	r3, #97	; 0x61
 8001e64:	2205      	movs	r2, #5
 8001e66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fd8f 	bl	8005996 <USB_HC_Halt>
 8001e78:	e04c      	b.n	8001f14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e90:	d11b      	bne.n	8001eca <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3361      	adds	r3, #97	; 0x61
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fd67 	bl	8005996 <USB_HC_Halt>
 8001ec8:	e024      	b.n	8001f14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d119      	bne.n	8001f14 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3361      	adds	r3, #97	; 0x61
 8001f00:	2206      	movs	r2, #6
 8001f02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 fd41 	bl	8005996 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f2a:	d112      	bne.n	8001f52 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fd2d 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f50:	e24e      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	f040 80df 	bne.w	8002128 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d019      	beq.n	8001fa6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3348      	adds	r3, #72	; 0x48
 8001f80:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	0159      	lsls	r1, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	440b      	add	r3, r1
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f94:	1ad2      	subs	r2, r2, r3
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	202c      	movs	r0, #44	; 0x2c
 8001f9c:	fb00 f303 	mul.w	r3, r0, r3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3350      	adds	r3, #80	; 0x50
 8001fa4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3361      	adds	r3, #97	; 0x61
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	212c      	movs	r1, #44	; 0x2c
 8001fbe:	fb01 f303 	mul.w	r3, r1, r3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	335c      	adds	r3, #92	; 0x5c
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2301      	movs	r3, #1
 8001fda:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	333f      	adds	r3, #63	; 0x3f
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	333f      	adds	r3, #63	; 0x3f
 8001ffe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002000:	2b02      	cmp	r3, #2
 8002002:	d111      	bne.n	8002028 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fcc1 	bl	8005996 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	461a      	mov	r2, r3
 8002022:	2310      	movs	r3, #16
 8002024:	6093      	str	r3, [r2, #8]
 8002026:	e03a      	b.n	800209e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	333f      	adds	r3, #63	; 0x3f
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d009      	beq.n	8002050 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	333f      	adds	r3, #63	; 0x3f
 800204a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800204c:	2b01      	cmp	r3, #1
 800204e:	d126      	bne.n	800209e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	0151      	lsls	r1, r2, #5
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	440a      	add	r2, r1
 8002066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800206a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800206e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	3360      	adds	r3, #96	; 0x60
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	b2d9      	uxtb	r1, r3
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	202c      	movs	r0, #44	; 0x2c
 800208c:	fb00 f303 	mul.w	r3, r0, r3
 8002090:	4413      	add	r3, r2
 8002092:	3360      	adds	r3, #96	; 0x60
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f005 ff1f 	bl	8007edc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d12b      	bne.n	80020fe <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	3348      	adds	r3, #72	; 0x48
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	202c      	movs	r0, #44	; 0x2c
 80020bc:	fb00 f202 	mul.w	r2, r0, r2
 80020c0:	440a      	add	r2, r1
 80020c2:	3240      	adds	r2, #64	; 0x40
 80020c4:	8812      	ldrh	r2, [r2, #0]
 80020c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 818e 	beq.w	80023f0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3354      	adds	r3, #84	; 0x54
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f083 0301 	eor.w	r3, r3, #1
 80020e8:	b2d8      	uxtb	r0, r3
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3354      	adds	r3, #84	; 0x54
 80020f8:	4602      	mov	r2, r0
 80020fa:	701a      	strb	r2, [r3, #0]
}
 80020fc:	e178      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3354      	adds	r3, #84	; 0x54
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	f083 0301 	eor.w	r3, r3, #1
 8002112:	b2d8      	uxtb	r0, r3
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	3354      	adds	r3, #84	; 0x54
 8002122:	4602      	mov	r2, r0
 8002124:	701a      	strb	r2, [r3, #0]
}
 8002126:	e163      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b02      	cmp	r3, #2
 800213c:	f040 80f6 	bne.w	800232c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3361      	adds	r3, #97	; 0x61
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d109      	bne.n	8002168 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3360      	adds	r3, #96	; 0x60
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e0c9      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3361      	adds	r3, #97	; 0x61
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b05      	cmp	r3, #5
 800217a:	d109      	bne.n	8002190 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3360      	adds	r3, #96	; 0x60
 800218a:	2205      	movs	r2, #5
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e0b5      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3361      	adds	r3, #97	; 0x61
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b06      	cmp	r3, #6
 80021a2:	d009      	beq.n	80021b8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3361      	adds	r3, #97	; 0x61
 80021b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d150      	bne.n	800225a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	335c      	adds	r3, #92	; 0x5c
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	202c      	movs	r0, #44	; 0x2c
 80021d0:	fb00 f303 	mul.w	r3, r0, r3
 80021d4:	440b      	add	r3, r1
 80021d6:	335c      	adds	r3, #92	; 0x5c
 80021d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	335c      	adds	r3, #92	; 0x5c
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d912      	bls.n	8002214 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	335c      	adds	r3, #92	; 0x5c
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3360      	adds	r3, #96	; 0x60
 800220e:	2204      	movs	r2, #4
 8002210:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002212:	e073      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	212c      	movs	r1, #44	; 0x2c
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	4413      	add	r3, r2
 8002220:	3360      	adds	r3, #96	; 0x60
 8002222:	2202      	movs	r2, #2
 8002224:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800223c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002244:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	461a      	mov	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002258:	e050      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3361      	adds	r3, #97	; 0x61
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d122      	bne.n	80022b4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	3360      	adds	r3, #96	; 0x60
 800227c:	2202      	movs	r2, #2
 800227e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002296:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800229e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e023      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	212c      	movs	r1, #44	; 0x2c
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	3361      	adds	r3, #97	; 0x61
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b07      	cmp	r3, #7
 80022c6:	d119      	bne.n	80022fc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	212c      	movs	r1, #44	; 0x2c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	335c      	adds	r3, #92	; 0x5c
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	202c      	movs	r0, #44	; 0x2c
 80022e0:	fb00 f303 	mul.w	r3, r0, r3
 80022e4:	440b      	add	r3, r1
 80022e6:	335c      	adds	r3, #92	; 0x5c
 80022e8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	3360      	adds	r3, #96	; 0x60
 80022f8:	2204      	movs	r2, #4
 80022fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	461a      	mov	r2, r3
 800230a:	2302      	movs	r3, #2
 800230c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	b2d9      	uxtb	r1, r3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	202c      	movs	r0, #44	; 0x2c
 8002318:	fb00 f303 	mul.w	r3, r0, r3
 800231c:	4413      	add	r3, r2
 800231e:	3360      	adds	r3, #96	; 0x60
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f005 fdd9 	bl	8007edc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800232a:	e061      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b10      	cmp	r3, #16
 8002340:	d156      	bne.n	80023f0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	333f      	adds	r3, #63	; 0x3f
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d111      	bne.n	800237a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	335c      	adds	r3, #92	; 0x5c
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fb0f 	bl	8005996 <USB_HC_Halt>
 8002378:	e031      	b.n	80023de <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	333f      	adds	r3, #63	; 0x3f
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	333f      	adds	r3, #63	; 0x3f
 800239c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d11d      	bne.n	80023de <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	335c      	adds	r3, #92	; 0x5c
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d110      	bne.n	80023de <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3361      	adds	r3, #97	; 0x61
 80023ca:	2203      	movs	r2, #3
 80023cc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 fadc 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	461a      	mov	r2, r3
 80023ec:	2310      	movs	r3, #16
 80023ee:	6093      	str	r3, [r2, #8]
}
 80023f0:	bf00      	nop
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b04      	cmp	r3, #4
 8002426:	d11a      	bne.n	800245e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	4413      	add	r3, r2
 8002430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002434:	461a      	mov	r2, r3
 8002436:	2304      	movs	r3, #4
 8002438:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	3361      	adds	r3, #97	; 0x61
 8002448:	2206      	movs	r2, #6
 800244a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f003 fa9d 	bl	8005996 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800245c:	e331      	b.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b20      	cmp	r3, #32
 8002472:	d12e      	bne.n	80024d2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	461a      	mov	r2, r3
 8002482:	2320      	movs	r3, #32
 8002484:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	333d      	adds	r3, #61	; 0x3d
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	f040 8313 	bne.w	8002ac2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	333d      	adds	r3, #61	; 0x3d
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3360      	adds	r3, #96	; 0x60
 80024bc:	2202      	movs	r2, #2
 80024be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 fa63 	bl	8005996 <USB_HC_Halt>
}
 80024d0:	e2f7      	b.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e8:	d112      	bne.n	8002510 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	461a      	mov	r2, r3
 80024f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f003 fa44 	bl	8005996 <USB_HC_Halt>
}
 800250e:	e2d8      	b.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d140      	bne.n	80025a8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	335c      	adds	r3, #92	; 0x5c
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254a:	2b40      	cmp	r3, #64	; 0x40
 800254c:	d111      	bne.n	8002572 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	333d      	adds	r3, #61	; 0x3d
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	2340      	movs	r3, #64	; 0x40
 8002570:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	461a      	mov	r2, r3
 8002580:	2301      	movs	r3, #1
 8002582:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	212c      	movs	r1, #44	; 0x2c
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	4413      	add	r3, r2
 8002590:	3361      	adds	r3, #97	; 0x61
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 f9f8 	bl	8005996 <USB_HC_Halt>
}
 80025a6:	e28c      	b.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d12c      	bne.n	8002618 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3361      	adds	r3, #97	; 0x61
 80025cc:	2204      	movs	r2, #4
 80025ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	333d      	adds	r3, #61	; 0x3d
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	335c      	adds	r3, #92	; 0x5c
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 f9c9 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	461a      	mov	r2, r3
 8002612:	2340      	movs	r3, #64	; 0x40
 8002614:	6093      	str	r3, [r2, #8]
}
 8002616:	e254      	b.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11a      	bne.n	8002664 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	461a      	mov	r2, r3
 800263c:	2308      	movs	r3, #8
 800263e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3361      	adds	r3, #97	; 0x61
 800264e:	2205      	movs	r2, #5
 8002650:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f003 f99a 	bl	8005996 <USB_HC_Halt>
}
 8002662:	e22e      	b.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b10      	cmp	r3, #16
 8002678:	d140      	bne.n	80026fc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	335c      	adds	r3, #92	; 0x5c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	3361      	adds	r3, #97	; 0x61
 800269a:	2203      	movs	r2, #3
 800269c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	333d      	adds	r3, #61	; 0x3d
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d112      	bne.n	80026d8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	333c      	adds	r3, #60	; 0x3c
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d108      	bne.n	80026d8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	333d      	adds	r3, #61	; 0x3d
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 f957 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	461a      	mov	r2, r3
 80026f6:	2310      	movs	r3, #16
 80026f8:	6093      	str	r3, [r2, #8]
}
 80026fa:	e1e2      	b.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	2b80      	cmp	r3, #128	; 0x80
 8002710:	d164      	bne.n	80027dc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d111      	bne.n	800273e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	3361      	adds	r3, #97	; 0x61
 8002728:	2206      	movs	r2, #6
 800272a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f003 f92d 	bl	8005996 <USB_HC_Halt>
 800273c:	e044      	b.n	80027c8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	335c      	adds	r3, #92	; 0x5c
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	202c      	movs	r0, #44	; 0x2c
 8002756:	fb00 f303 	mul.w	r3, r0, r3
 800275a:	440b      	add	r3, r1
 800275c:	335c      	adds	r3, #92	; 0x5c
 800275e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	335c      	adds	r3, #92	; 0x5c
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d920      	bls.n	80027b6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	335c      	adds	r3, #92	; 0x5c
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3360      	adds	r3, #96	; 0x60
 8002794:	2204      	movs	r2, #4
 8002796:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	b2d9      	uxtb	r1, r3
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	202c      	movs	r0, #44	; 0x2c
 80027a2:	fb00 f303 	mul.w	r3, r0, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3360      	adds	r3, #96	; 0x60
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f005 fb94 	bl	8007edc <HAL_HCD_HC_NotifyURBChange_Callback>
 80027b4:	e008      	b.n	80027c8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	3360      	adds	r3, #96	; 0x60
 80027c4:	2202      	movs	r2, #2
 80027c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	461a      	mov	r2, r3
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	6093      	str	r3, [r2, #8]
}
 80027da:	e172      	b.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f2:	d11b      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	212c      	movs	r1, #44	; 0x2c
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	4413      	add	r3, r2
 8002800:	3361      	adds	r3, #97	; 0x61
 8002802:	2208      	movs	r2, #8
 8002804:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f003 f8c0 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	461a      	mov	r2, r3
 8002824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002828:	6093      	str	r3, [r2, #8]
}
 800282a:	e14a      	b.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b02      	cmp	r3, #2
 8002840:	f040 813f 	bne.w	8002ac2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3361      	adds	r3, #97	; 0x61
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d17d      	bne.n	8002954 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3360      	adds	r3, #96	; 0x60
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	333f      	adds	r3, #63	; 0x3f
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d00a      	beq.n	8002894 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	333f      	adds	r3, #63	; 0x3f
 800288c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800288e:	2b03      	cmp	r3, #3
 8002890:	f040 8100 	bne.w	8002a94 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d113      	bne.n	80028c4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3355      	adds	r3, #85	; 0x55
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	f083 0301 	eor.w	r3, r3, #1
 80028b0:	b2d8      	uxtb	r0, r3
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	3355      	adds	r3, #85	; 0x55
 80028c0:	4602      	mov	r2, r0
 80028c2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	f040 80e3 	bne.w	8002a94 <HCD_HC_OUT_IRQHandler+0x69c>
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	334c      	adds	r3, #76	; 0x4c
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80d8 	beq.w	8002a94 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	334c      	adds	r3, #76	; 0x4c
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	202c      	movs	r0, #44	; 0x2c
 80028fa:	fb00 f202 	mul.w	r2, r0, r2
 80028fe:	440a      	add	r2, r1
 8002900:	3240      	adds	r2, #64	; 0x40
 8002902:	8812      	ldrh	r2, [r2, #0]
 8002904:	4413      	add	r3, r2
 8002906:	3b01      	subs	r3, #1
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	202c      	movs	r0, #44	; 0x2c
 800290e:	fb00 f202 	mul.w	r2, r0, r2
 8002912:	440a      	add	r2, r1
 8002914:	3240      	adds	r2, #64	; 0x40
 8002916:	8812      	ldrh	r2, [r2, #0]
 8002918:	fbb3 f3f2 	udiv	r3, r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80b5 	beq.w	8002a94 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3355      	adds	r3, #85	; 0x55
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	f083 0301 	eor.w	r3, r3, #1
 800293e:	b2d8      	uxtb	r0, r3
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3355      	adds	r3, #85	; 0x55
 800294e:	4602      	mov	r2, r0
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	e09f      	b.n	8002a94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3361      	adds	r3, #97	; 0x61
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d109      	bne.n	800297c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3360      	adds	r3, #96	; 0x60
 8002976:	2202      	movs	r2, #2
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e08b      	b.n	8002a94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3361      	adds	r3, #97	; 0x61
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d109      	bne.n	80029a4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3360      	adds	r3, #96	; 0x60
 800299e:	2202      	movs	r2, #2
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e077      	b.n	8002a94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3361      	adds	r3, #97	; 0x61
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d109      	bne.n	80029cc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3360      	adds	r3, #96	; 0x60
 80029c6:	2205      	movs	r2, #5
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e063      	b.n	8002a94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3361      	adds	r3, #97	; 0x61
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b06      	cmp	r3, #6
 80029de:	d009      	beq.n	80029f4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3361      	adds	r3, #97	; 0x61
 80029ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d14f      	bne.n	8002a94 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	335c      	adds	r3, #92	; 0x5c
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	202c      	movs	r0, #44	; 0x2c
 8002a0c:	fb00 f303 	mul.w	r3, r0, r3
 8002a10:	440b      	add	r3, r1
 8002a12:	335c      	adds	r3, #92	; 0x5c
 8002a14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	335c      	adds	r3, #92	; 0x5c
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d912      	bls.n	8002a50 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	335c      	adds	r3, #92	; 0x5c
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3360      	adds	r3, #96	; 0x60
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e021      	b.n	8002a94 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3360      	adds	r3, #96	; 0x60
 8002a5e:	2202      	movs	r2, #2
 8002a60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a78:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a80:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8e:	461a      	mov	r2, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	b2d9      	uxtb	r1, r3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	202c      	movs	r0, #44	; 0x2c
 8002ab0:	fb00 f303 	mul.w	r3, r0, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3360      	adds	r3, #96	; 0x60
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f005 fa0d 	bl	8007edc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ac2:	bf00      	nop
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b08a      	sub	sp, #40	; 0x28
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	0c5b      	lsrs	r3, r3, #17
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002afe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d004      	beq.n	8002b10 <HCD_RXQLVL_IRQHandler+0x46>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	f000 80a9 	beq.w	8002c60 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b0e:	e0aa      	b.n	8002c66 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80a6 	beq.w	8002c64 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3344      	adds	r3, #68	; 0x44
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 809b 	beq.w	8002c64 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3350      	adds	r3, #80	; 0x50
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	441a      	add	r2, r3
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	202c      	movs	r0, #44	; 0x2c
 8002b48:	fb00 f303 	mul.w	r3, r0, r3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	334c      	adds	r3, #76	; 0x4c
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d87a      	bhi.n	8002c4c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3344      	adds	r3, #68	; 0x44
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f002 fa68 	bl	8005044 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3344      	adds	r3, #68	; 0x44
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	441a      	add	r2, r3
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	202c      	movs	r0, #44	; 0x2c
 8002b8e:	fb00 f303 	mul.w	r3, r0, r3
 8002b92:	440b      	add	r3, r1
 8002b94:	3344      	adds	r3, #68	; 0x44
 8002b96:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3350      	adds	r3, #80	; 0x50
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	441a      	add	r2, r3
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	202c      	movs	r0, #44	; 0x2c
 8002bb2:	fb00 f303 	mul.w	r3, r0, r3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3350      	adds	r3, #80	; 0x50
 8002bba:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	0cdb      	lsrs	r3, r3, #19
 8002bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3340      	adds	r3, #64	; 0x40
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d13c      	bne.n	8002c64 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d039      	beq.n	8002c64 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c06:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c0e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3354      	adds	r3, #84	; 0x54
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	f083 0301 	eor.w	r3, r3, #1
 8002c36:	b2d8      	uxtb	r0, r3
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3354      	adds	r3, #84	; 0x54
 8002c46:	4602      	mov	r2, r0
 8002c48:	701a      	strb	r2, [r3, #0]
      break;
 8002c4a:	e00b      	b.n	8002c64 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3360      	adds	r3, #96	; 0x60
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	701a      	strb	r2, [r3, #0]
      break;
 8002c5e:	e001      	b.n	8002c64 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c60:	bf00      	nop
 8002c62:	e000      	b.n	8002c66 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c64:	bf00      	nop
  }
}
 8002c66:	bf00      	nop
 8002c68:	3728      	adds	r7, #40	; 0x28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c9a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d10b      	bne.n	8002cbe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d102      	bne.n	8002cb6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f005 f8f7 	bl	8007ea4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d132      	bne.n	8002d2e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f043 0308 	orr.w	r3, r3, #8
 8002cce:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d126      	bne.n	8002d28 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d113      	bne.n	8002d0a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ce8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cec:	d106      	bne.n	8002cfc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f002 fb13 	bl	8005320 <USB_InitFSLSPClkSel>
 8002cfa:	e011      	b.n	8002d20 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2101      	movs	r1, #1
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 fb0c 	bl	8005320 <USB_InitFSLSPClkSel>
 8002d08:	e00a      	b.n	8002d20 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d106      	bne.n	8002d20 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d1e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f005 f8e9 	bl	8007ef8 <HAL_HCD_PortEnabled_Callback>
 8002d26:	e002      	b.n	8002d2e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f005 f8f3 	bl	8007f14 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d103      	bne.n	8002d40 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f043 0320 	orr.w	r3, r3, #32
 8002d3e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d46:	461a      	mov	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	6013      	str	r3, [r2, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e12b      	b.n	8002fbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd fe32 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	; 0x24
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002db8:	f001 fa20 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8002dbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4a81      	ldr	r2, [pc, #516]	; (8002fc8 <HAL_I2C_Init+0x274>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d807      	bhi.n	8002dd8 <HAL_I2C_Init+0x84>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a80      	ldr	r2, [pc, #512]	; (8002fcc <HAL_I2C_Init+0x278>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	bf94      	ite	ls
 8002dd0:	2301      	movls	r3, #1
 8002dd2:	2300      	movhi	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e006      	b.n	8002de6 <HAL_I2C_Init+0x92>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a7d      	ldr	r2, [pc, #500]	; (8002fd0 <HAL_I2C_Init+0x27c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	bf94      	ite	ls
 8002de0:	2301      	movls	r3, #1
 8002de2:	2300      	movhi	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0e7      	b.n	8002fbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4a78      	ldr	r2, [pc, #480]	; (8002fd4 <HAL_I2C_Init+0x280>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	0c9b      	lsrs	r3, r3, #18
 8002df8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4a6a      	ldr	r2, [pc, #424]	; (8002fc8 <HAL_I2C_Init+0x274>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d802      	bhi.n	8002e28 <HAL_I2C_Init+0xd4>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	3301      	adds	r3, #1
 8002e26:	e009      	b.n	8002e3c <HAL_I2C_Init+0xe8>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e2e:	fb02 f303 	mul.w	r3, r2, r3
 8002e32:	4a69      	ldr	r2, [pc, #420]	; (8002fd8 <HAL_I2C_Init+0x284>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	099b      	lsrs	r3, r3, #6
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	495c      	ldr	r1, [pc, #368]	; (8002fc8 <HAL_I2C_Init+0x274>)
 8002e58:	428b      	cmp	r3, r1
 8002e5a:	d819      	bhi.n	8002e90 <HAL_I2C_Init+0x13c>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1e59      	subs	r1, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e6a:	1c59      	adds	r1, r3, #1
 8002e6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e70:	400b      	ands	r3, r1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_I2C_Init+0x138>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1e59      	subs	r1, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8a:	e051      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	e04f      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d111      	bne.n	8002ebc <HAL_I2C_Init+0x168>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e012      	b.n	8002ee2 <HAL_I2C_Init+0x18e>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e58      	subs	r0, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	0099      	lsls	r1, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Init+0x196>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e022      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10e      	bne.n	8002f10 <HAL_I2C_Init+0x1bc>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1e58      	subs	r0, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	440b      	add	r3, r1
 8002f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0e:	e00f      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1e58      	subs	r0, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	0099      	lsls	r1, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f26:	3301      	adds	r3, #1
 8002f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	6809      	ldr	r1, [r1, #0]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6911      	ldr	r1, [r2, #16]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68d2      	ldr	r2, [r2, #12]
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	000186a0 	.word	0x000186a0
 8002fcc:	001e847f 	.word	0x001e847f
 8002fd0:	003d08ff 	.word	0x003d08ff
 8002fd4:	431bde83 	.word	0x431bde83
 8002fd8:	10624dd3 	.word	0x10624dd3

08002fdc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e128      	b.n	8003240 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a90      	ldr	r2, [pc, #576]	; (8003248 <HAL_I2S_Init+0x26c>)
 8003006:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7fd fd33 	bl	8000a74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003024:	f023 030f 	bic.w	r3, r3, #15
 8003028:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2202      	movs	r2, #2
 8003030:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d060      	beq.n	80030fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003042:	2310      	movs	r3, #16
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	e001      	b.n	800304c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003048:	2320      	movs	r3, #32
 800304a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b20      	cmp	r3, #32
 8003052:	d802      	bhi.n	800305a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800305a:	2001      	movs	r0, #1
 800305c:	f001 f9d8 	bl	8004410 <HAL_RCCEx_GetPeriphCLKFreq>
 8003060:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800306a:	d125      	bne.n	80030b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	fbb2 f2f3 	udiv	r2, r2, r3
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	3305      	adds	r3, #5
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	e01f      	b.n	80030d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	461a      	mov	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	3305      	adds	r3, #5
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	e00e      	b.n	80030d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	461a      	mov	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	3305      	adds	r3, #5
 80030d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4a5c      	ldr	r2, [pc, #368]	; (800324c <HAL_I2S_Init+0x270>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	08db      	lsrs	r3, r3, #3
 80030e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	e003      	b.n	8003104 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030fc:	2302      	movs	r3, #2
 80030fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d902      	bls.n	8003110 <HAL_I2S_Init+0x134>
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2bff      	cmp	r3, #255	; 0xff
 800310e:	d907      	bls.n	8003120 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	f043 0210 	orr.w	r2, r3, #16
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e08f      	b.n	8003240 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	ea42 0103 	orr.w	r1, r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	430a      	orrs	r2, r1
 8003132:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800313e:	f023 030f 	bic.w	r3, r3, #15
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6851      	ldr	r1, [r2, #4]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6892      	ldr	r2, [r2, #8]
 800314a:	4311      	orrs	r1, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68d2      	ldr	r2, [r2, #12]
 8003150:	4311      	orrs	r1, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6992      	ldr	r2, [r2, #24]
 8003156:	430a      	orrs	r2, r1
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003162:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d161      	bne.n	8003230 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a38      	ldr	r2, [pc, #224]	; (8003250 <HAL_I2S_Init+0x274>)
 8003170:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a37      	ldr	r2, [pc, #220]	; (8003254 <HAL_I2S_Init+0x278>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <HAL_I2S_Init+0x1a4>
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_I2S_Init+0x27c>)
 800317e:	e001      	b.n	8003184 <HAL_I2S_Init+0x1a8>
 8003180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	4932      	ldr	r1, [pc, #200]	; (8003254 <HAL_I2S_Init+0x278>)
 800318c:	428a      	cmp	r2, r1
 800318e:	d101      	bne.n	8003194 <HAL_I2S_Init+0x1b8>
 8003190:	4a31      	ldr	r2, [pc, #196]	; (8003258 <HAL_I2S_Init+0x27c>)
 8003192:	e001      	b.n	8003198 <HAL_I2S_Init+0x1bc>
 8003194:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003198:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800319c:	f023 030f 	bic.w	r3, r3, #15
 80031a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2b      	ldr	r2, [pc, #172]	; (8003254 <HAL_I2S_Init+0x278>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_I2S_Init+0x1d4>
 80031ac:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <HAL_I2S_Init+0x27c>)
 80031ae:	e001      	b.n	80031b4 <HAL_I2S_Init+0x1d8>
 80031b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b4:	2202      	movs	r2, #2
 80031b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a25      	ldr	r2, [pc, #148]	; (8003254 <HAL_I2S_Init+0x278>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d101      	bne.n	80031c6 <HAL_I2S_Init+0x1ea>
 80031c2:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_I2S_Init+0x27c>)
 80031c4:	e001      	b.n	80031ca <HAL_I2S_Init+0x1ee>
 80031c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d6:	d003      	beq.n	80031e0 <HAL_I2S_Init+0x204>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d103      	bne.n	80031e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80031e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e001      	b.n	80031ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003200:	4313      	orrs	r3, r2
 8003202:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800320a:	4313      	orrs	r3, r2
 800320c:	b29a      	uxth	r2, r3
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	4313      	orrs	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003218:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <HAL_I2S_Init+0x278>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_I2S_Init+0x24c>
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_I2S_Init+0x27c>)
 8003226:	e001      	b.n	800322c <HAL_I2S_Init+0x250>
 8003228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800322c:	897a      	ldrh	r2, [r7, #10]
 800322e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	08003353 	.word	0x08003353
 800324c:	cccccccd 	.word	0xcccccccd
 8003250:	08003469 	.word	0x08003469
 8003254:	40003800 	.word	0x40003800
 8003258:	40003400 	.word	0x40003400

0800325c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	881a      	ldrh	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10e      	bne.n	80032ec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ffb8 	bl	800325c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	b292      	uxth	r2, r2
 8003308:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	1c9a      	adds	r2, r3, #2
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10e      	bne.n	800334a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800333a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ff93 	bl	8003270 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b04      	cmp	r3, #4
 800336c:	d13a      	bne.n	80033e4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d109      	bne.n	800338c <I2S_IRQHandler+0x3a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003382:	2b40      	cmp	r3, #64	; 0x40
 8003384:	d102      	bne.n	800338c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff ffb4 	bl	80032f4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d126      	bne.n	80033e4 <I2S_IRQHandler+0x92>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d11f      	bne.n	80033e4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	f043 0202 	orr.w	r2, r3, #2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ff50 	bl	8003284 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d136      	bne.n	800345e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d109      	bne.n	800340e <I2S_IRQHandler+0xbc>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003404:	2b80      	cmp	r3, #128	; 0x80
 8003406:	d102      	bne.n	800340e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff45 	bl	8003298 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d122      	bne.n	800345e <I2S_IRQHandler+0x10c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b20      	cmp	r3, #32
 8003424:	d11b      	bne.n	800345e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003434:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	f043 0204 	orr.w	r2, r3, #4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff13 	bl	8003284 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800345e:	bf00      	nop
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a92      	ldr	r2, [pc, #584]	; (80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003482:	4b92      	ldr	r3, [pc, #584]	; (80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003484:	e001      	b.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a8b      	ldr	r2, [pc, #556]	; (80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034a0:	4b8a      	ldr	r3, [pc, #552]	; (80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034a2:	e001      	b.n	80034a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b4:	d004      	beq.n	80034c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 8099 	bne.w	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d107      	bne.n	80034da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f925 	bl	8003724 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d107      	bne.n	80034f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9c8 	bl	8003884 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d13a      	bne.n	8003574 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d035      	beq.n	8003574 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a6e      	ldr	r2, [pc, #440]	; (80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003512:	4b6e      	ldr	r3, [pc, #440]	; (80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003514:	e001      	b.n	800351a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4969      	ldr	r1, [pc, #420]	; (80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003522:	428b      	cmp	r3, r1
 8003524:	d101      	bne.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003526:	4b69      	ldr	r3, [pc, #420]	; (80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003528:	e001      	b.n	800352e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800352a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800352e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003532:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003542:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f043 0202 	orr.w	r2, r3, #2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fe88 	bl	8003284 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b08      	cmp	r3, #8
 800357c:	f040 80c3 	bne.w	8003706 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80bd 	beq.w	8003706 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800359a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a49      	ldr	r2, [pc, #292]	; (80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035a6:	4b49      	ldr	r3, [pc, #292]	; (80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035a8:	e001      	b.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4944      	ldr	r1, [pc, #272]	; (80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035b6:	428b      	cmp	r3, r1
 80035b8:	d101      	bne.n	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80035ba:	4b44      	ldr	r3, [pc, #272]	; (80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035bc:	e001      	b.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80035be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035c8:	2300      	movs	r3, #0
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f043 0204 	orr.w	r2, r3, #4
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff fe4a 	bl	8003284 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035f0:	e089      	b.n	8003706 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d107      	bne.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8be 	bl	8003788 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f8fd 	bl	8003820 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d12f      	bne.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d02a      	beq.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003648:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003654:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003656:	e001      	b.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4919      	ldr	r1, [pc, #100]	; (80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003664:	428b      	cmp	r3, r1
 8003666:	d101      	bne.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800366a:	e001      	b.n	8003670 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800366c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003670:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003674:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f043 0202 	orr.w	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff fdfa 	bl	8003284 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b08      	cmp	r3, #8
 8003698:	d136      	bne.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d031      	beq.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036ae:	4b07      	ldr	r3, [pc, #28]	; (80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036b0:	e001      	b.n	80036b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80036b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4902      	ldr	r1, [pc, #8]	; (80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036be:	428b      	cmp	r3, r1
 80036c0:	d106      	bne.n	80036d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80036c2:	4b02      	ldr	r3, [pc, #8]	; (80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036c4:	e006      	b.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80036c6:	bf00      	nop
 80036c8:	40003800 	.word	0x40003800
 80036cc:	40003400 	.word	0x40003400
 80036d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	f043 0204 	orr.w	r2, r3, #4
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fdc0 	bl	8003284 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003704:	e000      	b.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003706:	bf00      	nop
}
 8003708:	bf00      	nop
 800370a:	3720      	adds	r7, #32
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	1c99      	adds	r1, r3, #2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6251      	str	r1, [r2, #36]	; 0x24
 8003736:	881a      	ldrh	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d113      	bne.n	800377e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003764:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ffc9 	bl	8003710 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	1c99      	adds	r1, r3, #2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6251      	str	r1, [r2, #36]	; 0x24
 800379a:	8819      	ldrh	r1, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <I2SEx_TxISR_I2SExt+0x90>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d101      	bne.n	80037aa <I2SEx_TxISR_I2SExt+0x22>
 80037a6:	4b1d      	ldr	r3, [pc, #116]	; (800381c <I2SEx_TxISR_I2SExt+0x94>)
 80037a8:	e001      	b.n	80037ae <I2SEx_TxISR_I2SExt+0x26>
 80037aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ae:	460a      	mov	r2, r1
 80037b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d121      	bne.n	800380e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a12      	ldr	r2, [pc, #72]	; (8003818 <I2SEx_TxISR_I2SExt+0x90>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <I2SEx_TxISR_I2SExt+0x50>
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <I2SEx_TxISR_I2SExt+0x94>)
 80037d6:	e001      	b.n	80037dc <I2SEx_TxISR_I2SExt+0x54>
 80037d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	490d      	ldr	r1, [pc, #52]	; (8003818 <I2SEx_TxISR_I2SExt+0x90>)
 80037e4:	428b      	cmp	r3, r1
 80037e6:	d101      	bne.n	80037ec <I2SEx_TxISR_I2SExt+0x64>
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <I2SEx_TxISR_I2SExt+0x94>)
 80037ea:	e001      	b.n	80037f0 <I2SEx_TxISR_I2SExt+0x68>
 80037ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff81 	bl	8003710 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40003800 	.word	0x40003800
 800381c:	40003400 	.word	0x40003400

08003820 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68d8      	ldr	r0, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	1c99      	adds	r1, r3, #2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003838:	b282      	uxth	r2, r0
 800383a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d113      	bne.n	800387c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003862:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ff4a 	bl	8003710 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a20      	ldr	r2, [pc, #128]	; (8003914 <I2SEx_RxISR_I2SExt+0x90>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <I2SEx_RxISR_I2SExt+0x16>
 8003896:	4b20      	ldr	r3, [pc, #128]	; (8003918 <I2SEx_RxISR_I2SExt+0x94>)
 8003898:	e001      	b.n	800389e <I2SEx_RxISR_I2SExt+0x1a>
 800389a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389e:	68d8      	ldr	r0, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	1c99      	adds	r1, r3, #2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038aa:	b282      	uxth	r2, r0
 80038ac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d121      	bne.n	800390a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <I2SEx_RxISR_I2SExt+0x90>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <I2SEx_RxISR_I2SExt+0x50>
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <I2SEx_RxISR_I2SExt+0x94>)
 80038d2:	e001      	b.n	80038d8 <I2SEx_RxISR_I2SExt+0x54>
 80038d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	490d      	ldr	r1, [pc, #52]	; (8003914 <I2SEx_RxISR_I2SExt+0x90>)
 80038e0:	428b      	cmp	r3, r1
 80038e2:	d101      	bne.n	80038e8 <I2SEx_RxISR_I2SExt+0x64>
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <I2SEx_RxISR_I2SExt+0x94>)
 80038e6:	e001      	b.n	80038ec <I2SEx_RxISR_I2SExt+0x68>
 80038e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038f0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d106      	bne.n	800390a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff03 	bl	8003710 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40003800 	.word	0x40003800
 8003918:	40003400 	.word	0x40003400

0800391c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e267      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d075      	beq.n	8003a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393a:	4b88      	ldr	r3, [pc, #544]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b04      	cmp	r3, #4
 8003944:	d00c      	beq.n	8003960 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003946:	4b85      	ldr	r3, [pc, #532]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800394e:	2b08      	cmp	r3, #8
 8003950:	d112      	bne.n	8003978 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003952:	4b82      	ldr	r3, [pc, #520]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800395e:	d10b      	bne.n	8003978 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	4b7e      	ldr	r3, [pc, #504]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d05b      	beq.n	8003a24 <HAL_RCC_OscConfig+0x108>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d157      	bne.n	8003a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e242      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003980:	d106      	bne.n	8003990 <HAL_RCC_OscConfig+0x74>
 8003982:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a75      	ldr	r2, [pc, #468]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e01d      	b.n	80039cc <HAL_RCC_OscConfig+0xb0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x98>
 800399a:	4b70      	ldr	r3, [pc, #448]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6f      	ldr	r2, [pc, #444]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a6c      	ldr	r2, [pc, #432]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e00b      	b.n	80039cc <HAL_RCC_OscConfig+0xb0>
 80039b4:	4b69      	ldr	r3, [pc, #420]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a68      	ldr	r2, [pc, #416]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b66      	ldr	r3, [pc, #408]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a65      	ldr	r2, [pc, #404]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d013      	beq.n	80039fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fd fabc 	bl	8000f50 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fd fab8 	bl	8000f50 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e207      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	4b5b      	ldr	r3, [pc, #364]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0xc0>
 80039fa:	e014      	b.n	8003a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fd faa8 	bl	8000f50 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fd faa4 	bl	8000f50 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1f3      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a16:	4b51      	ldr	r3, [pc, #324]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0xe8>
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d063      	beq.n	8003afa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a32:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d11c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4a:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d116      	bne.n	8003a84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a56:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_RCC_OscConfig+0x152>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d001      	beq.n	8003a6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e1c7      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4937      	ldr	r1, [pc, #220]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a82:	e03a      	b.n	8003afa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a8c:	4b34      	ldr	r3, [pc, #208]	; (8003b60 <HAL_RCC_OscConfig+0x244>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a92:	f7fd fa5d 	bl	8000f50 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9a:	f7fd fa59 	bl	8000f50 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1a8      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab8:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4925      	ldr	r1, [pc, #148]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	600b      	str	r3, [r1, #0]
 8003acc:	e015      	b.n	8003afa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_RCC_OscConfig+0x244>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fd fa3c 	bl	8000f50 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003adc:	f7fd fa38 	bl	8000f50 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e187      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d036      	beq.n	8003b74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCC_OscConfig+0x248>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fa1c 	bl	8000f50 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fd fa18 	bl	8000f50 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e167      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_OscConfig+0x240>)
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x200>
 8003b3a:	e01b      	b.n	8003b74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_RCC_OscConfig+0x248>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b42:	f7fd fa05 	bl	8000f50 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b48:	e00e      	b.n	8003b68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4a:	f7fd fa01 	bl	8000f50 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d907      	bls.n	8003b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e150      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	42470000 	.word	0x42470000
 8003b64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b68:	4b88      	ldr	r3, [pc, #544]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ea      	bne.n	8003b4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8097 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b82:	2300      	movs	r3, #0
 8003b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b86:	4b81      	ldr	r3, [pc, #516]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	4b7d      	ldr	r3, [pc, #500]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	4a7c      	ldr	r2, [pc, #496]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba2:	4b7a      	ldr	r3, [pc, #488]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb2:	4b77      	ldr	r3, [pc, #476]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d118      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bbe:	4b74      	ldr	r3, [pc, #464]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a73      	ldr	r2, [pc, #460]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bca:	f7fd f9c1 	bl	8000f50 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7fd f9bd 	bl	8000f50 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e10c      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	4b6a      	ldr	r3, [pc, #424]	; (8003d90 <HAL_RCC_OscConfig+0x474>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCC_OscConfig+0x2ea>
 8003bf8:	4b64      	ldr	r3, [pc, #400]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a63      	ldr	r2, [pc, #396]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	e01c      	b.n	8003c40 <HAL_RCC_OscConfig+0x324>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x30c>
 8003c0e:	4b5f      	ldr	r3, [pc, #380]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	4a5e      	ldr	r2, [pc, #376]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1a:	4b5c      	ldr	r3, [pc, #368]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a5b      	ldr	r2, [pc, #364]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0x324>
 8003c28:	4b58      	ldr	r3, [pc, #352]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4a57      	ldr	r2, [pc, #348]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	6713      	str	r3, [r2, #112]	; 0x70
 8003c34:	4b55      	ldr	r3, [pc, #340]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a54      	ldr	r2, [pc, #336]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	f023 0304 	bic.w	r3, r3, #4
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d015      	beq.n	8003c74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fd f982 	bl	8000f50 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fd f97e 	bl	8000f50 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0cb      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	4b49      	ldr	r3, [pc, #292]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0ee      	beq.n	8003c50 <HAL_RCC_OscConfig+0x334>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7fd f96c 	bl	8000f50 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fd f968 	bl	8000f50 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0b5      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c92:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ee      	bne.n	8003c7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca4:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	4a38      	ldr	r2, [pc, #224]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a1 	beq.w	8003dfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cba:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d05c      	beq.n	8003d80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d141      	bne.n	8003d52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCC_OscConfig+0x478>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fd f93c 	bl	8000f50 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd f938 	bl	8000f50 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e087      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	019b      	lsls	r3, r3, #6
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	3b01      	subs	r3, #1
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	491b      	ldr	r1, [pc, #108]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d24:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_RCC_OscConfig+0x478>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fd f911 	bl	8000f50 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d32:	f7fd f90d 	bl	8000f50 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e05c      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x416>
 8003d50:	e054      	b.n	8003dfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_RCC_OscConfig+0x478>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd f8fa 	bl	8000f50 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd f8f6 	bl	8000f50 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e045      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_RCC_OscConfig+0x470>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x444>
 8003d7e:	e03d      	b.n	8003dfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e038      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40007000 	.word	0x40007000
 8003d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCC_OscConfig+0x4ec>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d028      	beq.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d121      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d11a      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dc8:	4013      	ands	r3, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d111      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	3b01      	subs	r3, #1
 8003de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800

08003e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0cc      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e20:	4b68      	ldr	r3, [pc, #416]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d90c      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b65      	ldr	r3, [pc, #404]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0b8      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d020      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e60:	4b59      	ldr	r3, [pc, #356]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e78:	4b53      	ldr	r3, [pc, #332]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a52      	ldr	r2, [pc, #328]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e84:	4b50      	ldr	r3, [pc, #320]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	494d      	ldr	r1, [pc, #308]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d044      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eaa:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d119      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e07f      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d003      	beq.n	8003eca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	4b3f      	ldr	r3, [pc, #252]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e06f      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eda:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e067      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eea:	4b37      	ldr	r3, [pc, #220]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4934      	ldr	r1, [pc, #208]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003efc:	f7fd f828 	bl	8000f50 <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f04:	f7fd f824 	bl	8000f50 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e04f      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 020c 	and.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1eb      	bne.n	8003f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d20c      	bcs.n	8003f54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e032      	b.n	8003fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f60:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4916      	ldr	r1, [pc, #88]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	490e      	ldr	r1, [pc, #56]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f92:	f000 f821 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	490a      	ldr	r1, [pc, #40]	; (8003fcc <HAL_RCC_ClockConfig+0x1c0>)
 8003fa4:	5ccb      	ldrb	r3, [r1, r3]
 8003fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc ff88 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023c00 	.word	0x40023c00
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	08008dc8 	.word	0x08008dc8
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	20000004 	.word	0x20000004

08003fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fdc:	b094      	sub	sp, #80	; 0x50
 8003fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe8:	2300      	movs	r3, #0
 8003fea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ff0:	4b79      	ldr	r3, [pc, #484]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d00d      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x40>
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	f200 80e1 	bhi.w	80041c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x34>
 8004006:	2b04      	cmp	r3, #4
 8004008:	d003      	beq.n	8004012 <HAL_RCC_GetSysClockFreq+0x3a>
 800400a:	e0db      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4b73      	ldr	r3, [pc, #460]	; (80041dc <HAL_RCC_GetSysClockFreq+0x204>)
 800400e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004010:	e0db      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004012:	4b73      	ldr	r3, [pc, #460]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004016:	e0d8      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004018:	4b6f      	ldr	r3, [pc, #444]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004020:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004022:	4b6d      	ldr	r3, [pc, #436]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d063      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402e:	4b6a      	ldr	r3, [pc, #424]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	099b      	lsrs	r3, r3, #6
 8004034:	2200      	movs	r2, #0
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
 8004038:	63fa      	str	r2, [r7, #60]	; 0x3c
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004040:	633b      	str	r3, [r7, #48]	; 0x30
 8004042:	2300      	movs	r3, #0
 8004044:	637b      	str	r3, [r7, #52]	; 0x34
 8004046:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800404a:	4622      	mov	r2, r4
 800404c:	462b      	mov	r3, r5
 800404e:	f04f 0000 	mov.w	r0, #0
 8004052:	f04f 0100 	mov.w	r1, #0
 8004056:	0159      	lsls	r1, r3, #5
 8004058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800405c:	0150      	lsls	r0, r2, #5
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4621      	mov	r1, r4
 8004064:	1a51      	subs	r1, r2, r1
 8004066:	6139      	str	r1, [r7, #16]
 8004068:	4629      	mov	r1, r5
 800406a:	eb63 0301 	sbc.w	r3, r3, r1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800407c:	4659      	mov	r1, fp
 800407e:	018b      	lsls	r3, r1, #6
 8004080:	4651      	mov	r1, sl
 8004082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004086:	4651      	mov	r1, sl
 8004088:	018a      	lsls	r2, r1, #6
 800408a:	4651      	mov	r1, sl
 800408c:	ebb2 0801 	subs.w	r8, r2, r1
 8004090:	4659      	mov	r1, fp
 8004092:	eb63 0901 	sbc.w	r9, r3, r1
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040aa:	4690      	mov	r8, r2
 80040ac:	4699      	mov	r9, r3
 80040ae:	4623      	mov	r3, r4
 80040b0:	eb18 0303 	adds.w	r3, r8, r3
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	462b      	mov	r3, r5
 80040b8:	eb49 0303 	adc.w	r3, r9, r3
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040ca:	4629      	mov	r1, r5
 80040cc:	024b      	lsls	r3, r1, #9
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040d4:	4621      	mov	r1, r4
 80040d6:	024a      	lsls	r2, r1, #9
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040de:	2200      	movs	r2, #0
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040e8:	f7fc f86e 	bl	80001c8 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4613      	mov	r3, r2
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	e058      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	4b38      	ldr	r3, [pc, #224]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	2200      	movs	r2, #0
 80040fe:	4618      	mov	r0, r3
 8004100:	4611      	mov	r1, r2
 8004102:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004106:	623b      	str	r3, [r7, #32]
 8004108:	2300      	movs	r3, #0
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
 800410c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004110:	4642      	mov	r2, r8
 8004112:	464b      	mov	r3, r9
 8004114:	f04f 0000 	mov.w	r0, #0
 8004118:	f04f 0100 	mov.w	r1, #0
 800411c:	0159      	lsls	r1, r3, #5
 800411e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004122:	0150      	lsls	r0, r2, #5
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4641      	mov	r1, r8
 800412a:	ebb2 0a01 	subs.w	sl, r2, r1
 800412e:	4649      	mov	r1, r9
 8004130:	eb63 0b01 	sbc.w	fp, r3, r1
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004140:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004144:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004148:	ebb2 040a 	subs.w	r4, r2, sl
 800414c:	eb63 050b 	sbc.w	r5, r3, fp
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	00eb      	lsls	r3, r5, #3
 800415a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800415e:	00e2      	lsls	r2, r4, #3
 8004160:	4614      	mov	r4, r2
 8004162:	461d      	mov	r5, r3
 8004164:	4643      	mov	r3, r8
 8004166:	18e3      	adds	r3, r4, r3
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	464b      	mov	r3, r9
 800416c:	eb45 0303 	adc.w	r3, r5, r3
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800417e:	4629      	mov	r1, r5
 8004180:	028b      	lsls	r3, r1, #10
 8004182:	4621      	mov	r1, r4
 8004184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004188:	4621      	mov	r1, r4
 800418a:	028a      	lsls	r2, r1, #10
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004192:	2200      	movs	r2, #0
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	61fa      	str	r2, [r7, #28]
 8004198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800419c:	f7fc f814 	bl	80001c8 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4613      	mov	r3, r2
 80041a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	0c1b      	lsrs	r3, r3, #16
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	3301      	adds	r3, #1
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041c2:	e002      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_RCC_GetSysClockFreq+0x204>)
 80041c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3750      	adds	r7, #80	; 0x50
 80041d0:	46bd      	mov	sp, r7
 80041d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	00f42400 	.word	0x00f42400
 80041e0:	007a1200 	.word	0x007a1200

080041e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000000 	.word	0x20000000

080041fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004200:	f7ff fff0 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	0a9b      	lsrs	r3, r3, #10
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4903      	ldr	r1, [pc, #12]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40023800 	.word	0x40023800
 8004220:	08008dd8 	.word	0x08008dd8

08004224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004228:	f7ff ffdc 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 800422c:	4602      	mov	r2, r0
 800422e:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	0b5b      	lsrs	r3, r3, #13
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4903      	ldr	r1, [pc, #12]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800423a:	5ccb      	ldrb	r3, [r1, r3]
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40023800 	.word	0x40023800
 8004248:	08008dd8 	.word	0x08008dd8

0800424c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004270:	2b00      	cmp	r3, #0
 8004272:	d035      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004274:	4b62      	ldr	r3, [pc, #392]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800427a:	f7fc fe69 	bl	8000f50 <HAL_GetTick>
 800427e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004280:	e008      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004282:	f7fc fe65 	bl	8000f50 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e0b0      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004294:	4b5b      	ldr	r3, [pc, #364]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f0      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	019a      	lsls	r2, r3, #6
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	071b      	lsls	r3, r3, #28
 80042ac:	4955      	ldr	r1, [pc, #340]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042b4:	4b52      	ldr	r3, [pc, #328]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ba:	f7fc fe49 	bl	8000f50 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042c2:	f7fc fe45 	bl	8000f50 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e090      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d4:	4b4b      	ldr	r3, [pc, #300]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8083 	beq.w	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	4b44      	ldr	r3, [pc, #272]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	4a43      	ldr	r2, [pc, #268]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6413      	str	r3, [r2, #64]	; 0x40
 80042fe:	4b41      	ldr	r3, [pc, #260]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800430a:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3e      	ldr	r2, [pc, #248]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004314:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004316:	f7fc fe1b 	bl	8000f50 <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800431e:	f7fc fe17 	bl	8000f50 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e062      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004330:	4b35      	ldr	r3, [pc, #212]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800433c:	4b31      	ldr	r3, [pc, #196]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004344:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d02f      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	429a      	cmp	r2, r3
 8004358:	d028      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800435a:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004362:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004364:	4b29      	ldr	r3, [pc, #164]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800436a:	4b28      	ldr	r3, [pc, #160]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004370:	4a24      	ldr	r2, [pc, #144]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004376:	4b23      	ldr	r3, [pc, #140]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	d114      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004382:	f7fc fde5 	bl	8000f50 <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004388:	e00a      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fc fde1 	bl	8000f50 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	; 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e02a      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ee      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b8:	d10d      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ce:	490d      	ldr	r1, [pc, #52]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]
 80043d4:	e005      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043e0:	6093      	str	r3, [r2, #8]
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ee:	4905      	ldr	r1, [pc, #20]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	42470068 	.word	0x42470068
 8004404:	40023800 	.word	0x40023800
 8004408:	40007000 	.word	0x40007000
 800440c:	42470e40 	.word	0x42470e40

08004410 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d13e      	bne.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800442e:	4b23      	ldr	r3, [pc, #140]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d12f      	bne.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004444:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004446:	617b      	str	r3, [r7, #20]
          break;
 8004448:	e02f      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800444a:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004456:	d108      	bne.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004458:	4b18      	ldr	r3, [pc, #96]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004460:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	e007      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004472:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800447c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	fb02 f303 	mul.w	r3, r2, r3
 800448c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004494:	0f1b      	lsrs	r3, r3, #28
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	617b      	str	r3, [r7, #20]
          break;
 80044a2:	e002      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
          break;
 80044a8:	bf00      	nop
        }
      }
      break;
 80044aa:	bf00      	nop
    }
  }
  return frequency;
 80044ac:	697b      	ldr	r3, [r7, #20]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40023800 	.word	0x40023800
 80044c0:	00bb8000 	.word	0x00bb8000
 80044c4:	007a1200 	.word	0x007a1200
 80044c8:	00f42400 	.word	0x00f42400

080044cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e07b      	b.n	80045d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d108      	bne.n	80044f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ee:	d009      	beq.n	8004504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	61da      	str	r2, [r3, #28]
 80044f6:	e005      	b.n	8004504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc fb28 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	ea42 0103 	orr.w	r1, r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	f003 0104 	and.w	r1, r3, #4
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	f003 0210 	and.w	r2, r3, #16
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e03f      	b.n	8004670 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7fc fafd 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2224      	movs	r2, #36	; 0x24
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004620:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f928 	bl	8004878 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004636:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004646:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004656:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b20      	cmp	r3, #32
 8004696:	d17c      	bne.n	8004792 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_UART_Transmit+0x2c>
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e075      	b.n	8004794 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_UART_Transmit+0x3e>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e06e      	b.n	8004794 <HAL_UART_Transmit+0x11c>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2221      	movs	r2, #33	; 0x21
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046cc:	f7fc fc40 	bl	8000f50 <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	88fa      	ldrh	r2, [r7, #6]
 80046d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	88fa      	ldrh	r2, [r7, #6]
 80046dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e6:	d108      	bne.n	80046fa <HAL_UART_Transmit+0x82>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	e003      	b.n	8004702 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800470a:	e02a      	b.n	8004762 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2200      	movs	r2, #0
 8004714:	2180      	movs	r1, #128	; 0x80
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f840 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e036      	b.n	8004794 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800473a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	3302      	adds	r3, #2
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	e007      	b.n	8004754 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	781a      	ldrb	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	3301      	adds	r3, #1
 8004752:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1cf      	bne.n	800470c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2200      	movs	r2, #0
 8004774:	2140      	movs	r1, #64	; 0x40
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f810 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e006      	b.n	8004794 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e000      	b.n	8004794 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004792:	2302      	movs	r3, #2
  }
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b090      	sub	sp, #64	; 0x40
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ac:	e050      	b.n	8004850 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b4:	d04c      	beq.n	8004850 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <UART_WaitOnFlagUntilTimeout+0x30>
 80047bc:	f7fc fbc8 	bl	8000f50 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d241      	bcs.n	8004850 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ec:	637a      	str	r2, [r7, #52]	; 0x34
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3314      	adds	r3, #20
 8004806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	613b      	str	r3, [r7, #16]
   return(result);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f023 0301 	bic.w	r3, r3, #1
 8004816:	63bb      	str	r3, [r7, #56]	; 0x38
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004820:	623a      	str	r2, [r7, #32]
 8004822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	69f9      	ldr	r1, [r7, #28]
 8004826:	6a3a      	ldr	r2, [r7, #32]
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	61bb      	str	r3, [r7, #24]
   return(result);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e5      	bne.n	8004800 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e00f      	b.n	8004870 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4013      	ands	r3, r2
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	429a      	cmp	r2, r3
 800486c:	d09f      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3740      	adds	r7, #64	; 0x40
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800487c:	b0c0      	sub	sp, #256	; 0x100
 800487e:	af00      	add	r7, sp, #0
 8004880:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	68d9      	ldr	r1, [r3, #12]
 8004896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	ea40 0301 	orr.w	r3, r0, r1
 80048a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048d0:	f021 010c 	bic.w	r1, r1, #12
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048de:	430b      	orrs	r3, r1
 80048e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f2:	6999      	ldr	r1, [r3, #24]
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	ea40 0301 	orr.w	r3, r0, r1
 80048fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b8f      	ldr	r3, [pc, #572]	; (8004b44 <UART_SetConfig+0x2cc>)
 8004908:	429a      	cmp	r2, r3
 800490a:	d005      	beq.n	8004918 <UART_SetConfig+0xa0>
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b8d      	ldr	r3, [pc, #564]	; (8004b48 <UART_SetConfig+0x2d0>)
 8004914:	429a      	cmp	r2, r3
 8004916:	d104      	bne.n	8004922 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7ff fc84 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 800491c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004920:	e003      	b.n	800492a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004922:	f7ff fc6b 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8004926:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004934:	f040 810c 	bne.w	8004b50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800493c:	2200      	movs	r2, #0
 800493e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004942:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004946:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800494a:	4622      	mov	r2, r4
 800494c:	462b      	mov	r3, r5
 800494e:	1891      	adds	r1, r2, r2
 8004950:	65b9      	str	r1, [r7, #88]	; 0x58
 8004952:	415b      	adcs	r3, r3
 8004954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004956:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800495a:	4621      	mov	r1, r4
 800495c:	eb12 0801 	adds.w	r8, r2, r1
 8004960:	4629      	mov	r1, r5
 8004962:	eb43 0901 	adc.w	r9, r3, r1
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800497a:	4690      	mov	r8, r2
 800497c:	4699      	mov	r9, r3
 800497e:	4623      	mov	r3, r4
 8004980:	eb18 0303 	adds.w	r3, r8, r3
 8004984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004988:	462b      	mov	r3, r5
 800498a:	eb49 0303 	adc.w	r3, r9, r3
 800498e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800499e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049a6:	460b      	mov	r3, r1
 80049a8:	18db      	adds	r3, r3, r3
 80049aa:	653b      	str	r3, [r7, #80]	; 0x50
 80049ac:	4613      	mov	r3, r2
 80049ae:	eb42 0303 	adc.w	r3, r2, r3
 80049b2:	657b      	str	r3, [r7, #84]	; 0x54
 80049b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049bc:	f7fb fc04 	bl	80001c8 <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <UART_SetConfig+0x2d4>)
 80049c6:	fba3 2302 	umull	r2, r3, r3, r2
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	011c      	lsls	r4, r3, #4
 80049ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80049e8:	415b      	adcs	r3, r3
 80049ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049f0:	4641      	mov	r1, r8
 80049f2:	eb12 0a01 	adds.w	sl, r2, r1
 80049f6:	4649      	mov	r1, r9
 80049f8:	eb43 0b01 	adc.w	fp, r3, r1
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a10:	4692      	mov	sl, r2
 8004a12:	469b      	mov	fp, r3
 8004a14:	4643      	mov	r3, r8
 8004a16:	eb1a 0303 	adds.w	r3, sl, r3
 8004a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	eb4b 0303 	adc.w	r3, fp, r3
 8004a24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	18db      	adds	r3, r3, r3
 8004a40:	643b      	str	r3, [r7, #64]	; 0x40
 8004a42:	4613      	mov	r3, r2
 8004a44:	eb42 0303 	adc.w	r3, r2, r3
 8004a48:	647b      	str	r3, [r7, #68]	; 0x44
 8004a4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a52:	f7fb fbb9 	bl	80001c8 <__aeabi_uldivmod>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <UART_SetConfig+0x2d4>)
 8004a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	2264      	movs	r2, #100	; 0x64
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	1acb      	subs	r3, r1, r3
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a72:	4b36      	ldr	r3, [pc, #216]	; (8004b4c <UART_SetConfig+0x2d4>)
 8004a74:	fba3 2302 	umull	r2, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a80:	441c      	add	r4, r3
 8004a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a94:	4642      	mov	r2, r8
 8004a96:	464b      	mov	r3, r9
 8004a98:	1891      	adds	r1, r2, r2
 8004a9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a9c:	415b      	adcs	r3, r3
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	1851      	adds	r1, r2, r1
 8004aa8:	6339      	str	r1, [r7, #48]	; 0x30
 8004aaa:	4649      	mov	r1, r9
 8004aac:	414b      	adcs	r3, r1
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004abc:	4659      	mov	r1, fp
 8004abe:	00cb      	lsls	r3, r1, #3
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	00ca      	lsls	r2, r1, #3
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	189b      	adds	r3, r3, r2
 8004ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ad8:	464b      	mov	r3, r9
 8004ada:	460a      	mov	r2, r1
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004af0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004af4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004af8:	460b      	mov	r3, r1
 8004afa:	18db      	adds	r3, r3, r3
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004afe:	4613      	mov	r3, r2
 8004b00:	eb42 0303 	adc.w	r3, r2, r3
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b0e:	f7fb fb5b 	bl	80001c8 <__aeabi_uldivmod>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <UART_SetConfig+0x2d4>)
 8004b18:	fba3 1302 	umull	r1, r3, r3, r2
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	2164      	movs	r1, #100	; 0x64
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	3332      	adds	r3, #50	; 0x32
 8004b2a:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <UART_SetConfig+0x2d4>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	f003 0207 	and.w	r2, r3, #7
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4422      	add	r2, r4
 8004b3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b40:	e105      	b.n	8004d4e <UART_SetConfig+0x4d6>
 8004b42:	bf00      	nop
 8004b44:	40011000 	.word	0x40011000
 8004b48:	40011400 	.word	0x40011400
 8004b4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b54:	2200      	movs	r2, #0
 8004b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b62:	4642      	mov	r2, r8
 8004b64:	464b      	mov	r3, r9
 8004b66:	1891      	adds	r1, r2, r2
 8004b68:	6239      	str	r1, [r7, #32]
 8004b6a:	415b      	adcs	r3, r3
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b72:	4641      	mov	r1, r8
 8004b74:	1854      	adds	r4, r2, r1
 8004b76:	4649      	mov	r1, r9
 8004b78:	eb43 0501 	adc.w	r5, r3, r1
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	00eb      	lsls	r3, r5, #3
 8004b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b8a:	00e2      	lsls	r2, r4, #3
 8004b8c:	4614      	mov	r4, r2
 8004b8e:	461d      	mov	r5, r3
 8004b90:	4643      	mov	r3, r8
 8004b92:	18e3      	adds	r3, r4, r3
 8004b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b98:	464b      	mov	r3, r9
 8004b9a:	eb45 0303 	adc.w	r3, r5, r3
 8004b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	008b      	lsls	r3, r1, #2
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc8:	4621      	mov	r1, r4
 8004bca:	008a      	lsls	r2, r1, #2
 8004bcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bd0:	f7fb fafa 	bl	80001c8 <__aeabi_uldivmod>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4b60      	ldr	r3, [pc, #384]	; (8004d5c <UART_SetConfig+0x4e4>)
 8004bda:	fba3 2302 	umull	r2, r3, r3, r2
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	011c      	lsls	r4, r3, #4
 8004be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	1891      	adds	r1, r2, r2
 8004bfa:	61b9      	str	r1, [r7, #24]
 8004bfc:	415b      	adcs	r3, r3
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c04:	4641      	mov	r1, r8
 8004c06:	1851      	adds	r1, r2, r1
 8004c08:	6139      	str	r1, [r7, #16]
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	414b      	adcs	r3, r1
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	00cb      	lsls	r3, r1, #3
 8004c20:	4651      	mov	r1, sl
 8004c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c26:	4651      	mov	r1, sl
 8004c28:	00ca      	lsls	r2, r1, #3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4642      	mov	r2, r8
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c38:	464b      	mov	r3, r9
 8004c3a:	460a      	mov	r2, r1
 8004c3c:	eb42 0303 	adc.w	r3, r2, r3
 8004c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	008b      	lsls	r3, r1, #2
 8004c60:	4641      	mov	r1, r8
 8004c62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c66:	4641      	mov	r1, r8
 8004c68:	008a      	lsls	r2, r1, #2
 8004c6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c6e:	f7fb faab 	bl	80001c8 <__aeabi_uldivmod>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4b39      	ldr	r3, [pc, #228]	; (8004d5c <UART_SetConfig+0x4e4>)
 8004c78:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	2164      	movs	r1, #100	; 0x64
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	3332      	adds	r3, #50	; 0x32
 8004c8a:	4a34      	ldr	r2, [pc, #208]	; (8004d5c <UART_SetConfig+0x4e4>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c96:	441c      	add	r4, r3
 8004c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	673b      	str	r3, [r7, #112]	; 0x70
 8004ca0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ca2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ca6:	4642      	mov	r2, r8
 8004ca8:	464b      	mov	r3, r9
 8004caa:	1891      	adds	r1, r2, r2
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	415b      	adcs	r3, r3
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb6:	4641      	mov	r1, r8
 8004cb8:	1851      	adds	r1, r2, r1
 8004cba:	6039      	str	r1, [r7, #0]
 8004cbc:	4649      	mov	r1, r9
 8004cbe:	414b      	adcs	r3, r1
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cce:	4659      	mov	r1, fp
 8004cd0:	00cb      	lsls	r3, r1, #3
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd8:	4651      	mov	r1, sl
 8004cda:	00ca      	lsls	r2, r1, #3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	189b      	adds	r3, r3, r2
 8004ce6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce8:	464b      	mov	r3, r9
 8004cea:	460a      	mov	r2, r1
 8004cec:	eb42 0303 	adc.w	r3, r2, r3
 8004cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	663b      	str	r3, [r7, #96]	; 0x60
 8004cfc:	667a      	str	r2, [r7, #100]	; 0x64
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	008b      	lsls	r3, r1, #2
 8004d0e:	4641      	mov	r1, r8
 8004d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d14:	4641      	mov	r1, r8
 8004d16:	008a      	lsls	r2, r1, #2
 8004d18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d1c:	f7fb fa54 	bl	80001c8 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <UART_SetConfig+0x4e4>)
 8004d26:	fba3 1302 	umull	r1, r3, r3, r2
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	2164      	movs	r1, #100	; 0x64
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	3332      	adds	r3, #50	; 0x32
 8004d38:	4a08      	ldr	r2, [pc, #32]	; (8004d5c <UART_SetConfig+0x4e4>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	f003 020f 	and.w	r2, r3, #15
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4422      	add	r2, r4
 8004d4c:	609a      	str	r2, [r3, #8]
}
 8004d4e:	bf00      	nop
 8004d50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d54:	46bd      	mov	sp, r7
 8004d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5a:	bf00      	nop
 8004d5c:	51eb851f 	.word	0x51eb851f

08004d60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d60:	b084      	sub	sp, #16
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	f107 001c 	add.w	r0, r7, #28
 8004d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d122      	bne.n	8004dbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d105      	bne.n	8004db2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f9c0 	bl	8005138 <USB_CoreReset>
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e01a      	b.n	8004df4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f9b4 	bl	8005138 <USB_CoreReset>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
 8004de6:	e005      	b.n	8004df4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d10b      	bne.n	8004e12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f043 0206 	orr.w	r2, r3, #6
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e1e:	b004      	add	sp, #16
 8004e20:	4770      	bx	lr

08004e22 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f043 0201 	orr.w	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f023 0201 	bic.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d115      	bne.n	8004eb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e94:	2001      	movs	r0, #1
 8004e96:	f7fc f867 	bl	8000f68 <HAL_Delay>
      ms++;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f93a 	bl	800511a <USB_GetMode>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d01e      	beq.n	8004eea <USB_SetCurrentMode+0x84>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b31      	cmp	r3, #49	; 0x31
 8004eb0:	d9f0      	bls.n	8004e94 <USB_SetCurrentMode+0x2e>
 8004eb2:	e01a      	b.n	8004eea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d115      	bne.n	8004ee6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	f7fc f84e 	bl	8000f68 <HAL_Delay>
      ms++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f921 	bl	800511a <USB_GetMode>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <USB_SetCurrentMode+0x84>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b31      	cmp	r3, #49	; 0x31
 8004ee2:	d9f0      	bls.n	8004ec6 <USB_SetCurrentMode+0x60>
 8004ee4:	e001      	b.n	8004eea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e005      	b.n	8004ef6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b32      	cmp	r3, #50	; 0x32
 8004eee:	d101      	bne.n	8004ef4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3301      	adds	r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a13      	ldr	r2, [pc, #76]	; (8004f64 <USB_FlushTxFifo+0x64>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e01b      	b.n	8004f58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	daf2      	bge.n	8004f0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	019b      	lsls	r3, r3, #6
 8004f30:	f043 0220 	orr.w	r2, r3, #32
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a08      	ldr	r2, [pc, #32]	; (8004f64 <USB_FlushTxFifo+0x64>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e006      	b.n	8004f58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d0f0      	beq.n	8004f38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	00030d40 	.word	0x00030d40

08004f68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3301      	adds	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a11      	ldr	r2, [pc, #68]	; (8004fc4 <USB_FlushRxFifo+0x5c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e018      	b.n	8004fb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	daf2      	bge.n	8004f74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2210      	movs	r2, #16
 8004f96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <USB_FlushRxFifo+0x5c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e006      	b.n	8004fb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d0f0      	beq.n	8004f98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	00030d40 	.word	0x00030d40

08004fc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b089      	sub	sp, #36	; 0x24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	71fb      	strb	r3, [r7, #7]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004fe6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d123      	bne.n	8005036 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fee:	88bb      	ldrh	r3, [r7, #4]
 8004ff0:	3303      	adds	r3, #3
 8004ff2:	089b      	lsrs	r3, r3, #2
 8004ff4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	e018      	b.n	800502e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	031a      	lsls	r2, r3, #12
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4413      	add	r3, r2
 8005004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005008:	461a      	mov	r2, r3
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	3301      	adds	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3301      	adds	r3, #1
 800501a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	3301      	adds	r3, #1
 8005020:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	3301      	adds	r3, #1
 8005026:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	3301      	adds	r3, #1
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	429a      	cmp	r2, r3
 8005034:	d3e2      	bcc.n	8004ffc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3724      	adds	r7, #36	; 0x24
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005044:	b480      	push	{r7}
 8005046:	b08b      	sub	sp, #44	; 0x2c
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	4613      	mov	r3, r2
 8005050:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	089b      	lsrs	r3, r3, #2
 800505e:	b29b      	uxth	r3, r3
 8005060:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800506a:	2300      	movs	r3, #0
 800506c:	623b      	str	r3, [r7, #32]
 800506e:	e014      	b.n	800509a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	601a      	str	r2, [r3, #0]
    pDest++;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	3301      	adds	r3, #1
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	3301      	adds	r3, #1
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	3301      	adds	r3, #1
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	3301      	adds	r3, #1
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	3301      	adds	r3, #1
 8005098:	623b      	str	r3, [r7, #32]
 800509a:	6a3a      	ldr	r2, [r7, #32]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d3e6      	bcc.n	8005070 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050a2:	8bfb      	ldrh	r3, [r7, #30]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01e      	beq.n	80050e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b2:	461a      	mov	r2, r3
 80050b4:	f107 0310 	add.w	r3, r7, #16
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	701a      	strb	r2, [r3, #0]
      i++;
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	3301      	adds	r3, #1
 80050d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	3301      	adds	r3, #1
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80050da:	8bfb      	ldrh	r3, [r7, #30]
 80050dc:	3b01      	subs	r3, #1
 80050de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050e0:	8bfb      	ldrh	r3, [r7, #30]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1ea      	bne.n	80050bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	372c      	adds	r7, #44	; 0x2c
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4013      	ands	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800510c:	68fb      	ldr	r3, [r7, #12]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f003 0301 	and.w	r3, r3, #1
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3301      	adds	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4a13      	ldr	r2, [pc, #76]	; (800519c <USB_CoreReset+0x64>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e01b      	b.n	800518e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	daf2      	bge.n	8005144 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f043 0201 	orr.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3301      	adds	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4a09      	ldr	r2, [pc, #36]	; (800519c <USB_CoreReset+0x64>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e006      	b.n	800518e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	d0f0      	beq.n	800516e <USB_CoreReset+0x36>

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	00030d40 	.word	0x00030d40

080051a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051a0:	b084      	sub	sp, #16
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b086      	sub	sp, #24
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80051ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051c0:	461a      	mov	r2, r3
 80051c2:	2300      	movs	r3, #0
 80051c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d018      	beq.n	8005228 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10a      	bne.n	8005212 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800520a:	f043 0304 	orr.w	r3, r3, #4
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	e014      	b.n	800523c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005220:	f023 0304 	bic.w	r3, r3, #4
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e009      	b.n	800523c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005236:	f023 0304 	bic.w	r3, r3, #4
 800523a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800523c:	2110      	movs	r1, #16
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff fe5e 	bl	8004f00 <USB_FlushTxFifo>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff fe8a 	bl	8004f68 <USB_FlushRxFifo>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	e015      	b.n	8005290 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	461a      	mov	r2, r3
 8005272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005276:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005284:	461a      	mov	r2, r3
 8005286:	2300      	movs	r3, #0
 8005288:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3301      	adds	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	429a      	cmp	r2, r3
 8005296:	d3e5      	bcc.n	8005264 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a13      	ldr	r2, [pc, #76]	; (800530c <USB_HostInit+0x16c>)
 80052be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a13      	ldr	r2, [pc, #76]	; (8005310 <USB_HostInit+0x170>)
 80052c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80052c8:	e009      	b.n	80052de <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2280      	movs	r2, #128	; 0x80
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a10      	ldr	r2, [pc, #64]	; (8005314 <USB_HostInit+0x174>)
 80052d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a0f      	ldr	r2, [pc, #60]	; (8005318 <USB_HostInit+0x178>)
 80052da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d105      	bne.n	80052f0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f043 0210 	orr.w	r2, r3, #16
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <USB_HostInit+0x17c>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005308:	b004      	add	sp, #16
 800530a:	4770      	bx	lr
 800530c:	01000200 	.word	0x01000200
 8005310:	00e00300 	.word	0x00e00300
 8005314:	00600080 	.word	0x00600080
 8005318:	004000e0 	.word	0x004000e0
 800531c:	a3200008 	.word	0xa3200008

08005320 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005358:	4313      	orrs	r3, r2
 800535a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005368:	461a      	mov	r2, r3
 800536a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800536e:	6053      	str	r3, [r2, #4]
 8005370:	e009      	b.n	8005386 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d106      	bne.n	8005386 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800537e:	461a      	mov	r2, r3
 8005380:	f241 7370 	movw	r3, #6000	; 0x1770
 8005384:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80053c4:	2064      	movs	r0, #100	; 0x64
 80053c6:	f7fb fdcf 	bl	8000f68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80053d8:	200a      	movs	r0, #10
 80053da:	f7fb fdc5 	bl	8000f68 <HAL_Delay>

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800540c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <USB_DriveVbus+0x44>
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d106      	bne.n	800542c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800542a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d109      	bne.n	800544c <USB_DriveVbus+0x64>
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800544a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	0c5b      	lsrs	r3, r3, #17
 8005478:	f003 0303 	and.w	r3, r3, #3
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	b29b      	uxth	r3, r3
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	4608      	mov	r0, r1
 80054b6:	4611      	mov	r1, r2
 80054b8:	461a      	mov	r2, r3
 80054ba:	4603      	mov	r3, r0
 80054bc:	70fb      	strb	r3, [r7, #3]
 80054be:	460b      	mov	r3, r1
 80054c0:	70bb      	strb	r3, [r7, #2]
 80054c2:	4613      	mov	r3, r2
 80054c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054da:	461a      	mov	r2, r3
 80054dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80054e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d87e      	bhi.n	80055e8 <USB_HC_Init+0x13c>
 80054ea:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <USB_HC_Init+0x44>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005501 	.word	0x08005501
 80054f4:	080055ab 	.word	0x080055ab
 80054f8:	08005501 	.word	0x08005501
 80054fc:	0800556d 	.word	0x0800556d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4413      	add	r3, r2
 8005508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550c:	461a      	mov	r2, r3
 800550e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005512:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005514:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005518:	2b00      	cmp	r3, #0
 800551a:	da10      	bge.n	800553e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4413      	add	r3, r2
 8005524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	440a      	add	r2, r1
 8005532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800553c:	e057      	b.n	80055ee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005546:	2b00      	cmp	r3, #0
 8005548:	d051      	beq.n	80055ee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4413      	add	r3, r2
 8005552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	440a      	add	r2, r1
 8005560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005564:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005568:	60d3      	str	r3, [r2, #12]
      break;
 800556a:	e040      	b.n	80055ee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4413      	add	r3, r2
 8005574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005578:	461a      	mov	r2, r3
 800557a:	f240 639d 	movw	r3, #1693	; 0x69d
 800557e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005580:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005584:	2b00      	cmp	r3, #0
 8005586:	da34      	bge.n	80055f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4413      	add	r3, r2
 8005590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	440a      	add	r2, r1
 800559e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80055a8:	e023      	b.n	80055f2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b6:	461a      	mov	r2, r3
 80055b8:	f240 2325 	movw	r3, #549	; 0x225
 80055bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	da17      	bge.n	80055f6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	78fa      	ldrb	r2, [r7, #3]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055e0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80055e4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80055e6:	e006      	b.n	80055f6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	77fb      	strb	r3, [r7, #31]
      break;
 80055ec:	e004      	b.n	80055f8 <USB_HC_Init+0x14c>
      break;
 80055ee:	bf00      	nop
 80055f0:	e002      	b.n	80055f8 <USB_HC_Init+0x14c>
      break;
 80055f2:	bf00      	nop
 80055f4:	e000      	b.n	80055f8 <USB_HC_Init+0x14c>
      break;
 80055f6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	78fa      	ldrb	r2, [r7, #3]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	440a      	add	r2, r1
 800560e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005612:	f043 0302 	orr.w	r3, r3, #2
 8005616:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	6939      	ldr	r1, [r7, #16]
 800562e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005632:	4313      	orrs	r3, r2
 8005634:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005642:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005646:	2b00      	cmp	r3, #0
 8005648:	da03      	bge.n	8005652 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800564a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e001      	b.n	8005656 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff feff 	bl	800545a <USB_GetHostSpeed>
 800565c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800565e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005662:	2b02      	cmp	r3, #2
 8005664:	d106      	bne.n	8005674 <USB_HC_Init+0x1c8>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d003      	beq.n	8005674 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800566c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e001      	b.n	8005678 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005678:	787b      	ldrb	r3, [r7, #1]
 800567a:	059b      	lsls	r3, r3, #22
 800567c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005680:	78bb      	ldrb	r3, [r7, #2]
 8005682:	02db      	lsls	r3, r3, #11
 8005684:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005688:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800568a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800568e:	049b      	lsls	r3, r3, #18
 8005690:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005694:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005696:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005698:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800569c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	0159      	lsls	r1, r3, #5
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	440b      	add	r3, r1
 80056aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056b4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80056b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d003      	beq.n	80056c6 <USB_HC_Init+0x21a>
 80056be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d10f      	bne.n	80056e6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80056e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3720      	adds	r7, #32
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08c      	sub	sp, #48	; 0x30
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800570c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d02d      	beq.n	8005776 <USB_HC_StartXfer+0x86>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	791b      	ldrb	r3, [r3, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d129      	bne.n	8005776 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d117      	bne.n	8005758 <USB_HC_StartXfer+0x68>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	79db      	ldrb	r3, [r3, #7]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <USB_HC_StartXfer+0x48>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	79db      	ldrb	r3, [r3, #7]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d10f      	bne.n	8005758 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	4413      	add	r3, r2
 8005740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	6a3a      	ldr	r2, [r7, #32]
 800574c:	440a      	add	r2, r1
 800574e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <USB_HC_StartXfer+0x86>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	795b      	ldrb	r3, [r3, #5]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d107      	bne.n	8005776 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	4619      	mov	r1, r3
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fa0f 	bl	8005b90 <USB_DoPing>
      return HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	e0f8      	b.n	8005968 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d018      	beq.n	80057b0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	8912      	ldrh	r2, [r2, #8]
 8005786:	4413      	add	r3, r2
 8005788:	3b01      	subs	r3, #1
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	8912      	ldrh	r2, [r2, #8]
 800578e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005792:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005794:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005796:	8b7b      	ldrh	r3, [r7, #26]
 8005798:	429a      	cmp	r2, r3
 800579a:	d90b      	bls.n	80057b4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800579c:	8b7b      	ldrh	r3, [r7, #26]
 800579e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	8912      	ldrh	r2, [r2, #8]
 80057a6:	fb03 f202 	mul.w	r2, r3, r2
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	611a      	str	r2, [r3, #16]
 80057ae:	e001      	b.n	80057b4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80057b0:	2301      	movs	r3, #1
 80057b2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	78db      	ldrb	r3, [r3, #3]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	8912      	ldrh	r2, [r2, #8]
 80057c2:	fb03 f202 	mul.w	r2, r3, r2
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	611a      	str	r2, [r3, #16]
 80057ca:	e003      	b.n	80057d4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057de:	04d9      	lsls	r1, r3, #19
 80057e0:	4b63      	ldr	r3, [pc, #396]	; (8005970 <USB_HC_StartXfer+0x280>)
 80057e2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057e4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	7a9b      	ldrb	r3, [r3, #10]
 80057ea:	075b      	lsls	r3, r3, #29
 80057ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057f0:	69f9      	ldr	r1, [r7, #28]
 80057f2:	0148      	lsls	r0, r1, #5
 80057f4:	6a39      	ldr	r1, [r7, #32]
 80057f6:	4401      	add	r1, r0
 80057f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057fc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057fe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	68d9      	ldr	r1, [r3, #12]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	460a      	mov	r2, r1
 8005818:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	bf0c      	ite	eq
 800582a:	2301      	moveq	r3, #1
 800582c:	2300      	movne	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	6a3a      	ldr	r2, [r7, #32]
 8005846:	440a      	add	r2, r1
 8005848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800584c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005850:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	4413      	add	r3, r2
 800585a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	7e7b      	ldrb	r3, [r7, #25]
 8005862:	075b      	lsls	r3, r3, #29
 8005864:	69f9      	ldr	r1, [r7, #28]
 8005866:	0148      	lsls	r0, r1, #5
 8005868:	6a39      	ldr	r1, [r7, #32]
 800586a:	4401      	add	r1, r0
 800586c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005870:	4313      	orrs	r3, r2
 8005872:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800588a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	78db      	ldrb	r3, [r3, #3]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	e003      	b.n	80058a6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058a4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058ac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ba:	461a      	mov	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e04e      	b.n	8005968 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	78db      	ldrb	r3, [r3, #3]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d149      	bne.n	8005966 <USB_HC_StartXfer+0x276>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d045      	beq.n	8005966 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	79db      	ldrb	r3, [r3, #7]
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d830      	bhi.n	8005944 <USB_HC_StartXfer+0x254>
 80058e2:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <USB_HC_StartXfer+0x1f8>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	080058f9 	.word	0x080058f9
 80058ec:	0800591d 	.word	0x0800591d
 80058f0:	080058f9 	.word	0x080058f9
 80058f4:	0800591d 	.word	0x0800591d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	3303      	adds	r3, #3
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005902:	8afa      	ldrh	r2, [r7, #22]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	b29b      	uxth	r3, r3
 800590a:	429a      	cmp	r2, r3
 800590c:	d91c      	bls.n	8005948 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f043 0220 	orr.w	r2, r3, #32
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	619a      	str	r2, [r3, #24]
        }
        break;
 800591a:	e015      	b.n	8005948 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	3303      	adds	r3, #3
 8005922:	089b      	lsrs	r3, r3, #2
 8005924:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005926:	8afa      	ldrh	r2, [r7, #22]
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	b29b      	uxth	r3, r3
 8005932:	429a      	cmp	r2, r3
 8005934:	d90a      	bls.n	800594c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	619a      	str	r2, [r3, #24]
        }
        break;
 8005942:	e003      	b.n	800594c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005944:	bf00      	nop
 8005946:	e002      	b.n	800594e <USB_HC_StartXfer+0x25e>
        break;
 8005948:	bf00      	nop
 800594a:	e000      	b.n	800594e <USB_HC_StartXfer+0x25e>
        break;
 800594c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	68d9      	ldr	r1, [r3, #12]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	785a      	ldrb	r2, [r3, #1]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	b29b      	uxth	r3, r3
 800595c:	2000      	movs	r0, #0
 800595e:	9000      	str	r0, [sp, #0]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f7ff fb31 	bl	8004fc8 <USB_WritePacket>
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3728      	adds	r7, #40	; 0x28
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	1ff80000 	.word	0x1ff80000

08005974 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	b29b      	uxth	r3, r3
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005996:	b480      	push	{r7}
 8005998:	b089      	sub	sp, #36	; 0x24
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	0c9b      	lsrs	r3, r3, #18
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	0fdb      	lsrs	r3, r3, #31
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d104      	bne.n	80059f0 <USB_HC_Halt+0x5a>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e0c8      	b.n	8005b82 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <USB_HC_Halt+0x66>
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d163      	bne.n	8005ac4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a1a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f040 80ab 	bne.w	8005b80 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d133      	bne.n	8005a9e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a54:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a74:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a82:	d81d      	bhi.n	8005ac0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a9a:	d0ec      	beq.n	8005a76 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a9c:	e070      	b.n	8005b80 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	0151      	lsls	r1, r2, #5
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	440a      	add	r2, r1
 8005ab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005abc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005abe:	e05f      	b.n	8005b80 <USB_HC_Halt+0x1ea>
            break;
 8005ac0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ac2:	e05d      	b.n	8005b80 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d133      	bne.n	8005b5c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b32:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b40:	d81d      	bhi.n	8005b7e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b58:	d0ec      	beq.n	8005b34 <USB_HC_Halt+0x19e>
 8005b5a:	e011      	b.n	8005b80 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	e000      	b.n	8005b80 <USB_HC_Halt+0x1ea>
          break;
 8005b7e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3724      	adds	r7, #36	; 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	04da      	lsls	r2, r3, #19
 8005bac:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <USB_DoPing+0x74>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bc0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bd8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005be0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bee:	461a      	mov	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	1ff80000 	.word	0x1ff80000

08005c08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff f911 	bl	8004e44 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c22:	2110      	movs	r1, #16
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff f96b 	bl	8004f00 <USB_FlushTxFifo>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff f997 	bl	8004f68 <USB_FlushRxFifo>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005c44:	2300      	movs	r3, #0
 8005c46:	61bb      	str	r3, [r7, #24]
 8005c48:	e01f      	b.n	8005c8a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7e:	461a      	mov	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	3301      	adds	r3, #1
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b0f      	cmp	r3, #15
 8005c8e:	d9dc      	bls.n	8005c4a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005c90:	2300      	movs	r3, #0
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	e034      	b.n	8005d00 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cbc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	461a      	mov	r2, r3
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cdc:	d80c      	bhi.n	8005cf8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cf4:	d0ec      	beq.n	8005cd0 <USB_StopHost+0xc8>
 8005cf6:	e000      	b.n	8005cfa <USB_StopHost+0xf2>
        break;
 8005cf8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	61bb      	str	r3, [r7, #24]
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	2b0f      	cmp	r3, #15
 8005d04:	d9c7      	bls.n	8005c96 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d1a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff f880 	bl	8004e22 <USB_EnableGlobalInt>

  return ret;
 8005d22:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b089      	sub	sp, #36	; 0x24
 8005d30:	af04      	add	r7, sp, #16
 8005d32:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005d34:	2301      	movs	r3, #1
 8005d36:	2202      	movs	r2, #2
 8005d38:	2102      	movs	r1, #2
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fc66 	bl	800660c <USBH_FindInterface>
 8005d40:	4603      	mov	r3, r0
 8005d42:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	2bff      	cmp	r3, #255	; 0xff
 8005d48:	d002      	beq.n	8005d50 <USBH_CDC_InterfaceInit+0x24>
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d901      	bls.n	8005d54 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d50:	2302      	movs	r3, #2
 8005d52:	e13d      	b.n	8005fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fc3b 	bl	80065d4 <USBH_SelectInterface>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e131      	b.n	8005fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005d72:	2050      	movs	r0, #80	; 0x50
 8005d74:	f002 fafa 	bl	800836c <malloc>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e11f      	b.n	8005fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005d90:	2250      	movs	r2, #80	; 0x50
 8005d92:	2100      	movs	r1, #0
 8005d94:	68b8      	ldr	r0, [r7, #8]
 8005d96:	f002 faf9 	bl	800838c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	211a      	movs	r1, #26
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	4413      	add	r3, r2
 8005da6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	da15      	bge.n	8005dde <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	211a      	movs	r1, #26
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	211a      	movs	r1, #26
 8005dce:	fb01 f303 	mul.w	r3, r1, r3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005dd8:	881a      	ldrh	r2, [r3, #0]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f001 ff2c 	bl	8007c42 <USBH_AllocPipe>
 8005dea:	4603      	mov	r3, r0
 8005dec:	461a      	mov	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	7819      	ldrb	r1, [r3, #0]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	7858      	ldrb	r0, [r3, #1]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	8952      	ldrh	r2, [r2, #10]
 8005e0a:	9202      	str	r2, [sp, #8]
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	9201      	str	r2, [sp, #4]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	4623      	mov	r3, r4
 8005e14:	4602      	mov	r2, r0
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 fee4 	bl	8007be4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2200      	movs	r2, #0
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f002 f9f3 	bl	8008210 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	210a      	movs	r1, #10
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fbeb 	bl	800660c <USBH_FindInterface>
 8005e36:	4603      	mov	r3, r0
 8005e38:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2bff      	cmp	r3, #255	; 0xff
 8005e3e:	d002      	beq.n	8005e46 <USBH_CDC_InterfaceInit+0x11a>
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d901      	bls.n	8005e4a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e46:	2302      	movs	r3, #2
 8005e48:	e0c2      	b.n	8005fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	211a      	movs	r1, #26
 8005e50:	fb01 f303 	mul.w	r3, r1, r3
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	b25b      	sxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	da16      	bge.n	8005e90 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	211a      	movs	r1, #26
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e72:	781a      	ldrb	r2, [r3, #0]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	211a      	movs	r1, #26
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e88:	881a      	ldrh	r2, [r3, #0]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	835a      	strh	r2, [r3, #26]
 8005e8e:	e015      	b.n	8005ebc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	211a      	movs	r1, #26
 8005e96:	fb01 f303 	mul.w	r3, r1, r3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	211a      	movs	r1, #26
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	211a      	movs	r1, #26
 8005ec2:	fb01 f303 	mul.w	r3, r1, r3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b25b      	sxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	da16      	bge.n	8005f02 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	211a      	movs	r1, #26
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ee4:	781a      	ldrb	r2, [r3, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	211a      	movs	r1, #26
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005efa:	881a      	ldrh	r2, [r3, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	835a      	strh	r2, [r3, #26]
 8005f00:	e015      	b.n	8005f2e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	211a      	movs	r1, #26
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	211a      	movs	r1, #26
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f28:	881a      	ldrh	r2, [r3, #0]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	7b9b      	ldrb	r3, [r3, #14]
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 fe84 	bl	8007c42 <USBH_AllocPipe>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	7bdb      	ldrb	r3, [r3, #15]
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 fe7a 	bl	8007c42 <USBH_AllocPipe>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	461a      	mov	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	7b59      	ldrb	r1, [r3, #13]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	7b98      	ldrb	r0, [r3, #14]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	8b12      	ldrh	r2, [r2, #24]
 8005f6e:	9202      	str	r2, [sp, #8]
 8005f70:	2202      	movs	r2, #2
 8005f72:	9201      	str	r2, [sp, #4]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	4623      	mov	r3, r4
 8005f78:	4602      	mov	r2, r0
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 fe32 	bl	8007be4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	7b19      	ldrb	r1, [r3, #12]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	7bd8      	ldrb	r0, [r3, #15]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	8b52      	ldrh	r2, [r2, #26]
 8005f98:	9202      	str	r2, [sp, #8]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	9201      	str	r2, [sp, #4]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	4623      	mov	r3, r4
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 fe1d 	bl	8007be4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	7b5b      	ldrb	r3, [r3, #13]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f002 f928 	bl	8008210 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	7b1b      	ldrb	r3, [r3, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f002 f921 	bl	8008210 <USBH_LL_SetToggle>

  return USBH_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd90      	pop	{r4, r7, pc}

08005fd8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00e      	beq.n	8006010 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 fe12 	bl	8007c22 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fe3d 	bl	8007c84 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	7b1b      	ldrb	r3, [r3, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00e      	beq.n	8006036 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	7b1b      	ldrb	r3, [r3, #12]
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 fdff 	bl	8007c22 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	7b1b      	ldrb	r3, [r3, #12]
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f001 fe2a 	bl	8007c84 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	7b5b      	ldrb	r3, [r3, #13]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00e      	beq.n	800605c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	7b5b      	ldrb	r3, [r3, #13]
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 fdec 	bl	8007c22 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	7b5b      	ldrb	r3, [r3, #13]
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 fe17 	bl	8007c84 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00b      	beq.n	8006080 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	4618      	mov	r0, r3
 8006072:	f002 f983 	bl	800837c <free>
    phost->pActiveClass->pData = 0U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800607c:	2200      	movs	r2, #0
 800607e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3340      	adds	r3, #64	; 0x40
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f8b1 	bl	800620a <GetLineCoding>
 80060a8:	4603      	mov	r3, r0
 80060aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80060ac:	7afb      	ldrb	r3, [r7, #11]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d105      	bne.n	80060be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060b8:	2102      	movs	r1, #2
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80060be:	7afb      	ldrb	r3, [r7, #11]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80060d0:	2301      	movs	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d877      	bhi.n	80061dc <USBH_CDC_Process+0x114>
 80060ec:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <USBH_CDC_Process+0x2c>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006109 	.word	0x08006109
 80060f8:	0800610f 	.word	0x0800610f
 80060fc:	0800613f 	.word	0x0800613f
 8006100:	080061b3 	.word	0x080061b3
 8006104:	080061c1 	.word	0x080061c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]
      break;
 800610c:	e06d      	b.n	80061ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f897 	bl	8006248 <SetLineCoding>
 800611a:	4603      	mov	r3, r0
 800611c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800612c:	e058      	b.n	80061e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d055      	beq.n	80061e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2204      	movs	r2, #4
 8006138:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800613c:	e050      	b.n	80061e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3340      	adds	r3, #64	; 0x40
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f860 	bl	800620a <GetLineCoding>
 800614a:	4603      	mov	r3, r0
 800614c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d126      	bne.n	80061a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006166:	791b      	ldrb	r3, [r3, #4]
 8006168:	429a      	cmp	r2, r3
 800616a:	d13b      	bne.n	80061e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006176:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006178:	429a      	cmp	r2, r3
 800617a:	d133      	bne.n	80061e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006186:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006188:	429a      	cmp	r2, r3
 800618a:	d12b      	bne.n	80061e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006194:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006196:	429a      	cmp	r2, r3
 8006198:	d124      	bne.n	80061e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f958 	bl	8006450 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061a0:	e020      	b.n	80061e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d01d      	beq.n	80061e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2204      	movs	r2, #4
 80061ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80061b0:	e018      	b.n	80061e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f867 	bl	8006286 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f8da 	bl	8006372 <CDC_ProcessReception>
      break;
 80061be:	e014      	b.n	80061ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80061c0:	2100      	movs	r1, #0
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 ffef 	bl	80071a6 <USBH_ClrFeature>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80061da:	e005      	b.n	80061e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80061dc:	bf00      	nop
 80061de:	e004      	b.n	80061ea <USBH_CDC_Process+0x122>
      break;
 80061e0:	bf00      	nop
 80061e2:	e002      	b.n	80061ea <USBH_CDC_Process+0x122>
      break;
 80061e4:	bf00      	nop
 80061e6:	e000      	b.n	80061ea <USBH_CDC_Process+0x122>
      break;
 80061e8:	bf00      	nop

  }

  return status;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	22a1      	movs	r2, #161	; 0xa1
 8006218:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2221      	movs	r2, #33	; 0x21
 800621e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2207      	movs	r2, #7
 8006230:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2207      	movs	r2, #7
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fa81 	bl	8007740 <USBH_CtlReq>
 800623e:	4603      	mov	r3, r0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2221      	movs	r2, #33	; 0x21
 8006256:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2207      	movs	r2, #7
 800626e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2207      	movs	r2, #7
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fa62 	bl	8007740 <USBH_CtlReq>
 800627c:	4603      	mov	r3, r0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b086      	sub	sp, #24
 800628a:	af02      	add	r7, sp, #8
 800628c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006298:	2300      	movs	r3, #0
 800629a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d002      	beq.n	80062ac <CDC_ProcessTransmission+0x26>
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d023      	beq.n	80062f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80062aa:	e05e      	b.n	800636a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	8b12      	ldrh	r2, [r2, #24]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d90b      	bls.n	80062d0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	69d9      	ldr	r1, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8b1a      	ldrh	r2, [r3, #24]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	7b5b      	ldrb	r3, [r3, #13]
 80062c4:	2001      	movs	r0, #1
 80062c6:	9000      	str	r0, [sp, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fc48 	bl	8007b5e <USBH_BulkSendData>
 80062ce:	e00b      	b.n	80062e8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	7b5b      	ldrb	r3, [r3, #13]
 80062de:	2001      	movs	r0, #1
 80062e0:	9000      	str	r0, [sp, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 fc3b 	bl	8007b5e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062f0:	e03b      	b.n	800636a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	7b5b      	ldrb	r3, [r3, #13]
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 ff5f 	bl	80081bc <USBH_LL_GetURBState>
 80062fe:	4603      	mov	r3, r0
 8006300:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006302:	7afb      	ldrb	r3, [r7, #11]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d128      	bne.n	800635a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	8b12      	ldrh	r2, [r2, #24]
 8006310:	4293      	cmp	r3, r2
 8006312:	d90e      	bls.n	8006332 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	8b12      	ldrh	r2, [r2, #24]
 800631c:	1a9a      	subs	r2, r3, r2
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	8b12      	ldrh	r2, [r2, #24]
 800632a:	441a      	add	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	61da      	str	r2, [r3, #28]
 8006330:	e002      	b.n	8006338 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d004      	beq.n	800634a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006348:	e00e      	b.n	8006368 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f868 	bl	8006428 <USBH_CDC_TransmitCallback>
      break;
 8006358:	e006      	b.n	8006368 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800635a:	7afb      	ldrb	r3, [r7, #11]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d103      	bne.n	8006368 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006368:	bf00      	nop
  }
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006384:	2300      	movs	r3, #0
 8006386:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800638e:	2b03      	cmp	r3, #3
 8006390:	d002      	beq.n	8006398 <CDC_ProcessReception+0x26>
 8006392:	2b04      	cmp	r3, #4
 8006394:	d00e      	beq.n	80063b4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006396:	e043      	b.n	8006420 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	6a19      	ldr	r1, [r3, #32]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	8b5a      	ldrh	r2, [r3, #26]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	7b1b      	ldrb	r3, [r3, #12]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 fbff 	bl	8007ba8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2204      	movs	r2, #4
 80063ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80063b2:	e035      	b.n	8006420 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	7b1b      	ldrb	r3, [r3, #12]
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 fefe 	bl	80081bc <USBH_LL_GetURBState>
 80063c0:	4603      	mov	r3, r0
 80063c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80063c4:	7cfb      	ldrb	r3, [r7, #19]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d129      	bne.n	800641e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	7b1b      	ldrb	r3, [r3, #12]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 fe61 	bl	8008098 <USBH_LL_GetLastXferSize>
 80063d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d016      	beq.n	8006410 <CDC_ProcessReception+0x9e>
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	8b5b      	ldrh	r3, [r3, #26]
 80063e6:	461a      	mov	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d910      	bls.n	8006410 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1ad2      	subs	r2, r2, r3
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6a1a      	ldr	r2, [r3, #32]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	441a      	add	r2, r3
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2203      	movs	r2, #3
 800640a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800640e:	e006      	b.n	800641e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f80f 	bl	800643c <USBH_CDC_ReceiveCallback>
      break;
 800641e:	bf00      	nop
  }
}
 8006420:	bf00      	nop
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006478:	2302      	movs	r3, #2
 800647a:	e029      	b.n	80064d0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	79fa      	ldrb	r2, [r7, #7]
 8006480:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 f81f 	bl	80064d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f001 fd31 	bl	8007f30 <USBH_LL_Init>

  return USBH_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	e009      	b.n	80064fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	33e0      	adds	r3, #224	; 0xe0
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	2200      	movs	r2, #0
 80064f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b0f      	cmp	r3, #15
 8006502:	d9f2      	bls.n	80064ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	e009      	b.n	800651e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006514:	2200      	movs	r2, #0
 8006516:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3301      	adds	r3, #1
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006524:	d3f1      	bcc.n	800650a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2240      	movs	r2, #64	; 0x40
 800654a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d016      	beq.n	80065c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10e      	bne.n	80065bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065a4:	1c59      	adds	r1, r3, #1
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	33de      	adds	r3, #222	; 0xde
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
 80065ba:	e004      	b.n	80065c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80065bc:	2302      	movs	r3, #2
 80065be:	73fb      	strb	r3, [r7, #15]
 80065c0:	e001      	b.n	80065c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80065c2:	2302      	movs	r3, #2
 80065c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80065ea:	78fa      	ldrb	r2, [r7, #3]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d204      	bcs.n	80065fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80065f8:	e001      	b.n	80065fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80065fa:	2302      	movs	r3, #2
 80065fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	4608      	mov	r0, r1
 8006616:	4611      	mov	r1, r2
 8006618:	461a      	mov	r2, r3
 800661a:	4603      	mov	r3, r0
 800661c:	70fb      	strb	r3, [r7, #3]
 800661e:	460b      	mov	r3, r1
 8006620:	70bb      	strb	r3, [r7, #2]
 8006622:	4613      	mov	r3, r2
 8006624:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006634:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006636:	e025      	b.n	8006684 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	221a      	movs	r2, #26
 800663c:	fb02 f303 	mul.w	r3, r2, r3
 8006640:	3308      	adds	r3, #8
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	3302      	adds	r3, #2
 8006648:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	795b      	ldrb	r3, [r3, #5]
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	429a      	cmp	r2, r3
 8006652:	d002      	beq.n	800665a <USBH_FindInterface+0x4e>
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	2bff      	cmp	r3, #255	; 0xff
 8006658:	d111      	bne.n	800667e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800665e:	78ba      	ldrb	r2, [r7, #2]
 8006660:	429a      	cmp	r2, r3
 8006662:	d002      	beq.n	800666a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006664:	78bb      	ldrb	r3, [r7, #2]
 8006666:	2bff      	cmp	r3, #255	; 0xff
 8006668:	d109      	bne.n	800667e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800666e:	787a      	ldrb	r2, [r7, #1]
 8006670:	429a      	cmp	r2, r3
 8006672:	d002      	beq.n	800667a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006674:	787b      	ldrb	r3, [r7, #1]
 8006676:	2bff      	cmp	r3, #255	; 0xff
 8006678:	d101      	bne.n	800667e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	e006      	b.n	800668c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	3301      	adds	r3, #1
 8006682:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d9d6      	bls.n	8006638 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800668a:	23ff      	movs	r3, #255	; 0xff
}
 800668c:	4618      	mov	r0, r3
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 fc81 	bl	8007fa8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80066a6:	2101      	movs	r1, #1
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 fd9a 	bl	80081e2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af04      	add	r7, sp, #16
 80066be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80066c0:	2302      	movs	r3, #2
 80066c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d102      	bne.n	80066da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2203      	movs	r2, #3
 80066d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b0b      	cmp	r3, #11
 80066e2:	f200 81be 	bhi.w	8006a62 <USBH_Process+0x3aa>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <USBH_Process+0x34>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	0800671d 	.word	0x0800671d
 80066f0:	0800674f 	.word	0x0800674f
 80066f4:	080067b7 	.word	0x080067b7
 80066f8:	080069fd 	.word	0x080069fd
 80066fc:	08006a63 	.word	0x08006a63
 8006700:	0800685b 	.word	0x0800685b
 8006704:	080069a3 	.word	0x080069a3
 8006708:	08006891 	.word	0x08006891
 800670c:	080068b1 	.word	0x080068b1
 8006710:	080068d1 	.word	0x080068d1
 8006714:	08006915 	.word	0x08006915
 8006718:	080069e5 	.word	0x080069e5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 819e 	beq.w	8006a66 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006730:	20c8      	movs	r0, #200	; 0xc8
 8006732:	f001 fd9d 	bl	8008270 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 fc93 	bl	8008062 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800674c:	e18b      	b.n	8006a66 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006754:	2b01      	cmp	r3, #1
 8006756:	d107      	bne.n	8006768 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006766:	e18d      	b.n	8006a84 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800676e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006772:	d914      	bls.n	800679e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800677a:	3301      	adds	r3, #1
 800677c:	b2da      	uxtb	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800678a:	2b03      	cmp	r3, #3
 800678c:	d903      	bls.n	8006796 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	220d      	movs	r2, #13
 8006792:	701a      	strb	r2, [r3, #0]
      break;
 8006794:	e176      	b.n	8006a84 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	701a      	strb	r2, [r3, #0]
      break;
 800679c:	e172      	b.n	8006a84 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067a4:	f103 020a 	add.w	r2, r3, #10
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80067ae:	200a      	movs	r0, #10
 80067b0:	f001 fd5e 	bl	8008270 <USBH_Delay>
      break;
 80067b4:	e166      	b.n	8006a84 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d005      	beq.n	80067cc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067c6:	2104      	movs	r1, #4
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80067cc:	2064      	movs	r0, #100	; 0x64
 80067ce:	f001 fd4f 	bl	8008270 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 fc1e 	bl	8008014 <USBH_LL_GetSpeed>
 80067d8:	4603      	mov	r3, r0
 80067da:	461a      	mov	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2205      	movs	r2, #5
 80067e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80067e8:	2100      	movs	r1, #0
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 fa29 	bl	8007c42 <USBH_AllocPipe>
 80067f0:	4603      	mov	r3, r0
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80067f8:	2180      	movs	r1, #128	; 0x80
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 fa21 	bl	8007c42 <USBH_AllocPipe>
 8006800:	4603      	mov	r3, r0
 8006802:	461a      	mov	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	7919      	ldrb	r1, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800681c:	b292      	uxth	r2, r2
 800681e:	9202      	str	r2, [sp, #8]
 8006820:	2200      	movs	r2, #0
 8006822:	9201      	str	r2, [sp, #4]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	4603      	mov	r3, r0
 8006828:	2280      	movs	r2, #128	; 0x80
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 f9da 	bl	8007be4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	7959      	ldrb	r1, [r3, #5]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006844:	b292      	uxth	r2, r2
 8006846:	9202      	str	r2, [sp, #8]
 8006848:	2200      	movs	r2, #0
 800684a:	9201      	str	r2, [sp, #4]
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	4603      	mov	r3, r0
 8006850:	2200      	movs	r2, #0
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 f9c6 	bl	8007be4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006858:	e114      	b.n	8006a84 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f918 	bl	8006a90 <USBH_HandleEnum>
 8006860:	4603      	mov	r3, r0
 8006862:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	f040 80fe 	bne.w	8006a6a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800687c:	2b01      	cmp	r3, #1
 800687e:	d103      	bne.n	8006888 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2208      	movs	r2, #8
 8006884:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006886:	e0f0      	b.n	8006a6a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2207      	movs	r2, #7
 800688c:	701a      	strb	r2, [r3, #0]
      break;
 800688e:	e0ec      	b.n	8006a6a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80e9 	beq.w	8006a6e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068a2:	2101      	movs	r1, #1
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2208      	movs	r2, #8
 80068ac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80068ae:	e0de      	b.n	8006a6e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fc2c 	bl	8007118 <USBH_SetCfg>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f040 80d5 	bne.w	8006a72 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2209      	movs	r2, #9
 80068cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068ce:	e0d0      	b.n	8006a72 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d016      	beq.n	800690c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80068de:	2101      	movs	r1, #1
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fc3c 	bl	800715e <USBH_SetFeature>
 80068e6:	4603      	mov	r3, r0
 80068e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d103      	bne.n	80068fa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	220a      	movs	r2, #10
 80068f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068f8:	e0bd      	b.n	8006a76 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b03      	cmp	r3, #3
 8006900:	f040 80b9 	bne.w	8006a76 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	220a      	movs	r2, #10
 8006908:	701a      	strb	r2, [r3, #0]
      break;
 800690a:	e0b4      	b.n	8006a76 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	220a      	movs	r2, #10
 8006910:	701a      	strb	r2, [r3, #0]
      break;
 8006912:	e0b0      	b.n	8006a76 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 80ad 	beq.w	8006a7a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006928:	2300      	movs	r3, #0
 800692a:	73fb      	strb	r3, [r7, #15]
 800692c:	e016      	b.n	800695c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800692e:	7bfa      	ldrb	r2, [r7, #15]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	32de      	adds	r2, #222	; 0xde
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	791a      	ldrb	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006940:	429a      	cmp	r2, r3
 8006942:	d108      	bne.n	8006956 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006944:	7bfa      	ldrb	r2, [r7, #15]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	32de      	adds	r2, #222	; 0xde
 800694a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006954:	e005      	b.n	8006962 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	3301      	adds	r3, #1
 800695a:	73fb      	strb	r3, [r7, #15]
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0e5      	beq.n	800692e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d016      	beq.n	800699a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2206      	movs	r2, #6
 8006982:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800698a:	2103      	movs	r1, #3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006990:	e073      	b.n	8006a7a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	220d      	movs	r2, #13
 8006996:	701a      	strb	r2, [r3, #0]
      break;
 8006998:	e06f      	b.n	8006a7a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	220d      	movs	r2, #13
 800699e:	701a      	strb	r2, [r3, #0]
      break;
 80069a0:	e06b      	b.n	8006a7a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d017      	beq.n	80069dc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
 80069b8:	4603      	mov	r3, r0
 80069ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80069bc:	7bbb      	ldrb	r3, [r7, #14]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	220b      	movs	r2, #11
 80069c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069ca:	e058      	b.n	8006a7e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80069cc:	7bbb      	ldrb	r3, [r7, #14]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d154      	bne.n	8006a7e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	220d      	movs	r2, #13
 80069d8:	701a      	strb	r2, [r3, #0]
      break;
 80069da:	e050      	b.n	8006a7e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	220d      	movs	r2, #13
 80069e0:	701a      	strb	r2, [r3, #0]
      break;
 80069e2:	e04c      	b.n	8006a7e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d049      	beq.n	8006a82 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	4798      	blx	r3
      }
      break;
 80069fa:	e042      	b.n	8006a82 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff fd67 	bl	80064d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a38:	2105      	movs	r1, #5
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d107      	bne.n	8006a5a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff fe20 	bl	8006698 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a58:	e014      	b.n	8006a84 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 faa4 	bl	8007fa8 <USBH_LL_Start>
      break;
 8006a60:	e010      	b.n	8006a84 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006a62:	bf00      	nop
 8006a64:	e00e      	b.n	8006a84 <USBH_Process+0x3cc>
      break;
 8006a66:	bf00      	nop
 8006a68:	e00c      	b.n	8006a84 <USBH_Process+0x3cc>
      break;
 8006a6a:	bf00      	nop
 8006a6c:	e00a      	b.n	8006a84 <USBH_Process+0x3cc>
    break;
 8006a6e:	bf00      	nop
 8006a70:	e008      	b.n	8006a84 <USBH_Process+0x3cc>
      break;
 8006a72:	bf00      	nop
 8006a74:	e006      	b.n	8006a84 <USBH_Process+0x3cc>
      break;
 8006a76:	bf00      	nop
 8006a78:	e004      	b.n	8006a84 <USBH_Process+0x3cc>
      break;
 8006a7a:	bf00      	nop
 8006a7c:	e002      	b.n	8006a84 <USBH_Process+0x3cc>
      break;
 8006a7e:	bf00      	nop
 8006a80:	e000      	b.n	8006a84 <USBH_Process+0x3cc>
      break;
 8006a82:	bf00      	nop
  }
  return USBH_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop

08006a90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af04      	add	r7, sp, #16
 8006a96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b07      	cmp	r3, #7
 8006aa6:	f200 81c1 	bhi.w	8006e2c <USBH_HandleEnum+0x39c>
 8006aaa:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <USBH_HandleEnum+0x20>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006ad1 	.word	0x08006ad1
 8006ab4:	08006b8f 	.word	0x08006b8f
 8006ab8:	08006bf9 	.word	0x08006bf9
 8006abc:	08006c87 	.word	0x08006c87
 8006ac0:	08006cf1 	.word	0x08006cf1
 8006ac4:	08006d61 	.word	0x08006d61
 8006ac8:	08006da7 	.word	0x08006da7
 8006acc:	08006ded 	.word	0x08006ded
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ad0:	2108      	movs	r1, #8
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fa50 	bl	8006f78 <USBH_Get_DevDesc>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d130      	bne.n	8006b44 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	7919      	ldrb	r1, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b06:	b292      	uxth	r2, r2
 8006b08:	9202      	str	r2, [sp, #8]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	9201      	str	r2, [sp, #4]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	4603      	mov	r3, r0
 8006b12:	2280      	movs	r2, #128	; 0x80
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 f865 	bl	8007be4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	7959      	ldrb	r1, [r3, #5]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b2e:	b292      	uxth	r2, r2
 8006b30:	9202      	str	r2, [sp, #8]
 8006b32:	2200      	movs	r2, #0
 8006b34:	9201      	str	r2, [sp, #4]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 f851 	bl	8007be4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006b42:	e175      	b.n	8006e30 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	f040 8172 	bne.w	8006e30 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b52:	3301      	adds	r3, #1
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d903      	bls.n	8006b6e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	220d      	movs	r2, #13
 8006b6a:	701a      	strb	r2, [r3, #0]
      break;
 8006b6c:	e160      	b.n	8006e30 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	795b      	ldrb	r3, [r3, #5]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 f885 	bl	8007c84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	791b      	ldrb	r3, [r3, #4]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f87f 	bl	8007c84 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	701a      	strb	r2, [r3, #0]
      break;
 8006b8c:	e150      	b.n	8006e30 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006b8e:	2112      	movs	r1, #18
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f9f1 	bl	8006f78 <USBH_Get_DevDesc>
 8006b96:	4603      	mov	r3, r0
 8006b98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d103      	bne.n	8006ba8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ba6:	e145      	b.n	8006e34 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	f040 8142 	bne.w	8006e34 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d903      	bls.n	8006bd2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	220d      	movs	r2, #13
 8006bce:	701a      	strb	r2, [r3, #0]
      break;
 8006bd0:	e130      	b.n	8006e34 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	795b      	ldrb	r3, [r3, #5]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 f853 	bl	8007c84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	791b      	ldrb	r3, [r3, #4]
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 f84d 	bl	8007c84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	701a      	strb	r2, [r3, #0]
      break;
 8006bf6:	e11d      	b.n	8006e34 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa68 	bl	80070d0 <USBH_SetAddress>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d132      	bne.n	8006c70 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006c0a:	2002      	movs	r0, #2
 8006c0c:	f001 fb30 	bl	8008270 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2203      	movs	r2, #3
 8006c1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	7919      	ldrb	r1, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c32:	b292      	uxth	r2, r2
 8006c34:	9202      	str	r2, [sp, #8]
 8006c36:	2200      	movs	r2, #0
 8006c38:	9201      	str	r2, [sp, #4]
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2280      	movs	r2, #128	; 0x80
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 ffcf 	bl	8007be4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	7959      	ldrb	r1, [r3, #5]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c5a:	b292      	uxth	r2, r2
 8006c5c:	9202      	str	r2, [sp, #8]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	9201      	str	r2, [sp, #4]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	4603      	mov	r3, r0
 8006c66:	2200      	movs	r2, #0
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 ffbb 	bl	8007be4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c6e:	e0e3      	b.n	8006e38 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	f040 80e0 	bne.w	8006e38 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	220d      	movs	r2, #13
 8006c7c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	705a      	strb	r2, [r3, #1]
      break;
 8006c84:	e0d8      	b.n	8006e38 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006c86:	2109      	movs	r1, #9
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f99d 	bl	8006fc8 <USBH_Get_CfgDesc>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d103      	bne.n	8006ca0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2204      	movs	r2, #4
 8006c9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c9e:	e0cd      	b.n	8006e3c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	f040 80ca 	bne.w	8006e3c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cae:	3301      	adds	r3, #1
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d903      	bls.n	8006cca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	220d      	movs	r2, #13
 8006cc6:	701a      	strb	r2, [r3, #0]
      break;
 8006cc8:	e0b8      	b.n	8006e3c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	795b      	ldrb	r3, [r3, #5]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 ffd7 	bl	8007c84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	791b      	ldrb	r3, [r3, #4]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 ffd1 	bl	8007c84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
      break;
 8006cee:	e0a5      	b.n	8006e3c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f965 	bl	8006fc8 <USBH_Get_CfgDesc>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d103      	bne.n	8006d10 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2205      	movs	r2, #5
 8006d0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d0e:	e097      	b.n	8006e40 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	f040 8094 	bne.w	8006e40 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d1e:	3301      	adds	r3, #1
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d903      	bls.n	8006d3a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	220d      	movs	r2, #13
 8006d36:	701a      	strb	r2, [r3, #0]
      break;
 8006d38:	e082      	b.n	8006e40 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	795b      	ldrb	r3, [r3, #5]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 ff9f 	bl	8007c84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	791b      	ldrb	r3, [r3, #4]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 ff99 	bl	8007c84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	701a      	strb	r2, [r3, #0]
      break;
 8006d5e:	e06f      	b.n	8006e40 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d019      	beq.n	8006d9e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006d76:	23ff      	movs	r3, #255	; 0xff
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f949 	bl	8007010 <USBH_Get_StringDesc>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d103      	bne.n	8006d90 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2206      	movs	r2, #6
 8006d8c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d8e:	e059      	b.n	8006e44 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d156      	bne.n	8006e44 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2206      	movs	r2, #6
 8006d9a:	705a      	strb	r2, [r3, #1]
      break;
 8006d9c:	e052      	b.n	8006e44 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2206      	movs	r2, #6
 8006da2:	705a      	strb	r2, [r3, #1]
      break;
 8006da4:	e04e      	b.n	8006e44 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d019      	beq.n	8006de4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006dbc:	23ff      	movs	r3, #255	; 0xff
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f926 	bl	8007010 <USBH_Get_StringDesc>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d103      	bne.n	8006dd6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006dd4:	e038      	b.n	8006e48 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d135      	bne.n	8006e48 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2207      	movs	r2, #7
 8006de0:	705a      	strb	r2, [r3, #1]
      break;
 8006de2:	e031      	b.n	8006e48 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2207      	movs	r2, #7
 8006de8:	705a      	strb	r2, [r3, #1]
      break;
 8006dea:	e02d      	b.n	8006e48 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d017      	beq.n	8006e26 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e02:	23ff      	movs	r3, #255	; 0xff
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f903 	bl	8007010 <USBH_Get_StringDesc>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006e18:	e018      	b.n	8006e4c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d115      	bne.n	8006e4c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]
      break;
 8006e24:	e012      	b.n	8006e4c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2a:	e00f      	b.n	8006e4c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006e2c:	bf00      	nop
 8006e2e:	e00e      	b.n	8006e4e <USBH_HandleEnum+0x3be>
      break;
 8006e30:	bf00      	nop
 8006e32:	e00c      	b.n	8006e4e <USBH_HandleEnum+0x3be>
      break;
 8006e34:	bf00      	nop
 8006e36:	e00a      	b.n	8006e4e <USBH_HandleEnum+0x3be>
      break;
 8006e38:	bf00      	nop
 8006e3a:	e008      	b.n	8006e4e <USBH_HandleEnum+0x3be>
      break;
 8006e3c:	bf00      	nop
 8006e3e:	e006      	b.n	8006e4e <USBH_HandleEnum+0x3be>
      break;
 8006e40:	bf00      	nop
 8006e42:	e004      	b.n	8006e4e <USBH_HandleEnum+0x3be>
      break;
 8006e44:	bf00      	nop
 8006e46:	e002      	b.n	8006e4e <USBH_HandleEnum+0x3be>
      break;
 8006e48:	bf00      	nop
 8006e4a:	e000      	b.n	8006e4e <USBH_HandleEnum+0x3be>
      break;
 8006e4c:	bf00      	nop
  }
  return Status;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f804 	bl	8006e9a <USBH_HandleSof>
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b0b      	cmp	r3, #11
 8006eaa:	d10a      	bne.n	8006ec2 <USBH_HandleSof+0x28>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006eda:	bf00      	nop
}
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006ef6:	bf00      	nop
}
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 f844 	bl	8007fde <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	791b      	ldrb	r3, [r3, #4]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fe91 	bl	8007c84 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	795b      	ldrb	r3, [r3, #5]
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fe8b 	bl	8007c84 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4613      	mov	r3, r2
 8006f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f96:	2100      	movs	r1, #0
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f864 	bl	8007066 <USBH_GetDescriptor>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	b292      	uxth	r2, r2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	f000 f918 	bl	80071ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	331c      	adds	r3, #28
 8006fd8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006fda:	887b      	ldrh	r3, [r7, #2]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f83d 	bl	8007066 <USBH_GetDescriptor>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d107      	bne.n	8007006 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006ff6:	887b      	ldrh	r3, [r7, #2]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68b9      	ldr	r1, [r7, #8]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f987 	bl	8007310 <USBH_ParseCfgDesc>
 8007002:	4603      	mov	r3, r0
 8007004:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af02      	add	r7, sp, #8
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	461a      	mov	r2, r3
 800701c:	460b      	mov	r3, r1
 800701e:	72fb      	strb	r3, [r7, #11]
 8007020:	4613      	mov	r3, r2
 8007022:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007024:	7afb      	ldrb	r3, [r7, #11]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800702c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007034:	893b      	ldrh	r3, [r7, #8]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	460b      	mov	r3, r1
 800703a:	2100      	movs	r1, #0
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 f812 	bl	8007066 <USBH_GetDescriptor>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007046:	7dfb      	ldrb	r3, [r7, #23]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d107      	bne.n	800705c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007052:	893a      	ldrh	r2, [r7, #8]
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fb24 	bl	80076a4 <USBH_ParseStringDesc>
  }

  return status;
 800705c:	7dfb      	ldrb	r3, [r7, #23]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	607b      	str	r3, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	72fb      	strb	r3, [r7, #11]
 8007074:	4613      	mov	r3, r2
 8007076:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	789b      	ldrb	r3, [r3, #2]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d11c      	bne.n	80070ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007080:	7afb      	ldrb	r3, [r7, #11]
 8007082:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007086:	b2da      	uxtb	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2206      	movs	r2, #6
 8007090:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	893a      	ldrh	r2, [r7, #8]
 8007096:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007098:	893b      	ldrh	r3, [r7, #8]
 800709a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800709e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070a2:	d104      	bne.n	80070ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f240 4209 	movw	r2, #1033	; 0x409
 80070aa:	829a      	strh	r2, [r3, #20]
 80070ac:	e002      	b.n	80070b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8b3a      	ldrh	r2, [r7, #24]
 80070b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80070ba:	8b3b      	ldrh	r3, [r7, #24]
 80070bc:	461a      	mov	r2, r3
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fb3d 	bl	8007740 <USBH_CtlReq>
 80070c6:	4603      	mov	r3, r0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	789b      	ldrb	r3, [r3, #2]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d10f      	bne.n	8007104 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2205      	movs	r2, #5
 80070ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007104:	2200      	movs	r2, #0
 8007106:	2100      	movs	r1, #0
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fb19 	bl	8007740 <USBH_CtlReq>
 800710e:	4603      	mov	r3, r0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	789b      	ldrb	r3, [r3, #2]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d10e      	bne.n	800714a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2209      	movs	r2, #9
 8007136:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	887a      	ldrh	r2, [r7, #2]
 800713c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800714a:	2200      	movs	r2, #0
 800714c:	2100      	movs	r1, #0
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 faf6 	bl	8007740 <USBH_CtlReq>
 8007154:	4603      	mov	r3, r0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	789b      	ldrb	r3, [r3, #2]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d10f      	bne.n	8007192 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2203      	movs	r2, #3
 800717c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	b29a      	uxth	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007192:	2200      	movs	r2, #0
 8007194:	2100      	movs	r1, #0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fad2 	bl	8007740 <USBH_CtlReq>
 800719c:	4603      	mov	r3, r0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	460b      	mov	r3, r1
 80071b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	789b      	ldrb	r3, [r3, #2]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d10f      	bne.n	80071da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80071da:	2200      	movs	r2, #0
 80071dc:	2100      	movs	r1, #0
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 faae 	bl	8007740 <USBH_CtlReq>
 80071e4:	4603      	mov	r3, r0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	4613      	mov	r3, r2
 80071fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	781a      	ldrb	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	785a      	ldrb	r2, [r3, #1]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	3302      	adds	r3, #2
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	b29a      	uxth	r2, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	3303      	adds	r3, #3
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	b29b      	uxth	r3, r3
 8007220:	4313      	orrs	r3, r2
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	791a      	ldrb	r2, [r3, #4]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	795a      	ldrb	r2, [r3, #5]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	799a      	ldrb	r2, [r3, #6]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	79da      	ldrb	r2, [r3, #7]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	79db      	ldrb	r3, [r3, #7]
 800724c:	2b20      	cmp	r3, #32
 800724e:	dc11      	bgt.n	8007274 <USBH_ParseDevDesc+0x86>
 8007250:	2b08      	cmp	r3, #8
 8007252:	db16      	blt.n	8007282 <USBH_ParseDevDesc+0x94>
 8007254:	3b08      	subs	r3, #8
 8007256:	2201      	movs	r2, #1
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007264:	2b00      	cmp	r3, #0
 8007266:	bf14      	ite	ne
 8007268:	2301      	movne	r3, #1
 800726a:	2300      	moveq	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d102      	bne.n	8007278 <USBH_ParseDevDesc+0x8a>
 8007272:	e006      	b.n	8007282 <USBH_ParseDevDesc+0x94>
 8007274:	2b40      	cmp	r3, #64	; 0x40
 8007276:	d104      	bne.n	8007282 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	79da      	ldrb	r2, [r3, #7]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	71da      	strb	r2, [r3, #7]
      break;
 8007280:	e003      	b.n	800728a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2240      	movs	r2, #64	; 0x40
 8007286:	71da      	strb	r2, [r3, #7]
      break;
 8007288:	bf00      	nop
  }

  if (length > 8U)
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	2b08      	cmp	r3, #8
 800728e:	d939      	bls.n	8007304 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	3308      	adds	r3, #8
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	b29a      	uxth	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	3309      	adds	r3, #9
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	4313      	orrs	r3, r2
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	330a      	adds	r3, #10
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	330b      	adds	r3, #11
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	b29b      	uxth	r3, r3
 80072c0:	4313      	orrs	r3, r2
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	330c      	adds	r3, #12
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	330d      	adds	r3, #13
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	b29b      	uxth	r3, r3
 80072dc:	4313      	orrs	r3, r2
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	7b9a      	ldrb	r2, [r3, #14]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	7bda      	ldrb	r2, [r3, #15]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	7c1a      	ldrb	r2, [r3, #16]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	7c5a      	ldrb	r2, [r3, #17]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	745a      	strb	r2, [r3, #17]
  }
}
 8007304:	bf00      	nop
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08c      	sub	sp, #48	; 0x30
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007324:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	781a      	ldrb	r2, [r3, #0]
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	785a      	ldrb	r2, [r3, #1]
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	3302      	adds	r3, #2
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	b29a      	uxth	r2, r3
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	3303      	adds	r3, #3
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	b29b      	uxth	r3, r3
 8007364:	4313      	orrs	r3, r2
 8007366:	b29b      	uxth	r3, r3
 8007368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800736c:	bf28      	it	cs
 800736e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007372:	b29a      	uxth	r2, r3
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	791a      	ldrb	r2, [r3, #4]
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	795a      	ldrb	r2, [r3, #5]
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	799a      	ldrb	r2, [r3, #6]
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	79da      	ldrb	r2, [r3, #7]
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	7a1a      	ldrb	r2, [r3, #8]
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d002      	beq.n	80073ae <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	2209      	movs	r2, #9
 80073ac:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80073ae:	88fb      	ldrh	r3, [r7, #6]
 80073b0:	2b09      	cmp	r3, #9
 80073b2:	f240 809d 	bls.w	80074f0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80073b6:	2309      	movs	r3, #9
 80073b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80073be:	e081      	b.n	80074c4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80073c0:	f107 0316 	add.w	r3, r7, #22
 80073c4:	4619      	mov	r1, r3
 80073c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c8:	f000 f99f 	bl	800770a <USBH_GetNextDesc>
 80073cc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d176      	bne.n	80074c4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b09      	cmp	r3, #9
 80073dc:	d002      	beq.n	80073e4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	2209      	movs	r2, #9
 80073e2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80073e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e8:	221a      	movs	r2, #26
 80073ea:	fb02 f303 	mul.w	r3, r2, r3
 80073ee:	3308      	adds	r3, #8
 80073f0:	6a3a      	ldr	r2, [r7, #32]
 80073f2:	4413      	add	r3, r2
 80073f4:	3302      	adds	r3, #2
 80073f6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80073f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073fa:	69f8      	ldr	r0, [r7, #28]
 80073fc:	f000 f87e 	bl	80074fc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800740a:	e043      	b.n	8007494 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800740c:	f107 0316 	add.w	r3, r7, #22
 8007410:	4619      	mov	r1, r3
 8007412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007414:	f000 f979 	bl	800770a <USBH_GetNextDesc>
 8007418:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	2b05      	cmp	r3, #5
 8007420:	d138      	bne.n	8007494 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	795b      	ldrb	r3, [r3, #5]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d10f      	bne.n	800744a <USBH_ParseCfgDesc+0x13a>
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	799b      	ldrb	r3, [r3, #6]
 800742e:	2b02      	cmp	r3, #2
 8007430:	d10b      	bne.n	800744a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	79db      	ldrb	r3, [r3, #7]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10f      	bne.n	800745a <USBH_ParseCfgDesc+0x14a>
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b09      	cmp	r3, #9
 8007440:	d00b      	beq.n	800745a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	2209      	movs	r2, #9
 8007446:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007448:	e007      	b.n	800745a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	2b07      	cmp	r3, #7
 8007450:	d004      	beq.n	800745c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	2207      	movs	r2, #7
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	e000      	b.n	800745c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800745a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800745c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007460:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007464:	3201      	adds	r2, #1
 8007466:	00d2      	lsls	r2, r2, #3
 8007468:	211a      	movs	r1, #26
 800746a:	fb01 f303 	mul.w	r3, r1, r3
 800746e:	4413      	add	r3, r2
 8007470:	3308      	adds	r3, #8
 8007472:	6a3a      	ldr	r2, [r7, #32]
 8007474:	4413      	add	r3, r2
 8007476:	3304      	adds	r3, #4
 8007478:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800747a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800747c:	69b9      	ldr	r1, [r7, #24]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 f86b 	bl	800755a <USBH_ParseEPDesc>
 8007484:	4603      	mov	r3, r0
 8007486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800748a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800748e:	3301      	adds	r3, #1
 8007490:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	791b      	ldrb	r3, [r3, #4]
 8007498:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800749c:	429a      	cmp	r2, r3
 800749e:	d204      	bcs.n	80074aa <USBH_ParseCfgDesc+0x19a>
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	885a      	ldrh	r2, [r3, #2]
 80074a4:	8afb      	ldrh	r3, [r7, #22]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d8b0      	bhi.n	800740c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	791b      	ldrb	r3, [r3, #4]
 80074ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d201      	bcs.n	80074ba <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e01c      	b.n	80074f4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80074ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074be:	3301      	adds	r3, #1
 80074c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d805      	bhi.n	80074d8 <USBH_ParseCfgDesc+0x1c8>
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	885a      	ldrh	r2, [r3, #2]
 80074d0:	8afb      	ldrh	r3, [r7, #22]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	f63f af74 	bhi.w	80073c0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	791b      	ldrb	r3, [r3, #4]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	bf28      	it	cs
 80074e0:	2302      	movcs	r3, #2
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d201      	bcs.n	80074f0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e001      	b.n	80074f4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80074f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3730      	adds	r7, #48	; 0x30
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781a      	ldrb	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	785a      	ldrb	r2, [r3, #1]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	789a      	ldrb	r2, [r3, #2]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	78da      	ldrb	r2, [r3, #3]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	791a      	ldrb	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	795a      	ldrb	r2, [r3, #5]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	799a      	ldrb	r2, [r3, #6]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	79da      	ldrb	r2, [r3, #7]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	7a1a      	ldrb	r2, [r3, #8]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	721a      	strb	r2, [r3, #8]
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800755a:	b480      	push	{r7}
 800755c:	b087      	sub	sp, #28
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	781a      	ldrb	r2, [r3, #0]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	785a      	ldrb	r2, [r3, #1]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	789a      	ldrb	r2, [r3, #2]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	78da      	ldrb	r2, [r3, #3]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3304      	adds	r3, #4
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	b29a      	uxth	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3305      	adds	r3, #5
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	b29b      	uxth	r3, r3
 800759e:	4313      	orrs	r3, r2
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	799a      	ldrb	r2, [r3, #6]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	889b      	ldrh	r3, [r3, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80075b6:	2303      	movs	r3, #3
 80075b8:	75fb      	strb	r3, [r7, #23]
 80075ba:	e033      	b.n	8007624 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	889b      	ldrh	r3, [r3, #4]
 80075c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80075c4:	f023 0307 	bic.w	r3, r3, #7
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	889b      	ldrh	r3, [r3, #4]
 80075d2:	b21a      	sxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3304      	adds	r3, #4
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	b299      	uxth	r1, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3305      	adds	r3, #5
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	430b      	orrs	r3, r1
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d110      	bne.n	8007616 <USBH_ParseEPDesc+0xbc>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	b299      	uxth	r1, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3305      	adds	r3, #5
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	021b      	lsls	r3, r3, #8
 8007606:	b29b      	uxth	r3, r3
 8007608:	430b      	orrs	r3, r1
 800760a:	b29b      	uxth	r3, r3
 800760c:	b21b      	sxth	r3, r3
 800760e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007612:	b21b      	sxth	r3, r3
 8007614:	e001      	b.n	800761a <USBH_ParseEPDesc+0xc0>
 8007616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800761a:	4313      	orrs	r3, r2
 800761c:	b21b      	sxth	r3, r3
 800761e:	b29a      	uxth	r2, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800762a:	2b00      	cmp	r3, #0
 800762c:	d116      	bne.n	800765c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	78db      	ldrb	r3, [r3, #3]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b01      	cmp	r3, #1
 8007638:	d005      	beq.n	8007646 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	78db      	ldrb	r3, [r3, #3]
 800763e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007642:	2b03      	cmp	r3, #3
 8007644:	d127      	bne.n	8007696 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	799b      	ldrb	r3, [r3, #6]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <USBH_ParseEPDesc+0xfc>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	799b      	ldrb	r3, [r3, #6]
 8007652:	2b10      	cmp	r3, #16
 8007654:	d91f      	bls.n	8007696 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007656:	2303      	movs	r3, #3
 8007658:	75fb      	strb	r3, [r7, #23]
 800765a:	e01c      	b.n	8007696 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	78db      	ldrb	r3, [r3, #3]
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	2b01      	cmp	r3, #1
 8007666:	d10a      	bne.n	800767e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	799b      	ldrb	r3, [r3, #6]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d003      	beq.n	8007678 <USBH_ParseEPDesc+0x11e>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	799b      	ldrb	r3, [r3, #6]
 8007674:	2b10      	cmp	r3, #16
 8007676:	d90e      	bls.n	8007696 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007678:	2303      	movs	r3, #3
 800767a:	75fb      	strb	r3, [r7, #23]
 800767c:	e00b      	b.n	8007696 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	78db      	ldrb	r3, [r3, #3]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	2b03      	cmp	r3, #3
 8007688:	d105      	bne.n	8007696 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	799b      	ldrb	r3, [r3, #6]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007692:	2303      	movs	r3, #3
 8007694:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
}
 8007698:	4618      	mov	r0, r3
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	4613      	mov	r3, r2
 80076b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d120      	bne.n	80076fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	1e9a      	subs	r2, r3, #2
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	4293      	cmp	r3, r2
 80076c6:	bf28      	it	cs
 80076c8:	4613      	movcs	r3, r2
 80076ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3302      	adds	r3, #2
 80076d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80076d2:	2300      	movs	r3, #0
 80076d4:	82fb      	strh	r3, [r7, #22]
 80076d6:	e00b      	b.n	80076f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80076d8:	8afb      	ldrh	r3, [r7, #22]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4413      	add	r3, r2
 80076de:	781a      	ldrb	r2, [r3, #0]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	3301      	adds	r3, #1
 80076e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80076ea:	8afb      	ldrh	r3, [r7, #22]
 80076ec:	3302      	adds	r3, #2
 80076ee:	82fb      	strh	r3, [r7, #22]
 80076f0:	8afa      	ldrh	r2, [r7, #22]
 80076f2:	8abb      	ldrh	r3, [r7, #20]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d3ef      	bcc.n	80076d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
  }
}
 80076fe:	bf00      	nop
 8007700:	371c      	adds	r7, #28
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800770a:	b480      	push	{r7}
 800770c:	b085      	sub	sp, #20
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	881a      	ldrh	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b29b      	uxth	r3, r3
 800771e:	4413      	add	r3, r2
 8007720:	b29a      	uxth	r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4413      	add	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007732:	68fb      	ldr	r3, [r7, #12]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800774e:	2301      	movs	r3, #1
 8007750:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	789b      	ldrb	r3, [r3, #2]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d002      	beq.n	8007760 <USBH_CtlReq+0x20>
 800775a:	2b02      	cmp	r3, #2
 800775c:	d00f      	beq.n	800777e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800775e:	e027      	b.n	80077b0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	88fa      	ldrh	r2, [r7, #6]
 800776a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2202      	movs	r2, #2
 8007776:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007778:	2301      	movs	r3, #1
 800777a:	75fb      	strb	r3, [r7, #23]
      break;
 800777c:	e018      	b.n	80077b0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 f81c 	bl	80077bc <USBH_HandleControl>
 8007784:	4603      	mov	r3, r0
 8007786:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <USBH_CtlReq+0x54>
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	2b03      	cmp	r3, #3
 8007792:	d106      	bne.n	80077a2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2201      	movs	r2, #1
 8007798:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	761a      	strb	r2, [r3, #24]
      break;
 80077a0:	e005      	b.n	80077ae <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d102      	bne.n	80077ae <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	709a      	strb	r2, [r3, #2]
      break;
 80077ae:	bf00      	nop
  }
  return status;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7e1b      	ldrb	r3, [r3, #24]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	2b0a      	cmp	r3, #10
 80077d4:	f200 8156 	bhi.w	8007a84 <USBH_HandleControl+0x2c8>
 80077d8:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <USBH_HandleControl+0x24>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	0800780d 	.word	0x0800780d
 80077e4:	08007827 	.word	0x08007827
 80077e8:	08007891 	.word	0x08007891
 80077ec:	080078b7 	.word	0x080078b7
 80077f0:	080078ef 	.word	0x080078ef
 80077f4:	08007919 	.word	0x08007919
 80077f8:	0800796b 	.word	0x0800796b
 80077fc:	0800798d 	.word	0x0800798d
 8007800:	080079c9 	.word	0x080079c9
 8007804:	080079ef 	.word	0x080079ef
 8007808:	08007a2d 	.word	0x08007a2d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f103 0110 	add.w	r1, r3, #16
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	795b      	ldrb	r3, [r3, #5]
 8007816:	461a      	mov	r2, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f943 	bl	8007aa4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2202      	movs	r2, #2
 8007822:	761a      	strb	r2, [r3, #24]
      break;
 8007824:	e139      	b.n	8007a9a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	795b      	ldrb	r3, [r3, #5]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fcc5 	bl	80081bc <USBH_LL_GetURBState>
 8007832:	4603      	mov	r3, r0
 8007834:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d11e      	bne.n	800787a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7c1b      	ldrb	r3, [r3, #16]
 8007840:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007844:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8adb      	ldrh	r3, [r3, #22]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800784e:	7b7b      	ldrb	r3, [r7, #13]
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d103      	bne.n	800785c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2203      	movs	r2, #3
 8007858:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800785a:	e115      	b.n	8007a88 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2205      	movs	r2, #5
 8007860:	761a      	strb	r2, [r3, #24]
      break;
 8007862:	e111      	b.n	8007a88 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007864:	7b7b      	ldrb	r3, [r7, #13]
 8007866:	2b80      	cmp	r3, #128	; 0x80
 8007868:	d103      	bne.n	8007872 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2209      	movs	r2, #9
 800786e:	761a      	strb	r2, [r3, #24]
      break;
 8007870:	e10a      	b.n	8007a88 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2207      	movs	r2, #7
 8007876:	761a      	strb	r2, [r3, #24]
      break;
 8007878:	e106      	b.n	8007a88 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b04      	cmp	r3, #4
 800787e:	d003      	beq.n	8007888 <USBH_HandleControl+0xcc>
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b02      	cmp	r3, #2
 8007884:	f040 8100 	bne.w	8007a88 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	220b      	movs	r2, #11
 800788c:	761a      	strb	r2, [r3, #24]
      break;
 800788e:	e0fb      	b.n	8007a88 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007896:	b29a      	uxth	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6899      	ldr	r1, [r3, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	899a      	ldrh	r2, [r3, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	791b      	ldrb	r3, [r3, #4]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f93a 	bl	8007b22 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2204      	movs	r2, #4
 80078b2:	761a      	strb	r2, [r3, #24]
      break;
 80078b4:	e0f1      	b.n	8007a9a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	791b      	ldrb	r3, [r3, #4]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc7d 	bl	80081bc <USBH_LL_GetURBState>
 80078c2:	4603      	mov	r3, r0
 80078c4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d102      	bne.n	80078d2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2209      	movs	r2, #9
 80078d0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b05      	cmp	r3, #5
 80078d6:	d102      	bne.n	80078de <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80078d8:	2303      	movs	r3, #3
 80078da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078dc:	e0d6      	b.n	8007a8c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	f040 80d3 	bne.w	8007a8c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	220b      	movs	r2, #11
 80078ea:	761a      	strb	r2, [r3, #24]
      break;
 80078ec:	e0ce      	b.n	8007a8c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6899      	ldr	r1, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	899a      	ldrh	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	795b      	ldrb	r3, [r3, #5]
 80078fa:	2001      	movs	r0, #1
 80078fc:	9000      	str	r0, [sp, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f8ea 	bl	8007ad8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2206      	movs	r2, #6
 8007914:	761a      	strb	r2, [r3, #24]
      break;
 8007916:	e0c0      	b.n	8007a9a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	795b      	ldrb	r3, [r3, #5]
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fc4c 	bl	80081bc <USBH_LL_GetURBState>
 8007924:	4603      	mov	r3, r0
 8007926:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d103      	bne.n	8007936 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2207      	movs	r2, #7
 8007932:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007934:	e0ac      	b.n	8007a90 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	2b05      	cmp	r3, #5
 800793a:	d105      	bne.n	8007948 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	220c      	movs	r2, #12
 8007940:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007942:	2303      	movs	r3, #3
 8007944:	73fb      	strb	r3, [r7, #15]
      break;
 8007946:	e0a3      	b.n	8007a90 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b02      	cmp	r3, #2
 800794c:	d103      	bne.n	8007956 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2205      	movs	r2, #5
 8007952:	761a      	strb	r2, [r3, #24]
      break;
 8007954:	e09c      	b.n	8007a90 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	2b04      	cmp	r3, #4
 800795a:	f040 8099 	bne.w	8007a90 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	220b      	movs	r2, #11
 8007962:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007964:	2302      	movs	r3, #2
 8007966:	73fb      	strb	r3, [r7, #15]
      break;
 8007968:	e092      	b.n	8007a90 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	791b      	ldrb	r3, [r3, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	2100      	movs	r1, #0
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f8d5 	bl	8007b22 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800797e:	b29a      	uxth	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2208      	movs	r2, #8
 8007988:	761a      	strb	r2, [r3, #24]

      break;
 800798a:	e086      	b.n	8007a9a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	791b      	ldrb	r3, [r3, #4]
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fc12 	bl	80081bc <USBH_LL_GetURBState>
 8007998:	4603      	mov	r3, r0
 800799a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d105      	bne.n	80079ae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	220d      	movs	r2, #13
 80079a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079ac:	e072      	b.n	8007a94 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d103      	bne.n	80079bc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	220b      	movs	r2, #11
 80079b8:	761a      	strb	r2, [r3, #24]
      break;
 80079ba:	e06b      	b.n	8007a94 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d168      	bne.n	8007a94 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80079c2:	2303      	movs	r3, #3
 80079c4:	73fb      	strb	r3, [r7, #15]
      break;
 80079c6:	e065      	b.n	8007a94 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	795b      	ldrb	r3, [r3, #5]
 80079cc:	2201      	movs	r2, #1
 80079ce:	9200      	str	r2, [sp, #0]
 80079d0:	2200      	movs	r2, #0
 80079d2:	2100      	movs	r1, #0
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f87f 	bl	8007ad8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	220a      	movs	r2, #10
 80079ea:	761a      	strb	r2, [r3, #24]
      break;
 80079ec:	e055      	b.n	8007a9a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	795b      	ldrb	r3, [r3, #5]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fbe1 	bl	80081bc <USBH_LL_GetURBState>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d105      	bne.n	8007a10 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	220d      	movs	r2, #13
 8007a0c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a0e:	e043      	b.n	8007a98 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d103      	bne.n	8007a1e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2209      	movs	r2, #9
 8007a1a:	761a      	strb	r2, [r3, #24]
      break;
 8007a1c:	e03c      	b.n	8007a98 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d139      	bne.n	8007a98 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	220b      	movs	r2, #11
 8007a28:	761a      	strb	r2, [r3, #24]
      break;
 8007a2a:	e035      	b.n	8007a98 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	7e5b      	ldrb	r3, [r3, #25]
 8007a30:	3301      	adds	r3, #1
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	765a      	strb	r2, [r3, #25]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	7e5b      	ldrb	r3, [r3, #25]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d806      	bhi.n	8007a4e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007a4c:	e025      	b.n	8007a9a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a54:	2106      	movs	r1, #6
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	795b      	ldrb	r3, [r3, #5]
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f90c 	bl	8007c84 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	791b      	ldrb	r3, [r3, #4]
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f906 	bl	8007c84 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	73fb      	strb	r3, [r7, #15]
      break;
 8007a82:	e00a      	b.n	8007a9a <USBH_HandleControl+0x2de>

    default:
      break;
 8007a84:	bf00      	nop
 8007a86:	e008      	b.n	8007a9a <USBH_HandleControl+0x2de>
      break;
 8007a88:	bf00      	nop
 8007a8a:	e006      	b.n	8007a9a <USBH_HandleControl+0x2de>
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e004      	b.n	8007a9a <USBH_HandleControl+0x2de>
      break;
 8007a90:	bf00      	nop
 8007a92:	e002      	b.n	8007a9a <USBH_HandleControl+0x2de>
      break;
 8007a94:	bf00      	nop
 8007a96:	e000      	b.n	8007a9a <USBH_HandleControl+0x2de>
      break;
 8007a98:	bf00      	nop
  }

  return status;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ab2:	79f9      	ldrb	r1, [r7, #7]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	2308      	movs	r3, #8
 8007aba:	9302      	str	r3, [sp, #8]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fb46 	bl	800815a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af04      	add	r7, sp, #16
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	80fb      	strh	r3, [r7, #6]
 8007aea:	4613      	mov	r3, r2
 8007aec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007afc:	7979      	ldrb	r1, [r7, #5]
 8007afe:	7e3b      	ldrb	r3, [r7, #24]
 8007b00:	9303      	str	r3, [sp, #12]
 8007b02:	88fb      	ldrh	r3, [r7, #6]
 8007b04:	9302      	str	r3, [sp, #8]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2200      	movs	r2, #0
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fb21 	bl	800815a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b088      	sub	sp, #32
 8007b26:	af04      	add	r7, sp, #16
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	461a      	mov	r2, r3
 8007b30:	460b      	mov	r3, r1
 8007b32:	80fb      	strh	r3, [r7, #6]
 8007b34:	4613      	mov	r3, r2
 8007b36:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b38:	7979      	ldrb	r1, [r7, #5]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	9303      	str	r3, [sp, #12]
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	9302      	str	r3, [sp, #8]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	2301      	movs	r3, #1
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 fb03 	bl	800815a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b54:	2300      	movs	r3, #0

}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b088      	sub	sp, #32
 8007b62:	af04      	add	r7, sp, #16
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	4611      	mov	r1, r2
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	80fb      	strh	r3, [r7, #6]
 8007b70:	4613      	mov	r3, r2
 8007b72:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b82:	7979      	ldrb	r1, [r7, #5]
 8007b84:	7e3b      	ldrb	r3, [r7, #24]
 8007b86:	9303      	str	r3, [sp, #12]
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	9302      	str	r3, [sp, #8]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	2301      	movs	r3, #1
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	2302      	movs	r3, #2
 8007b96:	2200      	movs	r2, #0
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fade 	bl	800815a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af04      	add	r7, sp, #16
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	80fb      	strh	r3, [r7, #6]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bbe:	7979      	ldrb	r1, [r7, #5]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	9303      	str	r3, [sp, #12]
 8007bc4:	88fb      	ldrh	r3, [r7, #6]
 8007bc6:	9302      	str	r3, [sp, #8]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	9301      	str	r3, [sp, #4]
 8007bcc:	2301      	movs	r3, #1
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 fac0 	bl	800815a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af04      	add	r7, sp, #16
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	4608      	mov	r0, r1
 8007bee:	4611      	mov	r1, r2
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	70fb      	strb	r3, [r7, #3]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	70bb      	strb	r3, [r7, #2]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007bfe:	7878      	ldrb	r0, [r7, #1]
 8007c00:	78ba      	ldrb	r2, [r7, #2]
 8007c02:	78f9      	ldrb	r1, [r7, #3]
 8007c04:	8b3b      	ldrh	r3, [r7, #24]
 8007c06:	9302      	str	r3, [sp, #8]
 8007c08:	7d3b      	ldrb	r3, [r7, #20]
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	7c3b      	ldrb	r3, [r7, #16]
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	4603      	mov	r3, r0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa53 	bl	80080be <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa72 	bl	800811c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f836 	bl	8007cc0 <USBH_GetFreePipe>
 8007c54:	4603      	mov	r3, r0
 8007c56:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007c58:	89fb      	ldrh	r3, [r7, #14]
 8007c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00a      	beq.n	8007c78 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007c62:	78fa      	ldrb	r2, [r7, #3]
 8007c64:	89fb      	ldrh	r3, [r7, #14]
 8007c66:	f003 030f 	and.w	r3, r3, #15
 8007c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	33e0      	adds	r3, #224	; 0xe0
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	440b      	add	r3, r1
 8007c76:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007c78:	89fb      	ldrh	r3, [r7, #14]
 8007c7a:	b2db      	uxtb	r3, r3
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	2b0f      	cmp	r3, #15
 8007c94:	d80d      	bhi.n	8007cb2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	33e0      	adds	r3, #224	; 0xe0
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	33e0      	adds	r3, #224	; 0xe0
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73fb      	strb	r3, [r7, #15]
 8007cd0:	e00f      	b.n	8007cf2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	33e0      	adds	r3, #224	; 0xe0
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	e007      	b.n	8007cfc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	73fb      	strb	r3, [r7, #15]
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	2b0f      	cmp	r3, #15
 8007cf6:	d9ec      	bls.n	8007cd2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	490e      	ldr	r1, [pc, #56]	; (8007d48 <MX_USB_HOST_Init+0x40>)
 8007d10:	480e      	ldr	r0, [pc, #56]	; (8007d4c <MX_USB_HOST_Init+0x44>)
 8007d12:	f7fe fba7 	bl	8006464 <USBH_Init>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d1c:	f7f8 fe34 	bl	8000988 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d20:	490b      	ldr	r1, [pc, #44]	; (8007d50 <MX_USB_HOST_Init+0x48>)
 8007d22:	480a      	ldr	r0, [pc, #40]	; (8007d4c <MX_USB_HOST_Init+0x44>)
 8007d24:	f7fe fc2c 	bl	8006580 <USBH_RegisterClass>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d2e:	f7f8 fe2b 	bl	8000988 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d32:	4806      	ldr	r0, [pc, #24]	; (8007d4c <MX_USB_HOST_Init+0x44>)
 8007d34:	f7fe fcb0 	bl	8006698 <USBH_Start>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007d3e:	f7f8 fe23 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007d42:	bf00      	nop
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	08007d69 	.word	0x08007d69
 8007d4c:	200001ec 	.word	0x200001ec
 8007d50:	2000000c 	.word	0x2000000c

08007d54 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007d58:	4802      	ldr	r0, [pc, #8]	; (8007d64 <MX_USB_HOST_Process+0x10>)
 8007d5a:	f7fe fcad 	bl	80066b8 <USBH_Process>
}
 8007d5e:	bf00      	nop
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	200001ec 	.word	0x200001ec

08007d68 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d819      	bhi.n	8007db0 <USBH_UserProcess+0x48>
 8007d7c:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <USBH_UserProcess+0x1c>)
 8007d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d82:	bf00      	nop
 8007d84:	08007db1 	.word	0x08007db1
 8007d88:	08007da1 	.word	0x08007da1
 8007d8c:	08007db1 	.word	0x08007db1
 8007d90:	08007da9 	.word	0x08007da9
 8007d94:	08007d99 	.word	0x08007d99
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007d98:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <USBH_UserProcess+0x58>)
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	701a      	strb	r2, [r3, #0]
  break;
 8007d9e:	e008      	b.n	8007db2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <USBH_UserProcess+0x58>)
 8007da2:	2202      	movs	r2, #2
 8007da4:	701a      	strb	r2, [r3, #0]
  break;
 8007da6:	e004      	b.n	8007db2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <USBH_UserProcess+0x58>)
 8007daa:	2201      	movs	r2, #1
 8007dac:	701a      	strb	r2, [r3, #0]
  break;
 8007dae:	e000      	b.n	8007db2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007db0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	200005c4 	.word	0x200005c4

08007dc4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08a      	sub	sp, #40	; 0x28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dcc:	f107 0314 	add.w	r3, r7, #20
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	605a      	str	r2, [r3, #4]
 8007dd6:	609a      	str	r2, [r3, #8]
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007de4:	d147      	bne.n	8007e76 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	4a24      	ldr	r2, [pc, #144]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007df0:	f043 0301 	orr.w	r3, r3, #1
 8007df4:	6313      	str	r3, [r2, #48]	; 0x30
 8007df6:	4b22      	ldr	r3, [pc, #136]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	613b      	str	r3, [r7, #16]
 8007e00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e10:	f107 0314 	add.w	r3, r7, #20
 8007e14:	4619      	mov	r1, r3
 8007e16:	481b      	ldr	r0, [pc, #108]	; (8007e84 <HAL_HCD_MspInit+0xc0>)
 8007e18:	f7f9 f9dc 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e22:	2302      	movs	r3, #2
 8007e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e2e:	230a      	movs	r3, #10
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e32:	f107 0314 	add.w	r3, r7, #20
 8007e36:	4619      	mov	r1, r3
 8007e38:	4812      	ldr	r0, [pc, #72]	; (8007e84 <HAL_HCD_MspInit+0xc0>)
 8007e3a:	f7f9 f9cb 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e3e:	4b10      	ldr	r3, [pc, #64]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e42:	4a0f      	ldr	r2, [pc, #60]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e48:	6353      	str	r3, [r2, #52]	; 0x34
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	4a0b      	ldr	r2, [pc, #44]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e58:	6453      	str	r3, [r2, #68]	; 0x44
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e66:	2200      	movs	r2, #0
 8007e68:	2100      	movs	r1, #0
 8007e6a:	2043      	movs	r0, #67	; 0x43
 8007e6c:	f7f9 f97b 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e70:	2043      	movs	r0, #67	; 0x43
 8007e72:	f7f9 f994 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e76:	bf00      	nop
 8007e78:	3728      	adds	r7, #40	; 0x28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	40023800 	.word	0x40023800
 8007e84:	40020000 	.word	0x40020000

08007e88 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe ffed 	bl	8006e76 <USBH_LL_IncTimer>
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff f825 	bl	8006f02 <USBH_LL_Connect>
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff f82e 	bl	8006f30 <USBH_LL_Disconnect>
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe ffdf 	bl	8006eca <USBH_LL_PortEnabled>
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fe ffdf 	bl	8006ee6 <USBH_LL_PortDisabled>
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d12a      	bne.n	8007f98 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007f42:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a15      	ldr	r2, [pc, #84]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f4e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f52:	4b14      	ldr	r3, [pc, #80]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f58:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007f5a:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007f60:	4b10      	ldr	r3, [pc, #64]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f62:	2201      	movs	r2, #1
 8007f64:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f66:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f6e:	2202      	movs	r2, #2
 8007f70:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f72:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007f78:	480a      	ldr	r0, [pc, #40]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f7a:	f7f9 fae0 	bl	800153e <HAL_HCD_Init>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007f84:	f7f8 fd00 	bl	8000988 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007f88:	4806      	ldr	r0, [pc, #24]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f8a:	f7f9 fec4 	bl	8001d16 <HAL_HCD_GetCurrentFrame>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7fe ff60 	bl	8006e58 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	200005c8 	.word	0x200005c8

08007fa8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7f9 fe33 	bl	8001c2a <HAL_HCD_Start>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f95c 	bl	8008288 <USBH_Get_USB_Status>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7f9 fe3b 	bl	8001c70 <HAL_HCD_Stop>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 f941 	bl	8008288 <USBH_Get_USB_Status>
 8008006:	4603      	mov	r3, r0
 8008008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800800a:	7bbb      	ldrb	r3, [r7, #14]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800801c:	2301      	movs	r3, #1
 800801e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008026:	4618      	mov	r0, r3
 8008028:	f7f9 fe83 	bl	8001d32 <HAL_HCD_GetCurrentSpeed>
 800802c:	4603      	mov	r3, r0
 800802e:	2b02      	cmp	r3, #2
 8008030:	d00c      	beq.n	800804c <USBH_LL_GetSpeed+0x38>
 8008032:	2b02      	cmp	r3, #2
 8008034:	d80d      	bhi.n	8008052 <USBH_LL_GetSpeed+0x3e>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <USBH_LL_GetSpeed+0x2c>
 800803a:	2b01      	cmp	r3, #1
 800803c:	d003      	beq.n	8008046 <USBH_LL_GetSpeed+0x32>
 800803e:	e008      	b.n	8008052 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]
    break;
 8008044:	e008      	b.n	8008058 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008046:	2301      	movs	r3, #1
 8008048:	73fb      	strb	r3, [r7, #15]
    break;
 800804a:	e005      	b.n	8008058 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800804c:	2302      	movs	r3, #2
 800804e:	73fb      	strb	r3, [r7, #15]
    break;
 8008050:	e002      	b.n	8008058 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008052:	2301      	movs	r3, #1
 8008054:	73fb      	strb	r3, [r7, #15]
    break;
 8008056:	bf00      	nop
  }
  return  speed;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008078:	4618      	mov	r0, r3
 800807a:	f7f9 fe16 	bl	8001caa <HAL_HCD_ResetPort>
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	4618      	mov	r0, r3
 8008086:	f000 f8ff 	bl	8008288 <USBH_Get_USB_Status>
 800808a:	4603      	mov	r3, r0
 800808c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800808e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7f9 fe1d 	bl	8001cee <HAL_HCD_HC_GetXferCount>
 80080b4:	4603      	mov	r3, r0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080be:	b590      	push	{r4, r7, lr}
 80080c0:	b089      	sub	sp, #36	; 0x24
 80080c2:	af04      	add	r7, sp, #16
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	4608      	mov	r0, r1
 80080c8:	4611      	mov	r1, r2
 80080ca:	461a      	mov	r2, r3
 80080cc:	4603      	mov	r3, r0
 80080ce:	70fb      	strb	r3, [r7, #3]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70bb      	strb	r3, [r7, #2]
 80080d4:	4613      	mov	r3, r2
 80080d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80080e6:	787c      	ldrb	r4, [r7, #1]
 80080e8:	78ba      	ldrb	r2, [r7, #2]
 80080ea:	78f9      	ldrb	r1, [r7, #3]
 80080ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080ee:	9302      	str	r3, [sp, #8]
 80080f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	4623      	mov	r3, r4
 80080fe:	f7f9 fa80 	bl	8001602 <HAL_HCD_HC_Init>
 8008102:	4603      	mov	r3, r0
 8008104:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	4618      	mov	r0, r3
 800810a:	f000 f8bd 	bl	8008288 <USBH_Get_USB_Status>
 800810e:	4603      	mov	r3, r0
 8008110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008112:	7bbb      	ldrb	r3, [r7, #14]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	bd90      	pop	{r4, r7, pc}

0800811c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008136:	78fa      	ldrb	r2, [r7, #3]
 8008138:	4611      	mov	r1, r2
 800813a:	4618      	mov	r0, r3
 800813c:	f7f9 faf0 	bl	8001720 <HAL_HCD_HC_Halt>
 8008140:	4603      	mov	r3, r0
 8008142:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 f89e 	bl	8008288 <USBH_Get_USB_Status>
 800814c:	4603      	mov	r3, r0
 800814e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008150:	7bbb      	ldrb	r3, [r7, #14]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800815a:	b590      	push	{r4, r7, lr}
 800815c:	b089      	sub	sp, #36	; 0x24
 800815e:	af04      	add	r7, sp, #16
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	4608      	mov	r0, r1
 8008164:	4611      	mov	r1, r2
 8008166:	461a      	mov	r2, r3
 8008168:	4603      	mov	r3, r0
 800816a:	70fb      	strb	r3, [r7, #3]
 800816c:	460b      	mov	r3, r1
 800816e:	70bb      	strb	r3, [r7, #2]
 8008170:	4613      	mov	r3, r2
 8008172:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008182:	787c      	ldrb	r4, [r7, #1]
 8008184:	78ba      	ldrb	r2, [r7, #2]
 8008186:	78f9      	ldrb	r1, [r7, #3]
 8008188:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800818c:	9303      	str	r3, [sp, #12]
 800818e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008190:	9302      	str	r3, [sp, #8]
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	f897 3020 	ldrb.w	r3, [r7, #32]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	4623      	mov	r3, r4
 800819e:	f7f9 fae3 	bl	8001768 <HAL_HCD_HC_SubmitRequest>
 80081a2:	4603      	mov	r3, r0
 80081a4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 f86d 	bl	8008288 <USBH_Get_USB_Status>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd90      	pop	{r4, r7, pc}

080081bc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	4611      	mov	r1, r2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7f9 fd77 	bl	8001cc6 <HAL_HCD_HC_GetURBState>
 80081d8:	4603      	mov	r3, r0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d103      	bne.n	8008200 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f870 	bl	80082e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008200:	20c8      	movs	r0, #200	; 0xc8
 8008202:	f7f8 feb1 	bl	8000f68 <HAL_Delay>
  return USBH_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
 800821c:	4613      	mov	r3, r2
 800821e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008226:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	212c      	movs	r1, #44	; 0x2c
 800822e:	fb01 f303 	mul.w	r3, r1, r3
 8008232:	4413      	add	r3, r2
 8008234:	333b      	adds	r3, #59	; 0x3b
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d009      	beq.n	8008250 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	212c      	movs	r1, #44	; 0x2c
 8008242:	fb01 f303 	mul.w	r3, r1, r3
 8008246:	4413      	add	r3, r2
 8008248:	3354      	adds	r3, #84	; 0x54
 800824a:	78ba      	ldrb	r2, [r7, #2]
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e008      	b.n	8008262 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	212c      	movs	r1, #44	; 0x2c
 8008256:	fb01 f303 	mul.w	r3, r1, r3
 800825a:	4413      	add	r3, r2
 800825c:	3355      	adds	r3, #85	; 0x55
 800825e:	78ba      	ldrb	r2, [r7, #2]
 8008260:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7f8 fe75 	bl	8000f68 <HAL_Delay>
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	2b03      	cmp	r3, #3
 800829a:	d817      	bhi.n	80082cc <USBH_Get_USB_Status+0x44>
 800829c:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <USBH_Get_USB_Status+0x1c>)
 800829e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a2:	bf00      	nop
 80082a4:	080082b5 	.word	0x080082b5
 80082a8:	080082bb 	.word	0x080082bb
 80082ac:	080082c1 	.word	0x080082c1
 80082b0:	080082c7 	.word	0x080082c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]
    break;
 80082b8:	e00b      	b.n	80082d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80082ba:	2302      	movs	r3, #2
 80082bc:	73fb      	strb	r3, [r7, #15]
    break;
 80082be:	e008      	b.n	80082d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
    break;
 80082c4:	e005      	b.n	80082d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80082c6:	2302      	movs	r3, #2
 80082c8:	73fb      	strb	r3, [r7, #15]
    break;
 80082ca:	e002      	b.n	80082d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80082cc:	2302      	movs	r3, #2
 80082ce:	73fb      	strb	r3, [r7, #15]
    break;
 80082d0:	bf00      	nop
  }
  return usb_status;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
 80082f8:	e001      	b.n	80082fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80082fa:	2301      	movs	r3, #1
 80082fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	461a      	mov	r2, r3
 8008302:	2101      	movs	r1, #1
 8008304:	4803      	ldr	r0, [pc, #12]	; (8008314 <MX_DriverVbusFS+0x34>)
 8008306:	f7f9 f901 	bl	800150c <HAL_GPIO_WritePin>
}
 800830a:	bf00      	nop
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	40020800 	.word	0x40020800

08008318 <__errno>:
 8008318:	4b01      	ldr	r3, [pc, #4]	; (8008320 <__errno+0x8>)
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	2000002c 	.word	0x2000002c

08008324 <__libc_init_array>:
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	4d0d      	ldr	r5, [pc, #52]	; (800835c <__libc_init_array+0x38>)
 8008328:	4c0d      	ldr	r4, [pc, #52]	; (8008360 <__libc_init_array+0x3c>)
 800832a:	1b64      	subs	r4, r4, r5
 800832c:	10a4      	asrs	r4, r4, #2
 800832e:	2600      	movs	r6, #0
 8008330:	42a6      	cmp	r6, r4
 8008332:	d109      	bne.n	8008348 <__libc_init_array+0x24>
 8008334:	4d0b      	ldr	r5, [pc, #44]	; (8008364 <__libc_init_array+0x40>)
 8008336:	4c0c      	ldr	r4, [pc, #48]	; (8008368 <__libc_init_array+0x44>)
 8008338:	f000 fd2e 	bl	8008d98 <_init>
 800833c:	1b64      	subs	r4, r4, r5
 800833e:	10a4      	asrs	r4, r4, #2
 8008340:	2600      	movs	r6, #0
 8008342:	42a6      	cmp	r6, r4
 8008344:	d105      	bne.n	8008352 <__libc_init_array+0x2e>
 8008346:	bd70      	pop	{r4, r5, r6, pc}
 8008348:	f855 3b04 	ldr.w	r3, [r5], #4
 800834c:	4798      	blx	r3
 800834e:	3601      	adds	r6, #1
 8008350:	e7ee      	b.n	8008330 <__libc_init_array+0xc>
 8008352:	f855 3b04 	ldr.w	r3, [r5], #4
 8008356:	4798      	blx	r3
 8008358:	3601      	adds	r6, #1
 800835a:	e7f2      	b.n	8008342 <__libc_init_array+0x1e>
 800835c:	08008e4c 	.word	0x08008e4c
 8008360:	08008e4c 	.word	0x08008e4c
 8008364:	08008e4c 	.word	0x08008e4c
 8008368:	08008e50 	.word	0x08008e50

0800836c <malloc>:
 800836c:	4b02      	ldr	r3, [pc, #8]	; (8008378 <malloc+0xc>)
 800836e:	4601      	mov	r1, r0
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	f000 b87f 	b.w	8008474 <_malloc_r>
 8008376:	bf00      	nop
 8008378:	2000002c 	.word	0x2000002c

0800837c <free>:
 800837c:	4b02      	ldr	r3, [pc, #8]	; (8008388 <free+0xc>)
 800837e:	4601      	mov	r1, r0
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	f000 b80b 	b.w	800839c <_free_r>
 8008386:	bf00      	nop
 8008388:	2000002c 	.word	0x2000002c

0800838c <memset>:
 800838c:	4402      	add	r2, r0
 800838e:	4603      	mov	r3, r0
 8008390:	4293      	cmp	r3, r2
 8008392:	d100      	bne.n	8008396 <memset+0xa>
 8008394:	4770      	bx	lr
 8008396:	f803 1b01 	strb.w	r1, [r3], #1
 800839a:	e7f9      	b.n	8008390 <memset+0x4>

0800839c <_free_r>:
 800839c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800839e:	2900      	cmp	r1, #0
 80083a0:	d044      	beq.n	800842c <_free_r+0x90>
 80083a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a6:	9001      	str	r0, [sp, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f1a1 0404 	sub.w	r4, r1, #4
 80083ae:	bfb8      	it	lt
 80083b0:	18e4      	addlt	r4, r4, r3
 80083b2:	f000 fc39 	bl	8008c28 <__malloc_lock>
 80083b6:	4a1e      	ldr	r2, [pc, #120]	; (8008430 <_free_r+0x94>)
 80083b8:	9801      	ldr	r0, [sp, #4]
 80083ba:	6813      	ldr	r3, [r2, #0]
 80083bc:	b933      	cbnz	r3, 80083cc <_free_r+0x30>
 80083be:	6063      	str	r3, [r4, #4]
 80083c0:	6014      	str	r4, [r2, #0]
 80083c2:	b003      	add	sp, #12
 80083c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083c8:	f000 bc34 	b.w	8008c34 <__malloc_unlock>
 80083cc:	42a3      	cmp	r3, r4
 80083ce:	d908      	bls.n	80083e2 <_free_r+0x46>
 80083d0:	6825      	ldr	r5, [r4, #0]
 80083d2:	1961      	adds	r1, r4, r5
 80083d4:	428b      	cmp	r3, r1
 80083d6:	bf01      	itttt	eq
 80083d8:	6819      	ldreq	r1, [r3, #0]
 80083da:	685b      	ldreq	r3, [r3, #4]
 80083dc:	1949      	addeq	r1, r1, r5
 80083de:	6021      	streq	r1, [r4, #0]
 80083e0:	e7ed      	b.n	80083be <_free_r+0x22>
 80083e2:	461a      	mov	r2, r3
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	b10b      	cbz	r3, 80083ec <_free_r+0x50>
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	d9fa      	bls.n	80083e2 <_free_r+0x46>
 80083ec:	6811      	ldr	r1, [r2, #0]
 80083ee:	1855      	adds	r5, r2, r1
 80083f0:	42a5      	cmp	r5, r4
 80083f2:	d10b      	bne.n	800840c <_free_r+0x70>
 80083f4:	6824      	ldr	r4, [r4, #0]
 80083f6:	4421      	add	r1, r4
 80083f8:	1854      	adds	r4, r2, r1
 80083fa:	42a3      	cmp	r3, r4
 80083fc:	6011      	str	r1, [r2, #0]
 80083fe:	d1e0      	bne.n	80083c2 <_free_r+0x26>
 8008400:	681c      	ldr	r4, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	6053      	str	r3, [r2, #4]
 8008406:	4421      	add	r1, r4
 8008408:	6011      	str	r1, [r2, #0]
 800840a:	e7da      	b.n	80083c2 <_free_r+0x26>
 800840c:	d902      	bls.n	8008414 <_free_r+0x78>
 800840e:	230c      	movs	r3, #12
 8008410:	6003      	str	r3, [r0, #0]
 8008412:	e7d6      	b.n	80083c2 <_free_r+0x26>
 8008414:	6825      	ldr	r5, [r4, #0]
 8008416:	1961      	adds	r1, r4, r5
 8008418:	428b      	cmp	r3, r1
 800841a:	bf04      	itt	eq
 800841c:	6819      	ldreq	r1, [r3, #0]
 800841e:	685b      	ldreq	r3, [r3, #4]
 8008420:	6063      	str	r3, [r4, #4]
 8008422:	bf04      	itt	eq
 8008424:	1949      	addeq	r1, r1, r5
 8008426:	6021      	streq	r1, [r4, #0]
 8008428:	6054      	str	r4, [r2, #4]
 800842a:	e7ca      	b.n	80083c2 <_free_r+0x26>
 800842c:	b003      	add	sp, #12
 800842e:	bd30      	pop	{r4, r5, pc}
 8008430:	200008cc 	.word	0x200008cc

08008434 <sbrk_aligned>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	4e0e      	ldr	r6, [pc, #56]	; (8008470 <sbrk_aligned+0x3c>)
 8008438:	460c      	mov	r4, r1
 800843a:	6831      	ldr	r1, [r6, #0]
 800843c:	4605      	mov	r5, r0
 800843e:	b911      	cbnz	r1, 8008446 <sbrk_aligned+0x12>
 8008440:	f000 f902 	bl	8008648 <_sbrk_r>
 8008444:	6030      	str	r0, [r6, #0]
 8008446:	4621      	mov	r1, r4
 8008448:	4628      	mov	r0, r5
 800844a:	f000 f8fd 	bl	8008648 <_sbrk_r>
 800844e:	1c43      	adds	r3, r0, #1
 8008450:	d00a      	beq.n	8008468 <sbrk_aligned+0x34>
 8008452:	1cc4      	adds	r4, r0, #3
 8008454:	f024 0403 	bic.w	r4, r4, #3
 8008458:	42a0      	cmp	r0, r4
 800845a:	d007      	beq.n	800846c <sbrk_aligned+0x38>
 800845c:	1a21      	subs	r1, r4, r0
 800845e:	4628      	mov	r0, r5
 8008460:	f000 f8f2 	bl	8008648 <_sbrk_r>
 8008464:	3001      	adds	r0, #1
 8008466:	d101      	bne.n	800846c <sbrk_aligned+0x38>
 8008468:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800846c:	4620      	mov	r0, r4
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	200008d0 	.word	0x200008d0

08008474 <_malloc_r>:
 8008474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008478:	1ccd      	adds	r5, r1, #3
 800847a:	f025 0503 	bic.w	r5, r5, #3
 800847e:	3508      	adds	r5, #8
 8008480:	2d0c      	cmp	r5, #12
 8008482:	bf38      	it	cc
 8008484:	250c      	movcc	r5, #12
 8008486:	2d00      	cmp	r5, #0
 8008488:	4607      	mov	r7, r0
 800848a:	db01      	blt.n	8008490 <_malloc_r+0x1c>
 800848c:	42a9      	cmp	r1, r5
 800848e:	d905      	bls.n	800849c <_malloc_r+0x28>
 8008490:	230c      	movs	r3, #12
 8008492:	603b      	str	r3, [r7, #0]
 8008494:	2600      	movs	r6, #0
 8008496:	4630      	mov	r0, r6
 8008498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800849c:	4e2e      	ldr	r6, [pc, #184]	; (8008558 <_malloc_r+0xe4>)
 800849e:	f000 fbc3 	bl	8008c28 <__malloc_lock>
 80084a2:	6833      	ldr	r3, [r6, #0]
 80084a4:	461c      	mov	r4, r3
 80084a6:	bb34      	cbnz	r4, 80084f6 <_malloc_r+0x82>
 80084a8:	4629      	mov	r1, r5
 80084aa:	4638      	mov	r0, r7
 80084ac:	f7ff ffc2 	bl	8008434 <sbrk_aligned>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	4604      	mov	r4, r0
 80084b4:	d14d      	bne.n	8008552 <_malloc_r+0xde>
 80084b6:	6834      	ldr	r4, [r6, #0]
 80084b8:	4626      	mov	r6, r4
 80084ba:	2e00      	cmp	r6, #0
 80084bc:	d140      	bne.n	8008540 <_malloc_r+0xcc>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	4631      	mov	r1, r6
 80084c2:	4638      	mov	r0, r7
 80084c4:	eb04 0803 	add.w	r8, r4, r3
 80084c8:	f000 f8be 	bl	8008648 <_sbrk_r>
 80084cc:	4580      	cmp	r8, r0
 80084ce:	d13a      	bne.n	8008546 <_malloc_r+0xd2>
 80084d0:	6821      	ldr	r1, [r4, #0]
 80084d2:	3503      	adds	r5, #3
 80084d4:	1a6d      	subs	r5, r5, r1
 80084d6:	f025 0503 	bic.w	r5, r5, #3
 80084da:	3508      	adds	r5, #8
 80084dc:	2d0c      	cmp	r5, #12
 80084de:	bf38      	it	cc
 80084e0:	250c      	movcc	r5, #12
 80084e2:	4629      	mov	r1, r5
 80084e4:	4638      	mov	r0, r7
 80084e6:	f7ff ffa5 	bl	8008434 <sbrk_aligned>
 80084ea:	3001      	adds	r0, #1
 80084ec:	d02b      	beq.n	8008546 <_malloc_r+0xd2>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	442b      	add	r3, r5
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	e00e      	b.n	8008514 <_malloc_r+0xa0>
 80084f6:	6822      	ldr	r2, [r4, #0]
 80084f8:	1b52      	subs	r2, r2, r5
 80084fa:	d41e      	bmi.n	800853a <_malloc_r+0xc6>
 80084fc:	2a0b      	cmp	r2, #11
 80084fe:	d916      	bls.n	800852e <_malloc_r+0xba>
 8008500:	1961      	adds	r1, r4, r5
 8008502:	42a3      	cmp	r3, r4
 8008504:	6025      	str	r5, [r4, #0]
 8008506:	bf18      	it	ne
 8008508:	6059      	strne	r1, [r3, #4]
 800850a:	6863      	ldr	r3, [r4, #4]
 800850c:	bf08      	it	eq
 800850e:	6031      	streq	r1, [r6, #0]
 8008510:	5162      	str	r2, [r4, r5]
 8008512:	604b      	str	r3, [r1, #4]
 8008514:	4638      	mov	r0, r7
 8008516:	f104 060b 	add.w	r6, r4, #11
 800851a:	f000 fb8b 	bl	8008c34 <__malloc_unlock>
 800851e:	f026 0607 	bic.w	r6, r6, #7
 8008522:	1d23      	adds	r3, r4, #4
 8008524:	1af2      	subs	r2, r6, r3
 8008526:	d0b6      	beq.n	8008496 <_malloc_r+0x22>
 8008528:	1b9b      	subs	r3, r3, r6
 800852a:	50a3      	str	r3, [r4, r2]
 800852c:	e7b3      	b.n	8008496 <_malloc_r+0x22>
 800852e:	6862      	ldr	r2, [r4, #4]
 8008530:	42a3      	cmp	r3, r4
 8008532:	bf0c      	ite	eq
 8008534:	6032      	streq	r2, [r6, #0]
 8008536:	605a      	strne	r2, [r3, #4]
 8008538:	e7ec      	b.n	8008514 <_malloc_r+0xa0>
 800853a:	4623      	mov	r3, r4
 800853c:	6864      	ldr	r4, [r4, #4]
 800853e:	e7b2      	b.n	80084a6 <_malloc_r+0x32>
 8008540:	4634      	mov	r4, r6
 8008542:	6876      	ldr	r6, [r6, #4]
 8008544:	e7b9      	b.n	80084ba <_malloc_r+0x46>
 8008546:	230c      	movs	r3, #12
 8008548:	603b      	str	r3, [r7, #0]
 800854a:	4638      	mov	r0, r7
 800854c:	f000 fb72 	bl	8008c34 <__malloc_unlock>
 8008550:	e7a1      	b.n	8008496 <_malloc_r+0x22>
 8008552:	6025      	str	r5, [r4, #0]
 8008554:	e7de      	b.n	8008514 <_malloc_r+0xa0>
 8008556:	bf00      	nop
 8008558:	200008cc 	.word	0x200008cc

0800855c <_puts_r>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	460e      	mov	r6, r1
 8008560:	4605      	mov	r5, r0
 8008562:	b118      	cbz	r0, 800856c <_puts_r+0x10>
 8008564:	6983      	ldr	r3, [r0, #24]
 8008566:	b90b      	cbnz	r3, 800856c <_puts_r+0x10>
 8008568:	f000 fa58 	bl	8008a1c <__sinit>
 800856c:	69ab      	ldr	r3, [r5, #24]
 800856e:	68ac      	ldr	r4, [r5, #8]
 8008570:	b913      	cbnz	r3, 8008578 <_puts_r+0x1c>
 8008572:	4628      	mov	r0, r5
 8008574:	f000 fa52 	bl	8008a1c <__sinit>
 8008578:	4b2c      	ldr	r3, [pc, #176]	; (800862c <_puts_r+0xd0>)
 800857a:	429c      	cmp	r4, r3
 800857c:	d120      	bne.n	80085c0 <_puts_r+0x64>
 800857e:	686c      	ldr	r4, [r5, #4]
 8008580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008582:	07db      	lsls	r3, r3, #31
 8008584:	d405      	bmi.n	8008592 <_puts_r+0x36>
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	0598      	lsls	r0, r3, #22
 800858a:	d402      	bmi.n	8008592 <_puts_r+0x36>
 800858c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858e:	f000 fae3 	bl	8008b58 <__retarget_lock_acquire_recursive>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	0719      	lsls	r1, r3, #28
 8008596:	d51d      	bpl.n	80085d4 <_puts_r+0x78>
 8008598:	6923      	ldr	r3, [r4, #16]
 800859a:	b1db      	cbz	r3, 80085d4 <_puts_r+0x78>
 800859c:	3e01      	subs	r6, #1
 800859e:	68a3      	ldr	r3, [r4, #8]
 80085a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085a4:	3b01      	subs	r3, #1
 80085a6:	60a3      	str	r3, [r4, #8]
 80085a8:	bb39      	cbnz	r1, 80085fa <_puts_r+0x9e>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	da38      	bge.n	8008620 <_puts_r+0xc4>
 80085ae:	4622      	mov	r2, r4
 80085b0:	210a      	movs	r1, #10
 80085b2:	4628      	mov	r0, r5
 80085b4:	f000 f858 	bl	8008668 <__swbuf_r>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d011      	beq.n	80085e0 <_puts_r+0x84>
 80085bc:	250a      	movs	r5, #10
 80085be:	e011      	b.n	80085e4 <_puts_r+0x88>
 80085c0:	4b1b      	ldr	r3, [pc, #108]	; (8008630 <_puts_r+0xd4>)
 80085c2:	429c      	cmp	r4, r3
 80085c4:	d101      	bne.n	80085ca <_puts_r+0x6e>
 80085c6:	68ac      	ldr	r4, [r5, #8]
 80085c8:	e7da      	b.n	8008580 <_puts_r+0x24>
 80085ca:	4b1a      	ldr	r3, [pc, #104]	; (8008634 <_puts_r+0xd8>)
 80085cc:	429c      	cmp	r4, r3
 80085ce:	bf08      	it	eq
 80085d0:	68ec      	ldreq	r4, [r5, #12]
 80085d2:	e7d5      	b.n	8008580 <_puts_r+0x24>
 80085d4:	4621      	mov	r1, r4
 80085d6:	4628      	mov	r0, r5
 80085d8:	f000 f898 	bl	800870c <__swsetup_r>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d0dd      	beq.n	800859c <_puts_r+0x40>
 80085e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80085e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085e6:	07da      	lsls	r2, r3, #31
 80085e8:	d405      	bmi.n	80085f6 <_puts_r+0x9a>
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	059b      	lsls	r3, r3, #22
 80085ee:	d402      	bmi.n	80085f6 <_puts_r+0x9a>
 80085f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085f2:	f000 fab2 	bl	8008b5a <__retarget_lock_release_recursive>
 80085f6:	4628      	mov	r0, r5
 80085f8:	bd70      	pop	{r4, r5, r6, pc}
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	da04      	bge.n	8008608 <_puts_r+0xac>
 80085fe:	69a2      	ldr	r2, [r4, #24]
 8008600:	429a      	cmp	r2, r3
 8008602:	dc06      	bgt.n	8008612 <_puts_r+0xb6>
 8008604:	290a      	cmp	r1, #10
 8008606:	d004      	beq.n	8008612 <_puts_r+0xb6>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	6022      	str	r2, [r4, #0]
 800860e:	7019      	strb	r1, [r3, #0]
 8008610:	e7c5      	b.n	800859e <_puts_r+0x42>
 8008612:	4622      	mov	r2, r4
 8008614:	4628      	mov	r0, r5
 8008616:	f000 f827 	bl	8008668 <__swbuf_r>
 800861a:	3001      	adds	r0, #1
 800861c:	d1bf      	bne.n	800859e <_puts_r+0x42>
 800861e:	e7df      	b.n	80085e0 <_puts_r+0x84>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	250a      	movs	r5, #10
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	6022      	str	r2, [r4, #0]
 8008628:	701d      	strb	r5, [r3, #0]
 800862a:	e7db      	b.n	80085e4 <_puts_r+0x88>
 800862c:	08008e04 	.word	0x08008e04
 8008630:	08008e24 	.word	0x08008e24
 8008634:	08008de4 	.word	0x08008de4

08008638 <puts>:
 8008638:	4b02      	ldr	r3, [pc, #8]	; (8008644 <puts+0xc>)
 800863a:	4601      	mov	r1, r0
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	f7ff bf8d 	b.w	800855c <_puts_r>
 8008642:	bf00      	nop
 8008644:	2000002c 	.word	0x2000002c

08008648 <_sbrk_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4d06      	ldr	r5, [pc, #24]	; (8008664 <_sbrk_r+0x1c>)
 800864c:	2300      	movs	r3, #0
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	602b      	str	r3, [r5, #0]
 8008654:	f7f8 fba4 	bl	8000da0 <_sbrk>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_sbrk_r+0x1a>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	b103      	cbz	r3, 8008662 <_sbrk_r+0x1a>
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	200008d8 	.word	0x200008d8

08008668 <__swbuf_r>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	460e      	mov	r6, r1
 800866c:	4614      	mov	r4, r2
 800866e:	4605      	mov	r5, r0
 8008670:	b118      	cbz	r0, 800867a <__swbuf_r+0x12>
 8008672:	6983      	ldr	r3, [r0, #24]
 8008674:	b90b      	cbnz	r3, 800867a <__swbuf_r+0x12>
 8008676:	f000 f9d1 	bl	8008a1c <__sinit>
 800867a:	4b21      	ldr	r3, [pc, #132]	; (8008700 <__swbuf_r+0x98>)
 800867c:	429c      	cmp	r4, r3
 800867e:	d12b      	bne.n	80086d8 <__swbuf_r+0x70>
 8008680:	686c      	ldr	r4, [r5, #4]
 8008682:	69a3      	ldr	r3, [r4, #24]
 8008684:	60a3      	str	r3, [r4, #8]
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	071a      	lsls	r2, r3, #28
 800868a:	d52f      	bpl.n	80086ec <__swbuf_r+0x84>
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	b36b      	cbz	r3, 80086ec <__swbuf_r+0x84>
 8008690:	6923      	ldr	r3, [r4, #16]
 8008692:	6820      	ldr	r0, [r4, #0]
 8008694:	1ac0      	subs	r0, r0, r3
 8008696:	6963      	ldr	r3, [r4, #20]
 8008698:	b2f6      	uxtb	r6, r6
 800869a:	4283      	cmp	r3, r0
 800869c:	4637      	mov	r7, r6
 800869e:	dc04      	bgt.n	80086aa <__swbuf_r+0x42>
 80086a0:	4621      	mov	r1, r4
 80086a2:	4628      	mov	r0, r5
 80086a4:	f000 f926 	bl	80088f4 <_fflush_r>
 80086a8:	bb30      	cbnz	r0, 80086f8 <__swbuf_r+0x90>
 80086aa:	68a3      	ldr	r3, [r4, #8]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	60a3      	str	r3, [r4, #8]
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	6022      	str	r2, [r4, #0]
 80086b6:	701e      	strb	r6, [r3, #0]
 80086b8:	6963      	ldr	r3, [r4, #20]
 80086ba:	3001      	adds	r0, #1
 80086bc:	4283      	cmp	r3, r0
 80086be:	d004      	beq.n	80086ca <__swbuf_r+0x62>
 80086c0:	89a3      	ldrh	r3, [r4, #12]
 80086c2:	07db      	lsls	r3, r3, #31
 80086c4:	d506      	bpl.n	80086d4 <__swbuf_r+0x6c>
 80086c6:	2e0a      	cmp	r6, #10
 80086c8:	d104      	bne.n	80086d4 <__swbuf_r+0x6c>
 80086ca:	4621      	mov	r1, r4
 80086cc:	4628      	mov	r0, r5
 80086ce:	f000 f911 	bl	80088f4 <_fflush_r>
 80086d2:	b988      	cbnz	r0, 80086f8 <__swbuf_r+0x90>
 80086d4:	4638      	mov	r0, r7
 80086d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d8:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <__swbuf_r+0x9c>)
 80086da:	429c      	cmp	r4, r3
 80086dc:	d101      	bne.n	80086e2 <__swbuf_r+0x7a>
 80086de:	68ac      	ldr	r4, [r5, #8]
 80086e0:	e7cf      	b.n	8008682 <__swbuf_r+0x1a>
 80086e2:	4b09      	ldr	r3, [pc, #36]	; (8008708 <__swbuf_r+0xa0>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	bf08      	it	eq
 80086e8:	68ec      	ldreq	r4, [r5, #12]
 80086ea:	e7ca      	b.n	8008682 <__swbuf_r+0x1a>
 80086ec:	4621      	mov	r1, r4
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 f80c 	bl	800870c <__swsetup_r>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d0cb      	beq.n	8008690 <__swbuf_r+0x28>
 80086f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80086fc:	e7ea      	b.n	80086d4 <__swbuf_r+0x6c>
 80086fe:	bf00      	nop
 8008700:	08008e04 	.word	0x08008e04
 8008704:	08008e24 	.word	0x08008e24
 8008708:	08008de4 	.word	0x08008de4

0800870c <__swsetup_r>:
 800870c:	4b32      	ldr	r3, [pc, #200]	; (80087d8 <__swsetup_r+0xcc>)
 800870e:	b570      	push	{r4, r5, r6, lr}
 8008710:	681d      	ldr	r5, [r3, #0]
 8008712:	4606      	mov	r6, r0
 8008714:	460c      	mov	r4, r1
 8008716:	b125      	cbz	r5, 8008722 <__swsetup_r+0x16>
 8008718:	69ab      	ldr	r3, [r5, #24]
 800871a:	b913      	cbnz	r3, 8008722 <__swsetup_r+0x16>
 800871c:	4628      	mov	r0, r5
 800871e:	f000 f97d 	bl	8008a1c <__sinit>
 8008722:	4b2e      	ldr	r3, [pc, #184]	; (80087dc <__swsetup_r+0xd0>)
 8008724:	429c      	cmp	r4, r3
 8008726:	d10f      	bne.n	8008748 <__swsetup_r+0x3c>
 8008728:	686c      	ldr	r4, [r5, #4]
 800872a:	89a3      	ldrh	r3, [r4, #12]
 800872c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008730:	0719      	lsls	r1, r3, #28
 8008732:	d42c      	bmi.n	800878e <__swsetup_r+0x82>
 8008734:	06dd      	lsls	r5, r3, #27
 8008736:	d411      	bmi.n	800875c <__swsetup_r+0x50>
 8008738:	2309      	movs	r3, #9
 800873a:	6033      	str	r3, [r6, #0]
 800873c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008746:	e03e      	b.n	80087c6 <__swsetup_r+0xba>
 8008748:	4b25      	ldr	r3, [pc, #148]	; (80087e0 <__swsetup_r+0xd4>)
 800874a:	429c      	cmp	r4, r3
 800874c:	d101      	bne.n	8008752 <__swsetup_r+0x46>
 800874e:	68ac      	ldr	r4, [r5, #8]
 8008750:	e7eb      	b.n	800872a <__swsetup_r+0x1e>
 8008752:	4b24      	ldr	r3, [pc, #144]	; (80087e4 <__swsetup_r+0xd8>)
 8008754:	429c      	cmp	r4, r3
 8008756:	bf08      	it	eq
 8008758:	68ec      	ldreq	r4, [r5, #12]
 800875a:	e7e6      	b.n	800872a <__swsetup_r+0x1e>
 800875c:	0758      	lsls	r0, r3, #29
 800875e:	d512      	bpl.n	8008786 <__swsetup_r+0x7a>
 8008760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008762:	b141      	cbz	r1, 8008776 <__swsetup_r+0x6a>
 8008764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008768:	4299      	cmp	r1, r3
 800876a:	d002      	beq.n	8008772 <__swsetup_r+0x66>
 800876c:	4630      	mov	r0, r6
 800876e:	f7ff fe15 	bl	800839c <_free_r>
 8008772:	2300      	movs	r3, #0
 8008774:	6363      	str	r3, [r4, #52]	; 0x34
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800877c:	81a3      	strh	r3, [r4, #12]
 800877e:	2300      	movs	r3, #0
 8008780:	6063      	str	r3, [r4, #4]
 8008782:	6923      	ldr	r3, [r4, #16]
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	f043 0308 	orr.w	r3, r3, #8
 800878c:	81a3      	strh	r3, [r4, #12]
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	b94b      	cbnz	r3, 80087a6 <__swsetup_r+0x9a>
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800879c:	d003      	beq.n	80087a6 <__swsetup_r+0x9a>
 800879e:	4621      	mov	r1, r4
 80087a0:	4630      	mov	r0, r6
 80087a2:	f000 fa01 	bl	8008ba8 <__smakebuf_r>
 80087a6:	89a0      	ldrh	r0, [r4, #12]
 80087a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087ac:	f010 0301 	ands.w	r3, r0, #1
 80087b0:	d00a      	beq.n	80087c8 <__swsetup_r+0xbc>
 80087b2:	2300      	movs	r3, #0
 80087b4:	60a3      	str	r3, [r4, #8]
 80087b6:	6963      	ldr	r3, [r4, #20]
 80087b8:	425b      	negs	r3, r3
 80087ba:	61a3      	str	r3, [r4, #24]
 80087bc:	6923      	ldr	r3, [r4, #16]
 80087be:	b943      	cbnz	r3, 80087d2 <__swsetup_r+0xc6>
 80087c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087c4:	d1ba      	bne.n	800873c <__swsetup_r+0x30>
 80087c6:	bd70      	pop	{r4, r5, r6, pc}
 80087c8:	0781      	lsls	r1, r0, #30
 80087ca:	bf58      	it	pl
 80087cc:	6963      	ldrpl	r3, [r4, #20]
 80087ce:	60a3      	str	r3, [r4, #8]
 80087d0:	e7f4      	b.n	80087bc <__swsetup_r+0xb0>
 80087d2:	2000      	movs	r0, #0
 80087d4:	e7f7      	b.n	80087c6 <__swsetup_r+0xba>
 80087d6:	bf00      	nop
 80087d8:	2000002c 	.word	0x2000002c
 80087dc:	08008e04 	.word	0x08008e04
 80087e0:	08008e24 	.word	0x08008e24
 80087e4:	08008de4 	.word	0x08008de4

080087e8 <__sflush_r>:
 80087e8:	898a      	ldrh	r2, [r1, #12]
 80087ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ee:	4605      	mov	r5, r0
 80087f0:	0710      	lsls	r0, r2, #28
 80087f2:	460c      	mov	r4, r1
 80087f4:	d458      	bmi.n	80088a8 <__sflush_r+0xc0>
 80087f6:	684b      	ldr	r3, [r1, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	dc05      	bgt.n	8008808 <__sflush_r+0x20>
 80087fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	dc02      	bgt.n	8008808 <__sflush_r+0x20>
 8008802:	2000      	movs	r0, #0
 8008804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800880a:	2e00      	cmp	r6, #0
 800880c:	d0f9      	beq.n	8008802 <__sflush_r+0x1a>
 800880e:	2300      	movs	r3, #0
 8008810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008814:	682f      	ldr	r7, [r5, #0]
 8008816:	602b      	str	r3, [r5, #0]
 8008818:	d032      	beq.n	8008880 <__sflush_r+0x98>
 800881a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	075a      	lsls	r2, r3, #29
 8008820:	d505      	bpl.n	800882e <__sflush_r+0x46>
 8008822:	6863      	ldr	r3, [r4, #4]
 8008824:	1ac0      	subs	r0, r0, r3
 8008826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008828:	b10b      	cbz	r3, 800882e <__sflush_r+0x46>
 800882a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800882c:	1ac0      	subs	r0, r0, r3
 800882e:	2300      	movs	r3, #0
 8008830:	4602      	mov	r2, r0
 8008832:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008834:	6a21      	ldr	r1, [r4, #32]
 8008836:	4628      	mov	r0, r5
 8008838:	47b0      	blx	r6
 800883a:	1c43      	adds	r3, r0, #1
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	d106      	bne.n	800884e <__sflush_r+0x66>
 8008840:	6829      	ldr	r1, [r5, #0]
 8008842:	291d      	cmp	r1, #29
 8008844:	d82c      	bhi.n	80088a0 <__sflush_r+0xb8>
 8008846:	4a2a      	ldr	r2, [pc, #168]	; (80088f0 <__sflush_r+0x108>)
 8008848:	40ca      	lsrs	r2, r1
 800884a:	07d6      	lsls	r6, r2, #31
 800884c:	d528      	bpl.n	80088a0 <__sflush_r+0xb8>
 800884e:	2200      	movs	r2, #0
 8008850:	6062      	str	r2, [r4, #4]
 8008852:	04d9      	lsls	r1, r3, #19
 8008854:	6922      	ldr	r2, [r4, #16]
 8008856:	6022      	str	r2, [r4, #0]
 8008858:	d504      	bpl.n	8008864 <__sflush_r+0x7c>
 800885a:	1c42      	adds	r2, r0, #1
 800885c:	d101      	bne.n	8008862 <__sflush_r+0x7a>
 800885e:	682b      	ldr	r3, [r5, #0]
 8008860:	b903      	cbnz	r3, 8008864 <__sflush_r+0x7c>
 8008862:	6560      	str	r0, [r4, #84]	; 0x54
 8008864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008866:	602f      	str	r7, [r5, #0]
 8008868:	2900      	cmp	r1, #0
 800886a:	d0ca      	beq.n	8008802 <__sflush_r+0x1a>
 800886c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008870:	4299      	cmp	r1, r3
 8008872:	d002      	beq.n	800887a <__sflush_r+0x92>
 8008874:	4628      	mov	r0, r5
 8008876:	f7ff fd91 	bl	800839c <_free_r>
 800887a:	2000      	movs	r0, #0
 800887c:	6360      	str	r0, [r4, #52]	; 0x34
 800887e:	e7c1      	b.n	8008804 <__sflush_r+0x1c>
 8008880:	6a21      	ldr	r1, [r4, #32]
 8008882:	2301      	movs	r3, #1
 8008884:	4628      	mov	r0, r5
 8008886:	47b0      	blx	r6
 8008888:	1c41      	adds	r1, r0, #1
 800888a:	d1c7      	bne.n	800881c <__sflush_r+0x34>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d0c4      	beq.n	800881c <__sflush_r+0x34>
 8008892:	2b1d      	cmp	r3, #29
 8008894:	d001      	beq.n	800889a <__sflush_r+0xb2>
 8008896:	2b16      	cmp	r3, #22
 8008898:	d101      	bne.n	800889e <__sflush_r+0xb6>
 800889a:	602f      	str	r7, [r5, #0]
 800889c:	e7b1      	b.n	8008802 <__sflush_r+0x1a>
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	e7ad      	b.n	8008804 <__sflush_r+0x1c>
 80088a8:	690f      	ldr	r7, [r1, #16]
 80088aa:	2f00      	cmp	r7, #0
 80088ac:	d0a9      	beq.n	8008802 <__sflush_r+0x1a>
 80088ae:	0793      	lsls	r3, r2, #30
 80088b0:	680e      	ldr	r6, [r1, #0]
 80088b2:	bf08      	it	eq
 80088b4:	694b      	ldreq	r3, [r1, #20]
 80088b6:	600f      	str	r7, [r1, #0]
 80088b8:	bf18      	it	ne
 80088ba:	2300      	movne	r3, #0
 80088bc:	eba6 0807 	sub.w	r8, r6, r7
 80088c0:	608b      	str	r3, [r1, #8]
 80088c2:	f1b8 0f00 	cmp.w	r8, #0
 80088c6:	dd9c      	ble.n	8008802 <__sflush_r+0x1a>
 80088c8:	6a21      	ldr	r1, [r4, #32]
 80088ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088cc:	4643      	mov	r3, r8
 80088ce:	463a      	mov	r2, r7
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b0      	blx	r6
 80088d4:	2800      	cmp	r0, #0
 80088d6:	dc06      	bgt.n	80088e6 <__sflush_r+0xfe>
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088e4:	e78e      	b.n	8008804 <__sflush_r+0x1c>
 80088e6:	4407      	add	r7, r0
 80088e8:	eba8 0800 	sub.w	r8, r8, r0
 80088ec:	e7e9      	b.n	80088c2 <__sflush_r+0xda>
 80088ee:	bf00      	nop
 80088f0:	20400001 	.word	0x20400001

080088f4 <_fflush_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	690b      	ldr	r3, [r1, #16]
 80088f8:	4605      	mov	r5, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	b913      	cbnz	r3, 8008904 <_fflush_r+0x10>
 80088fe:	2500      	movs	r5, #0
 8008900:	4628      	mov	r0, r5
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	b118      	cbz	r0, 800890e <_fflush_r+0x1a>
 8008906:	6983      	ldr	r3, [r0, #24]
 8008908:	b90b      	cbnz	r3, 800890e <_fflush_r+0x1a>
 800890a:	f000 f887 	bl	8008a1c <__sinit>
 800890e:	4b14      	ldr	r3, [pc, #80]	; (8008960 <_fflush_r+0x6c>)
 8008910:	429c      	cmp	r4, r3
 8008912:	d11b      	bne.n	800894c <_fflush_r+0x58>
 8008914:	686c      	ldr	r4, [r5, #4]
 8008916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0ef      	beq.n	80088fe <_fflush_r+0xa>
 800891e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008920:	07d0      	lsls	r0, r2, #31
 8008922:	d404      	bmi.n	800892e <_fflush_r+0x3a>
 8008924:	0599      	lsls	r1, r3, #22
 8008926:	d402      	bmi.n	800892e <_fflush_r+0x3a>
 8008928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800892a:	f000 f915 	bl	8008b58 <__retarget_lock_acquire_recursive>
 800892e:	4628      	mov	r0, r5
 8008930:	4621      	mov	r1, r4
 8008932:	f7ff ff59 	bl	80087e8 <__sflush_r>
 8008936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008938:	07da      	lsls	r2, r3, #31
 800893a:	4605      	mov	r5, r0
 800893c:	d4e0      	bmi.n	8008900 <_fflush_r+0xc>
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	059b      	lsls	r3, r3, #22
 8008942:	d4dd      	bmi.n	8008900 <_fflush_r+0xc>
 8008944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008946:	f000 f908 	bl	8008b5a <__retarget_lock_release_recursive>
 800894a:	e7d9      	b.n	8008900 <_fflush_r+0xc>
 800894c:	4b05      	ldr	r3, [pc, #20]	; (8008964 <_fflush_r+0x70>)
 800894e:	429c      	cmp	r4, r3
 8008950:	d101      	bne.n	8008956 <_fflush_r+0x62>
 8008952:	68ac      	ldr	r4, [r5, #8]
 8008954:	e7df      	b.n	8008916 <_fflush_r+0x22>
 8008956:	4b04      	ldr	r3, [pc, #16]	; (8008968 <_fflush_r+0x74>)
 8008958:	429c      	cmp	r4, r3
 800895a:	bf08      	it	eq
 800895c:	68ec      	ldreq	r4, [r5, #12]
 800895e:	e7da      	b.n	8008916 <_fflush_r+0x22>
 8008960:	08008e04 	.word	0x08008e04
 8008964:	08008e24 	.word	0x08008e24
 8008968:	08008de4 	.word	0x08008de4

0800896c <std>:
 800896c:	2300      	movs	r3, #0
 800896e:	b510      	push	{r4, lr}
 8008970:	4604      	mov	r4, r0
 8008972:	e9c0 3300 	strd	r3, r3, [r0]
 8008976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800897a:	6083      	str	r3, [r0, #8]
 800897c:	8181      	strh	r1, [r0, #12]
 800897e:	6643      	str	r3, [r0, #100]	; 0x64
 8008980:	81c2      	strh	r2, [r0, #14]
 8008982:	6183      	str	r3, [r0, #24]
 8008984:	4619      	mov	r1, r3
 8008986:	2208      	movs	r2, #8
 8008988:	305c      	adds	r0, #92	; 0x5c
 800898a:	f7ff fcff 	bl	800838c <memset>
 800898e:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <std+0x38>)
 8008990:	6263      	str	r3, [r4, #36]	; 0x24
 8008992:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <std+0x3c>)
 8008994:	62a3      	str	r3, [r4, #40]	; 0x28
 8008996:	4b05      	ldr	r3, [pc, #20]	; (80089ac <std+0x40>)
 8008998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800899a:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <std+0x44>)
 800899c:	6224      	str	r4, [r4, #32]
 800899e:	6323      	str	r3, [r4, #48]	; 0x30
 80089a0:	bd10      	pop	{r4, pc}
 80089a2:	bf00      	nop
 80089a4:	08008c41 	.word	0x08008c41
 80089a8:	08008c63 	.word	0x08008c63
 80089ac:	08008c9b 	.word	0x08008c9b
 80089b0:	08008cbf 	.word	0x08008cbf

080089b4 <_cleanup_r>:
 80089b4:	4901      	ldr	r1, [pc, #4]	; (80089bc <_cleanup_r+0x8>)
 80089b6:	f000 b8af 	b.w	8008b18 <_fwalk_reent>
 80089ba:	bf00      	nop
 80089bc:	080088f5 	.word	0x080088f5

080089c0 <__sfmoreglue>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	2268      	movs	r2, #104	; 0x68
 80089c4:	1e4d      	subs	r5, r1, #1
 80089c6:	4355      	muls	r5, r2
 80089c8:	460e      	mov	r6, r1
 80089ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089ce:	f7ff fd51 	bl	8008474 <_malloc_r>
 80089d2:	4604      	mov	r4, r0
 80089d4:	b140      	cbz	r0, 80089e8 <__sfmoreglue+0x28>
 80089d6:	2100      	movs	r1, #0
 80089d8:	e9c0 1600 	strd	r1, r6, [r0]
 80089dc:	300c      	adds	r0, #12
 80089de:	60a0      	str	r0, [r4, #8]
 80089e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089e4:	f7ff fcd2 	bl	800838c <memset>
 80089e8:	4620      	mov	r0, r4
 80089ea:	bd70      	pop	{r4, r5, r6, pc}

080089ec <__sfp_lock_acquire>:
 80089ec:	4801      	ldr	r0, [pc, #4]	; (80089f4 <__sfp_lock_acquire+0x8>)
 80089ee:	f000 b8b3 	b.w	8008b58 <__retarget_lock_acquire_recursive>
 80089f2:	bf00      	nop
 80089f4:	200008d5 	.word	0x200008d5

080089f8 <__sfp_lock_release>:
 80089f8:	4801      	ldr	r0, [pc, #4]	; (8008a00 <__sfp_lock_release+0x8>)
 80089fa:	f000 b8ae 	b.w	8008b5a <__retarget_lock_release_recursive>
 80089fe:	bf00      	nop
 8008a00:	200008d5 	.word	0x200008d5

08008a04 <__sinit_lock_acquire>:
 8008a04:	4801      	ldr	r0, [pc, #4]	; (8008a0c <__sinit_lock_acquire+0x8>)
 8008a06:	f000 b8a7 	b.w	8008b58 <__retarget_lock_acquire_recursive>
 8008a0a:	bf00      	nop
 8008a0c:	200008d6 	.word	0x200008d6

08008a10 <__sinit_lock_release>:
 8008a10:	4801      	ldr	r0, [pc, #4]	; (8008a18 <__sinit_lock_release+0x8>)
 8008a12:	f000 b8a2 	b.w	8008b5a <__retarget_lock_release_recursive>
 8008a16:	bf00      	nop
 8008a18:	200008d6 	.word	0x200008d6

08008a1c <__sinit>:
 8008a1c:	b510      	push	{r4, lr}
 8008a1e:	4604      	mov	r4, r0
 8008a20:	f7ff fff0 	bl	8008a04 <__sinit_lock_acquire>
 8008a24:	69a3      	ldr	r3, [r4, #24]
 8008a26:	b11b      	cbz	r3, 8008a30 <__sinit+0x14>
 8008a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a2c:	f7ff bff0 	b.w	8008a10 <__sinit_lock_release>
 8008a30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a34:	6523      	str	r3, [r4, #80]	; 0x50
 8008a36:	4b13      	ldr	r3, [pc, #76]	; (8008a84 <__sinit+0x68>)
 8008a38:	4a13      	ldr	r2, [pc, #76]	; (8008a88 <__sinit+0x6c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a3e:	42a3      	cmp	r3, r4
 8008a40:	bf04      	itt	eq
 8008a42:	2301      	moveq	r3, #1
 8008a44:	61a3      	streq	r3, [r4, #24]
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 f820 	bl	8008a8c <__sfp>
 8008a4c:	6060      	str	r0, [r4, #4]
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 f81c 	bl	8008a8c <__sfp>
 8008a54:	60a0      	str	r0, [r4, #8]
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 f818 	bl	8008a8c <__sfp>
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	60e0      	str	r0, [r4, #12]
 8008a60:	2104      	movs	r1, #4
 8008a62:	6860      	ldr	r0, [r4, #4]
 8008a64:	f7ff ff82 	bl	800896c <std>
 8008a68:	68a0      	ldr	r0, [r4, #8]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	2109      	movs	r1, #9
 8008a6e:	f7ff ff7d 	bl	800896c <std>
 8008a72:	68e0      	ldr	r0, [r4, #12]
 8008a74:	2202      	movs	r2, #2
 8008a76:	2112      	movs	r1, #18
 8008a78:	f7ff ff78 	bl	800896c <std>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	61a3      	str	r3, [r4, #24]
 8008a80:	e7d2      	b.n	8008a28 <__sinit+0xc>
 8008a82:	bf00      	nop
 8008a84:	08008de0 	.word	0x08008de0
 8008a88:	080089b5 	.word	0x080089b5

08008a8c <__sfp>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	4607      	mov	r7, r0
 8008a90:	f7ff ffac 	bl	80089ec <__sfp_lock_acquire>
 8008a94:	4b1e      	ldr	r3, [pc, #120]	; (8008b10 <__sfp+0x84>)
 8008a96:	681e      	ldr	r6, [r3, #0]
 8008a98:	69b3      	ldr	r3, [r6, #24]
 8008a9a:	b913      	cbnz	r3, 8008aa2 <__sfp+0x16>
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7ff ffbd 	bl	8008a1c <__sinit>
 8008aa2:	3648      	adds	r6, #72	; 0x48
 8008aa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	d503      	bpl.n	8008ab4 <__sfp+0x28>
 8008aac:	6833      	ldr	r3, [r6, #0]
 8008aae:	b30b      	cbz	r3, 8008af4 <__sfp+0x68>
 8008ab0:	6836      	ldr	r6, [r6, #0]
 8008ab2:	e7f7      	b.n	8008aa4 <__sfp+0x18>
 8008ab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ab8:	b9d5      	cbnz	r5, 8008af0 <__sfp+0x64>
 8008aba:	4b16      	ldr	r3, [pc, #88]	; (8008b14 <__sfp+0x88>)
 8008abc:	60e3      	str	r3, [r4, #12]
 8008abe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ac2:	6665      	str	r5, [r4, #100]	; 0x64
 8008ac4:	f000 f847 	bl	8008b56 <__retarget_lock_init_recursive>
 8008ac8:	f7ff ff96 	bl	80089f8 <__sfp_lock_release>
 8008acc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ad4:	6025      	str	r5, [r4, #0]
 8008ad6:	61a5      	str	r5, [r4, #24]
 8008ad8:	2208      	movs	r2, #8
 8008ada:	4629      	mov	r1, r5
 8008adc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ae0:	f7ff fc54 	bl	800838c <memset>
 8008ae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008aec:	4620      	mov	r0, r4
 8008aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008af0:	3468      	adds	r4, #104	; 0x68
 8008af2:	e7d9      	b.n	8008aa8 <__sfp+0x1c>
 8008af4:	2104      	movs	r1, #4
 8008af6:	4638      	mov	r0, r7
 8008af8:	f7ff ff62 	bl	80089c0 <__sfmoreglue>
 8008afc:	4604      	mov	r4, r0
 8008afe:	6030      	str	r0, [r6, #0]
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d1d5      	bne.n	8008ab0 <__sfp+0x24>
 8008b04:	f7ff ff78 	bl	80089f8 <__sfp_lock_release>
 8008b08:	230c      	movs	r3, #12
 8008b0a:	603b      	str	r3, [r7, #0]
 8008b0c:	e7ee      	b.n	8008aec <__sfp+0x60>
 8008b0e:	bf00      	nop
 8008b10:	08008de0 	.word	0x08008de0
 8008b14:	ffff0001 	.word	0xffff0001

08008b18 <_fwalk_reent>:
 8008b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b1c:	4606      	mov	r6, r0
 8008b1e:	4688      	mov	r8, r1
 8008b20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b24:	2700      	movs	r7, #0
 8008b26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b2a:	f1b9 0901 	subs.w	r9, r9, #1
 8008b2e:	d505      	bpl.n	8008b3c <_fwalk_reent+0x24>
 8008b30:	6824      	ldr	r4, [r4, #0]
 8008b32:	2c00      	cmp	r4, #0
 8008b34:	d1f7      	bne.n	8008b26 <_fwalk_reent+0xe>
 8008b36:	4638      	mov	r0, r7
 8008b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b3c:	89ab      	ldrh	r3, [r5, #12]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d907      	bls.n	8008b52 <_fwalk_reent+0x3a>
 8008b42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b46:	3301      	adds	r3, #1
 8008b48:	d003      	beq.n	8008b52 <_fwalk_reent+0x3a>
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	47c0      	blx	r8
 8008b50:	4307      	orrs	r7, r0
 8008b52:	3568      	adds	r5, #104	; 0x68
 8008b54:	e7e9      	b.n	8008b2a <_fwalk_reent+0x12>

08008b56 <__retarget_lock_init_recursive>:
 8008b56:	4770      	bx	lr

08008b58 <__retarget_lock_acquire_recursive>:
 8008b58:	4770      	bx	lr

08008b5a <__retarget_lock_release_recursive>:
 8008b5a:	4770      	bx	lr

08008b5c <__swhatbuf_r>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	460e      	mov	r6, r1
 8008b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b64:	2900      	cmp	r1, #0
 8008b66:	b096      	sub	sp, #88	; 0x58
 8008b68:	4614      	mov	r4, r2
 8008b6a:	461d      	mov	r5, r3
 8008b6c:	da08      	bge.n	8008b80 <__swhatbuf_r+0x24>
 8008b6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	602a      	str	r2, [r5, #0]
 8008b76:	061a      	lsls	r2, r3, #24
 8008b78:	d410      	bmi.n	8008b9c <__swhatbuf_r+0x40>
 8008b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b7e:	e00e      	b.n	8008b9e <__swhatbuf_r+0x42>
 8008b80:	466a      	mov	r2, sp
 8008b82:	f000 f8c3 	bl	8008d0c <_fstat_r>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	dbf1      	blt.n	8008b6e <__swhatbuf_r+0x12>
 8008b8a:	9a01      	ldr	r2, [sp, #4]
 8008b8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b94:	425a      	negs	r2, r3
 8008b96:	415a      	adcs	r2, r3
 8008b98:	602a      	str	r2, [r5, #0]
 8008b9a:	e7ee      	b.n	8008b7a <__swhatbuf_r+0x1e>
 8008b9c:	2340      	movs	r3, #64	; 0x40
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	b016      	add	sp, #88	; 0x58
 8008ba4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ba8 <__smakebuf_r>:
 8008ba8:	898b      	ldrh	r3, [r1, #12]
 8008baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bac:	079d      	lsls	r5, r3, #30
 8008bae:	4606      	mov	r6, r0
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	d507      	bpl.n	8008bc4 <__smakebuf_r+0x1c>
 8008bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	6123      	str	r3, [r4, #16]
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	6163      	str	r3, [r4, #20]
 8008bc0:	b002      	add	sp, #8
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	ab01      	add	r3, sp, #4
 8008bc6:	466a      	mov	r2, sp
 8008bc8:	f7ff ffc8 	bl	8008b5c <__swhatbuf_r>
 8008bcc:	9900      	ldr	r1, [sp, #0]
 8008bce:	4605      	mov	r5, r0
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7ff fc4f 	bl	8008474 <_malloc_r>
 8008bd6:	b948      	cbnz	r0, 8008bec <__smakebuf_r+0x44>
 8008bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bdc:	059a      	lsls	r2, r3, #22
 8008bde:	d4ef      	bmi.n	8008bc0 <__smakebuf_r+0x18>
 8008be0:	f023 0303 	bic.w	r3, r3, #3
 8008be4:	f043 0302 	orr.w	r3, r3, #2
 8008be8:	81a3      	strh	r3, [r4, #12]
 8008bea:	e7e3      	b.n	8008bb4 <__smakebuf_r+0xc>
 8008bec:	4b0d      	ldr	r3, [pc, #52]	; (8008c24 <__smakebuf_r+0x7c>)
 8008bee:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	6020      	str	r0, [r4, #0]
 8008bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf8:	81a3      	strh	r3, [r4, #12]
 8008bfa:	9b00      	ldr	r3, [sp, #0]
 8008bfc:	6163      	str	r3, [r4, #20]
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	6120      	str	r0, [r4, #16]
 8008c02:	b15b      	cbz	r3, 8008c1c <__smakebuf_r+0x74>
 8008c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f000 f891 	bl	8008d30 <_isatty_r>
 8008c0e:	b128      	cbz	r0, 8008c1c <__smakebuf_r+0x74>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	f023 0303 	bic.w	r3, r3, #3
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	89a0      	ldrh	r0, [r4, #12]
 8008c1e:	4305      	orrs	r5, r0
 8008c20:	81a5      	strh	r5, [r4, #12]
 8008c22:	e7cd      	b.n	8008bc0 <__smakebuf_r+0x18>
 8008c24:	080089b5 	.word	0x080089b5

08008c28 <__malloc_lock>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__malloc_lock+0x8>)
 8008c2a:	f7ff bf95 	b.w	8008b58 <__retarget_lock_acquire_recursive>
 8008c2e:	bf00      	nop
 8008c30:	200008d4 	.word	0x200008d4

08008c34 <__malloc_unlock>:
 8008c34:	4801      	ldr	r0, [pc, #4]	; (8008c3c <__malloc_unlock+0x8>)
 8008c36:	f7ff bf90 	b.w	8008b5a <__retarget_lock_release_recursive>
 8008c3a:	bf00      	nop
 8008c3c:	200008d4 	.word	0x200008d4

08008c40 <__sread>:
 8008c40:	b510      	push	{r4, lr}
 8008c42:	460c      	mov	r4, r1
 8008c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c48:	f000 f894 	bl	8008d74 <_read_r>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	bfab      	itete	ge
 8008c50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c52:	89a3      	ldrhlt	r3, [r4, #12]
 8008c54:	181b      	addge	r3, r3, r0
 8008c56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c5a:	bfac      	ite	ge
 8008c5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c5e:	81a3      	strhlt	r3, [r4, #12]
 8008c60:	bd10      	pop	{r4, pc}

08008c62 <__swrite>:
 8008c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c66:	461f      	mov	r7, r3
 8008c68:	898b      	ldrh	r3, [r1, #12]
 8008c6a:	05db      	lsls	r3, r3, #23
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	460c      	mov	r4, r1
 8008c70:	4616      	mov	r6, r2
 8008c72:	d505      	bpl.n	8008c80 <__swrite+0x1e>
 8008c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c78:	2302      	movs	r3, #2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f000 f868 	bl	8008d50 <_lseek_r>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c8a:	81a3      	strh	r3, [r4, #12]
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	463b      	mov	r3, r7
 8008c90:	4628      	mov	r0, r5
 8008c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c96:	f000 b817 	b.w	8008cc8 <_write_r>

08008c9a <__sseek>:
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca2:	f000 f855 	bl	8008d50 <_lseek_r>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	bf15      	itete	ne
 8008cac:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cb6:	81a3      	strheq	r3, [r4, #12]
 8008cb8:	bf18      	it	ne
 8008cba:	81a3      	strhne	r3, [r4, #12]
 8008cbc:	bd10      	pop	{r4, pc}

08008cbe <__sclose>:
 8008cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc2:	f000 b813 	b.w	8008cec <_close_r>
	...

08008cc8 <_write_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d07      	ldr	r5, [pc, #28]	; (8008ce8 <_write_r+0x20>)
 8008ccc:	4604      	mov	r4, r0
 8008cce:	4608      	mov	r0, r1
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	602a      	str	r2, [r5, #0]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f7f7 fbf8 	bl	80004cc <_write>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d102      	bne.n	8008ce6 <_write_r+0x1e>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	b103      	cbz	r3, 8008ce6 <_write_r+0x1e>
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	200008d8 	.word	0x200008d8

08008cec <_close_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d06      	ldr	r5, [pc, #24]	; (8008d08 <_close_r+0x1c>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7f8 f81d 	bl	8000d36 <_close>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_close_r+0x1a>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_close_r+0x1a>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	200008d8 	.word	0x200008d8

08008d0c <_fstat_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d07      	ldr	r5, [pc, #28]	; (8008d2c <_fstat_r+0x20>)
 8008d10:	2300      	movs	r3, #0
 8008d12:	4604      	mov	r4, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	4611      	mov	r1, r2
 8008d18:	602b      	str	r3, [r5, #0]
 8008d1a:	f7f8 f818 	bl	8000d4e <_fstat>
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	d102      	bne.n	8008d28 <_fstat_r+0x1c>
 8008d22:	682b      	ldr	r3, [r5, #0]
 8008d24:	b103      	cbz	r3, 8008d28 <_fstat_r+0x1c>
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	bd38      	pop	{r3, r4, r5, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200008d8 	.word	0x200008d8

08008d30 <_isatty_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d06      	ldr	r5, [pc, #24]	; (8008d4c <_isatty_r+0x1c>)
 8008d34:	2300      	movs	r3, #0
 8008d36:	4604      	mov	r4, r0
 8008d38:	4608      	mov	r0, r1
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	f7f8 f817 	bl	8000d6e <_isatty>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_isatty_r+0x1a>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_isatty_r+0x1a>
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	200008d8 	.word	0x200008d8

08008d50 <_lseek_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4d07      	ldr	r5, [pc, #28]	; (8008d70 <_lseek_r+0x20>)
 8008d54:	4604      	mov	r4, r0
 8008d56:	4608      	mov	r0, r1
 8008d58:	4611      	mov	r1, r2
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	602a      	str	r2, [r5, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f7f8 f810 	bl	8000d84 <_lseek>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d102      	bne.n	8008d6e <_lseek_r+0x1e>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	b103      	cbz	r3, 8008d6e <_lseek_r+0x1e>
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	200008d8 	.word	0x200008d8

08008d74 <_read_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4d07      	ldr	r5, [pc, #28]	; (8008d94 <_read_r+0x20>)
 8008d78:	4604      	mov	r4, r0
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	2200      	movs	r2, #0
 8008d80:	602a      	str	r2, [r5, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	f7f7 ffba 	bl	8000cfc <_read>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d102      	bne.n	8008d92 <_read_r+0x1e>
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	b103      	cbz	r3, 8008d92 <_read_r+0x1e>
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	200008d8 	.word	0x200008d8

08008d98 <_init>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	bf00      	nop
 8008d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9e:	bc08      	pop	{r3}
 8008da0:	469e      	mov	lr, r3
 8008da2:	4770      	bx	lr

08008da4 <_fini>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	bf00      	nop
 8008da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008daa:	bc08      	pop	{r3}
 8008dac:	469e      	mov	lr, r3
 8008dae:	4770      	bx	lr
