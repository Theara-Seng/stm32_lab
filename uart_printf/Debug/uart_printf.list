
uart_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800b858  0800b858  0001b858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc7c  0800bc7c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc7c  0800bc7c  0001bc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc84  0800bc84  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc84  0800bc84  0001bc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc88  0800bc88  0001bc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800bc8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          0000084c  200001fc  200001fc  000201fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a48  20000a48  000201fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019698  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bef  00000000  00000000  000398c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  0003d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001278  00000000  00000000  0003e890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250c9  00000000  00000000  0003fb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3da  00000000  00000000  00064bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cec5b  00000000  00000000  0007efab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014dc06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063b4  00000000  00000000  0014dc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b840 	.word	0x0800b840

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800b840 	.word	0x0800b840

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_write>:
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int _write(int file, char* p, int len){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <_write+0x24>)
 8000ec2:	f004 f905 	bl	80050d0 <HAL_UART_Transmit>
	return len;
 8000ec6:	687b      	ldr	r3, [r7, #4]

}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000030c 	.word	0x2000030c

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 fcff 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f837 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 f95d 	bl	80011a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ee6:	f000 f89d 	bl	8001024 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000eea:	f000 f8c9 	bl	8001080 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000eee:	f000 f8f7 	bl	80010e0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ef2:	f007 fc35 	bl	8008760 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000ef6:	f000 f929 	bl	800114c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t msg = 20;
 8000efa:	2314      	movs	r3, #20
 8000efc:	71fb      	strb	r3, [r7, #7]
  float f = 1.24;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <main+0x6c>)
 8000f00:	603b      	str	r3, [r7, #0]
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f02:	f007 fc53 	bl	80087ac <MX_USB_HOST_Process>
    printf("Hello World->");
 8000f06:	480f      	ldr	r0, [pc, #60]	; (8000f44 <main+0x70>)
 8000f08:	f008 fcbe 	bl	8009888 <iprintf>
    HAL_Delay(1000);
 8000f0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f10:	f000 fd56 	bl	80019c0 <HAL_Delay>
    printf("integer = %d",msg);
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4619      	mov	r1, r3
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <main+0x74>)
 8000f1a:	f008 fcb5 	bl	8009888 <iprintf>
    HAL_Delay(1000);
 8000f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f22:	f000 fd4d 	bl	80019c0 <HAL_Delay>
    printf("float= %f\n", f);
 8000f26:	6838      	ldr	r0, [r7, #0]
 8000f28:	f7ff fb0e 	bl	8000548 <__aeabi_f2d>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <main+0x78>)
 8000f32:	f008 fca9 	bl	8009888 <iprintf>
    HAL_Delay(1000);
 8000f36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f3a:	f000 fd41 	bl	80019c0 <HAL_Delay>
  {
 8000f3e:	e7e0      	b.n	8000f02 <main+0x2e>
 8000f40:	3f9eb852 	.word	0x3f9eb852
 8000f44:	0800b858 	.word	0x0800b858
 8000f48:	0800b868 	.word	0x0800b868
 8000f4c:	0800b878 	.word	0x0800b878

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	; 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2230      	movs	r2, #48	; 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f007 ff40 	bl	8008de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a27      	ldr	r2, [pc, #156]	; (800101c <SystemClock_Config+0xcc>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <SystemClock_Config+0xcc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a21      	ldr	r2, [pc, #132]	; (8001020 <SystemClock_Config+0xd0>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fc4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 f9cc 	bl	8004374 <HAL_RCC_OscConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fe2:	f000 f9db 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fea:	2302      	movs	r3, #2
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2105      	movs	r1, #5
 8001004:	4618      	mov	r0, r3
 8001006:	f003 fc2d 	bl	8004864 <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001010:	f000 f9c4 	bl	800139c <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	3750      	adds	r7, #80	; 0x50
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_I2C1_Init+0x50>)
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <MX_I2C1_Init+0x54>)
 800102c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_I2C1_Init+0x50>)
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_I2C1_Init+0x58>)
 8001032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_I2C1_Init+0x50>)
 8001042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_I2C1_Init+0x50>)
 8001062:	f002 fba3 	bl	80037ac <HAL_I2C_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 f996 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000218 	.word	0x20000218
 8001078:	40005400 	.word	0x40005400
 800107c:	000186a0 	.word	0x000186a0

08001080 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_I2S3_Init+0x54>)
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <MX_I2S3_Init+0x58>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2S3_Init+0x54>)
 800108c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001090:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_I2S3_Init+0x54>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_I2S3_Init+0x54>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010a8:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <MX_I2S3_Init+0x5c>)
 80010aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010c0:	f002 fcb8 	bl	8003a34 <HAL_I2S_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80010ca:	f000 f967 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000026c 	.word	0x2000026c
 80010d8:	40003c00 	.word	0x40003c00
 80010dc:	00017700 	.word	0x00017700

080010e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_SPI1_Init+0x64>)
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <MX_SPI1_Init+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_SPI1_Init+0x64>)
 80010ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_SPI1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_SPI1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_SPI1_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_SPI1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_SPI1_Init+0x64>)
 800110c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001110:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_SPI1_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_SPI1_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_SPI1_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_SPI1_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_SPI1_Init+0x64>)
 800112c:	220a      	movs	r2, #10
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_SPI1_Init+0x64>)
 8001132:	f003 fef7 	bl	8004f24 <HAL_SPI_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800113c:	f000 f92e 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200002b4 	.word	0x200002b4
 8001148:	40013000 	.word	0x40013000

0800114c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_USART2_UART_Init+0x50>)
 8001154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001184:	f003 ff57 	bl	8005036 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800118e:	f000 f905 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000030c 	.word	0x2000030c
 800119c:	40004400 	.word	0x40004400

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	4b72      	ldr	r3, [pc, #456]	; (8001384 <MX_GPIO_Init+0x1e4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a71      	ldr	r2, [pc, #452]	; (8001384 <MX_GPIO_Init+0x1e4>)
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b6f      	ldr	r3, [pc, #444]	; (8001384 <MX_GPIO_Init+0x1e4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	4b6b      	ldr	r3, [pc, #428]	; (8001384 <MX_GPIO_Init+0x1e4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a6a      	ldr	r2, [pc, #424]	; (8001384 <MX_GPIO_Init+0x1e4>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b68      	ldr	r3, [pc, #416]	; (8001384 <MX_GPIO_Init+0x1e4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b64      	ldr	r3, [pc, #400]	; (8001384 <MX_GPIO_Init+0x1e4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a63      	ldr	r2, [pc, #396]	; (8001384 <MX_GPIO_Init+0x1e4>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b61      	ldr	r3, [pc, #388]	; (8001384 <MX_GPIO_Init+0x1e4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <MX_GPIO_Init+0x1e4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a5c      	ldr	r2, [pc, #368]	; (8001384 <MX_GPIO_Init+0x1e4>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <MX_GPIO_Init+0x1e4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b56      	ldr	r3, [pc, #344]	; (8001384 <MX_GPIO_Init+0x1e4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a55      	ldr	r2, [pc, #340]	; (8001384 <MX_GPIO_Init+0x1e4>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b53      	ldr	r3, [pc, #332]	; (8001384 <MX_GPIO_Init+0x1e4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b4f      	ldr	r3, [pc, #316]	; (8001384 <MX_GPIO_Init+0x1e4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a4e      	ldr	r2, [pc, #312]	; (8001384 <MX_GPIO_Init+0x1e4>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b4c      	ldr	r3, [pc, #304]	; (8001384 <MX_GPIO_Init+0x1e4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2108      	movs	r1, #8
 8001262:	4849      	ldr	r0, [pc, #292]	; (8001388 <MX_GPIO_Init+0x1e8>)
 8001264:	f000 fe7e 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	2101      	movs	r1, #1
 800126c:	4847      	ldr	r0, [pc, #284]	; (800138c <MX_GPIO_Init+0x1ec>)
 800126e:	f000 fe79 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001272:	2200      	movs	r2, #0
 8001274:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001278:	4845      	ldr	r0, [pc, #276]	; (8001390 <MX_GPIO_Init+0x1f0>)
 800127a:	f000 fe73 	bl	8001f64 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800127e:	2308      	movs	r3, #8
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	483c      	ldr	r0, [pc, #240]	; (8001388 <MX_GPIO_Init+0x1e8>)
 8001296:	f000 fcc9 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800129a:	2301      	movs	r3, #1
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	4836      	ldr	r0, [pc, #216]	; (800138c <MX_GPIO_Init+0x1ec>)
 80012b2:	f000 fcbb 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012b6:	2308      	movs	r3, #8
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c6:	2305      	movs	r3, #5
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	482e      	ldr	r0, [pc, #184]	; (800138c <MX_GPIO_Init+0x1ec>)
 80012d2:	f000 fcab 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	482a      	ldr	r0, [pc, #168]	; (8001394 <MX_GPIO_Init+0x1f4>)
 80012ec:	f000 fc9e 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012f0:	2304      	movs	r3, #4
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4825      	ldr	r0, [pc, #148]	; (8001398 <MX_GPIO_Init+0x1f8>)
 8001304:	f000 fc92 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800131a:	2305      	movs	r3, #5
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	481c      	ldr	r0, [pc, #112]	; (8001398 <MX_GPIO_Init+0x1f8>)
 8001326:	f000 fc81 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800132a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800132e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4813      	ldr	r0, [pc, #76]	; (8001390 <MX_GPIO_Init+0x1f0>)
 8001344:	f000 fc72 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001348:	2320      	movs	r3, #32
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_GPIO_Init+0x1f0>)
 800135c:	f000 fc66 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001360:	2302      	movs	r3, #2
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001364:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_GPIO_Init+0x1e8>)
 8001376:	f000 fc59 	bl	8001c2c <HAL_GPIO_Init>

}
 800137a:	bf00      	nop
 800137c:	3730      	adds	r7, #48	; 0x30
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40021000 	.word	0x40021000
 800138c:	40020800 	.word	0x40020800
 8001390:	40020c00 	.word	0x40020c00
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>
	...

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_MspInit+0x4c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013e6:	2007      	movs	r0, #7
 80013e8:	f000 fbde 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800

080013f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_I2C_MspInit+0x84>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12c      	bne.n	8001474 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_I2C_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_I2C_MspInit+0x88>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_I2C_MspInit+0x88>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001436:	f44f 7310 	mov.w	r3, #576	; 0x240
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143c:	2312      	movs	r3, #18
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001440:	2301      	movs	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001448:	2304      	movs	r3, #4
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	480c      	ldr	r0, [pc, #48]	; (8001484 <HAL_I2C_MspInit+0x8c>)
 8001454:	f000 fbea 	bl	8001c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_I2C_MspInit+0x88>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_I2C_MspInit+0x88>)
 8001462:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_I2C_MspInit+0x88>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40005400 	.word	0x40005400
 8001480:	40023800 	.word	0x40023800
 8001484:	40020400 	.word	0x40020400

08001488 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a31      	ldr	r2, [pc, #196]	; (8001578 <HAL_I2S_MspInit+0xf0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d15a      	bne.n	800156e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014b8:	2301      	movs	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80014bc:	23c0      	movs	r3, #192	; 0xc0
 80014be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fbeb 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80014d4:	f7ff ff62 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_I2S_MspInit+0xf4>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a26      	ldr	r2, [pc, #152]	; (800157c <HAL_I2S_MspInit+0xf4>)
 80014e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e6:	6413      	str	r3, [r2, #64]	; 0x40
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_I2S_MspInit+0xf4>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_I2S_MspInit+0xf4>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	4a1f      	ldr	r2, [pc, #124]	; (800157c <HAL_I2S_MspInit+0xf4>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6313      	str	r3, [r2, #48]	; 0x30
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_I2S_MspInit+0xf4>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_I2S_MspInit+0xf4>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	4a18      	ldr	r2, [pc, #96]	; (800157c <HAL_I2S_MspInit+0xf4>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6313      	str	r3, [r2, #48]	; 0x30
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_I2S_MspInit+0xf4>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800152c:	2310      	movs	r3, #16
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800153c:	2306      	movs	r3, #6
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <HAL_I2S_MspInit+0xf8>)
 8001548:	f000 fb70 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800154c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800155e:	2306      	movs	r3, #6
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	4806      	ldr	r0, [pc, #24]	; (8001584 <HAL_I2S_MspInit+0xfc>)
 800156a:	f000 fb5f 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	3738      	adds	r7, #56	; 0x38
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40003c00 	.word	0x40003c00
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020800 	.word	0x40020800

08001588 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_SPI_MspInit+0x84>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12b      	bne.n	8001602 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a17      	ldr	r2, [pc, #92]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015e2:	23e0      	movs	r3, #224	; 0xe0
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015f2:	2305      	movs	r3, #5
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_SPI_MspInit+0x8c>)
 80015fe:	f000 fb15 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40013000 	.word	0x40013000
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000

08001618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_UART_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12b      	bne.n	8001692 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_UART_MspInit+0x88>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_UART_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001672:	230c      	movs	r3, #12
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001682:	2307      	movs	r3, #7
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_UART_MspInit+0x8c>)
 800168e:	f000 facd 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40004400 	.word	0x40004400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f4:	f000 f944 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <OTG_FS_IRQHandler+0x10>)
 8001702:	f000 feb3 	bl	800246c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000734 	.word	0x20000734

08001710 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return 1;
 8001714:	2301      	movs	r3, #1
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_kill>:

int _kill(int pid, int sig)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800172a:	f007 fb21 	bl	8008d70 <__errno>
 800172e:	4603      	mov	r3, r0
 8001730:	2216      	movs	r2, #22
 8001732:	601a      	str	r2, [r3, #0]
  return -1;
 8001734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_exit>:

void _exit (int status)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001748:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ffe7 	bl	8001720 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001752:	e7fe      	b.n	8001752 <_exit+0x12>

08001754 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	e00a      	b.n	800177c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001766:	f3af 8000 	nop.w
 800176a:	4601      	mov	r1, r0
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	60ba      	str	r2, [r7, #8]
 8001772:	b2ca      	uxtb	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbf0      	blt.n	8001766 <_read+0x12>
  }

  return len;
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_close>:
  }
  return len;
}

int _close(int file)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b6:	605a      	str	r2, [r3, #4]
  return 0;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_isatty>:

int _isatty(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f007 faa2 	bl	8008d70 <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <_sbrk+0x64>)
 8001848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20020000 	.word	0x20020000
 8001858:	00000400 	.word	0x00000400
 800185c:	20000350 	.word	0x20000350
 8001860:	20000a48 	.word	0x20000a48

08001864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <SystemInit+0x20>)
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <SystemInit+0x20>)
 8001870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188e:	490e      	ldr	r1, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a4:	4c0b      	ldr	r4, [pc, #44]	; (80018d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018b2:	f7ff ffd7 	bl	8001864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b6:	f007 fa61 	bl	8008d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7ff fb0b 	bl	8000ed4 <main>
  bx  lr    
 80018be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80018cc:	0800bc8c 	.word	0x0800bc8c
  ldr r2, =_sbss
 80018d0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80018d4:	20000a48 	.word	0x20000a48

080018d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <HAL_Init+0x40>)
 80018e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_Init+0x40>)
 80018f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <HAL_Init+0x40>)
 80018fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 f94f 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190a:	2000      	movs	r0, #0
 800190c:	f000 f808 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001910:	f7ff fd4a 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023c00 	.word	0x40023c00

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x54>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x58>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f967 	bl	8001c12 <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800195c:	f000 f92f 	bl	8001bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_InitTick+0x5c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000000 	.word	0x20000000
 8001978:	20000008 	.word	0x20000008
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000354 	.word	0x20000354

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000354 	.word	0x20000354

080019c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff ffee 	bl	80019a8 <HAL_GetTick>
 80019cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019d8:	d005      	beq.n	80019e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_Delay+0x44>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019e6:	bf00      	nop
 80019e8:	f7ff ffde 	bl	80019a8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d8f7      	bhi.n	80019e8 <HAL_Delay+0x28>
  {
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000008 	.word	0x20000008

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4907      	ldr	r1, [pc, #28]	; (8001aa4 <__NVIC_EnableIRQ+0x38>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff29 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff3e 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff8e 	bl	8001afc <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5d 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff31 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffa2 	bl	8001b64 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e16b      	b.n	8001f20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 815a 	bne.w	8001f1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d005      	beq.n	8001c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d017      	beq.n	8001d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80b4 	beq.w	8001f1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b60      	ldr	r3, [pc, #384]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a5f      	ldr	r2, [pc, #380]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a5b      	ldr	r2, [pc, #364]	; (8001f3c <HAL_GPIO_Init+0x310>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_GPIO_Init+0x314>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d02b      	beq.n	8001e52 <HAL_GPIO_Init+0x226>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a51      	ldr	r2, [pc, #324]	; (8001f44 <HAL_GPIO_Init+0x318>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d025      	beq.n	8001e4e <HAL_GPIO_Init+0x222>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a50      	ldr	r2, [pc, #320]	; (8001f48 <HAL_GPIO_Init+0x31c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01f      	beq.n	8001e4a <HAL_GPIO_Init+0x21e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4f      	ldr	r2, [pc, #316]	; (8001f4c <HAL_GPIO_Init+0x320>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d019      	beq.n	8001e46 <HAL_GPIO_Init+0x21a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4e      	ldr	r2, [pc, #312]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0x216>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4d      	ldr	r2, [pc, #308]	; (8001f54 <HAL_GPIO_Init+0x328>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00d      	beq.n	8001e3e <HAL_GPIO_Init+0x212>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4c      	ldr	r2, [pc, #304]	; (8001f58 <HAL_GPIO_Init+0x32c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <HAL_GPIO_Init+0x20e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4b      	ldr	r2, [pc, #300]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_GPIO_Init+0x20a>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e00e      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e36:	2308      	movs	r3, #8
 8001e38:	e00c      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	e00a      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e3e:	2305      	movs	r3, #5
 8001e40:	e008      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e42:	2304      	movs	r3, #4
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e004      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e002      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e52:	2300      	movs	r3, #0
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	f002 0203 	and.w	r2, r2, #3
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	4093      	lsls	r3, r2
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e64:	4935      	ldr	r1, [pc, #212]	; (8001f3c <HAL_GPIO_Init+0x310>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e96:	4a32      	ldr	r2, [pc, #200]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e9c:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec0:	4a27      	ldr	r2, [pc, #156]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ec6:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eea:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f14:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	f67f ae90 	bls.w	8001c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40013800 	.word	0x40013800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020400 	.word	0x40020400
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	40020c00 	.word	0x40020c00
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40021400 	.word	0x40021400
 8001f58:	40021800 	.word	0x40021800
 8001f5c:	40021c00 	.word	0x40021c00
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f80:	e003      	b.n	8001f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f98:	b08f      	sub	sp, #60	; 0x3c
 8001f9a:	af0a      	add	r7, sp, #40	; 0x28
 8001f9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e054      	b.n	8002052 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f006 fc2a 	bl	800881c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 fc58 	bl	800589c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	687e      	ldr	r6, [r7, #4]
 8001ff4:	466d      	mov	r5, sp
 8001ff6:	f106 0410 	add.w	r4, r6, #16
 8001ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002002:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002006:	e885 0003 	stmia.w	r5, {r0, r1}
 800200a:	1d33      	adds	r3, r6, #4
 800200c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800200e:	6838      	ldr	r0, [r7, #0]
 8002010:	f003 fbd2 	bl	80057b8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fc4f 	bl	80058be <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	687e      	ldr	r6, [r7, #4]
 8002028:	466d      	mov	r5, sp
 800202a:	f106 0410 	add.w	r4, r6, #16
 800202e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002036:	e894 0003 	ldmia.w	r4, {r0, r1}
 800203a:	e885 0003 	stmia.w	r5, {r0, r1}
 800203e:	1d33      	adds	r3, r6, #4
 8002040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002042:	6838      	ldr	r0, [r7, #0]
 8002044:	f003 fdd8 	bl	8005bf8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800205a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800205a:	b590      	push	{r4, r7, lr}
 800205c:	b089      	sub	sp, #36	; 0x24
 800205e:	af04      	add	r7, sp, #16
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	4608      	mov	r0, r1
 8002064:	4611      	mov	r1, r2
 8002066:	461a      	mov	r2, r3
 8002068:	4603      	mov	r3, r0
 800206a:	70fb      	strb	r3, [r7, #3]
 800206c:	460b      	mov	r3, r1
 800206e:	70bb      	strb	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_HCD_HC_Init+0x28>
 800207e:	2302      	movs	r3, #2
 8002080:	e076      	b.n	8002170 <HAL_HCD_HC_Init+0x116>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	333d      	adds	r3, #61	; 0x3d
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	212c      	movs	r1, #44	; 0x2c
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	3338      	adds	r3, #56	; 0x38
 80020aa:	787a      	ldrb	r2, [r7, #1]
 80020ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3340      	adds	r3, #64	; 0x40
 80020bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020be:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3339      	adds	r3, #57	; 0x39
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	212c      	movs	r1, #44	; 0x2c
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	333f      	adds	r3, #63	; 0x3f
 80020e0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	78ba      	ldrb	r2, [r7, #2]
 80020ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ee:	b2d0      	uxtb	r0, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	333a      	adds	r3, #58	; 0x3a
 80020fc:	4602      	mov	r2, r0
 80020fe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002100:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002104:	2b00      	cmp	r3, #0
 8002106:	da09      	bge.n	800211c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	333b      	adds	r3, #59	; 0x3b
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e008      	b.n	800212e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	333b      	adds	r3, #59	; 0x3b
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	333c      	adds	r3, #60	; 0x3c
 800213c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002140:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	787c      	ldrb	r4, [r7, #1]
 8002148:	78ba      	ldrb	r2, [r7, #2]
 800214a:	78f9      	ldrb	r1, [r7, #3]
 800214c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800214e:	9302      	str	r3, [sp, #8]
 8002150:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	f897 3020 	ldrb.w	r3, [r7, #32]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4623      	mov	r3, r4
 800215e:	f003 fed1 	bl	8005f04 <USB_HC_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bd90      	pop	{r4, r7, pc}

08002178 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_HCD_HC_Halt+0x1e>
 8002192:	2302      	movs	r3, #2
 8002194:	e00f      	b.n	80021b6 <HAL_HCD_HC_Halt+0x3e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 f921 	bl	80063ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	70fb      	strb	r3, [r7, #3]
 80021d2:	460b      	mov	r3, r1
 80021d4:	70bb      	strb	r3, [r7, #2]
 80021d6:	4613      	mov	r3, r2
 80021d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	333b      	adds	r3, #59	; 0x3b
 80021e8:	78ba      	ldrb	r2, [r7, #2]
 80021ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	333f      	adds	r3, #63	; 0x3f
 80021fa:	787a      	ldrb	r2, [r7, #1]
 80021fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021fe:	7c3b      	ldrb	r3, [r7, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d112      	bne.n	800222a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	3342      	adds	r3, #66	; 0x42
 8002212:	2203      	movs	r2, #3
 8002214:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	333d      	adds	r3, #61	; 0x3d
 8002224:	7f3a      	ldrb	r2, [r7, #28]
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e008      	b.n	800223c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	3342      	adds	r3, #66	; 0x42
 8002238:	2202      	movs	r2, #2
 800223a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	2b03      	cmp	r3, #3
 8002240:	f200 80c6 	bhi.w	80023d0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002244:	a201      	add	r2, pc, #4	; (adr r2, 800224c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	0800225d 	.word	0x0800225d
 8002250:	080023bd 	.word	0x080023bd
 8002254:	080022c1 	.word	0x080022c1
 8002258:	0800233f 	.word	0x0800233f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800225c:	7c3b      	ldrb	r3, [r7, #16]
 800225e:	2b01      	cmp	r3, #1
 8002260:	f040 80b8 	bne.w	80023d4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002264:	78bb      	ldrb	r3, [r7, #2]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 80b4 	bne.w	80023d4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800226c:	8b3b      	ldrh	r3, [r7, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	3355      	adds	r3, #85	; 0x55
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3355      	adds	r3, #85	; 0x55
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3342      	adds	r3, #66	; 0x42
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022aa:	e093      	b.n	80023d4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3342      	adds	r3, #66	; 0x42
 80022ba:	2202      	movs	r2, #2
 80022bc:	701a      	strb	r2, [r3, #0]
      break;
 80022be:	e089      	b.n	80023d4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022c0:	78bb      	ldrb	r3, [r7, #2]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d11d      	bne.n	8002302 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3355      	adds	r3, #85	; 0x55
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3342      	adds	r3, #66	; 0x42
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022ec:	e073      	b.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	3342      	adds	r3, #66	; 0x42
 80022fc:	2202      	movs	r2, #2
 80022fe:	701a      	strb	r2, [r3, #0]
      break;
 8002300:	e069      	b.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	3354      	adds	r3, #84	; 0x54
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	3342      	adds	r3, #66	; 0x42
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
      break;
 8002328:	e055      	b.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3342      	adds	r3, #66	; 0x42
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]
      break;
 800233c:	e04b      	b.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800233e:	78bb      	ldrb	r3, [r7, #2]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11d      	bne.n	8002380 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3355      	adds	r3, #85	; 0x55
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3342      	adds	r3, #66	; 0x42
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800236a:	e034      	b.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3342      	adds	r3, #66	; 0x42
 800237a:	2202      	movs	r2, #2
 800237c:	701a      	strb	r2, [r3, #0]
      break;
 800237e:	e02a      	b.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3354      	adds	r3, #84	; 0x54
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3342      	adds	r3, #66	; 0x42
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
      break;
 80023a6:	e016      	b.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3342      	adds	r3, #66	; 0x42
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]
      break;
 80023ba:	e00c      	b.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3342      	adds	r3, #66	; 0x42
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
      break;
 80023ce:	e002      	b.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80023d0:	bf00      	nop
 80023d2:	e000      	b.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80023d4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	3344      	adds	r3, #68	; 0x44
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	8b3a      	ldrh	r2, [r7, #24]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	202c      	movs	r0, #44	; 0x2c
 80023f0:	fb00 f303 	mul.w	r3, r0, r3
 80023f4:	440b      	add	r3, r1
 80023f6:	334c      	adds	r3, #76	; 0x4c
 80023f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	3360      	adds	r3, #96	; 0x60
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	212c      	movs	r1, #44	; 0x2c
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	4413      	add	r3, r2
 8002418:	3350      	adds	r3, #80	; 0x50
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3339      	adds	r3, #57	; 0x39
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3361      	adds	r3, #97	; 0x61
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	222c      	movs	r2, #44	; 0x2c
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	3338      	adds	r3, #56	; 0x38
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	18d1      	adds	r1, r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	f003 fe74 	bl	8006148 <USB_HC_StartXfer>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop

0800246c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fb75 	bl	8005b72 <USB_GetMode>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	f040 80f6 	bne.w	800267c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f003 fb59 	bl	8005b4c <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80ec 	beq.w	800267a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 fb50 	bl	8005b4c <USB_ReadInterrupts>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024b6:	d104      	bne.n	80024c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 fb40 	bl	8005b4c <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d6:	d104      	bne.n	80024e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 fb30 	bl	8005b4c <USB_ReadInterrupts>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024f6:	d104      	bne.n	8002502 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002500:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f003 fb20 	bl	8005b4c <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b02      	cmp	r3, #2
 8002514:	d103      	bne.n	800251e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2202      	movs	r2, #2
 800251c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fb12 	bl	8005b4c <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800252e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002532:	d11c      	bne.n	800256e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800253c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800254e:	2110      	movs	r1, #16
 8002550:	6938      	ldr	r0, [r7, #16]
 8002552:	f003 fa01 	bl	8005958 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002556:	6938      	ldr	r0, [r7, #16]
 8002558:	f003 fa32 	bl	80059c0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fc08 	bl	8005d78 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f006 f9d5 	bl	8008918 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f003 faea 	bl	8005b4c <USB_ReadInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002582:	d102      	bne.n	800258a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f001 f89e 	bl	80036c6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fadc 	bl	8005b4c <USB_ReadInterrupts>
 8002594:	4603      	mov	r3, r0
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b08      	cmp	r3, #8
 800259c:	d106      	bne.n	80025ac <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f006 f99e 	bl	80088e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2208      	movs	r2, #8
 80025aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 facb 	bl	8005b4c <USB_ReadInterrupts>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b10      	cmp	r3, #16
 80025be:	d101      	bne.n	80025c4 <HAL_HCD_IRQHandler+0x158>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_HCD_IRQHandler+0x15a>
 80025c4:	2300      	movs	r3, #0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d012      	beq.n	80025f0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699a      	ldr	r2, [r3, #24]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0210 	bic.w	r2, r2, #16
 80025d8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 ffa1 	bl	8003522 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0210 	orr.w	r2, r2, #16
 80025ee:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 faa9 	bl	8005b4c <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002604:	d13a      	bne.n	800267c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fede 	bl	80063cc <USB_HC_ReadInterrupt>
 8002610:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e025      	b.n	8002664 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d018      	beq.n	800265e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800263e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002642:	d106      	bne.n	8002652 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f8ab 	bl	80027a6 <HCD_HC_IN_IRQHandler>
 8002650:	e005      	b.n	800265e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fbf9 	bl	8002e50 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3301      	adds	r3, #1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	429a      	cmp	r2, r3
 800266c:	d3d4      	bcc.n	8002618 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002676:	615a      	str	r2, [r3, #20]
 8002678:	e000      	b.n	800267c <HAL_HCD_IRQHandler+0x210>
      return;
 800267a:	bf00      	nop
    }
  }
}
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_HCD_Start+0x16>
 8002694:	2302      	movs	r3, #2
 8002696:	e013      	b.n	80026c0 <HAL_HCD_Start+0x3e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 fbca 	bl	8005e40 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 f8e2 	bl	800587a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_HCD_Stop+0x16>
 80026da:	2302      	movs	r3, #2
 80026dc:	e00d      	b.n	80026fa <HAL_HCD_Stop+0x32>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 ffb8 	bl	8006660 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f003 fb6c 	bl	8005dec <USB_ResetPort>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	3360      	adds	r3, #96	; 0x60
 8002738:	781b      	ldrb	r3, [r3, #0]
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	3350      	adds	r3, #80	; 0x50
 8002760:	681b      	ldr	r3, [r3, #0]
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fbb0 	bl	8005ee0 <USB_GetCurrentFrame>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f003 fb8b 	bl	8005eb2 <USB_GetHostSpeed>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d11a      	bne.n	800280c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	461a      	mov	r2, r3
 80027e4:	2304      	movs	r3, #4
 80027e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3361      	adds	r3, #97	; 0x61
 80027f6:	2206      	movs	r2, #6
 80027f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f003 fdf2 	bl	80063ee <USB_HC_Halt>
 800280a:	e0af      	b.n	800296c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002822:	d11b      	bne.n	800285c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002836:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	212c      	movs	r1, #44	; 0x2c
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	4413      	add	r3, r2
 8002844:	3361      	adds	r3, #97	; 0x61
 8002846:	2207      	movs	r2, #7
 8002848:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f003 fdca 	bl	80063ee <USB_HC_Halt>
 800285a:	e087      	b.n	800296c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b20      	cmp	r3, #32
 8002870:	d109      	bne.n	8002886 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	461a      	mov	r2, r3
 8002880:	2320      	movs	r3, #32
 8002882:	6093      	str	r3, [r2, #8]
 8002884:	e072      	b.n	800296c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b08      	cmp	r3, #8
 800289a:	d11a      	bne.n	80028d2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	461a      	mov	r2, r3
 80028aa:	2308      	movs	r3, #8
 80028ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3361      	adds	r3, #97	; 0x61
 80028bc:	2205      	movs	r2, #5
 80028be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fd8f 	bl	80063ee <USB_HC_Halt>
 80028d0:	e04c      	b.n	800296c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e8:	d11b      	bne.n	8002922 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	461a      	mov	r2, r3
 80028f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3361      	adds	r3, #97	; 0x61
 800290c:	2208      	movs	r2, #8
 800290e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fd67 	bl	80063ee <USB_HC_Halt>
 8002920:	e024      	b.n	800296c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002934:	2b80      	cmp	r3, #128	; 0x80
 8002936:	d119      	bne.n	800296c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	461a      	mov	r2, r3
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3361      	adds	r3, #97	; 0x61
 8002958:	2206      	movs	r2, #6
 800295a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f003 fd41 	bl	80063ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800297e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002982:	d112      	bne.n	80029aa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f003 fd2d 	bl	80063ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	461a      	mov	r2, r3
 80029a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029a6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80029a8:	e24e      	b.n	8002e48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	f040 80df 	bne.w	8002b80 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d019      	beq.n	80029fe <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3348      	adds	r3, #72	; 0x48
 80029d8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0159      	lsls	r1, r3, #5
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	440b      	add	r3, r1
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029ec:	1ad2      	subs	r2, r2, r3
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	202c      	movs	r0, #44	; 0x2c
 80029f4:	fb00 f303 	mul.w	r3, r0, r3
 80029f8:	440b      	add	r3, r1
 80029fa:	3350      	adds	r3, #80	; 0x50
 80029fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3361      	adds	r3, #97	; 0x61
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	335c      	adds	r3, #92	; 0x5c
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2301      	movs	r3, #1
 8002a32:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	333f      	adds	r3, #63	; 0x3f
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	333f      	adds	r3, #63	; 0x3f
 8002a56:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d111      	bne.n	8002a80 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fcc1 	bl	80063ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2310      	movs	r3, #16
 8002a7c:	6093      	str	r3, [r2, #8]
 8002a7e:	e03a      	b.n	8002af6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	333f      	adds	r3, #63	; 0x3f
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d009      	beq.n	8002aa8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	333f      	adds	r3, #63	; 0x3f
 8002aa2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d126      	bne.n	8002af6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	0151      	lsls	r1, r2, #5
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	440a      	add	r2, r1
 8002abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ac6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3360      	adds	r3, #96	; 0x60
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	b2d9      	uxtb	r1, r3
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	202c      	movs	r0, #44	; 0x2c
 8002ae4:	fb00 f303 	mul.w	r3, r0, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3360      	adds	r3, #96	; 0x60
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f005 ff1f 	bl	8008934 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d12b      	bne.n	8002b56 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3348      	adds	r3, #72	; 0x48
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	202c      	movs	r0, #44	; 0x2c
 8002b14:	fb00 f202 	mul.w	r2, r0, r2
 8002b18:	440a      	add	r2, r1
 8002b1a:	3240      	adds	r2, #64	; 0x40
 8002b1c:	8812      	ldrh	r2, [r2, #0]
 8002b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 818e 	beq.w	8002e48 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3354      	adds	r3, #84	; 0x54
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	f083 0301 	eor.w	r3, r3, #1
 8002b40:	b2d8      	uxtb	r0, r3
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3354      	adds	r3, #84	; 0x54
 8002b50:	4602      	mov	r2, r0
 8002b52:	701a      	strb	r2, [r3, #0]
}
 8002b54:	e178      	b.n	8002e48 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3354      	adds	r3, #84	; 0x54
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	f083 0301 	eor.w	r3, r3, #1
 8002b6a:	b2d8      	uxtb	r0, r3
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	212c      	movs	r1, #44	; 0x2c
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	3354      	adds	r3, #84	; 0x54
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	701a      	strb	r2, [r3, #0]
}
 8002b7e:	e163      	b.n	8002e48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	f040 80f6 	bne.w	8002d84 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3361      	adds	r3, #97	; 0x61
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d109      	bne.n	8002bc0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3360      	adds	r3, #96	; 0x60
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e0c9      	b.n	8002d54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3361      	adds	r3, #97	; 0x61
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d109      	bne.n	8002be8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3360      	adds	r3, #96	; 0x60
 8002be2:	2205      	movs	r2, #5
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	e0b5      	b.n	8002d54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3361      	adds	r3, #97	; 0x61
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b06      	cmp	r3, #6
 8002bfa:	d009      	beq.n	8002c10 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3361      	adds	r3, #97	; 0x61
 8002c0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d150      	bne.n	8002cb2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	335c      	adds	r3, #92	; 0x5c
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	202c      	movs	r0, #44	; 0x2c
 8002c28:	fb00 f303 	mul.w	r3, r0, r3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	335c      	adds	r3, #92	; 0x5c
 8002c30:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	335c      	adds	r3, #92	; 0x5c
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d912      	bls.n	8002c6c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	335c      	adds	r3, #92	; 0x5c
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3360      	adds	r3, #96	; 0x60
 8002c66:	2204      	movs	r2, #4
 8002c68:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c6a:	e073      	b.n	8002d54 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3360      	adds	r3, #96	; 0x60
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c94:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c9c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cb0:	e050      	b.n	8002d54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3361      	adds	r3, #97	; 0x61
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d122      	bne.n	8002d0c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3360      	adds	r3, #96	; 0x60
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cf6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	461a      	mov	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e023      	b.n	8002d54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3361      	adds	r3, #97	; 0x61
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b07      	cmp	r3, #7
 8002d1e:	d119      	bne.n	8002d54 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	335c      	adds	r3, #92	; 0x5c
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	202c      	movs	r0, #44	; 0x2c
 8002d38:	fb00 f303 	mul.w	r3, r0, r3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	335c      	adds	r3, #92	; 0x5c
 8002d40:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3360      	adds	r3, #96	; 0x60
 8002d50:	2204      	movs	r2, #4
 8002d52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	461a      	mov	r2, r3
 8002d62:	2302      	movs	r3, #2
 8002d64:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	b2d9      	uxtb	r1, r3
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	202c      	movs	r0, #44	; 0x2c
 8002d70:	fb00 f303 	mul.w	r3, r0, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3360      	adds	r3, #96	; 0x60
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f005 fdd9 	bl	8008934 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d82:	e061      	b.n	8002e48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d156      	bne.n	8002e48 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	333f      	adds	r3, #63	; 0x3f
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d111      	bne.n	8002dd2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	335c      	adds	r3, #92	; 0x5c
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 fb0f 	bl	80063ee <USB_HC_Halt>
 8002dd0:	e031      	b.n	8002e36 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	333f      	adds	r3, #63	; 0x3f
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	333f      	adds	r3, #63	; 0x3f
 8002df4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d11d      	bne.n	8002e36 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	335c      	adds	r3, #92	; 0x5c
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d110      	bne.n	8002e36 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3361      	adds	r3, #97	; 0x61
 8002e22:	2203      	movs	r2, #3
 8002e24:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f003 fadc 	bl	80063ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e42:	461a      	mov	r2, r3
 8002e44:	2310      	movs	r3, #16
 8002e46:	6093      	str	r3, [r2, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d11a      	bne.n	8002eb6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2304      	movs	r3, #4
 8002e90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3361      	adds	r3, #97	; 0x61
 8002ea0:	2206      	movs	r2, #6
 8002ea2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 fa9d 	bl	80063ee <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002eb4:	e331      	b.n	800351a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d12e      	bne.n	8002f2a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2320      	movs	r3, #32
 8002edc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	333d      	adds	r3, #61	; 0x3d
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	f040 8313 	bne.w	800351a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	333d      	adds	r3, #61	; 0x3d
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3360      	adds	r3, #96	; 0x60
 8002f14:	2202      	movs	r2, #2
 8002f16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f003 fa63 	bl	80063ee <USB_HC_Halt>
}
 8002f28:	e2f7      	b.n	800351a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f40:	d112      	bne.n	8002f68 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fa44 	bl	80063ee <USB_HC_Halt>
}
 8002f66:	e2d8      	b.n	800351a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d140      	bne.n	8003000 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	335c      	adds	r3, #92	; 0x5c
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa2:	2b40      	cmp	r3, #64	; 0x40
 8002fa4:	d111      	bne.n	8002fca <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	333d      	adds	r3, #61	; 0x3d
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2340      	movs	r3, #64	; 0x40
 8002fc8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2301      	movs	r3, #1
 8002fda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3361      	adds	r3, #97	; 0x61
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f003 f9f8 	bl	80063ee <USB_HC_Halt>
}
 8002ffe:	e28c      	b.n	800351a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d12c      	bne.n	8003070 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3361      	adds	r3, #97	; 0x61
 8003024:	2204      	movs	r2, #4
 8003026:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	333d      	adds	r3, #61	; 0x3d
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	335c      	adds	r3, #92	; 0x5c
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f003 f9c9 	bl	80063ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003068:	461a      	mov	r2, r3
 800306a:	2340      	movs	r3, #64	; 0x40
 800306c:	6093      	str	r3, [r2, #8]
}
 800306e:	e254      	b.n	800351a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b08      	cmp	r3, #8
 8003084:	d11a      	bne.n	80030bc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	461a      	mov	r2, r3
 8003094:	2308      	movs	r3, #8
 8003096:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3361      	adds	r3, #97	; 0x61
 80030a6:	2205      	movs	r2, #5
 80030a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 f99a 	bl	80063ee <USB_HC_Halt>
}
 80030ba:	e22e      	b.n	800351a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d140      	bne.n	8003154 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	212c      	movs	r1, #44	; 0x2c
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	335c      	adds	r3, #92	; 0x5c
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3361      	adds	r3, #97	; 0x61
 80030f2:	2203      	movs	r2, #3
 80030f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	212c      	movs	r1, #44	; 0x2c
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	4413      	add	r3, r2
 8003102:	333d      	adds	r3, #61	; 0x3d
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d112      	bne.n	8003130 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	333c      	adds	r3, #60	; 0x3c
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d108      	bne.n	8003130 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	212c      	movs	r1, #44	; 0x2c
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	333d      	adds	r3, #61	; 0x3d
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f003 f957 	bl	80063ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	461a      	mov	r2, r3
 800314e:	2310      	movs	r3, #16
 8003150:	6093      	str	r3, [r2, #8]
}
 8003152:	e1e2      	b.n	800351a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b80      	cmp	r3, #128	; 0x80
 8003168:	d164      	bne.n	8003234 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d111      	bne.n	8003196 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	3361      	adds	r3, #97	; 0x61
 8003180:	2206      	movs	r2, #6
 8003182:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f003 f92d 	bl	80063ee <USB_HC_Halt>
 8003194:	e044      	b.n	8003220 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	335c      	adds	r3, #92	; 0x5c
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	202c      	movs	r0, #44	; 0x2c
 80031ae:	fb00 f303 	mul.w	r3, r0, r3
 80031b2:	440b      	add	r3, r1
 80031b4:	335c      	adds	r3, #92	; 0x5c
 80031b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	335c      	adds	r3, #92	; 0x5c
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d920      	bls.n	800320e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	335c      	adds	r3, #92	; 0x5c
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	3360      	adds	r3, #96	; 0x60
 80031ec:	2204      	movs	r2, #4
 80031ee:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	b2d9      	uxtb	r1, r3
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	202c      	movs	r0, #44	; 0x2c
 80031fa:	fb00 f303 	mul.w	r3, r0, r3
 80031fe:	4413      	add	r3, r2
 8003200:	3360      	adds	r3, #96	; 0x60
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f005 fb94 	bl	8008934 <HAL_HCD_HC_NotifyURBChange_Callback>
 800320c:	e008      	b.n	8003220 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	212c      	movs	r1, #44	; 0x2c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3360      	adds	r3, #96	; 0x60
 800321c:	2202      	movs	r2, #2
 800321e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	461a      	mov	r2, r3
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	6093      	str	r3, [r2, #8]
}
 8003232:	e172      	b.n	800351a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324a:	d11b      	bne.n	8003284 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3361      	adds	r3, #97	; 0x61
 800325a:	2208      	movs	r2, #8
 800325c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f003 f8c0 	bl	80063ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327a:	461a      	mov	r2, r3
 800327c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003280:	6093      	str	r3, [r2, #8]
}
 8003282:	e14a      	b.n	800351a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b02      	cmp	r3, #2
 8003298:	f040 813f 	bne.w	800351a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3361      	adds	r3, #97	; 0x61
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d17d      	bne.n	80033ac <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3360      	adds	r3, #96	; 0x60
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	333f      	adds	r3, #63	; 0x3f
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d00a      	beq.n	80032ec <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	212c      	movs	r1, #44	; 0x2c
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	333f      	adds	r3, #63	; 0x3f
 80032e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	f040 8100 	bne.w	80034ec <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d113      	bne.n	800331c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3355      	adds	r3, #85	; 0x55
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	f083 0301 	eor.w	r3, r3, #1
 8003308:	b2d8      	uxtb	r0, r3
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	3355      	adds	r3, #85	; 0x55
 8003318:	4602      	mov	r2, r0
 800331a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b01      	cmp	r3, #1
 8003322:	f040 80e3 	bne.w	80034ec <HCD_HC_OUT_IRQHandler+0x69c>
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	334c      	adds	r3, #76	; 0x4c
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 80d8 	beq.w	80034ec <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	334c      	adds	r3, #76	; 0x4c
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	202c      	movs	r0, #44	; 0x2c
 8003352:	fb00 f202 	mul.w	r2, r0, r2
 8003356:	440a      	add	r2, r1
 8003358:	3240      	adds	r2, #64	; 0x40
 800335a:	8812      	ldrh	r2, [r2, #0]
 800335c:	4413      	add	r3, r2
 800335e:	3b01      	subs	r3, #1
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	202c      	movs	r0, #44	; 0x2c
 8003366:	fb00 f202 	mul.w	r2, r0, r2
 800336a:	440a      	add	r2, r1
 800336c:	3240      	adds	r2, #64	; 0x40
 800336e:	8812      	ldrh	r2, [r2, #0]
 8003370:	fbb3 f3f2 	udiv	r3, r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80b5 	beq.w	80034ec <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3355      	adds	r3, #85	; 0x55
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	f083 0301 	eor.w	r3, r3, #1
 8003396:	b2d8      	uxtb	r0, r3
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	3355      	adds	r3, #85	; 0x55
 80033a6:	4602      	mov	r2, r0
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e09f      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3361      	adds	r3, #97	; 0x61
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d109      	bne.n	80033d4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	212c      	movs	r1, #44	; 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	3360      	adds	r3, #96	; 0x60
 80033ce:	2202      	movs	r2, #2
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	e08b      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3361      	adds	r3, #97	; 0x61
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d109      	bne.n	80033fc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	212c      	movs	r1, #44	; 0x2c
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3360      	adds	r3, #96	; 0x60
 80033f6:	2202      	movs	r2, #2
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e077      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3361      	adds	r3, #97	; 0x61
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b05      	cmp	r3, #5
 800340e:	d109      	bne.n	8003424 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	3360      	adds	r3, #96	; 0x60
 800341e:	2205      	movs	r2, #5
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e063      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3361      	adds	r3, #97	; 0x61
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b06      	cmp	r3, #6
 8003436:	d009      	beq.n	800344c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	212c      	movs	r1, #44	; 0x2c
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	3361      	adds	r3, #97	; 0x61
 8003446:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003448:	2b08      	cmp	r3, #8
 800344a:	d14f      	bne.n	80034ec <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	335c      	adds	r3, #92	; 0x5c
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	202c      	movs	r0, #44	; 0x2c
 8003464:	fb00 f303 	mul.w	r3, r0, r3
 8003468:	440b      	add	r3, r1
 800346a:	335c      	adds	r3, #92	; 0x5c
 800346c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	335c      	adds	r3, #92	; 0x5c
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d912      	bls.n	80034a8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	335c      	adds	r3, #92	; 0x5c
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3360      	adds	r3, #96	; 0x60
 80034a2:	2204      	movs	r2, #4
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e021      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3360      	adds	r3, #96	; 0x60
 80034b6:	2202      	movs	r2, #2
 80034b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034d0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034d8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e6:	461a      	mov	r2, r3
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	461a      	mov	r2, r3
 80034fa:	2302      	movs	r3, #2
 80034fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	b2d9      	uxtb	r1, r3
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	202c      	movs	r0, #44	; 0x2c
 8003508:	fb00 f303 	mul.w	r3, r0, r3
 800350c:	4413      	add	r3, r2
 800350e:	3360      	adds	r3, #96	; 0x60
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f005 fa0d 	bl	8008934 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800351a:	bf00      	nop
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b08a      	sub	sp, #40	; 0x28
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	0c5b      	lsrs	r3, r3, #17
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003556:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d004      	beq.n	8003568 <HCD_RXQLVL_IRQHandler+0x46>
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b05      	cmp	r3, #5
 8003562:	f000 80a9 	beq.w	80036b8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003566:	e0aa      	b.n	80036be <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80a6 	beq.w	80036bc <HCD_RXQLVL_IRQHandler+0x19a>
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	212c      	movs	r1, #44	; 0x2c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	3344      	adds	r3, #68	; 0x44
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 809b 	beq.w	80036bc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	212c      	movs	r1, #44	; 0x2c
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	3350      	adds	r3, #80	; 0x50
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	441a      	add	r2, r3
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	202c      	movs	r0, #44	; 0x2c
 80035a0:	fb00 f303 	mul.w	r3, r0, r3
 80035a4:	440b      	add	r3, r1
 80035a6:	334c      	adds	r3, #76	; 0x4c
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d87a      	bhi.n	80036a4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	4413      	add	r3, r2
 80035be:	3344      	adds	r3, #68	; 0x44
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	b292      	uxth	r2, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	f002 fa68 	bl	8005a9c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	212c      	movs	r1, #44	; 0x2c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	3344      	adds	r3, #68	; 0x44
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	441a      	add	r2, r3
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	202c      	movs	r0, #44	; 0x2c
 80035e6:	fb00 f303 	mul.w	r3, r0, r3
 80035ea:	440b      	add	r3, r1
 80035ec:	3344      	adds	r3, #68	; 0x44
 80035ee:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3350      	adds	r3, #80	; 0x50
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	441a      	add	r2, r3
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	202c      	movs	r0, #44	; 0x2c
 800360a:	fb00 f303 	mul.w	r3, r0, r3
 800360e:	440b      	add	r3, r1
 8003610:	3350      	adds	r3, #80	; 0x50
 8003612:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	0cdb      	lsrs	r3, r3, #19
 8003624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003628:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	212c      	movs	r1, #44	; 0x2c
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	3340      	adds	r3, #64	; 0x40
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4293      	cmp	r3, r2
 8003640:	d13c      	bne.n	80036bc <HCD_RXQLVL_IRQHandler+0x19a>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d039      	beq.n	80036bc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800365e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003666:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003674:	461a      	mov	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	3354      	adds	r3, #84	; 0x54
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	f083 0301 	eor.w	r3, r3, #1
 800368e:	b2d8      	uxtb	r0, r3
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3354      	adds	r3, #84	; 0x54
 800369e:	4602      	mov	r2, r0
 80036a0:	701a      	strb	r2, [r3, #0]
      break;
 80036a2:	e00b      	b.n	80036bc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3360      	adds	r3, #96	; 0x60
 80036b2:	2204      	movs	r2, #4
 80036b4:	701a      	strb	r2, [r3, #0]
      break;
 80036b6:	e001      	b.n	80036bc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80036bc:	bf00      	nop
  }
}
 80036be:	bf00      	nop
 80036c0:	3728      	adds	r7, #40	; 0x28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80036f2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d10b      	bne.n	8003716 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d102      	bne.n	800370e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f005 f8f7 	bl	80088fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f043 0302 	orr.w	r3, r3, #2
 8003714:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d132      	bne.n	8003786 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f043 0308 	orr.w	r3, r3, #8
 8003726:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b04      	cmp	r3, #4
 8003730:	d126      	bne.n	8003780 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d113      	bne.n	8003762 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003740:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003744:	d106      	bne.n	8003754 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2102      	movs	r1, #2
 800374c:	4618      	mov	r0, r3
 800374e:	f002 fb13 	bl	8005d78 <USB_InitFSLSPClkSel>
 8003752:	e011      	b.n	8003778 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2101      	movs	r1, #1
 800375a:	4618      	mov	r0, r3
 800375c:	f002 fb0c 	bl	8005d78 <USB_InitFSLSPClkSel>
 8003760:	e00a      	b.n	8003778 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d106      	bne.n	8003778 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003770:	461a      	mov	r2, r3
 8003772:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003776:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f005 f8e9 	bl	8008950 <HAL_HCD_PortEnabled_Callback>
 800377e:	e002      	b.n	8003786 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f005 f8f3 	bl	800896c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b20      	cmp	r3, #32
 800378e:	d103      	bne.n	8003798 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f043 0320 	orr.w	r3, r3, #32
 8003796:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800379e:	461a      	mov	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	6013      	str	r3, [r2, #0]
}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e12b      	b.n	8003a16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fd fe10 	bl	80013f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2224      	movs	r2, #36	; 0x24
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800380e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003810:	f001 fa20 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8003814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4a81      	ldr	r2, [pc, #516]	; (8003a20 <HAL_I2C_Init+0x274>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d807      	bhi.n	8003830 <HAL_I2C_Init+0x84>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a80      	ldr	r2, [pc, #512]	; (8003a24 <HAL_I2C_Init+0x278>)
 8003824:	4293      	cmp	r3, r2
 8003826:	bf94      	ite	ls
 8003828:	2301      	movls	r3, #1
 800382a:	2300      	movhi	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e006      	b.n	800383e <HAL_I2C_Init+0x92>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a7d      	ldr	r2, [pc, #500]	; (8003a28 <HAL_I2C_Init+0x27c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	bf94      	ite	ls
 8003838:	2301      	movls	r3, #1
 800383a:	2300      	movhi	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0e7      	b.n	8003a16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a78      	ldr	r2, [pc, #480]	; (8003a2c <HAL_I2C_Init+0x280>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	0c9b      	lsrs	r3, r3, #18
 8003850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4a6a      	ldr	r2, [pc, #424]	; (8003a20 <HAL_I2C_Init+0x274>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d802      	bhi.n	8003880 <HAL_I2C_Init+0xd4>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	3301      	adds	r3, #1
 800387e:	e009      	b.n	8003894 <HAL_I2C_Init+0xe8>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	4a69      	ldr	r2, [pc, #420]	; (8003a30 <HAL_I2C_Init+0x284>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	099b      	lsrs	r3, r3, #6
 8003892:	3301      	adds	r3, #1
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	430b      	orrs	r3, r1
 800389a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	495c      	ldr	r1, [pc, #368]	; (8003a20 <HAL_I2C_Init+0x274>)
 80038b0:	428b      	cmp	r3, r1
 80038b2:	d819      	bhi.n	80038e8 <HAL_I2C_Init+0x13c>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e59      	subs	r1, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c2:	1c59      	adds	r1, r3, #1
 80038c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038c8:	400b      	ands	r3, r1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_I2C_Init+0x138>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1e59      	subs	r1, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e2:	e051      	b.n	8003988 <HAL_I2C_Init+0x1dc>
 80038e4:	2304      	movs	r3, #4
 80038e6:	e04f      	b.n	8003988 <HAL_I2C_Init+0x1dc>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d111      	bne.n	8003914 <HAL_I2C_Init+0x168>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e58      	subs	r0, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	440b      	add	r3, r1
 80038fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003902:	3301      	adds	r3, #1
 8003904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e012      	b.n	800393a <HAL_I2C_Init+0x18e>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e58      	subs	r0, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	0099      	lsls	r1, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	fbb0 f3f3 	udiv	r3, r0, r3
 800392a:	3301      	adds	r3, #1
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Init+0x196>
 800393e:	2301      	movs	r3, #1
 8003940:	e022      	b.n	8003988 <HAL_I2C_Init+0x1dc>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10e      	bne.n	8003968 <HAL_I2C_Init+0x1bc>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1e58      	subs	r0, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6859      	ldr	r1, [r3, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	440b      	add	r3, r1
 8003958:	fbb0 f3f3 	udiv	r3, r0, r3
 800395c:	3301      	adds	r3, #1
 800395e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003966:	e00f      	b.n	8003988 <HAL_I2C_Init+0x1dc>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1e58      	subs	r0, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	0099      	lsls	r1, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	fbb0 f3f3 	udiv	r3, r0, r3
 800397e:	3301      	adds	r3, #1
 8003980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	6809      	ldr	r1, [r1, #0]
 800398c:	4313      	orrs	r3, r2
 800398e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6911      	ldr	r1, [r2, #16]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68d2      	ldr	r2, [r2, #12]
 80039c2:	4311      	orrs	r1, r2
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	000186a0 	.word	0x000186a0
 8003a24:	001e847f 	.word	0x001e847f
 8003a28:	003d08ff 	.word	0x003d08ff
 8003a2c:	431bde83 	.word	0x431bde83
 8003a30:	10624dd3 	.word	0x10624dd3

08003a34 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e128      	b.n	8003c98 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a90      	ldr	r2, [pc, #576]	; (8003ca0 <HAL_I2S_Init+0x26c>)
 8003a5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fd fd11 	bl	8001488 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a7c:	f023 030f 	bic.w	r3, r3, #15
 8003a80:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2202      	movs	r2, #2
 8003a88:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d060      	beq.n	8003b54 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d102      	bne.n	8003aa0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a9a:	2310      	movs	r3, #16
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e001      	b.n	8003aa4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003aa0:	2320      	movs	r3, #32
 8003aa2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d802      	bhi.n	8003ab2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	f001 f9d8 	bl	8004e68 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ab8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac2:	d125      	bne.n	8003b10 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d010      	beq.n	8003aee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	461a      	mov	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	3305      	adds	r3, #5
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	e01f      	b.n	8003b2e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	461a      	mov	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0a:	3305      	adds	r3, #5
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	e00e      	b.n	8003b2e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	461a      	mov	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	3305      	adds	r3, #5
 8003b2c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4a5c      	ldr	r2, [pc, #368]	; (8003ca4 <HAL_I2S_Init+0x270>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	08db      	lsrs	r3, r3, #3
 8003b38:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	e003      	b.n	8003b5c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b54:	2302      	movs	r3, #2
 8003b56:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d902      	bls.n	8003b68 <HAL_I2S_Init+0x134>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	2bff      	cmp	r3, #255	; 0xff
 8003b66:	d907      	bls.n	8003b78 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	f043 0210 	orr.w	r2, r3, #16
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e08f      	b.n	8003c98 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	ea42 0103 	orr.w	r1, r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b96:	f023 030f 	bic.w	r3, r3, #15
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6851      	ldr	r1, [r2, #4]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6892      	ldr	r2, [r2, #8]
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68d2      	ldr	r2, [r2, #12]
 8003ba8:	4311      	orrs	r1, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6992      	ldr	r2, [r2, #24]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d161      	bne.n	8003c88 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a38      	ldr	r2, [pc, #224]	; (8003ca8 <HAL_I2S_Init+0x274>)
 8003bc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a37      	ldr	r2, [pc, #220]	; (8003cac <HAL_I2S_Init+0x278>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d101      	bne.n	8003bd8 <HAL_I2S_Init+0x1a4>
 8003bd4:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <HAL_I2S_Init+0x27c>)
 8003bd6:	e001      	b.n	8003bdc <HAL_I2S_Init+0x1a8>
 8003bd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	4932      	ldr	r1, [pc, #200]	; (8003cac <HAL_I2S_Init+0x278>)
 8003be4:	428a      	cmp	r2, r1
 8003be6:	d101      	bne.n	8003bec <HAL_I2S_Init+0x1b8>
 8003be8:	4a31      	ldr	r2, [pc, #196]	; (8003cb0 <HAL_I2S_Init+0x27c>)
 8003bea:	e001      	b.n	8003bf0 <HAL_I2S_Init+0x1bc>
 8003bec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003bf0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bf4:	f023 030f 	bic.w	r3, r3, #15
 8003bf8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2b      	ldr	r2, [pc, #172]	; (8003cac <HAL_I2S_Init+0x278>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_I2S_Init+0x1d4>
 8003c04:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <HAL_I2S_Init+0x27c>)
 8003c06:	e001      	b.n	8003c0c <HAL_I2S_Init+0x1d8>
 8003c08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a25      	ldr	r2, [pc, #148]	; (8003cac <HAL_I2S_Init+0x278>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d101      	bne.n	8003c1e <HAL_I2S_Init+0x1ea>
 8003c1a:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <HAL_I2S_Init+0x27c>)
 8003c1c:	e001      	b.n	8003c22 <HAL_I2S_Init+0x1ee>
 8003c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2e:	d003      	beq.n	8003c38 <HAL_I2S_Init+0x204>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d103      	bne.n	8003c40 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e001      	b.n	8003c44 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c62:	4313      	orrs	r3, r2
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	897b      	ldrh	r3, [r7, #10]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c70:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <HAL_I2S_Init+0x278>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d101      	bne.n	8003c80 <HAL_I2S_Init+0x24c>
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <HAL_I2S_Init+0x27c>)
 8003c7e:	e001      	b.n	8003c84 <HAL_I2S_Init+0x250>
 8003c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c84:	897a      	ldrh	r2, [r7, #10]
 8003c86:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	08003dab 	.word	0x08003dab
 8003ca4:	cccccccd 	.word	0xcccccccd
 8003ca8:	08003ec1 	.word	0x08003ec1
 8003cac:	40003800 	.word	0x40003800
 8003cb0:	40003400 	.word	0x40003400

08003cb4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	881a      	ldrh	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c9a      	adds	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10e      	bne.n	8003d44 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d34:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ffb8 	bl	8003cb4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	b292      	uxth	r2, r2
 8003d60:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	1c9a      	adds	r2, r3, #2
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10e      	bne.n	8003da2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d92:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff ff93 	bl	8003cc8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d13a      	bne.n	8003e3c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d109      	bne.n	8003de4 <I2S_IRQHandler+0x3a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dda:	2b40      	cmp	r3, #64	; 0x40
 8003ddc:	d102      	bne.n	8003de4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ffb4 	bl	8003d4c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dea:	2b40      	cmp	r3, #64	; 0x40
 8003dec:	d126      	bne.n	8003e3c <I2S_IRQHandler+0x92>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d11f      	bne.n	8003e3c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f043 0202 	orr.w	r2, r3, #2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ff50 	bl	8003cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d136      	bne.n	8003eb6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d109      	bne.n	8003e66 <I2S_IRQHandler+0xbc>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b80      	cmp	r3, #128	; 0x80
 8003e5e:	d102      	bne.n	8003e66 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ff45 	bl	8003cf0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d122      	bne.n	8003eb6 <I2S_IRQHandler+0x10c>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d11b      	bne.n	8003eb6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e8c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	f043 0204 	orr.w	r2, r3, #4
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff13 	bl	8003cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eb6:	bf00      	nop
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a92      	ldr	r2, [pc, #584]	; (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003eda:	4b92      	ldr	r3, [pc, #584]	; (8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003edc:	e001      	b.n	8003ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ede:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a8b      	ldr	r2, [pc, #556]	; (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ef8:	4b8a      	ldr	r3, [pc, #552]	; (8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003efa:	e001      	b.n	8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0c:	d004      	beq.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f040 8099 	bne.w	800404a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d107      	bne.n	8003f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f925 	bl	800417c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d107      	bne.n	8003f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f9c8 	bl	80042dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b40      	cmp	r3, #64	; 0x40
 8003f54:	d13a      	bne.n	8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d035      	beq.n	8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6e      	ldr	r2, [pc, #440]	; (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f6a:	4b6e      	ldr	r3, [pc, #440]	; (8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f6c:	e001      	b.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4969      	ldr	r1, [pc, #420]	; (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f7a:	428b      	cmp	r3, r1
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f7e:	4b69      	ldr	r3, [pc, #420]	; (8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f80:	e001      	b.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f8a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f043 0202 	orr.w	r2, r3, #2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fe88 	bl	8003cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	f040 80c3 	bne.w	800415e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80bd 	beq.w	800415e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ff2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a49      	ldr	r2, [pc, #292]	; (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ffe:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004000:	e001      	b.n	8004006 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4944      	ldr	r1, [pc, #272]	; (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400e:	428b      	cmp	r3, r1
 8004010:	d101      	bne.n	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004012:	4b44      	ldr	r3, [pc, #272]	; (8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004014:	e001      	b.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004016:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800401a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800401e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004020:	2300      	movs	r3, #0
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f043 0204 	orr.w	r2, r3, #4
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fe4a 	bl	8003cdc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004048:	e089      	b.n	800415e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b02      	cmp	r3, #2
 8004052:	d107      	bne.n	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8be 	bl	80041e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f8fd 	bl	8004278 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d12f      	bne.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d02a      	beq.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d101      	bne.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80040ac:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ae:	e001      	b.n	80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80040b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4919      	ldr	r1, [pc, #100]	; (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040bc:	428b      	cmp	r3, r1
 80040be:	d101      	bne.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040c0:	4b18      	ldr	r3, [pc, #96]	; (8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040c2:	e001      	b.n	80040c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	f043 0202 	orr.w	r2, r3, #2
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fdfa 	bl	8003cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d136      	bne.n	8004160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d031      	beq.n	8004160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a07      	ldr	r2, [pc, #28]	; (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004108:	e001      	b.n	800410e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800410a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4902      	ldr	r1, [pc, #8]	; (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004116:	428b      	cmp	r3, r1
 8004118:	d106      	bne.n	8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800411a:	4b02      	ldr	r3, [pc, #8]	; (8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800411c:	e006      	b.n	800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800411e:	bf00      	nop
 8004120:	40003800 	.word	0x40003800
 8004124:	40003400 	.word	0x40003400
 8004128:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800412c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004130:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004140:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f043 0204 	orr.w	r2, r3, #4
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fdc0 	bl	8003cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800415c:	e000      	b.n	8004160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800415e:	bf00      	nop
}
 8004160:	bf00      	nop
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c99      	adds	r1, r3, #2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6251      	str	r1, [r2, #36]	; 0x24
 800418e:	881a      	ldrh	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d113      	bne.n	80041d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ffc9 	bl	8004168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	1c99      	adds	r1, r3, #2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6251      	str	r1, [r2, #36]	; 0x24
 80041f2:	8819      	ldrh	r1, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <I2SEx_TxISR_I2SExt+0x90>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <I2SEx_TxISR_I2SExt+0x22>
 80041fe:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <I2SEx_TxISR_I2SExt+0x94>)
 8004200:	e001      	b.n	8004206 <I2SEx_TxISR_I2SExt+0x26>
 8004202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004206:	460a      	mov	r2, r1
 8004208:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d121      	bne.n	8004266 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a12      	ldr	r2, [pc, #72]	; (8004270 <I2SEx_TxISR_I2SExt+0x90>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d101      	bne.n	8004230 <I2SEx_TxISR_I2SExt+0x50>
 800422c:	4b11      	ldr	r3, [pc, #68]	; (8004274 <I2SEx_TxISR_I2SExt+0x94>)
 800422e:	e001      	b.n	8004234 <I2SEx_TxISR_I2SExt+0x54>
 8004230:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	490d      	ldr	r1, [pc, #52]	; (8004270 <I2SEx_TxISR_I2SExt+0x90>)
 800423c:	428b      	cmp	r3, r1
 800423e:	d101      	bne.n	8004244 <I2SEx_TxISR_I2SExt+0x64>
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <I2SEx_TxISR_I2SExt+0x94>)
 8004242:	e001      	b.n	8004248 <I2SEx_TxISR_I2SExt+0x68>
 8004244:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004248:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800424c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ff81 	bl	8004168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40003800 	.word	0x40003800
 8004274:	40003400 	.word	0x40003400

08004278 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68d8      	ldr	r0, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	1c99      	adds	r1, r3, #2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004290:	b282      	uxth	r2, r0
 8004292:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d113      	bne.n	80042d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff ff4a 	bl	8004168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a20      	ldr	r2, [pc, #128]	; (800436c <I2SEx_RxISR_I2SExt+0x90>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d101      	bne.n	80042f2 <I2SEx_RxISR_I2SExt+0x16>
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <I2SEx_RxISR_I2SExt+0x94>)
 80042f0:	e001      	b.n	80042f6 <I2SEx_RxISR_I2SExt+0x1a>
 80042f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042f6:	68d8      	ldr	r0, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	1c99      	adds	r1, r3, #2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004302:	b282      	uxth	r2, r0
 8004304:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d121      	bne.n	8004362 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a12      	ldr	r2, [pc, #72]	; (800436c <I2SEx_RxISR_I2SExt+0x90>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d101      	bne.n	800432c <I2SEx_RxISR_I2SExt+0x50>
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <I2SEx_RxISR_I2SExt+0x94>)
 800432a:	e001      	b.n	8004330 <I2SEx_RxISR_I2SExt+0x54>
 800432c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	490d      	ldr	r1, [pc, #52]	; (800436c <I2SEx_RxISR_I2SExt+0x90>)
 8004338:	428b      	cmp	r3, r1
 800433a:	d101      	bne.n	8004340 <I2SEx_RxISR_I2SExt+0x64>
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <I2SEx_RxISR_I2SExt+0x94>)
 800433e:	e001      	b.n	8004344 <I2SEx_RxISR_I2SExt+0x68>
 8004340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004344:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004348:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff03 	bl	8004168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40003800 	.word	0x40003800
 8004370:	40003400 	.word	0x40003400

08004374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e267      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d075      	beq.n	800447e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004392:	4b88      	ldr	r3, [pc, #544]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b04      	cmp	r3, #4
 800439c:	d00c      	beq.n	80043b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439e:	4b85      	ldr	r3, [pc, #532]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d112      	bne.n	80043d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043aa:	4b82      	ldr	r3, [pc, #520]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b6:	d10b      	bne.n	80043d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	4b7e      	ldr	r3, [pc, #504]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d05b      	beq.n	800447c <HAL_RCC_OscConfig+0x108>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d157      	bne.n	800447c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e242      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d8:	d106      	bne.n	80043e8 <HAL_RCC_OscConfig+0x74>
 80043da:	4b76      	ldr	r3, [pc, #472]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a75      	ldr	r2, [pc, #468]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e01d      	b.n	8004424 <HAL_RCC_OscConfig+0xb0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x98>
 80043f2:	4b70      	ldr	r3, [pc, #448]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6f      	ldr	r2, [pc, #444]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80043f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b6d      	ldr	r3, [pc, #436]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a6c      	ldr	r2, [pc, #432]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e00b      	b.n	8004424 <HAL_RCC_OscConfig+0xb0>
 800440c:	4b69      	ldr	r3, [pc, #420]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a68      	ldr	r2, [pc, #416]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b66      	ldr	r3, [pc, #408]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a65      	ldr	r2, [pc, #404]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 800441e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d013      	beq.n	8004454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fd fabc 	bl	80019a8 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004434:	f7fd fab8 	bl	80019a8 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e207      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	4b5b      	ldr	r3, [pc, #364]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0xc0>
 8004452:	e014      	b.n	800447e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fd faa8 	bl	80019a8 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800445c:	f7fd faa4 	bl	80019a8 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e1f3      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446e:	4b51      	ldr	r3, [pc, #324]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0xe8>
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d063      	beq.n	8004552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800448a:	4b4a      	ldr	r3, [pc, #296]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d11c      	bne.n	80044dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a2:	4b44      	ldr	r3, [pc, #272]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d116      	bne.n	80044dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ae:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_RCC_OscConfig+0x152>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e1c7      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c6:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4937      	ldr	r1, [pc, #220]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044da:	e03a      	b.n	8004552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e4:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_RCC_OscConfig+0x244>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7fd fa5d 	bl	80019a8 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f2:	f7fd fa59 	bl	80019a8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e1a8      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004504:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004510:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4925      	ldr	r1, [pc, #148]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]
 8004524:	e015      	b.n	8004552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004526:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_RCC_OscConfig+0x244>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fd fa3c 	bl	80019a8 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004534:	f7fd fa38 	bl	80019a8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e187      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d036      	beq.n	80045cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004566:	4b15      	ldr	r3, [pc, #84]	; (80045bc <HAL_RCC_OscConfig+0x248>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fd fa1c 	bl	80019a8 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004574:	f7fd fa18 	bl	80019a8 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e167      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_OscConfig+0x240>)
 8004588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x200>
 8004592:	e01b      	b.n	80045cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_OscConfig+0x248>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459a:	f7fd fa05 	bl	80019a8 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a0:	e00e      	b.n	80045c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a2:	f7fd fa01 	bl	80019a8 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d907      	bls.n	80045c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e150      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
 80045b4:	40023800 	.word	0x40023800
 80045b8:	42470000 	.word	0x42470000
 80045bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c0:	4b88      	ldr	r3, [pc, #544]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1ea      	bne.n	80045a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8097 	beq.w	8004708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045da:	2300      	movs	r3, #0
 80045dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045de:	4b81      	ldr	r3, [pc, #516]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10f      	bne.n	800460a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	4b7d      	ldr	r3, [pc, #500]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	4a7c      	ldr	r2, [pc, #496]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80045f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f8:	6413      	str	r3, [r2, #64]	; 0x40
 80045fa:	4b7a      	ldr	r3, [pc, #488]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004606:	2301      	movs	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460a:	4b77      	ldr	r3, [pc, #476]	; (80047e8 <HAL_RCC_OscConfig+0x474>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d118      	bne.n	8004648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004616:	4b74      	ldr	r3, [pc, #464]	; (80047e8 <HAL_RCC_OscConfig+0x474>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a73      	ldr	r2, [pc, #460]	; (80047e8 <HAL_RCC_OscConfig+0x474>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004622:	f7fd f9c1 	bl	80019a8 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462a:	f7fd f9bd 	bl	80019a8 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e10c      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	4b6a      	ldr	r3, [pc, #424]	; (80047e8 <HAL_RCC_OscConfig+0x474>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d106      	bne.n	800465e <HAL_RCC_OscConfig+0x2ea>
 8004650:	4b64      	ldr	r3, [pc, #400]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004654:	4a63      	ldr	r2, [pc, #396]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6713      	str	r3, [r2, #112]	; 0x70
 800465c:	e01c      	b.n	8004698 <HAL_RCC_OscConfig+0x324>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b05      	cmp	r3, #5
 8004664:	d10c      	bne.n	8004680 <HAL_RCC_OscConfig+0x30c>
 8004666:	4b5f      	ldr	r3, [pc, #380]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a5e      	ldr	r2, [pc, #376]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 800466c:	f043 0304 	orr.w	r3, r3, #4
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
 8004672:	4b5c      	ldr	r3, [pc, #368]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a5b      	ldr	r2, [pc, #364]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	6713      	str	r3, [r2, #112]	; 0x70
 800467e:	e00b      	b.n	8004698 <HAL_RCC_OscConfig+0x324>
 8004680:	4b58      	ldr	r3, [pc, #352]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a57      	ldr	r2, [pc, #348]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	4b55      	ldr	r3, [pc, #340]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	4a54      	ldr	r2, [pc, #336]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004692:	f023 0304 	bic.w	r3, r3, #4
 8004696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d015      	beq.n	80046cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fd f982 	bl	80019a8 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a6:	e00a      	b.n	80046be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a8:	f7fd f97e 	bl	80019a8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e0cb      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046be:	4b49      	ldr	r3, [pc, #292]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0ee      	beq.n	80046a8 <HAL_RCC_OscConfig+0x334>
 80046ca:	e014      	b.n	80046f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046cc:	f7fd f96c 	bl	80019a8 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fd f968 	bl	80019a8 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0b5      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ea:	4b3e      	ldr	r3, [pc, #248]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1ee      	bne.n	80046d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d105      	bne.n	8004708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fc:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	4a38      	ldr	r2, [pc, #224]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80a1 	beq.w	8004854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004712:	4b34      	ldr	r3, [pc, #208]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b08      	cmp	r3, #8
 800471c:	d05c      	beq.n	80047d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d141      	bne.n	80047aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004726:	4b31      	ldr	r3, [pc, #196]	; (80047ec <HAL_RCC_OscConfig+0x478>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fd f93c 	bl	80019a8 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004734:	f7fd f938 	bl	80019a8 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e087      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004746:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69da      	ldr	r2, [r3, #28]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	019b      	lsls	r3, r3, #6
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	3b01      	subs	r3, #1
 800476c:	041b      	lsls	r3, r3, #16
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	491b      	ldr	r1, [pc, #108]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477c:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x478>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004782:	f7fd f911 	bl	80019a8 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478a:	f7fd f90d 	bl	80019a8 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e05c      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479c:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x416>
 80047a8:	e054      	b.n	8004854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <HAL_RCC_OscConfig+0x478>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fd f8fa 	bl	80019a8 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fd f8f6 	bl	80019a8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e045      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_RCC_OscConfig+0x470>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x444>
 80047d6:	e03d      	b.n	8004854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d107      	bne.n	80047f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e038      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40007000 	.word	0x40007000
 80047ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047f0:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <HAL_RCC_OscConfig+0x4ec>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d028      	beq.n	8004850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d121      	bne.n	8004850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d11a      	bne.n	8004850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004828:	4293      	cmp	r3, r2
 800482a:	d111      	bne.n	8004850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	3b01      	subs	r3, #1
 800483a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d107      	bne.n	8004850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40023800 	.word	0x40023800

08004864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0cc      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004878:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d90c      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b65      	ldr	r3, [pc, #404]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b63      	ldr	r3, [pc, #396]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0b8      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d020      	beq.n	80048ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b8:	4b59      	ldr	r3, [pc, #356]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a58      	ldr	r2, [pc, #352]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d0:	4b53      	ldr	r3, [pc, #332]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4a52      	ldr	r2, [pc, #328]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048dc:	4b50      	ldr	r3, [pc, #320]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	494d      	ldr	r1, [pc, #308]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d044      	beq.n	8004984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d119      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e07f      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d003      	beq.n	8004922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491e:	2b03      	cmp	r3, #3
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e06f      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004932:	4b3b      	ldr	r3, [pc, #236]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e067      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004942:	4b37      	ldr	r3, [pc, #220]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f023 0203 	bic.w	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4934      	ldr	r1, [pc, #208]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	4313      	orrs	r3, r2
 8004952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004954:	f7fd f828 	bl	80019a8 <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	e00a      	b.n	8004972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495c:	f7fd f824 	bl	80019a8 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e04f      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 020c 	and.w	r2, r3, #12
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	429a      	cmp	r2, r3
 8004982:	d1eb      	bne.n	800495c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004984:	4b25      	ldr	r3, [pc, #148]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d20c      	bcs.n	80049ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e032      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4916      	ldr	r1, [pc, #88]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	490e      	ldr	r1, [pc, #56]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ea:	f000 f821 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 80049ee:	4602      	mov	r2, r0
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	490a      	ldr	r1, [pc, #40]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	5ccb      	ldrb	r3, [r1, r3]
 80049fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fc ff88 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023c00 	.word	0x40023c00
 8004a20:	40023800 	.word	0x40023800
 8004a24:	0800b888 	.word	0x0800b888
 8004a28:	20000000 	.word	0x20000000
 8004a2c:	20000004 	.word	0x20000004

08004a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a34:	b094      	sub	sp, #80	; 0x50
 8004a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a40:	2300      	movs	r3, #0
 8004a42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a48:	4b79      	ldr	r3, [pc, #484]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d00d      	beq.n	8004a70 <HAL_RCC_GetSysClockFreq+0x40>
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	f200 80e1 	bhi.w	8004c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x34>
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d003      	beq.n	8004a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a62:	e0db      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a64:	4b73      	ldr	r3, [pc, #460]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a68:	e0db      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a6a:	4b73      	ldr	r3, [pc, #460]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a6e:	e0d8      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a70:	4b6f      	ldr	r3, [pc, #444]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a7a:	4b6d      	ldr	r3, [pc, #436]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d063      	beq.n	8004b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a86:	4b6a      	ldr	r3, [pc, #424]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	099b      	lsrs	r3, r3, #6
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a98:	633b      	str	r3, [r7, #48]	; 0x30
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	462b      	mov	r3, r5
 8004aa6:	f04f 0000 	mov.w	r0, #0
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	0159      	lsls	r1, r3, #5
 8004ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab4:	0150      	lsls	r0, r2, #5
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4621      	mov	r1, r4
 8004abc:	1a51      	subs	r1, r2, r1
 8004abe:	6139      	str	r1, [r7, #16]
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	018b      	lsls	r3, r1, #6
 8004ad8:	4651      	mov	r1, sl
 8004ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ade:	4651      	mov	r1, sl
 8004ae0:	018a      	lsls	r2, r1, #6
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ae8:	4659      	mov	r1, fp
 8004aea:	eb63 0901 	sbc.w	r9, r3, r1
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b02:	4690      	mov	r8, r2
 8004b04:	4699      	mov	r9, r3
 8004b06:	4623      	mov	r3, r4
 8004b08:	eb18 0303 	adds.w	r3, r8, r3
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	462b      	mov	r3, r5
 8004b10:	eb49 0303 	adc.w	r3, r9, r3
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b22:	4629      	mov	r1, r5
 8004b24:	024b      	lsls	r3, r1, #9
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	024a      	lsls	r2, r1, #9
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b36:	2200      	movs	r2, #0
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b40:	f7fc f832 	bl	8000ba8 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4613      	mov	r3, r2
 8004b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b4c:	e058      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4e:	4b38      	ldr	r3, [pc, #224]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	099b      	lsrs	r3, r3, #6
 8004b54:	2200      	movs	r2, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	4611      	mov	r1, r2
 8004b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b5e:	623b      	str	r3, [r7, #32]
 8004b60:	2300      	movs	r3, #0
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
 8004b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b68:	4642      	mov	r2, r8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	f04f 0000 	mov.w	r0, #0
 8004b70:	f04f 0100 	mov.w	r1, #0
 8004b74:	0159      	lsls	r1, r3, #5
 8004b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b7a:	0150      	lsls	r0, r2, #5
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4641      	mov	r1, r8
 8004b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b86:	4649      	mov	r1, r9
 8004b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	00eb      	lsls	r3, r5, #3
 8004bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb6:	00e2      	lsls	r2, r4, #3
 8004bb8:	4614      	mov	r4, r2
 8004bba:	461d      	mov	r5, r3
 8004bbc:	4643      	mov	r3, r8
 8004bbe:	18e3      	adds	r3, r4, r3
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	eb45 0303 	adc.w	r3, r5, r3
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	028b      	lsls	r3, r1, #10
 8004bda:	4621      	mov	r1, r4
 8004bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004be0:	4621      	mov	r1, r4
 8004be2:	028a      	lsls	r2, r1, #10
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bea:	2200      	movs	r2, #0
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	61fa      	str	r2, [r7, #28]
 8004bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf4:	f7fb ffd8 	bl	8000ba8 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c1a:	e002      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3750      	adds	r7, #80	; 0x50
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800
 8004c34:	00f42400 	.word	0x00f42400
 8004c38:	007a1200 	.word	0x007a1200

08004c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c40:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000000 	.word	0x20000000

08004c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c58:	f7ff fff0 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	0a9b      	lsrs	r3, r3, #10
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4903      	ldr	r1, [pc, #12]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6a:	5ccb      	ldrb	r3, [r1, r3]
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40023800 	.word	0x40023800
 8004c78:	0800b898 	.word	0x0800b898

08004c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c80:	f7ff ffdc 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0b5b      	lsrs	r3, r3, #13
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4903      	ldr	r1, [pc, #12]	; (8004ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	0800b898 	.word	0x0800b898

08004ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d035      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ccc:	4b62      	ldr	r3, [pc, #392]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd2:	f7fc fe69 	bl	80019a8 <HAL_GetTick>
 8004cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cda:	f7fc fe65 	bl	80019a8 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e0b0      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cec:	4b5b      	ldr	r3, [pc, #364]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f0      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	019a      	lsls	r2, r3, #6
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	071b      	lsls	r3, r3, #28
 8004d04:	4955      	ldr	r1, [pc, #340]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d0c:	4b52      	ldr	r3, [pc, #328]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d12:	f7fc fe49 	bl	80019a8 <HAL_GetTick>
 8004d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d1a:	f7fc fe45 	bl	80019a8 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e090      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d2c:	4b4b      	ldr	r3, [pc, #300]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8083 	beq.w	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	4b44      	ldr	r3, [pc, #272]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4a43      	ldr	r2, [pc, #268]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d54:	6413      	str	r3, [r2, #64]	; 0x40
 8004d56:	4b41      	ldr	r3, [pc, #260]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d62:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a3e      	ldr	r2, [pc, #248]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d6e:	f7fc fe1b 	bl	80019a8 <HAL_GetTick>
 8004d72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d76:	f7fc fe17 	bl	80019a8 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e062      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d88:	4b35      	ldr	r3, [pc, #212]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d94:	4b31      	ldr	r3, [pc, #196]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02f      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d028      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004db2:	4b2a      	ldr	r3, [pc, #168]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dbc:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc2:	4b28      	ldr	r3, [pc, #160]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dc8:	4a24      	ldr	r2, [pc, #144]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dce:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d114      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dda:	f7fc fde5 	bl	80019a8 <HAL_GetTick>
 8004dde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fc fde1 	bl	80019a8 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e02a      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df8:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0ee      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e10:	d10d      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e26:	490d      	ldr	r1, [pc, #52]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	608b      	str	r3, [r1, #8]
 8004e2c:	e005      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e38:	6093      	str	r3, [r2, #8]
 8004e3a:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e46:	4905      	ldr	r1, [pc, #20]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	42470068 	.word	0x42470068
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	40007000 	.word	0x40007000
 8004e64:	42470e40 	.word	0x42470e40

08004e68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d13e      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e86:	4b23      	ldr	r3, [pc, #140]	; (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d12f      	bne.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e9e:	617b      	str	r3, [r7, #20]
          break;
 8004ea0:	e02f      	b.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	; (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eae:	d108      	bne.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004eb0:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eb8:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	e007      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ec2:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eca:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ed2:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed8:	099b      	lsrs	r3, r3, #6
 8004eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	fb02 f303 	mul.w	r3, r2, r3
 8004ee4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eec:	0f1b      	lsrs	r3, r3, #28
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef8:	617b      	str	r3, [r7, #20]
          break;
 8004efa:	e002      	b.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
          break;
 8004f00:	bf00      	nop
        }
      }
      break;
 8004f02:	bf00      	nop
    }
  }
  return frequency;
 8004f04:	697b      	ldr	r3, [r7, #20]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800
 8004f18:	00bb8000 	.word	0x00bb8000
 8004f1c:	007a1200 	.word	0x007a1200
 8004f20:	00f42400 	.word	0x00f42400

08004f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e07b      	b.n	800502e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d108      	bne.n	8004f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f46:	d009      	beq.n	8004f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	61da      	str	r2, [r3, #28]
 8004f4e:	e005      	b.n	8004f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc fb06 	bl	8001588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe0:	ea42 0103 	orr.w	r1, r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	f003 0104 	and.w	r1, r3, #4
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	f003 0210 	and.w	r2, r3, #16
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e03f      	b.n	80050c8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d106      	bne.n	8005062 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7fc fadb 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2224      	movs	r2, #36	; 0x24
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005078:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f928 	bl	80052d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800508e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800509e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	d17c      	bne.n	80051ea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_UART_Transmit+0x2c>
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e075      	b.n	80051ec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_UART_Transmit+0x3e>
 800510a:	2302      	movs	r3, #2
 800510c:	e06e      	b.n	80051ec <HAL_UART_Transmit+0x11c>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2221      	movs	r2, #33	; 0x21
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005124:	f7fc fc40 	bl	80019a8 <HAL_GetTick>
 8005128:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513e:	d108      	bne.n	8005152 <HAL_UART_Transmit+0x82>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	e003      	b.n	800515a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005162:	e02a      	b.n	80051ba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2200      	movs	r2, #0
 800516c:	2180      	movs	r1, #128	; 0x80
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f840 	bl	80051f4 <UART_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e036      	b.n	80051ec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10b      	bne.n	800519c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	461a      	mov	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005192:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	3302      	adds	r3, #2
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	e007      	b.n	80051ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	781a      	ldrb	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3301      	adds	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1cf      	bne.n	8005164 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2200      	movs	r2, #0
 80051cc:	2140      	movs	r1, #64	; 0x40
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f810 	bl	80051f4 <UART_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e006      	b.n	80051ec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e000      	b.n	80051ec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051ea:	2302      	movs	r3, #2
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3720      	adds	r7, #32
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b090      	sub	sp, #64	; 0x40
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	4613      	mov	r3, r2
 8005202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005204:	e050      	b.n	80052a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800520c:	d04c      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800520e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <UART_WaitOnFlagUntilTimeout+0x30>
 8005214:	f7fc fbc8 	bl	80019a8 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005220:	429a      	cmp	r2, r3
 8005222:	d241      	bcs.n	80052a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	330c      	adds	r3, #12
 8005242:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005244:	637a      	str	r2, [r7, #52]	; 0x34
 8005246:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800524a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e5      	bne.n	8005224 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3314      	adds	r3, #20
 800525e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	613b      	str	r3, [r7, #16]
   return(result);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f023 0301 	bic.w	r3, r3, #1
 800526e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3314      	adds	r3, #20
 8005276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005278:	623a      	str	r2, [r7, #32]
 800527a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	69f9      	ldr	r1, [r7, #28]
 800527e:	6a3a      	ldr	r2, [r7, #32]
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	61bb      	str	r3, [r7, #24]
   return(result);
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e00f      	b.n	80052c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4013      	ands	r3, r2
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d09f      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3740      	adds	r7, #64	; 0x40
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d4:	b0c0      	sub	sp, #256	; 0x100
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	68d9      	ldr	r1, [r3, #12]
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	ea40 0301 	orr.w	r3, r0, r1
 80052f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	431a      	orrs	r2, r3
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	431a      	orrs	r2, r3
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005328:	f021 010c 	bic.w	r1, r1, #12
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005336:	430b      	orrs	r3, r1
 8005338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	6999      	ldr	r1, [r3, #24]
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	ea40 0301 	orr.w	r3, r0, r1
 8005356:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b8f      	ldr	r3, [pc, #572]	; (800559c <UART_SetConfig+0x2cc>)
 8005360:	429a      	cmp	r2, r3
 8005362:	d005      	beq.n	8005370 <UART_SetConfig+0xa0>
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b8d      	ldr	r3, [pc, #564]	; (80055a0 <UART_SetConfig+0x2d0>)
 800536c:	429a      	cmp	r2, r3
 800536e:	d104      	bne.n	800537a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005370:	f7ff fc84 	bl	8004c7c <HAL_RCC_GetPCLK2Freq>
 8005374:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005378:	e003      	b.n	8005382 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800537a:	f7ff fc6b 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 800537e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538c:	f040 810c 	bne.w	80055a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005394:	2200      	movs	r2, #0
 8005396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800539a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800539e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053a2:	4622      	mov	r2, r4
 80053a4:	462b      	mov	r3, r5
 80053a6:	1891      	adds	r1, r2, r2
 80053a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80053aa:	415b      	adcs	r3, r3
 80053ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053b2:	4621      	mov	r1, r4
 80053b4:	eb12 0801 	adds.w	r8, r2, r1
 80053b8:	4629      	mov	r1, r5
 80053ba:	eb43 0901 	adc.w	r9, r3, r1
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053d2:	4690      	mov	r8, r2
 80053d4:	4699      	mov	r9, r3
 80053d6:	4623      	mov	r3, r4
 80053d8:	eb18 0303 	adds.w	r3, r8, r3
 80053dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053e0:	462b      	mov	r3, r5
 80053e2:	eb49 0303 	adc.w	r3, r9, r3
 80053e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053fe:	460b      	mov	r3, r1
 8005400:	18db      	adds	r3, r3, r3
 8005402:	653b      	str	r3, [r7, #80]	; 0x50
 8005404:	4613      	mov	r3, r2
 8005406:	eb42 0303 	adc.w	r3, r2, r3
 800540a:	657b      	str	r3, [r7, #84]	; 0x54
 800540c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005410:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005414:	f7fb fbc8 	bl	8000ba8 <__aeabi_uldivmod>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4b61      	ldr	r3, [pc, #388]	; (80055a4 <UART_SetConfig+0x2d4>)
 800541e:	fba3 2302 	umull	r2, r3, r3, r2
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	011c      	lsls	r4, r3, #4
 8005426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800542a:	2200      	movs	r2, #0
 800542c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005430:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005438:	4642      	mov	r2, r8
 800543a:	464b      	mov	r3, r9
 800543c:	1891      	adds	r1, r2, r2
 800543e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005440:	415b      	adcs	r3, r3
 8005442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005448:	4641      	mov	r1, r8
 800544a:	eb12 0a01 	adds.w	sl, r2, r1
 800544e:	4649      	mov	r1, r9
 8005450:	eb43 0b01 	adc.w	fp, r3, r1
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005460:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005468:	4692      	mov	sl, r2
 800546a:	469b      	mov	fp, r3
 800546c:	4643      	mov	r3, r8
 800546e:	eb1a 0303 	adds.w	r3, sl, r3
 8005472:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005476:	464b      	mov	r3, r9
 8005478:	eb4b 0303 	adc.w	r3, fp, r3
 800547c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800548c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005490:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005494:	460b      	mov	r3, r1
 8005496:	18db      	adds	r3, r3, r3
 8005498:	643b      	str	r3, [r7, #64]	; 0x40
 800549a:	4613      	mov	r3, r2
 800549c:	eb42 0303 	adc.w	r3, r2, r3
 80054a0:	647b      	str	r3, [r7, #68]	; 0x44
 80054a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054aa:	f7fb fb7d 	bl	8000ba8 <__aeabi_uldivmod>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4611      	mov	r1, r2
 80054b4:	4b3b      	ldr	r3, [pc, #236]	; (80055a4 <UART_SetConfig+0x2d4>)
 80054b6:	fba3 2301 	umull	r2, r3, r3, r1
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	2264      	movs	r2, #100	; 0x64
 80054be:	fb02 f303 	mul.w	r3, r2, r3
 80054c2:	1acb      	subs	r3, r1, r3
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054ca:	4b36      	ldr	r3, [pc, #216]	; (80055a4 <UART_SetConfig+0x2d4>)
 80054cc:	fba3 2302 	umull	r2, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054d8:	441c      	add	r4, r3
 80054da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054ec:	4642      	mov	r2, r8
 80054ee:	464b      	mov	r3, r9
 80054f0:	1891      	adds	r1, r2, r2
 80054f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80054f4:	415b      	adcs	r3, r3
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054fc:	4641      	mov	r1, r8
 80054fe:	1851      	adds	r1, r2, r1
 8005500:	6339      	str	r1, [r7, #48]	; 0x30
 8005502:	4649      	mov	r1, r9
 8005504:	414b      	adcs	r3, r1
 8005506:	637b      	str	r3, [r7, #52]	; 0x34
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005514:	4659      	mov	r1, fp
 8005516:	00cb      	lsls	r3, r1, #3
 8005518:	4651      	mov	r1, sl
 800551a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800551e:	4651      	mov	r1, sl
 8005520:	00ca      	lsls	r2, r1, #3
 8005522:	4610      	mov	r0, r2
 8005524:	4619      	mov	r1, r3
 8005526:	4603      	mov	r3, r0
 8005528:	4642      	mov	r2, r8
 800552a:	189b      	adds	r3, r3, r2
 800552c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005530:	464b      	mov	r3, r9
 8005532:	460a      	mov	r2, r1
 8005534:	eb42 0303 	adc.w	r3, r2, r3
 8005538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005548:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800554c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005550:	460b      	mov	r3, r1
 8005552:	18db      	adds	r3, r3, r3
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
 8005556:	4613      	mov	r3, r2
 8005558:	eb42 0303 	adc.w	r3, r2, r3
 800555c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005562:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005566:	f7fb fb1f 	bl	8000ba8 <__aeabi_uldivmod>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <UART_SetConfig+0x2d4>)
 8005570:	fba3 1302 	umull	r1, r3, r3, r2
 8005574:	095b      	lsrs	r3, r3, #5
 8005576:	2164      	movs	r1, #100	; 0x64
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	3332      	adds	r3, #50	; 0x32
 8005582:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <UART_SetConfig+0x2d4>)
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	f003 0207 	and.w	r2, r3, #7
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4422      	add	r2, r4
 8005596:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005598:	e105      	b.n	80057a6 <UART_SetConfig+0x4d6>
 800559a:	bf00      	nop
 800559c:	40011000 	.word	0x40011000
 80055a0:	40011400 	.word	0x40011400
 80055a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ac:	2200      	movs	r2, #0
 80055ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055ba:	4642      	mov	r2, r8
 80055bc:	464b      	mov	r3, r9
 80055be:	1891      	adds	r1, r2, r2
 80055c0:	6239      	str	r1, [r7, #32]
 80055c2:	415b      	adcs	r3, r3
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ca:	4641      	mov	r1, r8
 80055cc:	1854      	adds	r4, r2, r1
 80055ce:	4649      	mov	r1, r9
 80055d0:	eb43 0501 	adc.w	r5, r3, r1
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	00eb      	lsls	r3, r5, #3
 80055de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055e2:	00e2      	lsls	r2, r4, #3
 80055e4:	4614      	mov	r4, r2
 80055e6:	461d      	mov	r5, r3
 80055e8:	4643      	mov	r3, r8
 80055ea:	18e3      	adds	r3, r4, r3
 80055ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055f0:	464b      	mov	r3, r9
 80055f2:	eb45 0303 	adc.w	r3, r5, r3
 80055f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005606:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005616:	4629      	mov	r1, r5
 8005618:	008b      	lsls	r3, r1, #2
 800561a:	4621      	mov	r1, r4
 800561c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005620:	4621      	mov	r1, r4
 8005622:	008a      	lsls	r2, r1, #2
 8005624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005628:	f7fb fabe 	bl	8000ba8 <__aeabi_uldivmod>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4b60      	ldr	r3, [pc, #384]	; (80057b4 <UART_SetConfig+0x4e4>)
 8005632:	fba3 2302 	umull	r2, r3, r3, r2
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	011c      	lsls	r4, r3, #4
 800563a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800563e:	2200      	movs	r2, #0
 8005640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005644:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	1891      	adds	r1, r2, r2
 8005652:	61b9      	str	r1, [r7, #24]
 8005654:	415b      	adcs	r3, r3
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800565c:	4641      	mov	r1, r8
 800565e:	1851      	adds	r1, r2, r1
 8005660:	6139      	str	r1, [r7, #16]
 8005662:	4649      	mov	r1, r9
 8005664:	414b      	adcs	r3, r1
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005674:	4659      	mov	r1, fp
 8005676:	00cb      	lsls	r3, r1, #3
 8005678:	4651      	mov	r1, sl
 800567a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567e:	4651      	mov	r1, sl
 8005680:	00ca      	lsls	r2, r1, #3
 8005682:	4610      	mov	r0, r2
 8005684:	4619      	mov	r1, r3
 8005686:	4603      	mov	r3, r0
 8005688:	4642      	mov	r2, r8
 800568a:	189b      	adds	r3, r3, r2
 800568c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005690:	464b      	mov	r3, r9
 8005692:	460a      	mov	r2, r1
 8005694:	eb42 0303 	adc.w	r3, r2, r3
 8005698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80056a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056b4:	4649      	mov	r1, r9
 80056b6:	008b      	lsls	r3, r1, #2
 80056b8:	4641      	mov	r1, r8
 80056ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056be:	4641      	mov	r1, r8
 80056c0:	008a      	lsls	r2, r1, #2
 80056c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056c6:	f7fb fa6f 	bl	8000ba8 <__aeabi_uldivmod>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4b39      	ldr	r3, [pc, #228]	; (80057b4 <UART_SetConfig+0x4e4>)
 80056d0:	fba3 1302 	umull	r1, r3, r3, r2
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	2164      	movs	r1, #100	; 0x64
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	3332      	adds	r3, #50	; 0x32
 80056e2:	4a34      	ldr	r2, [pc, #208]	; (80057b4 <UART_SetConfig+0x4e4>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ee:	441c      	add	r4, r3
 80056f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f4:	2200      	movs	r2, #0
 80056f6:	673b      	str	r3, [r7, #112]	; 0x70
 80056f8:	677a      	str	r2, [r7, #116]	; 0x74
 80056fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056fe:	4642      	mov	r2, r8
 8005700:	464b      	mov	r3, r9
 8005702:	1891      	adds	r1, r2, r2
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	415b      	adcs	r3, r3
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800570e:	4641      	mov	r1, r8
 8005710:	1851      	adds	r1, r2, r1
 8005712:	6039      	str	r1, [r7, #0]
 8005714:	4649      	mov	r1, r9
 8005716:	414b      	adcs	r3, r1
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	f04f 0200 	mov.w	r2, #0
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005726:	4659      	mov	r1, fp
 8005728:	00cb      	lsls	r3, r1, #3
 800572a:	4651      	mov	r1, sl
 800572c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005730:	4651      	mov	r1, sl
 8005732:	00ca      	lsls	r2, r1, #3
 8005734:	4610      	mov	r0, r2
 8005736:	4619      	mov	r1, r3
 8005738:	4603      	mov	r3, r0
 800573a:	4642      	mov	r2, r8
 800573c:	189b      	adds	r3, r3, r2
 800573e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005740:	464b      	mov	r3, r9
 8005742:	460a      	mov	r2, r1
 8005744:	eb42 0303 	adc.w	r3, r2, r3
 8005748:	66fb      	str	r3, [r7, #108]	; 0x6c
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	663b      	str	r3, [r7, #96]	; 0x60
 8005754:	667a      	str	r2, [r7, #100]	; 0x64
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005762:	4649      	mov	r1, r9
 8005764:	008b      	lsls	r3, r1, #2
 8005766:	4641      	mov	r1, r8
 8005768:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800576c:	4641      	mov	r1, r8
 800576e:	008a      	lsls	r2, r1, #2
 8005770:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005774:	f7fb fa18 	bl	8000ba8 <__aeabi_uldivmod>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <UART_SetConfig+0x4e4>)
 800577e:	fba3 1302 	umull	r1, r3, r3, r2
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	2164      	movs	r1, #100	; 0x64
 8005786:	fb01 f303 	mul.w	r3, r1, r3
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	3332      	adds	r3, #50	; 0x32
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <UART_SetConfig+0x4e4>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	f003 020f 	and.w	r2, r3, #15
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4422      	add	r2, r4
 80057a4:	609a      	str	r2, [r3, #8]
}
 80057a6:	bf00      	nop
 80057a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057ac:	46bd      	mov	sp, r7
 80057ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057b2:	bf00      	nop
 80057b4:	51eb851f 	.word	0x51eb851f

080057b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b8:	b084      	sub	sp, #16
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	f107 001c 	add.w	r0, r7, #28
 80057c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d122      	bne.n	8005816 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d105      	bne.n	800580a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f9c0 	bl	8005b90 <USB_CoreReset>
 8005810:	4603      	mov	r3, r0
 8005812:	73fb      	strb	r3, [r7, #15]
 8005814:	e01a      	b.n	800584c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9b4 	bl	8005b90 <USB_CoreReset>
 8005828:	4603      	mov	r3, r0
 800582a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800582c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	639a      	str	r2, [r3, #56]	; 0x38
 800583e:	e005      	b.n	800584c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	2b01      	cmp	r3, #1
 8005850:	d10b      	bne.n	800586a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f043 0206 	orr.w	r2, r3, #6
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f043 0220 	orr.w	r2, r3, #32
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005876:	b004      	add	sp, #16
 8005878:	4770      	bx	lr

0800587a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f043 0201 	orr.w	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f023 0201 	bic.w	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d115      	bne.n	800590c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058ec:	2001      	movs	r0, #1
 80058ee:	f7fc f867 	bl	80019c0 <HAL_Delay>
      ms++;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3301      	adds	r3, #1
 80058f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f93a 	bl	8005b72 <USB_GetMode>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b01      	cmp	r3, #1
 8005902:	d01e      	beq.n	8005942 <USB_SetCurrentMode+0x84>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b31      	cmp	r3, #49	; 0x31
 8005908:	d9f0      	bls.n	80058ec <USB_SetCurrentMode+0x2e>
 800590a:	e01a      	b.n	8005942 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d115      	bne.n	800593e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800591e:	2001      	movs	r0, #1
 8005920:	f7fc f84e 	bl	80019c0 <HAL_Delay>
      ms++;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f921 	bl	8005b72 <USB_GetMode>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d005      	beq.n	8005942 <USB_SetCurrentMode+0x84>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b31      	cmp	r3, #49	; 0x31
 800593a:	d9f0      	bls.n	800591e <USB_SetCurrentMode+0x60>
 800593c:	e001      	b.n	8005942 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e005      	b.n	800594e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b32      	cmp	r3, #50	; 0x32
 8005946:	d101      	bne.n	800594c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a13      	ldr	r2, [pc, #76]	; (80059bc <USB_FlushTxFifo+0x64>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d901      	bls.n	8005978 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e01b      	b.n	80059b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	daf2      	bge.n	8005966 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	019b      	lsls	r3, r3, #6
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a08      	ldr	r2, [pc, #32]	; (80059bc <USB_FlushTxFifo+0x64>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e006      	b.n	80059b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d0f0      	beq.n	8005990 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	00030d40 	.word	0x00030d40

080059c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a11      	ldr	r2, [pc, #68]	; (8005a1c <USB_FlushRxFifo+0x5c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e018      	b.n	8005a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	daf2      	bge.n	80059cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2210      	movs	r2, #16
 80059ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a08      	ldr	r2, [pc, #32]	; (8005a1c <USB_FlushRxFifo+0x5c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e006      	b.n	8005a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d0f0      	beq.n	80059f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	00030d40 	.word	0x00030d40

08005a20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b089      	sub	sp, #36	; 0x24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	460b      	mov	r3, r1
 8005a30:	71fb      	strb	r3, [r7, #7]
 8005a32:	4613      	mov	r3, r2
 8005a34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d123      	bne.n	8005a8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a46:	88bb      	ldrh	r3, [r7, #4]
 8005a48:	3303      	adds	r3, #3
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61bb      	str	r3, [r7, #24]
 8005a52:	e018      	b.n	8005a86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	031a      	lsls	r2, r3, #12
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a60:	461a      	mov	r2, r3
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3301      	adds	r3, #1
 8005a72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	3301      	adds	r3, #1
 8005a78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	3301      	adds	r3, #1
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d3e2      	bcc.n	8005a54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3724      	adds	r7, #36	; 0x24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b08b      	sub	sp, #44	; 0x2c
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	089b      	lsrs	r3, r3, #2
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	623b      	str	r3, [r7, #32]
 8005ac6:	e014      	b.n	8005af2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	3301      	adds	r3, #1
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	3301      	adds	r3, #1
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	3301      	adds	r3, #1
 8005af0:	623b      	str	r3, [r7, #32]
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d3e6      	bcc.n	8005ac8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005afa:	8bfb      	ldrh	r3, [r7, #30]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01e      	beq.n	8005b3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f107 0310 	add.w	r3, r7, #16
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	701a      	strb	r2, [r3, #0]
      i++;
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	3301      	adds	r3, #1
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b32:	8bfb      	ldrh	r3, [r7, #30]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b38:	8bfb      	ldrh	r3, [r7, #30]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1ea      	bne.n	8005b14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	372c      	adds	r7, #44	; 0x2c
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4013      	ands	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b64:	68fb      	ldr	r3, [r7, #12]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <USB_CoreReset+0x64>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d901      	bls.n	8005bae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e01b      	b.n	8005be6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	daf2      	bge.n	8005b9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f043 0201 	orr.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a09      	ldr	r2, [pc, #36]	; (8005bf4 <USB_CoreReset+0x64>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d901      	bls.n	8005bd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e006      	b.n	8005be6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d0f0      	beq.n	8005bc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	00030d40 	.word	0x00030d40

08005bf8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d018      	beq.n	8005c80 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d10a      	bne.n	8005c6a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c62:	f043 0304 	orr.w	r3, r3, #4
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	e014      	b.n	8005c94 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c78:	f023 0304 	bic.w	r3, r3, #4
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e009      	b.n	8005c94 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c8e:	f023 0304 	bic.w	r3, r3, #4
 8005c92:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c94:	2110      	movs	r1, #16
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff fe5e 	bl	8005958 <USB_FlushTxFifo>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff fe8a 	bl	80059c0 <USB_FlushRxFifo>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e015      	b.n	8005ce8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cdc:	461a      	mov	r2, r3
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d3e5      	bcc.n	8005cbc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cfc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00b      	beq.n	8005d22 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d10:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a13      	ldr	r2, [pc, #76]	; (8005d64 <USB_HostInit+0x16c>)
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a13      	ldr	r2, [pc, #76]	; (8005d68 <USB_HostInit+0x170>)
 8005d1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d20:	e009      	b.n	8005d36 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2280      	movs	r2, #128	; 0x80
 8005d26:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a10      	ldr	r2, [pc, #64]	; (8005d6c <USB_HostInit+0x174>)
 8005d2c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <USB_HostInit+0x178>)
 8005d32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d105      	bne.n	8005d48 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f043 0210 	orr.w	r2, r3, #16
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <USB_HostInit+0x17c>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d60:	b004      	add	sp, #16
 8005d62:	4770      	bx	lr
 8005d64:	01000200 	.word	0x01000200
 8005d68:	00e00300 	.word	0x00e00300
 8005d6c:	00600080 	.word	0x00600080
 8005d70:	004000e0 	.word	0x004000e0
 8005d74:	a3200008 	.word	0xa3200008

08005d78 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005db0:	4313      	orrs	r3, r2
 8005db2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d107      	bne.n	8005dca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005dc6:	6053      	str	r3, [r2, #4]
 8005dc8:	e009      	b.n	8005dde <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d106      	bne.n	8005dde <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005ddc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e1c:	2064      	movs	r0, #100	; 0x64
 8005e1e:	f7fb fdcf 	bl	80019c0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e2e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e30:	200a      	movs	r0, #10
 8005e32:	f7fb fdc5 	bl	80019c0 <HAL_Delay>

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d109      	bne.n	8005e84 <USB_DriveVbus+0x44>
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d106      	bne.n	8005e84 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e82:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8e:	d109      	bne.n	8005ea4 <USB_DriveVbus+0x64>
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	0c5b      	lsrs	r3, r3, #17
 8005ed0:	f003 0303 	and.w	r3, r3, #3
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	b29b      	uxth	r3, r3
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	4611      	mov	r1, r2
 8005f10:	461a      	mov	r2, r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	70fb      	strb	r3, [r7, #3]
 8005f16:	460b      	mov	r3, r1
 8005f18:	70bb      	strb	r3, [r7, #2]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005f26:	78fb      	ldrb	r3, [r7, #3]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f32:	461a      	mov	r2, r3
 8005f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f38:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d87e      	bhi.n	8006040 <USB_HC_Init+0x13c>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <USB_HC_Init+0x44>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005f59 	.word	0x08005f59
 8005f4c:	08006003 	.word	0x08006003
 8005f50:	08005f59 	.word	0x08005f59
 8005f54:	08005fc5 	.word	0x08005fc5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f64:	461a      	mov	r2, r3
 8005f66:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	da10      	bge.n	8005f96 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f92:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f94:	e057      	b.n	8006046 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d051      	beq.n	8006046 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	78fa      	ldrb	r2, [r7, #3]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005fc0:	60d3      	str	r3, [r2, #12]
      break;
 8005fc2:	e040      	b.n	8006046 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f240 639d 	movw	r3, #1693	; 0x69d
 8005fd6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	da34      	bge.n	800604a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	78fa      	ldrb	r2, [r7, #3]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006000:	e023      	b.n	800604a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	4413      	add	r3, r2
 800600a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600e:	461a      	mov	r2, r3
 8006010:	f240 2325 	movw	r3, #549	; 0x225
 8006014:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006016:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800601a:	2b00      	cmp	r3, #0
 800601c:	da17      	bge.n	800604e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800601e:	78fb      	ldrb	r3, [r7, #3]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4413      	add	r3, r2
 8006026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	78fa      	ldrb	r2, [r7, #3]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	440a      	add	r2, r1
 8006034:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006038:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800603c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800603e:	e006      	b.n	800604e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	77fb      	strb	r3, [r7, #31]
      break;
 8006044:	e004      	b.n	8006050 <USB_HC_Init+0x14c>
      break;
 8006046:	bf00      	nop
 8006048:	e002      	b.n	8006050 <USB_HC_Init+0x14c>
      break;
 800604a:	bf00      	nop
 800604c:	e000      	b.n	8006050 <USB_HC_Init+0x14c>
      break;
 800604e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	78fa      	ldrb	r2, [r7, #3]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	440a      	add	r2, r1
 8006066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606a:	f043 0302 	orr.w	r3, r3, #2
 800606e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	2101      	movs	r1, #1
 8006080:	fa01 f303 	lsl.w	r3, r1, r3
 8006084:	6939      	ldr	r1, [r7, #16]
 8006086:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800608a:	4313      	orrs	r3, r2
 800608c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800609a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	da03      	bge.n	80060aa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80060a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a6:	61bb      	str	r3, [r7, #24]
 80060a8:	e001      	b.n	80060ae <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff feff 	bl	8005eb2 <USB_GetHostSpeed>
 80060b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80060b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d106      	bne.n	80060cc <USB_HC_Init+0x1c8>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d003      	beq.n	80060cc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	e001      	b.n	80060d0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060d0:	787b      	ldrb	r3, [r7, #1]
 80060d2:	059b      	lsls	r3, r3, #22
 80060d4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060d8:	78bb      	ldrb	r3, [r7, #2]
 80060da:	02db      	lsls	r3, r3, #11
 80060dc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060e0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060e6:	049b      	lsls	r3, r3, #18
 80060e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	0159      	lsls	r1, r3, #5
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	440b      	add	r3, r1
 8006102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006106:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800610c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800610e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006112:	2b03      	cmp	r3, #3
 8006114:	d003      	beq.n	800611e <USB_HC_Init+0x21a>
 8006116:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800611a:	2b01      	cmp	r3, #1
 800611c:	d10f      	bne.n	800613e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4413      	add	r3, r2
 8006126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	78fa      	ldrb	r2, [r7, #3]
 800612e:	0151      	lsls	r1, r2, #5
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	440a      	add	r2, r1
 8006134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006138:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800613c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800613e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3720      	adds	r7, #32
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08c      	sub	sp, #48	; 0x30
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	785b      	ldrb	r3, [r3, #1]
 800615e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006164:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616e:	2b00      	cmp	r3, #0
 8006170:	d02d      	beq.n	80061ce <USB_HC_StartXfer+0x86>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	791b      	ldrb	r3, [r3, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d129      	bne.n	80061ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d117      	bne.n	80061b0 <USB_HC_StartXfer+0x68>
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	79db      	ldrb	r3, [r3, #7]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <USB_HC_StartXfer+0x48>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	79db      	ldrb	r3, [r3, #7]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d10f      	bne.n	80061b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	4413      	add	r3, r2
 8006198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	6a3a      	ldr	r2, [r7, #32]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10b      	bne.n	80061ce <USB_HC_StartXfer+0x86>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	795b      	ldrb	r3, [r3, #5]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d107      	bne.n	80061ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	4619      	mov	r1, r3
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fa0f 	bl	80065e8 <USB_DoPing>
      return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e0f8      	b.n	80063c0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d018      	beq.n	8006208 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	8912      	ldrh	r2, [r2, #8]
 80061de:	4413      	add	r3, r2
 80061e0:	3b01      	subs	r3, #1
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	8912      	ldrh	r2, [r2, #8]
 80061e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80061ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061ee:	8b7b      	ldrh	r3, [r7, #26]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d90b      	bls.n	800620c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80061f4:	8b7b      	ldrh	r3, [r7, #26]
 80061f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	8912      	ldrh	r2, [r2, #8]
 80061fe:	fb03 f202 	mul.w	r2, r3, r2
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	611a      	str	r2, [r3, #16]
 8006206:	e001      	b.n	800620c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006208:	2301      	movs	r3, #1
 800620a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	78db      	ldrb	r3, [r3, #3]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006214:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	8912      	ldrh	r2, [r2, #8]
 800621a:	fb03 f202 	mul.w	r2, r3, r2
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	611a      	str	r2, [r3, #16]
 8006222:	e003      	b.n	800622c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	695a      	ldr	r2, [r3, #20]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006234:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006236:	04d9      	lsls	r1, r3, #19
 8006238:	4b63      	ldr	r3, [pc, #396]	; (80063c8 <USB_HC_StartXfer+0x280>)
 800623a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800623c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	7a9b      	ldrb	r3, [r3, #10]
 8006242:	075b      	lsls	r3, r3, #29
 8006244:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006248:	69f9      	ldr	r1, [r7, #28]
 800624a:	0148      	lsls	r0, r1, #5
 800624c:	6a39      	ldr	r1, [r7, #32]
 800624e:	4401      	add	r1, r0
 8006250:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006254:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006256:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	68d9      	ldr	r1, [r3, #12]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	460a      	mov	r2, r1
 8006270:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	bf0c      	ite	eq
 8006282:	2301      	moveq	r3, #1
 8006284:	2300      	movne	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	4413      	add	r3, r2
 8006292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	6a3a      	ldr	r2, [r7, #32]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	7e7b      	ldrb	r3, [r7, #25]
 80062ba:	075b      	lsls	r3, r3, #29
 80062bc:	69f9      	ldr	r1, [r7, #28]
 80062be:	0148      	lsls	r0, r1, #5
 80062c0:	6a39      	ldr	r1, [r7, #32]
 80062c2:	4401      	add	r1, r0
 80062c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80062c8:	4313      	orrs	r3, r2
 80062ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	78db      	ldrb	r3, [r3, #3]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f2:	613b      	str	r3, [r7, #16]
 80062f4:	e003      	b.n	80062fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006304:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006312:	461a      	mov	r2, r3
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	e04e      	b.n	80063c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	78db      	ldrb	r3, [r3, #3]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d149      	bne.n	80063be <USB_HC_StartXfer+0x276>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d045      	beq.n	80063be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	79db      	ldrb	r3, [r3, #7]
 8006336:	2b03      	cmp	r3, #3
 8006338:	d830      	bhi.n	800639c <USB_HC_StartXfer+0x254>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <USB_HC_StartXfer+0x1f8>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006351 	.word	0x08006351
 8006344:	08006375 	.word	0x08006375
 8006348:	08006351 	.word	0x08006351
 800634c:	08006375 	.word	0x08006375
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	3303      	adds	r3, #3
 8006356:	089b      	lsrs	r3, r3, #2
 8006358:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800635a:	8afa      	ldrh	r2, [r7, #22]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	b29b      	uxth	r3, r3
 8006362:	429a      	cmp	r2, r3
 8006364:	d91c      	bls.n	80063a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f043 0220 	orr.w	r2, r3, #32
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	619a      	str	r2, [r3, #24]
        }
        break;
 8006372:	e015      	b.n	80063a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	3303      	adds	r3, #3
 800637a:	089b      	lsrs	r3, r3, #2
 800637c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800637e:	8afa      	ldrh	r2, [r7, #22]
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	b29b      	uxth	r3, r3
 800638a:	429a      	cmp	r2, r3
 800638c:	d90a      	bls.n	80063a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	619a      	str	r2, [r3, #24]
        }
        break;
 800639a:	e003      	b.n	80063a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800639c:	bf00      	nop
 800639e:	e002      	b.n	80063a6 <USB_HC_StartXfer+0x25e>
        break;
 80063a0:	bf00      	nop
 80063a2:	e000      	b.n	80063a6 <USB_HC_StartXfer+0x25e>
        break;
 80063a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	68d9      	ldr	r1, [r3, #12]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	785a      	ldrb	r2, [r3, #1]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2000      	movs	r0, #0
 80063b6:	9000      	str	r0, [sp, #0]
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff fb31 	bl	8005a20 <USB_WritePacket>
  }

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3728      	adds	r7, #40	; 0x28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	1ff80000 	.word	0x1ff80000

080063cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	b29b      	uxth	r3, r3
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b089      	sub	sp, #36	; 0x24
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063fe:	78fb      	ldrb	r3, [r7, #3]
 8006400:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	0c9b      	lsrs	r3, r3, #18
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	4413      	add	r3, r2
 8006424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	0fdb      	lsrs	r3, r3, #31
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b20      	cmp	r3, #32
 800643c:	d104      	bne.n	8006448 <USB_HC_Halt+0x5a>
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006444:	2300      	movs	r3, #0
 8006446:	e0c8      	b.n	80065da <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <USB_HC_Halt+0x66>
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d163      	bne.n	800651c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	440a      	add	r2, r1
 800646a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800646e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006472:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	f040 80ab 	bne.w	80065d8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d133      	bne.n	80064f6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064cc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3301      	adds	r3, #1
 80064d2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064da:	d81d      	bhi.n	8006518 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f2:	d0ec      	beq.n	80064ce <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064f4:	e070      	b.n	80065d8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	440a      	add	r2, r1
 800650c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006514:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006516:	e05f      	b.n	80065d8 <USB_HC_Halt+0x1ea>
            break;
 8006518:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800651a:	e05d      	b.n	80065d8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	440a      	add	r2, r1
 8006532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006536:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800653a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d133      	bne.n	80065b4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	440a      	add	r2, r1
 8006562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800656a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	440a      	add	r2, r1
 8006582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006586:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800658a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3301      	adds	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006598:	d81d      	bhi.n	80065d6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b0:	d0ec      	beq.n	800658c <USB_HC_Halt+0x19e>
 80065b2:	e011      	b.n	80065d8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	e000      	b.n	80065d8 <USB_HC_Halt+0x1ea>
          break;
 80065d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3724      	adds	r7, #36	; 0x24
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
	...

080065e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065fc:	2301      	movs	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	04da      	lsls	r2, r3, #19
 8006604:	4b15      	ldr	r3, [pc, #84]	; (800665c <USB_DoPing+0x74>)
 8006606:	4013      	ands	r3, r2
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	440a      	add	r2, r1
 8006610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006614:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006618:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	4413      	add	r3, r2
 8006622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006630:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006638:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	4413      	add	r3, r2
 8006642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006646:	461a      	mov	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	1ff80000 	.word	0x1ff80000

08006660 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff f911 	bl	800589c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800667a:	2110      	movs	r1, #16
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff f96b 	bl	8005958 <USB_FlushTxFifo>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff f997 	bl	80059c0 <USB_FlushRxFifo>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e01f      	b.n	80066e2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d6:	461a      	mov	r2, r3
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	3301      	adds	r3, #1
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	2b0f      	cmp	r3, #15
 80066e6:	d9dc      	bls.n	80066a2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066e8:	2300      	movs	r3, #0
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	e034      	b.n	8006758 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006704:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800670c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006714:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006722:	461a      	mov	r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3301      	adds	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006734:	d80c      	bhi.n	8006750 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800674c:	d0ec      	beq.n	8006728 <USB_StopHost+0xc8>
 800674e:	e000      	b.n	8006752 <USB_StopHost+0xf2>
        break;
 8006750:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	3301      	adds	r3, #1
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b0f      	cmp	r3, #15
 800675c:	d9c7      	bls.n	80066ee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006764:	461a      	mov	r2, r3
 8006766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800676a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006772:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff f880 	bl	800587a <USB_EnableGlobalInt>

  return ret;
 800677a:	7ffb      	ldrb	r3, [r7, #31]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3720      	adds	r7, #32
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b089      	sub	sp, #36	; 0x24
 8006788:	af04      	add	r7, sp, #16
 800678a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800678c:	2301      	movs	r3, #1
 800678e:	2202      	movs	r2, #2
 8006790:	2102      	movs	r1, #2
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fc66 	bl	8007064 <USBH_FindInterface>
 8006798:	4603      	mov	r3, r0
 800679a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2bff      	cmp	r3, #255	; 0xff
 80067a0:	d002      	beq.n	80067a8 <USBH_CDC_InterfaceInit+0x24>
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d901      	bls.n	80067ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067a8:	2302      	movs	r3, #2
 80067aa:	e13d      	b.n	8006a28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fc3b 	bl	800702c <USBH_SelectInterface>
 80067b6:	4603      	mov	r3, r0
 80067b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80067c0:	2302      	movs	r3, #2
 80067c2:	e131      	b.n	8006a28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80067ca:	2050      	movs	r0, #80	; 0x50
 80067cc:	f002 fafa 	bl	8008dc4 <malloc>
 80067d0:	4603      	mov	r3, r0
 80067d2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80067e4:	2302      	movs	r3, #2
 80067e6:	e11f      	b.n	8006a28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80067e8:	2250      	movs	r2, #80	; 0x50
 80067ea:	2100      	movs	r1, #0
 80067ec:	68b8      	ldr	r0, [r7, #8]
 80067ee:	f002 faf9 	bl	8008de4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	211a      	movs	r1, #26
 80067f8:	fb01 f303 	mul.w	r3, r1, r3
 80067fc:	4413      	add	r3, r2
 80067fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	b25b      	sxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	da15      	bge.n	8006836 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	211a      	movs	r1, #26
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	4413      	add	r3, r2
 8006816:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800681a:	781a      	ldrb	r2, [r3, #0]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	211a      	movs	r1, #26
 8006826:	fb01 f303 	mul.w	r3, r1, r3
 800682a:	4413      	add	r3, r2
 800682c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006830:	881a      	ldrh	r2, [r3, #0]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 ff2c 	bl	800869a <USBH_AllocPipe>
 8006842:	4603      	mov	r3, r0
 8006844:	461a      	mov	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	7819      	ldrb	r1, [r3, #0]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	7858      	ldrb	r0, [r3, #1]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	8952      	ldrh	r2, [r2, #10]
 8006862:	9202      	str	r2, [sp, #8]
 8006864:	2203      	movs	r2, #3
 8006866:	9201      	str	r2, [sp, #4]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	4623      	mov	r3, r4
 800686c:	4602      	mov	r2, r0
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 fee4 	bl	800863c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2200      	movs	r2, #0
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f002 f9f3 	bl	8008c68 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006882:	2300      	movs	r3, #0
 8006884:	2200      	movs	r2, #0
 8006886:	210a      	movs	r1, #10
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fbeb 	bl	8007064 <USBH_FindInterface>
 800688e:	4603      	mov	r3, r0
 8006890:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	2bff      	cmp	r3, #255	; 0xff
 8006896:	d002      	beq.n	800689e <USBH_CDC_InterfaceInit+0x11a>
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d901      	bls.n	80068a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800689e:	2302      	movs	r3, #2
 80068a0:	e0c2      	b.n	8006a28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	211a      	movs	r1, #26
 80068a8:	fb01 f303 	mul.w	r3, r1, r3
 80068ac:	4413      	add	r3, r2
 80068ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	b25b      	sxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	da16      	bge.n	80068e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	211a      	movs	r1, #26
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	4413      	add	r3, r2
 80068c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068ca:	781a      	ldrb	r2, [r3, #0]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	211a      	movs	r1, #26
 80068d6:	fb01 f303 	mul.w	r3, r1, r3
 80068da:	4413      	add	r3, r2
 80068dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068e0:	881a      	ldrh	r2, [r3, #0]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	835a      	strh	r2, [r3, #26]
 80068e6:	e015      	b.n	8006914 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	211a      	movs	r1, #26
 80068ee:	fb01 f303 	mul.w	r3, r1, r3
 80068f2:	4413      	add	r3, r2
 80068f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068f8:	781a      	ldrb	r2, [r3, #0]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	211a      	movs	r1, #26
 8006904:	fb01 f303 	mul.w	r3, r1, r3
 8006908:	4413      	add	r3, r2
 800690a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800690e:	881a      	ldrh	r2, [r3, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	211a      	movs	r1, #26
 800691a:	fb01 f303 	mul.w	r3, r1, r3
 800691e:	4413      	add	r3, r2
 8006920:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	b25b      	sxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	da16      	bge.n	800695a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	211a      	movs	r1, #26
 8006932:	fb01 f303 	mul.w	r3, r1, r3
 8006936:	4413      	add	r3, r2
 8006938:	f203 3356 	addw	r3, r3, #854	; 0x356
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	211a      	movs	r1, #26
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	4413      	add	r3, r2
 800694e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006952:	881a      	ldrh	r2, [r3, #0]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	835a      	strh	r2, [r3, #26]
 8006958:	e015      	b.n	8006986 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	211a      	movs	r1, #26
 8006960:	fb01 f303 	mul.w	r3, r1, r3
 8006964:	4413      	add	r3, r2
 8006966:	f203 3356 	addw	r3, r3, #854	; 0x356
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	211a      	movs	r1, #26
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	4413      	add	r3, r2
 800697c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006980:	881a      	ldrh	r2, [r3, #0]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	7b9b      	ldrb	r3, [r3, #14]
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fe84 	bl	800869a <USBH_AllocPipe>
 8006992:	4603      	mov	r3, r0
 8006994:	461a      	mov	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	7bdb      	ldrb	r3, [r3, #15]
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 fe7a 	bl	800869a <USBH_AllocPipe>
 80069a6:	4603      	mov	r3, r0
 80069a8:	461a      	mov	r2, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	7b59      	ldrb	r1, [r3, #13]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	7b98      	ldrb	r0, [r3, #14]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	8b12      	ldrh	r2, [r2, #24]
 80069c6:	9202      	str	r2, [sp, #8]
 80069c8:	2202      	movs	r2, #2
 80069ca:	9201      	str	r2, [sp, #4]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	4623      	mov	r3, r4
 80069d0:	4602      	mov	r2, r0
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fe32 	bl	800863c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	7b19      	ldrb	r1, [r3, #12]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	7bd8      	ldrb	r0, [r3, #15]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	8b52      	ldrh	r2, [r2, #26]
 80069f0:	9202      	str	r2, [sp, #8]
 80069f2:	2202      	movs	r2, #2
 80069f4:	9201      	str	r2, [sp, #4]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	4623      	mov	r3, r4
 80069fa:	4602      	mov	r2, r0
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fe1d 	bl	800863c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	7b5b      	ldrb	r3, [r3, #13]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f002 f928 	bl	8008c68 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	7b1b      	ldrb	r3, [r3, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f002 f921 	bl	8008c68 <USBH_LL_SetToggle>

  return USBH_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd90      	pop	{r4, r7, pc}

08006a30 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00e      	beq.n	8006a68 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fe12 	bl	800867a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 fe3d 	bl	80086dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	7b1b      	ldrb	r3, [r3, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00e      	beq.n	8006a8e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	7b1b      	ldrb	r3, [r3, #12]
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 fdff 	bl	800867a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	7b1b      	ldrb	r3, [r3, #12]
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 fe2a 	bl	80086dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	7b5b      	ldrb	r3, [r3, #13]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00e      	beq.n	8006ab4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	7b5b      	ldrb	r3, [r3, #13]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fdec 	bl	800867a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	7b5b      	ldrb	r3, [r3, #13]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 fe17 	bl	80086dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f002 f983 	bl	8008dd4 <free>
    phost->pActiveClass->pData = 0U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3340      	adds	r3, #64	; 0x40
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f8b1 	bl	8006c62 <GetLineCoding>
 8006b00:	4603      	mov	r3, r0
 8006b02:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b04:	7afb      	ldrb	r3, [r7, #11]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b10:	2102      	movs	r1, #2
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b16:	7afb      	ldrb	r3, [r7, #11]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d877      	bhi.n	8006c34 <USBH_CDC_Process+0x114>
 8006b44:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <USBH_CDC_Process+0x2c>)
 8006b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4a:	bf00      	nop
 8006b4c:	08006b61 	.word	0x08006b61
 8006b50:	08006b67 	.word	0x08006b67
 8006b54:	08006b97 	.word	0x08006b97
 8006b58:	08006c0b 	.word	0x08006c0b
 8006b5c:	08006c19 	.word	0x08006c19
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]
      break;
 8006b64:	e06d      	b.n	8006c42 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f897 	bl	8006ca0 <SetLineCoding>
 8006b72:	4603      	mov	r3, r0
 8006b74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b84:	e058      	b.n	8006c38 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d055      	beq.n	8006c38 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b94:	e050      	b.n	8006c38 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	3340      	adds	r3, #64	; 0x40
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f860 	bl	8006c62 <GetLineCoding>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d126      	bne.n	8006bfa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbe:	791b      	ldrb	r3, [r3, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d13b      	bne.n	8006c3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d133      	bne.n	8006c3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bde:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d12b      	bne.n	8006c3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d124      	bne.n	8006c3c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f958 	bl	8006ea8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bf8:	e020      	b.n	8006c3c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d01d      	beq.n	8006c3c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2204      	movs	r2, #4
 8006c04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c08:	e018      	b.n	8006c3c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f867 	bl	8006cde <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f8da 	bl	8006dca <CDC_ProcessReception>
      break;
 8006c16:	e014      	b.n	8006c42 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c18:	2100      	movs	r1, #0
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 ffef 	bl	8007bfe <USBH_ClrFeature>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c32:	e005      	b.n	8006c40 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c34:	bf00      	nop
 8006c36:	e004      	b.n	8006c42 <USBH_CDC_Process+0x122>
      break;
 8006c38:	bf00      	nop
 8006c3a:	e002      	b.n	8006c42 <USBH_CDC_Process+0x122>
      break;
 8006c3c:	bf00      	nop
 8006c3e:	e000      	b.n	8006c42 <USBH_CDC_Process+0x122>
      break;
 8006c40:	bf00      	nop

  }

  return status;
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	22a1      	movs	r2, #161	; 0xa1
 8006c70:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2221      	movs	r2, #33	; 0x21
 8006c76:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2207      	movs	r2, #7
 8006c88:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2207      	movs	r2, #7
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fa81 	bl	8008198 <USBH_CtlReq>
 8006c96:	4603      	mov	r3, r0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2221      	movs	r2, #33	; 0x21
 8006cae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2207      	movs	r2, #7
 8006cc6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2207      	movs	r2, #7
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fa62 	bl	8008198 <USBH_CtlReq>
 8006cd4:	4603      	mov	r3, r0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b086      	sub	sp, #24
 8006ce2:	af02      	add	r7, sp, #8
 8006ce4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d002      	beq.n	8006d04 <CDC_ProcessTransmission+0x26>
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d023      	beq.n	8006d4a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d02:	e05e      	b.n	8006dc2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	8b12      	ldrh	r2, [r2, #24]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d90b      	bls.n	8006d28 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	69d9      	ldr	r1, [r3, #28]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8b1a      	ldrh	r2, [r3, #24]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	7b5b      	ldrb	r3, [r3, #13]
 8006d1c:	2001      	movs	r0, #1
 8006d1e:	9000      	str	r0, [sp, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fc48 	bl	80085b6 <USBH_BulkSendData>
 8006d26:	e00b      	b.n	8006d40 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	7b5b      	ldrb	r3, [r3, #13]
 8006d36:	2001      	movs	r0, #1
 8006d38:	9000      	str	r0, [sp, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fc3b 	bl	80085b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d48:	e03b      	b.n	8006dc2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	7b5b      	ldrb	r3, [r3, #13]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 ff5f 	bl	8008c14 <USBH_LL_GetURBState>
 8006d56:	4603      	mov	r3, r0
 8006d58:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d5a:	7afb      	ldrb	r3, [r7, #11]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d128      	bne.n	8006db2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	8b12      	ldrh	r2, [r2, #24]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d90e      	bls.n	8006d8a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	8b12      	ldrh	r2, [r2, #24]
 8006d74:	1a9a      	subs	r2, r3, r2
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	8b12      	ldrh	r2, [r2, #24]
 8006d82:	441a      	add	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	61da      	str	r2, [r3, #28]
 8006d88:	e002      	b.n	8006d90 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006da0:	e00e      	b.n	8006dc0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f868 	bl	8006e80 <USBH_CDC_TransmitCallback>
      break;
 8006db0:	e006      	b.n	8006dc0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006db2:	7afb      	ldrb	r3, [r7, #11]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d103      	bne.n	8006dc0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006dc0:	bf00      	nop
  }
}
 8006dc2:	bf00      	nop
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b086      	sub	sp, #24
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d002      	beq.n	8006df0 <CDC_ProcessReception+0x26>
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d00e      	beq.n	8006e0c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006dee:	e043      	b.n	8006e78 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	6a19      	ldr	r1, [r3, #32]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	8b5a      	ldrh	r2, [r3, #26]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	7b1b      	ldrb	r3, [r3, #12]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fbff 	bl	8008600 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2204      	movs	r2, #4
 8006e06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e0a:	e035      	b.n	8006e78 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	7b1b      	ldrb	r3, [r3, #12]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 fefe 	bl	8008c14 <USBH_LL_GetURBState>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e1c:	7cfb      	ldrb	r3, [r7, #19]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d129      	bne.n	8006e76 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	7b1b      	ldrb	r3, [r3, #12]
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 fe61 	bl	8008af0 <USBH_LL_GetLastXferSize>
 8006e2e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d016      	beq.n	8006e68 <CDC_ProcessReception+0x9e>
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	8b5b      	ldrh	r3, [r3, #26]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d910      	bls.n	8006e68 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	1ad2      	subs	r2, r2, r3
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	6a1a      	ldr	r2, [r3, #32]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	441a      	add	r2, r3
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2203      	movs	r2, #3
 8006e62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e66:	e006      	b.n	8006e76 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f80f 	bl	8006e94 <USBH_CDC_ReceiveCallback>
      break;
 8006e76:	bf00      	nop
  }
}
 8006e78:	bf00      	nop
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e029      	b.n	8006f28 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	79fa      	ldrb	r2, [r7, #7]
 8006ed8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 f81f 	bl	8006f30 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f001 fd31 	bl	8008988 <USBH_LL_Init>

  return USBH_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e009      	b.n	8006f56 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	33e0      	adds	r3, #224	; 0xe0
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3301      	adds	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b0f      	cmp	r3, #15
 8006f5a:	d9f2      	bls.n	8006f42 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	e009      	b.n	8006f76 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7c:	d3f1      	bcc.n	8006f62 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2240      	movs	r2, #64	; 0x40
 8006fa2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d016      	beq.n	800701a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10e      	bne.n	8007014 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ffc:	1c59      	adds	r1, r3, #1
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	33de      	adds	r3, #222	; 0xde
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73fb      	strb	r3, [r7, #15]
 8007012:	e004      	b.n	800701e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007014:	2302      	movs	r3, #2
 8007016:	73fb      	strb	r3, [r7, #15]
 8007018:	e001      	b.n	800701e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800701a:	2302      	movs	r3, #2
 800701c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007042:	78fa      	ldrb	r2, [r7, #3]
 8007044:	429a      	cmp	r2, r3
 8007046:	d204      	bcs.n	8007052 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	78fa      	ldrb	r2, [r7, #3]
 800704c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007050:	e001      	b.n	8007056 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007052:	2302      	movs	r3, #2
 8007054:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007056:	7bfb      	ldrb	r3, [r7, #15]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	461a      	mov	r2, r3
 8007072:	4603      	mov	r3, r0
 8007074:	70fb      	strb	r3, [r7, #3]
 8007076:	460b      	mov	r3, r1
 8007078:	70bb      	strb	r3, [r7, #2]
 800707a:	4613      	mov	r3, r2
 800707c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007082:	2300      	movs	r3, #0
 8007084:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800708c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800708e:	e025      	b.n	80070dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	221a      	movs	r2, #26
 8007094:	fb02 f303 	mul.w	r3, r2, r3
 8007098:	3308      	adds	r3, #8
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	3302      	adds	r3, #2
 80070a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	795b      	ldrb	r3, [r3, #5]
 80070a6:	78fa      	ldrb	r2, [r7, #3]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d002      	beq.n	80070b2 <USBH_FindInterface+0x4e>
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	2bff      	cmp	r3, #255	; 0xff
 80070b0:	d111      	bne.n	80070d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070b6:	78ba      	ldrb	r2, [r7, #2]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d002      	beq.n	80070c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070bc:	78bb      	ldrb	r3, [r7, #2]
 80070be:	2bff      	cmp	r3, #255	; 0xff
 80070c0:	d109      	bne.n	80070d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070c6:	787a      	ldrb	r2, [r7, #1]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d002      	beq.n	80070d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070cc:	787b      	ldrb	r3, [r7, #1]
 80070ce:	2bff      	cmp	r3, #255	; 0xff
 80070d0:	d101      	bne.n	80070d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	e006      	b.n	80070e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	3301      	adds	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070dc:	7dfb      	ldrb	r3, [r7, #23]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d9d6      	bls.n	8007090 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070e2:	23ff      	movs	r3, #255	; 0xff
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 fc81 	bl	8008a00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80070fe:	2101      	movs	r1, #1
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 fd9a 	bl	8008c3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af04      	add	r7, sp, #16
 8007116:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007118:	2302      	movs	r3, #2
 800711a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b01      	cmp	r3, #1
 800712a:	d102      	bne.n	8007132 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2203      	movs	r2, #3
 8007130:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b0b      	cmp	r3, #11
 800713a:	f200 81be 	bhi.w	80074ba <USBH_Process+0x3aa>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <USBH_Process+0x34>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007175 	.word	0x08007175
 8007148:	080071a7 	.word	0x080071a7
 800714c:	0800720f 	.word	0x0800720f
 8007150:	08007455 	.word	0x08007455
 8007154:	080074bb 	.word	0x080074bb
 8007158:	080072b3 	.word	0x080072b3
 800715c:	080073fb 	.word	0x080073fb
 8007160:	080072e9 	.word	0x080072e9
 8007164:	08007309 	.word	0x08007309
 8007168:	08007329 	.word	0x08007329
 800716c:	0800736d 	.word	0x0800736d
 8007170:	0800743d 	.word	0x0800743d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 819e 	beq.w	80074be <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007188:	20c8      	movs	r0, #200	; 0xc8
 800718a:	f001 fd9d 	bl	8008cc8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 fc93 	bl	8008aba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80071a4:	e18b      	b.n	80074be <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d107      	bne.n	80071c0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071be:	e18d      	b.n	80074dc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071ca:	d914      	bls.n	80071f6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071d2:	3301      	adds	r3, #1
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d903      	bls.n	80071ee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	220d      	movs	r2, #13
 80071ea:	701a      	strb	r2, [r3, #0]
      break;
 80071ec:	e176      	b.n	80074dc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	701a      	strb	r2, [r3, #0]
      break;
 80071f4:	e172      	b.n	80074dc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071fc:	f103 020a 	add.w	r2, r3, #10
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007206:	200a      	movs	r0, #10
 8007208:	f001 fd5e 	bl	8008cc8 <USBH_Delay>
      break;
 800720c:	e166      	b.n	80074dc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800721e:	2104      	movs	r1, #4
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007224:	2064      	movs	r0, #100	; 0x64
 8007226:	f001 fd4f 	bl	8008cc8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fc1e 	bl	8008a6c <USBH_LL_GetSpeed>
 8007230:	4603      	mov	r3, r0
 8007232:	461a      	mov	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2205      	movs	r2, #5
 800723e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007240:	2100      	movs	r1, #0
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 fa29 	bl	800869a <USBH_AllocPipe>
 8007248:	4603      	mov	r3, r0
 800724a:	461a      	mov	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007250:	2180      	movs	r1, #128	; 0x80
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 fa21 	bl	800869a <USBH_AllocPipe>
 8007258:	4603      	mov	r3, r0
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	7919      	ldrb	r1, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007274:	b292      	uxth	r2, r2
 8007276:	9202      	str	r2, [sp, #8]
 8007278:	2200      	movs	r2, #0
 800727a:	9201      	str	r2, [sp, #4]
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	4603      	mov	r3, r0
 8007280:	2280      	movs	r2, #128	; 0x80
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 f9da 	bl	800863c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	7959      	ldrb	r1, [r3, #5]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800729c:	b292      	uxth	r2, r2
 800729e:	9202      	str	r2, [sp, #8]
 80072a0:	2200      	movs	r2, #0
 80072a2:	9201      	str	r2, [sp, #4]
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	4603      	mov	r3, r0
 80072a8:	2200      	movs	r2, #0
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 f9c6 	bl	800863c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072b0:	e114      	b.n	80074dc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f918 	bl	80074e8 <USBH_HandleEnum>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 80fe 	bne.w	80074c2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d103      	bne.n	80072e0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2208      	movs	r2, #8
 80072dc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072de:	e0f0      	b.n	80074c2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2207      	movs	r2, #7
 80072e4:	701a      	strb	r2, [r3, #0]
      break;
 80072e6:	e0ec      	b.n	80074c2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 80e9 	beq.w	80074c6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072fa:	2101      	movs	r1, #1
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2208      	movs	r2, #8
 8007304:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007306:	e0de      	b.n	80074c6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800730e:	b29b      	uxth	r3, r3
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fc2c 	bl	8007b70 <USBH_SetCfg>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	f040 80d5 	bne.w	80074ca <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2209      	movs	r2, #9
 8007324:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007326:	e0d0      	b.n	80074ca <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800732e:	f003 0320 	and.w	r3, r3, #32
 8007332:	2b00      	cmp	r3, #0
 8007334:	d016      	beq.n	8007364 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007336:	2101      	movs	r1, #1
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fc3c 	bl	8007bb6 <USBH_SetFeature>
 800733e:	4603      	mov	r3, r0
 8007340:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d103      	bne.n	8007352 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	220a      	movs	r2, #10
 800734e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007350:	e0bd      	b.n	80074ce <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b03      	cmp	r3, #3
 8007358:	f040 80b9 	bne.w	80074ce <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	220a      	movs	r2, #10
 8007360:	701a      	strb	r2, [r3, #0]
      break;
 8007362:	e0b4      	b.n	80074ce <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	220a      	movs	r2, #10
 8007368:	701a      	strb	r2, [r3, #0]
      break;
 800736a:	e0b0      	b.n	80074ce <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 80ad 	beq.w	80074d2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]
 8007384:	e016      	b.n	80073b4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007386:	7bfa      	ldrb	r2, [r7, #15]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	32de      	adds	r2, #222	; 0xde
 800738c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007390:	791a      	ldrb	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007398:	429a      	cmp	r2, r3
 800739a:	d108      	bne.n	80073ae <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800739c:	7bfa      	ldrb	r2, [r7, #15]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	32de      	adds	r2, #222	; 0xde
 80073a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80073ac:	e005      	b.n	80073ba <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	3301      	adds	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0e5      	beq.n	8007386 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d016      	beq.n	80073f2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2206      	movs	r2, #6
 80073da:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073e2:	2103      	movs	r1, #3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073e8:	e073      	b.n	80074d2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	220d      	movs	r2, #13
 80073ee:	701a      	strb	r2, [r3, #0]
      break;
 80073f0:	e06f      	b.n	80074d2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	220d      	movs	r2, #13
 80073f6:	701a      	strb	r2, [r3, #0]
      break;
 80073f8:	e06b      	b.n	80074d2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d017      	beq.n	8007434 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	4798      	blx	r3
 8007410:	4603      	mov	r3, r0
 8007412:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	220b      	movs	r2, #11
 8007420:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007422:	e058      	b.n	80074d6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d154      	bne.n	80074d6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	220d      	movs	r2, #13
 8007430:	701a      	strb	r2, [r3, #0]
      break;
 8007432:	e050      	b.n	80074d6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	220d      	movs	r2, #13
 8007438:	701a      	strb	r2, [r3, #0]
      break;
 800743a:	e04c      	b.n	80074d6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007442:	2b00      	cmp	r3, #0
 8007444:	d049      	beq.n	80074da <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	4798      	blx	r3
      }
      break;
 8007452:	e042      	b.n	80074da <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff fd67 	bl	8006f30 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d009      	beq.n	8007480 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007486:	2b00      	cmp	r3, #0
 8007488:	d005      	beq.n	8007496 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007490:	2105      	movs	r1, #5
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d107      	bne.n	80074b2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff fe20 	bl	80070f0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074b0:	e014      	b.n	80074dc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 faa4 	bl	8008a00 <USBH_LL_Start>
      break;
 80074b8:	e010      	b.n	80074dc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80074ba:	bf00      	nop
 80074bc:	e00e      	b.n	80074dc <USBH_Process+0x3cc>
      break;
 80074be:	bf00      	nop
 80074c0:	e00c      	b.n	80074dc <USBH_Process+0x3cc>
      break;
 80074c2:	bf00      	nop
 80074c4:	e00a      	b.n	80074dc <USBH_Process+0x3cc>
    break;
 80074c6:	bf00      	nop
 80074c8:	e008      	b.n	80074dc <USBH_Process+0x3cc>
      break;
 80074ca:	bf00      	nop
 80074cc:	e006      	b.n	80074dc <USBH_Process+0x3cc>
      break;
 80074ce:	bf00      	nop
 80074d0:	e004      	b.n	80074dc <USBH_Process+0x3cc>
      break;
 80074d2:	bf00      	nop
 80074d4:	e002      	b.n	80074dc <USBH_Process+0x3cc>
      break;
 80074d6:	bf00      	nop
 80074d8:	e000      	b.n	80074dc <USBH_Process+0x3cc>
      break;
 80074da:	bf00      	nop
  }
  return USBH_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop

080074e8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af04      	add	r7, sp, #16
 80074ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074f0:	2301      	movs	r3, #1
 80074f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80074f4:	2301      	movs	r3, #1
 80074f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	785b      	ldrb	r3, [r3, #1]
 80074fc:	2b07      	cmp	r3, #7
 80074fe:	f200 81c1 	bhi.w	8007884 <USBH_HandleEnum+0x39c>
 8007502:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <USBH_HandleEnum+0x20>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	08007529 	.word	0x08007529
 800750c:	080075e7 	.word	0x080075e7
 8007510:	08007651 	.word	0x08007651
 8007514:	080076df 	.word	0x080076df
 8007518:	08007749 	.word	0x08007749
 800751c:	080077b9 	.word	0x080077b9
 8007520:	080077ff 	.word	0x080077ff
 8007524:	08007845 	.word	0x08007845
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007528:	2108      	movs	r1, #8
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa50 	bl	80079d0 <USBH_Get_DevDesc>
 8007530:	4603      	mov	r3, r0
 8007532:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d130      	bne.n	800759c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	7919      	ldrb	r1, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800755e:	b292      	uxth	r2, r2
 8007560:	9202      	str	r2, [sp, #8]
 8007562:	2200      	movs	r2, #0
 8007564:	9201      	str	r2, [sp, #4]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	4603      	mov	r3, r0
 800756a:	2280      	movs	r2, #128	; 0x80
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 f865 	bl	800863c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	7959      	ldrb	r1, [r3, #5]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007586:	b292      	uxth	r2, r2
 8007588:	9202      	str	r2, [sp, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	9201      	str	r2, [sp, #4]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	4603      	mov	r3, r0
 8007592:	2200      	movs	r2, #0
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 f851 	bl	800863c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800759a:	e175      	b.n	8007888 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	2b03      	cmp	r3, #3
 80075a0:	f040 8172 	bne.w	8007888 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075aa:	3301      	adds	r3, #1
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d903      	bls.n	80075c6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	220d      	movs	r2, #13
 80075c2:	701a      	strb	r2, [r3, #0]
      break;
 80075c4:	e160      	b.n	8007888 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	795b      	ldrb	r3, [r3, #5]
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 f885 	bl	80086dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	791b      	ldrb	r3, [r3, #4]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 f87f 	bl	80086dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	701a      	strb	r2, [r3, #0]
      break;
 80075e4:	e150      	b.n	8007888 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80075e6:	2112      	movs	r1, #18
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f9f1 	bl	80079d0 <USBH_Get_DevDesc>
 80075ee:	4603      	mov	r3, r0
 80075f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d103      	bne.n	8007600 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075fe:	e145      	b.n	800788c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	2b03      	cmp	r3, #3
 8007604:	f040 8142 	bne.w	800788c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800760e:	3301      	adds	r3, #1
 8007610:	b2da      	uxtb	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800761e:	2b03      	cmp	r3, #3
 8007620:	d903      	bls.n	800762a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	220d      	movs	r2, #13
 8007626:	701a      	strb	r2, [r3, #0]
      break;
 8007628:	e130      	b.n	800788c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	795b      	ldrb	r3, [r3, #5]
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 f853 	bl	80086dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	791b      	ldrb	r3, [r3, #4]
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 f84d 	bl	80086dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	e11d      	b.n	800788c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007650:	2101      	movs	r1, #1
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa68 	bl	8007b28 <USBH_SetAddress>
 8007658:	4603      	mov	r3, r0
 800765a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d132      	bne.n	80076c8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007662:	2002      	movs	r0, #2
 8007664:	f001 fb30 	bl	8008cc8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2203      	movs	r2, #3
 8007674:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	7919      	ldrb	r1, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800768a:	b292      	uxth	r2, r2
 800768c:	9202      	str	r2, [sp, #8]
 800768e:	2200      	movs	r2, #0
 8007690:	9201      	str	r2, [sp, #4]
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	4603      	mov	r3, r0
 8007696:	2280      	movs	r2, #128	; 0x80
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 ffcf 	bl	800863c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7959      	ldrb	r1, [r3, #5]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076b2:	b292      	uxth	r2, r2
 80076b4:	9202      	str	r2, [sp, #8]
 80076b6:	2200      	movs	r2, #0
 80076b8:	9201      	str	r2, [sp, #4]
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	4603      	mov	r3, r0
 80076be:	2200      	movs	r2, #0
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 ffbb 	bl	800863c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076c6:	e0e3      	b.n	8007890 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	f040 80e0 	bne.w	8007890 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	220d      	movs	r2, #13
 80076d4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	705a      	strb	r2, [r3, #1]
      break;
 80076dc:	e0d8      	b.n	8007890 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80076de:	2109      	movs	r1, #9
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f99d 	bl	8007a20 <USBH_Get_CfgDesc>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d103      	bne.n	80076f8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2204      	movs	r2, #4
 80076f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076f6:	e0cd      	b.n	8007894 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	f040 80ca 	bne.w	8007894 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007706:	3301      	adds	r3, #1
 8007708:	b2da      	uxtb	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007716:	2b03      	cmp	r3, #3
 8007718:	d903      	bls.n	8007722 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	220d      	movs	r2, #13
 800771e:	701a      	strb	r2, [r3, #0]
      break;
 8007720:	e0b8      	b.n	8007894 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	795b      	ldrb	r3, [r3, #5]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 ffd7 	bl	80086dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	791b      	ldrb	r3, [r3, #4]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 ffd1 	bl	80086dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
      break;
 8007746:	e0a5      	b.n	8007894 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f965 	bl	8007a20 <USBH_Get_CfgDesc>
 8007756:	4603      	mov	r3, r0
 8007758:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d103      	bne.n	8007768 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2205      	movs	r2, #5
 8007764:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007766:	e097      	b.n	8007898 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	2b03      	cmp	r3, #3
 800776c:	f040 8094 	bne.w	8007898 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007776:	3301      	adds	r3, #1
 8007778:	b2da      	uxtb	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007786:	2b03      	cmp	r3, #3
 8007788:	d903      	bls.n	8007792 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	220d      	movs	r2, #13
 800778e:	701a      	strb	r2, [r3, #0]
      break;
 8007790:	e082      	b.n	8007898 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	795b      	ldrb	r3, [r3, #5]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 ff9f 	bl	80086dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	791b      	ldrb	r3, [r3, #4]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 ff99 	bl	80086dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
      break;
 80077b6:	e06f      	b.n	8007898 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d019      	beq.n	80077f6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077ce:	23ff      	movs	r3, #255	; 0xff
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f949 	bl	8007a68 <USBH_Get_StringDesc>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2206      	movs	r2, #6
 80077e4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077e6:	e059      	b.n	800789c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d156      	bne.n	800789c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2206      	movs	r2, #6
 80077f2:	705a      	strb	r2, [r3, #1]
      break;
 80077f4:	e052      	b.n	800789c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2206      	movs	r2, #6
 80077fa:	705a      	strb	r2, [r3, #1]
      break;
 80077fc:	e04e      	b.n	800789c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007804:	2b00      	cmp	r3, #0
 8007806:	d019      	beq.n	800783c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007814:	23ff      	movs	r3, #255	; 0xff
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f926 	bl	8007a68 <USBH_Get_StringDesc>
 800781c:	4603      	mov	r3, r0
 800781e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d103      	bne.n	800782e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2207      	movs	r2, #7
 800782a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800782c:	e038      	b.n	80078a0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b03      	cmp	r3, #3
 8007832:	d135      	bne.n	80078a0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2207      	movs	r2, #7
 8007838:	705a      	strb	r2, [r3, #1]
      break;
 800783a:	e031      	b.n	80078a0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2207      	movs	r2, #7
 8007840:	705a      	strb	r2, [r3, #1]
      break;
 8007842:	e02d      	b.n	80078a0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800784a:	2b00      	cmp	r3, #0
 800784c:	d017      	beq.n	800787e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800785a:	23ff      	movs	r3, #255	; 0xff
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f903 	bl	8007a68 <USBH_Get_StringDesc>
 8007862:	4603      	mov	r3, r0
 8007864:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d102      	bne.n	8007872 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007870:	e018      	b.n	80078a4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d115      	bne.n	80078a4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	73fb      	strb	r3, [r7, #15]
      break;
 800787c:	e012      	b.n	80078a4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]
      break;
 8007882:	e00f      	b.n	80078a4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007884:	bf00      	nop
 8007886:	e00e      	b.n	80078a6 <USBH_HandleEnum+0x3be>
      break;
 8007888:	bf00      	nop
 800788a:	e00c      	b.n	80078a6 <USBH_HandleEnum+0x3be>
      break;
 800788c:	bf00      	nop
 800788e:	e00a      	b.n	80078a6 <USBH_HandleEnum+0x3be>
      break;
 8007890:	bf00      	nop
 8007892:	e008      	b.n	80078a6 <USBH_HandleEnum+0x3be>
      break;
 8007894:	bf00      	nop
 8007896:	e006      	b.n	80078a6 <USBH_HandleEnum+0x3be>
      break;
 8007898:	bf00      	nop
 800789a:	e004      	b.n	80078a6 <USBH_HandleEnum+0x3be>
      break;
 800789c:	bf00      	nop
 800789e:	e002      	b.n	80078a6 <USBH_HandleEnum+0x3be>
      break;
 80078a0:	bf00      	nop
 80078a2:	e000      	b.n	80078a6 <USBH_HandleEnum+0x3be>
      break;
 80078a4:	bf00      	nop
  }
  return Status;
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f804 	bl	80078f2 <USBH_HandleSof>
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b0b      	cmp	r3, #11
 8007902:	d10a      	bne.n	800791a <USBH_HandleSof+0x28>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
  }
}
 800791a:	bf00      	nop
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007932:	bf00      	nop
}
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800794e:	bf00      	nop
}
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 f844 	bl	8008a36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	791b      	ldrb	r3, [r3, #4]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fe91 	bl	80086dc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	795b      	ldrb	r3, [r3, #5]
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fe8b 	bl	80086dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80079e2:	78fb      	ldrb	r3, [r7, #3]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	4613      	mov	r3, r2
 80079ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079ee:	2100      	movs	r1, #0
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f864 	bl	8007abe <USBH_GetDescriptor>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a0c:	78fa      	ldrb	r2, [r7, #3]
 8007a0e:	b292      	uxth	r2, r2
 8007a10:	4619      	mov	r1, r3
 8007a12:	f000 f918 	bl	8007c46 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	331c      	adds	r3, #28
 8007a30:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007a32:	887b      	ldrh	r3, [r7, #2]
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f83d 	bl	8007abe <USBH_GetDescriptor>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d107      	bne.n	8007a5e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a4e:	887b      	ldrh	r3, [r7, #2]
 8007a50:	461a      	mov	r2, r3
 8007a52:	68b9      	ldr	r1, [r7, #8]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f987 	bl	8007d68 <USBH_ParseCfgDesc>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	461a      	mov	r2, r3
 8007a74:	460b      	mov	r3, r1
 8007a76:	72fb      	strb	r3, [r7, #11]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007a7c:	7afb      	ldrb	r3, [r7, #11]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a84:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a8c:	893b      	ldrh	r3, [r7, #8]
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	460b      	mov	r3, r1
 8007a92:	2100      	movs	r1, #0
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 f812 	bl	8007abe <USBH_GetDescriptor>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d107      	bne.n	8007ab4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007aaa:	893a      	ldrh	r2, [r7, #8]
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fb24 	bl	80080fc <USBH_ParseStringDesc>
  }

  return status;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	607b      	str	r3, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	72fb      	strb	r3, [r7, #11]
 8007acc:	4613      	mov	r3, r2
 8007ace:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	789b      	ldrb	r3, [r3, #2]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d11c      	bne.n	8007b12 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2206      	movs	r2, #6
 8007ae8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	893a      	ldrh	r2, [r7, #8]
 8007aee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007af0:	893b      	ldrh	r3, [r7, #8]
 8007af2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007afa:	d104      	bne.n	8007b06 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f240 4209 	movw	r2, #1033	; 0x409
 8007b02:	829a      	strh	r2, [r3, #20]
 8007b04:	e002      	b.n	8007b0c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8b3a      	ldrh	r2, [r7, #24]
 8007b10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b12:	8b3b      	ldrh	r3, [r7, #24]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 fb3d 	bl	8008198 <USBH_CtlReq>
 8007b1e:	4603      	mov	r3, r0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	789b      	ldrb	r3, [r3, #2]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d10f      	bne.n	8007b5c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2205      	movs	r2, #5
 8007b46:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2100      	movs	r1, #0
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fb19 	bl	8008198 <USBH_CtlReq>
 8007b66:	4603      	mov	r3, r0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	789b      	ldrb	r3, [r3, #2]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d10e      	bne.n	8007ba2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2209      	movs	r2, #9
 8007b8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	887a      	ldrh	r2, [r7, #2]
 8007b94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 faf6 	bl	8008198 <USBH_CtlReq>
 8007bac:	4603      	mov	r3, r0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	789b      	ldrb	r3, [r3, #2]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d10f      	bne.n	8007bea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2203      	movs	r2, #3
 8007bd4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bea:	2200      	movs	r2, #0
 8007bec:	2100      	movs	r1, #0
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fad2 	bl	8008198 <USBH_CtlReq>
 8007bf4:	4603      	mov	r3, r0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	789b      	ldrb	r3, [r3, #2]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d10f      	bne.n	8007c32 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2202      	movs	r2, #2
 8007c16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007c32:	2200      	movs	r2, #0
 8007c34:	2100      	movs	r1, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 faae 	bl	8008198 <USBH_CtlReq>
 8007c3c:	4603      	mov	r3, r0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	4613      	mov	r3, r2
 8007c52:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	781a      	ldrb	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	785a      	ldrb	r2, [r3, #1]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	3302      	adds	r3, #2
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	3303      	adds	r3, #3
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	021b      	lsls	r3, r3, #8
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	791a      	ldrb	r2, [r3, #4]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	795a      	ldrb	r2, [r3, #5]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	799a      	ldrb	r2, [r3, #6]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	79da      	ldrb	r2, [r3, #7]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	79db      	ldrb	r3, [r3, #7]
 8007ca4:	2b20      	cmp	r3, #32
 8007ca6:	dc11      	bgt.n	8007ccc <USBH_ParseDevDesc+0x86>
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	db16      	blt.n	8007cda <USBH_ParseDevDesc+0x94>
 8007cac:	3b08      	subs	r3, #8
 8007cae:	2201      	movs	r2, #1
 8007cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	bf14      	ite	ne
 8007cc0:	2301      	movne	r3, #1
 8007cc2:	2300      	moveq	r3, #0
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d102      	bne.n	8007cd0 <USBH_ParseDevDesc+0x8a>
 8007cca:	e006      	b.n	8007cda <USBH_ParseDevDesc+0x94>
 8007ccc:	2b40      	cmp	r3, #64	; 0x40
 8007cce:	d104      	bne.n	8007cda <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	79da      	ldrb	r2, [r3, #7]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	71da      	strb	r2, [r3, #7]
      break;
 8007cd8:	e003      	b.n	8007ce2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2240      	movs	r2, #64	; 0x40
 8007cde:	71da      	strb	r2, [r3, #7]
      break;
 8007ce0:	bf00      	nop
  }

  if (length > 8U)
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d939      	bls.n	8007d5c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	3308      	adds	r3, #8
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	3309      	adds	r3, #9
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	330a      	adds	r3, #10
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	330b      	adds	r3, #11
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	330c      	adds	r3, #12
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	330d      	adds	r3, #13
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	4313      	orrs	r3, r2
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	7b9a      	ldrb	r2, [r3, #14]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	7bda      	ldrb	r2, [r3, #15]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	7c1a      	ldrb	r2, [r3, #16]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	7c5a      	ldrb	r2, [r3, #17]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	745a      	strb	r2, [r3, #17]
  }
}
 8007d5c:	bf00      	nop
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08c      	sub	sp, #48	; 0x30
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d7c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	781a      	ldrb	r2, [r3, #0]
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	785a      	ldrb	r2, [r3, #1]
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	3302      	adds	r3, #2
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	3303      	adds	r3, #3
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc4:	bf28      	it	cs
 8007dc6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	791a      	ldrb	r2, [r3, #4]
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	795a      	ldrb	r2, [r3, #5]
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	799a      	ldrb	r2, [r3, #6]
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	79da      	ldrb	r2, [r3, #7]
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	7a1a      	ldrb	r2, [r3, #8]
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b09      	cmp	r3, #9
 8007dfe:	d002      	beq.n	8007e06 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	2209      	movs	r2, #9
 8007e04:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	2b09      	cmp	r3, #9
 8007e0a:	f240 809d 	bls.w	8007f48 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e0e:	2309      	movs	r3, #9
 8007e10:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e16:	e081      	b.n	8007f1c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e18:	f107 0316 	add.w	r3, r7, #22
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e20:	f000 f99f 	bl	8008162 <USBH_GetNextDesc>
 8007e24:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d176      	bne.n	8007f1c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	2b09      	cmp	r3, #9
 8007e34:	d002      	beq.n	8007e3c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	2209      	movs	r2, #9
 8007e3a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e40:	221a      	movs	r2, #26
 8007e42:	fb02 f303 	mul.w	r3, r2, r3
 8007e46:	3308      	adds	r3, #8
 8007e48:	6a3a      	ldr	r2, [r7, #32]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e52:	69f8      	ldr	r0, [r7, #28]
 8007e54:	f000 f87e 	bl	8007f54 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e62:	e043      	b.n	8007eec <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e64:	f107 0316 	add.w	r3, r7, #22
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6c:	f000 f979 	bl	8008162 <USBH_GetNextDesc>
 8007e70:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	785b      	ldrb	r3, [r3, #1]
 8007e76:	2b05      	cmp	r3, #5
 8007e78:	d138      	bne.n	8007eec <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	795b      	ldrb	r3, [r3, #5]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d10f      	bne.n	8007ea2 <USBH_ParseCfgDesc+0x13a>
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	799b      	ldrb	r3, [r3, #6]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d10b      	bne.n	8007ea2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	79db      	ldrb	r3, [r3, #7]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10f      	bne.n	8007eb2 <USBH_ParseCfgDesc+0x14a>
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b09      	cmp	r3, #9
 8007e98:	d00b      	beq.n	8007eb2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	2209      	movs	r2, #9
 8007e9e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ea0:	e007      	b.n	8007eb2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b07      	cmp	r3, #7
 8007ea8:	d004      	beq.n	8007eb4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	2207      	movs	r2, #7
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	e000      	b.n	8007eb4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007eb2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eb8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ebc:	3201      	adds	r2, #1
 8007ebe:	00d2      	lsls	r2, r2, #3
 8007ec0:	211a      	movs	r1, #26
 8007ec2:	fb01 f303 	mul.w	r3, r1, r3
 8007ec6:	4413      	add	r3, r2
 8007ec8:	3308      	adds	r3, #8
 8007eca:	6a3a      	ldr	r2, [r7, #32]
 8007ecc:	4413      	add	r3, r2
 8007ece:	3304      	adds	r3, #4
 8007ed0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed4:	69b9      	ldr	r1, [r7, #24]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 f86b 	bl	8007fb2 <USBH_ParseEPDesc>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007ee2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	791b      	ldrb	r3, [r3, #4]
 8007ef0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d204      	bcs.n	8007f02 <USBH_ParseCfgDesc+0x19a>
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	885a      	ldrh	r2, [r3, #2]
 8007efc:	8afb      	ldrh	r3, [r7, #22]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d8b0      	bhi.n	8007e64 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	791b      	ldrb	r3, [r3, #4]
 8007f06:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d201      	bcs.n	8007f12 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e01c      	b.n	8007f4c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f16:	3301      	adds	r3, #1
 8007f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d805      	bhi.n	8007f30 <USBH_ParseCfgDesc+0x1c8>
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	885a      	ldrh	r2, [r3, #2]
 8007f28:	8afb      	ldrh	r3, [r7, #22]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	f63f af74 	bhi.w	8007e18 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	791b      	ldrb	r3, [r3, #4]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	bf28      	it	cs
 8007f38:	2302      	movcs	r3, #2
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d201      	bcs.n	8007f48 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e001      	b.n	8007f4c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007f48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3730      	adds	r7, #48	; 0x30
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781a      	ldrb	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	785a      	ldrb	r2, [r3, #1]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	789a      	ldrb	r2, [r3, #2]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	78da      	ldrb	r2, [r3, #3]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	791a      	ldrb	r2, [r3, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	795a      	ldrb	r2, [r3, #5]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	799a      	ldrb	r2, [r3, #6]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	79da      	ldrb	r2, [r3, #7]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	7a1a      	ldrb	r2, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	721a      	strb	r2, [r3, #8]
}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	781a      	ldrb	r2, [r3, #0]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	785a      	ldrb	r2, [r3, #1]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	789a      	ldrb	r2, [r3, #2]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	78da      	ldrb	r2, [r3, #3]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3305      	adds	r3, #5
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	021b      	lsls	r3, r3, #8
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	799a      	ldrb	r2, [r3, #6]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	889b      	ldrh	r3, [r3, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800800e:	2303      	movs	r3, #3
 8008010:	75fb      	strb	r3, [r7, #23]
 8008012:	e033      	b.n	800807c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	889b      	ldrh	r3, [r3, #4]
 8008018:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800801c:	f023 0307 	bic.w	r3, r3, #7
 8008020:	b29a      	uxth	r2, r3
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	889b      	ldrh	r3, [r3, #4]
 800802a:	b21a      	sxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3304      	adds	r3, #4
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b299      	uxth	r1, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3305      	adds	r3, #5
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	b29b      	uxth	r3, r3
 8008040:	430b      	orrs	r3, r1
 8008042:	b29b      	uxth	r3, r3
 8008044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008048:	2b00      	cmp	r3, #0
 800804a:	d110      	bne.n	800806e <USBH_ParseEPDesc+0xbc>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3304      	adds	r3, #4
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	b299      	uxth	r1, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3305      	adds	r3, #5
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	b29b      	uxth	r3, r3
 8008060:	430b      	orrs	r3, r1
 8008062:	b29b      	uxth	r3, r3
 8008064:	b21b      	sxth	r3, r3
 8008066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800806a:	b21b      	sxth	r3, r3
 800806c:	e001      	b.n	8008072 <USBH_ParseEPDesc+0xc0>
 800806e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008072:	4313      	orrs	r3, r2
 8008074:	b21b      	sxth	r3, r3
 8008076:	b29a      	uxth	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008082:	2b00      	cmp	r3, #0
 8008084:	d116      	bne.n	80080b4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	78db      	ldrb	r3, [r3, #3]
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	2b01      	cmp	r3, #1
 8008090:	d005      	beq.n	800809e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	78db      	ldrb	r3, [r3, #3]
 8008096:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800809a:	2b03      	cmp	r3, #3
 800809c:	d127      	bne.n	80080ee <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	799b      	ldrb	r3, [r3, #6]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <USBH_ParseEPDesc+0xfc>
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	799b      	ldrb	r3, [r3, #6]
 80080aa:	2b10      	cmp	r3, #16
 80080ac:	d91f      	bls.n	80080ee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080ae:	2303      	movs	r3, #3
 80080b0:	75fb      	strb	r3, [r7, #23]
 80080b2:	e01c      	b.n	80080ee <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	78db      	ldrb	r3, [r3, #3]
 80080b8:	f003 0303 	and.w	r3, r3, #3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d10a      	bne.n	80080d6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	799b      	ldrb	r3, [r3, #6]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <USBH_ParseEPDesc+0x11e>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	799b      	ldrb	r3, [r3, #6]
 80080cc:	2b10      	cmp	r3, #16
 80080ce:	d90e      	bls.n	80080ee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080d0:	2303      	movs	r3, #3
 80080d2:	75fb      	strb	r3, [r7, #23]
 80080d4:	e00b      	b.n	80080ee <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	78db      	ldrb	r3, [r3, #3]
 80080da:	f003 0303 	and.w	r3, r3, #3
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d105      	bne.n	80080ee <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	799b      	ldrb	r3, [r3, #6]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080ea:	2303      	movs	r3, #3
 80080ec:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	371c      	adds	r7, #28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4613      	mov	r3, r2
 8008108:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3301      	adds	r3, #1
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b03      	cmp	r3, #3
 8008112:	d120      	bne.n	8008156 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	1e9a      	subs	r2, r3, #2
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	4293      	cmp	r3, r2
 800811e:	bf28      	it	cs
 8008120:	4613      	movcs	r3, r2
 8008122:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3302      	adds	r3, #2
 8008128:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800812a:	2300      	movs	r3, #0
 800812c:	82fb      	strh	r3, [r7, #22]
 800812e:	e00b      	b.n	8008148 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008130:	8afb      	ldrh	r3, [r7, #22]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	4413      	add	r3, r2
 8008136:	781a      	ldrb	r2, [r3, #0]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	3301      	adds	r3, #1
 8008140:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008142:	8afb      	ldrh	r3, [r7, #22]
 8008144:	3302      	adds	r3, #2
 8008146:	82fb      	strh	r3, [r7, #22]
 8008148:	8afa      	ldrh	r2, [r7, #22]
 800814a:	8abb      	ldrh	r3, [r7, #20]
 800814c:	429a      	cmp	r2, r3
 800814e:	d3ef      	bcc.n	8008130 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]
  }
}
 8008156:	bf00      	nop
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008162:	b480      	push	{r7}
 8008164:	b085      	sub	sp, #20
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	881a      	ldrh	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	4413      	add	r3, r2
 8008178:	b29a      	uxth	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4413      	add	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800818a:	68fb      	ldr	r3, [r7, #12]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80081a6:	2301      	movs	r3, #1
 80081a8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	789b      	ldrb	r3, [r3, #2]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d002      	beq.n	80081b8 <USBH_CtlReq+0x20>
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d00f      	beq.n	80081d6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80081b6:	e027      	b.n	8008208 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	88fa      	ldrh	r2, [r7, #6]
 80081c2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2202      	movs	r2, #2
 80081ce:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081d0:	2301      	movs	r3, #1
 80081d2:	75fb      	strb	r3, [r7, #23]
      break;
 80081d4:	e018      	b.n	8008208 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 f81c 	bl	8008214 <USBH_HandleControl>
 80081dc:	4603      	mov	r3, r0
 80081de:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <USBH_CtlReq+0x54>
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d106      	bne.n	80081fa <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2201      	movs	r2, #1
 80081f0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	761a      	strb	r2, [r3, #24]
      break;
 80081f8:	e005      	b.n	8008206 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d102      	bne.n	8008206 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2201      	movs	r2, #1
 8008204:	709a      	strb	r2, [r3, #2]
      break;
 8008206:	bf00      	nop
  }
  return status;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af02      	add	r7, sp, #8
 800821a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008220:	2300      	movs	r3, #0
 8008222:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	7e1b      	ldrb	r3, [r3, #24]
 8008228:	3b01      	subs	r3, #1
 800822a:	2b0a      	cmp	r3, #10
 800822c:	f200 8156 	bhi.w	80084dc <USBH_HandleControl+0x2c8>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <USBH_HandleControl+0x24>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	08008265 	.word	0x08008265
 800823c:	0800827f 	.word	0x0800827f
 8008240:	080082e9 	.word	0x080082e9
 8008244:	0800830f 	.word	0x0800830f
 8008248:	08008347 	.word	0x08008347
 800824c:	08008371 	.word	0x08008371
 8008250:	080083c3 	.word	0x080083c3
 8008254:	080083e5 	.word	0x080083e5
 8008258:	08008421 	.word	0x08008421
 800825c:	08008447 	.word	0x08008447
 8008260:	08008485 	.word	0x08008485
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f103 0110 	add.w	r1, r3, #16
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	795b      	ldrb	r3, [r3, #5]
 800826e:	461a      	mov	r2, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f943 	bl	80084fc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2202      	movs	r2, #2
 800827a:	761a      	strb	r2, [r3, #24]
      break;
 800827c:	e139      	b.n	80084f2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	795b      	ldrb	r3, [r3, #5]
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fcc5 	bl	8008c14 <USBH_LL_GetURBState>
 800828a:	4603      	mov	r3, r0
 800828c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d11e      	bne.n	80082d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	7c1b      	ldrb	r3, [r3, #16]
 8008298:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800829c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	8adb      	ldrh	r3, [r3, #22]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80082a6:	7b7b      	ldrb	r3, [r7, #13]
 80082a8:	2b80      	cmp	r3, #128	; 0x80
 80082aa:	d103      	bne.n	80082b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2203      	movs	r2, #3
 80082b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082b2:	e115      	b.n	80084e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2205      	movs	r2, #5
 80082b8:	761a      	strb	r2, [r3, #24]
      break;
 80082ba:	e111      	b.n	80084e0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80082bc:	7b7b      	ldrb	r3, [r7, #13]
 80082be:	2b80      	cmp	r3, #128	; 0x80
 80082c0:	d103      	bne.n	80082ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2209      	movs	r2, #9
 80082c6:	761a      	strb	r2, [r3, #24]
      break;
 80082c8:	e10a      	b.n	80084e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2207      	movs	r2, #7
 80082ce:	761a      	strb	r2, [r3, #24]
      break;
 80082d0:	e106      	b.n	80084e0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d003      	beq.n	80082e0 <USBH_HandleControl+0xcc>
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	f040 8100 	bne.w	80084e0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	220b      	movs	r2, #11
 80082e4:	761a      	strb	r2, [r3, #24]
      break;
 80082e6:	e0fb      	b.n	80084e0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6899      	ldr	r1, [r3, #8]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	899a      	ldrh	r2, [r3, #12]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	791b      	ldrb	r3, [r3, #4]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f93a 	bl	800857a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2204      	movs	r2, #4
 800830a:	761a      	strb	r2, [r3, #24]
      break;
 800830c:	e0f1      	b.n	80084f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	791b      	ldrb	r3, [r3, #4]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fc7d 	bl	8008c14 <USBH_LL_GetURBState>
 800831a:	4603      	mov	r3, r0
 800831c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d102      	bne.n	800832a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2209      	movs	r2, #9
 8008328:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b05      	cmp	r3, #5
 800832e:	d102      	bne.n	8008336 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008330:	2303      	movs	r3, #3
 8008332:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008334:	e0d6      	b.n	80084e4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	2b04      	cmp	r3, #4
 800833a:	f040 80d3 	bne.w	80084e4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	220b      	movs	r2, #11
 8008342:	761a      	strb	r2, [r3, #24]
      break;
 8008344:	e0ce      	b.n	80084e4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6899      	ldr	r1, [r3, #8]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	899a      	ldrh	r2, [r3, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	795b      	ldrb	r3, [r3, #5]
 8008352:	2001      	movs	r0, #1
 8008354:	9000      	str	r0, [sp, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f8ea 	bl	8008530 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008362:	b29a      	uxth	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2206      	movs	r2, #6
 800836c:	761a      	strb	r2, [r3, #24]
      break;
 800836e:	e0c0      	b.n	80084f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	795b      	ldrb	r3, [r3, #5]
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fc4c 	bl	8008c14 <USBH_LL_GetURBState>
 800837c:	4603      	mov	r3, r0
 800837e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d103      	bne.n	800838e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2207      	movs	r2, #7
 800838a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800838c:	e0ac      	b.n	80084e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b05      	cmp	r3, #5
 8008392:	d105      	bne.n	80083a0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	220c      	movs	r2, #12
 8008398:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800839a:	2303      	movs	r3, #3
 800839c:	73fb      	strb	r3, [r7, #15]
      break;
 800839e:	e0a3      	b.n	80084e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d103      	bne.n	80083ae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2205      	movs	r2, #5
 80083aa:	761a      	strb	r2, [r3, #24]
      break;
 80083ac:	e09c      	b.n	80084e8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	f040 8099 	bne.w	80084e8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	220b      	movs	r2, #11
 80083ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083bc:	2302      	movs	r3, #2
 80083be:	73fb      	strb	r3, [r7, #15]
      break;
 80083c0:	e092      	b.n	80084e8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	791b      	ldrb	r3, [r3, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	2100      	movs	r1, #0
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f8d5 	bl	800857a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2208      	movs	r2, #8
 80083e0:	761a      	strb	r2, [r3, #24]

      break;
 80083e2:	e086      	b.n	80084f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	791b      	ldrb	r3, [r3, #4]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fc12 	bl	8008c14 <USBH_LL_GetURBState>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d105      	bne.n	8008406 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	220d      	movs	r2, #13
 80083fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008404:	e072      	b.n	80084ec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b04      	cmp	r3, #4
 800840a:	d103      	bne.n	8008414 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	220b      	movs	r2, #11
 8008410:	761a      	strb	r2, [r3, #24]
      break;
 8008412:	e06b      	b.n	80084ec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b05      	cmp	r3, #5
 8008418:	d168      	bne.n	80084ec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800841a:	2303      	movs	r3, #3
 800841c:	73fb      	strb	r3, [r7, #15]
      break;
 800841e:	e065      	b.n	80084ec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	795b      	ldrb	r3, [r3, #5]
 8008424:	2201      	movs	r2, #1
 8008426:	9200      	str	r2, [sp, #0]
 8008428:	2200      	movs	r2, #0
 800842a:	2100      	movs	r1, #0
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f87f 	bl	8008530 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008438:	b29a      	uxth	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	220a      	movs	r2, #10
 8008442:	761a      	strb	r2, [r3, #24]
      break;
 8008444:	e055      	b.n	80084f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	795b      	ldrb	r3, [r3, #5]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fbe1 	bl	8008c14 <USBH_LL_GetURBState>
 8008452:	4603      	mov	r3, r0
 8008454:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d105      	bne.n	8008468 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	220d      	movs	r2, #13
 8008464:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008466:	e043      	b.n	80084f0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d103      	bne.n	8008476 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2209      	movs	r2, #9
 8008472:	761a      	strb	r2, [r3, #24]
      break;
 8008474:	e03c      	b.n	80084f0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d139      	bne.n	80084f0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	220b      	movs	r2, #11
 8008480:	761a      	strb	r2, [r3, #24]
      break;
 8008482:	e035      	b.n	80084f0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	7e5b      	ldrb	r3, [r3, #25]
 8008488:	3301      	adds	r3, #1
 800848a:	b2da      	uxtb	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	765a      	strb	r2, [r3, #25]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	7e5b      	ldrb	r3, [r3, #25]
 8008494:	2b02      	cmp	r3, #2
 8008496:	d806      	bhi.n	80084a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80084a4:	e025      	b.n	80084f2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084ac:	2106      	movs	r1, #6
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	795b      	ldrb	r3, [r3, #5]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f90c 	bl	80086dc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	791b      	ldrb	r3, [r3, #4]
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f906 	bl	80086dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084d6:	2302      	movs	r3, #2
 80084d8:	73fb      	strb	r3, [r7, #15]
      break;
 80084da:	e00a      	b.n	80084f2 <USBH_HandleControl+0x2de>

    default:
      break;
 80084dc:	bf00      	nop
 80084de:	e008      	b.n	80084f2 <USBH_HandleControl+0x2de>
      break;
 80084e0:	bf00      	nop
 80084e2:	e006      	b.n	80084f2 <USBH_HandleControl+0x2de>
      break;
 80084e4:	bf00      	nop
 80084e6:	e004      	b.n	80084f2 <USBH_HandleControl+0x2de>
      break;
 80084e8:	bf00      	nop
 80084ea:	e002      	b.n	80084f2 <USBH_HandleControl+0x2de>
      break;
 80084ec:	bf00      	nop
 80084ee:	e000      	b.n	80084f2 <USBH_HandleControl+0x2de>
      break;
 80084f0:	bf00      	nop
  }

  return status;
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af04      	add	r7, sp, #16
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	4613      	mov	r3, r2
 8008508:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800850a:	79f9      	ldrb	r1, [r7, #7]
 800850c:	2300      	movs	r3, #0
 800850e:	9303      	str	r3, [sp, #12]
 8008510:	2308      	movs	r3, #8
 8008512:	9302      	str	r3, [sp, #8]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	2300      	movs	r3, #0
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	2300      	movs	r3, #0
 800851e:	2200      	movs	r2, #0
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 fb46 	bl	8008bb2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af04      	add	r7, sp, #16
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	4611      	mov	r1, r2
 800853c:	461a      	mov	r2, r3
 800853e:	460b      	mov	r3, r1
 8008540:	80fb      	strh	r3, [r7, #6]
 8008542:	4613      	mov	r3, r2
 8008544:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008554:	7979      	ldrb	r1, [r7, #5]
 8008556:	7e3b      	ldrb	r3, [r7, #24]
 8008558:	9303      	str	r3, [sp, #12]
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	9302      	str	r3, [sp, #8]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	2301      	movs	r3, #1
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	2300      	movs	r3, #0
 8008568:	2200      	movs	r2, #0
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 fb21 	bl	8008bb2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b088      	sub	sp, #32
 800857e:	af04      	add	r7, sp, #16
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	4611      	mov	r1, r2
 8008586:	461a      	mov	r2, r3
 8008588:	460b      	mov	r3, r1
 800858a:	80fb      	strh	r3, [r7, #6]
 800858c:	4613      	mov	r3, r2
 800858e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008590:	7979      	ldrb	r1, [r7, #5]
 8008592:	2300      	movs	r3, #0
 8008594:	9303      	str	r3, [sp, #12]
 8008596:	88fb      	ldrh	r3, [r7, #6]
 8008598:	9302      	str	r3, [sp, #8]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	2301      	movs	r3, #1
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	2300      	movs	r3, #0
 80085a4:	2201      	movs	r2, #1
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f000 fb03 	bl	8008bb2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085ac:	2300      	movs	r3, #0

}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b088      	sub	sp, #32
 80085ba:	af04      	add	r7, sp, #16
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	4611      	mov	r1, r2
 80085c2:	461a      	mov	r2, r3
 80085c4:	460b      	mov	r3, r1
 80085c6:	80fb      	strh	r3, [r7, #6]
 80085c8:	4613      	mov	r3, r2
 80085ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085da:	7979      	ldrb	r1, [r7, #5]
 80085dc:	7e3b      	ldrb	r3, [r7, #24]
 80085de:	9303      	str	r3, [sp, #12]
 80085e0:	88fb      	ldrh	r3, [r7, #6]
 80085e2:	9302      	str	r3, [sp, #8]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	2301      	movs	r3, #1
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2302      	movs	r3, #2
 80085ee:	2200      	movs	r2, #0
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fade 	bl	8008bb2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af04      	add	r7, sp, #16
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4611      	mov	r1, r2
 800860c:	461a      	mov	r2, r3
 800860e:	460b      	mov	r3, r1
 8008610:	80fb      	strh	r3, [r7, #6]
 8008612:	4613      	mov	r3, r2
 8008614:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008616:	7979      	ldrb	r1, [r7, #5]
 8008618:	2300      	movs	r3, #0
 800861a:	9303      	str	r3, [sp, #12]
 800861c:	88fb      	ldrh	r3, [r7, #6]
 800861e:	9302      	str	r3, [sp, #8]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	9301      	str	r3, [sp, #4]
 8008624:	2301      	movs	r3, #1
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	2302      	movs	r3, #2
 800862a:	2201      	movs	r2, #1
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 fac0 	bl	8008bb2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af04      	add	r7, sp, #16
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	4608      	mov	r0, r1
 8008646:	4611      	mov	r1, r2
 8008648:	461a      	mov	r2, r3
 800864a:	4603      	mov	r3, r0
 800864c:	70fb      	strb	r3, [r7, #3]
 800864e:	460b      	mov	r3, r1
 8008650:	70bb      	strb	r3, [r7, #2]
 8008652:	4613      	mov	r3, r2
 8008654:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008656:	7878      	ldrb	r0, [r7, #1]
 8008658:	78ba      	ldrb	r2, [r7, #2]
 800865a:	78f9      	ldrb	r1, [r7, #3]
 800865c:	8b3b      	ldrh	r3, [r7, #24]
 800865e:	9302      	str	r3, [sp, #8]
 8008660:	7d3b      	ldrb	r3, [r7, #20]
 8008662:	9301      	str	r3, [sp, #4]
 8008664:	7c3b      	ldrb	r3, [r7, #16]
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	4603      	mov	r3, r0
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fa53 	bl	8008b16 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008686:	78fb      	ldrb	r3, [r7, #3]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa72 	bl	8008b74 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	460b      	mov	r3, r1
 80086a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f836 	bl	8008718 <USBH_GetFreePipe>
 80086ac:	4603      	mov	r3, r0
 80086ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086b0:	89fb      	ldrh	r3, [r7, #14]
 80086b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d00a      	beq.n	80086d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	89fb      	ldrh	r3, [r7, #14]
 80086be:	f003 030f 	and.w	r3, r3, #15
 80086c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	33e0      	adds	r3, #224	; 0xe0
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086d0:	89fb      	ldrh	r3, [r7, #14]
 80086d2:	b2db      	uxtb	r3, r3
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80086e8:	78fb      	ldrb	r3, [r7, #3]
 80086ea:	2b0f      	cmp	r3, #15
 80086ec:	d80d      	bhi.n	800870a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	33e0      	adds	r3, #224	; 0xe0
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	78fb      	ldrb	r3, [r7, #3]
 80086fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	33e0      	adds	r3, #224	; 0xe0
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	440b      	add	r3, r1
 8008708:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
 8008728:	e00f      	b.n	800874a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	33e0      	adds	r3, #224	; 0xe0
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d102      	bne.n	8008744 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	b29b      	uxth	r3, r3
 8008742:	e007      	b.n	8008754 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	3301      	adds	r3, #1
 8008748:	73fb      	strb	r3, [r7, #15]
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	2b0f      	cmp	r3, #15
 800874e:	d9ec      	bls.n	800872a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008750:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008764:	2201      	movs	r2, #1
 8008766:	490e      	ldr	r1, [pc, #56]	; (80087a0 <MX_USB_HOST_Init+0x40>)
 8008768:	480e      	ldr	r0, [pc, #56]	; (80087a4 <MX_USB_HOST_Init+0x44>)
 800876a:	f7fe fba7 	bl	8006ebc <USBH_Init>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008774:	f7f8 fe12 	bl	800139c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008778:	490b      	ldr	r1, [pc, #44]	; (80087a8 <MX_USB_HOST_Init+0x48>)
 800877a:	480a      	ldr	r0, [pc, #40]	; (80087a4 <MX_USB_HOST_Init+0x44>)
 800877c:	f7fe fc2c 	bl	8006fd8 <USBH_RegisterClass>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008786:	f7f8 fe09 	bl	800139c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800878a:	4806      	ldr	r0, [pc, #24]	; (80087a4 <MX_USB_HOST_Init+0x44>)
 800878c:	f7fe fcb0 	bl	80070f0 <USBH_Start>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008796:	f7f8 fe01 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800879a:	bf00      	nop
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	080087c1 	.word	0x080087c1
 80087a4:	20000358 	.word	0x20000358
 80087a8:	2000000c 	.word	0x2000000c

080087ac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80087b0:	4802      	ldr	r0, [pc, #8]	; (80087bc <MX_USB_HOST_Process+0x10>)
 80087b2:	f7fe fcad 	bl	8007110 <USBH_Process>
}
 80087b6:	bf00      	nop
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20000358 	.word	0x20000358

080087c0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80087cc:	78fb      	ldrb	r3, [r7, #3]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d819      	bhi.n	8008808 <USBH_UserProcess+0x48>
 80087d4:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <USBH_UserProcess+0x1c>)
 80087d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087da:	bf00      	nop
 80087dc:	08008809 	.word	0x08008809
 80087e0:	080087f9 	.word	0x080087f9
 80087e4:	08008809 	.word	0x08008809
 80087e8:	08008801 	.word	0x08008801
 80087ec:	080087f1 	.word	0x080087f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087f0:	4b09      	ldr	r3, [pc, #36]	; (8008818 <USBH_UserProcess+0x58>)
 80087f2:	2203      	movs	r2, #3
 80087f4:	701a      	strb	r2, [r3, #0]
  break;
 80087f6:	e008      	b.n	800880a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80087f8:	4b07      	ldr	r3, [pc, #28]	; (8008818 <USBH_UserProcess+0x58>)
 80087fa:	2202      	movs	r2, #2
 80087fc:	701a      	strb	r2, [r3, #0]
  break;
 80087fe:	e004      	b.n	800880a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008800:	4b05      	ldr	r3, [pc, #20]	; (8008818 <USBH_UserProcess+0x58>)
 8008802:	2201      	movs	r2, #1
 8008804:	701a      	strb	r2, [r3, #0]
  break;
 8008806:	e000      	b.n	800880a <USBH_UserProcess+0x4a>

  default:
  break;
 8008808:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	20000730 	.word	0x20000730

0800881c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	; 0x28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008824:	f107 0314 	add.w	r3, r7, #20
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	605a      	str	r2, [r3, #4]
 800882e:	609a      	str	r2, [r3, #8]
 8008830:	60da      	str	r2, [r3, #12]
 8008832:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800883c:	d147      	bne.n	80088ce <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800883e:	2300      	movs	r3, #0
 8008840:	613b      	str	r3, [r7, #16]
 8008842:	4b25      	ldr	r3, [pc, #148]	; (80088d8 <HAL_HCD_MspInit+0xbc>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	4a24      	ldr	r2, [pc, #144]	; (80088d8 <HAL_HCD_MspInit+0xbc>)
 8008848:	f043 0301 	orr.w	r3, r3, #1
 800884c:	6313      	str	r3, [r2, #48]	; 0x30
 800884e:	4b22      	ldr	r3, [pc, #136]	; (80088d8 <HAL_HCD_MspInit+0xbc>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800885a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800885e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008860:	2300      	movs	r3, #0
 8008862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008864:	2300      	movs	r3, #0
 8008866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008868:	f107 0314 	add.w	r3, r7, #20
 800886c:	4619      	mov	r1, r3
 800886e:	481b      	ldr	r0, [pc, #108]	; (80088dc <HAL_HCD_MspInit+0xc0>)
 8008870:	f7f9 f9dc 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008874:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800887a:	2302      	movs	r3, #2
 800887c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800887e:	2300      	movs	r3, #0
 8008880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008882:	2300      	movs	r3, #0
 8008884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008886:	230a      	movs	r3, #10
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800888a:	f107 0314 	add.w	r3, r7, #20
 800888e:	4619      	mov	r1, r3
 8008890:	4812      	ldr	r0, [pc, #72]	; (80088dc <HAL_HCD_MspInit+0xc0>)
 8008892:	f7f9 f9cb 	bl	8001c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008896:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <HAL_HCD_MspInit+0xbc>)
 8008898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889a:	4a0f      	ldr	r2, [pc, #60]	; (80088d8 <HAL_HCD_MspInit+0xbc>)
 800889c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a0:	6353      	str	r3, [r2, #52]	; 0x34
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <HAL_HCD_MspInit+0xbc>)
 80088a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088aa:	4a0b      	ldr	r2, [pc, #44]	; (80088d8 <HAL_HCD_MspInit+0xbc>)
 80088ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088b0:	6453      	str	r3, [r2, #68]	; 0x44
 80088b2:	4b09      	ldr	r3, [pc, #36]	; (80088d8 <HAL_HCD_MspInit+0xbc>)
 80088b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088be:	2200      	movs	r2, #0
 80088c0:	2100      	movs	r1, #0
 80088c2:	2043      	movs	r0, #67	; 0x43
 80088c4:	f7f9 f97b 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088c8:	2043      	movs	r0, #67	; 0x43
 80088ca:	f7f9 f994 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088ce:	bf00      	nop
 80088d0:	3728      	adds	r7, #40	; 0x28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	40023800 	.word	0x40023800
 80088dc:	40020000 	.word	0x40020000

080088e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe ffed 	bl	80078ce <USBH_LL_IncTimer>
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff f825 	bl	800795a <USBH_LL_Connect>
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff f82e 	bl	8007988 <USBH_LL_Disconnect>
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
 8008940:	4613      	mov	r3, r2
 8008942:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe ffdf 	bl	8007922 <USBH_LL_PortEnabled>
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe ffdf 	bl	800793e <USBH_LL_PortDisabled>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008996:	2b01      	cmp	r3, #1
 8008998:	d12a      	bne.n	80089f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800899a:	4a18      	ldr	r2, [pc, #96]	; (80089fc <USBH_LL_Init+0x74>)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a15      	ldr	r2, [pc, #84]	; (80089fc <USBH_LL_Init+0x74>)
 80089a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089aa:	4b14      	ldr	r3, [pc, #80]	; (80089fc <USBH_LL_Init+0x74>)
 80089ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80089b2:	4b12      	ldr	r3, [pc, #72]	; (80089fc <USBH_LL_Init+0x74>)
 80089b4:	2208      	movs	r2, #8
 80089b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80089b8:	4b10      	ldr	r3, [pc, #64]	; (80089fc <USBH_LL_Init+0x74>)
 80089ba:	2201      	movs	r2, #1
 80089bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089be:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <USBH_LL_Init+0x74>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089c4:	4b0d      	ldr	r3, [pc, #52]	; (80089fc <USBH_LL_Init+0x74>)
 80089c6:	2202      	movs	r2, #2
 80089c8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089ca:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <USBH_LL_Init+0x74>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089d0:	480a      	ldr	r0, [pc, #40]	; (80089fc <USBH_LL_Init+0x74>)
 80089d2:	f7f9 fae0 	bl	8001f96 <HAL_HCD_Init>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089dc:	f7f8 fcde 	bl	800139c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089e0:	4806      	ldr	r0, [pc, #24]	; (80089fc <USBH_LL_Init+0x74>)
 80089e2:	f7f9 fec4 	bl	800276e <HAL_HCD_GetCurrentFrame>
 80089e6:	4603      	mov	r3, r0
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7fe ff60 	bl	80078b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20000734 	.word	0x20000734

08008a00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7f9 fe33 	bl	8002682 <HAL_HCD_Start>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 f95c 	bl	8008ce0 <USBH_Get_USB_Status>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7f9 fe3b 	bl	80026c8 <HAL_HCD_Stop>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 f941 	bl	8008ce0 <USBH_Get_USB_Status>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a74:	2301      	movs	r3, #1
 8008a76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7f9 fe83 	bl	800278a <HAL_HCD_GetCurrentSpeed>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d00c      	beq.n	8008aa4 <USBH_LL_GetSpeed+0x38>
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d80d      	bhi.n	8008aaa <USBH_LL_GetSpeed+0x3e>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <USBH_LL_GetSpeed+0x2c>
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d003      	beq.n	8008a9e <USBH_LL_GetSpeed+0x32>
 8008a96:	e008      	b.n	8008aaa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a9c:	e008      	b.n	8008ab0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa2:	e005      	b.n	8008ab0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa8:	e002      	b.n	8008ab0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	73fb      	strb	r3, [r7, #15]
    break;
 8008aae:	bf00      	nop
  }
  return  speed;
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7f9 fe16 	bl	8002702 <HAL_HCD_ResetPort>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 f8ff 	bl	8008ce0 <USBH_Get_USB_Status>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b02:	78fa      	ldrb	r2, [r7, #3]
 8008b04:	4611      	mov	r1, r2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7f9 fe1d 	bl	8002746 <HAL_HCD_HC_GetXferCount>
 8008b0c:	4603      	mov	r3, r0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b16:	b590      	push	{r4, r7, lr}
 8008b18:	b089      	sub	sp, #36	; 0x24
 8008b1a:	af04      	add	r7, sp, #16
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	4608      	mov	r0, r1
 8008b20:	4611      	mov	r1, r2
 8008b22:	461a      	mov	r2, r3
 8008b24:	4603      	mov	r3, r0
 8008b26:	70fb      	strb	r3, [r7, #3]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70bb      	strb	r3, [r7, #2]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b3e:	787c      	ldrb	r4, [r7, #1]
 8008b40:	78ba      	ldrb	r2, [r7, #2]
 8008b42:	78f9      	ldrb	r1, [r7, #3]
 8008b44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b46:	9302      	str	r3, [sp, #8]
 8008b48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	4623      	mov	r3, r4
 8008b56:	f7f9 fa80 	bl	800205a <HAL_HCD_HC_Init>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f8bd 	bl	8008ce0 <USBH_Get_USB_Status>
 8008b66:	4603      	mov	r3, r0
 8008b68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd90      	pop	{r4, r7, pc}

08008b74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b8e:	78fa      	ldrb	r2, [r7, #3]
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7f9 faf0 	bl	8002178 <HAL_HCD_HC_Halt>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 f89e 	bl	8008ce0 <USBH_Get_USB_Status>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008bb2:	b590      	push	{r4, r7, lr}
 8008bb4:	b089      	sub	sp, #36	; 0x24
 8008bb6:	af04      	add	r7, sp, #16
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	4608      	mov	r0, r1
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	70fb      	strb	r3, [r7, #3]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70bb      	strb	r3, [r7, #2]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bda:	787c      	ldrb	r4, [r7, #1]
 8008bdc:	78ba      	ldrb	r2, [r7, #2]
 8008bde:	78f9      	ldrb	r1, [r7, #3]
 8008be0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008be4:	9303      	str	r3, [sp, #12]
 8008be6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008be8:	9302      	str	r3, [sp, #8]
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	f7f9 fae3 	bl	80021c0 <HAL_HCD_HC_SubmitRequest>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 f86d 	bl	8008ce0 <USBH_Get_USB_Status>
 8008c06:	4603      	mov	r3, r0
 8008c08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd90      	pop	{r4, r7, pc}

08008c14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	4611      	mov	r1, r2
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7f9 fd77 	bl	800271e <HAL_HCD_HC_GetURBState>
 8008c30:	4603      	mov	r3, r0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	460b      	mov	r3, r1
 8008c44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d103      	bne.n	8008c58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 f870 	bl	8008d38 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c58:	20c8      	movs	r0, #200	; 0xc8
 8008c5a:	f7f8 feb1 	bl	80019c0 <HAL_Delay>
  return USBH_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
 8008c74:	4613      	mov	r3, r2
 8008c76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	212c      	movs	r1, #44	; 0x2c
 8008c86:	fb01 f303 	mul.w	r3, r1, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	333b      	adds	r3, #59	; 0x3b
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d009      	beq.n	8008ca8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	212c      	movs	r1, #44	; 0x2c
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	4413      	add	r3, r2
 8008ca0:	3354      	adds	r3, #84	; 0x54
 8008ca2:	78ba      	ldrb	r2, [r7, #2]
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	e008      	b.n	8008cba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ca8:	78fb      	ldrb	r3, [r7, #3]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	212c      	movs	r1, #44	; 0x2c
 8008cae:	fb01 f303 	mul.w	r3, r1, r3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	3355      	adds	r3, #85	; 0x55
 8008cb6:	78ba      	ldrb	r2, [r7, #2]
 8008cb8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7f8 fe75 	bl	80019c0 <HAL_Delay>
}
 8008cd6:	bf00      	nop
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	2b03      	cmp	r3, #3
 8008cf2:	d817      	bhi.n	8008d24 <USBH_Get_USB_Status+0x44>
 8008cf4:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <USBH_Get_USB_Status+0x1c>)
 8008cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfa:	bf00      	nop
 8008cfc:	08008d0d 	.word	0x08008d0d
 8008d00:	08008d13 	.word	0x08008d13
 8008d04:	08008d19 	.word	0x08008d19
 8008d08:	08008d1f 	.word	0x08008d1f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d10:	e00b      	b.n	8008d2a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d12:	2302      	movs	r3, #2
 8008d14:	73fb      	strb	r3, [r7, #15]
    break;
 8008d16:	e008      	b.n	8008d2a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d1c:	e005      	b.n	8008d2a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d1e:	2302      	movs	r3, #2
 8008d20:	73fb      	strb	r3, [r7, #15]
    break;
 8008d22:	e002      	b.n	8008d2a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d24:	2302      	movs	r3, #2
 8008d26:	73fb      	strb	r3, [r7, #15]
    break;
 8008d28:	bf00      	nop
  }
  return usb_status;
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d102      	bne.n	8008d52 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
 8008d50:	e001      	b.n	8008d56 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d52:	2301      	movs	r3, #1
 8008d54:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	4803      	ldr	r0, [pc, #12]	; (8008d6c <MX_DriverVbusFS+0x34>)
 8008d5e:	f7f9 f901 	bl	8001f64 <HAL_GPIO_WritePin>
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	40020800 	.word	0x40020800

08008d70 <__errno>:
 8008d70:	4b01      	ldr	r3, [pc, #4]	; (8008d78 <__errno+0x8>)
 8008d72:	6818      	ldr	r0, [r3, #0]
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	2000002c 	.word	0x2000002c

08008d7c <__libc_init_array>:
 8008d7c:	b570      	push	{r4, r5, r6, lr}
 8008d7e:	4d0d      	ldr	r5, [pc, #52]	; (8008db4 <__libc_init_array+0x38>)
 8008d80:	4c0d      	ldr	r4, [pc, #52]	; (8008db8 <__libc_init_array+0x3c>)
 8008d82:	1b64      	subs	r4, r4, r5
 8008d84:	10a4      	asrs	r4, r4, #2
 8008d86:	2600      	movs	r6, #0
 8008d88:	42a6      	cmp	r6, r4
 8008d8a:	d109      	bne.n	8008da0 <__libc_init_array+0x24>
 8008d8c:	4d0b      	ldr	r5, [pc, #44]	; (8008dbc <__libc_init_array+0x40>)
 8008d8e:	4c0c      	ldr	r4, [pc, #48]	; (8008dc0 <__libc_init_array+0x44>)
 8008d90:	f002 fd56 	bl	800b840 <_init>
 8008d94:	1b64      	subs	r4, r4, r5
 8008d96:	10a4      	asrs	r4, r4, #2
 8008d98:	2600      	movs	r6, #0
 8008d9a:	42a6      	cmp	r6, r4
 8008d9c:	d105      	bne.n	8008daa <__libc_init_array+0x2e>
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}
 8008da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da4:	4798      	blx	r3
 8008da6:	3601      	adds	r6, #1
 8008da8:	e7ee      	b.n	8008d88 <__libc_init_array+0xc>
 8008daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dae:	4798      	blx	r3
 8008db0:	3601      	adds	r6, #1
 8008db2:	e7f2      	b.n	8008d9a <__libc_init_array+0x1e>
 8008db4:	0800bc84 	.word	0x0800bc84
 8008db8:	0800bc84 	.word	0x0800bc84
 8008dbc:	0800bc84 	.word	0x0800bc84
 8008dc0:	0800bc88 	.word	0x0800bc88

08008dc4 <malloc>:
 8008dc4:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <malloc+0xc>)
 8008dc6:	4601      	mov	r1, r0
 8008dc8:	6818      	ldr	r0, [r3, #0]
 8008dca:	f000 b87f 	b.w	8008ecc <_malloc_r>
 8008dce:	bf00      	nop
 8008dd0:	2000002c 	.word	0x2000002c

08008dd4 <free>:
 8008dd4:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <free+0xc>)
 8008dd6:	4601      	mov	r1, r0
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	f000 b80b 	b.w	8008df4 <_free_r>
 8008dde:	bf00      	nop
 8008de0:	2000002c 	.word	0x2000002c

08008de4 <memset>:
 8008de4:	4402      	add	r2, r0
 8008de6:	4603      	mov	r3, r0
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d100      	bne.n	8008dee <memset+0xa>
 8008dec:	4770      	bx	lr
 8008dee:	f803 1b01 	strb.w	r1, [r3], #1
 8008df2:	e7f9      	b.n	8008de8 <memset+0x4>

08008df4 <_free_r>:
 8008df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008df6:	2900      	cmp	r1, #0
 8008df8:	d044      	beq.n	8008e84 <_free_r+0x90>
 8008dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dfe:	9001      	str	r0, [sp, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f1a1 0404 	sub.w	r4, r1, #4
 8008e06:	bfb8      	it	lt
 8008e08:	18e4      	addlt	r4, r4, r3
 8008e0a:	f001 fceb 	bl	800a7e4 <__malloc_lock>
 8008e0e:	4a1e      	ldr	r2, [pc, #120]	; (8008e88 <_free_r+0x94>)
 8008e10:	9801      	ldr	r0, [sp, #4]
 8008e12:	6813      	ldr	r3, [r2, #0]
 8008e14:	b933      	cbnz	r3, 8008e24 <_free_r+0x30>
 8008e16:	6063      	str	r3, [r4, #4]
 8008e18:	6014      	str	r4, [r2, #0]
 8008e1a:	b003      	add	sp, #12
 8008e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e20:	f001 bce6 	b.w	800a7f0 <__malloc_unlock>
 8008e24:	42a3      	cmp	r3, r4
 8008e26:	d908      	bls.n	8008e3a <_free_r+0x46>
 8008e28:	6825      	ldr	r5, [r4, #0]
 8008e2a:	1961      	adds	r1, r4, r5
 8008e2c:	428b      	cmp	r3, r1
 8008e2e:	bf01      	itttt	eq
 8008e30:	6819      	ldreq	r1, [r3, #0]
 8008e32:	685b      	ldreq	r3, [r3, #4]
 8008e34:	1949      	addeq	r1, r1, r5
 8008e36:	6021      	streq	r1, [r4, #0]
 8008e38:	e7ed      	b.n	8008e16 <_free_r+0x22>
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	b10b      	cbz	r3, 8008e44 <_free_r+0x50>
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	d9fa      	bls.n	8008e3a <_free_r+0x46>
 8008e44:	6811      	ldr	r1, [r2, #0]
 8008e46:	1855      	adds	r5, r2, r1
 8008e48:	42a5      	cmp	r5, r4
 8008e4a:	d10b      	bne.n	8008e64 <_free_r+0x70>
 8008e4c:	6824      	ldr	r4, [r4, #0]
 8008e4e:	4421      	add	r1, r4
 8008e50:	1854      	adds	r4, r2, r1
 8008e52:	42a3      	cmp	r3, r4
 8008e54:	6011      	str	r1, [r2, #0]
 8008e56:	d1e0      	bne.n	8008e1a <_free_r+0x26>
 8008e58:	681c      	ldr	r4, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	6053      	str	r3, [r2, #4]
 8008e5e:	4421      	add	r1, r4
 8008e60:	6011      	str	r1, [r2, #0]
 8008e62:	e7da      	b.n	8008e1a <_free_r+0x26>
 8008e64:	d902      	bls.n	8008e6c <_free_r+0x78>
 8008e66:	230c      	movs	r3, #12
 8008e68:	6003      	str	r3, [r0, #0]
 8008e6a:	e7d6      	b.n	8008e1a <_free_r+0x26>
 8008e6c:	6825      	ldr	r5, [r4, #0]
 8008e6e:	1961      	adds	r1, r4, r5
 8008e70:	428b      	cmp	r3, r1
 8008e72:	bf04      	itt	eq
 8008e74:	6819      	ldreq	r1, [r3, #0]
 8008e76:	685b      	ldreq	r3, [r3, #4]
 8008e78:	6063      	str	r3, [r4, #4]
 8008e7a:	bf04      	itt	eq
 8008e7c:	1949      	addeq	r1, r1, r5
 8008e7e:	6021      	streq	r1, [r4, #0]
 8008e80:	6054      	str	r4, [r2, #4]
 8008e82:	e7ca      	b.n	8008e1a <_free_r+0x26>
 8008e84:	b003      	add	sp, #12
 8008e86:	bd30      	pop	{r4, r5, pc}
 8008e88:	20000a38 	.word	0x20000a38

08008e8c <sbrk_aligned>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	4e0e      	ldr	r6, [pc, #56]	; (8008ec8 <sbrk_aligned+0x3c>)
 8008e90:	460c      	mov	r4, r1
 8008e92:	6831      	ldr	r1, [r6, #0]
 8008e94:	4605      	mov	r5, r0
 8008e96:	b911      	cbnz	r1, 8008e9e <sbrk_aligned+0x12>
 8008e98:	f000 fd0e 	bl	80098b8 <_sbrk_r>
 8008e9c:	6030      	str	r0, [r6, #0]
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f000 fd09 	bl	80098b8 <_sbrk_r>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	d00a      	beq.n	8008ec0 <sbrk_aligned+0x34>
 8008eaa:	1cc4      	adds	r4, r0, #3
 8008eac:	f024 0403 	bic.w	r4, r4, #3
 8008eb0:	42a0      	cmp	r0, r4
 8008eb2:	d007      	beq.n	8008ec4 <sbrk_aligned+0x38>
 8008eb4:	1a21      	subs	r1, r4, r0
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 fcfe 	bl	80098b8 <_sbrk_r>
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d101      	bne.n	8008ec4 <sbrk_aligned+0x38>
 8008ec0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	bd70      	pop	{r4, r5, r6, pc}
 8008ec8:	20000a3c 	.word	0x20000a3c

08008ecc <_malloc_r>:
 8008ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed0:	1ccd      	adds	r5, r1, #3
 8008ed2:	f025 0503 	bic.w	r5, r5, #3
 8008ed6:	3508      	adds	r5, #8
 8008ed8:	2d0c      	cmp	r5, #12
 8008eda:	bf38      	it	cc
 8008edc:	250c      	movcc	r5, #12
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	4607      	mov	r7, r0
 8008ee2:	db01      	blt.n	8008ee8 <_malloc_r+0x1c>
 8008ee4:	42a9      	cmp	r1, r5
 8008ee6:	d905      	bls.n	8008ef4 <_malloc_r+0x28>
 8008ee8:	230c      	movs	r3, #12
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	2600      	movs	r6, #0
 8008eee:	4630      	mov	r0, r6
 8008ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef4:	4e2e      	ldr	r6, [pc, #184]	; (8008fb0 <_malloc_r+0xe4>)
 8008ef6:	f001 fc75 	bl	800a7e4 <__malloc_lock>
 8008efa:	6833      	ldr	r3, [r6, #0]
 8008efc:	461c      	mov	r4, r3
 8008efe:	bb34      	cbnz	r4, 8008f4e <_malloc_r+0x82>
 8008f00:	4629      	mov	r1, r5
 8008f02:	4638      	mov	r0, r7
 8008f04:	f7ff ffc2 	bl	8008e8c <sbrk_aligned>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	d14d      	bne.n	8008faa <_malloc_r+0xde>
 8008f0e:	6834      	ldr	r4, [r6, #0]
 8008f10:	4626      	mov	r6, r4
 8008f12:	2e00      	cmp	r6, #0
 8008f14:	d140      	bne.n	8008f98 <_malloc_r+0xcc>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	4631      	mov	r1, r6
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	eb04 0803 	add.w	r8, r4, r3
 8008f20:	f000 fcca 	bl	80098b8 <_sbrk_r>
 8008f24:	4580      	cmp	r8, r0
 8008f26:	d13a      	bne.n	8008f9e <_malloc_r+0xd2>
 8008f28:	6821      	ldr	r1, [r4, #0]
 8008f2a:	3503      	adds	r5, #3
 8008f2c:	1a6d      	subs	r5, r5, r1
 8008f2e:	f025 0503 	bic.w	r5, r5, #3
 8008f32:	3508      	adds	r5, #8
 8008f34:	2d0c      	cmp	r5, #12
 8008f36:	bf38      	it	cc
 8008f38:	250c      	movcc	r5, #12
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	f7ff ffa5 	bl	8008e8c <sbrk_aligned>
 8008f42:	3001      	adds	r0, #1
 8008f44:	d02b      	beq.n	8008f9e <_malloc_r+0xd2>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	442b      	add	r3, r5
 8008f4a:	6023      	str	r3, [r4, #0]
 8008f4c:	e00e      	b.n	8008f6c <_malloc_r+0xa0>
 8008f4e:	6822      	ldr	r2, [r4, #0]
 8008f50:	1b52      	subs	r2, r2, r5
 8008f52:	d41e      	bmi.n	8008f92 <_malloc_r+0xc6>
 8008f54:	2a0b      	cmp	r2, #11
 8008f56:	d916      	bls.n	8008f86 <_malloc_r+0xba>
 8008f58:	1961      	adds	r1, r4, r5
 8008f5a:	42a3      	cmp	r3, r4
 8008f5c:	6025      	str	r5, [r4, #0]
 8008f5e:	bf18      	it	ne
 8008f60:	6059      	strne	r1, [r3, #4]
 8008f62:	6863      	ldr	r3, [r4, #4]
 8008f64:	bf08      	it	eq
 8008f66:	6031      	streq	r1, [r6, #0]
 8008f68:	5162      	str	r2, [r4, r5]
 8008f6a:	604b      	str	r3, [r1, #4]
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f104 060b 	add.w	r6, r4, #11
 8008f72:	f001 fc3d 	bl	800a7f0 <__malloc_unlock>
 8008f76:	f026 0607 	bic.w	r6, r6, #7
 8008f7a:	1d23      	adds	r3, r4, #4
 8008f7c:	1af2      	subs	r2, r6, r3
 8008f7e:	d0b6      	beq.n	8008eee <_malloc_r+0x22>
 8008f80:	1b9b      	subs	r3, r3, r6
 8008f82:	50a3      	str	r3, [r4, r2]
 8008f84:	e7b3      	b.n	8008eee <_malloc_r+0x22>
 8008f86:	6862      	ldr	r2, [r4, #4]
 8008f88:	42a3      	cmp	r3, r4
 8008f8a:	bf0c      	ite	eq
 8008f8c:	6032      	streq	r2, [r6, #0]
 8008f8e:	605a      	strne	r2, [r3, #4]
 8008f90:	e7ec      	b.n	8008f6c <_malloc_r+0xa0>
 8008f92:	4623      	mov	r3, r4
 8008f94:	6864      	ldr	r4, [r4, #4]
 8008f96:	e7b2      	b.n	8008efe <_malloc_r+0x32>
 8008f98:	4634      	mov	r4, r6
 8008f9a:	6876      	ldr	r6, [r6, #4]
 8008f9c:	e7b9      	b.n	8008f12 <_malloc_r+0x46>
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	603b      	str	r3, [r7, #0]
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	f001 fc24 	bl	800a7f0 <__malloc_unlock>
 8008fa8:	e7a1      	b.n	8008eee <_malloc_r+0x22>
 8008faa:	6025      	str	r5, [r4, #0]
 8008fac:	e7de      	b.n	8008f6c <_malloc_r+0xa0>
 8008fae:	bf00      	nop
 8008fb0:	20000a38 	.word	0x20000a38

08008fb4 <__cvt>:
 8008fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb8:	ec55 4b10 	vmov	r4, r5, d0
 8008fbc:	2d00      	cmp	r5, #0
 8008fbe:	460e      	mov	r6, r1
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	462b      	mov	r3, r5
 8008fc4:	bfbb      	ittet	lt
 8008fc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fca:	461d      	movlt	r5, r3
 8008fcc:	2300      	movge	r3, #0
 8008fce:	232d      	movlt	r3, #45	; 0x2d
 8008fd0:	700b      	strb	r3, [r1, #0]
 8008fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fd8:	4691      	mov	r9, r2
 8008fda:	f023 0820 	bic.w	r8, r3, #32
 8008fde:	bfbc      	itt	lt
 8008fe0:	4622      	movlt	r2, r4
 8008fe2:	4614      	movlt	r4, r2
 8008fe4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fe8:	d005      	beq.n	8008ff6 <__cvt+0x42>
 8008fea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008fee:	d100      	bne.n	8008ff2 <__cvt+0x3e>
 8008ff0:	3601      	adds	r6, #1
 8008ff2:	2102      	movs	r1, #2
 8008ff4:	e000      	b.n	8008ff8 <__cvt+0x44>
 8008ff6:	2103      	movs	r1, #3
 8008ff8:	ab03      	add	r3, sp, #12
 8008ffa:	9301      	str	r3, [sp, #4]
 8008ffc:	ab02      	add	r3, sp, #8
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	ec45 4b10 	vmov	d0, r4, r5
 8009004:	4653      	mov	r3, sl
 8009006:	4632      	mov	r2, r6
 8009008:	f000 fcf2 	bl	80099f0 <_dtoa_r>
 800900c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009010:	4607      	mov	r7, r0
 8009012:	d102      	bne.n	800901a <__cvt+0x66>
 8009014:	f019 0f01 	tst.w	r9, #1
 8009018:	d022      	beq.n	8009060 <__cvt+0xac>
 800901a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800901e:	eb07 0906 	add.w	r9, r7, r6
 8009022:	d110      	bne.n	8009046 <__cvt+0x92>
 8009024:	783b      	ldrb	r3, [r7, #0]
 8009026:	2b30      	cmp	r3, #48	; 0x30
 8009028:	d10a      	bne.n	8009040 <__cvt+0x8c>
 800902a:	2200      	movs	r2, #0
 800902c:	2300      	movs	r3, #0
 800902e:	4620      	mov	r0, r4
 8009030:	4629      	mov	r1, r5
 8009032:	f7f7 fd49 	bl	8000ac8 <__aeabi_dcmpeq>
 8009036:	b918      	cbnz	r0, 8009040 <__cvt+0x8c>
 8009038:	f1c6 0601 	rsb	r6, r6, #1
 800903c:	f8ca 6000 	str.w	r6, [sl]
 8009040:	f8da 3000 	ldr.w	r3, [sl]
 8009044:	4499      	add	r9, r3
 8009046:	2200      	movs	r2, #0
 8009048:	2300      	movs	r3, #0
 800904a:	4620      	mov	r0, r4
 800904c:	4629      	mov	r1, r5
 800904e:	f7f7 fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009052:	b108      	cbz	r0, 8009058 <__cvt+0xa4>
 8009054:	f8cd 900c 	str.w	r9, [sp, #12]
 8009058:	2230      	movs	r2, #48	; 0x30
 800905a:	9b03      	ldr	r3, [sp, #12]
 800905c:	454b      	cmp	r3, r9
 800905e:	d307      	bcc.n	8009070 <__cvt+0xbc>
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009064:	1bdb      	subs	r3, r3, r7
 8009066:	4638      	mov	r0, r7
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	b004      	add	sp, #16
 800906c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009070:	1c59      	adds	r1, r3, #1
 8009072:	9103      	str	r1, [sp, #12]
 8009074:	701a      	strb	r2, [r3, #0]
 8009076:	e7f0      	b.n	800905a <__cvt+0xa6>

08009078 <__exponent>:
 8009078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800907a:	4603      	mov	r3, r0
 800907c:	2900      	cmp	r1, #0
 800907e:	bfb8      	it	lt
 8009080:	4249      	neglt	r1, r1
 8009082:	f803 2b02 	strb.w	r2, [r3], #2
 8009086:	bfb4      	ite	lt
 8009088:	222d      	movlt	r2, #45	; 0x2d
 800908a:	222b      	movge	r2, #43	; 0x2b
 800908c:	2909      	cmp	r1, #9
 800908e:	7042      	strb	r2, [r0, #1]
 8009090:	dd2a      	ble.n	80090e8 <__exponent+0x70>
 8009092:	f10d 0407 	add.w	r4, sp, #7
 8009096:	46a4      	mov	ip, r4
 8009098:	270a      	movs	r7, #10
 800909a:	46a6      	mov	lr, r4
 800909c:	460a      	mov	r2, r1
 800909e:	fb91 f6f7 	sdiv	r6, r1, r7
 80090a2:	fb07 1516 	mls	r5, r7, r6, r1
 80090a6:	3530      	adds	r5, #48	; 0x30
 80090a8:	2a63      	cmp	r2, #99	; 0x63
 80090aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80090ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80090b2:	4631      	mov	r1, r6
 80090b4:	dcf1      	bgt.n	800909a <__exponent+0x22>
 80090b6:	3130      	adds	r1, #48	; 0x30
 80090b8:	f1ae 0502 	sub.w	r5, lr, #2
 80090bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80090c0:	1c44      	adds	r4, r0, #1
 80090c2:	4629      	mov	r1, r5
 80090c4:	4561      	cmp	r1, ip
 80090c6:	d30a      	bcc.n	80090de <__exponent+0x66>
 80090c8:	f10d 0209 	add.w	r2, sp, #9
 80090cc:	eba2 020e 	sub.w	r2, r2, lr
 80090d0:	4565      	cmp	r5, ip
 80090d2:	bf88      	it	hi
 80090d4:	2200      	movhi	r2, #0
 80090d6:	4413      	add	r3, r2
 80090d8:	1a18      	subs	r0, r3, r0
 80090da:	b003      	add	sp, #12
 80090dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80090e6:	e7ed      	b.n	80090c4 <__exponent+0x4c>
 80090e8:	2330      	movs	r3, #48	; 0x30
 80090ea:	3130      	adds	r1, #48	; 0x30
 80090ec:	7083      	strb	r3, [r0, #2]
 80090ee:	70c1      	strb	r1, [r0, #3]
 80090f0:	1d03      	adds	r3, r0, #4
 80090f2:	e7f1      	b.n	80090d8 <__exponent+0x60>

080090f4 <_printf_float>:
 80090f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	ed2d 8b02 	vpush	{d8}
 80090fc:	b08d      	sub	sp, #52	; 0x34
 80090fe:	460c      	mov	r4, r1
 8009100:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009104:	4616      	mov	r6, r2
 8009106:	461f      	mov	r7, r3
 8009108:	4605      	mov	r5, r0
 800910a:	f001 fb55 	bl	800a7b8 <_localeconv_r>
 800910e:	f8d0 a000 	ldr.w	sl, [r0]
 8009112:	4650      	mov	r0, sl
 8009114:	f7f7 f85c 	bl	80001d0 <strlen>
 8009118:	2300      	movs	r3, #0
 800911a:	930a      	str	r3, [sp, #40]	; 0x28
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	9305      	str	r3, [sp, #20]
 8009120:	f8d8 3000 	ldr.w	r3, [r8]
 8009124:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009128:	3307      	adds	r3, #7
 800912a:	f023 0307 	bic.w	r3, r3, #7
 800912e:	f103 0208 	add.w	r2, r3, #8
 8009132:	f8c8 2000 	str.w	r2, [r8]
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800913e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009142:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009146:	9307      	str	r3, [sp, #28]
 8009148:	f8cd 8018 	str.w	r8, [sp, #24]
 800914c:	ee08 0a10 	vmov	s16, r0
 8009150:	4b9f      	ldr	r3, [pc, #636]	; (80093d0 <_printf_float+0x2dc>)
 8009152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800915a:	f7f7 fce7 	bl	8000b2c <__aeabi_dcmpun>
 800915e:	bb88      	cbnz	r0, 80091c4 <_printf_float+0xd0>
 8009160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009164:	4b9a      	ldr	r3, [pc, #616]	; (80093d0 <_printf_float+0x2dc>)
 8009166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800916a:	f7f7 fcc1 	bl	8000af0 <__aeabi_dcmple>
 800916e:	bb48      	cbnz	r0, 80091c4 <_printf_float+0xd0>
 8009170:	2200      	movs	r2, #0
 8009172:	2300      	movs	r3, #0
 8009174:	4640      	mov	r0, r8
 8009176:	4649      	mov	r1, r9
 8009178:	f7f7 fcb0 	bl	8000adc <__aeabi_dcmplt>
 800917c:	b110      	cbz	r0, 8009184 <_printf_float+0x90>
 800917e:	232d      	movs	r3, #45	; 0x2d
 8009180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009184:	4b93      	ldr	r3, [pc, #588]	; (80093d4 <_printf_float+0x2e0>)
 8009186:	4894      	ldr	r0, [pc, #592]	; (80093d8 <_printf_float+0x2e4>)
 8009188:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800918c:	bf94      	ite	ls
 800918e:	4698      	movls	r8, r3
 8009190:	4680      	movhi	r8, r0
 8009192:	2303      	movs	r3, #3
 8009194:	6123      	str	r3, [r4, #16]
 8009196:	9b05      	ldr	r3, [sp, #20]
 8009198:	f023 0204 	bic.w	r2, r3, #4
 800919c:	6022      	str	r2, [r4, #0]
 800919e:	f04f 0900 	mov.w	r9, #0
 80091a2:	9700      	str	r7, [sp, #0]
 80091a4:	4633      	mov	r3, r6
 80091a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80091a8:	4621      	mov	r1, r4
 80091aa:	4628      	mov	r0, r5
 80091ac:	f000 f9d8 	bl	8009560 <_printf_common>
 80091b0:	3001      	adds	r0, #1
 80091b2:	f040 8090 	bne.w	80092d6 <_printf_float+0x1e2>
 80091b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091ba:	b00d      	add	sp, #52	; 0x34
 80091bc:	ecbd 8b02 	vpop	{d8}
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	4642      	mov	r2, r8
 80091c6:	464b      	mov	r3, r9
 80091c8:	4640      	mov	r0, r8
 80091ca:	4649      	mov	r1, r9
 80091cc:	f7f7 fcae 	bl	8000b2c <__aeabi_dcmpun>
 80091d0:	b140      	cbz	r0, 80091e4 <_printf_float+0xf0>
 80091d2:	464b      	mov	r3, r9
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bfbc      	itt	lt
 80091d8:	232d      	movlt	r3, #45	; 0x2d
 80091da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091de:	487f      	ldr	r0, [pc, #508]	; (80093dc <_printf_float+0x2e8>)
 80091e0:	4b7f      	ldr	r3, [pc, #508]	; (80093e0 <_printf_float+0x2ec>)
 80091e2:	e7d1      	b.n	8009188 <_printf_float+0x94>
 80091e4:	6863      	ldr	r3, [r4, #4]
 80091e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091ea:	9206      	str	r2, [sp, #24]
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	d13f      	bne.n	8009270 <_printf_float+0x17c>
 80091f0:	2306      	movs	r3, #6
 80091f2:	6063      	str	r3, [r4, #4]
 80091f4:	9b05      	ldr	r3, [sp, #20]
 80091f6:	6861      	ldr	r1, [r4, #4]
 80091f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091fc:	2300      	movs	r3, #0
 80091fe:	9303      	str	r3, [sp, #12]
 8009200:	ab0a      	add	r3, sp, #40	; 0x28
 8009202:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009206:	ab09      	add	r3, sp, #36	; 0x24
 8009208:	ec49 8b10 	vmov	d0, r8, r9
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	6022      	str	r2, [r4, #0]
 8009210:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009214:	4628      	mov	r0, r5
 8009216:	f7ff fecd 	bl	8008fb4 <__cvt>
 800921a:	9b06      	ldr	r3, [sp, #24]
 800921c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800921e:	2b47      	cmp	r3, #71	; 0x47
 8009220:	4680      	mov	r8, r0
 8009222:	d108      	bne.n	8009236 <_printf_float+0x142>
 8009224:	1cc8      	adds	r0, r1, #3
 8009226:	db02      	blt.n	800922e <_printf_float+0x13a>
 8009228:	6863      	ldr	r3, [r4, #4]
 800922a:	4299      	cmp	r1, r3
 800922c:	dd41      	ble.n	80092b2 <_printf_float+0x1be>
 800922e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009232:	fa5f fb8b 	uxtb.w	fp, fp
 8009236:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800923a:	d820      	bhi.n	800927e <_printf_float+0x18a>
 800923c:	3901      	subs	r1, #1
 800923e:	465a      	mov	r2, fp
 8009240:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009244:	9109      	str	r1, [sp, #36]	; 0x24
 8009246:	f7ff ff17 	bl	8009078 <__exponent>
 800924a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800924c:	1813      	adds	r3, r2, r0
 800924e:	2a01      	cmp	r2, #1
 8009250:	4681      	mov	r9, r0
 8009252:	6123      	str	r3, [r4, #16]
 8009254:	dc02      	bgt.n	800925c <_printf_float+0x168>
 8009256:	6822      	ldr	r2, [r4, #0]
 8009258:	07d2      	lsls	r2, r2, #31
 800925a:	d501      	bpl.n	8009260 <_printf_float+0x16c>
 800925c:	3301      	adds	r3, #1
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009264:	2b00      	cmp	r3, #0
 8009266:	d09c      	beq.n	80091a2 <_printf_float+0xae>
 8009268:	232d      	movs	r3, #45	; 0x2d
 800926a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800926e:	e798      	b.n	80091a2 <_printf_float+0xae>
 8009270:	9a06      	ldr	r2, [sp, #24]
 8009272:	2a47      	cmp	r2, #71	; 0x47
 8009274:	d1be      	bne.n	80091f4 <_printf_float+0x100>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1bc      	bne.n	80091f4 <_printf_float+0x100>
 800927a:	2301      	movs	r3, #1
 800927c:	e7b9      	b.n	80091f2 <_printf_float+0xfe>
 800927e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009282:	d118      	bne.n	80092b6 <_printf_float+0x1c2>
 8009284:	2900      	cmp	r1, #0
 8009286:	6863      	ldr	r3, [r4, #4]
 8009288:	dd0b      	ble.n	80092a2 <_printf_float+0x1ae>
 800928a:	6121      	str	r1, [r4, #16]
 800928c:	b913      	cbnz	r3, 8009294 <_printf_float+0x1a0>
 800928e:	6822      	ldr	r2, [r4, #0]
 8009290:	07d0      	lsls	r0, r2, #31
 8009292:	d502      	bpl.n	800929a <_printf_float+0x1a6>
 8009294:	3301      	adds	r3, #1
 8009296:	440b      	add	r3, r1
 8009298:	6123      	str	r3, [r4, #16]
 800929a:	65a1      	str	r1, [r4, #88]	; 0x58
 800929c:	f04f 0900 	mov.w	r9, #0
 80092a0:	e7de      	b.n	8009260 <_printf_float+0x16c>
 80092a2:	b913      	cbnz	r3, 80092aa <_printf_float+0x1b6>
 80092a4:	6822      	ldr	r2, [r4, #0]
 80092a6:	07d2      	lsls	r2, r2, #31
 80092a8:	d501      	bpl.n	80092ae <_printf_float+0x1ba>
 80092aa:	3302      	adds	r3, #2
 80092ac:	e7f4      	b.n	8009298 <_printf_float+0x1a4>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e7f2      	b.n	8009298 <_printf_float+0x1a4>
 80092b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b8:	4299      	cmp	r1, r3
 80092ba:	db05      	blt.n	80092c8 <_printf_float+0x1d4>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	6121      	str	r1, [r4, #16]
 80092c0:	07d8      	lsls	r0, r3, #31
 80092c2:	d5ea      	bpl.n	800929a <_printf_float+0x1a6>
 80092c4:	1c4b      	adds	r3, r1, #1
 80092c6:	e7e7      	b.n	8009298 <_printf_float+0x1a4>
 80092c8:	2900      	cmp	r1, #0
 80092ca:	bfd4      	ite	le
 80092cc:	f1c1 0202 	rsble	r2, r1, #2
 80092d0:	2201      	movgt	r2, #1
 80092d2:	4413      	add	r3, r2
 80092d4:	e7e0      	b.n	8009298 <_printf_float+0x1a4>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	055a      	lsls	r2, r3, #21
 80092da:	d407      	bmi.n	80092ec <_printf_float+0x1f8>
 80092dc:	6923      	ldr	r3, [r4, #16]
 80092de:	4642      	mov	r2, r8
 80092e0:	4631      	mov	r1, r6
 80092e2:	4628      	mov	r0, r5
 80092e4:	47b8      	blx	r7
 80092e6:	3001      	adds	r0, #1
 80092e8:	d12c      	bne.n	8009344 <_printf_float+0x250>
 80092ea:	e764      	b.n	80091b6 <_printf_float+0xc2>
 80092ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092f0:	f240 80e0 	bls.w	80094b4 <_printf_float+0x3c0>
 80092f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092f8:	2200      	movs	r2, #0
 80092fa:	2300      	movs	r3, #0
 80092fc:	f7f7 fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009300:	2800      	cmp	r0, #0
 8009302:	d034      	beq.n	800936e <_printf_float+0x27a>
 8009304:	4a37      	ldr	r2, [pc, #220]	; (80093e4 <_printf_float+0x2f0>)
 8009306:	2301      	movs	r3, #1
 8009308:	4631      	mov	r1, r6
 800930a:	4628      	mov	r0, r5
 800930c:	47b8      	blx	r7
 800930e:	3001      	adds	r0, #1
 8009310:	f43f af51 	beq.w	80091b6 <_printf_float+0xc2>
 8009314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009318:	429a      	cmp	r2, r3
 800931a:	db02      	blt.n	8009322 <_printf_float+0x22e>
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	07d8      	lsls	r0, r3, #31
 8009320:	d510      	bpl.n	8009344 <_printf_float+0x250>
 8009322:	ee18 3a10 	vmov	r3, s16
 8009326:	4652      	mov	r2, sl
 8009328:	4631      	mov	r1, r6
 800932a:	4628      	mov	r0, r5
 800932c:	47b8      	blx	r7
 800932e:	3001      	adds	r0, #1
 8009330:	f43f af41 	beq.w	80091b6 <_printf_float+0xc2>
 8009334:	f04f 0800 	mov.w	r8, #0
 8009338:	f104 091a 	add.w	r9, r4, #26
 800933c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800933e:	3b01      	subs	r3, #1
 8009340:	4543      	cmp	r3, r8
 8009342:	dc09      	bgt.n	8009358 <_printf_float+0x264>
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	079b      	lsls	r3, r3, #30
 8009348:	f100 8105 	bmi.w	8009556 <_printf_float+0x462>
 800934c:	68e0      	ldr	r0, [r4, #12]
 800934e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009350:	4298      	cmp	r0, r3
 8009352:	bfb8      	it	lt
 8009354:	4618      	movlt	r0, r3
 8009356:	e730      	b.n	80091ba <_printf_float+0xc6>
 8009358:	2301      	movs	r3, #1
 800935a:	464a      	mov	r2, r9
 800935c:	4631      	mov	r1, r6
 800935e:	4628      	mov	r0, r5
 8009360:	47b8      	blx	r7
 8009362:	3001      	adds	r0, #1
 8009364:	f43f af27 	beq.w	80091b6 <_printf_float+0xc2>
 8009368:	f108 0801 	add.w	r8, r8, #1
 800936c:	e7e6      	b.n	800933c <_printf_float+0x248>
 800936e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009370:	2b00      	cmp	r3, #0
 8009372:	dc39      	bgt.n	80093e8 <_printf_float+0x2f4>
 8009374:	4a1b      	ldr	r2, [pc, #108]	; (80093e4 <_printf_float+0x2f0>)
 8009376:	2301      	movs	r3, #1
 8009378:	4631      	mov	r1, r6
 800937a:	4628      	mov	r0, r5
 800937c:	47b8      	blx	r7
 800937e:	3001      	adds	r0, #1
 8009380:	f43f af19 	beq.w	80091b6 <_printf_float+0xc2>
 8009384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009388:	4313      	orrs	r3, r2
 800938a:	d102      	bne.n	8009392 <_printf_float+0x29e>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	07d9      	lsls	r1, r3, #31
 8009390:	d5d8      	bpl.n	8009344 <_printf_float+0x250>
 8009392:	ee18 3a10 	vmov	r3, s16
 8009396:	4652      	mov	r2, sl
 8009398:	4631      	mov	r1, r6
 800939a:	4628      	mov	r0, r5
 800939c:	47b8      	blx	r7
 800939e:	3001      	adds	r0, #1
 80093a0:	f43f af09 	beq.w	80091b6 <_printf_float+0xc2>
 80093a4:	f04f 0900 	mov.w	r9, #0
 80093a8:	f104 0a1a 	add.w	sl, r4, #26
 80093ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ae:	425b      	negs	r3, r3
 80093b0:	454b      	cmp	r3, r9
 80093b2:	dc01      	bgt.n	80093b8 <_printf_float+0x2c4>
 80093b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b6:	e792      	b.n	80092de <_printf_float+0x1ea>
 80093b8:	2301      	movs	r3, #1
 80093ba:	4652      	mov	r2, sl
 80093bc:	4631      	mov	r1, r6
 80093be:	4628      	mov	r0, r5
 80093c0:	47b8      	blx	r7
 80093c2:	3001      	adds	r0, #1
 80093c4:	f43f aef7 	beq.w	80091b6 <_printf_float+0xc2>
 80093c8:	f109 0901 	add.w	r9, r9, #1
 80093cc:	e7ee      	b.n	80093ac <_printf_float+0x2b8>
 80093ce:	bf00      	nop
 80093d0:	7fefffff 	.word	0x7fefffff
 80093d4:	0800b8a4 	.word	0x0800b8a4
 80093d8:	0800b8a8 	.word	0x0800b8a8
 80093dc:	0800b8b0 	.word	0x0800b8b0
 80093e0:	0800b8ac 	.word	0x0800b8ac
 80093e4:	0800b8b4 	.word	0x0800b8b4
 80093e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093ec:	429a      	cmp	r2, r3
 80093ee:	bfa8      	it	ge
 80093f0:	461a      	movge	r2, r3
 80093f2:	2a00      	cmp	r2, #0
 80093f4:	4691      	mov	r9, r2
 80093f6:	dc37      	bgt.n	8009468 <_printf_float+0x374>
 80093f8:	f04f 0b00 	mov.w	fp, #0
 80093fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009400:	f104 021a 	add.w	r2, r4, #26
 8009404:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009406:	9305      	str	r3, [sp, #20]
 8009408:	eba3 0309 	sub.w	r3, r3, r9
 800940c:	455b      	cmp	r3, fp
 800940e:	dc33      	bgt.n	8009478 <_printf_float+0x384>
 8009410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009414:	429a      	cmp	r2, r3
 8009416:	db3b      	blt.n	8009490 <_printf_float+0x39c>
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	07da      	lsls	r2, r3, #31
 800941c:	d438      	bmi.n	8009490 <_printf_float+0x39c>
 800941e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009420:	9a05      	ldr	r2, [sp, #20]
 8009422:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009424:	1a9a      	subs	r2, r3, r2
 8009426:	eba3 0901 	sub.w	r9, r3, r1
 800942a:	4591      	cmp	r9, r2
 800942c:	bfa8      	it	ge
 800942e:	4691      	movge	r9, r2
 8009430:	f1b9 0f00 	cmp.w	r9, #0
 8009434:	dc35      	bgt.n	80094a2 <_printf_float+0x3ae>
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800943e:	f104 0a1a 	add.w	sl, r4, #26
 8009442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009446:	1a9b      	subs	r3, r3, r2
 8009448:	eba3 0309 	sub.w	r3, r3, r9
 800944c:	4543      	cmp	r3, r8
 800944e:	f77f af79 	ble.w	8009344 <_printf_float+0x250>
 8009452:	2301      	movs	r3, #1
 8009454:	4652      	mov	r2, sl
 8009456:	4631      	mov	r1, r6
 8009458:	4628      	mov	r0, r5
 800945a:	47b8      	blx	r7
 800945c:	3001      	adds	r0, #1
 800945e:	f43f aeaa 	beq.w	80091b6 <_printf_float+0xc2>
 8009462:	f108 0801 	add.w	r8, r8, #1
 8009466:	e7ec      	b.n	8009442 <_printf_float+0x34e>
 8009468:	4613      	mov	r3, r2
 800946a:	4631      	mov	r1, r6
 800946c:	4642      	mov	r2, r8
 800946e:	4628      	mov	r0, r5
 8009470:	47b8      	blx	r7
 8009472:	3001      	adds	r0, #1
 8009474:	d1c0      	bne.n	80093f8 <_printf_float+0x304>
 8009476:	e69e      	b.n	80091b6 <_printf_float+0xc2>
 8009478:	2301      	movs	r3, #1
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	9205      	str	r2, [sp, #20]
 8009480:	47b8      	blx	r7
 8009482:	3001      	adds	r0, #1
 8009484:	f43f ae97 	beq.w	80091b6 <_printf_float+0xc2>
 8009488:	9a05      	ldr	r2, [sp, #20]
 800948a:	f10b 0b01 	add.w	fp, fp, #1
 800948e:	e7b9      	b.n	8009404 <_printf_float+0x310>
 8009490:	ee18 3a10 	vmov	r3, s16
 8009494:	4652      	mov	r2, sl
 8009496:	4631      	mov	r1, r6
 8009498:	4628      	mov	r0, r5
 800949a:	47b8      	blx	r7
 800949c:	3001      	adds	r0, #1
 800949e:	d1be      	bne.n	800941e <_printf_float+0x32a>
 80094a0:	e689      	b.n	80091b6 <_printf_float+0xc2>
 80094a2:	9a05      	ldr	r2, [sp, #20]
 80094a4:	464b      	mov	r3, r9
 80094a6:	4442      	add	r2, r8
 80094a8:	4631      	mov	r1, r6
 80094aa:	4628      	mov	r0, r5
 80094ac:	47b8      	blx	r7
 80094ae:	3001      	adds	r0, #1
 80094b0:	d1c1      	bne.n	8009436 <_printf_float+0x342>
 80094b2:	e680      	b.n	80091b6 <_printf_float+0xc2>
 80094b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094b6:	2a01      	cmp	r2, #1
 80094b8:	dc01      	bgt.n	80094be <_printf_float+0x3ca>
 80094ba:	07db      	lsls	r3, r3, #31
 80094bc:	d538      	bpl.n	8009530 <_printf_float+0x43c>
 80094be:	2301      	movs	r3, #1
 80094c0:	4642      	mov	r2, r8
 80094c2:	4631      	mov	r1, r6
 80094c4:	4628      	mov	r0, r5
 80094c6:	47b8      	blx	r7
 80094c8:	3001      	adds	r0, #1
 80094ca:	f43f ae74 	beq.w	80091b6 <_printf_float+0xc2>
 80094ce:	ee18 3a10 	vmov	r3, s16
 80094d2:	4652      	mov	r2, sl
 80094d4:	4631      	mov	r1, r6
 80094d6:	4628      	mov	r0, r5
 80094d8:	47b8      	blx	r7
 80094da:	3001      	adds	r0, #1
 80094dc:	f43f ae6b 	beq.w	80091b6 <_printf_float+0xc2>
 80094e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094e4:	2200      	movs	r2, #0
 80094e6:	2300      	movs	r3, #0
 80094e8:	f7f7 faee 	bl	8000ac8 <__aeabi_dcmpeq>
 80094ec:	b9d8      	cbnz	r0, 8009526 <_printf_float+0x432>
 80094ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f0:	f108 0201 	add.w	r2, r8, #1
 80094f4:	3b01      	subs	r3, #1
 80094f6:	4631      	mov	r1, r6
 80094f8:	4628      	mov	r0, r5
 80094fa:	47b8      	blx	r7
 80094fc:	3001      	adds	r0, #1
 80094fe:	d10e      	bne.n	800951e <_printf_float+0x42a>
 8009500:	e659      	b.n	80091b6 <_printf_float+0xc2>
 8009502:	2301      	movs	r3, #1
 8009504:	4652      	mov	r2, sl
 8009506:	4631      	mov	r1, r6
 8009508:	4628      	mov	r0, r5
 800950a:	47b8      	blx	r7
 800950c:	3001      	adds	r0, #1
 800950e:	f43f ae52 	beq.w	80091b6 <_printf_float+0xc2>
 8009512:	f108 0801 	add.w	r8, r8, #1
 8009516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009518:	3b01      	subs	r3, #1
 800951a:	4543      	cmp	r3, r8
 800951c:	dcf1      	bgt.n	8009502 <_printf_float+0x40e>
 800951e:	464b      	mov	r3, r9
 8009520:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009524:	e6dc      	b.n	80092e0 <_printf_float+0x1ec>
 8009526:	f04f 0800 	mov.w	r8, #0
 800952a:	f104 0a1a 	add.w	sl, r4, #26
 800952e:	e7f2      	b.n	8009516 <_printf_float+0x422>
 8009530:	2301      	movs	r3, #1
 8009532:	4642      	mov	r2, r8
 8009534:	e7df      	b.n	80094f6 <_printf_float+0x402>
 8009536:	2301      	movs	r3, #1
 8009538:	464a      	mov	r2, r9
 800953a:	4631      	mov	r1, r6
 800953c:	4628      	mov	r0, r5
 800953e:	47b8      	blx	r7
 8009540:	3001      	adds	r0, #1
 8009542:	f43f ae38 	beq.w	80091b6 <_printf_float+0xc2>
 8009546:	f108 0801 	add.w	r8, r8, #1
 800954a:	68e3      	ldr	r3, [r4, #12]
 800954c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800954e:	1a5b      	subs	r3, r3, r1
 8009550:	4543      	cmp	r3, r8
 8009552:	dcf0      	bgt.n	8009536 <_printf_float+0x442>
 8009554:	e6fa      	b.n	800934c <_printf_float+0x258>
 8009556:	f04f 0800 	mov.w	r8, #0
 800955a:	f104 0919 	add.w	r9, r4, #25
 800955e:	e7f4      	b.n	800954a <_printf_float+0x456>

08009560 <_printf_common>:
 8009560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009564:	4616      	mov	r6, r2
 8009566:	4699      	mov	r9, r3
 8009568:	688a      	ldr	r2, [r1, #8]
 800956a:	690b      	ldr	r3, [r1, #16]
 800956c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009570:	4293      	cmp	r3, r2
 8009572:	bfb8      	it	lt
 8009574:	4613      	movlt	r3, r2
 8009576:	6033      	str	r3, [r6, #0]
 8009578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800957c:	4607      	mov	r7, r0
 800957e:	460c      	mov	r4, r1
 8009580:	b10a      	cbz	r2, 8009586 <_printf_common+0x26>
 8009582:	3301      	adds	r3, #1
 8009584:	6033      	str	r3, [r6, #0]
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	0699      	lsls	r1, r3, #26
 800958a:	bf42      	ittt	mi
 800958c:	6833      	ldrmi	r3, [r6, #0]
 800958e:	3302      	addmi	r3, #2
 8009590:	6033      	strmi	r3, [r6, #0]
 8009592:	6825      	ldr	r5, [r4, #0]
 8009594:	f015 0506 	ands.w	r5, r5, #6
 8009598:	d106      	bne.n	80095a8 <_printf_common+0x48>
 800959a:	f104 0a19 	add.w	sl, r4, #25
 800959e:	68e3      	ldr	r3, [r4, #12]
 80095a0:	6832      	ldr	r2, [r6, #0]
 80095a2:	1a9b      	subs	r3, r3, r2
 80095a4:	42ab      	cmp	r3, r5
 80095a6:	dc26      	bgt.n	80095f6 <_printf_common+0x96>
 80095a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095ac:	1e13      	subs	r3, r2, #0
 80095ae:	6822      	ldr	r2, [r4, #0]
 80095b0:	bf18      	it	ne
 80095b2:	2301      	movne	r3, #1
 80095b4:	0692      	lsls	r2, r2, #26
 80095b6:	d42b      	bmi.n	8009610 <_printf_common+0xb0>
 80095b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095bc:	4649      	mov	r1, r9
 80095be:	4638      	mov	r0, r7
 80095c0:	47c0      	blx	r8
 80095c2:	3001      	adds	r0, #1
 80095c4:	d01e      	beq.n	8009604 <_printf_common+0xa4>
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	68e5      	ldr	r5, [r4, #12]
 80095ca:	6832      	ldr	r2, [r6, #0]
 80095cc:	f003 0306 	and.w	r3, r3, #6
 80095d0:	2b04      	cmp	r3, #4
 80095d2:	bf08      	it	eq
 80095d4:	1aad      	subeq	r5, r5, r2
 80095d6:	68a3      	ldr	r3, [r4, #8]
 80095d8:	6922      	ldr	r2, [r4, #16]
 80095da:	bf0c      	ite	eq
 80095dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095e0:	2500      	movne	r5, #0
 80095e2:	4293      	cmp	r3, r2
 80095e4:	bfc4      	itt	gt
 80095e6:	1a9b      	subgt	r3, r3, r2
 80095e8:	18ed      	addgt	r5, r5, r3
 80095ea:	2600      	movs	r6, #0
 80095ec:	341a      	adds	r4, #26
 80095ee:	42b5      	cmp	r5, r6
 80095f0:	d11a      	bne.n	8009628 <_printf_common+0xc8>
 80095f2:	2000      	movs	r0, #0
 80095f4:	e008      	b.n	8009608 <_printf_common+0xa8>
 80095f6:	2301      	movs	r3, #1
 80095f8:	4652      	mov	r2, sl
 80095fa:	4649      	mov	r1, r9
 80095fc:	4638      	mov	r0, r7
 80095fe:	47c0      	blx	r8
 8009600:	3001      	adds	r0, #1
 8009602:	d103      	bne.n	800960c <_printf_common+0xac>
 8009604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960c:	3501      	adds	r5, #1
 800960e:	e7c6      	b.n	800959e <_printf_common+0x3e>
 8009610:	18e1      	adds	r1, r4, r3
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	2030      	movs	r0, #48	; 0x30
 8009616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800961a:	4422      	add	r2, r4
 800961c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009624:	3302      	adds	r3, #2
 8009626:	e7c7      	b.n	80095b8 <_printf_common+0x58>
 8009628:	2301      	movs	r3, #1
 800962a:	4622      	mov	r2, r4
 800962c:	4649      	mov	r1, r9
 800962e:	4638      	mov	r0, r7
 8009630:	47c0      	blx	r8
 8009632:	3001      	adds	r0, #1
 8009634:	d0e6      	beq.n	8009604 <_printf_common+0xa4>
 8009636:	3601      	adds	r6, #1
 8009638:	e7d9      	b.n	80095ee <_printf_common+0x8e>
	...

0800963c <_printf_i>:
 800963c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	7e0f      	ldrb	r7, [r1, #24]
 8009642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009644:	2f78      	cmp	r7, #120	; 0x78
 8009646:	4691      	mov	r9, r2
 8009648:	4680      	mov	r8, r0
 800964a:	460c      	mov	r4, r1
 800964c:	469a      	mov	sl, r3
 800964e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009652:	d807      	bhi.n	8009664 <_printf_i+0x28>
 8009654:	2f62      	cmp	r7, #98	; 0x62
 8009656:	d80a      	bhi.n	800966e <_printf_i+0x32>
 8009658:	2f00      	cmp	r7, #0
 800965a:	f000 80d8 	beq.w	800980e <_printf_i+0x1d2>
 800965e:	2f58      	cmp	r7, #88	; 0x58
 8009660:	f000 80a3 	beq.w	80097aa <_printf_i+0x16e>
 8009664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800966c:	e03a      	b.n	80096e4 <_printf_i+0xa8>
 800966e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009672:	2b15      	cmp	r3, #21
 8009674:	d8f6      	bhi.n	8009664 <_printf_i+0x28>
 8009676:	a101      	add	r1, pc, #4	; (adr r1, 800967c <_printf_i+0x40>)
 8009678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800967c:	080096d5 	.word	0x080096d5
 8009680:	080096e9 	.word	0x080096e9
 8009684:	08009665 	.word	0x08009665
 8009688:	08009665 	.word	0x08009665
 800968c:	08009665 	.word	0x08009665
 8009690:	08009665 	.word	0x08009665
 8009694:	080096e9 	.word	0x080096e9
 8009698:	08009665 	.word	0x08009665
 800969c:	08009665 	.word	0x08009665
 80096a0:	08009665 	.word	0x08009665
 80096a4:	08009665 	.word	0x08009665
 80096a8:	080097f5 	.word	0x080097f5
 80096ac:	08009719 	.word	0x08009719
 80096b0:	080097d7 	.word	0x080097d7
 80096b4:	08009665 	.word	0x08009665
 80096b8:	08009665 	.word	0x08009665
 80096bc:	08009817 	.word	0x08009817
 80096c0:	08009665 	.word	0x08009665
 80096c4:	08009719 	.word	0x08009719
 80096c8:	08009665 	.word	0x08009665
 80096cc:	08009665 	.word	0x08009665
 80096d0:	080097df 	.word	0x080097df
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	1d1a      	adds	r2, r3, #4
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	602a      	str	r2, [r5, #0]
 80096dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096e4:	2301      	movs	r3, #1
 80096e6:	e0a3      	b.n	8009830 <_printf_i+0x1f4>
 80096e8:	6820      	ldr	r0, [r4, #0]
 80096ea:	6829      	ldr	r1, [r5, #0]
 80096ec:	0606      	lsls	r6, r0, #24
 80096ee:	f101 0304 	add.w	r3, r1, #4
 80096f2:	d50a      	bpl.n	800970a <_printf_i+0xce>
 80096f4:	680e      	ldr	r6, [r1, #0]
 80096f6:	602b      	str	r3, [r5, #0]
 80096f8:	2e00      	cmp	r6, #0
 80096fa:	da03      	bge.n	8009704 <_printf_i+0xc8>
 80096fc:	232d      	movs	r3, #45	; 0x2d
 80096fe:	4276      	negs	r6, r6
 8009700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009704:	485e      	ldr	r0, [pc, #376]	; (8009880 <_printf_i+0x244>)
 8009706:	230a      	movs	r3, #10
 8009708:	e019      	b.n	800973e <_printf_i+0x102>
 800970a:	680e      	ldr	r6, [r1, #0]
 800970c:	602b      	str	r3, [r5, #0]
 800970e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009712:	bf18      	it	ne
 8009714:	b236      	sxthne	r6, r6
 8009716:	e7ef      	b.n	80096f8 <_printf_i+0xbc>
 8009718:	682b      	ldr	r3, [r5, #0]
 800971a:	6820      	ldr	r0, [r4, #0]
 800971c:	1d19      	adds	r1, r3, #4
 800971e:	6029      	str	r1, [r5, #0]
 8009720:	0601      	lsls	r1, r0, #24
 8009722:	d501      	bpl.n	8009728 <_printf_i+0xec>
 8009724:	681e      	ldr	r6, [r3, #0]
 8009726:	e002      	b.n	800972e <_printf_i+0xf2>
 8009728:	0646      	lsls	r6, r0, #25
 800972a:	d5fb      	bpl.n	8009724 <_printf_i+0xe8>
 800972c:	881e      	ldrh	r6, [r3, #0]
 800972e:	4854      	ldr	r0, [pc, #336]	; (8009880 <_printf_i+0x244>)
 8009730:	2f6f      	cmp	r7, #111	; 0x6f
 8009732:	bf0c      	ite	eq
 8009734:	2308      	moveq	r3, #8
 8009736:	230a      	movne	r3, #10
 8009738:	2100      	movs	r1, #0
 800973a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800973e:	6865      	ldr	r5, [r4, #4]
 8009740:	60a5      	str	r5, [r4, #8]
 8009742:	2d00      	cmp	r5, #0
 8009744:	bfa2      	ittt	ge
 8009746:	6821      	ldrge	r1, [r4, #0]
 8009748:	f021 0104 	bicge.w	r1, r1, #4
 800974c:	6021      	strge	r1, [r4, #0]
 800974e:	b90e      	cbnz	r6, 8009754 <_printf_i+0x118>
 8009750:	2d00      	cmp	r5, #0
 8009752:	d04d      	beq.n	80097f0 <_printf_i+0x1b4>
 8009754:	4615      	mov	r5, r2
 8009756:	fbb6 f1f3 	udiv	r1, r6, r3
 800975a:	fb03 6711 	mls	r7, r3, r1, r6
 800975e:	5dc7      	ldrb	r7, [r0, r7]
 8009760:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009764:	4637      	mov	r7, r6
 8009766:	42bb      	cmp	r3, r7
 8009768:	460e      	mov	r6, r1
 800976a:	d9f4      	bls.n	8009756 <_printf_i+0x11a>
 800976c:	2b08      	cmp	r3, #8
 800976e:	d10b      	bne.n	8009788 <_printf_i+0x14c>
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	07de      	lsls	r6, r3, #31
 8009774:	d508      	bpl.n	8009788 <_printf_i+0x14c>
 8009776:	6923      	ldr	r3, [r4, #16]
 8009778:	6861      	ldr	r1, [r4, #4]
 800977a:	4299      	cmp	r1, r3
 800977c:	bfde      	ittt	le
 800977e:	2330      	movle	r3, #48	; 0x30
 8009780:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009784:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009788:	1b52      	subs	r2, r2, r5
 800978a:	6122      	str	r2, [r4, #16]
 800978c:	f8cd a000 	str.w	sl, [sp]
 8009790:	464b      	mov	r3, r9
 8009792:	aa03      	add	r2, sp, #12
 8009794:	4621      	mov	r1, r4
 8009796:	4640      	mov	r0, r8
 8009798:	f7ff fee2 	bl	8009560 <_printf_common>
 800979c:	3001      	adds	r0, #1
 800979e:	d14c      	bne.n	800983a <_printf_i+0x1fe>
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097a4:	b004      	add	sp, #16
 80097a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097aa:	4835      	ldr	r0, [pc, #212]	; (8009880 <_printf_i+0x244>)
 80097ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097b0:	6829      	ldr	r1, [r5, #0]
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80097b8:	6029      	str	r1, [r5, #0]
 80097ba:	061d      	lsls	r5, r3, #24
 80097bc:	d514      	bpl.n	80097e8 <_printf_i+0x1ac>
 80097be:	07df      	lsls	r7, r3, #31
 80097c0:	bf44      	itt	mi
 80097c2:	f043 0320 	orrmi.w	r3, r3, #32
 80097c6:	6023      	strmi	r3, [r4, #0]
 80097c8:	b91e      	cbnz	r6, 80097d2 <_printf_i+0x196>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	f023 0320 	bic.w	r3, r3, #32
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	2310      	movs	r3, #16
 80097d4:	e7b0      	b.n	8009738 <_printf_i+0xfc>
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	f043 0320 	orr.w	r3, r3, #32
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	2378      	movs	r3, #120	; 0x78
 80097e0:	4828      	ldr	r0, [pc, #160]	; (8009884 <_printf_i+0x248>)
 80097e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097e6:	e7e3      	b.n	80097b0 <_printf_i+0x174>
 80097e8:	0659      	lsls	r1, r3, #25
 80097ea:	bf48      	it	mi
 80097ec:	b2b6      	uxthmi	r6, r6
 80097ee:	e7e6      	b.n	80097be <_printf_i+0x182>
 80097f0:	4615      	mov	r5, r2
 80097f2:	e7bb      	b.n	800976c <_printf_i+0x130>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	6826      	ldr	r6, [r4, #0]
 80097f8:	6961      	ldr	r1, [r4, #20]
 80097fa:	1d18      	adds	r0, r3, #4
 80097fc:	6028      	str	r0, [r5, #0]
 80097fe:	0635      	lsls	r5, r6, #24
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	d501      	bpl.n	8009808 <_printf_i+0x1cc>
 8009804:	6019      	str	r1, [r3, #0]
 8009806:	e002      	b.n	800980e <_printf_i+0x1d2>
 8009808:	0670      	lsls	r0, r6, #25
 800980a:	d5fb      	bpl.n	8009804 <_printf_i+0x1c8>
 800980c:	8019      	strh	r1, [r3, #0]
 800980e:	2300      	movs	r3, #0
 8009810:	6123      	str	r3, [r4, #16]
 8009812:	4615      	mov	r5, r2
 8009814:	e7ba      	b.n	800978c <_printf_i+0x150>
 8009816:	682b      	ldr	r3, [r5, #0]
 8009818:	1d1a      	adds	r2, r3, #4
 800981a:	602a      	str	r2, [r5, #0]
 800981c:	681d      	ldr	r5, [r3, #0]
 800981e:	6862      	ldr	r2, [r4, #4]
 8009820:	2100      	movs	r1, #0
 8009822:	4628      	mov	r0, r5
 8009824:	f7f6 fcdc 	bl	80001e0 <memchr>
 8009828:	b108      	cbz	r0, 800982e <_printf_i+0x1f2>
 800982a:	1b40      	subs	r0, r0, r5
 800982c:	6060      	str	r0, [r4, #4]
 800982e:	6863      	ldr	r3, [r4, #4]
 8009830:	6123      	str	r3, [r4, #16]
 8009832:	2300      	movs	r3, #0
 8009834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009838:	e7a8      	b.n	800978c <_printf_i+0x150>
 800983a:	6923      	ldr	r3, [r4, #16]
 800983c:	462a      	mov	r2, r5
 800983e:	4649      	mov	r1, r9
 8009840:	4640      	mov	r0, r8
 8009842:	47d0      	blx	sl
 8009844:	3001      	adds	r0, #1
 8009846:	d0ab      	beq.n	80097a0 <_printf_i+0x164>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	079b      	lsls	r3, r3, #30
 800984c:	d413      	bmi.n	8009876 <_printf_i+0x23a>
 800984e:	68e0      	ldr	r0, [r4, #12]
 8009850:	9b03      	ldr	r3, [sp, #12]
 8009852:	4298      	cmp	r0, r3
 8009854:	bfb8      	it	lt
 8009856:	4618      	movlt	r0, r3
 8009858:	e7a4      	b.n	80097a4 <_printf_i+0x168>
 800985a:	2301      	movs	r3, #1
 800985c:	4632      	mov	r2, r6
 800985e:	4649      	mov	r1, r9
 8009860:	4640      	mov	r0, r8
 8009862:	47d0      	blx	sl
 8009864:	3001      	adds	r0, #1
 8009866:	d09b      	beq.n	80097a0 <_printf_i+0x164>
 8009868:	3501      	adds	r5, #1
 800986a:	68e3      	ldr	r3, [r4, #12]
 800986c:	9903      	ldr	r1, [sp, #12]
 800986e:	1a5b      	subs	r3, r3, r1
 8009870:	42ab      	cmp	r3, r5
 8009872:	dcf2      	bgt.n	800985a <_printf_i+0x21e>
 8009874:	e7eb      	b.n	800984e <_printf_i+0x212>
 8009876:	2500      	movs	r5, #0
 8009878:	f104 0619 	add.w	r6, r4, #25
 800987c:	e7f5      	b.n	800986a <_printf_i+0x22e>
 800987e:	bf00      	nop
 8009880:	0800b8b6 	.word	0x0800b8b6
 8009884:	0800b8c7 	.word	0x0800b8c7

08009888 <iprintf>:
 8009888:	b40f      	push	{r0, r1, r2, r3}
 800988a:	4b0a      	ldr	r3, [pc, #40]	; (80098b4 <iprintf+0x2c>)
 800988c:	b513      	push	{r0, r1, r4, lr}
 800988e:	681c      	ldr	r4, [r3, #0]
 8009890:	b124      	cbz	r4, 800989c <iprintf+0x14>
 8009892:	69a3      	ldr	r3, [r4, #24]
 8009894:	b913      	cbnz	r3, 800989c <iprintf+0x14>
 8009896:	4620      	mov	r0, r4
 8009898:	f000 fef0 	bl	800a67c <__sinit>
 800989c:	ab05      	add	r3, sp, #20
 800989e:	9a04      	ldr	r2, [sp, #16]
 80098a0:	68a1      	ldr	r1, [r4, #8]
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	4620      	mov	r0, r4
 80098a6:	f001 fb6d 	bl	800af84 <_vfiprintf_r>
 80098aa:	b002      	add	sp, #8
 80098ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098b0:	b004      	add	sp, #16
 80098b2:	4770      	bx	lr
 80098b4:	2000002c 	.word	0x2000002c

080098b8 <_sbrk_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4d06      	ldr	r5, [pc, #24]	; (80098d4 <_sbrk_r+0x1c>)
 80098bc:	2300      	movs	r3, #0
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	f7f7 ff98 	bl	80017f8 <_sbrk>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_sbrk_r+0x1a>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_sbrk_r+0x1a>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	20000a44 	.word	0x20000a44

080098d8 <quorem>:
 80098d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	6903      	ldr	r3, [r0, #16]
 80098de:	690c      	ldr	r4, [r1, #16]
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	4607      	mov	r7, r0
 80098e4:	f2c0 8081 	blt.w	80099ea <quorem+0x112>
 80098e8:	3c01      	subs	r4, #1
 80098ea:	f101 0814 	add.w	r8, r1, #20
 80098ee:	f100 0514 	add.w	r5, r0, #20
 80098f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098f6:	9301      	str	r3, [sp, #4]
 80098f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009900:	3301      	adds	r3, #1
 8009902:	429a      	cmp	r2, r3
 8009904:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800990c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009910:	d331      	bcc.n	8009976 <quorem+0x9e>
 8009912:	f04f 0e00 	mov.w	lr, #0
 8009916:	4640      	mov	r0, r8
 8009918:	46ac      	mov	ip, r5
 800991a:	46f2      	mov	sl, lr
 800991c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009920:	b293      	uxth	r3, r2
 8009922:	fb06 e303 	mla	r3, r6, r3, lr
 8009926:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800992a:	b29b      	uxth	r3, r3
 800992c:	ebaa 0303 	sub.w	r3, sl, r3
 8009930:	f8dc a000 	ldr.w	sl, [ip]
 8009934:	0c12      	lsrs	r2, r2, #16
 8009936:	fa13 f38a 	uxtah	r3, r3, sl
 800993a:	fb06 e202 	mla	r2, r6, r2, lr
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	9b00      	ldr	r3, [sp, #0]
 8009942:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009946:	b292      	uxth	r2, r2
 8009948:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800994c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009950:	f8bd 3000 	ldrh.w	r3, [sp]
 8009954:	4581      	cmp	r9, r0
 8009956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800995a:	f84c 3b04 	str.w	r3, [ip], #4
 800995e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009962:	d2db      	bcs.n	800991c <quorem+0x44>
 8009964:	f855 300b 	ldr.w	r3, [r5, fp]
 8009968:	b92b      	cbnz	r3, 8009976 <quorem+0x9e>
 800996a:	9b01      	ldr	r3, [sp, #4]
 800996c:	3b04      	subs	r3, #4
 800996e:	429d      	cmp	r5, r3
 8009970:	461a      	mov	r2, r3
 8009972:	d32e      	bcc.n	80099d2 <quorem+0xfa>
 8009974:	613c      	str	r4, [r7, #16]
 8009976:	4638      	mov	r0, r7
 8009978:	f001 f9c2 	bl	800ad00 <__mcmp>
 800997c:	2800      	cmp	r0, #0
 800997e:	db24      	blt.n	80099ca <quorem+0xf2>
 8009980:	3601      	adds	r6, #1
 8009982:	4628      	mov	r0, r5
 8009984:	f04f 0c00 	mov.w	ip, #0
 8009988:	f858 2b04 	ldr.w	r2, [r8], #4
 800998c:	f8d0 e000 	ldr.w	lr, [r0]
 8009990:	b293      	uxth	r3, r2
 8009992:	ebac 0303 	sub.w	r3, ip, r3
 8009996:	0c12      	lsrs	r2, r2, #16
 8009998:	fa13 f38e 	uxtah	r3, r3, lr
 800999c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099aa:	45c1      	cmp	r9, r8
 80099ac:	f840 3b04 	str.w	r3, [r0], #4
 80099b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099b4:	d2e8      	bcs.n	8009988 <quorem+0xb0>
 80099b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099be:	b922      	cbnz	r2, 80099ca <quorem+0xf2>
 80099c0:	3b04      	subs	r3, #4
 80099c2:	429d      	cmp	r5, r3
 80099c4:	461a      	mov	r2, r3
 80099c6:	d30a      	bcc.n	80099de <quorem+0x106>
 80099c8:	613c      	str	r4, [r7, #16]
 80099ca:	4630      	mov	r0, r6
 80099cc:	b003      	add	sp, #12
 80099ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d2:	6812      	ldr	r2, [r2, #0]
 80099d4:	3b04      	subs	r3, #4
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	d1cc      	bne.n	8009974 <quorem+0x9c>
 80099da:	3c01      	subs	r4, #1
 80099dc:	e7c7      	b.n	800996e <quorem+0x96>
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	3b04      	subs	r3, #4
 80099e2:	2a00      	cmp	r2, #0
 80099e4:	d1f0      	bne.n	80099c8 <quorem+0xf0>
 80099e6:	3c01      	subs	r4, #1
 80099e8:	e7eb      	b.n	80099c2 <quorem+0xea>
 80099ea:	2000      	movs	r0, #0
 80099ec:	e7ee      	b.n	80099cc <quorem+0xf4>
	...

080099f0 <_dtoa_r>:
 80099f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	ed2d 8b04 	vpush	{d8-d9}
 80099f8:	ec57 6b10 	vmov	r6, r7, d0
 80099fc:	b093      	sub	sp, #76	; 0x4c
 80099fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a04:	9106      	str	r1, [sp, #24]
 8009a06:	ee10 aa10 	vmov	sl, s0
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8009a10:	46bb      	mov	fp, r7
 8009a12:	b975      	cbnz	r5, 8009a32 <_dtoa_r+0x42>
 8009a14:	2010      	movs	r0, #16
 8009a16:	f7ff f9d5 	bl	8008dc4 <malloc>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	6260      	str	r0, [r4, #36]	; 0x24
 8009a1e:	b920      	cbnz	r0, 8009a2a <_dtoa_r+0x3a>
 8009a20:	4ba7      	ldr	r3, [pc, #668]	; (8009cc0 <_dtoa_r+0x2d0>)
 8009a22:	21ea      	movs	r1, #234	; 0xea
 8009a24:	48a7      	ldr	r0, [pc, #668]	; (8009cc4 <_dtoa_r+0x2d4>)
 8009a26:	f001 fcf3 	bl	800b410 <__assert_func>
 8009a2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a2e:	6005      	str	r5, [r0, #0]
 8009a30:	60c5      	str	r5, [r0, #12]
 8009a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a34:	6819      	ldr	r1, [r3, #0]
 8009a36:	b151      	cbz	r1, 8009a4e <_dtoa_r+0x5e>
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	604a      	str	r2, [r1, #4]
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	4093      	lsls	r3, r2
 8009a40:	608b      	str	r3, [r1, #8]
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 ff1a 	bl	800a87c <_Bfree>
 8009a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	1e3b      	subs	r3, r7, #0
 8009a50:	bfaa      	itet	ge
 8009a52:	2300      	movge	r3, #0
 8009a54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a58:	f8c8 3000 	strge.w	r3, [r8]
 8009a5c:	4b9a      	ldr	r3, [pc, #616]	; (8009cc8 <_dtoa_r+0x2d8>)
 8009a5e:	bfbc      	itt	lt
 8009a60:	2201      	movlt	r2, #1
 8009a62:	f8c8 2000 	strlt.w	r2, [r8]
 8009a66:	ea33 030b 	bics.w	r3, r3, fp
 8009a6a:	d11b      	bne.n	8009aa4 <_dtoa_r+0xb4>
 8009a6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a72:	6013      	str	r3, [r2, #0]
 8009a74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a78:	4333      	orrs	r3, r6
 8009a7a:	f000 8592 	beq.w	800a5a2 <_dtoa_r+0xbb2>
 8009a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a80:	b963      	cbnz	r3, 8009a9c <_dtoa_r+0xac>
 8009a82:	4b92      	ldr	r3, [pc, #584]	; (8009ccc <_dtoa_r+0x2dc>)
 8009a84:	e022      	b.n	8009acc <_dtoa_r+0xdc>
 8009a86:	4b92      	ldr	r3, [pc, #584]	; (8009cd0 <_dtoa_r+0x2e0>)
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a8e:	6013      	str	r3, [r2, #0]
 8009a90:	9801      	ldr	r0, [sp, #4]
 8009a92:	b013      	add	sp, #76	; 0x4c
 8009a94:	ecbd 8b04 	vpop	{d8-d9}
 8009a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9c:	4b8b      	ldr	r3, [pc, #556]	; (8009ccc <_dtoa_r+0x2dc>)
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	3303      	adds	r3, #3
 8009aa2:	e7f3      	b.n	8009a8c <_dtoa_r+0x9c>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	4650      	mov	r0, sl
 8009aaa:	4659      	mov	r1, fp
 8009aac:	f7f7 f80c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ab0:	ec4b ab19 	vmov	d9, sl, fp
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	b158      	cbz	r0, 8009ad0 <_dtoa_r+0xe0>
 8009ab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aba:	2301      	movs	r3, #1
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 856b 	beq.w	800a59c <_dtoa_r+0xbac>
 8009ac6:	4883      	ldr	r0, [pc, #524]	; (8009cd4 <_dtoa_r+0x2e4>)
 8009ac8:	6018      	str	r0, [r3, #0]
 8009aca:	1e43      	subs	r3, r0, #1
 8009acc:	9301      	str	r3, [sp, #4]
 8009ace:	e7df      	b.n	8009a90 <_dtoa_r+0xa0>
 8009ad0:	ec4b ab10 	vmov	d0, sl, fp
 8009ad4:	aa10      	add	r2, sp, #64	; 0x40
 8009ad6:	a911      	add	r1, sp, #68	; 0x44
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f001 f9b7 	bl	800ae4c <__d2b>
 8009ade:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009ae2:	ee08 0a10 	vmov	s16, r0
 8009ae6:	2d00      	cmp	r5, #0
 8009ae8:	f000 8084 	beq.w	8009bf4 <_dtoa_r+0x204>
 8009aec:	ee19 3a90 	vmov	r3, s19
 8009af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009af4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009af8:	4656      	mov	r6, sl
 8009afa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009b06:	4b74      	ldr	r3, [pc, #464]	; (8009cd8 <_dtoa_r+0x2e8>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	f7f6 fbbb 	bl	8000288 <__aeabi_dsub>
 8009b12:	a365      	add	r3, pc, #404	; (adr r3, 8009ca8 <_dtoa_r+0x2b8>)
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	f7f6 fd6e 	bl	80005f8 <__aeabi_dmul>
 8009b1c:	a364      	add	r3, pc, #400	; (adr r3, 8009cb0 <_dtoa_r+0x2c0>)
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f7f6 fbb3 	bl	800028c <__adddf3>
 8009b26:	4606      	mov	r6, r0
 8009b28:	4628      	mov	r0, r5
 8009b2a:	460f      	mov	r7, r1
 8009b2c:	f7f6 fcfa 	bl	8000524 <__aeabi_i2d>
 8009b30:	a361      	add	r3, pc, #388	; (adr r3, 8009cb8 <_dtoa_r+0x2c8>)
 8009b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b36:	f7f6 fd5f 	bl	80005f8 <__aeabi_dmul>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4630      	mov	r0, r6
 8009b40:	4639      	mov	r1, r7
 8009b42:	f7f6 fba3 	bl	800028c <__adddf3>
 8009b46:	4606      	mov	r6, r0
 8009b48:	460f      	mov	r7, r1
 8009b4a:	f7f7 f805 	bl	8000b58 <__aeabi_d2iz>
 8009b4e:	2200      	movs	r2, #0
 8009b50:	9000      	str	r0, [sp, #0]
 8009b52:	2300      	movs	r3, #0
 8009b54:	4630      	mov	r0, r6
 8009b56:	4639      	mov	r1, r7
 8009b58:	f7f6 ffc0 	bl	8000adc <__aeabi_dcmplt>
 8009b5c:	b150      	cbz	r0, 8009b74 <_dtoa_r+0x184>
 8009b5e:	9800      	ldr	r0, [sp, #0]
 8009b60:	f7f6 fce0 	bl	8000524 <__aeabi_i2d>
 8009b64:	4632      	mov	r2, r6
 8009b66:	463b      	mov	r3, r7
 8009b68:	f7f6 ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b6c:	b910      	cbnz	r0, 8009b74 <_dtoa_r+0x184>
 8009b6e:	9b00      	ldr	r3, [sp, #0]
 8009b70:	3b01      	subs	r3, #1
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	9b00      	ldr	r3, [sp, #0]
 8009b76:	2b16      	cmp	r3, #22
 8009b78:	d85a      	bhi.n	8009c30 <_dtoa_r+0x240>
 8009b7a:	9a00      	ldr	r2, [sp, #0]
 8009b7c:	4b57      	ldr	r3, [pc, #348]	; (8009cdc <_dtoa_r+0x2ec>)
 8009b7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	ec51 0b19 	vmov	r0, r1, d9
 8009b8a:	f7f6 ffa7 	bl	8000adc <__aeabi_dcmplt>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d050      	beq.n	8009c34 <_dtoa_r+0x244>
 8009b92:	9b00      	ldr	r3, [sp, #0]
 8009b94:	3b01      	subs	r3, #1
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b9e:	1b5d      	subs	r5, r3, r5
 8009ba0:	1e6b      	subs	r3, r5, #1
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	bf45      	ittet	mi
 8009ba6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009baa:	9304      	strmi	r3, [sp, #16]
 8009bac:	2300      	movpl	r3, #0
 8009bae:	2300      	movmi	r3, #0
 8009bb0:	bf4c      	ite	mi
 8009bb2:	9305      	strmi	r3, [sp, #20]
 8009bb4:	9304      	strpl	r3, [sp, #16]
 8009bb6:	9b00      	ldr	r3, [sp, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	db3d      	blt.n	8009c38 <_dtoa_r+0x248>
 8009bbc:	9b05      	ldr	r3, [sp, #20]
 8009bbe:	9a00      	ldr	r2, [sp, #0]
 8009bc0:	920a      	str	r2, [sp, #40]	; 0x28
 8009bc2:	4413      	add	r3, r2
 8009bc4:	9305      	str	r3, [sp, #20]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	9307      	str	r3, [sp, #28]
 8009bca:	9b06      	ldr	r3, [sp, #24]
 8009bcc:	2b09      	cmp	r3, #9
 8009bce:	f200 8089 	bhi.w	8009ce4 <_dtoa_r+0x2f4>
 8009bd2:	2b05      	cmp	r3, #5
 8009bd4:	bfc4      	itt	gt
 8009bd6:	3b04      	subgt	r3, #4
 8009bd8:	9306      	strgt	r3, [sp, #24]
 8009bda:	9b06      	ldr	r3, [sp, #24]
 8009bdc:	f1a3 0302 	sub.w	r3, r3, #2
 8009be0:	bfcc      	ite	gt
 8009be2:	2500      	movgt	r5, #0
 8009be4:	2501      	movle	r5, #1
 8009be6:	2b03      	cmp	r3, #3
 8009be8:	f200 8087 	bhi.w	8009cfa <_dtoa_r+0x30a>
 8009bec:	e8df f003 	tbb	[pc, r3]
 8009bf0:	59383a2d 	.word	0x59383a2d
 8009bf4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009bf8:	441d      	add	r5, r3
 8009bfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009bfe:	2b20      	cmp	r3, #32
 8009c00:	bfc1      	itttt	gt
 8009c02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009c0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c12:	bfda      	itte	le
 8009c14:	f1c3 0320 	rsble	r3, r3, #32
 8009c18:	fa06 f003 	lslle.w	r0, r6, r3
 8009c1c:	4318      	orrgt	r0, r3
 8009c1e:	f7f6 fc71 	bl	8000504 <__aeabi_ui2d>
 8009c22:	2301      	movs	r3, #1
 8009c24:	4606      	mov	r6, r0
 8009c26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c2a:	3d01      	subs	r5, #1
 8009c2c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c2e:	e76a      	b.n	8009b06 <_dtoa_r+0x116>
 8009c30:	2301      	movs	r3, #1
 8009c32:	e7b2      	b.n	8009b9a <_dtoa_r+0x1aa>
 8009c34:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c36:	e7b1      	b.n	8009b9c <_dtoa_r+0x1ac>
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	9a00      	ldr	r2, [sp, #0]
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	9304      	str	r3, [sp, #16]
 8009c40:	4253      	negs	r3, r2
 8009c42:	9307      	str	r3, [sp, #28]
 8009c44:	2300      	movs	r3, #0
 8009c46:	930a      	str	r3, [sp, #40]	; 0x28
 8009c48:	e7bf      	b.n	8009bca <_dtoa_r+0x1da>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9308      	str	r3, [sp, #32]
 8009c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	dc55      	bgt.n	8009d00 <_dtoa_r+0x310>
 8009c54:	2301      	movs	r3, #1
 8009c56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c5e:	e00c      	b.n	8009c7a <_dtoa_r+0x28a>
 8009c60:	2301      	movs	r3, #1
 8009c62:	e7f3      	b.n	8009c4c <_dtoa_r+0x25c>
 8009c64:	2300      	movs	r3, #0
 8009c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c68:	9308      	str	r3, [sp, #32]
 8009c6a:	9b00      	ldr	r3, [sp, #0]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	9302      	str	r3, [sp, #8]
 8009c70:	3301      	adds	r3, #1
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	9303      	str	r3, [sp, #12]
 8009c76:	bfb8      	it	lt
 8009c78:	2301      	movlt	r3, #1
 8009c7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	6042      	str	r2, [r0, #4]
 8009c80:	2204      	movs	r2, #4
 8009c82:	f102 0614 	add.w	r6, r2, #20
 8009c86:	429e      	cmp	r6, r3
 8009c88:	6841      	ldr	r1, [r0, #4]
 8009c8a:	d93d      	bls.n	8009d08 <_dtoa_r+0x318>
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f000 fdb5 	bl	800a7fc <_Balloc>
 8009c92:	9001      	str	r0, [sp, #4]
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d13b      	bne.n	8009d10 <_dtoa_r+0x320>
 8009c98:	4b11      	ldr	r3, [pc, #68]	; (8009ce0 <_dtoa_r+0x2f0>)
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ca0:	e6c0      	b.n	8009a24 <_dtoa_r+0x34>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e7df      	b.n	8009c66 <_dtoa_r+0x276>
 8009ca6:	bf00      	nop
 8009ca8:	636f4361 	.word	0x636f4361
 8009cac:	3fd287a7 	.word	0x3fd287a7
 8009cb0:	8b60c8b3 	.word	0x8b60c8b3
 8009cb4:	3fc68a28 	.word	0x3fc68a28
 8009cb8:	509f79fb 	.word	0x509f79fb
 8009cbc:	3fd34413 	.word	0x3fd34413
 8009cc0:	0800b8e5 	.word	0x0800b8e5
 8009cc4:	0800b8fc 	.word	0x0800b8fc
 8009cc8:	7ff00000 	.word	0x7ff00000
 8009ccc:	0800b8e1 	.word	0x0800b8e1
 8009cd0:	0800b8d8 	.word	0x0800b8d8
 8009cd4:	0800b8b5 	.word	0x0800b8b5
 8009cd8:	3ff80000 	.word	0x3ff80000
 8009cdc:	0800ba50 	.word	0x0800ba50
 8009ce0:	0800b957 	.word	0x0800b957
 8009ce4:	2501      	movs	r5, #1
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	9306      	str	r3, [sp, #24]
 8009cea:	9508      	str	r5, [sp, #32]
 8009cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cf0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2312      	movs	r3, #18
 8009cf8:	e7b0      	b.n	8009c5c <_dtoa_r+0x26c>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	9308      	str	r3, [sp, #32]
 8009cfe:	e7f5      	b.n	8009cec <_dtoa_r+0x2fc>
 8009d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d06:	e7b8      	b.n	8009c7a <_dtoa_r+0x28a>
 8009d08:	3101      	adds	r1, #1
 8009d0a:	6041      	str	r1, [r0, #4]
 8009d0c:	0052      	lsls	r2, r2, #1
 8009d0e:	e7b8      	b.n	8009c82 <_dtoa_r+0x292>
 8009d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d12:	9a01      	ldr	r2, [sp, #4]
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	9b03      	ldr	r3, [sp, #12]
 8009d18:	2b0e      	cmp	r3, #14
 8009d1a:	f200 809d 	bhi.w	8009e58 <_dtoa_r+0x468>
 8009d1e:	2d00      	cmp	r5, #0
 8009d20:	f000 809a 	beq.w	8009e58 <_dtoa_r+0x468>
 8009d24:	9b00      	ldr	r3, [sp, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	dd32      	ble.n	8009d90 <_dtoa_r+0x3a0>
 8009d2a:	4ab7      	ldr	r2, [pc, #732]	; (800a008 <_dtoa_r+0x618>)
 8009d2c:	f003 030f 	and.w	r3, r3, #15
 8009d30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d38:	9b00      	ldr	r3, [sp, #0]
 8009d3a:	05d8      	lsls	r0, r3, #23
 8009d3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d40:	d516      	bpl.n	8009d70 <_dtoa_r+0x380>
 8009d42:	4bb2      	ldr	r3, [pc, #712]	; (800a00c <_dtoa_r+0x61c>)
 8009d44:	ec51 0b19 	vmov	r0, r1, d9
 8009d48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d4c:	f7f6 fd7e 	bl	800084c <__aeabi_ddiv>
 8009d50:	f007 070f 	and.w	r7, r7, #15
 8009d54:	4682      	mov	sl, r0
 8009d56:	468b      	mov	fp, r1
 8009d58:	2503      	movs	r5, #3
 8009d5a:	4eac      	ldr	r6, [pc, #688]	; (800a00c <_dtoa_r+0x61c>)
 8009d5c:	b957      	cbnz	r7, 8009d74 <_dtoa_r+0x384>
 8009d5e:	4642      	mov	r2, r8
 8009d60:	464b      	mov	r3, r9
 8009d62:	4650      	mov	r0, sl
 8009d64:	4659      	mov	r1, fp
 8009d66:	f7f6 fd71 	bl	800084c <__aeabi_ddiv>
 8009d6a:	4682      	mov	sl, r0
 8009d6c:	468b      	mov	fp, r1
 8009d6e:	e028      	b.n	8009dc2 <_dtoa_r+0x3d2>
 8009d70:	2502      	movs	r5, #2
 8009d72:	e7f2      	b.n	8009d5a <_dtoa_r+0x36a>
 8009d74:	07f9      	lsls	r1, r7, #31
 8009d76:	d508      	bpl.n	8009d8a <_dtoa_r+0x39a>
 8009d78:	4640      	mov	r0, r8
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d80:	f7f6 fc3a 	bl	80005f8 <__aeabi_dmul>
 8009d84:	3501      	adds	r5, #1
 8009d86:	4680      	mov	r8, r0
 8009d88:	4689      	mov	r9, r1
 8009d8a:	107f      	asrs	r7, r7, #1
 8009d8c:	3608      	adds	r6, #8
 8009d8e:	e7e5      	b.n	8009d5c <_dtoa_r+0x36c>
 8009d90:	f000 809b 	beq.w	8009eca <_dtoa_r+0x4da>
 8009d94:	9b00      	ldr	r3, [sp, #0]
 8009d96:	4f9d      	ldr	r7, [pc, #628]	; (800a00c <_dtoa_r+0x61c>)
 8009d98:	425e      	negs	r6, r3
 8009d9a:	4b9b      	ldr	r3, [pc, #620]	; (800a008 <_dtoa_r+0x618>)
 8009d9c:	f006 020f 	and.w	r2, r6, #15
 8009da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	ec51 0b19 	vmov	r0, r1, d9
 8009dac:	f7f6 fc24 	bl	80005f8 <__aeabi_dmul>
 8009db0:	1136      	asrs	r6, r6, #4
 8009db2:	4682      	mov	sl, r0
 8009db4:	468b      	mov	fp, r1
 8009db6:	2300      	movs	r3, #0
 8009db8:	2502      	movs	r5, #2
 8009dba:	2e00      	cmp	r6, #0
 8009dbc:	d17a      	bne.n	8009eb4 <_dtoa_r+0x4c4>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1d3      	bne.n	8009d6a <_dtoa_r+0x37a>
 8009dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 8082 	beq.w	8009ece <_dtoa_r+0x4de>
 8009dca:	4b91      	ldr	r3, [pc, #580]	; (800a010 <_dtoa_r+0x620>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4650      	mov	r0, sl
 8009dd0:	4659      	mov	r1, fp
 8009dd2:	f7f6 fe83 	bl	8000adc <__aeabi_dcmplt>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d079      	beq.n	8009ece <_dtoa_r+0x4de>
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d076      	beq.n	8009ece <_dtoa_r+0x4de>
 8009de0:	9b02      	ldr	r3, [sp, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	dd36      	ble.n	8009e54 <_dtoa_r+0x464>
 8009de6:	9b00      	ldr	r3, [sp, #0]
 8009de8:	4650      	mov	r0, sl
 8009dea:	4659      	mov	r1, fp
 8009dec:	1e5f      	subs	r7, r3, #1
 8009dee:	2200      	movs	r2, #0
 8009df0:	4b88      	ldr	r3, [pc, #544]	; (800a014 <_dtoa_r+0x624>)
 8009df2:	f7f6 fc01 	bl	80005f8 <__aeabi_dmul>
 8009df6:	9e02      	ldr	r6, [sp, #8]
 8009df8:	4682      	mov	sl, r0
 8009dfa:	468b      	mov	fp, r1
 8009dfc:	3501      	adds	r5, #1
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f7f6 fb90 	bl	8000524 <__aeabi_i2d>
 8009e04:	4652      	mov	r2, sl
 8009e06:	465b      	mov	r3, fp
 8009e08:	f7f6 fbf6 	bl	80005f8 <__aeabi_dmul>
 8009e0c:	4b82      	ldr	r3, [pc, #520]	; (800a018 <_dtoa_r+0x628>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f7f6 fa3c 	bl	800028c <__adddf3>
 8009e14:	46d0      	mov	r8, sl
 8009e16:	46d9      	mov	r9, fp
 8009e18:	4682      	mov	sl, r0
 8009e1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e1e:	2e00      	cmp	r6, #0
 8009e20:	d158      	bne.n	8009ed4 <_dtoa_r+0x4e4>
 8009e22:	4b7e      	ldr	r3, [pc, #504]	; (800a01c <_dtoa_r+0x62c>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	4640      	mov	r0, r8
 8009e28:	4649      	mov	r1, r9
 8009e2a:	f7f6 fa2d 	bl	8000288 <__aeabi_dsub>
 8009e2e:	4652      	mov	r2, sl
 8009e30:	465b      	mov	r3, fp
 8009e32:	4680      	mov	r8, r0
 8009e34:	4689      	mov	r9, r1
 8009e36:	f7f6 fe6f 	bl	8000b18 <__aeabi_dcmpgt>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	f040 8295 	bne.w	800a36a <_dtoa_r+0x97a>
 8009e40:	4652      	mov	r2, sl
 8009e42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e46:	4640      	mov	r0, r8
 8009e48:	4649      	mov	r1, r9
 8009e4a:	f7f6 fe47 	bl	8000adc <__aeabi_dcmplt>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	f040 8289 	bne.w	800a366 <_dtoa_r+0x976>
 8009e54:	ec5b ab19 	vmov	sl, fp, d9
 8009e58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f2c0 8148 	blt.w	800a0f0 <_dtoa_r+0x700>
 8009e60:	9a00      	ldr	r2, [sp, #0]
 8009e62:	2a0e      	cmp	r2, #14
 8009e64:	f300 8144 	bgt.w	800a0f0 <_dtoa_r+0x700>
 8009e68:	4b67      	ldr	r3, [pc, #412]	; (800a008 <_dtoa_r+0x618>)
 8009e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f280 80d5 	bge.w	800a024 <_dtoa_r+0x634>
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f300 80d1 	bgt.w	800a024 <_dtoa_r+0x634>
 8009e82:	f040 826f 	bne.w	800a364 <_dtoa_r+0x974>
 8009e86:	4b65      	ldr	r3, [pc, #404]	; (800a01c <_dtoa_r+0x62c>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	4649      	mov	r1, r9
 8009e8e:	f7f6 fbb3 	bl	80005f8 <__aeabi_dmul>
 8009e92:	4652      	mov	r2, sl
 8009e94:	465b      	mov	r3, fp
 8009e96:	f7f6 fe35 	bl	8000b04 <__aeabi_dcmpge>
 8009e9a:	9e03      	ldr	r6, [sp, #12]
 8009e9c:	4637      	mov	r7, r6
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	f040 8245 	bne.w	800a32e <_dtoa_r+0x93e>
 8009ea4:	9d01      	ldr	r5, [sp, #4]
 8009ea6:	2331      	movs	r3, #49	; 0x31
 8009ea8:	f805 3b01 	strb.w	r3, [r5], #1
 8009eac:	9b00      	ldr	r3, [sp, #0]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	e240      	b.n	800a336 <_dtoa_r+0x946>
 8009eb4:	07f2      	lsls	r2, r6, #31
 8009eb6:	d505      	bpl.n	8009ec4 <_dtoa_r+0x4d4>
 8009eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ebc:	f7f6 fb9c 	bl	80005f8 <__aeabi_dmul>
 8009ec0:	3501      	adds	r5, #1
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	1076      	asrs	r6, r6, #1
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	e777      	b.n	8009dba <_dtoa_r+0x3ca>
 8009eca:	2502      	movs	r5, #2
 8009ecc:	e779      	b.n	8009dc2 <_dtoa_r+0x3d2>
 8009ece:	9f00      	ldr	r7, [sp, #0]
 8009ed0:	9e03      	ldr	r6, [sp, #12]
 8009ed2:	e794      	b.n	8009dfe <_dtoa_r+0x40e>
 8009ed4:	9901      	ldr	r1, [sp, #4]
 8009ed6:	4b4c      	ldr	r3, [pc, #304]	; (800a008 <_dtoa_r+0x618>)
 8009ed8:	4431      	add	r1, r6
 8009eda:	910d      	str	r1, [sp, #52]	; 0x34
 8009edc:	9908      	ldr	r1, [sp, #32]
 8009ede:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ee2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ee6:	2900      	cmp	r1, #0
 8009ee8:	d043      	beq.n	8009f72 <_dtoa_r+0x582>
 8009eea:	494d      	ldr	r1, [pc, #308]	; (800a020 <_dtoa_r+0x630>)
 8009eec:	2000      	movs	r0, #0
 8009eee:	f7f6 fcad 	bl	800084c <__aeabi_ddiv>
 8009ef2:	4652      	mov	r2, sl
 8009ef4:	465b      	mov	r3, fp
 8009ef6:	f7f6 f9c7 	bl	8000288 <__aeabi_dsub>
 8009efa:	9d01      	ldr	r5, [sp, #4]
 8009efc:	4682      	mov	sl, r0
 8009efe:	468b      	mov	fp, r1
 8009f00:	4649      	mov	r1, r9
 8009f02:	4640      	mov	r0, r8
 8009f04:	f7f6 fe28 	bl	8000b58 <__aeabi_d2iz>
 8009f08:	4606      	mov	r6, r0
 8009f0a:	f7f6 fb0b 	bl	8000524 <__aeabi_i2d>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4640      	mov	r0, r8
 8009f14:	4649      	mov	r1, r9
 8009f16:	f7f6 f9b7 	bl	8000288 <__aeabi_dsub>
 8009f1a:	3630      	adds	r6, #48	; 0x30
 8009f1c:	f805 6b01 	strb.w	r6, [r5], #1
 8009f20:	4652      	mov	r2, sl
 8009f22:	465b      	mov	r3, fp
 8009f24:	4680      	mov	r8, r0
 8009f26:	4689      	mov	r9, r1
 8009f28:	f7f6 fdd8 	bl	8000adc <__aeabi_dcmplt>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d163      	bne.n	8009ff8 <_dtoa_r+0x608>
 8009f30:	4642      	mov	r2, r8
 8009f32:	464b      	mov	r3, r9
 8009f34:	4936      	ldr	r1, [pc, #216]	; (800a010 <_dtoa_r+0x620>)
 8009f36:	2000      	movs	r0, #0
 8009f38:	f7f6 f9a6 	bl	8000288 <__aeabi_dsub>
 8009f3c:	4652      	mov	r2, sl
 8009f3e:	465b      	mov	r3, fp
 8009f40:	f7f6 fdcc 	bl	8000adc <__aeabi_dcmplt>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	f040 80b5 	bne.w	800a0b4 <_dtoa_r+0x6c4>
 8009f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f4c:	429d      	cmp	r5, r3
 8009f4e:	d081      	beq.n	8009e54 <_dtoa_r+0x464>
 8009f50:	4b30      	ldr	r3, [pc, #192]	; (800a014 <_dtoa_r+0x624>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	4650      	mov	r0, sl
 8009f56:	4659      	mov	r1, fp
 8009f58:	f7f6 fb4e 	bl	80005f8 <__aeabi_dmul>
 8009f5c:	4b2d      	ldr	r3, [pc, #180]	; (800a014 <_dtoa_r+0x624>)
 8009f5e:	4682      	mov	sl, r0
 8009f60:	468b      	mov	fp, r1
 8009f62:	4640      	mov	r0, r8
 8009f64:	4649      	mov	r1, r9
 8009f66:	2200      	movs	r2, #0
 8009f68:	f7f6 fb46 	bl	80005f8 <__aeabi_dmul>
 8009f6c:	4680      	mov	r8, r0
 8009f6e:	4689      	mov	r9, r1
 8009f70:	e7c6      	b.n	8009f00 <_dtoa_r+0x510>
 8009f72:	4650      	mov	r0, sl
 8009f74:	4659      	mov	r1, fp
 8009f76:	f7f6 fb3f 	bl	80005f8 <__aeabi_dmul>
 8009f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f7c:	9d01      	ldr	r5, [sp, #4]
 8009f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f80:	4682      	mov	sl, r0
 8009f82:	468b      	mov	fp, r1
 8009f84:	4649      	mov	r1, r9
 8009f86:	4640      	mov	r0, r8
 8009f88:	f7f6 fde6 	bl	8000b58 <__aeabi_d2iz>
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	f7f6 fac9 	bl	8000524 <__aeabi_i2d>
 8009f92:	3630      	adds	r6, #48	; 0x30
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4640      	mov	r0, r8
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	f7f6 f974 	bl	8000288 <__aeabi_dsub>
 8009fa0:	f805 6b01 	strb.w	r6, [r5], #1
 8009fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fa6:	429d      	cmp	r5, r3
 8009fa8:	4680      	mov	r8, r0
 8009faa:	4689      	mov	r9, r1
 8009fac:	f04f 0200 	mov.w	r2, #0
 8009fb0:	d124      	bne.n	8009ffc <_dtoa_r+0x60c>
 8009fb2:	4b1b      	ldr	r3, [pc, #108]	; (800a020 <_dtoa_r+0x630>)
 8009fb4:	4650      	mov	r0, sl
 8009fb6:	4659      	mov	r1, fp
 8009fb8:	f7f6 f968 	bl	800028c <__adddf3>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	f7f6 fda8 	bl	8000b18 <__aeabi_dcmpgt>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d173      	bne.n	800a0b4 <_dtoa_r+0x6c4>
 8009fcc:	4652      	mov	r2, sl
 8009fce:	465b      	mov	r3, fp
 8009fd0:	4913      	ldr	r1, [pc, #76]	; (800a020 <_dtoa_r+0x630>)
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	f7f6 f958 	bl	8000288 <__aeabi_dsub>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4640      	mov	r0, r8
 8009fde:	4649      	mov	r1, r9
 8009fe0:	f7f6 fd7c 	bl	8000adc <__aeabi_dcmplt>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	f43f af35 	beq.w	8009e54 <_dtoa_r+0x464>
 8009fea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009fec:	1e6b      	subs	r3, r5, #1
 8009fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ff0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ff4:	2b30      	cmp	r3, #48	; 0x30
 8009ff6:	d0f8      	beq.n	8009fea <_dtoa_r+0x5fa>
 8009ff8:	9700      	str	r7, [sp, #0]
 8009ffa:	e049      	b.n	800a090 <_dtoa_r+0x6a0>
 8009ffc:	4b05      	ldr	r3, [pc, #20]	; (800a014 <_dtoa_r+0x624>)
 8009ffe:	f7f6 fafb 	bl	80005f8 <__aeabi_dmul>
 800a002:	4680      	mov	r8, r0
 800a004:	4689      	mov	r9, r1
 800a006:	e7bd      	b.n	8009f84 <_dtoa_r+0x594>
 800a008:	0800ba50 	.word	0x0800ba50
 800a00c:	0800ba28 	.word	0x0800ba28
 800a010:	3ff00000 	.word	0x3ff00000
 800a014:	40240000 	.word	0x40240000
 800a018:	401c0000 	.word	0x401c0000
 800a01c:	40140000 	.word	0x40140000
 800a020:	3fe00000 	.word	0x3fe00000
 800a024:	9d01      	ldr	r5, [sp, #4]
 800a026:	4656      	mov	r6, sl
 800a028:	465f      	mov	r7, fp
 800a02a:	4642      	mov	r2, r8
 800a02c:	464b      	mov	r3, r9
 800a02e:	4630      	mov	r0, r6
 800a030:	4639      	mov	r1, r7
 800a032:	f7f6 fc0b 	bl	800084c <__aeabi_ddiv>
 800a036:	f7f6 fd8f 	bl	8000b58 <__aeabi_d2iz>
 800a03a:	4682      	mov	sl, r0
 800a03c:	f7f6 fa72 	bl	8000524 <__aeabi_i2d>
 800a040:	4642      	mov	r2, r8
 800a042:	464b      	mov	r3, r9
 800a044:	f7f6 fad8 	bl	80005f8 <__aeabi_dmul>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4630      	mov	r0, r6
 800a04e:	4639      	mov	r1, r7
 800a050:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a054:	f7f6 f918 	bl	8000288 <__aeabi_dsub>
 800a058:	f805 6b01 	strb.w	r6, [r5], #1
 800a05c:	9e01      	ldr	r6, [sp, #4]
 800a05e:	9f03      	ldr	r7, [sp, #12]
 800a060:	1bae      	subs	r6, r5, r6
 800a062:	42b7      	cmp	r7, r6
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	d135      	bne.n	800a0d6 <_dtoa_r+0x6e6>
 800a06a:	f7f6 f90f 	bl	800028c <__adddf3>
 800a06e:	4642      	mov	r2, r8
 800a070:	464b      	mov	r3, r9
 800a072:	4606      	mov	r6, r0
 800a074:	460f      	mov	r7, r1
 800a076:	f7f6 fd4f 	bl	8000b18 <__aeabi_dcmpgt>
 800a07a:	b9d0      	cbnz	r0, 800a0b2 <_dtoa_r+0x6c2>
 800a07c:	4642      	mov	r2, r8
 800a07e:	464b      	mov	r3, r9
 800a080:	4630      	mov	r0, r6
 800a082:	4639      	mov	r1, r7
 800a084:	f7f6 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 800a088:	b110      	cbz	r0, 800a090 <_dtoa_r+0x6a0>
 800a08a:	f01a 0f01 	tst.w	sl, #1
 800a08e:	d110      	bne.n	800a0b2 <_dtoa_r+0x6c2>
 800a090:	4620      	mov	r0, r4
 800a092:	ee18 1a10 	vmov	r1, s16
 800a096:	f000 fbf1 	bl	800a87c <_Bfree>
 800a09a:	2300      	movs	r3, #0
 800a09c:	9800      	ldr	r0, [sp, #0]
 800a09e:	702b      	strb	r3, [r5, #0]
 800a0a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	6018      	str	r0, [r3, #0]
 800a0a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f43f acf1 	beq.w	8009a90 <_dtoa_r+0xa0>
 800a0ae:	601d      	str	r5, [r3, #0]
 800a0b0:	e4ee      	b.n	8009a90 <_dtoa_r+0xa0>
 800a0b2:	9f00      	ldr	r7, [sp, #0]
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	461d      	mov	r5, r3
 800a0b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0bc:	2a39      	cmp	r2, #57	; 0x39
 800a0be:	d106      	bne.n	800a0ce <_dtoa_r+0x6de>
 800a0c0:	9a01      	ldr	r2, [sp, #4]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d1f7      	bne.n	800a0b6 <_dtoa_r+0x6c6>
 800a0c6:	9901      	ldr	r1, [sp, #4]
 800a0c8:	2230      	movs	r2, #48	; 0x30
 800a0ca:	3701      	adds	r7, #1
 800a0cc:	700a      	strb	r2, [r1, #0]
 800a0ce:	781a      	ldrb	r2, [r3, #0]
 800a0d0:	3201      	adds	r2, #1
 800a0d2:	701a      	strb	r2, [r3, #0]
 800a0d4:	e790      	b.n	8009ff8 <_dtoa_r+0x608>
 800a0d6:	4ba6      	ldr	r3, [pc, #664]	; (800a370 <_dtoa_r+0x980>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f7f6 fa8d 	bl	80005f8 <__aeabi_dmul>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	460f      	mov	r7, r1
 800a0e6:	f7f6 fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d09d      	beq.n	800a02a <_dtoa_r+0x63a>
 800a0ee:	e7cf      	b.n	800a090 <_dtoa_r+0x6a0>
 800a0f0:	9a08      	ldr	r2, [sp, #32]
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	f000 80d7 	beq.w	800a2a6 <_dtoa_r+0x8b6>
 800a0f8:	9a06      	ldr	r2, [sp, #24]
 800a0fa:	2a01      	cmp	r2, #1
 800a0fc:	f300 80ba 	bgt.w	800a274 <_dtoa_r+0x884>
 800a100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a102:	2a00      	cmp	r2, #0
 800a104:	f000 80b2 	beq.w	800a26c <_dtoa_r+0x87c>
 800a108:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a10c:	9e07      	ldr	r6, [sp, #28]
 800a10e:	9d04      	ldr	r5, [sp, #16]
 800a110:	9a04      	ldr	r2, [sp, #16]
 800a112:	441a      	add	r2, r3
 800a114:	9204      	str	r2, [sp, #16]
 800a116:	9a05      	ldr	r2, [sp, #20]
 800a118:	2101      	movs	r1, #1
 800a11a:	441a      	add	r2, r3
 800a11c:	4620      	mov	r0, r4
 800a11e:	9205      	str	r2, [sp, #20]
 800a120:	f000 fc64 	bl	800a9ec <__i2b>
 800a124:	4607      	mov	r7, r0
 800a126:	2d00      	cmp	r5, #0
 800a128:	dd0c      	ble.n	800a144 <_dtoa_r+0x754>
 800a12a:	9b05      	ldr	r3, [sp, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dd09      	ble.n	800a144 <_dtoa_r+0x754>
 800a130:	42ab      	cmp	r3, r5
 800a132:	9a04      	ldr	r2, [sp, #16]
 800a134:	bfa8      	it	ge
 800a136:	462b      	movge	r3, r5
 800a138:	1ad2      	subs	r2, r2, r3
 800a13a:	9204      	str	r2, [sp, #16]
 800a13c:	9a05      	ldr	r2, [sp, #20]
 800a13e:	1aed      	subs	r5, r5, r3
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	9b07      	ldr	r3, [sp, #28]
 800a146:	b31b      	cbz	r3, 800a190 <_dtoa_r+0x7a0>
 800a148:	9b08      	ldr	r3, [sp, #32]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f000 80af 	beq.w	800a2ae <_dtoa_r+0x8be>
 800a150:	2e00      	cmp	r6, #0
 800a152:	dd13      	ble.n	800a17c <_dtoa_r+0x78c>
 800a154:	4639      	mov	r1, r7
 800a156:	4632      	mov	r2, r6
 800a158:	4620      	mov	r0, r4
 800a15a:	f000 fd07 	bl	800ab6c <__pow5mult>
 800a15e:	ee18 2a10 	vmov	r2, s16
 800a162:	4601      	mov	r1, r0
 800a164:	4607      	mov	r7, r0
 800a166:	4620      	mov	r0, r4
 800a168:	f000 fc56 	bl	800aa18 <__multiply>
 800a16c:	ee18 1a10 	vmov	r1, s16
 800a170:	4680      	mov	r8, r0
 800a172:	4620      	mov	r0, r4
 800a174:	f000 fb82 	bl	800a87c <_Bfree>
 800a178:	ee08 8a10 	vmov	s16, r8
 800a17c:	9b07      	ldr	r3, [sp, #28]
 800a17e:	1b9a      	subs	r2, r3, r6
 800a180:	d006      	beq.n	800a190 <_dtoa_r+0x7a0>
 800a182:	ee18 1a10 	vmov	r1, s16
 800a186:	4620      	mov	r0, r4
 800a188:	f000 fcf0 	bl	800ab6c <__pow5mult>
 800a18c:	ee08 0a10 	vmov	s16, r0
 800a190:	2101      	movs	r1, #1
 800a192:	4620      	mov	r0, r4
 800a194:	f000 fc2a 	bl	800a9ec <__i2b>
 800a198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	4606      	mov	r6, r0
 800a19e:	f340 8088 	ble.w	800a2b2 <_dtoa_r+0x8c2>
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	4601      	mov	r1, r0
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 fce0 	bl	800ab6c <__pow5mult>
 800a1ac:	9b06      	ldr	r3, [sp, #24]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	f340 8081 	ble.w	800a2b8 <_dtoa_r+0x8c8>
 800a1b6:	f04f 0800 	mov.w	r8, #0
 800a1ba:	6933      	ldr	r3, [r6, #16]
 800a1bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1c0:	6918      	ldr	r0, [r3, #16]
 800a1c2:	f000 fbc3 	bl	800a94c <__hi0bits>
 800a1c6:	f1c0 0020 	rsb	r0, r0, #32
 800a1ca:	9b05      	ldr	r3, [sp, #20]
 800a1cc:	4418      	add	r0, r3
 800a1ce:	f010 001f 	ands.w	r0, r0, #31
 800a1d2:	f000 8092 	beq.w	800a2fa <_dtoa_r+0x90a>
 800a1d6:	f1c0 0320 	rsb	r3, r0, #32
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	f340 808a 	ble.w	800a2f4 <_dtoa_r+0x904>
 800a1e0:	f1c0 001c 	rsb	r0, r0, #28
 800a1e4:	9b04      	ldr	r3, [sp, #16]
 800a1e6:	4403      	add	r3, r0
 800a1e8:	9304      	str	r3, [sp, #16]
 800a1ea:	9b05      	ldr	r3, [sp, #20]
 800a1ec:	4403      	add	r3, r0
 800a1ee:	4405      	add	r5, r0
 800a1f0:	9305      	str	r3, [sp, #20]
 800a1f2:	9b04      	ldr	r3, [sp, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	dd07      	ble.n	800a208 <_dtoa_r+0x818>
 800a1f8:	ee18 1a10 	vmov	r1, s16
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	4620      	mov	r0, r4
 800a200:	f000 fd0e 	bl	800ac20 <__lshift>
 800a204:	ee08 0a10 	vmov	s16, r0
 800a208:	9b05      	ldr	r3, [sp, #20]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	dd05      	ble.n	800a21a <_dtoa_r+0x82a>
 800a20e:	4631      	mov	r1, r6
 800a210:	461a      	mov	r2, r3
 800a212:	4620      	mov	r0, r4
 800a214:	f000 fd04 	bl	800ac20 <__lshift>
 800a218:	4606      	mov	r6, r0
 800a21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d06e      	beq.n	800a2fe <_dtoa_r+0x90e>
 800a220:	ee18 0a10 	vmov	r0, s16
 800a224:	4631      	mov	r1, r6
 800a226:	f000 fd6b 	bl	800ad00 <__mcmp>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	da67      	bge.n	800a2fe <_dtoa_r+0x90e>
 800a22e:	9b00      	ldr	r3, [sp, #0]
 800a230:	3b01      	subs	r3, #1
 800a232:	ee18 1a10 	vmov	r1, s16
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	220a      	movs	r2, #10
 800a23a:	2300      	movs	r3, #0
 800a23c:	4620      	mov	r0, r4
 800a23e:	f000 fb3f 	bl	800a8c0 <__multadd>
 800a242:	9b08      	ldr	r3, [sp, #32]
 800a244:	ee08 0a10 	vmov	s16, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 81b1 	beq.w	800a5b0 <_dtoa_r+0xbc0>
 800a24e:	2300      	movs	r3, #0
 800a250:	4639      	mov	r1, r7
 800a252:	220a      	movs	r2, #10
 800a254:	4620      	mov	r0, r4
 800a256:	f000 fb33 	bl	800a8c0 <__multadd>
 800a25a:	9b02      	ldr	r3, [sp, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	4607      	mov	r7, r0
 800a260:	f300 808e 	bgt.w	800a380 <_dtoa_r+0x990>
 800a264:	9b06      	ldr	r3, [sp, #24]
 800a266:	2b02      	cmp	r3, #2
 800a268:	dc51      	bgt.n	800a30e <_dtoa_r+0x91e>
 800a26a:	e089      	b.n	800a380 <_dtoa_r+0x990>
 800a26c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a26e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a272:	e74b      	b.n	800a10c <_dtoa_r+0x71c>
 800a274:	9b03      	ldr	r3, [sp, #12]
 800a276:	1e5e      	subs	r6, r3, #1
 800a278:	9b07      	ldr	r3, [sp, #28]
 800a27a:	42b3      	cmp	r3, r6
 800a27c:	bfbf      	itttt	lt
 800a27e:	9b07      	ldrlt	r3, [sp, #28]
 800a280:	9607      	strlt	r6, [sp, #28]
 800a282:	1af2      	sublt	r2, r6, r3
 800a284:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a286:	bfb6      	itet	lt
 800a288:	189b      	addlt	r3, r3, r2
 800a28a:	1b9e      	subge	r6, r3, r6
 800a28c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a28e:	9b03      	ldr	r3, [sp, #12]
 800a290:	bfb8      	it	lt
 800a292:	2600      	movlt	r6, #0
 800a294:	2b00      	cmp	r3, #0
 800a296:	bfb7      	itett	lt
 800a298:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a29c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a2a0:	1a9d      	sublt	r5, r3, r2
 800a2a2:	2300      	movlt	r3, #0
 800a2a4:	e734      	b.n	800a110 <_dtoa_r+0x720>
 800a2a6:	9e07      	ldr	r6, [sp, #28]
 800a2a8:	9d04      	ldr	r5, [sp, #16]
 800a2aa:	9f08      	ldr	r7, [sp, #32]
 800a2ac:	e73b      	b.n	800a126 <_dtoa_r+0x736>
 800a2ae:	9a07      	ldr	r2, [sp, #28]
 800a2b0:	e767      	b.n	800a182 <_dtoa_r+0x792>
 800a2b2:	9b06      	ldr	r3, [sp, #24]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	dc18      	bgt.n	800a2ea <_dtoa_r+0x8fa>
 800a2b8:	f1ba 0f00 	cmp.w	sl, #0
 800a2bc:	d115      	bne.n	800a2ea <_dtoa_r+0x8fa>
 800a2be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2c2:	b993      	cbnz	r3, 800a2ea <_dtoa_r+0x8fa>
 800a2c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2c8:	0d1b      	lsrs	r3, r3, #20
 800a2ca:	051b      	lsls	r3, r3, #20
 800a2cc:	b183      	cbz	r3, 800a2f0 <_dtoa_r+0x900>
 800a2ce:	9b04      	ldr	r3, [sp, #16]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	9304      	str	r3, [sp, #16]
 800a2d4:	9b05      	ldr	r3, [sp, #20]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	9305      	str	r3, [sp, #20]
 800a2da:	f04f 0801 	mov.w	r8, #1
 800a2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f47f af6a 	bne.w	800a1ba <_dtoa_r+0x7ca>
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	e76f      	b.n	800a1ca <_dtoa_r+0x7da>
 800a2ea:	f04f 0800 	mov.w	r8, #0
 800a2ee:	e7f6      	b.n	800a2de <_dtoa_r+0x8ee>
 800a2f0:	4698      	mov	r8, r3
 800a2f2:	e7f4      	b.n	800a2de <_dtoa_r+0x8ee>
 800a2f4:	f43f af7d 	beq.w	800a1f2 <_dtoa_r+0x802>
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	301c      	adds	r0, #28
 800a2fc:	e772      	b.n	800a1e4 <_dtoa_r+0x7f4>
 800a2fe:	9b03      	ldr	r3, [sp, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	dc37      	bgt.n	800a374 <_dtoa_r+0x984>
 800a304:	9b06      	ldr	r3, [sp, #24]
 800a306:	2b02      	cmp	r3, #2
 800a308:	dd34      	ble.n	800a374 <_dtoa_r+0x984>
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	9302      	str	r3, [sp, #8]
 800a30e:	9b02      	ldr	r3, [sp, #8]
 800a310:	b96b      	cbnz	r3, 800a32e <_dtoa_r+0x93e>
 800a312:	4631      	mov	r1, r6
 800a314:	2205      	movs	r2, #5
 800a316:	4620      	mov	r0, r4
 800a318:	f000 fad2 	bl	800a8c0 <__multadd>
 800a31c:	4601      	mov	r1, r0
 800a31e:	4606      	mov	r6, r0
 800a320:	ee18 0a10 	vmov	r0, s16
 800a324:	f000 fcec 	bl	800ad00 <__mcmp>
 800a328:	2800      	cmp	r0, #0
 800a32a:	f73f adbb 	bgt.w	8009ea4 <_dtoa_r+0x4b4>
 800a32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a330:	9d01      	ldr	r5, [sp, #4]
 800a332:	43db      	mvns	r3, r3
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	f04f 0800 	mov.w	r8, #0
 800a33a:	4631      	mov	r1, r6
 800a33c:	4620      	mov	r0, r4
 800a33e:	f000 fa9d 	bl	800a87c <_Bfree>
 800a342:	2f00      	cmp	r7, #0
 800a344:	f43f aea4 	beq.w	800a090 <_dtoa_r+0x6a0>
 800a348:	f1b8 0f00 	cmp.w	r8, #0
 800a34c:	d005      	beq.n	800a35a <_dtoa_r+0x96a>
 800a34e:	45b8      	cmp	r8, r7
 800a350:	d003      	beq.n	800a35a <_dtoa_r+0x96a>
 800a352:	4641      	mov	r1, r8
 800a354:	4620      	mov	r0, r4
 800a356:	f000 fa91 	bl	800a87c <_Bfree>
 800a35a:	4639      	mov	r1, r7
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 fa8d 	bl	800a87c <_Bfree>
 800a362:	e695      	b.n	800a090 <_dtoa_r+0x6a0>
 800a364:	2600      	movs	r6, #0
 800a366:	4637      	mov	r7, r6
 800a368:	e7e1      	b.n	800a32e <_dtoa_r+0x93e>
 800a36a:	9700      	str	r7, [sp, #0]
 800a36c:	4637      	mov	r7, r6
 800a36e:	e599      	b.n	8009ea4 <_dtoa_r+0x4b4>
 800a370:	40240000 	.word	0x40240000
 800a374:	9b08      	ldr	r3, [sp, #32]
 800a376:	2b00      	cmp	r3, #0
 800a378:	f000 80ca 	beq.w	800a510 <_dtoa_r+0xb20>
 800a37c:	9b03      	ldr	r3, [sp, #12]
 800a37e:	9302      	str	r3, [sp, #8]
 800a380:	2d00      	cmp	r5, #0
 800a382:	dd05      	ble.n	800a390 <_dtoa_r+0x9a0>
 800a384:	4639      	mov	r1, r7
 800a386:	462a      	mov	r2, r5
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 fc49 	bl	800ac20 <__lshift>
 800a38e:	4607      	mov	r7, r0
 800a390:	f1b8 0f00 	cmp.w	r8, #0
 800a394:	d05b      	beq.n	800a44e <_dtoa_r+0xa5e>
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fa2f 	bl	800a7fc <_Balloc>
 800a39e:	4605      	mov	r5, r0
 800a3a0:	b928      	cbnz	r0, 800a3ae <_dtoa_r+0x9be>
 800a3a2:	4b87      	ldr	r3, [pc, #540]	; (800a5c0 <_dtoa_r+0xbd0>)
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3aa:	f7ff bb3b 	b.w	8009a24 <_dtoa_r+0x34>
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	3202      	adds	r2, #2
 800a3b2:	0092      	lsls	r2, r2, #2
 800a3b4:	f107 010c 	add.w	r1, r7, #12
 800a3b8:	300c      	adds	r0, #12
 800a3ba:	f000 fa04 	bl	800a7c6 <memcpy>
 800a3be:	2201      	movs	r2, #1
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 fc2c 	bl	800ac20 <__lshift>
 800a3c8:	9b01      	ldr	r3, [sp, #4]
 800a3ca:	f103 0901 	add.w	r9, r3, #1
 800a3ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	9305      	str	r3, [sp, #20]
 800a3d6:	f00a 0301 	and.w	r3, sl, #1
 800a3da:	46b8      	mov	r8, r7
 800a3dc:	9304      	str	r3, [sp, #16]
 800a3de:	4607      	mov	r7, r0
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	ee18 0a10 	vmov	r0, s16
 800a3e6:	f7ff fa77 	bl	80098d8 <quorem>
 800a3ea:	4641      	mov	r1, r8
 800a3ec:	9002      	str	r0, [sp, #8]
 800a3ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a3f2:	ee18 0a10 	vmov	r0, s16
 800a3f6:	f000 fc83 	bl	800ad00 <__mcmp>
 800a3fa:	463a      	mov	r2, r7
 800a3fc:	9003      	str	r0, [sp, #12]
 800a3fe:	4631      	mov	r1, r6
 800a400:	4620      	mov	r0, r4
 800a402:	f000 fc99 	bl	800ad38 <__mdiff>
 800a406:	68c2      	ldr	r2, [r0, #12]
 800a408:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a40c:	4605      	mov	r5, r0
 800a40e:	bb02      	cbnz	r2, 800a452 <_dtoa_r+0xa62>
 800a410:	4601      	mov	r1, r0
 800a412:	ee18 0a10 	vmov	r0, s16
 800a416:	f000 fc73 	bl	800ad00 <__mcmp>
 800a41a:	4602      	mov	r2, r0
 800a41c:	4629      	mov	r1, r5
 800a41e:	4620      	mov	r0, r4
 800a420:	9207      	str	r2, [sp, #28]
 800a422:	f000 fa2b 	bl	800a87c <_Bfree>
 800a426:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a42a:	ea43 0102 	orr.w	r1, r3, r2
 800a42e:	9b04      	ldr	r3, [sp, #16]
 800a430:	430b      	orrs	r3, r1
 800a432:	464d      	mov	r5, r9
 800a434:	d10f      	bne.n	800a456 <_dtoa_r+0xa66>
 800a436:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a43a:	d02a      	beq.n	800a492 <_dtoa_r+0xaa2>
 800a43c:	9b03      	ldr	r3, [sp, #12]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	dd02      	ble.n	800a448 <_dtoa_r+0xa58>
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a448:	f88b a000 	strb.w	sl, [fp]
 800a44c:	e775      	b.n	800a33a <_dtoa_r+0x94a>
 800a44e:	4638      	mov	r0, r7
 800a450:	e7ba      	b.n	800a3c8 <_dtoa_r+0x9d8>
 800a452:	2201      	movs	r2, #1
 800a454:	e7e2      	b.n	800a41c <_dtoa_r+0xa2c>
 800a456:	9b03      	ldr	r3, [sp, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	db04      	blt.n	800a466 <_dtoa_r+0xa76>
 800a45c:	9906      	ldr	r1, [sp, #24]
 800a45e:	430b      	orrs	r3, r1
 800a460:	9904      	ldr	r1, [sp, #16]
 800a462:	430b      	orrs	r3, r1
 800a464:	d122      	bne.n	800a4ac <_dtoa_r+0xabc>
 800a466:	2a00      	cmp	r2, #0
 800a468:	ddee      	ble.n	800a448 <_dtoa_r+0xa58>
 800a46a:	ee18 1a10 	vmov	r1, s16
 800a46e:	2201      	movs	r2, #1
 800a470:	4620      	mov	r0, r4
 800a472:	f000 fbd5 	bl	800ac20 <__lshift>
 800a476:	4631      	mov	r1, r6
 800a478:	ee08 0a10 	vmov	s16, r0
 800a47c:	f000 fc40 	bl	800ad00 <__mcmp>
 800a480:	2800      	cmp	r0, #0
 800a482:	dc03      	bgt.n	800a48c <_dtoa_r+0xa9c>
 800a484:	d1e0      	bne.n	800a448 <_dtoa_r+0xa58>
 800a486:	f01a 0f01 	tst.w	sl, #1
 800a48a:	d0dd      	beq.n	800a448 <_dtoa_r+0xa58>
 800a48c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a490:	d1d7      	bne.n	800a442 <_dtoa_r+0xa52>
 800a492:	2339      	movs	r3, #57	; 0x39
 800a494:	f88b 3000 	strb.w	r3, [fp]
 800a498:	462b      	mov	r3, r5
 800a49a:	461d      	mov	r5, r3
 800a49c:	3b01      	subs	r3, #1
 800a49e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4a2:	2a39      	cmp	r2, #57	; 0x39
 800a4a4:	d071      	beq.n	800a58a <_dtoa_r+0xb9a>
 800a4a6:	3201      	adds	r2, #1
 800a4a8:	701a      	strb	r2, [r3, #0]
 800a4aa:	e746      	b.n	800a33a <_dtoa_r+0x94a>
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	dd07      	ble.n	800a4c0 <_dtoa_r+0xad0>
 800a4b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4b4:	d0ed      	beq.n	800a492 <_dtoa_r+0xaa2>
 800a4b6:	f10a 0301 	add.w	r3, sl, #1
 800a4ba:	f88b 3000 	strb.w	r3, [fp]
 800a4be:	e73c      	b.n	800a33a <_dtoa_r+0x94a>
 800a4c0:	9b05      	ldr	r3, [sp, #20]
 800a4c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a4c6:	4599      	cmp	r9, r3
 800a4c8:	d047      	beq.n	800a55a <_dtoa_r+0xb6a>
 800a4ca:	ee18 1a10 	vmov	r1, s16
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	220a      	movs	r2, #10
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f000 f9f4 	bl	800a8c0 <__multadd>
 800a4d8:	45b8      	cmp	r8, r7
 800a4da:	ee08 0a10 	vmov	s16, r0
 800a4de:	f04f 0300 	mov.w	r3, #0
 800a4e2:	f04f 020a 	mov.w	r2, #10
 800a4e6:	4641      	mov	r1, r8
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	d106      	bne.n	800a4fa <_dtoa_r+0xb0a>
 800a4ec:	f000 f9e8 	bl	800a8c0 <__multadd>
 800a4f0:	4680      	mov	r8, r0
 800a4f2:	4607      	mov	r7, r0
 800a4f4:	f109 0901 	add.w	r9, r9, #1
 800a4f8:	e772      	b.n	800a3e0 <_dtoa_r+0x9f0>
 800a4fa:	f000 f9e1 	bl	800a8c0 <__multadd>
 800a4fe:	4639      	mov	r1, r7
 800a500:	4680      	mov	r8, r0
 800a502:	2300      	movs	r3, #0
 800a504:	220a      	movs	r2, #10
 800a506:	4620      	mov	r0, r4
 800a508:	f000 f9da 	bl	800a8c0 <__multadd>
 800a50c:	4607      	mov	r7, r0
 800a50e:	e7f1      	b.n	800a4f4 <_dtoa_r+0xb04>
 800a510:	9b03      	ldr	r3, [sp, #12]
 800a512:	9302      	str	r3, [sp, #8]
 800a514:	9d01      	ldr	r5, [sp, #4]
 800a516:	ee18 0a10 	vmov	r0, s16
 800a51a:	4631      	mov	r1, r6
 800a51c:	f7ff f9dc 	bl	80098d8 <quorem>
 800a520:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	f805 ab01 	strb.w	sl, [r5], #1
 800a52a:	1aea      	subs	r2, r5, r3
 800a52c:	9b02      	ldr	r3, [sp, #8]
 800a52e:	4293      	cmp	r3, r2
 800a530:	dd09      	ble.n	800a546 <_dtoa_r+0xb56>
 800a532:	ee18 1a10 	vmov	r1, s16
 800a536:	2300      	movs	r3, #0
 800a538:	220a      	movs	r2, #10
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 f9c0 	bl	800a8c0 <__multadd>
 800a540:	ee08 0a10 	vmov	s16, r0
 800a544:	e7e7      	b.n	800a516 <_dtoa_r+0xb26>
 800a546:	9b02      	ldr	r3, [sp, #8]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bfc8      	it	gt
 800a54c:	461d      	movgt	r5, r3
 800a54e:	9b01      	ldr	r3, [sp, #4]
 800a550:	bfd8      	it	le
 800a552:	2501      	movle	r5, #1
 800a554:	441d      	add	r5, r3
 800a556:	f04f 0800 	mov.w	r8, #0
 800a55a:	ee18 1a10 	vmov	r1, s16
 800a55e:	2201      	movs	r2, #1
 800a560:	4620      	mov	r0, r4
 800a562:	f000 fb5d 	bl	800ac20 <__lshift>
 800a566:	4631      	mov	r1, r6
 800a568:	ee08 0a10 	vmov	s16, r0
 800a56c:	f000 fbc8 	bl	800ad00 <__mcmp>
 800a570:	2800      	cmp	r0, #0
 800a572:	dc91      	bgt.n	800a498 <_dtoa_r+0xaa8>
 800a574:	d102      	bne.n	800a57c <_dtoa_r+0xb8c>
 800a576:	f01a 0f01 	tst.w	sl, #1
 800a57a:	d18d      	bne.n	800a498 <_dtoa_r+0xaa8>
 800a57c:	462b      	mov	r3, r5
 800a57e:	461d      	mov	r5, r3
 800a580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a584:	2a30      	cmp	r2, #48	; 0x30
 800a586:	d0fa      	beq.n	800a57e <_dtoa_r+0xb8e>
 800a588:	e6d7      	b.n	800a33a <_dtoa_r+0x94a>
 800a58a:	9a01      	ldr	r2, [sp, #4]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d184      	bne.n	800a49a <_dtoa_r+0xaaa>
 800a590:	9b00      	ldr	r3, [sp, #0]
 800a592:	3301      	adds	r3, #1
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	2331      	movs	r3, #49	; 0x31
 800a598:	7013      	strb	r3, [r2, #0]
 800a59a:	e6ce      	b.n	800a33a <_dtoa_r+0x94a>
 800a59c:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <_dtoa_r+0xbd4>)
 800a59e:	f7ff ba95 	b.w	8009acc <_dtoa_r+0xdc>
 800a5a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f47f aa6e 	bne.w	8009a86 <_dtoa_r+0x96>
 800a5aa:	4b07      	ldr	r3, [pc, #28]	; (800a5c8 <_dtoa_r+0xbd8>)
 800a5ac:	f7ff ba8e 	b.w	8009acc <_dtoa_r+0xdc>
 800a5b0:	9b02      	ldr	r3, [sp, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	dcae      	bgt.n	800a514 <_dtoa_r+0xb24>
 800a5b6:	9b06      	ldr	r3, [sp, #24]
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	f73f aea8 	bgt.w	800a30e <_dtoa_r+0x91e>
 800a5be:	e7a9      	b.n	800a514 <_dtoa_r+0xb24>
 800a5c0:	0800b957 	.word	0x0800b957
 800a5c4:	0800b8b4 	.word	0x0800b8b4
 800a5c8:	0800b8d8 	.word	0x0800b8d8

0800a5cc <std>:
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	b510      	push	{r4, lr}
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5da:	6083      	str	r3, [r0, #8]
 800a5dc:	8181      	strh	r1, [r0, #12]
 800a5de:	6643      	str	r3, [r0, #100]	; 0x64
 800a5e0:	81c2      	strh	r2, [r0, #14]
 800a5e2:	6183      	str	r3, [r0, #24]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	2208      	movs	r2, #8
 800a5e8:	305c      	adds	r0, #92	; 0x5c
 800a5ea:	f7fe fbfb 	bl	8008de4 <memset>
 800a5ee:	4b05      	ldr	r3, [pc, #20]	; (800a604 <std+0x38>)
 800a5f0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5f2:	4b05      	ldr	r3, [pc, #20]	; (800a608 <std+0x3c>)
 800a5f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5f6:	4b05      	ldr	r3, [pc, #20]	; (800a60c <std+0x40>)
 800a5f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5fa:	4b05      	ldr	r3, [pc, #20]	; (800a610 <std+0x44>)
 800a5fc:	6224      	str	r4, [r4, #32]
 800a5fe:	6323      	str	r3, [r4, #48]	; 0x30
 800a600:	bd10      	pop	{r4, pc}
 800a602:	bf00      	nop
 800a604:	0800b1e5 	.word	0x0800b1e5
 800a608:	0800b207 	.word	0x0800b207
 800a60c:	0800b23f 	.word	0x0800b23f
 800a610:	0800b263 	.word	0x0800b263

0800a614 <_cleanup_r>:
 800a614:	4901      	ldr	r1, [pc, #4]	; (800a61c <_cleanup_r+0x8>)
 800a616:	f000 b8af 	b.w	800a778 <_fwalk_reent>
 800a61a:	bf00      	nop
 800a61c:	0800b579 	.word	0x0800b579

0800a620 <__sfmoreglue>:
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	2268      	movs	r2, #104	; 0x68
 800a624:	1e4d      	subs	r5, r1, #1
 800a626:	4355      	muls	r5, r2
 800a628:	460e      	mov	r6, r1
 800a62a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a62e:	f7fe fc4d 	bl	8008ecc <_malloc_r>
 800a632:	4604      	mov	r4, r0
 800a634:	b140      	cbz	r0, 800a648 <__sfmoreglue+0x28>
 800a636:	2100      	movs	r1, #0
 800a638:	e9c0 1600 	strd	r1, r6, [r0]
 800a63c:	300c      	adds	r0, #12
 800a63e:	60a0      	str	r0, [r4, #8]
 800a640:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a644:	f7fe fbce 	bl	8008de4 <memset>
 800a648:	4620      	mov	r0, r4
 800a64a:	bd70      	pop	{r4, r5, r6, pc}

0800a64c <__sfp_lock_acquire>:
 800a64c:	4801      	ldr	r0, [pc, #4]	; (800a654 <__sfp_lock_acquire+0x8>)
 800a64e:	f000 b8b8 	b.w	800a7c2 <__retarget_lock_acquire_recursive>
 800a652:	bf00      	nop
 800a654:	20000a41 	.word	0x20000a41

0800a658 <__sfp_lock_release>:
 800a658:	4801      	ldr	r0, [pc, #4]	; (800a660 <__sfp_lock_release+0x8>)
 800a65a:	f000 b8b3 	b.w	800a7c4 <__retarget_lock_release_recursive>
 800a65e:	bf00      	nop
 800a660:	20000a41 	.word	0x20000a41

0800a664 <__sinit_lock_acquire>:
 800a664:	4801      	ldr	r0, [pc, #4]	; (800a66c <__sinit_lock_acquire+0x8>)
 800a666:	f000 b8ac 	b.w	800a7c2 <__retarget_lock_acquire_recursive>
 800a66a:	bf00      	nop
 800a66c:	20000a42 	.word	0x20000a42

0800a670 <__sinit_lock_release>:
 800a670:	4801      	ldr	r0, [pc, #4]	; (800a678 <__sinit_lock_release+0x8>)
 800a672:	f000 b8a7 	b.w	800a7c4 <__retarget_lock_release_recursive>
 800a676:	bf00      	nop
 800a678:	20000a42 	.word	0x20000a42

0800a67c <__sinit>:
 800a67c:	b510      	push	{r4, lr}
 800a67e:	4604      	mov	r4, r0
 800a680:	f7ff fff0 	bl	800a664 <__sinit_lock_acquire>
 800a684:	69a3      	ldr	r3, [r4, #24]
 800a686:	b11b      	cbz	r3, 800a690 <__sinit+0x14>
 800a688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a68c:	f7ff bff0 	b.w	800a670 <__sinit_lock_release>
 800a690:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a694:	6523      	str	r3, [r4, #80]	; 0x50
 800a696:	4b13      	ldr	r3, [pc, #76]	; (800a6e4 <__sinit+0x68>)
 800a698:	4a13      	ldr	r2, [pc, #76]	; (800a6e8 <__sinit+0x6c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a69e:	42a3      	cmp	r3, r4
 800a6a0:	bf04      	itt	eq
 800a6a2:	2301      	moveq	r3, #1
 800a6a4:	61a3      	streq	r3, [r4, #24]
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f000 f820 	bl	800a6ec <__sfp>
 800a6ac:	6060      	str	r0, [r4, #4]
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f000 f81c 	bl	800a6ec <__sfp>
 800a6b4:	60a0      	str	r0, [r4, #8]
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f000 f818 	bl	800a6ec <__sfp>
 800a6bc:	2200      	movs	r2, #0
 800a6be:	60e0      	str	r0, [r4, #12]
 800a6c0:	2104      	movs	r1, #4
 800a6c2:	6860      	ldr	r0, [r4, #4]
 800a6c4:	f7ff ff82 	bl	800a5cc <std>
 800a6c8:	68a0      	ldr	r0, [r4, #8]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	2109      	movs	r1, #9
 800a6ce:	f7ff ff7d 	bl	800a5cc <std>
 800a6d2:	68e0      	ldr	r0, [r4, #12]
 800a6d4:	2202      	movs	r2, #2
 800a6d6:	2112      	movs	r1, #18
 800a6d8:	f7ff ff78 	bl	800a5cc <std>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	61a3      	str	r3, [r4, #24]
 800a6e0:	e7d2      	b.n	800a688 <__sinit+0xc>
 800a6e2:	bf00      	nop
 800a6e4:	0800b8a0 	.word	0x0800b8a0
 800a6e8:	0800a615 	.word	0x0800a615

0800a6ec <__sfp>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	f7ff ffac 	bl	800a64c <__sfp_lock_acquire>
 800a6f4:	4b1e      	ldr	r3, [pc, #120]	; (800a770 <__sfp+0x84>)
 800a6f6:	681e      	ldr	r6, [r3, #0]
 800a6f8:	69b3      	ldr	r3, [r6, #24]
 800a6fa:	b913      	cbnz	r3, 800a702 <__sfp+0x16>
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f7ff ffbd 	bl	800a67c <__sinit>
 800a702:	3648      	adds	r6, #72	; 0x48
 800a704:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a708:	3b01      	subs	r3, #1
 800a70a:	d503      	bpl.n	800a714 <__sfp+0x28>
 800a70c:	6833      	ldr	r3, [r6, #0]
 800a70e:	b30b      	cbz	r3, 800a754 <__sfp+0x68>
 800a710:	6836      	ldr	r6, [r6, #0]
 800a712:	e7f7      	b.n	800a704 <__sfp+0x18>
 800a714:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a718:	b9d5      	cbnz	r5, 800a750 <__sfp+0x64>
 800a71a:	4b16      	ldr	r3, [pc, #88]	; (800a774 <__sfp+0x88>)
 800a71c:	60e3      	str	r3, [r4, #12]
 800a71e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a722:	6665      	str	r5, [r4, #100]	; 0x64
 800a724:	f000 f84c 	bl	800a7c0 <__retarget_lock_init_recursive>
 800a728:	f7ff ff96 	bl	800a658 <__sfp_lock_release>
 800a72c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a730:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a734:	6025      	str	r5, [r4, #0]
 800a736:	61a5      	str	r5, [r4, #24]
 800a738:	2208      	movs	r2, #8
 800a73a:	4629      	mov	r1, r5
 800a73c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a740:	f7fe fb50 	bl	8008de4 <memset>
 800a744:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a748:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a74c:	4620      	mov	r0, r4
 800a74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a750:	3468      	adds	r4, #104	; 0x68
 800a752:	e7d9      	b.n	800a708 <__sfp+0x1c>
 800a754:	2104      	movs	r1, #4
 800a756:	4638      	mov	r0, r7
 800a758:	f7ff ff62 	bl	800a620 <__sfmoreglue>
 800a75c:	4604      	mov	r4, r0
 800a75e:	6030      	str	r0, [r6, #0]
 800a760:	2800      	cmp	r0, #0
 800a762:	d1d5      	bne.n	800a710 <__sfp+0x24>
 800a764:	f7ff ff78 	bl	800a658 <__sfp_lock_release>
 800a768:	230c      	movs	r3, #12
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	e7ee      	b.n	800a74c <__sfp+0x60>
 800a76e:	bf00      	nop
 800a770:	0800b8a0 	.word	0x0800b8a0
 800a774:	ffff0001 	.word	0xffff0001

0800a778 <_fwalk_reent>:
 800a778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a77c:	4606      	mov	r6, r0
 800a77e:	4688      	mov	r8, r1
 800a780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a784:	2700      	movs	r7, #0
 800a786:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a78a:	f1b9 0901 	subs.w	r9, r9, #1
 800a78e:	d505      	bpl.n	800a79c <_fwalk_reent+0x24>
 800a790:	6824      	ldr	r4, [r4, #0]
 800a792:	2c00      	cmp	r4, #0
 800a794:	d1f7      	bne.n	800a786 <_fwalk_reent+0xe>
 800a796:	4638      	mov	r0, r7
 800a798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a79c:	89ab      	ldrh	r3, [r5, #12]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d907      	bls.n	800a7b2 <_fwalk_reent+0x3a>
 800a7a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	d003      	beq.n	800a7b2 <_fwalk_reent+0x3a>
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	47c0      	blx	r8
 800a7b0:	4307      	orrs	r7, r0
 800a7b2:	3568      	adds	r5, #104	; 0x68
 800a7b4:	e7e9      	b.n	800a78a <_fwalk_reent+0x12>
	...

0800a7b8 <_localeconv_r>:
 800a7b8:	4800      	ldr	r0, [pc, #0]	; (800a7bc <_localeconv_r+0x4>)
 800a7ba:	4770      	bx	lr
 800a7bc:	20000180 	.word	0x20000180

0800a7c0 <__retarget_lock_init_recursive>:
 800a7c0:	4770      	bx	lr

0800a7c2 <__retarget_lock_acquire_recursive>:
 800a7c2:	4770      	bx	lr

0800a7c4 <__retarget_lock_release_recursive>:
 800a7c4:	4770      	bx	lr

0800a7c6 <memcpy>:
 800a7c6:	440a      	add	r2, r1
 800a7c8:	4291      	cmp	r1, r2
 800a7ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a7ce:	d100      	bne.n	800a7d2 <memcpy+0xc>
 800a7d0:	4770      	bx	lr
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7dc:	4291      	cmp	r1, r2
 800a7de:	d1f9      	bne.n	800a7d4 <memcpy+0xe>
 800a7e0:	bd10      	pop	{r4, pc}
	...

0800a7e4 <__malloc_lock>:
 800a7e4:	4801      	ldr	r0, [pc, #4]	; (800a7ec <__malloc_lock+0x8>)
 800a7e6:	f7ff bfec 	b.w	800a7c2 <__retarget_lock_acquire_recursive>
 800a7ea:	bf00      	nop
 800a7ec:	20000a40 	.word	0x20000a40

0800a7f0 <__malloc_unlock>:
 800a7f0:	4801      	ldr	r0, [pc, #4]	; (800a7f8 <__malloc_unlock+0x8>)
 800a7f2:	f7ff bfe7 	b.w	800a7c4 <__retarget_lock_release_recursive>
 800a7f6:	bf00      	nop
 800a7f8:	20000a40 	.word	0x20000a40

0800a7fc <_Balloc>:
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a800:	4604      	mov	r4, r0
 800a802:	460d      	mov	r5, r1
 800a804:	b976      	cbnz	r6, 800a824 <_Balloc+0x28>
 800a806:	2010      	movs	r0, #16
 800a808:	f7fe fadc 	bl	8008dc4 <malloc>
 800a80c:	4602      	mov	r2, r0
 800a80e:	6260      	str	r0, [r4, #36]	; 0x24
 800a810:	b920      	cbnz	r0, 800a81c <_Balloc+0x20>
 800a812:	4b18      	ldr	r3, [pc, #96]	; (800a874 <_Balloc+0x78>)
 800a814:	4818      	ldr	r0, [pc, #96]	; (800a878 <_Balloc+0x7c>)
 800a816:	2166      	movs	r1, #102	; 0x66
 800a818:	f000 fdfa 	bl	800b410 <__assert_func>
 800a81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a820:	6006      	str	r6, [r0, #0]
 800a822:	60c6      	str	r6, [r0, #12]
 800a824:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a826:	68f3      	ldr	r3, [r6, #12]
 800a828:	b183      	cbz	r3, 800a84c <_Balloc+0x50>
 800a82a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a832:	b9b8      	cbnz	r0, 800a864 <_Balloc+0x68>
 800a834:	2101      	movs	r1, #1
 800a836:	fa01 f605 	lsl.w	r6, r1, r5
 800a83a:	1d72      	adds	r2, r6, #5
 800a83c:	0092      	lsls	r2, r2, #2
 800a83e:	4620      	mov	r0, r4
 800a840:	f000 fb60 	bl	800af04 <_calloc_r>
 800a844:	b160      	cbz	r0, 800a860 <_Balloc+0x64>
 800a846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a84a:	e00e      	b.n	800a86a <_Balloc+0x6e>
 800a84c:	2221      	movs	r2, #33	; 0x21
 800a84e:	2104      	movs	r1, #4
 800a850:	4620      	mov	r0, r4
 800a852:	f000 fb57 	bl	800af04 <_calloc_r>
 800a856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a858:	60f0      	str	r0, [r6, #12]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e4      	bne.n	800a82a <_Balloc+0x2e>
 800a860:	2000      	movs	r0, #0
 800a862:	bd70      	pop	{r4, r5, r6, pc}
 800a864:	6802      	ldr	r2, [r0, #0]
 800a866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a86a:	2300      	movs	r3, #0
 800a86c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a870:	e7f7      	b.n	800a862 <_Balloc+0x66>
 800a872:	bf00      	nop
 800a874:	0800b8e5 	.word	0x0800b8e5
 800a878:	0800b9c8 	.word	0x0800b9c8

0800a87c <_Bfree>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a880:	4605      	mov	r5, r0
 800a882:	460c      	mov	r4, r1
 800a884:	b976      	cbnz	r6, 800a8a4 <_Bfree+0x28>
 800a886:	2010      	movs	r0, #16
 800a888:	f7fe fa9c 	bl	8008dc4 <malloc>
 800a88c:	4602      	mov	r2, r0
 800a88e:	6268      	str	r0, [r5, #36]	; 0x24
 800a890:	b920      	cbnz	r0, 800a89c <_Bfree+0x20>
 800a892:	4b09      	ldr	r3, [pc, #36]	; (800a8b8 <_Bfree+0x3c>)
 800a894:	4809      	ldr	r0, [pc, #36]	; (800a8bc <_Bfree+0x40>)
 800a896:	218a      	movs	r1, #138	; 0x8a
 800a898:	f000 fdba 	bl	800b410 <__assert_func>
 800a89c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8a0:	6006      	str	r6, [r0, #0]
 800a8a2:	60c6      	str	r6, [r0, #12]
 800a8a4:	b13c      	cbz	r4, 800a8b6 <_Bfree+0x3a>
 800a8a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8a8:	6862      	ldr	r2, [r4, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8b0:	6021      	str	r1, [r4, #0]
 800a8b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	0800b8e5 	.word	0x0800b8e5
 800a8bc:	0800b9c8 	.word	0x0800b9c8

0800a8c0 <__multadd>:
 800a8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c4:	690d      	ldr	r5, [r1, #16]
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	461e      	mov	r6, r3
 800a8cc:	f101 0c14 	add.w	ip, r1, #20
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	f8dc 3000 	ldr.w	r3, [ip]
 800a8d6:	b299      	uxth	r1, r3
 800a8d8:	fb02 6101 	mla	r1, r2, r1, r6
 800a8dc:	0c1e      	lsrs	r6, r3, #16
 800a8de:	0c0b      	lsrs	r3, r1, #16
 800a8e0:	fb02 3306 	mla	r3, r2, r6, r3
 800a8e4:	b289      	uxth	r1, r1
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8ec:	4285      	cmp	r5, r0
 800a8ee:	f84c 1b04 	str.w	r1, [ip], #4
 800a8f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8f6:	dcec      	bgt.n	800a8d2 <__multadd+0x12>
 800a8f8:	b30e      	cbz	r6, 800a93e <__multadd+0x7e>
 800a8fa:	68a3      	ldr	r3, [r4, #8]
 800a8fc:	42ab      	cmp	r3, r5
 800a8fe:	dc19      	bgt.n	800a934 <__multadd+0x74>
 800a900:	6861      	ldr	r1, [r4, #4]
 800a902:	4638      	mov	r0, r7
 800a904:	3101      	adds	r1, #1
 800a906:	f7ff ff79 	bl	800a7fc <_Balloc>
 800a90a:	4680      	mov	r8, r0
 800a90c:	b928      	cbnz	r0, 800a91a <__multadd+0x5a>
 800a90e:	4602      	mov	r2, r0
 800a910:	4b0c      	ldr	r3, [pc, #48]	; (800a944 <__multadd+0x84>)
 800a912:	480d      	ldr	r0, [pc, #52]	; (800a948 <__multadd+0x88>)
 800a914:	21b5      	movs	r1, #181	; 0xb5
 800a916:	f000 fd7b 	bl	800b410 <__assert_func>
 800a91a:	6922      	ldr	r2, [r4, #16]
 800a91c:	3202      	adds	r2, #2
 800a91e:	f104 010c 	add.w	r1, r4, #12
 800a922:	0092      	lsls	r2, r2, #2
 800a924:	300c      	adds	r0, #12
 800a926:	f7ff ff4e 	bl	800a7c6 <memcpy>
 800a92a:	4621      	mov	r1, r4
 800a92c:	4638      	mov	r0, r7
 800a92e:	f7ff ffa5 	bl	800a87c <_Bfree>
 800a932:	4644      	mov	r4, r8
 800a934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a938:	3501      	adds	r5, #1
 800a93a:	615e      	str	r6, [r3, #20]
 800a93c:	6125      	str	r5, [r4, #16]
 800a93e:	4620      	mov	r0, r4
 800a940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a944:	0800b957 	.word	0x0800b957
 800a948:	0800b9c8 	.word	0x0800b9c8

0800a94c <__hi0bits>:
 800a94c:	0c03      	lsrs	r3, r0, #16
 800a94e:	041b      	lsls	r3, r3, #16
 800a950:	b9d3      	cbnz	r3, 800a988 <__hi0bits+0x3c>
 800a952:	0400      	lsls	r0, r0, #16
 800a954:	2310      	movs	r3, #16
 800a956:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a95a:	bf04      	itt	eq
 800a95c:	0200      	lsleq	r0, r0, #8
 800a95e:	3308      	addeq	r3, #8
 800a960:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a964:	bf04      	itt	eq
 800a966:	0100      	lsleq	r0, r0, #4
 800a968:	3304      	addeq	r3, #4
 800a96a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a96e:	bf04      	itt	eq
 800a970:	0080      	lsleq	r0, r0, #2
 800a972:	3302      	addeq	r3, #2
 800a974:	2800      	cmp	r0, #0
 800a976:	db05      	blt.n	800a984 <__hi0bits+0x38>
 800a978:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a97c:	f103 0301 	add.w	r3, r3, #1
 800a980:	bf08      	it	eq
 800a982:	2320      	moveq	r3, #32
 800a984:	4618      	mov	r0, r3
 800a986:	4770      	bx	lr
 800a988:	2300      	movs	r3, #0
 800a98a:	e7e4      	b.n	800a956 <__hi0bits+0xa>

0800a98c <__lo0bits>:
 800a98c:	6803      	ldr	r3, [r0, #0]
 800a98e:	f013 0207 	ands.w	r2, r3, #7
 800a992:	4601      	mov	r1, r0
 800a994:	d00b      	beq.n	800a9ae <__lo0bits+0x22>
 800a996:	07da      	lsls	r2, r3, #31
 800a998:	d423      	bmi.n	800a9e2 <__lo0bits+0x56>
 800a99a:	0798      	lsls	r0, r3, #30
 800a99c:	bf49      	itett	mi
 800a99e:	085b      	lsrmi	r3, r3, #1
 800a9a0:	089b      	lsrpl	r3, r3, #2
 800a9a2:	2001      	movmi	r0, #1
 800a9a4:	600b      	strmi	r3, [r1, #0]
 800a9a6:	bf5c      	itt	pl
 800a9a8:	600b      	strpl	r3, [r1, #0]
 800a9aa:	2002      	movpl	r0, #2
 800a9ac:	4770      	bx	lr
 800a9ae:	b298      	uxth	r0, r3
 800a9b0:	b9a8      	cbnz	r0, 800a9de <__lo0bits+0x52>
 800a9b2:	0c1b      	lsrs	r3, r3, #16
 800a9b4:	2010      	movs	r0, #16
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	b90a      	cbnz	r2, 800a9be <__lo0bits+0x32>
 800a9ba:	3008      	adds	r0, #8
 800a9bc:	0a1b      	lsrs	r3, r3, #8
 800a9be:	071a      	lsls	r2, r3, #28
 800a9c0:	bf04      	itt	eq
 800a9c2:	091b      	lsreq	r3, r3, #4
 800a9c4:	3004      	addeq	r0, #4
 800a9c6:	079a      	lsls	r2, r3, #30
 800a9c8:	bf04      	itt	eq
 800a9ca:	089b      	lsreq	r3, r3, #2
 800a9cc:	3002      	addeq	r0, #2
 800a9ce:	07da      	lsls	r2, r3, #31
 800a9d0:	d403      	bmi.n	800a9da <__lo0bits+0x4e>
 800a9d2:	085b      	lsrs	r3, r3, #1
 800a9d4:	f100 0001 	add.w	r0, r0, #1
 800a9d8:	d005      	beq.n	800a9e6 <__lo0bits+0x5a>
 800a9da:	600b      	str	r3, [r1, #0]
 800a9dc:	4770      	bx	lr
 800a9de:	4610      	mov	r0, r2
 800a9e0:	e7e9      	b.n	800a9b6 <__lo0bits+0x2a>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	4770      	bx	lr
 800a9e6:	2020      	movs	r0, #32
 800a9e8:	4770      	bx	lr
	...

0800a9ec <__i2b>:
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	f7ff ff03 	bl	800a7fc <_Balloc>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	b928      	cbnz	r0, 800aa06 <__i2b+0x1a>
 800a9fa:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <__i2b+0x24>)
 800a9fc:	4805      	ldr	r0, [pc, #20]	; (800aa14 <__i2b+0x28>)
 800a9fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa02:	f000 fd05 	bl	800b410 <__assert_func>
 800aa06:	2301      	movs	r3, #1
 800aa08:	6144      	str	r4, [r0, #20]
 800aa0a:	6103      	str	r3, [r0, #16]
 800aa0c:	bd10      	pop	{r4, pc}
 800aa0e:	bf00      	nop
 800aa10:	0800b957 	.word	0x0800b957
 800aa14:	0800b9c8 	.word	0x0800b9c8

0800aa18 <__multiply>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	4691      	mov	r9, r2
 800aa1e:	690a      	ldr	r2, [r1, #16]
 800aa20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	bfb8      	it	lt
 800aa28:	460b      	movlt	r3, r1
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	bfbc      	itt	lt
 800aa2e:	464c      	movlt	r4, r9
 800aa30:	4699      	movlt	r9, r3
 800aa32:	6927      	ldr	r7, [r4, #16]
 800aa34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa38:	68a3      	ldr	r3, [r4, #8]
 800aa3a:	6861      	ldr	r1, [r4, #4]
 800aa3c:	eb07 060a 	add.w	r6, r7, sl
 800aa40:	42b3      	cmp	r3, r6
 800aa42:	b085      	sub	sp, #20
 800aa44:	bfb8      	it	lt
 800aa46:	3101      	addlt	r1, #1
 800aa48:	f7ff fed8 	bl	800a7fc <_Balloc>
 800aa4c:	b930      	cbnz	r0, 800aa5c <__multiply+0x44>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	4b44      	ldr	r3, [pc, #272]	; (800ab64 <__multiply+0x14c>)
 800aa52:	4845      	ldr	r0, [pc, #276]	; (800ab68 <__multiply+0x150>)
 800aa54:	f240 115d 	movw	r1, #349	; 0x15d
 800aa58:	f000 fcda 	bl	800b410 <__assert_func>
 800aa5c:	f100 0514 	add.w	r5, r0, #20
 800aa60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa64:	462b      	mov	r3, r5
 800aa66:	2200      	movs	r2, #0
 800aa68:	4543      	cmp	r3, r8
 800aa6a:	d321      	bcc.n	800aab0 <__multiply+0x98>
 800aa6c:	f104 0314 	add.w	r3, r4, #20
 800aa70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa74:	f109 0314 	add.w	r3, r9, #20
 800aa78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa7c:	9202      	str	r2, [sp, #8]
 800aa7e:	1b3a      	subs	r2, r7, r4
 800aa80:	3a15      	subs	r2, #21
 800aa82:	f022 0203 	bic.w	r2, r2, #3
 800aa86:	3204      	adds	r2, #4
 800aa88:	f104 0115 	add.w	r1, r4, #21
 800aa8c:	428f      	cmp	r7, r1
 800aa8e:	bf38      	it	cc
 800aa90:	2204      	movcc	r2, #4
 800aa92:	9201      	str	r2, [sp, #4]
 800aa94:	9a02      	ldr	r2, [sp, #8]
 800aa96:	9303      	str	r3, [sp, #12]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d80c      	bhi.n	800aab6 <__multiply+0x9e>
 800aa9c:	2e00      	cmp	r6, #0
 800aa9e:	dd03      	ble.n	800aaa8 <__multiply+0x90>
 800aaa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d05a      	beq.n	800ab5e <__multiply+0x146>
 800aaa8:	6106      	str	r6, [r0, #16]
 800aaaa:	b005      	add	sp, #20
 800aaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab0:	f843 2b04 	str.w	r2, [r3], #4
 800aab4:	e7d8      	b.n	800aa68 <__multiply+0x50>
 800aab6:	f8b3 a000 	ldrh.w	sl, [r3]
 800aaba:	f1ba 0f00 	cmp.w	sl, #0
 800aabe:	d024      	beq.n	800ab0a <__multiply+0xf2>
 800aac0:	f104 0e14 	add.w	lr, r4, #20
 800aac4:	46a9      	mov	r9, r5
 800aac6:	f04f 0c00 	mov.w	ip, #0
 800aaca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aace:	f8d9 1000 	ldr.w	r1, [r9]
 800aad2:	fa1f fb82 	uxth.w	fp, r2
 800aad6:	b289      	uxth	r1, r1
 800aad8:	fb0a 110b 	mla	r1, sl, fp, r1
 800aadc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aae0:	f8d9 2000 	ldr.w	r2, [r9]
 800aae4:	4461      	add	r1, ip
 800aae6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaea:	fb0a c20b 	mla	r2, sl, fp, ip
 800aaee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aaf2:	b289      	uxth	r1, r1
 800aaf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aaf8:	4577      	cmp	r7, lr
 800aafa:	f849 1b04 	str.w	r1, [r9], #4
 800aafe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab02:	d8e2      	bhi.n	800aaca <__multiply+0xb2>
 800ab04:	9a01      	ldr	r2, [sp, #4]
 800ab06:	f845 c002 	str.w	ip, [r5, r2]
 800ab0a:	9a03      	ldr	r2, [sp, #12]
 800ab0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab10:	3304      	adds	r3, #4
 800ab12:	f1b9 0f00 	cmp.w	r9, #0
 800ab16:	d020      	beq.n	800ab5a <__multiply+0x142>
 800ab18:	6829      	ldr	r1, [r5, #0]
 800ab1a:	f104 0c14 	add.w	ip, r4, #20
 800ab1e:	46ae      	mov	lr, r5
 800ab20:	f04f 0a00 	mov.w	sl, #0
 800ab24:	f8bc b000 	ldrh.w	fp, [ip]
 800ab28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab2c:	fb09 220b 	mla	r2, r9, fp, r2
 800ab30:	4492      	add	sl, r2
 800ab32:	b289      	uxth	r1, r1
 800ab34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab38:	f84e 1b04 	str.w	r1, [lr], #4
 800ab3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab40:	f8be 1000 	ldrh.w	r1, [lr]
 800ab44:	0c12      	lsrs	r2, r2, #16
 800ab46:	fb09 1102 	mla	r1, r9, r2, r1
 800ab4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab4e:	4567      	cmp	r7, ip
 800ab50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab54:	d8e6      	bhi.n	800ab24 <__multiply+0x10c>
 800ab56:	9a01      	ldr	r2, [sp, #4]
 800ab58:	50a9      	str	r1, [r5, r2]
 800ab5a:	3504      	adds	r5, #4
 800ab5c:	e79a      	b.n	800aa94 <__multiply+0x7c>
 800ab5e:	3e01      	subs	r6, #1
 800ab60:	e79c      	b.n	800aa9c <__multiply+0x84>
 800ab62:	bf00      	nop
 800ab64:	0800b957 	.word	0x0800b957
 800ab68:	0800b9c8 	.word	0x0800b9c8

0800ab6c <__pow5mult>:
 800ab6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab70:	4615      	mov	r5, r2
 800ab72:	f012 0203 	ands.w	r2, r2, #3
 800ab76:	4606      	mov	r6, r0
 800ab78:	460f      	mov	r7, r1
 800ab7a:	d007      	beq.n	800ab8c <__pow5mult+0x20>
 800ab7c:	4c25      	ldr	r4, [pc, #148]	; (800ac14 <__pow5mult+0xa8>)
 800ab7e:	3a01      	subs	r2, #1
 800ab80:	2300      	movs	r3, #0
 800ab82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab86:	f7ff fe9b 	bl	800a8c0 <__multadd>
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	10ad      	asrs	r5, r5, #2
 800ab8e:	d03d      	beq.n	800ac0c <__pow5mult+0xa0>
 800ab90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab92:	b97c      	cbnz	r4, 800abb4 <__pow5mult+0x48>
 800ab94:	2010      	movs	r0, #16
 800ab96:	f7fe f915 	bl	8008dc4 <malloc>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	6270      	str	r0, [r6, #36]	; 0x24
 800ab9e:	b928      	cbnz	r0, 800abac <__pow5mult+0x40>
 800aba0:	4b1d      	ldr	r3, [pc, #116]	; (800ac18 <__pow5mult+0xac>)
 800aba2:	481e      	ldr	r0, [pc, #120]	; (800ac1c <__pow5mult+0xb0>)
 800aba4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aba8:	f000 fc32 	bl	800b410 <__assert_func>
 800abac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abb0:	6004      	str	r4, [r0, #0]
 800abb2:	60c4      	str	r4, [r0, #12]
 800abb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800abb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abbc:	b94c      	cbnz	r4, 800abd2 <__pow5mult+0x66>
 800abbe:	f240 2171 	movw	r1, #625	; 0x271
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7ff ff12 	bl	800a9ec <__i2b>
 800abc8:	2300      	movs	r3, #0
 800abca:	f8c8 0008 	str.w	r0, [r8, #8]
 800abce:	4604      	mov	r4, r0
 800abd0:	6003      	str	r3, [r0, #0]
 800abd2:	f04f 0900 	mov.w	r9, #0
 800abd6:	07eb      	lsls	r3, r5, #31
 800abd8:	d50a      	bpl.n	800abf0 <__pow5mult+0x84>
 800abda:	4639      	mov	r1, r7
 800abdc:	4622      	mov	r2, r4
 800abde:	4630      	mov	r0, r6
 800abe0:	f7ff ff1a 	bl	800aa18 <__multiply>
 800abe4:	4639      	mov	r1, r7
 800abe6:	4680      	mov	r8, r0
 800abe8:	4630      	mov	r0, r6
 800abea:	f7ff fe47 	bl	800a87c <_Bfree>
 800abee:	4647      	mov	r7, r8
 800abf0:	106d      	asrs	r5, r5, #1
 800abf2:	d00b      	beq.n	800ac0c <__pow5mult+0xa0>
 800abf4:	6820      	ldr	r0, [r4, #0]
 800abf6:	b938      	cbnz	r0, 800ac08 <__pow5mult+0x9c>
 800abf8:	4622      	mov	r2, r4
 800abfa:	4621      	mov	r1, r4
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7ff ff0b 	bl	800aa18 <__multiply>
 800ac02:	6020      	str	r0, [r4, #0]
 800ac04:	f8c0 9000 	str.w	r9, [r0]
 800ac08:	4604      	mov	r4, r0
 800ac0a:	e7e4      	b.n	800abd6 <__pow5mult+0x6a>
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac12:	bf00      	nop
 800ac14:	0800bb18 	.word	0x0800bb18
 800ac18:	0800b8e5 	.word	0x0800b8e5
 800ac1c:	0800b9c8 	.word	0x0800b9c8

0800ac20 <__lshift>:
 800ac20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac24:	460c      	mov	r4, r1
 800ac26:	6849      	ldr	r1, [r1, #4]
 800ac28:	6923      	ldr	r3, [r4, #16]
 800ac2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac2e:	68a3      	ldr	r3, [r4, #8]
 800ac30:	4607      	mov	r7, r0
 800ac32:	4691      	mov	r9, r2
 800ac34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac38:	f108 0601 	add.w	r6, r8, #1
 800ac3c:	42b3      	cmp	r3, r6
 800ac3e:	db0b      	blt.n	800ac58 <__lshift+0x38>
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7ff fddb 	bl	800a7fc <_Balloc>
 800ac46:	4605      	mov	r5, r0
 800ac48:	b948      	cbnz	r0, 800ac5e <__lshift+0x3e>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	4b2a      	ldr	r3, [pc, #168]	; (800acf8 <__lshift+0xd8>)
 800ac4e:	482b      	ldr	r0, [pc, #172]	; (800acfc <__lshift+0xdc>)
 800ac50:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac54:	f000 fbdc 	bl	800b410 <__assert_func>
 800ac58:	3101      	adds	r1, #1
 800ac5a:	005b      	lsls	r3, r3, #1
 800ac5c:	e7ee      	b.n	800ac3c <__lshift+0x1c>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f100 0114 	add.w	r1, r0, #20
 800ac64:	f100 0210 	add.w	r2, r0, #16
 800ac68:	4618      	mov	r0, r3
 800ac6a:	4553      	cmp	r3, sl
 800ac6c:	db37      	blt.n	800acde <__lshift+0xbe>
 800ac6e:	6920      	ldr	r0, [r4, #16]
 800ac70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac74:	f104 0314 	add.w	r3, r4, #20
 800ac78:	f019 091f 	ands.w	r9, r9, #31
 800ac7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac84:	d02f      	beq.n	800ace6 <__lshift+0xc6>
 800ac86:	f1c9 0e20 	rsb	lr, r9, #32
 800ac8a:	468a      	mov	sl, r1
 800ac8c:	f04f 0c00 	mov.w	ip, #0
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	fa02 f209 	lsl.w	r2, r2, r9
 800ac96:	ea42 020c 	orr.w	r2, r2, ip
 800ac9a:	f84a 2b04 	str.w	r2, [sl], #4
 800ac9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aca2:	4298      	cmp	r0, r3
 800aca4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aca8:	d8f2      	bhi.n	800ac90 <__lshift+0x70>
 800acaa:	1b03      	subs	r3, r0, r4
 800acac:	3b15      	subs	r3, #21
 800acae:	f023 0303 	bic.w	r3, r3, #3
 800acb2:	3304      	adds	r3, #4
 800acb4:	f104 0215 	add.w	r2, r4, #21
 800acb8:	4290      	cmp	r0, r2
 800acba:	bf38      	it	cc
 800acbc:	2304      	movcc	r3, #4
 800acbe:	f841 c003 	str.w	ip, [r1, r3]
 800acc2:	f1bc 0f00 	cmp.w	ip, #0
 800acc6:	d001      	beq.n	800accc <__lshift+0xac>
 800acc8:	f108 0602 	add.w	r6, r8, #2
 800accc:	3e01      	subs	r6, #1
 800acce:	4638      	mov	r0, r7
 800acd0:	612e      	str	r6, [r5, #16]
 800acd2:	4621      	mov	r1, r4
 800acd4:	f7ff fdd2 	bl	800a87c <_Bfree>
 800acd8:	4628      	mov	r0, r5
 800acda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acde:	f842 0f04 	str.w	r0, [r2, #4]!
 800ace2:	3301      	adds	r3, #1
 800ace4:	e7c1      	b.n	800ac6a <__lshift+0x4a>
 800ace6:	3904      	subs	r1, #4
 800ace8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acec:	f841 2f04 	str.w	r2, [r1, #4]!
 800acf0:	4298      	cmp	r0, r3
 800acf2:	d8f9      	bhi.n	800ace8 <__lshift+0xc8>
 800acf4:	e7ea      	b.n	800accc <__lshift+0xac>
 800acf6:	bf00      	nop
 800acf8:	0800b957 	.word	0x0800b957
 800acfc:	0800b9c8 	.word	0x0800b9c8

0800ad00 <__mcmp>:
 800ad00:	b530      	push	{r4, r5, lr}
 800ad02:	6902      	ldr	r2, [r0, #16]
 800ad04:	690c      	ldr	r4, [r1, #16]
 800ad06:	1b12      	subs	r2, r2, r4
 800ad08:	d10e      	bne.n	800ad28 <__mcmp+0x28>
 800ad0a:	f100 0314 	add.w	r3, r0, #20
 800ad0e:	3114      	adds	r1, #20
 800ad10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad20:	42a5      	cmp	r5, r4
 800ad22:	d003      	beq.n	800ad2c <__mcmp+0x2c>
 800ad24:	d305      	bcc.n	800ad32 <__mcmp+0x32>
 800ad26:	2201      	movs	r2, #1
 800ad28:	4610      	mov	r0, r2
 800ad2a:	bd30      	pop	{r4, r5, pc}
 800ad2c:	4283      	cmp	r3, r0
 800ad2e:	d3f3      	bcc.n	800ad18 <__mcmp+0x18>
 800ad30:	e7fa      	b.n	800ad28 <__mcmp+0x28>
 800ad32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad36:	e7f7      	b.n	800ad28 <__mcmp+0x28>

0800ad38 <__mdiff>:
 800ad38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	4606      	mov	r6, r0
 800ad40:	4611      	mov	r1, r2
 800ad42:	4620      	mov	r0, r4
 800ad44:	4690      	mov	r8, r2
 800ad46:	f7ff ffdb 	bl	800ad00 <__mcmp>
 800ad4a:	1e05      	subs	r5, r0, #0
 800ad4c:	d110      	bne.n	800ad70 <__mdiff+0x38>
 800ad4e:	4629      	mov	r1, r5
 800ad50:	4630      	mov	r0, r6
 800ad52:	f7ff fd53 	bl	800a7fc <_Balloc>
 800ad56:	b930      	cbnz	r0, 800ad66 <__mdiff+0x2e>
 800ad58:	4b3a      	ldr	r3, [pc, #232]	; (800ae44 <__mdiff+0x10c>)
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	f240 2132 	movw	r1, #562	; 0x232
 800ad60:	4839      	ldr	r0, [pc, #228]	; (800ae48 <__mdiff+0x110>)
 800ad62:	f000 fb55 	bl	800b410 <__assert_func>
 800ad66:	2301      	movs	r3, #1
 800ad68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad70:	bfa4      	itt	ge
 800ad72:	4643      	movge	r3, r8
 800ad74:	46a0      	movge	r8, r4
 800ad76:	4630      	mov	r0, r6
 800ad78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad7c:	bfa6      	itte	ge
 800ad7e:	461c      	movge	r4, r3
 800ad80:	2500      	movge	r5, #0
 800ad82:	2501      	movlt	r5, #1
 800ad84:	f7ff fd3a 	bl	800a7fc <_Balloc>
 800ad88:	b920      	cbnz	r0, 800ad94 <__mdiff+0x5c>
 800ad8a:	4b2e      	ldr	r3, [pc, #184]	; (800ae44 <__mdiff+0x10c>)
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad92:	e7e5      	b.n	800ad60 <__mdiff+0x28>
 800ad94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad98:	6926      	ldr	r6, [r4, #16]
 800ad9a:	60c5      	str	r5, [r0, #12]
 800ad9c:	f104 0914 	add.w	r9, r4, #20
 800ada0:	f108 0514 	add.w	r5, r8, #20
 800ada4:	f100 0e14 	add.w	lr, r0, #20
 800ada8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800adac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800adb0:	f108 0210 	add.w	r2, r8, #16
 800adb4:	46f2      	mov	sl, lr
 800adb6:	2100      	movs	r1, #0
 800adb8:	f859 3b04 	ldr.w	r3, [r9], #4
 800adbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800adc0:	fa1f f883 	uxth.w	r8, r3
 800adc4:	fa11 f18b 	uxtah	r1, r1, fp
 800adc8:	0c1b      	lsrs	r3, r3, #16
 800adca:	eba1 0808 	sub.w	r8, r1, r8
 800adce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800add2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800add6:	fa1f f888 	uxth.w	r8, r8
 800adda:	1419      	asrs	r1, r3, #16
 800addc:	454e      	cmp	r6, r9
 800adde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ade2:	f84a 3b04 	str.w	r3, [sl], #4
 800ade6:	d8e7      	bhi.n	800adb8 <__mdiff+0x80>
 800ade8:	1b33      	subs	r3, r6, r4
 800adea:	3b15      	subs	r3, #21
 800adec:	f023 0303 	bic.w	r3, r3, #3
 800adf0:	3304      	adds	r3, #4
 800adf2:	3415      	adds	r4, #21
 800adf4:	42a6      	cmp	r6, r4
 800adf6:	bf38      	it	cc
 800adf8:	2304      	movcc	r3, #4
 800adfa:	441d      	add	r5, r3
 800adfc:	4473      	add	r3, lr
 800adfe:	469e      	mov	lr, r3
 800ae00:	462e      	mov	r6, r5
 800ae02:	4566      	cmp	r6, ip
 800ae04:	d30e      	bcc.n	800ae24 <__mdiff+0xec>
 800ae06:	f10c 0203 	add.w	r2, ip, #3
 800ae0a:	1b52      	subs	r2, r2, r5
 800ae0c:	f022 0203 	bic.w	r2, r2, #3
 800ae10:	3d03      	subs	r5, #3
 800ae12:	45ac      	cmp	ip, r5
 800ae14:	bf38      	it	cc
 800ae16:	2200      	movcc	r2, #0
 800ae18:	441a      	add	r2, r3
 800ae1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae1e:	b17b      	cbz	r3, 800ae40 <__mdiff+0x108>
 800ae20:	6107      	str	r7, [r0, #16]
 800ae22:	e7a3      	b.n	800ad6c <__mdiff+0x34>
 800ae24:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae28:	fa11 f288 	uxtah	r2, r1, r8
 800ae2c:	1414      	asrs	r4, r2, #16
 800ae2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae32:	b292      	uxth	r2, r2
 800ae34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae38:	f84e 2b04 	str.w	r2, [lr], #4
 800ae3c:	1421      	asrs	r1, r4, #16
 800ae3e:	e7e0      	b.n	800ae02 <__mdiff+0xca>
 800ae40:	3f01      	subs	r7, #1
 800ae42:	e7ea      	b.n	800ae1a <__mdiff+0xe2>
 800ae44:	0800b957 	.word	0x0800b957
 800ae48:	0800b9c8 	.word	0x0800b9c8

0800ae4c <__d2b>:
 800ae4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae50:	4689      	mov	r9, r1
 800ae52:	2101      	movs	r1, #1
 800ae54:	ec57 6b10 	vmov	r6, r7, d0
 800ae58:	4690      	mov	r8, r2
 800ae5a:	f7ff fccf 	bl	800a7fc <_Balloc>
 800ae5e:	4604      	mov	r4, r0
 800ae60:	b930      	cbnz	r0, 800ae70 <__d2b+0x24>
 800ae62:	4602      	mov	r2, r0
 800ae64:	4b25      	ldr	r3, [pc, #148]	; (800aefc <__d2b+0xb0>)
 800ae66:	4826      	ldr	r0, [pc, #152]	; (800af00 <__d2b+0xb4>)
 800ae68:	f240 310a 	movw	r1, #778	; 0x30a
 800ae6c:	f000 fad0 	bl	800b410 <__assert_func>
 800ae70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ae74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae78:	bb35      	cbnz	r5, 800aec8 <__d2b+0x7c>
 800ae7a:	2e00      	cmp	r6, #0
 800ae7c:	9301      	str	r3, [sp, #4]
 800ae7e:	d028      	beq.n	800aed2 <__d2b+0x86>
 800ae80:	4668      	mov	r0, sp
 800ae82:	9600      	str	r6, [sp, #0]
 800ae84:	f7ff fd82 	bl	800a98c <__lo0bits>
 800ae88:	9900      	ldr	r1, [sp, #0]
 800ae8a:	b300      	cbz	r0, 800aece <__d2b+0x82>
 800ae8c:	9a01      	ldr	r2, [sp, #4]
 800ae8e:	f1c0 0320 	rsb	r3, r0, #32
 800ae92:	fa02 f303 	lsl.w	r3, r2, r3
 800ae96:	430b      	orrs	r3, r1
 800ae98:	40c2      	lsrs	r2, r0
 800ae9a:	6163      	str	r3, [r4, #20]
 800ae9c:	9201      	str	r2, [sp, #4]
 800ae9e:	9b01      	ldr	r3, [sp, #4]
 800aea0:	61a3      	str	r3, [r4, #24]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	bf14      	ite	ne
 800aea6:	2202      	movne	r2, #2
 800aea8:	2201      	moveq	r2, #1
 800aeaa:	6122      	str	r2, [r4, #16]
 800aeac:	b1d5      	cbz	r5, 800aee4 <__d2b+0x98>
 800aeae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aeb2:	4405      	add	r5, r0
 800aeb4:	f8c9 5000 	str.w	r5, [r9]
 800aeb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aebc:	f8c8 0000 	str.w	r0, [r8]
 800aec0:	4620      	mov	r0, r4
 800aec2:	b003      	add	sp, #12
 800aec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aecc:	e7d5      	b.n	800ae7a <__d2b+0x2e>
 800aece:	6161      	str	r1, [r4, #20]
 800aed0:	e7e5      	b.n	800ae9e <__d2b+0x52>
 800aed2:	a801      	add	r0, sp, #4
 800aed4:	f7ff fd5a 	bl	800a98c <__lo0bits>
 800aed8:	9b01      	ldr	r3, [sp, #4]
 800aeda:	6163      	str	r3, [r4, #20]
 800aedc:	2201      	movs	r2, #1
 800aede:	6122      	str	r2, [r4, #16]
 800aee0:	3020      	adds	r0, #32
 800aee2:	e7e3      	b.n	800aeac <__d2b+0x60>
 800aee4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aee8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aeec:	f8c9 0000 	str.w	r0, [r9]
 800aef0:	6918      	ldr	r0, [r3, #16]
 800aef2:	f7ff fd2b 	bl	800a94c <__hi0bits>
 800aef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aefa:	e7df      	b.n	800aebc <__d2b+0x70>
 800aefc:	0800b957 	.word	0x0800b957
 800af00:	0800b9c8 	.word	0x0800b9c8

0800af04 <_calloc_r>:
 800af04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af06:	fba1 2402 	umull	r2, r4, r1, r2
 800af0a:	b94c      	cbnz	r4, 800af20 <_calloc_r+0x1c>
 800af0c:	4611      	mov	r1, r2
 800af0e:	9201      	str	r2, [sp, #4]
 800af10:	f7fd ffdc 	bl	8008ecc <_malloc_r>
 800af14:	9a01      	ldr	r2, [sp, #4]
 800af16:	4605      	mov	r5, r0
 800af18:	b930      	cbnz	r0, 800af28 <_calloc_r+0x24>
 800af1a:	4628      	mov	r0, r5
 800af1c:	b003      	add	sp, #12
 800af1e:	bd30      	pop	{r4, r5, pc}
 800af20:	220c      	movs	r2, #12
 800af22:	6002      	str	r2, [r0, #0]
 800af24:	2500      	movs	r5, #0
 800af26:	e7f8      	b.n	800af1a <_calloc_r+0x16>
 800af28:	4621      	mov	r1, r4
 800af2a:	f7fd ff5b 	bl	8008de4 <memset>
 800af2e:	e7f4      	b.n	800af1a <_calloc_r+0x16>

0800af30 <__sfputc_r>:
 800af30:	6893      	ldr	r3, [r2, #8]
 800af32:	3b01      	subs	r3, #1
 800af34:	2b00      	cmp	r3, #0
 800af36:	b410      	push	{r4}
 800af38:	6093      	str	r3, [r2, #8]
 800af3a:	da08      	bge.n	800af4e <__sfputc_r+0x1e>
 800af3c:	6994      	ldr	r4, [r2, #24]
 800af3e:	42a3      	cmp	r3, r4
 800af40:	db01      	blt.n	800af46 <__sfputc_r+0x16>
 800af42:	290a      	cmp	r1, #10
 800af44:	d103      	bne.n	800af4e <__sfputc_r+0x1e>
 800af46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af4a:	f000 b98f 	b.w	800b26c <__swbuf_r>
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	1c58      	adds	r0, r3, #1
 800af52:	6010      	str	r0, [r2, #0]
 800af54:	7019      	strb	r1, [r3, #0]
 800af56:	4608      	mov	r0, r1
 800af58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <__sfputs_r>:
 800af5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af60:	4606      	mov	r6, r0
 800af62:	460f      	mov	r7, r1
 800af64:	4614      	mov	r4, r2
 800af66:	18d5      	adds	r5, r2, r3
 800af68:	42ac      	cmp	r4, r5
 800af6a:	d101      	bne.n	800af70 <__sfputs_r+0x12>
 800af6c:	2000      	movs	r0, #0
 800af6e:	e007      	b.n	800af80 <__sfputs_r+0x22>
 800af70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af74:	463a      	mov	r2, r7
 800af76:	4630      	mov	r0, r6
 800af78:	f7ff ffda 	bl	800af30 <__sfputc_r>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	d1f3      	bne.n	800af68 <__sfputs_r+0xa>
 800af80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af84 <_vfiprintf_r>:
 800af84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af88:	460d      	mov	r5, r1
 800af8a:	b09d      	sub	sp, #116	; 0x74
 800af8c:	4614      	mov	r4, r2
 800af8e:	4698      	mov	r8, r3
 800af90:	4606      	mov	r6, r0
 800af92:	b118      	cbz	r0, 800af9c <_vfiprintf_r+0x18>
 800af94:	6983      	ldr	r3, [r0, #24]
 800af96:	b90b      	cbnz	r3, 800af9c <_vfiprintf_r+0x18>
 800af98:	f7ff fb70 	bl	800a67c <__sinit>
 800af9c:	4b89      	ldr	r3, [pc, #548]	; (800b1c4 <_vfiprintf_r+0x240>)
 800af9e:	429d      	cmp	r5, r3
 800afa0:	d11b      	bne.n	800afda <_vfiprintf_r+0x56>
 800afa2:	6875      	ldr	r5, [r6, #4]
 800afa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa6:	07d9      	lsls	r1, r3, #31
 800afa8:	d405      	bmi.n	800afb6 <_vfiprintf_r+0x32>
 800afaa:	89ab      	ldrh	r3, [r5, #12]
 800afac:	059a      	lsls	r2, r3, #22
 800afae:	d402      	bmi.n	800afb6 <_vfiprintf_r+0x32>
 800afb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afb2:	f7ff fc06 	bl	800a7c2 <__retarget_lock_acquire_recursive>
 800afb6:	89ab      	ldrh	r3, [r5, #12]
 800afb8:	071b      	lsls	r3, r3, #28
 800afba:	d501      	bpl.n	800afc0 <_vfiprintf_r+0x3c>
 800afbc:	692b      	ldr	r3, [r5, #16]
 800afbe:	b9eb      	cbnz	r3, 800affc <_vfiprintf_r+0x78>
 800afc0:	4629      	mov	r1, r5
 800afc2:	4630      	mov	r0, r6
 800afc4:	f000 f9b6 	bl	800b334 <__swsetup_r>
 800afc8:	b1c0      	cbz	r0, 800affc <_vfiprintf_r+0x78>
 800afca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afcc:	07dc      	lsls	r4, r3, #31
 800afce:	d50e      	bpl.n	800afee <_vfiprintf_r+0x6a>
 800afd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afd4:	b01d      	add	sp, #116	; 0x74
 800afd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afda:	4b7b      	ldr	r3, [pc, #492]	; (800b1c8 <_vfiprintf_r+0x244>)
 800afdc:	429d      	cmp	r5, r3
 800afde:	d101      	bne.n	800afe4 <_vfiprintf_r+0x60>
 800afe0:	68b5      	ldr	r5, [r6, #8]
 800afe2:	e7df      	b.n	800afa4 <_vfiprintf_r+0x20>
 800afe4:	4b79      	ldr	r3, [pc, #484]	; (800b1cc <_vfiprintf_r+0x248>)
 800afe6:	429d      	cmp	r5, r3
 800afe8:	bf08      	it	eq
 800afea:	68f5      	ldreq	r5, [r6, #12]
 800afec:	e7da      	b.n	800afa4 <_vfiprintf_r+0x20>
 800afee:	89ab      	ldrh	r3, [r5, #12]
 800aff0:	0598      	lsls	r0, r3, #22
 800aff2:	d4ed      	bmi.n	800afd0 <_vfiprintf_r+0x4c>
 800aff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aff6:	f7ff fbe5 	bl	800a7c4 <__retarget_lock_release_recursive>
 800affa:	e7e9      	b.n	800afd0 <_vfiprintf_r+0x4c>
 800affc:	2300      	movs	r3, #0
 800affe:	9309      	str	r3, [sp, #36]	; 0x24
 800b000:	2320      	movs	r3, #32
 800b002:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b006:	f8cd 800c 	str.w	r8, [sp, #12]
 800b00a:	2330      	movs	r3, #48	; 0x30
 800b00c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1d0 <_vfiprintf_r+0x24c>
 800b010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b014:	f04f 0901 	mov.w	r9, #1
 800b018:	4623      	mov	r3, r4
 800b01a:	469a      	mov	sl, r3
 800b01c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b020:	b10a      	cbz	r2, 800b026 <_vfiprintf_r+0xa2>
 800b022:	2a25      	cmp	r2, #37	; 0x25
 800b024:	d1f9      	bne.n	800b01a <_vfiprintf_r+0x96>
 800b026:	ebba 0b04 	subs.w	fp, sl, r4
 800b02a:	d00b      	beq.n	800b044 <_vfiprintf_r+0xc0>
 800b02c:	465b      	mov	r3, fp
 800b02e:	4622      	mov	r2, r4
 800b030:	4629      	mov	r1, r5
 800b032:	4630      	mov	r0, r6
 800b034:	f7ff ff93 	bl	800af5e <__sfputs_r>
 800b038:	3001      	adds	r0, #1
 800b03a:	f000 80aa 	beq.w	800b192 <_vfiprintf_r+0x20e>
 800b03e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b040:	445a      	add	r2, fp
 800b042:	9209      	str	r2, [sp, #36]	; 0x24
 800b044:	f89a 3000 	ldrb.w	r3, [sl]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f000 80a2 	beq.w	800b192 <_vfiprintf_r+0x20e>
 800b04e:	2300      	movs	r3, #0
 800b050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b058:	f10a 0a01 	add.w	sl, sl, #1
 800b05c:	9304      	str	r3, [sp, #16]
 800b05e:	9307      	str	r3, [sp, #28]
 800b060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b064:	931a      	str	r3, [sp, #104]	; 0x68
 800b066:	4654      	mov	r4, sl
 800b068:	2205      	movs	r2, #5
 800b06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b06e:	4858      	ldr	r0, [pc, #352]	; (800b1d0 <_vfiprintf_r+0x24c>)
 800b070:	f7f5 f8b6 	bl	80001e0 <memchr>
 800b074:	9a04      	ldr	r2, [sp, #16]
 800b076:	b9d8      	cbnz	r0, 800b0b0 <_vfiprintf_r+0x12c>
 800b078:	06d1      	lsls	r1, r2, #27
 800b07a:	bf44      	itt	mi
 800b07c:	2320      	movmi	r3, #32
 800b07e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b082:	0713      	lsls	r3, r2, #28
 800b084:	bf44      	itt	mi
 800b086:	232b      	movmi	r3, #43	; 0x2b
 800b088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b08c:	f89a 3000 	ldrb.w	r3, [sl]
 800b090:	2b2a      	cmp	r3, #42	; 0x2a
 800b092:	d015      	beq.n	800b0c0 <_vfiprintf_r+0x13c>
 800b094:	9a07      	ldr	r2, [sp, #28]
 800b096:	4654      	mov	r4, sl
 800b098:	2000      	movs	r0, #0
 800b09a:	f04f 0c0a 	mov.w	ip, #10
 800b09e:	4621      	mov	r1, r4
 800b0a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0a4:	3b30      	subs	r3, #48	; 0x30
 800b0a6:	2b09      	cmp	r3, #9
 800b0a8:	d94e      	bls.n	800b148 <_vfiprintf_r+0x1c4>
 800b0aa:	b1b0      	cbz	r0, 800b0da <_vfiprintf_r+0x156>
 800b0ac:	9207      	str	r2, [sp, #28]
 800b0ae:	e014      	b.n	800b0da <_vfiprintf_r+0x156>
 800b0b0:	eba0 0308 	sub.w	r3, r0, r8
 800b0b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	9304      	str	r3, [sp, #16]
 800b0bc:	46a2      	mov	sl, r4
 800b0be:	e7d2      	b.n	800b066 <_vfiprintf_r+0xe2>
 800b0c0:	9b03      	ldr	r3, [sp, #12]
 800b0c2:	1d19      	adds	r1, r3, #4
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	9103      	str	r1, [sp, #12]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	bfbb      	ittet	lt
 800b0cc:	425b      	neglt	r3, r3
 800b0ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b0d2:	9307      	strge	r3, [sp, #28]
 800b0d4:	9307      	strlt	r3, [sp, #28]
 800b0d6:	bfb8      	it	lt
 800b0d8:	9204      	strlt	r2, [sp, #16]
 800b0da:	7823      	ldrb	r3, [r4, #0]
 800b0dc:	2b2e      	cmp	r3, #46	; 0x2e
 800b0de:	d10c      	bne.n	800b0fa <_vfiprintf_r+0x176>
 800b0e0:	7863      	ldrb	r3, [r4, #1]
 800b0e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b0e4:	d135      	bne.n	800b152 <_vfiprintf_r+0x1ce>
 800b0e6:	9b03      	ldr	r3, [sp, #12]
 800b0e8:	1d1a      	adds	r2, r3, #4
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	9203      	str	r2, [sp, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	bfb8      	it	lt
 800b0f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b0f6:	3402      	adds	r4, #2
 800b0f8:	9305      	str	r3, [sp, #20]
 800b0fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1e0 <_vfiprintf_r+0x25c>
 800b0fe:	7821      	ldrb	r1, [r4, #0]
 800b100:	2203      	movs	r2, #3
 800b102:	4650      	mov	r0, sl
 800b104:	f7f5 f86c 	bl	80001e0 <memchr>
 800b108:	b140      	cbz	r0, 800b11c <_vfiprintf_r+0x198>
 800b10a:	2340      	movs	r3, #64	; 0x40
 800b10c:	eba0 000a 	sub.w	r0, r0, sl
 800b110:	fa03 f000 	lsl.w	r0, r3, r0
 800b114:	9b04      	ldr	r3, [sp, #16]
 800b116:	4303      	orrs	r3, r0
 800b118:	3401      	adds	r4, #1
 800b11a:	9304      	str	r3, [sp, #16]
 800b11c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b120:	482c      	ldr	r0, [pc, #176]	; (800b1d4 <_vfiprintf_r+0x250>)
 800b122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b126:	2206      	movs	r2, #6
 800b128:	f7f5 f85a 	bl	80001e0 <memchr>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d03f      	beq.n	800b1b0 <_vfiprintf_r+0x22c>
 800b130:	4b29      	ldr	r3, [pc, #164]	; (800b1d8 <_vfiprintf_r+0x254>)
 800b132:	bb1b      	cbnz	r3, 800b17c <_vfiprintf_r+0x1f8>
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	3307      	adds	r3, #7
 800b138:	f023 0307 	bic.w	r3, r3, #7
 800b13c:	3308      	adds	r3, #8
 800b13e:	9303      	str	r3, [sp, #12]
 800b140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b142:	443b      	add	r3, r7
 800b144:	9309      	str	r3, [sp, #36]	; 0x24
 800b146:	e767      	b.n	800b018 <_vfiprintf_r+0x94>
 800b148:	fb0c 3202 	mla	r2, ip, r2, r3
 800b14c:	460c      	mov	r4, r1
 800b14e:	2001      	movs	r0, #1
 800b150:	e7a5      	b.n	800b09e <_vfiprintf_r+0x11a>
 800b152:	2300      	movs	r3, #0
 800b154:	3401      	adds	r4, #1
 800b156:	9305      	str	r3, [sp, #20]
 800b158:	4619      	mov	r1, r3
 800b15a:	f04f 0c0a 	mov.w	ip, #10
 800b15e:	4620      	mov	r0, r4
 800b160:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b164:	3a30      	subs	r2, #48	; 0x30
 800b166:	2a09      	cmp	r2, #9
 800b168:	d903      	bls.n	800b172 <_vfiprintf_r+0x1ee>
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d0c5      	beq.n	800b0fa <_vfiprintf_r+0x176>
 800b16e:	9105      	str	r1, [sp, #20]
 800b170:	e7c3      	b.n	800b0fa <_vfiprintf_r+0x176>
 800b172:	fb0c 2101 	mla	r1, ip, r1, r2
 800b176:	4604      	mov	r4, r0
 800b178:	2301      	movs	r3, #1
 800b17a:	e7f0      	b.n	800b15e <_vfiprintf_r+0x1da>
 800b17c:	ab03      	add	r3, sp, #12
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	462a      	mov	r2, r5
 800b182:	4b16      	ldr	r3, [pc, #88]	; (800b1dc <_vfiprintf_r+0x258>)
 800b184:	a904      	add	r1, sp, #16
 800b186:	4630      	mov	r0, r6
 800b188:	f7fd ffb4 	bl	80090f4 <_printf_float>
 800b18c:	4607      	mov	r7, r0
 800b18e:	1c78      	adds	r0, r7, #1
 800b190:	d1d6      	bne.n	800b140 <_vfiprintf_r+0x1bc>
 800b192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b194:	07d9      	lsls	r1, r3, #31
 800b196:	d405      	bmi.n	800b1a4 <_vfiprintf_r+0x220>
 800b198:	89ab      	ldrh	r3, [r5, #12]
 800b19a:	059a      	lsls	r2, r3, #22
 800b19c:	d402      	bmi.n	800b1a4 <_vfiprintf_r+0x220>
 800b19e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1a0:	f7ff fb10 	bl	800a7c4 <__retarget_lock_release_recursive>
 800b1a4:	89ab      	ldrh	r3, [r5, #12]
 800b1a6:	065b      	lsls	r3, r3, #25
 800b1a8:	f53f af12 	bmi.w	800afd0 <_vfiprintf_r+0x4c>
 800b1ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1ae:	e711      	b.n	800afd4 <_vfiprintf_r+0x50>
 800b1b0:	ab03      	add	r3, sp, #12
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	462a      	mov	r2, r5
 800b1b6:	4b09      	ldr	r3, [pc, #36]	; (800b1dc <_vfiprintf_r+0x258>)
 800b1b8:	a904      	add	r1, sp, #16
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f7fe fa3e 	bl	800963c <_printf_i>
 800b1c0:	e7e4      	b.n	800b18c <_vfiprintf_r+0x208>
 800b1c2:	bf00      	nop
 800b1c4:	0800b988 	.word	0x0800b988
 800b1c8:	0800b9a8 	.word	0x0800b9a8
 800b1cc:	0800b968 	.word	0x0800b968
 800b1d0:	0800bb24 	.word	0x0800bb24
 800b1d4:	0800bb2e 	.word	0x0800bb2e
 800b1d8:	080090f5 	.word	0x080090f5
 800b1dc:	0800af5f 	.word	0x0800af5f
 800b1e0:	0800bb2a 	.word	0x0800bb2a

0800b1e4 <__sread>:
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ec:	f000 fa9c 	bl	800b728 <_read_r>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	bfab      	itete	ge
 800b1f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b1f8:	181b      	addge	r3, r3, r0
 800b1fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1fe:	bfac      	ite	ge
 800b200:	6563      	strge	r3, [r4, #84]	; 0x54
 800b202:	81a3      	strhlt	r3, [r4, #12]
 800b204:	bd10      	pop	{r4, pc}

0800b206 <__swrite>:
 800b206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b20a:	461f      	mov	r7, r3
 800b20c:	898b      	ldrh	r3, [r1, #12]
 800b20e:	05db      	lsls	r3, r3, #23
 800b210:	4605      	mov	r5, r0
 800b212:	460c      	mov	r4, r1
 800b214:	4616      	mov	r6, r2
 800b216:	d505      	bpl.n	800b224 <__swrite+0x1e>
 800b218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b21c:	2302      	movs	r3, #2
 800b21e:	2200      	movs	r2, #0
 800b220:	f000 f9f8 	bl	800b614 <_lseek_r>
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b22a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b22e:	81a3      	strh	r3, [r4, #12]
 800b230:	4632      	mov	r2, r6
 800b232:	463b      	mov	r3, r7
 800b234:	4628      	mov	r0, r5
 800b236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b23a:	f000 b869 	b.w	800b310 <_write_r>

0800b23e <__sseek>:
 800b23e:	b510      	push	{r4, lr}
 800b240:	460c      	mov	r4, r1
 800b242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b246:	f000 f9e5 	bl	800b614 <_lseek_r>
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	89a3      	ldrh	r3, [r4, #12]
 800b24e:	bf15      	itete	ne
 800b250:	6560      	strne	r0, [r4, #84]	; 0x54
 800b252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b25a:	81a3      	strheq	r3, [r4, #12]
 800b25c:	bf18      	it	ne
 800b25e:	81a3      	strhne	r3, [r4, #12]
 800b260:	bd10      	pop	{r4, pc}

0800b262 <__sclose>:
 800b262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b266:	f000 b8f1 	b.w	800b44c <_close_r>
	...

0800b26c <__swbuf_r>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	460e      	mov	r6, r1
 800b270:	4614      	mov	r4, r2
 800b272:	4605      	mov	r5, r0
 800b274:	b118      	cbz	r0, 800b27e <__swbuf_r+0x12>
 800b276:	6983      	ldr	r3, [r0, #24]
 800b278:	b90b      	cbnz	r3, 800b27e <__swbuf_r+0x12>
 800b27a:	f7ff f9ff 	bl	800a67c <__sinit>
 800b27e:	4b21      	ldr	r3, [pc, #132]	; (800b304 <__swbuf_r+0x98>)
 800b280:	429c      	cmp	r4, r3
 800b282:	d12b      	bne.n	800b2dc <__swbuf_r+0x70>
 800b284:	686c      	ldr	r4, [r5, #4]
 800b286:	69a3      	ldr	r3, [r4, #24]
 800b288:	60a3      	str	r3, [r4, #8]
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	071a      	lsls	r2, r3, #28
 800b28e:	d52f      	bpl.n	800b2f0 <__swbuf_r+0x84>
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	b36b      	cbz	r3, 800b2f0 <__swbuf_r+0x84>
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	6820      	ldr	r0, [r4, #0]
 800b298:	1ac0      	subs	r0, r0, r3
 800b29a:	6963      	ldr	r3, [r4, #20]
 800b29c:	b2f6      	uxtb	r6, r6
 800b29e:	4283      	cmp	r3, r0
 800b2a0:	4637      	mov	r7, r6
 800b2a2:	dc04      	bgt.n	800b2ae <__swbuf_r+0x42>
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	f000 f966 	bl	800b578 <_fflush_r>
 800b2ac:	bb30      	cbnz	r0, 800b2fc <__swbuf_r+0x90>
 800b2ae:	68a3      	ldr	r3, [r4, #8]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	60a3      	str	r3, [r4, #8]
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	6022      	str	r2, [r4, #0]
 800b2ba:	701e      	strb	r6, [r3, #0]
 800b2bc:	6963      	ldr	r3, [r4, #20]
 800b2be:	3001      	adds	r0, #1
 800b2c0:	4283      	cmp	r3, r0
 800b2c2:	d004      	beq.n	800b2ce <__swbuf_r+0x62>
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	07db      	lsls	r3, r3, #31
 800b2c8:	d506      	bpl.n	800b2d8 <__swbuf_r+0x6c>
 800b2ca:	2e0a      	cmp	r6, #10
 800b2cc:	d104      	bne.n	800b2d8 <__swbuf_r+0x6c>
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f000 f951 	bl	800b578 <_fflush_r>
 800b2d6:	b988      	cbnz	r0, 800b2fc <__swbuf_r+0x90>
 800b2d8:	4638      	mov	r0, r7
 800b2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2dc:	4b0a      	ldr	r3, [pc, #40]	; (800b308 <__swbuf_r+0x9c>)
 800b2de:	429c      	cmp	r4, r3
 800b2e0:	d101      	bne.n	800b2e6 <__swbuf_r+0x7a>
 800b2e2:	68ac      	ldr	r4, [r5, #8]
 800b2e4:	e7cf      	b.n	800b286 <__swbuf_r+0x1a>
 800b2e6:	4b09      	ldr	r3, [pc, #36]	; (800b30c <__swbuf_r+0xa0>)
 800b2e8:	429c      	cmp	r4, r3
 800b2ea:	bf08      	it	eq
 800b2ec:	68ec      	ldreq	r4, [r5, #12]
 800b2ee:	e7ca      	b.n	800b286 <__swbuf_r+0x1a>
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	f000 f81e 	bl	800b334 <__swsetup_r>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d0cb      	beq.n	800b294 <__swbuf_r+0x28>
 800b2fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b300:	e7ea      	b.n	800b2d8 <__swbuf_r+0x6c>
 800b302:	bf00      	nop
 800b304:	0800b988 	.word	0x0800b988
 800b308:	0800b9a8 	.word	0x0800b9a8
 800b30c:	0800b968 	.word	0x0800b968

0800b310 <_write_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	4d07      	ldr	r5, [pc, #28]	; (800b330 <_write_r+0x20>)
 800b314:	4604      	mov	r4, r0
 800b316:	4608      	mov	r0, r1
 800b318:	4611      	mov	r1, r2
 800b31a:	2200      	movs	r2, #0
 800b31c:	602a      	str	r2, [r5, #0]
 800b31e:	461a      	mov	r2, r3
 800b320:	f7f5 fdc4 	bl	8000eac <_write>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d102      	bne.n	800b32e <_write_r+0x1e>
 800b328:	682b      	ldr	r3, [r5, #0]
 800b32a:	b103      	cbz	r3, 800b32e <_write_r+0x1e>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	20000a44 	.word	0x20000a44

0800b334 <__swsetup_r>:
 800b334:	4b32      	ldr	r3, [pc, #200]	; (800b400 <__swsetup_r+0xcc>)
 800b336:	b570      	push	{r4, r5, r6, lr}
 800b338:	681d      	ldr	r5, [r3, #0]
 800b33a:	4606      	mov	r6, r0
 800b33c:	460c      	mov	r4, r1
 800b33e:	b125      	cbz	r5, 800b34a <__swsetup_r+0x16>
 800b340:	69ab      	ldr	r3, [r5, #24]
 800b342:	b913      	cbnz	r3, 800b34a <__swsetup_r+0x16>
 800b344:	4628      	mov	r0, r5
 800b346:	f7ff f999 	bl	800a67c <__sinit>
 800b34a:	4b2e      	ldr	r3, [pc, #184]	; (800b404 <__swsetup_r+0xd0>)
 800b34c:	429c      	cmp	r4, r3
 800b34e:	d10f      	bne.n	800b370 <__swsetup_r+0x3c>
 800b350:	686c      	ldr	r4, [r5, #4]
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b358:	0719      	lsls	r1, r3, #28
 800b35a:	d42c      	bmi.n	800b3b6 <__swsetup_r+0x82>
 800b35c:	06dd      	lsls	r5, r3, #27
 800b35e:	d411      	bmi.n	800b384 <__swsetup_r+0x50>
 800b360:	2309      	movs	r3, #9
 800b362:	6033      	str	r3, [r6, #0]
 800b364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b368:	81a3      	strh	r3, [r4, #12]
 800b36a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b36e:	e03e      	b.n	800b3ee <__swsetup_r+0xba>
 800b370:	4b25      	ldr	r3, [pc, #148]	; (800b408 <__swsetup_r+0xd4>)
 800b372:	429c      	cmp	r4, r3
 800b374:	d101      	bne.n	800b37a <__swsetup_r+0x46>
 800b376:	68ac      	ldr	r4, [r5, #8]
 800b378:	e7eb      	b.n	800b352 <__swsetup_r+0x1e>
 800b37a:	4b24      	ldr	r3, [pc, #144]	; (800b40c <__swsetup_r+0xd8>)
 800b37c:	429c      	cmp	r4, r3
 800b37e:	bf08      	it	eq
 800b380:	68ec      	ldreq	r4, [r5, #12]
 800b382:	e7e6      	b.n	800b352 <__swsetup_r+0x1e>
 800b384:	0758      	lsls	r0, r3, #29
 800b386:	d512      	bpl.n	800b3ae <__swsetup_r+0x7a>
 800b388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b38a:	b141      	cbz	r1, 800b39e <__swsetup_r+0x6a>
 800b38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b390:	4299      	cmp	r1, r3
 800b392:	d002      	beq.n	800b39a <__swsetup_r+0x66>
 800b394:	4630      	mov	r0, r6
 800b396:	f7fd fd2d 	bl	8008df4 <_free_r>
 800b39a:	2300      	movs	r3, #0
 800b39c:	6363      	str	r3, [r4, #52]	; 0x34
 800b39e:	89a3      	ldrh	r3, [r4, #12]
 800b3a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3a4:	81a3      	strh	r3, [r4, #12]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	6063      	str	r3, [r4, #4]
 800b3aa:	6923      	ldr	r3, [r4, #16]
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	f043 0308 	orr.w	r3, r3, #8
 800b3b4:	81a3      	strh	r3, [r4, #12]
 800b3b6:	6923      	ldr	r3, [r4, #16]
 800b3b8:	b94b      	cbnz	r3, 800b3ce <__swsetup_r+0x9a>
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3c4:	d003      	beq.n	800b3ce <__swsetup_r+0x9a>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f000 f95b 	bl	800b684 <__smakebuf_r>
 800b3ce:	89a0      	ldrh	r0, [r4, #12]
 800b3d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3d4:	f010 0301 	ands.w	r3, r0, #1
 800b3d8:	d00a      	beq.n	800b3f0 <__swsetup_r+0xbc>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60a3      	str	r3, [r4, #8]
 800b3de:	6963      	ldr	r3, [r4, #20]
 800b3e0:	425b      	negs	r3, r3
 800b3e2:	61a3      	str	r3, [r4, #24]
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	b943      	cbnz	r3, 800b3fa <__swsetup_r+0xc6>
 800b3e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3ec:	d1ba      	bne.n	800b364 <__swsetup_r+0x30>
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}
 800b3f0:	0781      	lsls	r1, r0, #30
 800b3f2:	bf58      	it	pl
 800b3f4:	6963      	ldrpl	r3, [r4, #20]
 800b3f6:	60a3      	str	r3, [r4, #8]
 800b3f8:	e7f4      	b.n	800b3e4 <__swsetup_r+0xb0>
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	e7f7      	b.n	800b3ee <__swsetup_r+0xba>
 800b3fe:	bf00      	nop
 800b400:	2000002c 	.word	0x2000002c
 800b404:	0800b988 	.word	0x0800b988
 800b408:	0800b9a8 	.word	0x0800b9a8
 800b40c:	0800b968 	.word	0x0800b968

0800b410 <__assert_func>:
 800b410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b412:	4614      	mov	r4, r2
 800b414:	461a      	mov	r2, r3
 800b416:	4b09      	ldr	r3, [pc, #36]	; (800b43c <__assert_func+0x2c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4605      	mov	r5, r0
 800b41c:	68d8      	ldr	r0, [r3, #12]
 800b41e:	b14c      	cbz	r4, 800b434 <__assert_func+0x24>
 800b420:	4b07      	ldr	r3, [pc, #28]	; (800b440 <__assert_func+0x30>)
 800b422:	9100      	str	r1, [sp, #0]
 800b424:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b428:	4906      	ldr	r1, [pc, #24]	; (800b444 <__assert_func+0x34>)
 800b42a:	462b      	mov	r3, r5
 800b42c:	f000 f8e0 	bl	800b5f0 <fiprintf>
 800b430:	f000 f999 	bl	800b766 <abort>
 800b434:	4b04      	ldr	r3, [pc, #16]	; (800b448 <__assert_func+0x38>)
 800b436:	461c      	mov	r4, r3
 800b438:	e7f3      	b.n	800b422 <__assert_func+0x12>
 800b43a:	bf00      	nop
 800b43c:	2000002c 	.word	0x2000002c
 800b440:	0800bb35 	.word	0x0800bb35
 800b444:	0800bb42 	.word	0x0800bb42
 800b448:	0800bb70 	.word	0x0800bb70

0800b44c <_close_r>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	4d06      	ldr	r5, [pc, #24]	; (800b468 <_close_r+0x1c>)
 800b450:	2300      	movs	r3, #0
 800b452:	4604      	mov	r4, r0
 800b454:	4608      	mov	r0, r1
 800b456:	602b      	str	r3, [r5, #0]
 800b458:	f7f6 f999 	bl	800178e <_close>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	d102      	bne.n	800b466 <_close_r+0x1a>
 800b460:	682b      	ldr	r3, [r5, #0]
 800b462:	b103      	cbz	r3, 800b466 <_close_r+0x1a>
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	bd38      	pop	{r3, r4, r5, pc}
 800b468:	20000a44 	.word	0x20000a44

0800b46c <__sflush_r>:
 800b46c:	898a      	ldrh	r2, [r1, #12]
 800b46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b472:	4605      	mov	r5, r0
 800b474:	0710      	lsls	r0, r2, #28
 800b476:	460c      	mov	r4, r1
 800b478:	d458      	bmi.n	800b52c <__sflush_r+0xc0>
 800b47a:	684b      	ldr	r3, [r1, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	dc05      	bgt.n	800b48c <__sflush_r+0x20>
 800b480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b482:	2b00      	cmp	r3, #0
 800b484:	dc02      	bgt.n	800b48c <__sflush_r+0x20>
 800b486:	2000      	movs	r0, #0
 800b488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b48c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b48e:	2e00      	cmp	r6, #0
 800b490:	d0f9      	beq.n	800b486 <__sflush_r+0x1a>
 800b492:	2300      	movs	r3, #0
 800b494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b498:	682f      	ldr	r7, [r5, #0]
 800b49a:	602b      	str	r3, [r5, #0]
 800b49c:	d032      	beq.n	800b504 <__sflush_r+0x98>
 800b49e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	075a      	lsls	r2, r3, #29
 800b4a4:	d505      	bpl.n	800b4b2 <__sflush_r+0x46>
 800b4a6:	6863      	ldr	r3, [r4, #4]
 800b4a8:	1ac0      	subs	r0, r0, r3
 800b4aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4ac:	b10b      	cbz	r3, 800b4b2 <__sflush_r+0x46>
 800b4ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4b0:	1ac0      	subs	r0, r0, r3
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4b8:	6a21      	ldr	r1, [r4, #32]
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	47b0      	blx	r6
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	89a3      	ldrh	r3, [r4, #12]
 800b4c2:	d106      	bne.n	800b4d2 <__sflush_r+0x66>
 800b4c4:	6829      	ldr	r1, [r5, #0]
 800b4c6:	291d      	cmp	r1, #29
 800b4c8:	d82c      	bhi.n	800b524 <__sflush_r+0xb8>
 800b4ca:	4a2a      	ldr	r2, [pc, #168]	; (800b574 <__sflush_r+0x108>)
 800b4cc:	40ca      	lsrs	r2, r1
 800b4ce:	07d6      	lsls	r6, r2, #31
 800b4d0:	d528      	bpl.n	800b524 <__sflush_r+0xb8>
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	6062      	str	r2, [r4, #4]
 800b4d6:	04d9      	lsls	r1, r3, #19
 800b4d8:	6922      	ldr	r2, [r4, #16]
 800b4da:	6022      	str	r2, [r4, #0]
 800b4dc:	d504      	bpl.n	800b4e8 <__sflush_r+0x7c>
 800b4de:	1c42      	adds	r2, r0, #1
 800b4e0:	d101      	bne.n	800b4e6 <__sflush_r+0x7a>
 800b4e2:	682b      	ldr	r3, [r5, #0]
 800b4e4:	b903      	cbnz	r3, 800b4e8 <__sflush_r+0x7c>
 800b4e6:	6560      	str	r0, [r4, #84]	; 0x54
 800b4e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4ea:	602f      	str	r7, [r5, #0]
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	d0ca      	beq.n	800b486 <__sflush_r+0x1a>
 800b4f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4f4:	4299      	cmp	r1, r3
 800b4f6:	d002      	beq.n	800b4fe <__sflush_r+0x92>
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	f7fd fc7b 	bl	8008df4 <_free_r>
 800b4fe:	2000      	movs	r0, #0
 800b500:	6360      	str	r0, [r4, #52]	; 0x34
 800b502:	e7c1      	b.n	800b488 <__sflush_r+0x1c>
 800b504:	6a21      	ldr	r1, [r4, #32]
 800b506:	2301      	movs	r3, #1
 800b508:	4628      	mov	r0, r5
 800b50a:	47b0      	blx	r6
 800b50c:	1c41      	adds	r1, r0, #1
 800b50e:	d1c7      	bne.n	800b4a0 <__sflush_r+0x34>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d0c4      	beq.n	800b4a0 <__sflush_r+0x34>
 800b516:	2b1d      	cmp	r3, #29
 800b518:	d001      	beq.n	800b51e <__sflush_r+0xb2>
 800b51a:	2b16      	cmp	r3, #22
 800b51c:	d101      	bne.n	800b522 <__sflush_r+0xb6>
 800b51e:	602f      	str	r7, [r5, #0]
 800b520:	e7b1      	b.n	800b486 <__sflush_r+0x1a>
 800b522:	89a3      	ldrh	r3, [r4, #12]
 800b524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	e7ad      	b.n	800b488 <__sflush_r+0x1c>
 800b52c:	690f      	ldr	r7, [r1, #16]
 800b52e:	2f00      	cmp	r7, #0
 800b530:	d0a9      	beq.n	800b486 <__sflush_r+0x1a>
 800b532:	0793      	lsls	r3, r2, #30
 800b534:	680e      	ldr	r6, [r1, #0]
 800b536:	bf08      	it	eq
 800b538:	694b      	ldreq	r3, [r1, #20]
 800b53a:	600f      	str	r7, [r1, #0]
 800b53c:	bf18      	it	ne
 800b53e:	2300      	movne	r3, #0
 800b540:	eba6 0807 	sub.w	r8, r6, r7
 800b544:	608b      	str	r3, [r1, #8]
 800b546:	f1b8 0f00 	cmp.w	r8, #0
 800b54a:	dd9c      	ble.n	800b486 <__sflush_r+0x1a>
 800b54c:	6a21      	ldr	r1, [r4, #32]
 800b54e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b550:	4643      	mov	r3, r8
 800b552:	463a      	mov	r2, r7
 800b554:	4628      	mov	r0, r5
 800b556:	47b0      	blx	r6
 800b558:	2800      	cmp	r0, #0
 800b55a:	dc06      	bgt.n	800b56a <__sflush_r+0xfe>
 800b55c:	89a3      	ldrh	r3, [r4, #12]
 800b55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b562:	81a3      	strh	r3, [r4, #12]
 800b564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b568:	e78e      	b.n	800b488 <__sflush_r+0x1c>
 800b56a:	4407      	add	r7, r0
 800b56c:	eba8 0800 	sub.w	r8, r8, r0
 800b570:	e7e9      	b.n	800b546 <__sflush_r+0xda>
 800b572:	bf00      	nop
 800b574:	20400001 	.word	0x20400001

0800b578 <_fflush_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	690b      	ldr	r3, [r1, #16]
 800b57c:	4605      	mov	r5, r0
 800b57e:	460c      	mov	r4, r1
 800b580:	b913      	cbnz	r3, 800b588 <_fflush_r+0x10>
 800b582:	2500      	movs	r5, #0
 800b584:	4628      	mov	r0, r5
 800b586:	bd38      	pop	{r3, r4, r5, pc}
 800b588:	b118      	cbz	r0, 800b592 <_fflush_r+0x1a>
 800b58a:	6983      	ldr	r3, [r0, #24]
 800b58c:	b90b      	cbnz	r3, 800b592 <_fflush_r+0x1a>
 800b58e:	f7ff f875 	bl	800a67c <__sinit>
 800b592:	4b14      	ldr	r3, [pc, #80]	; (800b5e4 <_fflush_r+0x6c>)
 800b594:	429c      	cmp	r4, r3
 800b596:	d11b      	bne.n	800b5d0 <_fflush_r+0x58>
 800b598:	686c      	ldr	r4, [r5, #4]
 800b59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d0ef      	beq.n	800b582 <_fflush_r+0xa>
 800b5a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5a4:	07d0      	lsls	r0, r2, #31
 800b5a6:	d404      	bmi.n	800b5b2 <_fflush_r+0x3a>
 800b5a8:	0599      	lsls	r1, r3, #22
 800b5aa:	d402      	bmi.n	800b5b2 <_fflush_r+0x3a>
 800b5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ae:	f7ff f908 	bl	800a7c2 <__retarget_lock_acquire_recursive>
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	4621      	mov	r1, r4
 800b5b6:	f7ff ff59 	bl	800b46c <__sflush_r>
 800b5ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5bc:	07da      	lsls	r2, r3, #31
 800b5be:	4605      	mov	r5, r0
 800b5c0:	d4e0      	bmi.n	800b584 <_fflush_r+0xc>
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	059b      	lsls	r3, r3, #22
 800b5c6:	d4dd      	bmi.n	800b584 <_fflush_r+0xc>
 800b5c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ca:	f7ff f8fb 	bl	800a7c4 <__retarget_lock_release_recursive>
 800b5ce:	e7d9      	b.n	800b584 <_fflush_r+0xc>
 800b5d0:	4b05      	ldr	r3, [pc, #20]	; (800b5e8 <_fflush_r+0x70>)
 800b5d2:	429c      	cmp	r4, r3
 800b5d4:	d101      	bne.n	800b5da <_fflush_r+0x62>
 800b5d6:	68ac      	ldr	r4, [r5, #8]
 800b5d8:	e7df      	b.n	800b59a <_fflush_r+0x22>
 800b5da:	4b04      	ldr	r3, [pc, #16]	; (800b5ec <_fflush_r+0x74>)
 800b5dc:	429c      	cmp	r4, r3
 800b5de:	bf08      	it	eq
 800b5e0:	68ec      	ldreq	r4, [r5, #12]
 800b5e2:	e7da      	b.n	800b59a <_fflush_r+0x22>
 800b5e4:	0800b988 	.word	0x0800b988
 800b5e8:	0800b9a8 	.word	0x0800b9a8
 800b5ec:	0800b968 	.word	0x0800b968

0800b5f0 <fiprintf>:
 800b5f0:	b40e      	push	{r1, r2, r3}
 800b5f2:	b503      	push	{r0, r1, lr}
 800b5f4:	4601      	mov	r1, r0
 800b5f6:	ab03      	add	r3, sp, #12
 800b5f8:	4805      	ldr	r0, [pc, #20]	; (800b610 <fiprintf+0x20>)
 800b5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fe:	6800      	ldr	r0, [r0, #0]
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	f7ff fcbf 	bl	800af84 <_vfiprintf_r>
 800b606:	b002      	add	sp, #8
 800b608:	f85d eb04 	ldr.w	lr, [sp], #4
 800b60c:	b003      	add	sp, #12
 800b60e:	4770      	bx	lr
 800b610:	2000002c 	.word	0x2000002c

0800b614 <_lseek_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4d07      	ldr	r5, [pc, #28]	; (800b634 <_lseek_r+0x20>)
 800b618:	4604      	mov	r4, r0
 800b61a:	4608      	mov	r0, r1
 800b61c:	4611      	mov	r1, r2
 800b61e:	2200      	movs	r2, #0
 800b620:	602a      	str	r2, [r5, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	f7f6 f8da 	bl	80017dc <_lseek>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_lseek_r+0x1e>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_lseek_r+0x1e>
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	20000a44 	.word	0x20000a44

0800b638 <__swhatbuf_r>:
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	460e      	mov	r6, r1
 800b63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b640:	2900      	cmp	r1, #0
 800b642:	b096      	sub	sp, #88	; 0x58
 800b644:	4614      	mov	r4, r2
 800b646:	461d      	mov	r5, r3
 800b648:	da08      	bge.n	800b65c <__swhatbuf_r+0x24>
 800b64a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	602a      	str	r2, [r5, #0]
 800b652:	061a      	lsls	r2, r3, #24
 800b654:	d410      	bmi.n	800b678 <__swhatbuf_r+0x40>
 800b656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b65a:	e00e      	b.n	800b67a <__swhatbuf_r+0x42>
 800b65c:	466a      	mov	r2, sp
 800b65e:	f000 f889 	bl	800b774 <_fstat_r>
 800b662:	2800      	cmp	r0, #0
 800b664:	dbf1      	blt.n	800b64a <__swhatbuf_r+0x12>
 800b666:	9a01      	ldr	r2, [sp, #4]
 800b668:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b66c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b670:	425a      	negs	r2, r3
 800b672:	415a      	adcs	r2, r3
 800b674:	602a      	str	r2, [r5, #0]
 800b676:	e7ee      	b.n	800b656 <__swhatbuf_r+0x1e>
 800b678:	2340      	movs	r3, #64	; 0x40
 800b67a:	2000      	movs	r0, #0
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	b016      	add	sp, #88	; 0x58
 800b680:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b684 <__smakebuf_r>:
 800b684:	898b      	ldrh	r3, [r1, #12]
 800b686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b688:	079d      	lsls	r5, r3, #30
 800b68a:	4606      	mov	r6, r0
 800b68c:	460c      	mov	r4, r1
 800b68e:	d507      	bpl.n	800b6a0 <__smakebuf_r+0x1c>
 800b690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	6123      	str	r3, [r4, #16]
 800b698:	2301      	movs	r3, #1
 800b69a:	6163      	str	r3, [r4, #20]
 800b69c:	b002      	add	sp, #8
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	ab01      	add	r3, sp, #4
 800b6a2:	466a      	mov	r2, sp
 800b6a4:	f7ff ffc8 	bl	800b638 <__swhatbuf_r>
 800b6a8:	9900      	ldr	r1, [sp, #0]
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7fd fc0d 	bl	8008ecc <_malloc_r>
 800b6b2:	b948      	cbnz	r0, 800b6c8 <__smakebuf_r+0x44>
 800b6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b8:	059a      	lsls	r2, r3, #22
 800b6ba:	d4ef      	bmi.n	800b69c <__smakebuf_r+0x18>
 800b6bc:	f023 0303 	bic.w	r3, r3, #3
 800b6c0:	f043 0302 	orr.w	r3, r3, #2
 800b6c4:	81a3      	strh	r3, [r4, #12]
 800b6c6:	e7e3      	b.n	800b690 <__smakebuf_r+0xc>
 800b6c8:	4b0d      	ldr	r3, [pc, #52]	; (800b700 <__smakebuf_r+0x7c>)
 800b6ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	6020      	str	r0, [r4, #0]
 800b6d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d4:	81a3      	strh	r3, [r4, #12]
 800b6d6:	9b00      	ldr	r3, [sp, #0]
 800b6d8:	6163      	str	r3, [r4, #20]
 800b6da:	9b01      	ldr	r3, [sp, #4]
 800b6dc:	6120      	str	r0, [r4, #16]
 800b6de:	b15b      	cbz	r3, 800b6f8 <__smakebuf_r+0x74>
 800b6e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f000 f857 	bl	800b798 <_isatty_r>
 800b6ea:	b128      	cbz	r0, 800b6f8 <__smakebuf_r+0x74>
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	f023 0303 	bic.w	r3, r3, #3
 800b6f2:	f043 0301 	orr.w	r3, r3, #1
 800b6f6:	81a3      	strh	r3, [r4, #12]
 800b6f8:	89a0      	ldrh	r0, [r4, #12]
 800b6fa:	4305      	orrs	r5, r0
 800b6fc:	81a5      	strh	r5, [r4, #12]
 800b6fe:	e7cd      	b.n	800b69c <__smakebuf_r+0x18>
 800b700:	0800a615 	.word	0x0800a615

0800b704 <__ascii_mbtowc>:
 800b704:	b082      	sub	sp, #8
 800b706:	b901      	cbnz	r1, 800b70a <__ascii_mbtowc+0x6>
 800b708:	a901      	add	r1, sp, #4
 800b70a:	b142      	cbz	r2, 800b71e <__ascii_mbtowc+0x1a>
 800b70c:	b14b      	cbz	r3, 800b722 <__ascii_mbtowc+0x1e>
 800b70e:	7813      	ldrb	r3, [r2, #0]
 800b710:	600b      	str	r3, [r1, #0]
 800b712:	7812      	ldrb	r2, [r2, #0]
 800b714:	1e10      	subs	r0, r2, #0
 800b716:	bf18      	it	ne
 800b718:	2001      	movne	r0, #1
 800b71a:	b002      	add	sp, #8
 800b71c:	4770      	bx	lr
 800b71e:	4610      	mov	r0, r2
 800b720:	e7fb      	b.n	800b71a <__ascii_mbtowc+0x16>
 800b722:	f06f 0001 	mvn.w	r0, #1
 800b726:	e7f8      	b.n	800b71a <__ascii_mbtowc+0x16>

0800b728 <_read_r>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	4d07      	ldr	r5, [pc, #28]	; (800b748 <_read_r+0x20>)
 800b72c:	4604      	mov	r4, r0
 800b72e:	4608      	mov	r0, r1
 800b730:	4611      	mov	r1, r2
 800b732:	2200      	movs	r2, #0
 800b734:	602a      	str	r2, [r5, #0]
 800b736:	461a      	mov	r2, r3
 800b738:	f7f6 f80c 	bl	8001754 <_read>
 800b73c:	1c43      	adds	r3, r0, #1
 800b73e:	d102      	bne.n	800b746 <_read_r+0x1e>
 800b740:	682b      	ldr	r3, [r5, #0]
 800b742:	b103      	cbz	r3, 800b746 <_read_r+0x1e>
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	bd38      	pop	{r3, r4, r5, pc}
 800b748:	20000a44 	.word	0x20000a44

0800b74c <__ascii_wctomb>:
 800b74c:	b149      	cbz	r1, 800b762 <__ascii_wctomb+0x16>
 800b74e:	2aff      	cmp	r2, #255	; 0xff
 800b750:	bf85      	ittet	hi
 800b752:	238a      	movhi	r3, #138	; 0x8a
 800b754:	6003      	strhi	r3, [r0, #0]
 800b756:	700a      	strbls	r2, [r1, #0]
 800b758:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b75c:	bf98      	it	ls
 800b75e:	2001      	movls	r0, #1
 800b760:	4770      	bx	lr
 800b762:	4608      	mov	r0, r1
 800b764:	4770      	bx	lr

0800b766 <abort>:
 800b766:	b508      	push	{r3, lr}
 800b768:	2006      	movs	r0, #6
 800b76a:	f000 f84d 	bl	800b808 <raise>
 800b76e:	2001      	movs	r0, #1
 800b770:	f7f5 ffe6 	bl	8001740 <_exit>

0800b774 <_fstat_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4d07      	ldr	r5, [pc, #28]	; (800b794 <_fstat_r+0x20>)
 800b778:	2300      	movs	r3, #0
 800b77a:	4604      	mov	r4, r0
 800b77c:	4608      	mov	r0, r1
 800b77e:	4611      	mov	r1, r2
 800b780:	602b      	str	r3, [r5, #0]
 800b782:	f7f6 f810 	bl	80017a6 <_fstat>
 800b786:	1c43      	adds	r3, r0, #1
 800b788:	d102      	bne.n	800b790 <_fstat_r+0x1c>
 800b78a:	682b      	ldr	r3, [r5, #0]
 800b78c:	b103      	cbz	r3, 800b790 <_fstat_r+0x1c>
 800b78e:	6023      	str	r3, [r4, #0]
 800b790:	bd38      	pop	{r3, r4, r5, pc}
 800b792:	bf00      	nop
 800b794:	20000a44 	.word	0x20000a44

0800b798 <_isatty_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4d06      	ldr	r5, [pc, #24]	; (800b7b4 <_isatty_r+0x1c>)
 800b79c:	2300      	movs	r3, #0
 800b79e:	4604      	mov	r4, r0
 800b7a0:	4608      	mov	r0, r1
 800b7a2:	602b      	str	r3, [r5, #0]
 800b7a4:	f7f6 f80f 	bl	80017c6 <_isatty>
 800b7a8:	1c43      	adds	r3, r0, #1
 800b7aa:	d102      	bne.n	800b7b2 <_isatty_r+0x1a>
 800b7ac:	682b      	ldr	r3, [r5, #0]
 800b7ae:	b103      	cbz	r3, 800b7b2 <_isatty_r+0x1a>
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	20000a44 	.word	0x20000a44

0800b7b8 <_raise_r>:
 800b7b8:	291f      	cmp	r1, #31
 800b7ba:	b538      	push	{r3, r4, r5, lr}
 800b7bc:	4604      	mov	r4, r0
 800b7be:	460d      	mov	r5, r1
 800b7c0:	d904      	bls.n	800b7cc <_raise_r+0x14>
 800b7c2:	2316      	movs	r3, #22
 800b7c4:	6003      	str	r3, [r0, #0]
 800b7c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7ca:	bd38      	pop	{r3, r4, r5, pc}
 800b7cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7ce:	b112      	cbz	r2, 800b7d6 <_raise_r+0x1e>
 800b7d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7d4:	b94b      	cbnz	r3, 800b7ea <_raise_r+0x32>
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f000 f830 	bl	800b83c <_getpid_r>
 800b7dc:	462a      	mov	r2, r5
 800b7de:	4601      	mov	r1, r0
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7e6:	f000 b817 	b.w	800b818 <_kill_r>
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d00a      	beq.n	800b804 <_raise_r+0x4c>
 800b7ee:	1c59      	adds	r1, r3, #1
 800b7f0:	d103      	bne.n	800b7fa <_raise_r+0x42>
 800b7f2:	2316      	movs	r3, #22
 800b7f4:	6003      	str	r3, [r0, #0]
 800b7f6:	2001      	movs	r0, #1
 800b7f8:	e7e7      	b.n	800b7ca <_raise_r+0x12>
 800b7fa:	2400      	movs	r4, #0
 800b7fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b800:	4628      	mov	r0, r5
 800b802:	4798      	blx	r3
 800b804:	2000      	movs	r0, #0
 800b806:	e7e0      	b.n	800b7ca <_raise_r+0x12>

0800b808 <raise>:
 800b808:	4b02      	ldr	r3, [pc, #8]	; (800b814 <raise+0xc>)
 800b80a:	4601      	mov	r1, r0
 800b80c:	6818      	ldr	r0, [r3, #0]
 800b80e:	f7ff bfd3 	b.w	800b7b8 <_raise_r>
 800b812:	bf00      	nop
 800b814:	2000002c 	.word	0x2000002c

0800b818 <_kill_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4d07      	ldr	r5, [pc, #28]	; (800b838 <_kill_r+0x20>)
 800b81c:	2300      	movs	r3, #0
 800b81e:	4604      	mov	r4, r0
 800b820:	4608      	mov	r0, r1
 800b822:	4611      	mov	r1, r2
 800b824:	602b      	str	r3, [r5, #0]
 800b826:	f7f5 ff7b 	bl	8001720 <_kill>
 800b82a:	1c43      	adds	r3, r0, #1
 800b82c:	d102      	bne.n	800b834 <_kill_r+0x1c>
 800b82e:	682b      	ldr	r3, [r5, #0]
 800b830:	b103      	cbz	r3, 800b834 <_kill_r+0x1c>
 800b832:	6023      	str	r3, [r4, #0]
 800b834:	bd38      	pop	{r3, r4, r5, pc}
 800b836:	bf00      	nop
 800b838:	20000a44 	.word	0x20000a44

0800b83c <_getpid_r>:
 800b83c:	f7f5 bf68 	b.w	8001710 <_getpid>

0800b840 <_init>:
 800b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b842:	bf00      	nop
 800b844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b846:	bc08      	pop	{r3}
 800b848:	469e      	mov	lr, r3
 800b84a:	4770      	bx	lr

0800b84c <_fini>:
 800b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84e:	bf00      	nop
 800b850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b852:	bc08      	pop	{r3}
 800b854:	469e      	mov	lr, r3
 800b856:	4770      	bx	lr
