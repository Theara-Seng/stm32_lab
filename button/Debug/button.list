
button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf4  08007cf4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007cf4  08007cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cfc  08007cfc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cfc  08007cfc  00017cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d00  08007d00  00017d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157ed  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036ec  00000000  00000000  000358ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00038fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  0003a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023681  00000000  00000000  0003b050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e79  00000000  00000000  0005e6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb4f5  00000000  00000000  0007554a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140a3f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048c0  00000000  00000000  00140a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007cc0 	.word	0x08007cc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007cc0 	.word	0x08007cc0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc2a 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f84a 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f946 	bl	8000768 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f8b0 	bl	8000640 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8dc 	bl	800069c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f90a 	bl	80006fc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f006 ffa2 	bl	8007430 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004ec:	f006 ffc6 	bl	800747c <MX_USB_HOST_Process>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET){
 80004f0:	2101      	movs	r1, #1
 80004f2:	481c      	ldr	r0, [pc, #112]	; (8000564 <main+0x98>)
 80004f4:	f000 ff5c 	bl	80013b0 <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d118      	bne.n	8000530 <main+0x64>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000504:	4818      	ldr	r0, [pc, #96]	; (8000568 <main+0x9c>)
 8000506:	f000 ff6b 	bl	80013e0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000510:	4815      	ldr	r0, [pc, #84]	; (8000568 <main+0x9c>)
 8000512:	f000 ff65 	bl	80013e0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800051c:	4812      	ldr	r0, [pc, #72]	; (8000568 <main+0x9c>)
 800051e:	f000 ff5f 	bl	80013e0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000528:	480f      	ldr	r0, [pc, #60]	; (8000568 <main+0x9c>)
 800052a:	f000 ff59 	bl	80013e0 <HAL_GPIO_WritePin>
 800052e:	e7dd      	b.n	80004ec <main+0x20>

    }else{
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000536:	480c      	ldr	r0, [pc, #48]	; (8000568 <main+0x9c>)
 8000538:	f000 ff52 	bl	80013e0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000542:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x9c>)
 8000544:	f000 ff4c 	bl	80013e0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054e:	4806      	ldr	r0, [pc, #24]	; (8000568 <main+0x9c>)
 8000550:	f000 ff46 	bl	80013e0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800055a:	4803      	ldr	r0, [pc, #12]	; (8000568 <main+0x9c>)
 800055c:	f000 ff40 	bl	80013e0 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8000560:	e7c4      	b.n	80004ec <main+0x20>
 8000562:	bf00      	nop
 8000564:	40020000 	.word	0x40020000
 8000568:	40020c00 	.word	0x40020c00

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f007 fa9a 	bl	8007ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a27      	ldr	r2, [pc, #156]	; (8000638 <SystemClock_Config+0xcc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f8fc 	bl	80037f0 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fe:	f000 f9af 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2105      	movs	r1, #5
 8000620:	4618      	mov	r0, r3
 8000622:	f003 fb5d 	bl	8003ce0 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800062c:	f000 f998 	bl	8000960 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	; 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f002 fad3 	bl	8002c28 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 f96a 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000ac 	.word	0x200000ac
 8000694:	40005400 	.word	0x40005400
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <MX_I2S3_Init+0x58>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006c4:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <MX_I2S3_Init+0x5c>)
 80006c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006dc:	f002 fbe8 	bl	8002eb0 <HAL_I2S_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006e6:	f000 f93b 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000100 	.word	0x20000100
 80006f4:	40003c00 	.word	0x40003c00
 80006f8:	00017700 	.word	0x00017700

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI1_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI1_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI1_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI1_Init+0x64>)
 800074e:	f003 fe13 	bl	8004378 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f902 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000148 	.word	0x20000148
 8000764:	40013000 	.word	0x40013000

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	4b71      	ldr	r3, [pc, #452]	; (8000948 <MX_GPIO_Init+0x1e0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a70      	ldr	r2, [pc, #448]	; (8000948 <MX_GPIO_Init+0x1e0>)
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b6e      	ldr	r3, [pc, #440]	; (8000948 <MX_GPIO_Init+0x1e0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	4b6a      	ldr	r3, [pc, #424]	; (8000948 <MX_GPIO_Init+0x1e0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a69      	ldr	r2, [pc, #420]	; (8000948 <MX_GPIO_Init+0x1e0>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b67      	ldr	r3, [pc, #412]	; (8000948 <MX_GPIO_Init+0x1e0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b63      	ldr	r3, [pc, #396]	; (8000948 <MX_GPIO_Init+0x1e0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a62      	ldr	r2, [pc, #392]	; (8000948 <MX_GPIO_Init+0x1e0>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b60      	ldr	r3, [pc, #384]	; (8000948 <MX_GPIO_Init+0x1e0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b5c      	ldr	r3, [pc, #368]	; (8000948 <MX_GPIO_Init+0x1e0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a5b      	ldr	r2, [pc, #364]	; (8000948 <MX_GPIO_Init+0x1e0>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b59      	ldr	r3, [pc, #356]	; (8000948 <MX_GPIO_Init+0x1e0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b55      	ldr	r3, [pc, #340]	; (8000948 <MX_GPIO_Init+0x1e0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a54      	ldr	r2, [pc, #336]	; (8000948 <MX_GPIO_Init+0x1e0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b52      	ldr	r3, [pc, #328]	; (8000948 <MX_GPIO_Init+0x1e0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b4e      	ldr	r3, [pc, #312]	; (8000948 <MX_GPIO_Init+0x1e0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a4d      	ldr	r2, [pc, #308]	; (8000948 <MX_GPIO_Init+0x1e0>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b4b      	ldr	r3, [pc, #300]	; (8000948 <MX_GPIO_Init+0x1e0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	4848      	ldr	r0, [pc, #288]	; (800094c <MX_GPIO_Init+0x1e4>)
 800082c:	f000 fdd8 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2101      	movs	r1, #1
 8000834:	4846      	ldr	r0, [pc, #280]	; (8000950 <MX_GPIO_Init+0x1e8>)
 8000836:	f000 fdd3 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083a:	2200      	movs	r2, #0
 800083c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000840:	4844      	ldr	r0, [pc, #272]	; (8000954 <MX_GPIO_Init+0x1ec>)
 8000842:	f000 fdcd 	bl	80013e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	483b      	ldr	r0, [pc, #236]	; (800094c <MX_GPIO_Init+0x1e4>)
 800085e:	f000 fc0b 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4835      	ldr	r0, [pc, #212]	; (8000950 <MX_GPIO_Init+0x1e8>)
 800087a:	f000 fbfd 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800087e:	2308      	movs	r3, #8
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088e:	2305      	movs	r3, #5
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	482d      	ldr	r0, [pc, #180]	; (8000950 <MX_GPIO_Init+0x1e8>)
 800089a:	f000 fbed 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4829      	ldr	r0, [pc, #164]	; (8000958 <MX_GPIO_Init+0x1f0>)
 80008b2:	f000 fbe1 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b6:	2304      	movs	r3, #4
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4824      	ldr	r0, [pc, #144]	; (800095c <MX_GPIO_Init+0x1f4>)
 80008ca:	f000 fbd5 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e0:	2305      	movs	r3, #5
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	481c      	ldr	r0, [pc, #112]	; (800095c <MX_GPIO_Init+0x1f4>)
 80008ec:	f000 fbc4 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <MX_GPIO_Init+0x1ec>)
 800090a:	f000 fbb5 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800090e:	2320      	movs	r3, #32
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_GPIO_Init+0x1ec>)
 8000922:	f000 fba9 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_GPIO_Init+0x1e4>)
 800093c:	f000 fb9c 	bl	8001078 <HAL_GPIO_Init>

}
 8000940:	bf00      	nop
 8000942:	3730      	adds	r7, #48	; 0x30
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40021000 	.word	0x40021000
 8000950:	40020800 	.word	0x40020800
 8000954:	40020c00 	.word	0x40020c00
 8000958:	40020000 	.word	0x40020000
 800095c:	40020400 	.word	0x40020400

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009aa:	2007      	movs	r0, #7
 80009ac:	f000 fb22 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <HAL_I2C_MspInit+0x84>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d12c      	bne.n	8000a38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	480c      	ldr	r0, [pc, #48]	; (8000a48 <HAL_I2C_MspInit+0x8c>)
 8000a18:	f000 fb2e 	bl	8001078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_I2C_MspInit+0x88>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40005400 	.word	0x40005400
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400

08000a4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a31      	ldr	r2, [pc, #196]	; (8000b3c <HAL_I2S_MspInit+0xf0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d15a      	bne.n	8000b32 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a80:	23c0      	movs	r3, #192	; 0xc0
 8000a82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 fb33 	bl	80040f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a98:	f7ff ff62 	bl	8000960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <HAL_I2S_MspInit+0xf4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a26      	ldr	r2, [pc, #152]	; (8000b40 <HAL_I2S_MspInit+0xf4>)
 8000aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <HAL_I2S_MspInit+0xf4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <HAL_I2S_MspInit+0xf4>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <HAL_I2S_MspInit+0xf4>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <HAL_I2S_MspInit+0xf4>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_I2S_MspInit+0xf4>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <HAL_I2S_MspInit+0xf4>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000af0:	2310      	movs	r3, #16
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b00:	2306      	movs	r3, #6
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480e      	ldr	r0, [pc, #56]	; (8000b44 <HAL_I2S_MspInit+0xf8>)
 8000b0c:	f000 fab4 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b10:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b22:	2306      	movs	r3, #6
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4806      	ldr	r0, [pc, #24]	; (8000b48 <HAL_I2S_MspInit+0xfc>)
 8000b2e:	f000 faa3 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3738      	adds	r7, #56	; 0x38
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40003c00 	.word	0x40003c00
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020800 	.word	0x40020800

08000b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_SPI_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12b      	bne.n	8000bc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ba6:	23e0      	movs	r3, #224	; 0xe0
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_SPI_MspInit+0x8c>)
 8000bc2:	f000 fa59 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	; 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40013000 	.word	0x40013000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f8d0 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <OTG_FS_IRQHandler+0x10>)
 8000c36:	f000 fe57 	bl	80018e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000584 	.word	0x20000584

08000c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <_sbrk+0x5c>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <_sbrk+0x60>)
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <_sbrk+0x64>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <_sbrk+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c74:	f006 fee4 	bl	8007a40 <__errno>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c82:	e009      	b.n	8000c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <_sbrk+0x64>)
 8000c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20020000 	.word	0x20020000
 8000ca4:	00000400 	.word	0x00000400
 8000ca8:	200001a0 	.word	0x200001a0
 8000cac:	20000898 	.word	0x20000898

08000cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <SystemInit+0x20>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <SystemInit+0x20>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cda:	490e      	ldr	r1, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf0:	4c0b      	ldr	r4, [pc, #44]	; (8000d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cfe:	f7ff ffd7 	bl	8000cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f006 fea3 	bl	8007a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fbe1 	bl	80004cc <main>
  bx  lr    
 8000d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d18:	08007d04 	.word	0x08007d04
  ldr r2, =_sbss
 8000d1c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d20:	20000898 	.word	0x20000898

08000d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_Init+0x40>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_Init+0x40>)
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_Init+0x40>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f94f 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 f808 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f7ff fe06 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023c00 	.word	0x40023c00

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x54>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x58>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f967 	bl	800105e <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00e      	b.n	8000db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d80a      	bhi.n	8000db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da8:	f000 f92f 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_InitTick+0x5c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	200001a4 	.word	0x200001a4

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200001a4 	.word	0x200001a4

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffde 	bl	8000df4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	; (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff29 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff3e 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff8e 	bl	8000f48 <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff31 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffa2 	bl	8000fb0 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e16b      	b.n	800136c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 815a 	bne.w	8001366 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d005      	beq.n	80010ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b03      	cmp	r3, #3
 8001136:	d017      	beq.n	8001168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80b4 	beq.w	8001366 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b60      	ldr	r3, [pc, #384]	; (8001384 <HAL_GPIO_Init+0x30c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a5f      	ldr	r2, [pc, #380]	; (8001384 <HAL_GPIO_Init+0x30c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <HAL_GPIO_Init+0x30c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121a:	4a5b      	ldr	r2, [pc, #364]	; (8001388 <HAL_GPIO_Init+0x310>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_GPIO_Init+0x314>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d02b      	beq.n	800129e <HAL_GPIO_Init+0x226>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a51      	ldr	r2, [pc, #324]	; (8001390 <HAL_GPIO_Init+0x318>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d025      	beq.n	800129a <HAL_GPIO_Init+0x222>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a50      	ldr	r2, [pc, #320]	; (8001394 <HAL_GPIO_Init+0x31c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01f      	beq.n	8001296 <HAL_GPIO_Init+0x21e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4f      	ldr	r2, [pc, #316]	; (8001398 <HAL_GPIO_Init+0x320>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x21a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4e      	ldr	r2, [pc, #312]	; (800139c <HAL_GPIO_Init+0x324>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x216>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4d      	ldr	r2, [pc, #308]	; (80013a0 <HAL_GPIO_Init+0x328>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x212>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4c      	ldr	r2, [pc, #304]	; (80013a4 <HAL_GPIO_Init+0x32c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x20e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4b      	ldr	r2, [pc, #300]	; (80013a8 <HAL_GPIO_Init+0x330>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x20a>
 800127e:	2307      	movs	r3, #7
 8001280:	e00e      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001282:	2308      	movs	r3, #8
 8001284:	e00c      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001286:	2306      	movs	r3, #6
 8001288:	e00a      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800128a:	2305      	movs	r3, #5
 800128c:	e008      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800128e:	2304      	movs	r3, #4
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001292:	2303      	movs	r3, #3
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800129e:	2300      	movs	r3, #0
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b0:	4935      	ldr	r1, [pc, #212]	; (8001388 <HAL_GPIO_Init+0x310>)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012be:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_GPIO_Init+0x334>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e2:	4a32      	ldr	r2, [pc, #200]	; (80013ac <HAL_GPIO_Init+0x334>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <HAL_GPIO_Init+0x334>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800130c:	4a27      	ldr	r2, [pc, #156]	; (80013ac <HAL_GPIO_Init+0x334>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <HAL_GPIO_Init+0x334>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001336:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <HAL_GPIO_Init+0x334>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_GPIO_Init+0x334>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_GPIO_Init+0x334>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	f67f ae90 	bls.w	8001094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40013800 	.word	0x40013800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400
 8001394:	40020800 	.word	0x40020800
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	40021400 	.word	0x40021400
 80013a4:	40021800 	.word	0x40021800
 80013a8:	40021c00 	.word	0x40021c00
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e001      	b.n	80013d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001414:	b08f      	sub	sp, #60	; 0x3c
 8001416:	af0a      	add	r7, sp, #40	; 0x28
 8001418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e054      	b.n	80014ce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f006 f854 	bl	80074ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2203      	movs	r2, #3
 8001448:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f003 f883 	bl	800456e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	687e      	ldr	r6, [r7, #4]
 8001470:	466d      	mov	r5, sp
 8001472:	f106 0410 	add.w	r4, r6, #16
 8001476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001482:	e885 0003 	stmia.w	r5, {r0, r1}
 8001486:	1d33      	adds	r3, r6, #4
 8001488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148a:	6838      	ldr	r0, [r7, #0]
 800148c:	f002 fffd 	bl	800448a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f003 f87a 	bl	8004590 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	687e      	ldr	r6, [r7, #4]
 80014a4:	466d      	mov	r5, sp
 80014a6:	f106 0410 	add.w	r4, r6, #16
 80014aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ba:	1d33      	adds	r3, r6, #4
 80014bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f003 fa02 	bl	80048c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014d6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014d6:	b590      	push	{r4, r7, lr}
 80014d8:	b089      	sub	sp, #36	; 0x24
 80014da:	af04      	add	r7, sp, #16
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	4608      	mov	r0, r1
 80014e0:	4611      	mov	r1, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	4603      	mov	r3, r0
 80014e6:	70fb      	strb	r3, [r7, #3]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70bb      	strb	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_HCD_HC_Init+0x28>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e076      	b.n	80015ec <HAL_HCD_HC_Init+0x116>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	212c      	movs	r1, #44	; 0x2c
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	4413      	add	r3, r2
 8001512:	333d      	adds	r3, #61	; 0x3d
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	212c      	movs	r1, #44	; 0x2c
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4413      	add	r3, r2
 8001524:	3338      	adds	r3, #56	; 0x38
 8001526:	787a      	ldrb	r2, [r7, #1]
 8001528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	212c      	movs	r1, #44	; 0x2c
 8001530:	fb01 f303 	mul.w	r3, r1, r3
 8001534:	4413      	add	r3, r2
 8001536:	3340      	adds	r3, #64	; 0x40
 8001538:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800153a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	212c      	movs	r1, #44	; 0x2c
 8001542:	fb01 f303 	mul.w	r3, r1, r3
 8001546:	4413      	add	r3, r2
 8001548:	3339      	adds	r3, #57	; 0x39
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	212c      	movs	r1, #44	; 0x2c
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	333f      	adds	r3, #63	; 0x3f
 800155c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001560:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	78ba      	ldrb	r2, [r7, #2]
 8001566:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800156a:	b2d0      	uxtb	r0, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	212c      	movs	r1, #44	; 0x2c
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	333a      	adds	r3, #58	; 0x3a
 8001578:	4602      	mov	r2, r0
 800157a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800157c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da09      	bge.n	8001598 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	212c      	movs	r1, #44	; 0x2c
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	4413      	add	r3, r2
 8001590:	333b      	adds	r3, #59	; 0x3b
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e008      	b.n	80015aa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	212c      	movs	r1, #44	; 0x2c
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	333b      	adds	r3, #59	; 0x3b
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	212c      	movs	r1, #44	; 0x2c
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	333c      	adds	r3, #60	; 0x3c
 80015b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015bc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	787c      	ldrb	r4, [r7, #1]
 80015c4:	78ba      	ldrb	r2, [r7, #2]
 80015c6:	78f9      	ldrb	r1, [r7, #3]
 80015c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4623      	mov	r3, r4
 80015da:	f003 fafb 	bl	8004bd4 <USB_HC_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}

080015f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_HCD_HC_Halt+0x1e>
 800160e:	2302      	movs	r3, #2
 8001610:	e00f      	b.n	8001632 <HAL_HCD_HC_Halt+0x3e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fd4b 	bl	80050be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4603      	mov	r3, r0
 800164c:	70fb      	strb	r3, [r7, #3]
 800164e:	460b      	mov	r3, r1
 8001650:	70bb      	strb	r3, [r7, #2]
 8001652:	4613      	mov	r3, r2
 8001654:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	212c      	movs	r1, #44	; 0x2c
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	333b      	adds	r3, #59	; 0x3b
 8001664:	78ba      	ldrb	r2, [r7, #2]
 8001666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	212c      	movs	r1, #44	; 0x2c
 800166e:	fb01 f303 	mul.w	r3, r1, r3
 8001672:	4413      	add	r3, r2
 8001674:	333f      	adds	r3, #63	; 0x3f
 8001676:	787a      	ldrb	r2, [r7, #1]
 8001678:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800167a:	7c3b      	ldrb	r3, [r7, #16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d112      	bne.n	80016a6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	212c      	movs	r1, #44	; 0x2c
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4413      	add	r3, r2
 800168c:	3342      	adds	r3, #66	; 0x42
 800168e:	2203      	movs	r2, #3
 8001690:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	212c      	movs	r1, #44	; 0x2c
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	333d      	adds	r3, #61	; 0x3d
 80016a0:	7f3a      	ldrb	r2, [r7, #28]
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e008      	b.n	80016b8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	3342      	adds	r3, #66	; 0x42
 80016b4:	2202      	movs	r2, #2
 80016b6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	f200 80c6 	bhi.w	800184c <HAL_HCD_HC_SubmitRequest+0x210>
 80016c0:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c6:	bf00      	nop
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	08001839 	.word	0x08001839
 80016d0:	0800173d 	.word	0x0800173d
 80016d4:	080017bb 	.word	0x080017bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016d8:	7c3b      	ldrb	r3, [r7, #16]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	f040 80b8 	bne.w	8001850 <HAL_HCD_HC_SubmitRequest+0x214>
 80016e0:	78bb      	ldrb	r3, [r7, #2]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 80b4 	bne.w	8001850 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016e8:	8b3b      	ldrh	r3, [r7, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d108      	bne.n	8001700 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	3355      	adds	r3, #85	; 0x55
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	212c      	movs	r1, #44	; 0x2c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	3355      	adds	r3, #85	; 0x55
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	212c      	movs	r1, #44	; 0x2c
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	3342      	adds	r3, #66	; 0x42
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001726:	e093      	b.n	8001850 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	212c      	movs	r1, #44	; 0x2c
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	4413      	add	r3, r2
 8001734:	3342      	adds	r3, #66	; 0x42
 8001736:	2202      	movs	r2, #2
 8001738:	701a      	strb	r2, [r3, #0]
      break;
 800173a:	e089      	b.n	8001850 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d11d      	bne.n	800177e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	3355      	adds	r3, #85	; 0x55
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	212c      	movs	r1, #44	; 0x2c
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	4413      	add	r3, r2
 8001762:	3342      	adds	r3, #66	; 0x42
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001768:	e073      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	3342      	adds	r3, #66	; 0x42
 8001778:	2202      	movs	r2, #2
 800177a:	701a      	strb	r2, [r3, #0]
      break;
 800177c:	e069      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	212c      	movs	r1, #44	; 0x2c
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	4413      	add	r3, r2
 800178a:	3354      	adds	r3, #84	; 0x54
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3342      	adds	r3, #66	; 0x42
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
      break;
 80017a4:	e055      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	212c      	movs	r1, #44	; 0x2c
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	3342      	adds	r3, #66	; 0x42
 80017b4:	2202      	movs	r2, #2
 80017b6:	701a      	strb	r2, [r3, #0]
      break;
 80017b8:	e04b      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017ba:	78bb      	ldrb	r3, [r7, #2]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d11d      	bne.n	80017fc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	212c      	movs	r1, #44	; 0x2c
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	3355      	adds	r3, #85	; 0x55
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	212c      	movs	r1, #44	; 0x2c
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
 80017e0:	3342      	adds	r3, #66	; 0x42
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017e6:	e034      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	212c      	movs	r1, #44	; 0x2c
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	3342      	adds	r3, #66	; 0x42
 80017f6:	2202      	movs	r2, #2
 80017f8:	701a      	strb	r2, [r3, #0]
      break;
 80017fa:	e02a      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	212c      	movs	r1, #44	; 0x2c
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	3354      	adds	r3, #84	; 0x54
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	212c      	movs	r1, #44	; 0x2c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	3342      	adds	r3, #66	; 0x42
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
      break;
 8001822:	e016      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	3342      	adds	r3, #66	; 0x42
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
      break;
 8001836:	e00c      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	212c      	movs	r1, #44	; 0x2c
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	3342      	adds	r3, #66	; 0x42
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
      break;
 800184a:	e002      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800184c:	bf00      	nop
 800184e:	e000      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001850:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3344      	adds	r3, #68	; 0x44
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	8b3a      	ldrh	r2, [r7, #24]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	202c      	movs	r0, #44	; 0x2c
 800186c:	fb00 f303 	mul.w	r3, r0, r3
 8001870:	440b      	add	r3, r1
 8001872:	334c      	adds	r3, #76	; 0x4c
 8001874:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	3360      	adds	r3, #96	; 0x60
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3350      	adds	r3, #80	; 0x50
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3339      	adds	r3, #57	; 0x39
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3361      	adds	r3, #97	; 0x61
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	222c      	movs	r2, #44	; 0x2c
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	3338      	adds	r3, #56	; 0x38
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	18d1      	adds	r1, r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	f003 fa9e 	bl	8004e18 <USB_HC_StartXfer>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop

080018e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 ff9f 	bl	8004842 <USB_GetMode>
 8001904:	4603      	mov	r3, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	f040 80f6 	bne.w	8001af8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f002 ff83 	bl	800481c <USB_ReadInterrupts>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80ec 	beq.w	8001af6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f002 ff7a 	bl	800481c <USB_ReadInterrupts>
 8001928:	4603      	mov	r3, r0
 800192a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001932:	d104      	bne.n	800193e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800193c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f002 ff6a 	bl	800481c <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001952:	d104      	bne.n	800195e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800195c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 ff5a 	bl	800481c <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001972:	d104      	bne.n	800197e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800197c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 ff4a 	bl	800481c <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b02      	cmp	r3, #2
 8001990:	d103      	bne.n	800199a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 ff3c 	bl	800481c <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019ae:	d11c      	bne.n	80019ea <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019ca:	2110      	movs	r1, #16
 80019cc:	6938      	ldr	r0, [r7, #16]
 80019ce:	f002 fe2b 	bl	8004628 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019d2:	6938      	ldr	r0, [r7, #16]
 80019d4:	f002 fe5c 	bl	8004690 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2101      	movs	r1, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 f832 	bl	8004a48 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f005 fdff 	bl	80075e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 ff14 	bl	800481c <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fe:	d102      	bne.n	8001a06 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f001 f89e 	bl	8002b42 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 ff06 	bl	800481c <USB_ReadInterrupts>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d106      	bne.n	8001a28 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f005 fdc8 	bl	80075b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2208      	movs	r2, #8
 8001a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 fef5 	bl	800481c <USB_ReadInterrupts>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d101      	bne.n	8001a40 <HAL_HCD_IRQHandler+0x158>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_HCD_IRQHandler+0x15a>
 8001a40:	2300      	movs	r3, #0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d012      	beq.n	8001a6c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0210 	bic.w	r2, r2, #16
 8001a54:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 ffa1 	bl	800299e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0210 	orr.w	r2, r2, #16
 8001a6a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fed3 	bl	800481c <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a80:	d13a      	bne.n	8001af8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fb08 	bl	800509c <USB_HC_ReadInterrupt>
 8001a8c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e025      	b.n	8001ae0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d018      	beq.n	8001ada <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001abe:	d106      	bne.n	8001ace <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8ab 	bl	8001c22 <HCD_HC_IN_IRQHandler>
 8001acc:	e005      	b.n	8001ada <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fbf9 	bl	80022cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3d4      	bcc.n	8001a94 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	e000      	b.n	8001af8 <HAL_HCD_IRQHandler+0x210>
      return;
 8001af6:	bf00      	nop
    }
  }
}
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_HCD_Start+0x16>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e013      	b.n	8001b3c <HAL_HCD_Start+0x3e>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 fff4 	bl	8004b10 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 fd0d 	bl	800454c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_HCD_Stop+0x16>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e00d      	b.n	8001b76 <HAL_HCD_Stop+0x32>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fbe2 	bl	8005330 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 ff96 	bl	8004abc <USB_ResetPort>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3360      	adds	r3, #96	; 0x60
 8001bb4:	781b      	ldrb	r3, [r3, #0]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3350      	adds	r3, #80	; 0x50
 8001bdc:	681b      	ldr	r3, [r3, #0]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 ffda 	bl	8004bb0 <USB_GetCurrentFrame>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 ffb5 	bl	8004b82 <USB_GetHostSpeed>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d11a      	bne.n	8001c88 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2304      	movs	r3, #4
 8001c62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3361      	adds	r3, #97	; 0x61
 8001c72:	2206      	movs	r2, #6
 8001c74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fa1c 	bl	80050be <USB_HC_Halt>
 8001c86:	e0af      	b.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c9e:	d11b      	bne.n	8001cd8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	015a      	lsls	r2, r3, #5
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cac:	461a      	mov	r2, r3
 8001cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3361      	adds	r3, #97	; 0x61
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 f9f4 	bl	80050be <USB_HC_Halt>
 8001cd6:	e087      	b.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d109      	bne.n	8001d02 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	6093      	str	r3, [r2, #8]
 8001d00:	e072      	b.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d11a      	bne.n	8001d4e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d24:	461a      	mov	r2, r3
 8001d26:	2308      	movs	r3, #8
 8001d28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3361      	adds	r3, #97	; 0x61
 8001d38:	2205      	movs	r2, #5
 8001d3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 f9b9 	bl	80050be <USB_HC_Halt>
 8001d4c:	e04c      	b.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d64:	d11b      	bne.n	8001d9e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d72:	461a      	mov	r2, r3
 8001d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	212c      	movs	r1, #44	; 0x2c
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	3361      	adds	r3, #97	; 0x61
 8001d88:	2208      	movs	r2, #8
 8001d8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 f991 	bl	80050be <USB_HC_Halt>
 8001d9c:	e024      	b.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d119      	bne.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3361      	adds	r3, #97	; 0x61
 8001dd4:	2206      	movs	r2, #6
 8001dd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 f96b 	bl	80050be <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfe:	d112      	bne.n	8001e26 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 f957 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e22:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e24:	e24e      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	f040 80df 	bne.w	8001ffc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d019      	beq.n	8001e7a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	3348      	adds	r3, #72	; 0x48
 8001e54:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	0159      	lsls	r1, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e68:	1ad2      	subs	r2, r2, r3
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	202c      	movs	r0, #44	; 0x2c
 8001e70:	fb00 f303 	mul.w	r3, r0, r3
 8001e74:	440b      	add	r3, r1
 8001e76:	3350      	adds	r3, #80	; 0x50
 8001e78:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	212c      	movs	r1, #44	; 0x2c
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	3361      	adds	r3, #97	; 0x61
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	335c      	adds	r3, #92	; 0x5c
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2301      	movs	r3, #1
 8001eae:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	212c      	movs	r1, #44	; 0x2c
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	333f      	adds	r3, #63	; 0x3f
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d009      	beq.n	8001ed8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	333f      	adds	r3, #63	; 0x3f
 8001ed2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d111      	bne.n	8001efc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 f8eb 	bl	80050be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2310      	movs	r3, #16
 8001ef8:	6093      	str	r3, [r2, #8]
 8001efa:	e03a      	b.n	8001f72 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	212c      	movs	r1, #44	; 0x2c
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	333f      	adds	r3, #63	; 0x3f
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d009      	beq.n	8001f24 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	212c      	movs	r1, #44	; 0x2c
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	333f      	adds	r3, #63	; 0x3f
 8001f1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d126      	bne.n	8001f72 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	0151      	lsls	r1, r2, #5
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	440a      	add	r2, r1
 8001f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f42:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	212c      	movs	r1, #44	; 0x2c
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	3360      	adds	r3, #96	; 0x60
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	b2d9      	uxtb	r1, r3
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	202c      	movs	r0, #44	; 0x2c
 8001f60:	fb00 f303 	mul.w	r3, r0, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3360      	adds	r3, #96	; 0x60
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f005 fb49 	bl	8007604 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d12b      	bne.n	8001fd2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	212c      	movs	r1, #44	; 0x2c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	3348      	adds	r3, #72	; 0x48
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	202c      	movs	r0, #44	; 0x2c
 8001f90:	fb00 f202 	mul.w	r2, r0, r2
 8001f94:	440a      	add	r2, r1
 8001f96:	3240      	adds	r2, #64	; 0x40
 8001f98:	8812      	ldrh	r2, [r2, #0]
 8001f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 818e 	beq.w	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	212c      	movs	r1, #44	; 0x2c
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3354      	adds	r3, #84	; 0x54
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2d8      	uxtb	r0, r3
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3354      	adds	r3, #84	; 0x54
 8001fcc:	4602      	mov	r2, r0
 8001fce:	701a      	strb	r2, [r3, #0]
}
 8001fd0:	e178      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3354      	adds	r3, #84	; 0x54
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	f083 0301 	eor.w	r3, r3, #1
 8001fe6:	b2d8      	uxtb	r0, r3
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3354      	adds	r3, #84	; 0x54
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	701a      	strb	r2, [r3, #0]
}
 8001ffa:	e163      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b02      	cmp	r3, #2
 8002010:	f040 80f6 	bne.w	8002200 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3361      	adds	r3, #97	; 0x61
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d109      	bne.n	800203c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3360      	adds	r3, #96	; 0x60
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	e0c9      	b.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	3361      	adds	r3, #97	; 0x61
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d109      	bne.n	8002064 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	212c      	movs	r1, #44	; 0x2c
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	3360      	adds	r3, #96	; 0x60
 800205e:	2205      	movs	r2, #5
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e0b5      	b.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	3361      	adds	r3, #97	; 0x61
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b06      	cmp	r3, #6
 8002076:	d009      	beq.n	800208c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3361      	adds	r3, #97	; 0x61
 8002086:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002088:	2b08      	cmp	r3, #8
 800208a:	d150      	bne.n	800212e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	335c      	adds	r3, #92	; 0x5c
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	202c      	movs	r0, #44	; 0x2c
 80020a4:	fb00 f303 	mul.w	r3, r0, r3
 80020a8:	440b      	add	r3, r1
 80020aa:	335c      	adds	r3, #92	; 0x5c
 80020ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	335c      	adds	r3, #92	; 0x5c
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d912      	bls.n	80020e8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	335c      	adds	r3, #92	; 0x5c
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3360      	adds	r3, #96	; 0x60
 80020e2:	2204      	movs	r2, #4
 80020e4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020e6:	e073      	b.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3360      	adds	r3, #96	; 0x60
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002110:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002118:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4413      	add	r3, r2
 8002122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800212c:	e050      	b.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	3361      	adds	r3, #97	; 0x61
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d122      	bne.n	8002188 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	212c      	movs	r1, #44	; 0x2c
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3360      	adds	r3, #96	; 0x60
 8002150:	2202      	movs	r2, #2
 8002152:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800216a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002172:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e023      	b.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3361      	adds	r3, #97	; 0x61
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b07      	cmp	r3, #7
 800219a:	d119      	bne.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	335c      	adds	r3, #92	; 0x5c
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	202c      	movs	r0, #44	; 0x2c
 80021b4:	fb00 f303 	mul.w	r3, r0, r3
 80021b8:	440b      	add	r3, r1
 80021ba:	335c      	adds	r3, #92	; 0x5c
 80021bc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	3360      	adds	r3, #96	; 0x60
 80021cc:	2204      	movs	r2, #4
 80021ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	461a      	mov	r2, r3
 80021de:	2302      	movs	r3, #2
 80021e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	b2d9      	uxtb	r1, r3
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	202c      	movs	r0, #44	; 0x2c
 80021ec:	fb00 f303 	mul.w	r3, r0, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3360      	adds	r3, #96	; 0x60
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f005 fa03 	bl	8007604 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021fe:	e061      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4413      	add	r3, r2
 8002208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b10      	cmp	r3, #16
 8002214:	d156      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	333f      	adds	r3, #63	; 0x3f
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d111      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	335c      	adds	r3, #92	; 0x5c
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f002 ff39 	bl	80050be <USB_HC_Halt>
 800224c:	e031      	b.n	80022b2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	333f      	adds	r3, #63	; 0x3f
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	333f      	adds	r3, #63	; 0x3f
 8002270:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002272:	2b02      	cmp	r3, #2
 8002274:	d11d      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	335c      	adds	r3, #92	; 0x5c
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d110      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3361      	adds	r3, #97	; 0x61
 800229e:	2203      	movs	r2, #3
 80022a0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 ff06 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	461a      	mov	r2, r3
 80022c0:	2310      	movs	r3, #16
 80022c2:	6093      	str	r3, [r2, #8]
}
 80022c4:	bf00      	nop
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d11a      	bne.n	8002332 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	461a      	mov	r2, r3
 800230a:	2304      	movs	r3, #4
 800230c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3361      	adds	r3, #97	; 0x61
 800231c:	2206      	movs	r2, #6
 800231e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f002 fec7 	bl	80050be <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002330:	e331      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b20      	cmp	r3, #32
 8002346:	d12e      	bne.n	80023a6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	2320      	movs	r3, #32
 8002358:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	333d      	adds	r3, #61	; 0x3d
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	f040 8313 	bne.w	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	333d      	adds	r3, #61	; 0x3d
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3360      	adds	r3, #96	; 0x60
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fe8d 	bl	80050be <USB_HC_Halt>
}
 80023a4:	e2f7      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023bc:	d112      	bne.n	80023e4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	461a      	mov	r2, r3
 80023cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fe6e 	bl	80050be <USB_HC_Halt>
}
 80023e2:	e2d8      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d140      	bne.n	800247c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	335c      	adds	r3, #92	; 0x5c
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d111      	bne.n	8002446 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	333d      	adds	r3, #61	; 0x3d
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002440:	461a      	mov	r2, r3
 8002442:	2340      	movs	r3, #64	; 0x40
 8002444:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	461a      	mov	r2, r3
 8002454:	2301      	movs	r3, #1
 8002456:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3361      	adds	r3, #97	; 0x61
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fe22 	bl	80050be <USB_HC_Halt>
}
 800247a:	e28c      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	d12c      	bne.n	80024ec <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3361      	adds	r3, #97	; 0x61
 80024a0:	2204      	movs	r2, #4
 80024a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	333d      	adds	r3, #61	; 0x3d
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	335c      	adds	r3, #92	; 0x5c
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 fdf3 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	461a      	mov	r2, r3
 80024e6:	2340      	movs	r3, #64	; 0x40
 80024e8:	6093      	str	r3, [r2, #8]
}
 80024ea:	e254      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d11a      	bne.n	8002538 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	461a      	mov	r2, r3
 8002510:	2308      	movs	r3, #8
 8002512:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	3361      	adds	r3, #97	; 0x61
 8002522:	2205      	movs	r2, #5
 8002524:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fdc4 	bl	80050be <USB_HC_Halt>
}
 8002536:	e22e      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b10      	cmp	r3, #16
 800254c:	d140      	bne.n	80025d0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	335c      	adds	r3, #92	; 0x5c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3361      	adds	r3, #97	; 0x61
 800256e:	2203      	movs	r2, #3
 8002570:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	333d      	adds	r3, #61	; 0x3d
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d112      	bne.n	80025ac <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	333c      	adds	r3, #60	; 0x3c
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d108      	bne.n	80025ac <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	333d      	adds	r3, #61	; 0x3d
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 fd81 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	461a      	mov	r2, r3
 80025ca:	2310      	movs	r3, #16
 80025cc:	6093      	str	r3, [r2, #8]
}
 80025ce:	e1e2      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e2:	2b80      	cmp	r3, #128	; 0x80
 80025e4:	d164      	bne.n	80026b0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d111      	bne.n	8002612 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	3361      	adds	r3, #97	; 0x61
 80025fc:	2206      	movs	r2, #6
 80025fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f002 fd57 	bl	80050be <USB_HC_Halt>
 8002610:	e044      	b.n	800269c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	335c      	adds	r3, #92	; 0x5c
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	202c      	movs	r0, #44	; 0x2c
 800262a:	fb00 f303 	mul.w	r3, r0, r3
 800262e:	440b      	add	r3, r1
 8002630:	335c      	adds	r3, #92	; 0x5c
 8002632:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	335c      	adds	r3, #92	; 0x5c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d920      	bls.n	800268a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	335c      	adds	r3, #92	; 0x5c
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3360      	adds	r3, #96	; 0x60
 8002668:	2204      	movs	r2, #4
 800266a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	b2d9      	uxtb	r1, r3
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	202c      	movs	r0, #44	; 0x2c
 8002676:	fb00 f303 	mul.w	r3, r0, r3
 800267a:	4413      	add	r3, r2
 800267c:	3360      	adds	r3, #96	; 0x60
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f004 ffbe 	bl	8007604 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002688:	e008      	b.n	800269c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3360      	adds	r3, #96	; 0x60
 8002698:	2202      	movs	r2, #2
 800269a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	6093      	str	r3, [r2, #8]
}
 80026ae:	e172      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c6:	d11b      	bne.n	8002700 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3361      	adds	r3, #97	; 0x61
 80026d6:	2208      	movs	r2, #8
 80026d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f002 fcea 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	461a      	mov	r2, r3
 80026f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fc:	6093      	str	r3, [r2, #8]
}
 80026fe:	e14a      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	f040 813f 	bne.w	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	3361      	adds	r3, #97	; 0x61
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d17d      	bne.n	8002828 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3360      	adds	r3, #96	; 0x60
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	333f      	adds	r3, #63	; 0x3f
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d00a      	beq.n	8002768 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	333f      	adds	r3, #63	; 0x3f
 8002760:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002762:	2b03      	cmp	r3, #3
 8002764:	f040 8100 	bne.w	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d113      	bne.n	8002798 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3355      	adds	r3, #85	; 0x55
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	f083 0301 	eor.w	r3, r3, #1
 8002784:	b2d8      	uxtb	r0, r3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3355      	adds	r3, #85	; 0x55
 8002794:	4602      	mov	r2, r0
 8002796:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b01      	cmp	r3, #1
 800279e:	f040 80e3 	bne.w	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	334c      	adds	r3, #76	; 0x4c
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80d8 	beq.w	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	334c      	adds	r3, #76	; 0x4c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	202c      	movs	r0, #44	; 0x2c
 80027ce:	fb00 f202 	mul.w	r2, r0, r2
 80027d2:	440a      	add	r2, r1
 80027d4:	3240      	adds	r2, #64	; 0x40
 80027d6:	8812      	ldrh	r2, [r2, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	3b01      	subs	r3, #1
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	202c      	movs	r0, #44	; 0x2c
 80027e2:	fb00 f202 	mul.w	r2, r0, r2
 80027e6:	440a      	add	r2, r1
 80027e8:	3240      	adds	r2, #64	; 0x40
 80027ea:	8812      	ldrh	r2, [r2, #0]
 80027ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80b5 	beq.w	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3355      	adds	r3, #85	; 0x55
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2d8      	uxtb	r0, r3
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3355      	adds	r3, #85	; 0x55
 8002822:	4602      	mov	r2, r0
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e09f      	b.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3361      	adds	r3, #97	; 0x61
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d109      	bne.n	8002850 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3360      	adds	r3, #96	; 0x60
 800284a:	2202      	movs	r2, #2
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e08b      	b.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3361      	adds	r3, #97	; 0x61
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d109      	bne.n	8002878 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	3360      	adds	r3, #96	; 0x60
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e077      	b.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3361      	adds	r3, #97	; 0x61
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b05      	cmp	r3, #5
 800288a:	d109      	bne.n	80028a0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	3360      	adds	r3, #96	; 0x60
 800289a:	2205      	movs	r2, #5
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e063      	b.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3361      	adds	r3, #97	; 0x61
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d009      	beq.n	80028c8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3361      	adds	r3, #97	; 0x61
 80028c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d14f      	bne.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	335c      	adds	r3, #92	; 0x5c
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	202c      	movs	r0, #44	; 0x2c
 80028e0:	fb00 f303 	mul.w	r3, r0, r3
 80028e4:	440b      	add	r3, r1
 80028e6:	335c      	adds	r3, #92	; 0x5c
 80028e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	335c      	adds	r3, #92	; 0x5c
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d912      	bls.n	8002924 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	335c      	adds	r3, #92	; 0x5c
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3360      	adds	r3, #96	; 0x60
 800291e:	2204      	movs	r2, #4
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e021      	b.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3360      	adds	r3, #96	; 0x60
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800294c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002954:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	461a      	mov	r2, r3
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	461a      	mov	r2, r3
 8002976:	2302      	movs	r3, #2
 8002978:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	b2d9      	uxtb	r1, r3
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	202c      	movs	r0, #44	; 0x2c
 8002984:	fb00 f303 	mul.w	r3, r0, r3
 8002988:	4413      	add	r3, r2
 800298a:	3360      	adds	r3, #96	; 0x60
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f004 fe37 	bl	8007604 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002996:	bf00      	nop
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b08a      	sub	sp, #40	; 0x28
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	0c5b      	lsrs	r3, r3, #17
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d004      	beq.n	80029e4 <HCD_RXQLVL_IRQHandler+0x46>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	f000 80a9 	beq.w	8002b34 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029e2:	e0aa      	b.n	8002b3a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80a6 	beq.w	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3344      	adds	r3, #68	; 0x44
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 809b 	beq.w	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3350      	adds	r3, #80	; 0x50
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	441a      	add	r2, r3
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	202c      	movs	r0, #44	; 0x2c
 8002a1c:	fb00 f303 	mul.w	r3, r0, r3
 8002a20:	440b      	add	r3, r1
 8002a22:	334c      	adds	r3, #76	; 0x4c
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d87a      	bhi.n	8002b20 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3344      	adds	r3, #68	; 0x44
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	b292      	uxth	r2, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	f001 fe92 	bl	800476c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3344      	adds	r3, #68	; 0x44
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	441a      	add	r2, r3
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	202c      	movs	r0, #44	; 0x2c
 8002a62:	fb00 f303 	mul.w	r3, r0, r3
 8002a66:	440b      	add	r3, r1
 8002a68:	3344      	adds	r3, #68	; 0x44
 8002a6a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3350      	adds	r3, #80	; 0x50
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	441a      	add	r2, r3
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	202c      	movs	r0, #44	; 0x2c
 8002a86:	fb00 f303 	mul.w	r3, r0, r3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3350      	adds	r3, #80	; 0x50
 8002a8e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	0cdb      	lsrs	r3, r3, #19
 8002aa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3340      	adds	r3, #64	; 0x40
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d13c      	bne.n	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d039      	beq.n	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ada:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3354      	adds	r3, #84	; 0x54
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	f083 0301 	eor.w	r3, r3, #1
 8002b0a:	b2d8      	uxtb	r0, r3
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3354      	adds	r3, #84	; 0x54
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	701a      	strb	r2, [r3, #0]
      break;
 8002b1e:	e00b      	b.n	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3360      	adds	r3, #96	; 0x60
 8002b2e:	2204      	movs	r2, #4
 8002b30:	701a      	strb	r2, [r3, #0]
      break;
 8002b32:	e001      	b.n	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b34:	bf00      	nop
 8002b36:	e000      	b.n	8002b3a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b38:	bf00      	nop
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	3728      	adds	r7, #40	; 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b6e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d10b      	bne.n	8002b92 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f004 fd21 	bl	80075cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d132      	bne.n	8002c02 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d126      	bne.n	8002bfc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d113      	bne.n	8002bde <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bc0:	d106      	bne.n	8002bd0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 ff3d 	bl	8004a48 <USB_InitFSLSPClkSel>
 8002bce:	e011      	b.n	8002bf4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f001 ff36 	bl	8004a48 <USB_InitFSLSPClkSel>
 8002bdc:	e00a      	b.n	8002bf4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d106      	bne.n	8002bf4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bec:	461a      	mov	r2, r3
 8002bee:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bf2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f004 fd13 	bl	8007620 <HAL_HCD_PortEnabled_Callback>
 8002bfa:	e002      	b.n	8002c02 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f004 fd1d 	bl	800763c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d103      	bne.n	8002c14 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f043 0320 	orr.w	r3, r3, #32
 8002c12:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e12b      	b.n	8002e92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fd feb4 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2224      	movs	r2, #36	; 0x24
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c8c:	f001 fa20 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8002c90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4a81      	ldr	r2, [pc, #516]	; (8002e9c <HAL_I2C_Init+0x274>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d807      	bhi.n	8002cac <HAL_I2C_Init+0x84>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a80      	ldr	r2, [pc, #512]	; (8002ea0 <HAL_I2C_Init+0x278>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	bf94      	ite	ls
 8002ca4:	2301      	movls	r3, #1
 8002ca6:	2300      	movhi	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e006      	b.n	8002cba <HAL_I2C_Init+0x92>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a7d      	ldr	r2, [pc, #500]	; (8002ea4 <HAL_I2C_Init+0x27c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bf94      	ite	ls
 8002cb4:	2301      	movls	r3, #1
 8002cb6:	2300      	movhi	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0e7      	b.n	8002e92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a78      	ldr	r2, [pc, #480]	; (8002ea8 <HAL_I2C_Init+0x280>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	0c9b      	lsrs	r3, r3, #18
 8002ccc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a6a      	ldr	r2, [pc, #424]	; (8002e9c <HAL_I2C_Init+0x274>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d802      	bhi.n	8002cfc <HAL_I2C_Init+0xd4>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	e009      	b.n	8002d10 <HAL_I2C_Init+0xe8>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	4a69      	ldr	r2, [pc, #420]	; (8002eac <HAL_I2C_Init+0x284>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	3301      	adds	r3, #1
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	495c      	ldr	r1, [pc, #368]	; (8002e9c <HAL_I2C_Init+0x274>)
 8002d2c:	428b      	cmp	r3, r1
 8002d2e:	d819      	bhi.n	8002d64 <HAL_I2C_Init+0x13c>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1e59      	subs	r1, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d3e:	1c59      	adds	r1, r3, #1
 8002d40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d44:	400b      	ands	r3, r1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_I2C_Init+0x138>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1e59      	subs	r1, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5e:	e051      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002d60:	2304      	movs	r3, #4
 8002d62:	e04f      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <HAL_I2C_Init+0x168>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1e58      	subs	r0, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	440b      	add	r3, r1
 8002d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e012      	b.n	8002db6 <HAL_I2C_Init+0x18e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1e58      	subs	r0, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	0099      	lsls	r1, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Init+0x196>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e022      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10e      	bne.n	8002de4 <HAL_I2C_Init+0x1bc>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1e58      	subs	r0, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	440b      	add	r3, r1
 8002dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de2:	e00f      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e58      	subs	r0, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	0099      	lsls	r1, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	6809      	ldr	r1, [r1, #0]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6911      	ldr	r1, [r2, #16]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	4311      	orrs	r1, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	000186a0 	.word	0x000186a0
 8002ea0:	001e847f 	.word	0x001e847f
 8002ea4:	003d08ff 	.word	0x003d08ff
 8002ea8:	431bde83 	.word	0x431bde83
 8002eac:	10624dd3 	.word	0x10624dd3

08002eb0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e128      	b.n	8003114 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a90      	ldr	r2, [pc, #576]	; (800311c <HAL_I2S_Init+0x26c>)
 8002eda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fd fdb5 	bl	8000a4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ef8:	f023 030f 	bic.w	r3, r3, #15
 8002efc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2202      	movs	r2, #2
 8002f04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d060      	beq.n	8002fd0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f16:	2310      	movs	r3, #16
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e001      	b.n	8002f20 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d802      	bhi.n	8002f2e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f001 f9c4 	bl	80042bc <HAL_RCCEx_GetPeriphCLKFreq>
 8002f34:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3e:	d125      	bne.n	8002f8c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d010      	beq.n	8002f6a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	3305      	adds	r3, #5
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	e01f      	b.n	8002faa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	3305      	adds	r3, #5
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e00e      	b.n	8002faa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	3305      	adds	r3, #5
 8002fa8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4a5c      	ldr	r2, [pc, #368]	; (8003120 <HAL_I2S_Init+0x270>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	08db      	lsrs	r3, r3, #3
 8002fb4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	e003      	b.n	8002fd8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d902      	bls.n	8002fe4 <HAL_I2S_Init+0x134>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2bff      	cmp	r3, #255	; 0xff
 8002fe2:	d907      	bls.n	8002ff4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	f043 0210 	orr.w	r2, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e08f      	b.n	8003114 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	ea42 0103 	orr.w	r1, r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	430a      	orrs	r2, r1
 8003006:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003012:	f023 030f 	bic.w	r3, r3, #15
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6851      	ldr	r1, [r2, #4]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6892      	ldr	r2, [r2, #8]
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68d2      	ldr	r2, [r2, #12]
 8003024:	4311      	orrs	r1, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6992      	ldr	r2, [r2, #24]
 800302a:	430a      	orrs	r2, r1
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003036:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d161      	bne.n	8003104 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a38      	ldr	r2, [pc, #224]	; (8003124 <HAL_I2S_Init+0x274>)
 8003044:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a37      	ldr	r2, [pc, #220]	; (8003128 <HAL_I2S_Init+0x278>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d101      	bne.n	8003054 <HAL_I2S_Init+0x1a4>
 8003050:	4b36      	ldr	r3, [pc, #216]	; (800312c <HAL_I2S_Init+0x27c>)
 8003052:	e001      	b.n	8003058 <HAL_I2S_Init+0x1a8>
 8003054:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	4932      	ldr	r1, [pc, #200]	; (8003128 <HAL_I2S_Init+0x278>)
 8003060:	428a      	cmp	r2, r1
 8003062:	d101      	bne.n	8003068 <HAL_I2S_Init+0x1b8>
 8003064:	4a31      	ldr	r2, [pc, #196]	; (800312c <HAL_I2S_Init+0x27c>)
 8003066:	e001      	b.n	800306c <HAL_I2S_Init+0x1bc>
 8003068:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800306c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003070:	f023 030f 	bic.w	r3, r3, #15
 8003074:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2b      	ldr	r2, [pc, #172]	; (8003128 <HAL_I2S_Init+0x278>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d101      	bne.n	8003084 <HAL_I2S_Init+0x1d4>
 8003080:	4b2a      	ldr	r3, [pc, #168]	; (800312c <HAL_I2S_Init+0x27c>)
 8003082:	e001      	b.n	8003088 <HAL_I2S_Init+0x1d8>
 8003084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003088:	2202      	movs	r2, #2
 800308a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a25      	ldr	r2, [pc, #148]	; (8003128 <HAL_I2S_Init+0x278>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d101      	bne.n	800309a <HAL_I2S_Init+0x1ea>
 8003096:	4b25      	ldr	r3, [pc, #148]	; (800312c <HAL_I2S_Init+0x27c>)
 8003098:	e001      	b.n	800309e <HAL_I2S_Init+0x1ee>
 800309a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030aa:	d003      	beq.n	80030b4 <HAL_I2S_Init+0x204>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d103      	bne.n	80030bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	e001      	b.n	80030c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030ca:	4313      	orrs	r3, r2
 80030cc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030d4:	4313      	orrs	r3, r2
 80030d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030de:	4313      	orrs	r3, r2
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	897b      	ldrh	r3, [r7, #10]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_I2S_Init+0x278>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_I2S_Init+0x24c>
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_I2S_Init+0x27c>)
 80030fa:	e001      	b.n	8003100 <HAL_I2S_Init+0x250>
 80030fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003100:	897a      	ldrh	r2, [r7, #10]
 8003102:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	08003227 	.word	0x08003227
 8003120:	cccccccd 	.word	0xcccccccd
 8003124:	0800333d 	.word	0x0800333d
 8003128:	40003800 	.word	0x40003800
 800312c:	40003400 	.word	0x40003400

08003130 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	881a      	ldrh	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	1c9a      	adds	r2, r3, #2
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10e      	bne.n	80031c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ffb8 	bl	8003130 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	b292      	uxth	r2, r2
 80031dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	1c9a      	adds	r2, r3, #2
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10e      	bne.n	800321e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800320e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff93 	bl	8003144 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b04      	cmp	r3, #4
 8003240:	d13a      	bne.n	80032b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d109      	bne.n	8003260 <I2S_IRQHandler+0x3a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d102      	bne.n	8003260 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ffb4 	bl	80031c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	d126      	bne.n	80032b8 <I2S_IRQHandler+0x92>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b20      	cmp	r3, #32
 8003276:	d11f      	bne.n	80032b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003286:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	f043 0202 	orr.w	r2, r3, #2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ff50 	bl	8003158 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d136      	bne.n	8003332 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d109      	bne.n	80032e2 <I2S_IRQHandler+0xbc>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	2b80      	cmp	r3, #128	; 0x80
 80032da:	d102      	bne.n	80032e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff45 	bl	800316c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d122      	bne.n	8003332 <I2S_IRQHandler+0x10c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d11b      	bne.n	8003332 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003308:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff13 	bl	8003158 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003332:	bf00      	nop
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a92      	ldr	r2, [pc, #584]	; (800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003356:	4b92      	ldr	r3, [pc, #584]	; (80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003358:	e001      	b.n	800335e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800335a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a8b      	ldr	r2, [pc, #556]	; (800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003374:	4b8a      	ldr	r3, [pc, #552]	; (80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003376:	e001      	b.n	800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003388:	d004      	beq.n	8003394 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 8099 	bne.w	80034c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b02      	cmp	r3, #2
 800339c:	d107      	bne.n	80033ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f925 	bl	80035f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d107      	bne.n	80033c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f9c8 	bl	8003758 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d13a      	bne.n	8003448 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d035      	beq.n	8003448 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a6e      	ldr	r2, [pc, #440]	; (800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033e6:	4b6e      	ldr	r3, [pc, #440]	; (80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033e8:	e001      	b.n	80033ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4969      	ldr	r1, [pc, #420]	; (800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033f6:	428b      	cmp	r3, r1
 80033f8:	d101      	bne.n	80033fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80033fa:	4b69      	ldr	r3, [pc, #420]	; (80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033fc:	e001      	b.n	8003402 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80033fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003402:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003406:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003416:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	f043 0202 	orr.w	r2, r3, #2
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff fe88 	bl	8003158 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b08      	cmp	r3, #8
 8003450:	f040 80c3 	bne.w	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80bd 	beq.w	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800346e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a49      	ldr	r2, [pc, #292]	; (800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800347a:	4b49      	ldr	r3, [pc, #292]	; (80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800347c:	e001      	b.n	8003482 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800347e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4944      	ldr	r1, [pc, #272]	; (800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800348a:	428b      	cmp	r3, r1
 800348c:	d101      	bne.n	8003492 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800348e:	4b44      	ldr	r3, [pc, #272]	; (80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003490:	e001      	b.n	8003496 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003496:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800349a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800349c:	2300      	movs	r3, #0
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f043 0204 	orr.w	r2, r3, #4
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff fe4a 	bl	8003158 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034c4:	e089      	b.n	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d107      	bne.n	80034e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8be 	bl	800365c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d107      	bne.n	80034fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f8fd 	bl	80036f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	d12f      	bne.n	8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d02a      	beq.n	8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800351c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1e      	ldr	r2, [pc, #120]	; (800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800352a:	e001      	b.n	8003530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800352c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4919      	ldr	r1, [pc, #100]	; (800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003538:	428b      	cmp	r3, r1
 800353a:	d101      	bne.n	8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800353c:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800353e:	e001      	b.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003540:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003544:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003548:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f043 0202 	orr.w	r2, r3, #2
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fdfa 	bl	8003158 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b08      	cmp	r3, #8
 800356c:	d136      	bne.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d031      	beq.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a07      	ldr	r2, [pc, #28]	; (800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003584:	e001      	b.n	800358a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003586:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4902      	ldr	r1, [pc, #8]	; (800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003592:	428b      	cmp	r3, r1
 8003594:	d106      	bne.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003596:	4b02      	ldr	r3, [pc, #8]	; (80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003598:	e006      	b.n	80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800359a:	bf00      	nop
 800359c:	40003800 	.word	0x40003800
 80035a0:	40003400 	.word	0x40003400
 80035a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f043 0204 	orr.w	r2, r3, #4
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff fdc0 	bl	8003158 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035d8:	e000      	b.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035da:	bf00      	nop
}
 80035dc:	bf00      	nop
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	1c99      	adds	r1, r3, #2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6251      	str	r1, [r2, #36]	; 0x24
 800360a:	881a      	ldrh	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d113      	bne.n	8003652 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003638:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ffc9 	bl	80035e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	1c99      	adds	r1, r3, #2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6251      	str	r1, [r2, #36]	; 0x24
 800366e:	8819      	ldrh	r1, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <I2SEx_TxISR_I2SExt+0x90>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d101      	bne.n	800367e <I2SEx_TxISR_I2SExt+0x22>
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <I2SEx_TxISR_I2SExt+0x94>)
 800367c:	e001      	b.n	8003682 <I2SEx_TxISR_I2SExt+0x26>
 800367e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003682:	460a      	mov	r2, r1
 8003684:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d121      	bne.n	80036e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <I2SEx_TxISR_I2SExt+0x90>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d101      	bne.n	80036ac <I2SEx_TxISR_I2SExt+0x50>
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <I2SEx_TxISR_I2SExt+0x94>)
 80036aa:	e001      	b.n	80036b0 <I2SEx_TxISR_I2SExt+0x54>
 80036ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	490d      	ldr	r1, [pc, #52]	; (80036ec <I2SEx_TxISR_I2SExt+0x90>)
 80036b8:	428b      	cmp	r3, r1
 80036ba:	d101      	bne.n	80036c0 <I2SEx_TxISR_I2SExt+0x64>
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <I2SEx_TxISR_I2SExt+0x94>)
 80036be:	e001      	b.n	80036c4 <I2SEx_TxISR_I2SExt+0x68>
 80036c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff81 	bl	80035e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40003800 	.word	0x40003800
 80036f0:	40003400 	.word	0x40003400

080036f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68d8      	ldr	r0, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	1c99      	adds	r1, r3, #2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800370c:	b282      	uxth	r2, r0
 800370e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d113      	bne.n	8003750 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003736:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff4a 	bl	80035e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <I2SEx_RxISR_I2SExt+0x90>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <I2SEx_RxISR_I2SExt+0x16>
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <I2SEx_RxISR_I2SExt+0x94>)
 800376c:	e001      	b.n	8003772 <I2SEx_RxISR_I2SExt+0x1a>
 800376e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003772:	68d8      	ldr	r0, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	1c99      	adds	r1, r3, #2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800377e:	b282      	uxth	r2, r0
 8003780:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d121      	bne.n	80037de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <I2SEx_RxISR_I2SExt+0x90>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <I2SEx_RxISR_I2SExt+0x50>
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <I2SEx_RxISR_I2SExt+0x94>)
 80037a6:	e001      	b.n	80037ac <I2SEx_RxISR_I2SExt+0x54>
 80037a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	490d      	ldr	r1, [pc, #52]	; (80037e8 <I2SEx_RxISR_I2SExt+0x90>)
 80037b4:	428b      	cmp	r3, r1
 80037b6:	d101      	bne.n	80037bc <I2SEx_RxISR_I2SExt+0x64>
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <I2SEx_RxISR_I2SExt+0x94>)
 80037ba:	e001      	b.n	80037c0 <I2SEx_RxISR_I2SExt+0x68>
 80037bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff03 	bl	80035e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40003800 	.word	0x40003800
 80037ec:	40003400 	.word	0x40003400

080037f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e267      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d075      	beq.n	80038fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800380e:	4b88      	ldr	r3, [pc, #544]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b04      	cmp	r3, #4
 8003818:	d00c      	beq.n	8003834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800381a:	4b85      	ldr	r3, [pc, #532]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003822:	2b08      	cmp	r3, #8
 8003824:	d112      	bne.n	800384c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003826:	4b82      	ldr	r3, [pc, #520]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003832:	d10b      	bne.n	800384c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	4b7e      	ldr	r3, [pc, #504]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d05b      	beq.n	80038f8 <HAL_RCC_OscConfig+0x108>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d157      	bne.n	80038f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e242      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003854:	d106      	bne.n	8003864 <HAL_RCC_OscConfig+0x74>
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a75      	ldr	r2, [pc, #468]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e01d      	b.n	80038a0 <HAL_RCC_OscConfig+0xb0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x98>
 800386e:	4b70      	ldr	r3, [pc, #448]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6f      	ldr	r2, [pc, #444]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	4b6d      	ldr	r3, [pc, #436]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6c      	ldr	r2, [pc, #432]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0xb0>
 8003888:	4b69      	ldr	r3, [pc, #420]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a68      	ldr	r2, [pc, #416]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800388e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	4b66      	ldr	r3, [pc, #408]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a65      	ldr	r2, [pc, #404]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800389a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d013      	beq.n	80038d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fd faa4 	bl	8000df4 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fd faa0 	bl	8000df4 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e207      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0xc0>
 80038ce:	e014      	b.n	80038fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fd fa90 	bl	8000df4 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fd fa8c 	bl	8000df4 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e1f3      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ea:	4b51      	ldr	r3, [pc, #324]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0xe8>
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d063      	beq.n	80039ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003906:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003912:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800391a:	2b08      	cmp	r3, #8
 800391c:	d11c      	bne.n	8003958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391e:	4b44      	ldr	r3, [pc, #272]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d116      	bne.n	8003958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_RCC_OscConfig+0x152>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d001      	beq.n	8003942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e1c7      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003942:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4937      	ldr	r1, [pc, #220]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003956:	e03a      	b.n	80039ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003960:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <HAL_RCC_OscConfig+0x244>)
 8003962:	2201      	movs	r2, #1
 8003964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003966:	f7fd fa45 	bl	8000df4 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396e:	f7fd fa41 	bl	8000df4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e1a8      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003980:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398c:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4925      	ldr	r1, [pc, #148]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
 80039a0:	e015      	b.n	80039ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCC_OscConfig+0x244>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd fa24 	bl	8000df4 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b0:	f7fd fa20 	bl	8000df4 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e187      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c2:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d036      	beq.n	8003a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <HAL_RCC_OscConfig+0x248>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fd fa04 	bl	8000df4 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f0:	f7fd fa00 	bl	8000df4 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e167      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x200>
 8003a0e:	e01b      	b.n	8003a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_OscConfig+0x248>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fd f9ed 	bl	8000df4 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1c:	e00e      	b.n	8003a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fd f9e9 	bl	8000df4 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d907      	bls.n	8003a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e150      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
 8003a30:	40023800 	.word	0x40023800
 8003a34:	42470000 	.word	0x42470000
 8003a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	4b88      	ldr	r3, [pc, #544]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ea      	bne.n	8003a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8097 	beq.w	8003b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5a:	4b81      	ldr	r3, [pc, #516]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	4b7d      	ldr	r3, [pc, #500]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4a7c      	ldr	r2, [pc, #496]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6413      	str	r3, [r2, #64]	; 0x40
 8003a76:	4b7a      	ldr	r3, [pc, #488]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a86:	4b77      	ldr	r3, [pc, #476]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d118      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a92:	4b74      	ldr	r3, [pc, #464]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a73      	ldr	r2, [pc, #460]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9e:	f7fd f9a9 	bl	8000df4 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa6:	f7fd f9a5 	bl	8000df4 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e10c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x2ea>
 8003acc:	4b64      	ldr	r3, [pc, #400]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4a63      	ldr	r2, [pc, #396]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad8:	e01c      	b.n	8003b14 <HAL_RCC_OscConfig+0x324>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x30c>
 8003ae2:	4b5f      	ldr	r3, [pc, #380]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4a5e      	ldr	r2, [pc, #376]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	6713      	str	r3, [r2, #112]	; 0x70
 8003aee:	4b5c      	ldr	r3, [pc, #368]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a5b      	ldr	r2, [pc, #364]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0x324>
 8003afc:	4b58      	ldr	r3, [pc, #352]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	4a57      	ldr	r2, [pc, #348]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	6713      	str	r3, [r2, #112]	; 0x70
 8003b08:	4b55      	ldr	r3, [pc, #340]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a54      	ldr	r2, [pc, #336]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f023 0304 	bic.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fd f96a 	bl	8000df4 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fd f966 	bl	8000df4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0cb      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3a:	4b49      	ldr	r3, [pc, #292]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ee      	beq.n	8003b24 <HAL_RCC_OscConfig+0x334>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b48:	f7fd f954 	bl	8000df4 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fd f950 	bl	8000df4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e0b5      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b66:	4b3e      	ldr	r3, [pc, #248]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1ee      	bne.n	8003b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b78:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	4a38      	ldr	r2, [pc, #224]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80a1 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b8e:	4b34      	ldr	r3, [pc, #208]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d05c      	beq.n	8003c54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d141      	bne.n	8003c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fd f924 	bl	8000df4 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fd f920 	bl	8000df4 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e087      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	019b      	lsls	r3, r3, #6
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	3b01      	subs	r3, #1
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	491b      	ldr	r1, [pc, #108]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fd f8f9 	bl	8000df4 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fd f8f5 	bl	8000df4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e05c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x416>
 8003c24:	e054      	b.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd f8e2 	bl	8000df4 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd f8de 	bl	8000df4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e045      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x444>
 8003c52:	e03d      	b.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e038      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40007000 	.word	0x40007000
 8003c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <HAL_RCC_OscConfig+0x4ec>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d028      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d121      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d11a      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d111      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d107      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800

08003ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0cc      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b68      	ldr	r3, [pc, #416]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d90c      	bls.n	8003d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b65      	ldr	r3, [pc, #404]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b63      	ldr	r3, [pc, #396]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0b8      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d020      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d34:	4b59      	ldr	r3, [pc, #356]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d4c:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a52      	ldr	r2, [pc, #328]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d58:	4b50      	ldr	r3, [pc, #320]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	494d      	ldr	r1, [pc, #308]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d044      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7e:	4b47      	ldr	r3, [pc, #284]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d119      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e07f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d003      	beq.n	8003d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d107      	bne.n	8003dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e06f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dae:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e067      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f023 0203 	bic.w	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4934      	ldr	r1, [pc, #208]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd0:	f7fd f810 	bl	8000df4 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd8:	f7fd f80c 	bl	8000df4 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e04f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 020c 	and.w	r2, r3, #12
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d1eb      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d20c      	bcs.n	8003e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e032      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e34:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4916      	ldr	r1, [pc, #88]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	490e      	ldr	r1, [pc, #56]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e66:	f000 f821 	bl	8003eac <HAL_RCC_GetSysClockFreq>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	490a      	ldr	r1, [pc, #40]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	5ccb      	ldrb	r3, [r1, r3]
 8003e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7e:	4a09      	ldr	r2, [pc, #36]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc ff70 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023c00 	.word	0x40023c00
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	08007cdc 	.word	0x08007cdc
 8003ea4:	20000000 	.word	0x20000000
 8003ea8:	20000004 	.word	0x20000004

08003eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb0:	b094      	sub	sp, #80	; 0x50
 8003eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb8:	2300      	movs	r3, #0
 8003eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ec4:	4b79      	ldr	r3, [pc, #484]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d00d      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x40>
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	f200 80e1 	bhi.w	8004098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ede:	e0db      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4b73      	ldr	r3, [pc, #460]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ee4:	e0db      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ee6:	4b73      	ldr	r3, [pc, #460]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ee8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eea:	e0d8      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eec:	4b6f      	ldr	r3, [pc, #444]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d063      	beq.n	8003fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f02:	4b6a      	ldr	r3, [pc, #424]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	2200      	movs	r2, #0
 8003f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f14:	633b      	str	r3, [r7, #48]	; 0x30
 8003f16:	2300      	movs	r3, #0
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f1e:	4622      	mov	r2, r4
 8003f20:	462b      	mov	r3, r5
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f04f 0100 	mov.w	r1, #0
 8003f2a:	0159      	lsls	r1, r3, #5
 8003f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f30:	0150      	lsls	r0, r2, #5
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4621      	mov	r1, r4
 8003f38:	1a51      	subs	r1, r2, r1
 8003f3a:	6139      	str	r1, [r7, #16]
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f50:	4659      	mov	r1, fp
 8003f52:	018b      	lsls	r3, r1, #6
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	018a      	lsls	r2, r1, #6
 8003f5e:	4651      	mov	r1, sl
 8003f60:	ebb2 0801 	subs.w	r8, r2, r1
 8003f64:	4659      	mov	r1, fp
 8003f66:	eb63 0901 	sbc.w	r9, r3, r1
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f7e:	4690      	mov	r8, r2
 8003f80:	4699      	mov	r9, r3
 8003f82:	4623      	mov	r3, r4
 8003f84:	eb18 0303 	adds.w	r3, r8, r3
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	462b      	mov	r3, r5
 8003f8c:	eb49 0303 	adc.w	r3, r9, r3
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	024b      	lsls	r3, r1, #9
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fa8:	4621      	mov	r1, r4
 8003faa:	024a      	lsls	r2, r1, #9
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fbc:	f7fc f904 	bl	80001c8 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc8:	e058      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fca:	4b38      	ldr	r3, [pc, #224]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	099b      	lsrs	r3, r3, #6
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	f04f 0000 	mov.w	r0, #0
 8003fec:	f04f 0100 	mov.w	r1, #0
 8003ff0:	0159      	lsls	r1, r3, #5
 8003ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff6:	0150      	lsls	r0, r2, #5
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004002:	4649      	mov	r1, r9
 8004004:	eb63 0b01 	sbc.w	fp, r3, r1
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800401c:	ebb2 040a 	subs.w	r4, r2, sl
 8004020:	eb63 050b 	sbc.w	r5, r3, fp
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	00eb      	lsls	r3, r5, #3
 800402e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004032:	00e2      	lsls	r2, r4, #3
 8004034:	4614      	mov	r4, r2
 8004036:	461d      	mov	r5, r3
 8004038:	4643      	mov	r3, r8
 800403a:	18e3      	adds	r3, r4, r3
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	464b      	mov	r3, r9
 8004040:	eb45 0303 	adc.w	r3, r5, r3
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004052:	4629      	mov	r1, r5
 8004054:	028b      	lsls	r3, r1, #10
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800405c:	4621      	mov	r1, r4
 800405e:	028a      	lsls	r2, r1, #10
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004066:	2200      	movs	r2, #0
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	61fa      	str	r2, [r7, #28]
 800406c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004070:	f7fc f8aa 	bl	80001c8 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	3301      	adds	r3, #1
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800408c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800408e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004096:	e002      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800409a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800409c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3750      	adds	r7, #80	; 0x50
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	007a1200 	.word	0x007a1200

080040b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <HAL_RCC_GetHCLKFreq+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000000 	.word	0x20000000

080040d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040d4:	f7ff fff0 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0a9b      	lsrs	r3, r3, #10
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	08007cec 	.word	0x08007cec

080040f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800411c:	2b00      	cmp	r3, #0
 800411e:	d035      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004120:	4b62      	ldr	r3, [pc, #392]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004126:	f7fc fe65 	bl	8000df4 <HAL_GetTick>
 800412a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800412e:	f7fc fe61 	bl	8000df4 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e0b0      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004140:	4b5b      	ldr	r3, [pc, #364]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	019a      	lsls	r2, r3, #6
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	071b      	lsls	r3, r3, #28
 8004158:	4955      	ldr	r1, [pc, #340]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004160:	4b52      	ldr	r3, [pc, #328]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004166:	f7fc fe45 	bl	8000df4 <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800416e:	f7fc fe41 	bl	8000df4 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e090      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004180:	4b4b      	ldr	r3, [pc, #300]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8083 	beq.w	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	4b44      	ldr	r3, [pc, #272]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	4a43      	ldr	r2, [pc, #268]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a8:	6413      	str	r3, [r2, #64]	; 0x40
 80041aa:	4b41      	ldr	r3, [pc, #260]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041b6:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a3e      	ldr	r2, [pc, #248]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041c2:	f7fc fe17 	bl	8000df4 <HAL_GetTick>
 80041c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041ca:	f7fc fe13 	bl	8000df4 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e062      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041dc:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041e8:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02f      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	429a      	cmp	r2, r3
 8004204:	d028      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004206:	4b2a      	ldr	r3, [pc, #168]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004210:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004216:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800421c:	4a24      	ldr	r2, [pc, #144]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004222:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b01      	cmp	r3, #1
 800422c:	d114      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800422e:	f7fc fde1 	bl	8000df4 <HAL_GetTick>
 8004232:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	e00a      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fc fddd 	bl	8000df4 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e02a      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	4b18      	ldr	r3, [pc, #96]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ee      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004264:	d10d      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004266:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427a:	490d      	ldr	r1, [pc, #52]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800427c:	4313      	orrs	r3, r2
 800427e:	608b      	str	r3, [r1, #8]
 8004280:	e005      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004288:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800428c:	6093      	str	r3, [r2, #8]
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004290:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429a:	4905      	ldr	r1, [pc, #20]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429c:	4313      	orrs	r3, r2
 800429e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	42470068 	.word	0x42470068
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40007000 	.word	0x40007000
 80042b8:	42470e40 	.word	0x42470e40

080042bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d13e      	bne.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042da:	4b23      	ldr	r3, [pc, #140]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d12f      	bne.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042f0:	4b1e      	ldr	r3, [pc, #120]	; (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042f2:	617b      	str	r3, [r7, #20]
          break;
 80042f4:	e02f      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042f6:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004302:	d108      	bne.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004304:	4b18      	ldr	r3, [pc, #96]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	e007      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800431e:	4a15      	ldr	r2, [pc, #84]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800433c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004340:	0f1b      	lsrs	r3, r3, #28
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	617b      	str	r3, [r7, #20]
          break;
 800434e:	e002      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
          break;
 8004354:	bf00      	nop
        }
      }
      break;
 8004356:	bf00      	nop
    }
  }
  return frequency;
 8004358:	697b      	ldr	r3, [r7, #20]
}
 800435a:	4618      	mov	r0, r3
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40023800 	.word	0x40023800
 800436c:	00bb8000 	.word	0x00bb8000
 8004370:	007a1200 	.word	0x007a1200
 8004374:	00f42400 	.word	0x00f42400

08004378 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e07b      	b.n	8004482 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b00      	cmp	r3, #0
 8004390:	d108      	bne.n	80043a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439a:	d009      	beq.n	80043b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	61da      	str	r2, [r3, #28]
 80043a2:	e005      	b.n	80043b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fc fbbe 	bl	8000b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004434:	ea42 0103 	orr.w	r1, r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	f003 0104 	and.w	r1, r3, #4
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0210 	and.w	r2, r3, #16
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004470:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800448a:	b084      	sub	sp, #16
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	f107 001c 	add.w	r0, r7, #28
 8004498:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d122      	bne.n	80044e8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f9bf 	bl	8004860 <USB_CoreReset>
 80044e2:	4603      	mov	r3, r0
 80044e4:	73fb      	strb	r3, [r7, #15]
 80044e6:	e01a      	b.n	800451e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f9b3 	bl	8004860 <USB_CoreReset>
 80044fa:	4603      	mov	r3, r0
 80044fc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	; 0x38
 8004510:	e005      	b.n	800451e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	2b01      	cmp	r3, #1
 8004522:	d10b      	bne.n	800453c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f043 0206 	orr.w	r2, r3, #6
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800453c:	7bfb      	ldrb	r3, [r7, #15]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004548:	b004      	add	sp, #16
 800454a:	4770      	bx	lr

0800454c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f043 0201 	orr.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f023 0201 	bic.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d115      	bne.n	80045de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045be:	2001      	movs	r0, #1
 80045c0:	f7fc fc24 	bl	8000e0c <HAL_Delay>
      ms++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f939 	bl	8004842 <USB_GetMode>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d01e      	beq.n	8004614 <USB_SetCurrentMode+0x84>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b31      	cmp	r3, #49	; 0x31
 80045da:	d9f0      	bls.n	80045be <USB_SetCurrentMode+0x2e>
 80045dc:	e01a      	b.n	8004614 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d115      	bne.n	8004610 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045f0:	2001      	movs	r0, #1
 80045f2:	f7fc fc0b 	bl	8000e0c <HAL_Delay>
      ms++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f920 	bl	8004842 <USB_GetMode>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <USB_SetCurrentMode+0x84>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b31      	cmp	r3, #49	; 0x31
 800460c:	d9f0      	bls.n	80045f0 <USB_SetCurrentMode+0x60>
 800460e:	e001      	b.n	8004614 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e005      	b.n	8004620 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b32      	cmp	r3, #50	; 0x32
 8004618:	d101      	bne.n	800461e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3301      	adds	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a13      	ldr	r2, [pc, #76]	; (800468c <USB_FlushTxFifo+0x64>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e01b      	b.n	8004680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	daf2      	bge.n	8004636 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	019b      	lsls	r3, r3, #6
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3301      	adds	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <USB_FlushTxFifo+0x64>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e006      	b.n	8004680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b20      	cmp	r3, #32
 800467c:	d0f0      	beq.n	8004660 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	00030d40 	.word	0x00030d40

08004690 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3301      	adds	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a11      	ldr	r2, [pc, #68]	; (80046ec <USB_FlushRxFifo+0x5c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e018      	b.n	80046e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	daf2      	bge.n	800469c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2210      	movs	r2, #16
 80046be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3301      	adds	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a08      	ldr	r2, [pc, #32]	; (80046ec <USB_FlushRxFifo+0x5c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e006      	b.n	80046e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d0f0      	beq.n	80046c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	00030d40 	.word	0x00030d40

080046f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b089      	sub	sp, #36	; 0x24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	4611      	mov	r1, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	460b      	mov	r3, r1
 8004700:	71fb      	strb	r3, [r7, #7]
 8004702:	4613      	mov	r3, r2
 8004704:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800470e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004712:	2b00      	cmp	r3, #0
 8004714:	d123      	bne.n	800475e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004716:	88bb      	ldrh	r3, [r7, #4]
 8004718:	3303      	adds	r3, #3
 800471a:	089b      	lsrs	r3, r3, #2
 800471c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	e018      	b.n	8004756 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	031a      	lsls	r2, r3, #12
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4413      	add	r3, r2
 800472c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004730:	461a      	mov	r2, r3
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	3301      	adds	r3, #1
 800473c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3301      	adds	r3, #1
 8004742:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	3301      	adds	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3301      	adds	r3, #1
 800474e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	3301      	adds	r3, #1
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	429a      	cmp	r2, r3
 800475c:	d3e2      	bcc.n	8004724 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3724      	adds	r7, #36	; 0x24
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800476c:	b480      	push	{r7}
 800476e:	b08b      	sub	sp, #44	; 0x2c
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	4613      	mov	r3, r2
 8004778:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	b29b      	uxth	r3, r3
 8004788:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004792:	2300      	movs	r3, #0
 8004794:	623b      	str	r3, [r7, #32]
 8004796:	e014      	b.n	80047c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	3301      	adds	r3, #1
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	3301      	adds	r3, #1
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	3301      	adds	r3, #1
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	3301      	adds	r3, #1
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	3301      	adds	r3, #1
 80047c0:	623b      	str	r3, [r7, #32]
 80047c2:	6a3a      	ldr	r2, [r7, #32]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d3e6      	bcc.n	8004798 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047ca:	8bfb      	ldrh	r3, [r7, #30]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01e      	beq.n	800480e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047da:	461a      	mov	r2, r3
 80047dc:	f107 0310 	add.w	r3, r7, #16
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	701a      	strb	r2, [r3, #0]
      i++;
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	3301      	adds	r3, #1
 80047fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	3301      	adds	r3, #1
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004802:	8bfb      	ldrh	r3, [r7, #30]
 8004804:	3b01      	subs	r3, #1
 8004806:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004808:	8bfb      	ldrh	r3, [r7, #30]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1ea      	bne.n	80047e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004810:	4618      	mov	r0, r3
 8004812:	372c      	adds	r7, #44	; 0x2c
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4013      	ands	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004834:	68fb      	ldr	r3, [r7, #12]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f003 0301 	and.w	r3, r3, #1
}
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3301      	adds	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <USB_CoreReset+0x64>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e01b      	b.n	80048b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	daf2      	bge.n	800486c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f043 0201 	orr.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <USB_CoreReset+0x64>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e006      	b.n	80048b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d0f0      	beq.n	8004896 <USB_CoreReset+0x36>

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	00030d40 	.word	0x00030d40

080048c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048c8:	b084      	sub	sp, #16
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048e8:	461a      	mov	r2, r3
 80048ea:	2300      	movs	r3, #0
 80048ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d018      	beq.n	8004950 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10a      	bne.n	800493a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	e014      	b.n	8004964 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004948:	f023 0304 	bic.w	r3, r3, #4
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	e009      	b.n	8004964 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800495e:	f023 0304 	bic.w	r3, r3, #4
 8004962:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004964:	2110      	movs	r1, #16
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fe5e 	bl	8004628 <USB_FlushTxFifo>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff fe8a 	bl	8004690 <USB_FlushRxFifo>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	e015      	b.n	80049b8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004998:	461a      	mov	r2, r3
 800499a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800499e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ac:	461a      	mov	r2, r3
 80049ae:	2300      	movs	r3, #0
 80049b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	3301      	adds	r3, #1
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d3e5      	bcc.n	800498c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <USB_HostInit+0x16c>)
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <USB_HostInit+0x170>)
 80049ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80049f0:	e009      	b.n	8004a06 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2280      	movs	r2, #128	; 0x80
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <USB_HostInit+0x174>)
 80049fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a0f      	ldr	r2, [pc, #60]	; (8004a40 <USB_HostInit+0x178>)
 8004a02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f043 0210 	orr.w	r2, r3, #16
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699a      	ldr	r2, [r3, #24]
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <USB_HostInit+0x17c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a30:	b004      	add	sp, #16
 8004a32:	4770      	bx	lr
 8004a34:	01000200 	.word	0x01000200
 8004a38:	00e00300 	.word	0x00e00300
 8004a3c:	00600080 	.word	0x00600080
 8004a40:	004000e0 	.word	0x004000e0
 8004a44:	a3200008 	.word	0xa3200008

08004a48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d107      	bne.n	8004a9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a90:	461a      	mov	r2, r3
 8004a92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a96:	6053      	str	r3, [r2, #4]
 8004a98:	e009      	b.n	8004aae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d106      	bne.n	8004aae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f241 7370 	movw	r3, #6000	; 0x1770
 8004aac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004adc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004aec:	2064      	movs	r0, #100	; 0x64
 8004aee:	f7fc f98d 	bl	8000e0c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b00:	200a      	movs	r0, #10
 8004b02:	f7fc f983 	bl	8000e0c <HAL_Delay>

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <USB_DriveVbus+0x44>
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d106      	bne.n	8004b54 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b52:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5e:	d109      	bne.n	8004b74 <USB_DriveVbus+0x64>
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b72:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b085      	sub	sp, #20
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	0c5b      	lsrs	r3, r3, #17
 8004ba0:	f003 0303 	and.w	r3, r3, #3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	b29b      	uxth	r3, r3
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	461a      	mov	r2, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	70fb      	strb	r3, [r7, #3]
 8004be6:	460b      	mov	r3, r1
 8004be8:	70bb      	strb	r3, [r7, #2]
 8004bea:	4613      	mov	r3, r2
 8004bec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c02:	461a      	mov	r2, r3
 8004c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d87e      	bhi.n	8004d10 <USB_HC_Init+0x13c>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <USB_HC_Init+0x44>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c29 	.word	0x08004c29
 8004c1c:	08004cd3 	.word	0x08004cd3
 8004c20:	08004c29 	.word	0x08004c29
 8004c24:	08004c95 	.word	0x08004c95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c34:	461a      	mov	r2, r3
 8004c36:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	da10      	bge.n	8004c66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c62:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004c64:	e057      	b.n	8004d16 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d051      	beq.n	8004d16 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c90:	60d3      	str	r3, [r2, #12]
      break;
 8004c92:	e040      	b.n	8004d16 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f240 639d 	movw	r3, #1693	; 0x69d
 8004ca6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ca8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	da34      	bge.n	8004d1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cce:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004cd0:	e023      	b.n	8004d1a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f240 2325 	movw	r3, #549	; 0x225
 8004ce4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ce6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	da17      	bge.n	8004d1e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d08:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d0e:	e006      	b.n	8004d1e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	77fb      	strb	r3, [r7, #31]
      break;
 8004d14:	e004      	b.n	8004d20 <USB_HC_Init+0x14c>
      break;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <USB_HC_Init+0x14c>
      break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <USB_HC_Init+0x14c>
      break;
 8004d1e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	0151      	lsls	r1, r2, #5
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	440a      	add	r2, r1
 8004d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d3a:	f043 0302 	orr.w	r3, r3, #2
 8004d3e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d46:	699a      	ldr	r2, [r3, #24]
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	2101      	movs	r1, #1
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	6939      	ldr	r1, [r7, #16]
 8004d56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004d6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da03      	bge.n	8004d7a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e001      	b.n	8004d7e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff feff 	bl	8004b82 <USB_GetHostSpeed>
 8004d84:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004d86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d106      	bne.n	8004d9c <USB_HC_Init+0x1c8>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d003      	beq.n	8004d9c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e001      	b.n	8004da0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004da0:	787b      	ldrb	r3, [r7, #1]
 8004da2:	059b      	lsls	r3, r3, #22
 8004da4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004da8:	78bb      	ldrb	r3, [r7, #2]
 8004daa:	02db      	lsls	r3, r3, #11
 8004dac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004db0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004db2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004db6:	049b      	lsls	r3, r3, #18
 8004db8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004dbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dbe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004dc4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	0159      	lsls	r1, r3, #5
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	440b      	add	r3, r1
 8004dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ddc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004dde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d003      	beq.n	8004dee <USB_HC_Init+0x21a>
 8004de6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d10f      	bne.n	8004e0e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e0c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004e0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3720      	adds	r7, #32
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08c      	sub	sp, #48	; 0x30
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	4613      	mov	r3, r2
 8004e24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e34:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d02d      	beq.n	8004e9e <USB_HC_StartXfer+0x86>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	791b      	ldrb	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d129      	bne.n	8004e9e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d117      	bne.n	8004e80 <USB_HC_StartXfer+0x68>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	79db      	ldrb	r3, [r3, #7]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <USB_HC_StartXfer+0x48>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	79db      	ldrb	r3, [r3, #7]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d10f      	bne.n	8004e80 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	0151      	lsls	r1, r2, #5
 8004e72:	6a3a      	ldr	r2, [r7, #32]
 8004e74:	440a      	add	r2, r1
 8004e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <USB_HC_StartXfer+0x86>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	795b      	ldrb	r3, [r3, #5]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d107      	bne.n	8004e9e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	4619      	mov	r1, r3
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fa0f 	bl	80052b8 <USB_DoPing>
      return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e0f8      	b.n	8005090 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d018      	beq.n	8004ed8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	8912      	ldrh	r2, [r2, #8]
 8004eae:	4413      	add	r3, r2
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	8912      	ldrh	r2, [r2, #8]
 8004eb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004ebc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ebe:	8b7b      	ldrh	r3, [r7, #26]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d90b      	bls.n	8004edc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004ec4:	8b7b      	ldrh	r3, [r7, #26]
 8004ec6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ec8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	8912      	ldrh	r2, [r2, #8]
 8004ece:	fb03 f202 	mul.w	r2, r3, r2
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	611a      	str	r2, [r3, #16]
 8004ed6:	e001      	b.n	8004edc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	78db      	ldrb	r3, [r3, #3]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ee4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	8912      	ldrh	r2, [r2, #8]
 8004eea:	fb03 f202 	mul.w	r2, r3, r2
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	611a      	str	r2, [r3, #16]
 8004ef2:	e003      	b.n	8004efc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f06:	04d9      	lsls	r1, r3, #19
 8004f08:	4b63      	ldr	r3, [pc, #396]	; (8005098 <USB_HC_StartXfer+0x280>)
 8004f0a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f0c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	7a9b      	ldrb	r3, [r3, #10]
 8004f12:	075b      	lsls	r3, r3, #29
 8004f14:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f18:	69f9      	ldr	r1, [r7, #28]
 8004f1a:	0148      	lsls	r0, r1, #5
 8004f1c:	6a39      	ldr	r1, [r7, #32]
 8004f1e:	4401      	add	r1, r0
 8004f20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f24:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f26:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	68d9      	ldr	r1, [r3, #12]
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3e:	460a      	mov	r2, r1
 8004f40:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf0c      	ite	eq
 8004f52:	2301      	moveq	r3, #1
 8004f54:	2300      	movne	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	6a3a      	ldr	r2, [r7, #32]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f78:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	7e7b      	ldrb	r3, [r7, #25]
 8004f8a:	075b      	lsls	r3, r3, #29
 8004f8c:	69f9      	ldr	r1, [r7, #28]
 8004f8e:	0148      	lsls	r0, r1, #5
 8004f90:	6a39      	ldr	r1, [r7, #32]
 8004f92:	4401      	add	r1, r0
 8004f94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fb2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	78db      	ldrb	r3, [r3, #3]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	e003      	b.n	8004fce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fcc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fd4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e04e      	b.n	8005090 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	78db      	ldrb	r3, [r3, #3]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d149      	bne.n	800508e <USB_HC_StartXfer+0x276>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d045      	beq.n	800508e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	79db      	ldrb	r3, [r3, #7]
 8005006:	2b03      	cmp	r3, #3
 8005008:	d830      	bhi.n	800506c <USB_HC_StartXfer+0x254>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <USB_HC_StartXfer+0x1f8>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005021 	.word	0x08005021
 8005014:	08005045 	.word	0x08005045
 8005018:	08005021 	.word	0x08005021
 800501c:	08005045 	.word	0x08005045
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	3303      	adds	r3, #3
 8005026:	089b      	lsrs	r3, r3, #2
 8005028:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800502a:	8afa      	ldrh	r2, [r7, #22]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	b29b      	uxth	r3, r3
 8005032:	429a      	cmp	r2, r3
 8005034:	d91c      	bls.n	8005070 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f043 0220 	orr.w	r2, r3, #32
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	619a      	str	r2, [r3, #24]
        }
        break;
 8005042:	e015      	b.n	8005070 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	3303      	adds	r3, #3
 800504a:	089b      	lsrs	r3, r3, #2
 800504c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800504e:	8afa      	ldrh	r2, [r7, #22]
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	b29b      	uxth	r3, r3
 800505a:	429a      	cmp	r2, r3
 800505c:	d90a      	bls.n	8005074 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	619a      	str	r2, [r3, #24]
        }
        break;
 800506a:	e003      	b.n	8005074 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800506c:	bf00      	nop
 800506e:	e002      	b.n	8005076 <USB_HC_StartXfer+0x25e>
        break;
 8005070:	bf00      	nop
 8005072:	e000      	b.n	8005076 <USB_HC_StartXfer+0x25e>
        break;
 8005074:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	68d9      	ldr	r1, [r3, #12]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	785a      	ldrb	r2, [r3, #1]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	b29b      	uxth	r3, r3
 8005084:	2000      	movs	r0, #0
 8005086:	9000      	str	r0, [sp, #0]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f7ff fb31 	bl	80046f0 <USB_WritePacket>
  }

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3728      	adds	r7, #40	; 0x28
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	1ff80000 	.word	0x1ff80000

0800509c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	b29b      	uxth	r3, r3
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050be:	b480      	push	{r7}
 80050c0:	b089      	sub	sp, #36	; 0x24
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	460b      	mov	r3, r1
 80050c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	0c9b      	lsrs	r3, r3, #18
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	0fdb      	lsrs	r3, r3, #31
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b20      	cmp	r3, #32
 800510c:	d104      	bne.n	8005118 <USB_HC_Halt+0x5a>
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	e0c8      	b.n	80052aa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <USB_HC_Halt+0x66>
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d163      	bne.n	80051ec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	440a      	add	r2, r1
 800513a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800513e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005142:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b00      	cmp	r3, #0
 800514e:	f040 80ab 	bne.w	80052a8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d133      	bne.n	80051c6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	4413      	add	r3, r2
 8005166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	0151      	lsls	r1, r2, #5
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	440a      	add	r2, r1
 8005174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800517c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	440a      	add	r2, r1
 8005194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800519c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051aa:	d81d      	bhi.n	80051e8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051c2:	d0ec      	beq.n	800519e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051c4:	e070      	b.n	80052a8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051e6:	e05f      	b.n	80052a8 <USB_HC_Halt+0x1ea>
            break;
 80051e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051ea:	e05d      	b.n	80052a8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	440a      	add	r2, r1
 8005202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800520a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d133      	bne.n	8005284 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	440a      	add	r2, r1
 8005232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800523a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	440a      	add	r2, r1
 8005252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800525a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3301      	adds	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005268:	d81d      	bhi.n	80052a6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800527c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005280:	d0ec      	beq.n	800525c <USB_HC_Halt+0x19e>
 8005282:	e011      	b.n	80052a8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	440a      	add	r2, r1
 800529a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	e000      	b.n	80052a8 <USB_HC_Halt+0x1ea>
          break;
 80052a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3724      	adds	r7, #36	; 0x24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80052cc:	2301      	movs	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	04da      	lsls	r2, r3, #19
 80052d4:	4b15      	ldr	r3, [pc, #84]	; (800532c <USB_DoPing+0x74>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005300:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005308:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4413      	add	r3, r2
 8005312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005316:	461a      	mov	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	1ff80000 	.word	0x1ff80000

08005330 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff f912 	bl	800456e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800534a:	2110      	movs	r1, #16
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff f96b 	bl	8004628 <USB_FlushTxFifo>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff f997 	bl	8004690 <USB_FlushRxFifo>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800536c:	2300      	movs	r3, #0
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	e01f      	b.n	80053b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	4413      	add	r3, r2
 800537a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005388:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005390:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005398:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	461a      	mov	r2, r3
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	3301      	adds	r3, #1
 80053b0:	61bb      	str	r3, [r7, #24]
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b0f      	cmp	r3, #15
 80053b6:	d9dc      	bls.n	8005372 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80053b8:	2300      	movs	r3, #0
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	e034      	b.n	8005428 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	461a      	mov	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005404:	d80c      	bhi.n	8005420 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	4413      	add	r3, r2
 800540e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800541c:	d0ec      	beq.n	80053f8 <USB_StopHost+0xc8>
 800541e:	e000      	b.n	8005422 <USB_StopHost+0xf2>
        break;
 8005420:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	3301      	adds	r3, #1
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b0f      	cmp	r3, #15
 800542c:	d9c7      	bls.n	80053be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005434:	461a      	mov	r2, r3
 8005436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800543a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005442:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff f881 	bl	800454c <USB_EnableGlobalInt>

  return ret;
 800544a:	7ffb      	ldrb	r3, [r7, #31]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af04      	add	r7, sp, #16
 800545a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800545c:	2301      	movs	r3, #1
 800545e:	2202      	movs	r2, #2
 8005460:	2102      	movs	r1, #2
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fc66 	bl	8005d34 <USBH_FindInterface>
 8005468:	4603      	mov	r3, r0
 800546a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	2bff      	cmp	r3, #255	; 0xff
 8005470:	d002      	beq.n	8005478 <USBH_CDC_InterfaceInit+0x24>
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d901      	bls.n	800547c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005478:	2302      	movs	r3, #2
 800547a:	e13d      	b.n	80056f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	4619      	mov	r1, r3
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fc3b 	bl	8005cfc <USBH_SelectInterface>
 8005486:	4603      	mov	r3, r0
 8005488:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800548a:	7bbb      	ldrb	r3, [r7, #14]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005490:	2302      	movs	r3, #2
 8005492:	e131      	b.n	80056f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800549a:	2050      	movs	r0, #80	; 0x50
 800549c:	f002 fafa 	bl	8007a94 <malloc>
 80054a0:	4603      	mov	r3, r0
 80054a2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80054b4:	2302      	movs	r3, #2
 80054b6:	e11f      	b.n	80056f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80054b8:	2250      	movs	r2, #80	; 0x50
 80054ba:	2100      	movs	r1, #0
 80054bc:	68b8      	ldr	r0, [r7, #8]
 80054be:	f002 faf9 	bl	8007ab4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	211a      	movs	r1, #26
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	4413      	add	r3, r2
 80054ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b25b      	sxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da15      	bge.n	8005506 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	211a      	movs	r1, #26
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	4413      	add	r3, r2
 80054e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054ea:	781a      	ldrb	r2, [r3, #0]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	211a      	movs	r1, #26
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005500:	881a      	ldrh	r2, [r3, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 ff2c 	bl	800736a <USBH_AllocPipe>
 8005512:	4603      	mov	r3, r0
 8005514:	461a      	mov	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	7819      	ldrb	r1, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	7858      	ldrb	r0, [r3, #1]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	8952      	ldrh	r2, [r2, #10]
 8005532:	9202      	str	r2, [sp, #8]
 8005534:	2203      	movs	r2, #3
 8005536:	9201      	str	r2, [sp, #4]
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	4623      	mov	r3, r4
 800553c:	4602      	mov	r2, r0
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f001 fee4 	bl	800730c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2200      	movs	r2, #0
 800554a:	4619      	mov	r1, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f002 f9f3 	bl	8007938 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005552:	2300      	movs	r3, #0
 8005554:	2200      	movs	r2, #0
 8005556:	210a      	movs	r1, #10
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fbeb 	bl	8005d34 <USBH_FindInterface>
 800555e:	4603      	mov	r3, r0
 8005560:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2bff      	cmp	r3, #255	; 0xff
 8005566:	d002      	beq.n	800556e <USBH_CDC_InterfaceInit+0x11a>
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d901      	bls.n	8005572 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800556e:	2302      	movs	r3, #2
 8005570:	e0c2      	b.n	80056f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	211a      	movs	r1, #26
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	4413      	add	r3, r2
 800557e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	b25b      	sxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	da16      	bge.n	80055b8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	211a      	movs	r1, #26
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	4413      	add	r3, r2
 8005596:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800559a:	781a      	ldrb	r2, [r3, #0]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	211a      	movs	r1, #26
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055b0:	881a      	ldrh	r2, [r3, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	835a      	strh	r2, [r3, #26]
 80055b6:	e015      	b.n	80055e4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	211a      	movs	r1, #26
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055c8:	781a      	ldrb	r2, [r3, #0]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	211a      	movs	r1, #26
 80055d4:	fb01 f303 	mul.w	r3, r1, r3
 80055d8:	4413      	add	r3, r2
 80055da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055de:	881a      	ldrh	r2, [r3, #0]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	211a      	movs	r1, #26
 80055ea:	fb01 f303 	mul.w	r3, r1, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	b25b      	sxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da16      	bge.n	800562a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	211a      	movs	r1, #26
 8005602:	fb01 f303 	mul.w	r3, r1, r3
 8005606:	4413      	add	r3, r2
 8005608:	f203 3356 	addw	r3, r3, #854	; 0x356
 800560c:	781a      	ldrb	r2, [r3, #0]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	211a      	movs	r1, #26
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	4413      	add	r3, r2
 800561e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005622:	881a      	ldrh	r2, [r3, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	835a      	strh	r2, [r3, #26]
 8005628:	e015      	b.n	8005656 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	211a      	movs	r1, #26
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	4413      	add	r3, r2
 8005636:	f203 3356 	addw	r3, r3, #854	; 0x356
 800563a:	781a      	ldrb	r2, [r3, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	211a      	movs	r1, #26
 8005646:	fb01 f303 	mul.w	r3, r1, r3
 800564a:	4413      	add	r3, r2
 800564c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005650:	881a      	ldrh	r2, [r3, #0]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	7b9b      	ldrb	r3, [r3, #14]
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f001 fe84 	bl	800736a <USBH_AllocPipe>
 8005662:	4603      	mov	r3, r0
 8005664:	461a      	mov	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	7bdb      	ldrb	r3, [r3, #15]
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 fe7a 	bl	800736a <USBH_AllocPipe>
 8005676:	4603      	mov	r3, r0
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	7b59      	ldrb	r1, [r3, #13]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	7b98      	ldrb	r0, [r3, #14]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	8b12      	ldrh	r2, [r2, #24]
 8005696:	9202      	str	r2, [sp, #8]
 8005698:	2202      	movs	r2, #2
 800569a:	9201      	str	r2, [sp, #4]
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	4623      	mov	r3, r4
 80056a0:	4602      	mov	r2, r0
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f001 fe32 	bl	800730c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	7b19      	ldrb	r1, [r3, #12]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	7bd8      	ldrb	r0, [r3, #15]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	8b52      	ldrh	r2, [r2, #26]
 80056c0:	9202      	str	r2, [sp, #8]
 80056c2:	2202      	movs	r2, #2
 80056c4:	9201      	str	r2, [sp, #4]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	4623      	mov	r3, r4
 80056ca:	4602      	mov	r2, r0
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f001 fe1d 	bl	800730c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	7b5b      	ldrb	r3, [r3, #13]
 80056de:	2200      	movs	r2, #0
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f002 f928 	bl	8007938 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	7b1b      	ldrb	r3, [r3, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f002 f921 	bl	8007938 <USBH_LL_SetToggle>

  return USBH_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd90      	pop	{r4, r7, pc}

08005700 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f001 fe12 	bl	800734a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 fe3d 	bl	80073ac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	7b1b      	ldrb	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	7b1b      	ldrb	r3, [r3, #12]
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f001 fdff 	bl	800734a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	7b1b      	ldrb	r3, [r3, #12]
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 fe2a 	bl	80073ac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	7b5b      	ldrb	r3, [r3, #13]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00e      	beq.n	8005784 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	7b5b      	ldrb	r3, [r3, #13]
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f001 fdec 	bl	800734a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	7b5b      	ldrb	r3, [r3, #13]
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 fe17 	bl	80073ac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00b      	beq.n	80057a8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	4618      	mov	r0, r3
 800579a:	f002 f983 	bl	8007aa4 <free>
    phost->pActiveClass->pData = 0U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057a4:	2200      	movs	r2, #0
 80057a6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3340      	adds	r3, #64	; 0x40
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f8b1 	bl	8005932 <GetLineCoding>
 80057d0:	4603      	mov	r3, r0
 80057d2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80057d4:	7afb      	ldrb	r3, [r7, #11]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d105      	bne.n	80057e6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80057e0:	2102      	movs	r1, #2
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80057e6:	7afb      	ldrb	r3, [r7, #11]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005810:	2b04      	cmp	r3, #4
 8005812:	d877      	bhi.n	8005904 <USBH_CDC_Process+0x114>
 8005814:	a201      	add	r2, pc, #4	; (adr r2, 800581c <USBH_CDC_Process+0x2c>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	08005831 	.word	0x08005831
 8005820:	08005837 	.word	0x08005837
 8005824:	08005867 	.word	0x08005867
 8005828:	080058db 	.word	0x080058db
 800582c:	080058e9 	.word	0x080058e9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	e06d      	b.n	8005912 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f897 	bl	8005970 <SetLineCoding>
 8005842:	4603      	mov	r3, r0
 8005844:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005854:	e058      	b.n	8005908 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005856:	7bbb      	ldrb	r3, [r7, #14]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d055      	beq.n	8005908 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2204      	movs	r2, #4
 8005860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005864:	e050      	b.n	8005908 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	3340      	adds	r3, #64	; 0x40
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f860 	bl	8005932 <GetLineCoding>
 8005872:	4603      	mov	r3, r0
 8005874:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d126      	bne.n	80058ca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588e:	791b      	ldrb	r3, [r3, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d13b      	bne.n	800590c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d133      	bne.n	800590c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d12b      	bne.n	800590c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058bc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058be:	429a      	cmp	r2, r3
 80058c0:	d124      	bne.n	800590c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f958 	bl	8005b78 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80058c8:	e020      	b.n	800590c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80058ca:	7bbb      	ldrb	r3, [r7, #14]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d01d      	beq.n	800590c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2204      	movs	r2, #4
 80058d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80058d8:	e018      	b.n	800590c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f867 	bl	80059ae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f8da 	bl	8005a9a <CDC_ProcessReception>
      break;
 80058e6:	e014      	b.n	8005912 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80058e8:	2100      	movs	r1, #0
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 ffef 	bl	80068ce <USBH_ClrFeature>
 80058f0:	4603      	mov	r3, r0
 80058f2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058f4:	7bbb      	ldrb	r3, [r7, #14]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005902:	e005      	b.n	8005910 <USBH_CDC_Process+0x120>

    default:
      break;
 8005904:	bf00      	nop
 8005906:	e004      	b.n	8005912 <USBH_CDC_Process+0x122>
      break;
 8005908:	bf00      	nop
 800590a:	e002      	b.n	8005912 <USBH_CDC_Process+0x122>
      break;
 800590c:	bf00      	nop
 800590e:	e000      	b.n	8005912 <USBH_CDC_Process+0x122>
      break;
 8005910:	bf00      	nop

  }

  return status;
 8005912:	7bfb      	ldrb	r3, [r7, #15]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	22a1      	movs	r2, #161	; 0xa1
 8005940:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2221      	movs	r2, #33	; 0x21
 8005946:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2207      	movs	r2, #7
 8005958:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2207      	movs	r2, #7
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 fa81 	bl	8006e68 <USBH_CtlReq>
 8005966:	4603      	mov	r3, r0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2221      	movs	r2, #33	; 0x21
 800597e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2207      	movs	r2, #7
 8005996:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2207      	movs	r2, #7
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f001 fa62 	bl	8006e68 <USBH_CtlReq>
 80059a4:	4603      	mov	r3, r0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af02      	add	r7, sp, #8
 80059b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d002      	beq.n	80059d4 <CDC_ProcessTransmission+0x26>
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d023      	beq.n	8005a1a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80059d2:	e05e      	b.n	8005a92 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	8b12      	ldrh	r2, [r2, #24]
 80059dc:	4293      	cmp	r3, r2
 80059de:	d90b      	bls.n	80059f8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	69d9      	ldr	r1, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8b1a      	ldrh	r2, [r3, #24]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	7b5b      	ldrb	r3, [r3, #13]
 80059ec:	2001      	movs	r0, #1
 80059ee:	9000      	str	r0, [sp, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 fc48 	bl	8007286 <USBH_BulkSendData>
 80059f6:	e00b      	b.n	8005a10 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	7b5b      	ldrb	r3, [r3, #13]
 8005a06:	2001      	movs	r0, #1
 8005a08:	9000      	str	r0, [sp, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 fc3b 	bl	8007286 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a18:	e03b      	b.n	8005a92 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	7b5b      	ldrb	r3, [r3, #13]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 ff5f 	bl	80078e4 <USBH_LL_GetURBState>
 8005a26:	4603      	mov	r3, r0
 8005a28:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005a2a:	7afb      	ldrb	r3, [r7, #11]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d128      	bne.n	8005a82 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	8b12      	ldrh	r2, [r2, #24]
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d90e      	bls.n	8005a5a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	8b12      	ldrh	r2, [r2, #24]
 8005a44:	1a9a      	subs	r2, r3, r2
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	8b12      	ldrh	r2, [r2, #24]
 8005a52:	441a      	add	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	61da      	str	r2, [r3, #28]
 8005a58:	e002      	b.n	8005a60 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d004      	beq.n	8005a72 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a70:	e00e      	b.n	8005a90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f868 	bl	8005b50 <USBH_CDC_TransmitCallback>
      break;
 8005a80:	e006      	b.n	8005a90 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005a82:	7afb      	ldrb	r3, [r7, #11]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d103      	bne.n	8005a90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a90:	bf00      	nop
  }
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b086      	sub	sp, #24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d002      	beq.n	8005ac0 <CDC_ProcessReception+0x26>
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d00e      	beq.n	8005adc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005abe:	e043      	b.n	8005b48 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	6a19      	ldr	r1, [r3, #32]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	8b5a      	ldrh	r2, [r3, #26]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	7b1b      	ldrb	r3, [r3, #12]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 fbff 	bl	80072d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005ada:	e035      	b.n	8005b48 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	7b1b      	ldrb	r3, [r3, #12]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f001 fefe 	bl	80078e4 <USBH_LL_GetURBState>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005aec:	7cfb      	ldrb	r3, [r7, #19]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d129      	bne.n	8005b46 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	7b1b      	ldrb	r3, [r3, #12]
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f001 fe61 	bl	80077c0 <USBH_LL_GetLastXferSize>
 8005afe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d016      	beq.n	8005b38 <CDC_ProcessReception+0x9e>
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	8b5b      	ldrh	r3, [r3, #26]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d910      	bls.n	8005b38 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad2      	subs	r2, r2, r3
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6a1a      	ldr	r2, [r3, #32]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	441a      	add	r2, r3
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2203      	movs	r2, #3
 8005b32:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b36:	e006      	b.n	8005b46 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f80f 	bl	8005b64 <USBH_CDC_ReceiveCallback>
      break;
 8005b46:	bf00      	nop
  }
}
 8005b48:	bf00      	nop
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e029      	b.n	8005bf8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	79fa      	ldrb	r2, [r7, #7]
 8005ba8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f81f 	bl	8005c00 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f001 fd31 	bl	8007658 <USBH_LL_Init>

  return USBH_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	e009      	b.n	8005c26 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	33e0      	adds	r3, #224	; 0xe0
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3301      	adds	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b0f      	cmp	r3, #15
 8005c2a:	d9f2      	bls.n	8005c12 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e009      	b.n	8005c46 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c4c:	d3f1      	bcc.n	8005c32 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2240      	movs	r2, #64	; 0x40
 8005c72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d016      	beq.n	8005cea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10e      	bne.n	8005ce4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005ccc:	1c59      	adds	r1, r3, #1
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	33de      	adds	r3, #222	; 0xde
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]
 8005ce2:	e004      	b.n	8005cee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	73fb      	strb	r3, [r7, #15]
 8005ce8:	e001      	b.n	8005cee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005cea:	2302      	movs	r3, #2
 8005cec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d204      	bcs.n	8005d22 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005d20:	e001      	b.n	8005d26 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005d22:	2302      	movs	r3, #2
 8005d24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	4611      	mov	r1, r2
 8005d40:	461a      	mov	r2, r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	70fb      	strb	r3, [r7, #3]
 8005d46:	460b      	mov	r3, r1
 8005d48:	70bb      	strb	r3, [r7, #2]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005d5c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d5e:	e025      	b.n	8005dac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	221a      	movs	r2, #26
 8005d64:	fb02 f303 	mul.w	r3, r2, r3
 8005d68:	3308      	adds	r3, #8
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3302      	adds	r3, #2
 8005d70:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	795b      	ldrb	r3, [r3, #5]
 8005d76:	78fa      	ldrb	r2, [r7, #3]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d002      	beq.n	8005d82 <USBH_FindInterface+0x4e>
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	2bff      	cmp	r3, #255	; 0xff
 8005d80:	d111      	bne.n	8005da6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d86:	78ba      	ldrb	r2, [r7, #2]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d002      	beq.n	8005d92 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d8c:	78bb      	ldrb	r3, [r7, #2]
 8005d8e:	2bff      	cmp	r3, #255	; 0xff
 8005d90:	d109      	bne.n	8005da6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d96:	787a      	ldrb	r2, [r7, #1]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d002      	beq.n	8005da2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d9c:	787b      	ldrb	r3, [r7, #1]
 8005d9e:	2bff      	cmp	r3, #255	; 0xff
 8005da0:	d101      	bne.n	8005da6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	e006      	b.n	8005db4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	3301      	adds	r3, #1
 8005daa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d9d6      	bls.n	8005d60 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005db2:	23ff      	movs	r3, #255	; 0xff
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 fc81 	bl	80076d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005dce:	2101      	movs	r1, #1
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 fd9a 	bl	800790a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af04      	add	r7, sp, #16
 8005de6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005de8:	2302      	movs	r3, #2
 8005dea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d102      	bne.n	8005e02 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2203      	movs	r2, #3
 8005e00:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b0b      	cmp	r3, #11
 8005e0a:	f200 81be 	bhi.w	800618a <USBH_Process+0x3aa>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <USBH_Process+0x34>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e45 	.word	0x08005e45
 8005e18:	08005e77 	.word	0x08005e77
 8005e1c:	08005edf 	.word	0x08005edf
 8005e20:	08006125 	.word	0x08006125
 8005e24:	0800618b 	.word	0x0800618b
 8005e28:	08005f83 	.word	0x08005f83
 8005e2c:	080060cb 	.word	0x080060cb
 8005e30:	08005fb9 	.word	0x08005fb9
 8005e34:	08005fd9 	.word	0x08005fd9
 8005e38:	08005ff9 	.word	0x08005ff9
 8005e3c:	0800603d 	.word	0x0800603d
 8005e40:	0800610d 	.word	0x0800610d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 819e 	beq.w	800618e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005e58:	20c8      	movs	r0, #200	; 0xc8
 8005e5a:	f001 fd9d 	bl	8007998 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fc93 	bl	800778a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005e74:	e18b      	b.n	800618e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d107      	bne.n	8005e90 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005e8e:	e18d      	b.n	80061ac <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e9a:	d914      	bls.n	8005ec6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d903      	bls.n	8005ebe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	220d      	movs	r2, #13
 8005eba:	701a      	strb	r2, [r3, #0]
      break;
 8005ebc:	e176      	b.n	80061ac <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
      break;
 8005ec4:	e172      	b.n	80061ac <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005ecc:	f103 020a 	add.w	r2, r3, #10
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005ed6:	200a      	movs	r0, #10
 8005ed8:	f001 fd5e 	bl	8007998 <USBH_Delay>
      break;
 8005edc:	e166      	b.n	80061ac <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005eee:	2104      	movs	r1, #4
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005ef4:	2064      	movs	r0, #100	; 0x64
 8005ef6:	f001 fd4f 	bl	8007998 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fc1e 	bl	800773c <USBH_LL_GetSpeed>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2205      	movs	r2, #5
 8005f0e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005f10:	2100      	movs	r1, #0
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 fa29 	bl	800736a <USBH_AllocPipe>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005f20:	2180      	movs	r1, #128	; 0x80
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 fa21 	bl	800736a <USBH_AllocPipe>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7919      	ldrb	r1, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f44:	b292      	uxth	r2, r2
 8005f46:	9202      	str	r2, [sp, #8]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	9201      	str	r2, [sp, #4]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2280      	movs	r2, #128	; 0x80
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f001 f9da 	bl	800730c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	7959      	ldrb	r1, [r3, #5]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f6c:	b292      	uxth	r2, r2
 8005f6e:	9202      	str	r2, [sp, #8]
 8005f70:	2200      	movs	r2, #0
 8005f72:	9201      	str	r2, [sp, #4]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	4603      	mov	r3, r0
 8005f78:	2200      	movs	r2, #0
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 f9c6 	bl	800730c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005f80:	e114      	b.n	80061ac <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f918 	bl	80061b8 <USBH_HandleEnum>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 80fe 	bne.w	8006192 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d103      	bne.n	8005fb0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2208      	movs	r2, #8
 8005fac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005fae:	e0f0      	b.n	8006192 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2207      	movs	r2, #7
 8005fb4:	701a      	strb	r2, [r3, #0]
      break;
 8005fb6:	e0ec      	b.n	8006192 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 80e9 	beq.w	8006196 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fca:	2101      	movs	r1, #1
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8005fd6:	e0de      	b.n	8006196 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fc2c 	bl	8006840 <USBH_SetCfg>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f040 80d5 	bne.w	800619a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2209      	movs	r2, #9
 8005ff4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005ff6:	e0d0      	b.n	800619a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b00      	cmp	r3, #0
 8006004:	d016      	beq.n	8006034 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006006:	2101      	movs	r1, #1
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fc3c 	bl	8006886 <USBH_SetFeature>
 800600e:	4603      	mov	r3, r0
 8006010:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006012:	7bbb      	ldrb	r3, [r7, #14]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	220a      	movs	r2, #10
 800601e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006020:	e0bd      	b.n	800619e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b03      	cmp	r3, #3
 8006028:	f040 80b9 	bne.w	800619e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	220a      	movs	r2, #10
 8006030:	701a      	strb	r2, [r3, #0]
      break;
 8006032:	e0b4      	b.n	800619e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	220a      	movs	r2, #10
 8006038:	701a      	strb	r2, [r3, #0]
      break;
 800603a:	e0b0      	b.n	800619e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 80ad 	beq.w	80061a2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]
 8006054:	e016      	b.n	8006084 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006056:	7bfa      	ldrb	r2, [r7, #15]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	32de      	adds	r2, #222	; 0xde
 800605c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006060:	791a      	ldrb	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006068:	429a      	cmp	r2, r3
 800606a:	d108      	bne.n	800607e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800606c:	7bfa      	ldrb	r2, [r7, #15]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	32de      	adds	r2, #222	; 0xde
 8006072:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800607c:	e005      	b.n	800608a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	3301      	adds	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0e5      	beq.n	8006056 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d016      	beq.n	80060c2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2206      	movs	r2, #6
 80060aa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060b2:	2103      	movs	r1, #3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060b8:	e073      	b.n	80061a2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	220d      	movs	r2, #13
 80060be:	701a      	strb	r2, [r3, #0]
      break;
 80060c0:	e06f      	b.n	80061a2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	220d      	movs	r2, #13
 80060c6:	701a      	strb	r2, [r3, #0]
      break;
 80060c8:	e06b      	b.n	80061a2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d017      	beq.n	8006104 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
 80060e0:	4603      	mov	r3, r0
 80060e2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	220b      	movs	r2, #11
 80060f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060f2:	e058      	b.n	80061a6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80060f4:	7bbb      	ldrb	r3, [r7, #14]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d154      	bne.n	80061a6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	220d      	movs	r2, #13
 8006100:	701a      	strb	r2, [r3, #0]
      break;
 8006102:	e050      	b.n	80061a6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	220d      	movs	r2, #13
 8006108:	701a      	strb	r2, [r3, #0]
      break;
 800610a:	e04c      	b.n	80061a6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d049      	beq.n	80061aa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
      }
      break;
 8006122:	e042      	b.n	80061aa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff fd67 	bl	8005c00 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d009      	beq.n	8006150 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006160:	2105      	movs	r1, #5
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	d107      	bne.n	8006182 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff fe20 	bl	8005dc0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006180:	e014      	b.n	80061ac <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 faa4 	bl	80076d0 <USBH_LL_Start>
      break;
 8006188:	e010      	b.n	80061ac <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800618a:	bf00      	nop
 800618c:	e00e      	b.n	80061ac <USBH_Process+0x3cc>
      break;
 800618e:	bf00      	nop
 8006190:	e00c      	b.n	80061ac <USBH_Process+0x3cc>
      break;
 8006192:	bf00      	nop
 8006194:	e00a      	b.n	80061ac <USBH_Process+0x3cc>
    break;
 8006196:	bf00      	nop
 8006198:	e008      	b.n	80061ac <USBH_Process+0x3cc>
      break;
 800619a:	bf00      	nop
 800619c:	e006      	b.n	80061ac <USBH_Process+0x3cc>
      break;
 800619e:	bf00      	nop
 80061a0:	e004      	b.n	80061ac <USBH_Process+0x3cc>
      break;
 80061a2:	bf00      	nop
 80061a4:	e002      	b.n	80061ac <USBH_Process+0x3cc>
      break;
 80061a6:	bf00      	nop
 80061a8:	e000      	b.n	80061ac <USBH_Process+0x3cc>
      break;
 80061aa:	bf00      	nop
  }
  return USBH_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop

080061b8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af04      	add	r7, sp, #16
 80061be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80061c4:	2301      	movs	r3, #1
 80061c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	785b      	ldrb	r3, [r3, #1]
 80061cc:	2b07      	cmp	r3, #7
 80061ce:	f200 81c1 	bhi.w	8006554 <USBH_HandleEnum+0x39c>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <USBH_HandleEnum+0x20>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061f9 	.word	0x080061f9
 80061dc:	080062b7 	.word	0x080062b7
 80061e0:	08006321 	.word	0x08006321
 80061e4:	080063af 	.word	0x080063af
 80061e8:	08006419 	.word	0x08006419
 80061ec:	08006489 	.word	0x08006489
 80061f0:	080064cf 	.word	0x080064cf
 80061f4:	08006515 	.word	0x08006515
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80061f8:	2108      	movs	r1, #8
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa50 	bl	80066a0 <USBH_Get_DevDesc>
 8006200:	4603      	mov	r3, r0
 8006202:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d130      	bne.n	800626c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	7919      	ldrb	r1, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800622e:	b292      	uxth	r2, r2
 8006230:	9202      	str	r2, [sp, #8]
 8006232:	2200      	movs	r2, #0
 8006234:	9201      	str	r2, [sp, #4]
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	4603      	mov	r3, r0
 800623a:	2280      	movs	r2, #128	; 0x80
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 f865 	bl	800730c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	7959      	ldrb	r1, [r3, #5]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006256:	b292      	uxth	r2, r2
 8006258:	9202      	str	r2, [sp, #8]
 800625a:	2200      	movs	r2, #0
 800625c:	9201      	str	r2, [sp, #4]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	4603      	mov	r3, r0
 8006262:	2200      	movs	r2, #0
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 f851 	bl	800730c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800626a:	e175      	b.n	8006558 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	2b03      	cmp	r3, #3
 8006270:	f040 8172 	bne.w	8006558 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800627a:	3301      	adds	r3, #1
 800627c:	b2da      	uxtb	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800628a:	2b03      	cmp	r3, #3
 800628c:	d903      	bls.n	8006296 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	220d      	movs	r2, #13
 8006292:	701a      	strb	r2, [r3, #0]
      break;
 8006294:	e160      	b.n	8006558 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	795b      	ldrb	r3, [r3, #5]
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 f885 	bl	80073ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	791b      	ldrb	r3, [r3, #4]
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 f87f 	bl	80073ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	701a      	strb	r2, [r3, #0]
      break;
 80062b4:	e150      	b.n	8006558 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80062b6:	2112      	movs	r1, #18
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f9f1 	bl	80066a0 <USBH_Get_DevDesc>
 80062be:	4603      	mov	r3, r0
 80062c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062c2:	7bbb      	ldrb	r3, [r7, #14]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d103      	bne.n	80062d0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80062ce:	e145      	b.n	800655c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	f040 8142 	bne.w	800655c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062de:	3301      	adds	r3, #1
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d903      	bls.n	80062fa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	220d      	movs	r2, #13
 80062f6:	701a      	strb	r2, [r3, #0]
      break;
 80062f8:	e130      	b.n	800655c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	795b      	ldrb	r3, [r3, #5]
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 f853 	bl	80073ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	791b      	ldrb	r3, [r3, #4]
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 f84d 	bl	80073ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
      break;
 800631e:	e11d      	b.n	800655c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006320:	2101      	movs	r1, #1
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa68 	bl	80067f8 <USBH_SetAddress>
 8006328:	4603      	mov	r3, r0
 800632a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d132      	bne.n	8006398 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006332:	2002      	movs	r0, #2
 8006334:	f001 fb30 	bl	8007998 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2203      	movs	r2, #3
 8006344:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	7919      	ldrb	r1, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800635a:	b292      	uxth	r2, r2
 800635c:	9202      	str	r2, [sp, #8]
 800635e:	2200      	movs	r2, #0
 8006360:	9201      	str	r2, [sp, #4]
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	4603      	mov	r3, r0
 8006366:	2280      	movs	r2, #128	; 0x80
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 ffcf 	bl	800730c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	7959      	ldrb	r1, [r3, #5]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006382:	b292      	uxth	r2, r2
 8006384:	9202      	str	r2, [sp, #8]
 8006386:	2200      	movs	r2, #0
 8006388:	9201      	str	r2, [sp, #4]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	4603      	mov	r3, r0
 800638e:	2200      	movs	r2, #0
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 ffbb 	bl	800730c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006396:	e0e3      	b.n	8006560 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	2b03      	cmp	r3, #3
 800639c:	f040 80e0 	bne.w	8006560 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	220d      	movs	r2, #13
 80063a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	705a      	strb	r2, [r3, #1]
      break;
 80063ac:	e0d8      	b.n	8006560 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80063ae:	2109      	movs	r1, #9
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f99d 	bl	80066f0 <USBH_Get_CfgDesc>
 80063b6:	4603      	mov	r3, r0
 80063b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d103      	bne.n	80063c8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2204      	movs	r2, #4
 80063c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063c6:	e0cd      	b.n	8006564 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	f040 80ca 	bne.w	8006564 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063d6:	3301      	adds	r3, #1
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d903      	bls.n	80063f2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	220d      	movs	r2, #13
 80063ee:	701a      	strb	r2, [r3, #0]
      break;
 80063f0:	e0b8      	b.n	8006564 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	795b      	ldrb	r3, [r3, #5]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 ffd7 	bl	80073ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	791b      	ldrb	r3, [r3, #4]
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 ffd1 	bl	80073ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
      break;
 8006416:	e0a5      	b.n	8006564 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f965 	bl	80066f0 <USBH_Get_CfgDesc>
 8006426:	4603      	mov	r3, r0
 8006428:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d103      	bne.n	8006438 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2205      	movs	r2, #5
 8006434:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006436:	e097      	b.n	8006568 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	2b03      	cmp	r3, #3
 800643c:	f040 8094 	bne.w	8006568 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006446:	3301      	adds	r3, #1
 8006448:	b2da      	uxtb	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006456:	2b03      	cmp	r3, #3
 8006458:	d903      	bls.n	8006462 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	220d      	movs	r2, #13
 800645e:	701a      	strb	r2, [r3, #0]
      break;
 8006460:	e082      	b.n	8006568 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	795b      	ldrb	r3, [r3, #5]
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 ff9f 	bl	80073ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	791b      	ldrb	r3, [r3, #4]
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 ff99 	bl	80073ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	701a      	strb	r2, [r3, #0]
      break;
 8006486:	e06f      	b.n	8006568 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800648e:	2b00      	cmp	r3, #0
 8006490:	d019      	beq.n	80064c6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800649e:	23ff      	movs	r3, #255	; 0xff
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f949 	bl	8006738 <USBH_Get_StringDesc>
 80064a6:	4603      	mov	r3, r0
 80064a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d103      	bne.n	80064b8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2206      	movs	r2, #6
 80064b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80064b6:	e059      	b.n	800656c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d156      	bne.n	800656c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2206      	movs	r2, #6
 80064c2:	705a      	strb	r2, [r3, #1]
      break;
 80064c4:	e052      	b.n	800656c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2206      	movs	r2, #6
 80064ca:	705a      	strb	r2, [r3, #1]
      break;
 80064cc:	e04e      	b.n	800656c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d019      	beq.n	800650c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064e4:	23ff      	movs	r3, #255	; 0xff
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f926 	bl	8006738 <USBH_Get_StringDesc>
 80064ec:	4603      	mov	r3, r0
 80064ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d103      	bne.n	80064fe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2207      	movs	r2, #7
 80064fa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80064fc:	e038      	b.n	8006570 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d135      	bne.n	8006570 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2207      	movs	r2, #7
 8006508:	705a      	strb	r2, [r3, #1]
      break;
 800650a:	e031      	b.n	8006570 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2207      	movs	r2, #7
 8006510:	705a      	strb	r2, [r3, #1]
      break;
 8006512:	e02d      	b.n	8006570 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800651a:	2b00      	cmp	r3, #0
 800651c:	d017      	beq.n	800654e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800652a:	23ff      	movs	r3, #255	; 0xff
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f903 	bl	8006738 <USBH_Get_StringDesc>
 8006532:	4603      	mov	r3, r0
 8006534:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006536:	7bbb      	ldrb	r3, [r7, #14]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006540:	e018      	b.n	8006574 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	2b03      	cmp	r3, #3
 8006546:	d115      	bne.n	8006574 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	73fb      	strb	r3, [r7, #15]
      break;
 800654c:	e012      	b.n	8006574 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
      break;
 8006552:	e00f      	b.n	8006574 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006554:	bf00      	nop
 8006556:	e00e      	b.n	8006576 <USBH_HandleEnum+0x3be>
      break;
 8006558:	bf00      	nop
 800655a:	e00c      	b.n	8006576 <USBH_HandleEnum+0x3be>
      break;
 800655c:	bf00      	nop
 800655e:	e00a      	b.n	8006576 <USBH_HandleEnum+0x3be>
      break;
 8006560:	bf00      	nop
 8006562:	e008      	b.n	8006576 <USBH_HandleEnum+0x3be>
      break;
 8006564:	bf00      	nop
 8006566:	e006      	b.n	8006576 <USBH_HandleEnum+0x3be>
      break;
 8006568:	bf00      	nop
 800656a:	e004      	b.n	8006576 <USBH_HandleEnum+0x3be>
      break;
 800656c:	bf00      	nop
 800656e:	e002      	b.n	8006576 <USBH_HandleEnum+0x3be>
      break;
 8006570:	bf00      	nop
 8006572:	e000      	b.n	8006576 <USBH_HandleEnum+0x3be>
      break;
 8006574:	bf00      	nop
  }
  return Status;
 8006576:	7bfb      	ldrb	r3, [r7, #15]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f804 	bl	80065c2 <USBH_HandleSof>
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b082      	sub	sp, #8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b0b      	cmp	r3, #11
 80065d2:	d10a      	bne.n	80065ea <USBH_HandleSof+0x28>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
  }
}
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006602:	bf00      	nop
}
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800661e:	bf00      	nop
}
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 f844 	bl	8007706 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	791b      	ldrb	r3, [r3, #4]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fe91 	bl	80073ac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	795b      	ldrb	r3, [r3, #5]
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fe8b 	bl	80073ac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80066b2:	78fb      	ldrb	r3, [r7, #3]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	4613      	mov	r3, r2
 80066ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066be:	2100      	movs	r1, #0
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f864 	bl	800678e <USBH_GetDescriptor>
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066dc:	78fa      	ldrb	r2, [r7, #3]
 80066de:	b292      	uxth	r2, r2
 80066e0:	4619      	mov	r1, r3
 80066e2:	f000 f918 	bl	8006916 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	331c      	adds	r3, #28
 8006700:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006702:	887b      	ldrh	r3, [r7, #2]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800670c:	2100      	movs	r1, #0
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f83d 	bl	800678e <USBH_GetDescriptor>
 8006714:	4603      	mov	r3, r0
 8006716:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d107      	bne.n	800672e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800671e:	887b      	ldrh	r3, [r7, #2]
 8006720:	461a      	mov	r2, r3
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f987 	bl	8006a38 <USBH_ParseCfgDesc>
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800672e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	461a      	mov	r2, r3
 8006744:	460b      	mov	r3, r1
 8006746:	72fb      	strb	r3, [r7, #11]
 8006748:	4613      	mov	r3, r2
 800674a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	b29b      	uxth	r3, r3
 8006750:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006754:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800675c:	893b      	ldrh	r3, [r7, #8]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	460b      	mov	r3, r1
 8006762:	2100      	movs	r1, #0
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f812 	bl	800678e <USBH_GetDescriptor>
 800676a:	4603      	mov	r3, r0
 800676c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800676e:	7dfb      	ldrb	r3, [r7, #23]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d107      	bne.n	8006784 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800677a:	893a      	ldrh	r2, [r7, #8]
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fb24 	bl	8006dcc <USBH_ParseStringDesc>
  }

  return status;
 8006784:	7dfb      	ldrb	r3, [r7, #23]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	607b      	str	r3, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	72fb      	strb	r3, [r7, #11]
 800679c:	4613      	mov	r3, r2
 800679e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	789b      	ldrb	r3, [r3, #2]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d11c      	bne.n	80067e2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80067a8:	7afb      	ldrb	r3, [r7, #11]
 80067aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2206      	movs	r2, #6
 80067b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	893a      	ldrh	r2, [r7, #8]
 80067be:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80067c0:	893b      	ldrh	r3, [r7, #8]
 80067c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ca:	d104      	bne.n	80067d6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f240 4209 	movw	r2, #1033	; 0x409
 80067d2:	829a      	strh	r2, [r3, #20]
 80067d4:	e002      	b.n	80067dc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8b3a      	ldrh	r2, [r7, #24]
 80067e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80067e2:	8b3b      	ldrh	r3, [r7, #24]
 80067e4:	461a      	mov	r2, r3
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fb3d 	bl	8006e68 <USBH_CtlReq>
 80067ee:	4603      	mov	r3, r0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	789b      	ldrb	r3, [r3, #2]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d10f      	bne.n	800682c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2205      	movs	r2, #5
 8006816:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	b29a      	uxth	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800682c:	2200      	movs	r2, #0
 800682e:	2100      	movs	r1, #0
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fb19 	bl	8006e68 <USBH_CtlReq>
 8006836:	4603      	mov	r3, r0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	789b      	ldrb	r3, [r3, #2]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d10e      	bne.n	8006872 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2209      	movs	r2, #9
 800685e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	887a      	ldrh	r2, [r7, #2]
 8006864:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006872:	2200      	movs	r2, #0
 8006874:	2100      	movs	r1, #0
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 faf6 	bl	8006e68 <USBH_CtlReq>
 800687c:	4603      	mov	r3, r0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	789b      	ldrb	r3, [r3, #2]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d10f      	bne.n	80068ba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2203      	movs	r2, #3
 80068a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80068ba:	2200      	movs	r2, #0
 80068bc:	2100      	movs	r1, #0
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fad2 	bl	8006e68 <USBH_CtlReq>
 80068c4:	4603      	mov	r3, r0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	789b      	ldrb	r3, [r3, #2]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d10f      	bne.n	8006902 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006902:	2200      	movs	r2, #0
 8006904:	2100      	movs	r1, #0
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 faae 	bl	8006e68 <USBH_CtlReq>
 800690c:	4603      	mov	r3, r0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	4613      	mov	r3, r2
 8006922:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	781a      	ldrb	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	785a      	ldrb	r2, [r3, #1]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	3302      	adds	r3, #2
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	b29a      	uxth	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	3303      	adds	r3, #3
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	b29b      	uxth	r3, r3
 8006948:	4313      	orrs	r3, r2
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	791a      	ldrb	r2, [r3, #4]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	795a      	ldrb	r2, [r3, #5]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	799a      	ldrb	r2, [r3, #6]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	79da      	ldrb	r2, [r3, #7]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	79db      	ldrb	r3, [r3, #7]
 8006974:	2b20      	cmp	r3, #32
 8006976:	dc11      	bgt.n	800699c <USBH_ParseDevDesc+0x86>
 8006978:	2b08      	cmp	r3, #8
 800697a:	db16      	blt.n	80069aa <USBH_ParseDevDesc+0x94>
 800697c:	3b08      	subs	r3, #8
 800697e:	2201      	movs	r2, #1
 8006980:	fa02 f303 	lsl.w	r3, r2, r3
 8006984:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800698c:	2b00      	cmp	r3, #0
 800698e:	bf14      	ite	ne
 8006990:	2301      	movne	r3, #1
 8006992:	2300      	moveq	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d102      	bne.n	80069a0 <USBH_ParseDevDesc+0x8a>
 800699a:	e006      	b.n	80069aa <USBH_ParseDevDesc+0x94>
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	d104      	bne.n	80069aa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	79da      	ldrb	r2, [r3, #7]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	71da      	strb	r2, [r3, #7]
      break;
 80069a8:	e003      	b.n	80069b2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2240      	movs	r2, #64	; 0x40
 80069ae:	71da      	strb	r2, [r3, #7]
      break;
 80069b0:	bf00      	nop
  }

  if (length > 8U)
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d939      	bls.n	8006a2c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	3308      	adds	r3, #8
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	3309      	adds	r3, #9
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	021b      	lsls	r3, r3, #8
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	4313      	orrs	r3, r2
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	330a      	adds	r3, #10
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	330b      	adds	r3, #11
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	021b      	lsls	r3, r3, #8
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	4313      	orrs	r3, r2
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	330c      	adds	r3, #12
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	330d      	adds	r3, #13
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	4313      	orrs	r3, r2
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	7b9a      	ldrb	r2, [r3, #14]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	7bda      	ldrb	r2, [r3, #15]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	7c1a      	ldrb	r2, [r3, #16]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	7c5a      	ldrb	r2, [r3, #17]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	745a      	strb	r2, [r3, #17]
  }
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08c      	sub	sp, #48	; 0x30
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006a4c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	781a      	ldrb	r2, [r3, #0]
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	785a      	ldrb	r2, [r3, #1]
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	3303      	adds	r3, #3
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	021b      	lsls	r3, r3, #8
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a94:	bf28      	it	cs
 8006a96:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	791a      	ldrb	r2, [r3, #4]
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	795a      	ldrb	r2, [r3, #5]
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	799a      	ldrb	r2, [r3, #6]
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	79da      	ldrb	r2, [r3, #7]
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	7a1a      	ldrb	r2, [r3, #8]
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b09      	cmp	r3, #9
 8006ace:	d002      	beq.n	8006ad6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	2209      	movs	r2, #9
 8006ad4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	2b09      	cmp	r3, #9
 8006ada:	f240 809d 	bls.w	8006c18 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006ade:	2309      	movs	r3, #9
 8006ae0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006ae6:	e081      	b.n	8006bec <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ae8:	f107 0316 	add.w	r3, r7, #22
 8006aec:	4619      	mov	r1, r3
 8006aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af0:	f000 f99f 	bl	8006e32 <USBH_GetNextDesc>
 8006af4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d176      	bne.n	8006bec <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b09      	cmp	r3, #9
 8006b04:	d002      	beq.n	8006b0c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	2209      	movs	r2, #9
 8006b0a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b10:	221a      	movs	r2, #26
 8006b12:	fb02 f303 	mul.w	r3, r2, r3
 8006b16:	3308      	adds	r3, #8
 8006b18:	6a3a      	ldr	r2, [r7, #32]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b22:	69f8      	ldr	r0, [r7, #28]
 8006b24:	f000 f87e 	bl	8006c24 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b32:	e043      	b.n	8006bbc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b34:	f107 0316 	add.w	r3, r7, #22
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b3c:	f000 f979 	bl	8006e32 <USBH_GetNextDesc>
 8006b40:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b05      	cmp	r3, #5
 8006b48:	d138      	bne.n	8006bbc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	795b      	ldrb	r3, [r3, #5]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d10f      	bne.n	8006b72 <USBH_ParseCfgDesc+0x13a>
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	799b      	ldrb	r3, [r3, #6]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d10b      	bne.n	8006b72 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	79db      	ldrb	r3, [r3, #7]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10f      	bne.n	8006b82 <USBH_ParseCfgDesc+0x14a>
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b09      	cmp	r3, #9
 8006b68:	d00b      	beq.n	8006b82 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	2209      	movs	r2, #9
 8006b6e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b70:	e007      	b.n	8006b82 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b07      	cmp	r3, #7
 8006b78:	d004      	beq.n	8006b84 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	2207      	movs	r2, #7
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	e000      	b.n	8006b84 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b82:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006b8c:	3201      	adds	r2, #1
 8006b8e:	00d2      	lsls	r2, r2, #3
 8006b90:	211a      	movs	r1, #26
 8006b92:	fb01 f303 	mul.w	r3, r1, r3
 8006b96:	4413      	add	r3, r2
 8006b98:	3308      	adds	r3, #8
 8006b9a:	6a3a      	ldr	r2, [r7, #32]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba4:	69b9      	ldr	r1, [r7, #24]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f86b 	bl	8006c82 <USBH_ParseEPDesc>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006bb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	791b      	ldrb	r3, [r3, #4]
 8006bc0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d204      	bcs.n	8006bd2 <USBH_ParseCfgDesc+0x19a>
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	885a      	ldrh	r2, [r3, #2]
 8006bcc:	8afb      	ldrh	r3, [r7, #22]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d8b0      	bhi.n	8006b34 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d201      	bcs.n	8006be2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e01c      	b.n	8006c1c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006be6:	3301      	adds	r3, #1
 8006be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d805      	bhi.n	8006c00 <USBH_ParseCfgDesc+0x1c8>
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	885a      	ldrh	r2, [r3, #2]
 8006bf8:	8afb      	ldrh	r3, [r7, #22]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	f63f af74 	bhi.w	8006ae8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	791b      	ldrb	r3, [r3, #4]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	bf28      	it	cs
 8006c08:	2302      	movcs	r3, #2
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d201      	bcs.n	8006c18 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e001      	b.n	8006c1c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3730      	adds	r7, #48	; 0x30
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781a      	ldrb	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	785a      	ldrb	r2, [r3, #1]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	789a      	ldrb	r2, [r3, #2]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	78da      	ldrb	r2, [r3, #3]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	791a      	ldrb	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	795a      	ldrb	r2, [r3, #5]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	799a      	ldrb	r2, [r3, #6]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	79da      	ldrb	r2, [r3, #7]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	7a1a      	ldrb	r2, [r3, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	721a      	strb	r2, [r3, #8]
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b087      	sub	sp, #28
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	781a      	ldrb	r2, [r3, #0]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	785a      	ldrb	r2, [r3, #1]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	789a      	ldrb	r2, [r3, #2]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	78da      	ldrb	r2, [r3, #3]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3305      	adds	r3, #5
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	799a      	ldrb	r2, [r3, #6]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	889b      	ldrh	r3, [r3, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	75fb      	strb	r3, [r7, #23]
 8006ce2:	e033      	b.n	8006d4c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	889b      	ldrh	r3, [r3, #4]
 8006ce8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cec:	f023 0307 	bic.w	r3, r3, #7
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	889b      	ldrh	r3, [r3, #4]
 8006cfa:	b21a      	sxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	b299      	uxth	r1, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3305      	adds	r3, #5
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	021b      	lsls	r3, r3, #8
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	430b      	orrs	r3, r1
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d110      	bne.n	8006d3e <USBH_ParseEPDesc+0xbc>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	b299      	uxth	r1, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3305      	adds	r3, #5
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	430b      	orrs	r3, r1
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	b21b      	sxth	r3, r3
 8006d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d3a:	b21b      	sxth	r3, r3
 8006d3c:	e001      	b.n	8006d42 <USBH_ParseEPDesc+0xc0>
 8006d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d42:	4313      	orrs	r3, r2
 8006d44:	b21b      	sxth	r3, r3
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d116      	bne.n	8006d84 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	78db      	ldrb	r3, [r3, #3]
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d005      	beq.n	8006d6e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	78db      	ldrb	r3, [r3, #3]
 8006d66:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d127      	bne.n	8006dbe <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	799b      	ldrb	r3, [r3, #6]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <USBH_ParseEPDesc+0xfc>
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	799b      	ldrb	r3, [r3, #6]
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d91f      	bls.n	8006dbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	75fb      	strb	r3, [r7, #23]
 8006d82:	e01c      	b.n	8006dbe <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	78db      	ldrb	r3, [r3, #3]
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d10a      	bne.n	8006da6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	799b      	ldrb	r3, [r3, #6]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <USBH_ParseEPDesc+0x11e>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	799b      	ldrb	r3, [r3, #6]
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d90e      	bls.n	8006dbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006da0:	2303      	movs	r3, #3
 8006da2:	75fb      	strb	r3, [r7, #23]
 8006da4:	e00b      	b.n	8006dbe <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	78db      	ldrb	r3, [r3, #3]
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d105      	bne.n	8006dbe <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	799b      	ldrb	r3, [r3, #6]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d120      	bne.n	8006e26 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	1e9a      	subs	r2, r3, #2
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	4293      	cmp	r3, r2
 8006dee:	bf28      	it	cs
 8006df0:	4613      	movcs	r3, r2
 8006df2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3302      	adds	r3, #2
 8006df8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	82fb      	strh	r3, [r7, #22]
 8006dfe:	e00b      	b.n	8006e18 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e00:	8afb      	ldrh	r3, [r7, #22]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	781a      	ldrb	r2, [r3, #0]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006e12:	8afb      	ldrh	r3, [r7, #22]
 8006e14:	3302      	adds	r3, #2
 8006e16:	82fb      	strh	r3, [r7, #22]
 8006e18:	8afa      	ldrh	r2, [r7, #22]
 8006e1a:	8abb      	ldrh	r3, [r7, #20]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d3ef      	bcc.n	8006e00 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
  }
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b085      	sub	sp, #20
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	881a      	ldrh	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	4413      	add	r3, r2
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4413      	add	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006e76:	2301      	movs	r3, #1
 8006e78:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	789b      	ldrb	r3, [r3, #2]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d002      	beq.n	8006e88 <USBH_CtlReq+0x20>
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d00f      	beq.n	8006ea6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006e86:	e027      	b.n	8006ed8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	88fa      	ldrh	r2, [r7, #6]
 8006e92:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea4:	e018      	b.n	8006ed8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f81c 	bl	8006ee4 <USBH_HandleControl>
 8006eac:	4603      	mov	r3, r0
 8006eae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <USBH_CtlReq+0x54>
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d106      	bne.n	8006eca <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	761a      	strb	r2, [r3, #24]
      break;
 8006ec8:	e005      	b.n	8006ed6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d102      	bne.n	8006ed6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	709a      	strb	r2, [r3, #2]
      break;
 8006ed6:	bf00      	nop
  }
  return status;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006eec:	2301      	movs	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	7e1b      	ldrb	r3, [r3, #24]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	2b0a      	cmp	r3, #10
 8006efc:	f200 8156 	bhi.w	80071ac <USBH_HandleControl+0x2c8>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <USBH_HandleControl+0x24>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	08006f4f 	.word	0x08006f4f
 8006f10:	08006fb9 	.word	0x08006fb9
 8006f14:	08006fdf 	.word	0x08006fdf
 8006f18:	08007017 	.word	0x08007017
 8006f1c:	08007041 	.word	0x08007041
 8006f20:	08007093 	.word	0x08007093
 8006f24:	080070b5 	.word	0x080070b5
 8006f28:	080070f1 	.word	0x080070f1
 8006f2c:	08007117 	.word	0x08007117
 8006f30:	08007155 	.word	0x08007155
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f103 0110 	add.w	r1, r3, #16
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	795b      	ldrb	r3, [r3, #5]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f943 	bl	80071cc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	761a      	strb	r2, [r3, #24]
      break;
 8006f4c:	e139      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	795b      	ldrb	r3, [r3, #5]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fcc5 	bl	80078e4 <USBH_LL_GetURBState>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d11e      	bne.n	8006fa2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	7c1b      	ldrb	r3, [r3, #16]
 8006f68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f6c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	8adb      	ldrh	r3, [r3, #22]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006f76:	7b7b      	ldrb	r3, [r7, #13]
 8006f78:	2b80      	cmp	r3, #128	; 0x80
 8006f7a:	d103      	bne.n	8006f84 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2203      	movs	r2, #3
 8006f80:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006f82:	e115      	b.n	80071b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2205      	movs	r2, #5
 8006f88:	761a      	strb	r2, [r3, #24]
      break;
 8006f8a:	e111      	b.n	80071b0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006f8c:	7b7b      	ldrb	r3, [r7, #13]
 8006f8e:	2b80      	cmp	r3, #128	; 0x80
 8006f90:	d103      	bne.n	8006f9a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2209      	movs	r2, #9
 8006f96:	761a      	strb	r2, [r3, #24]
      break;
 8006f98:	e10a      	b.n	80071b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2207      	movs	r2, #7
 8006f9e:	761a      	strb	r2, [r3, #24]
      break;
 8006fa0:	e106      	b.n	80071b0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d003      	beq.n	8006fb0 <USBH_HandleControl+0xcc>
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	f040 8100 	bne.w	80071b0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	220b      	movs	r2, #11
 8006fb4:	761a      	strb	r2, [r3, #24]
      break;
 8006fb6:	e0fb      	b.n	80071b0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6899      	ldr	r1, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	899a      	ldrh	r2, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	791b      	ldrb	r3, [r3, #4]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f93a 	bl	800724a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	761a      	strb	r2, [r3, #24]
      break;
 8006fdc:	e0f1      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	791b      	ldrb	r3, [r3, #4]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc7d 	bl	80078e4 <USBH_LL_GetURBState>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d102      	bne.n	8006ffa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2209      	movs	r2, #9
 8006ff8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d102      	bne.n	8007006 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007000:	2303      	movs	r3, #3
 8007002:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007004:	e0d6      	b.n	80071b4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b04      	cmp	r3, #4
 800700a:	f040 80d3 	bne.w	80071b4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	220b      	movs	r2, #11
 8007012:	761a      	strb	r2, [r3, #24]
      break;
 8007014:	e0ce      	b.n	80071b4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6899      	ldr	r1, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	899a      	ldrh	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	795b      	ldrb	r3, [r3, #5]
 8007022:	2001      	movs	r0, #1
 8007024:	9000      	str	r0, [sp, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8ea 	bl	8007200 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007032:	b29a      	uxth	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2206      	movs	r2, #6
 800703c:	761a      	strb	r2, [r3, #24]
      break;
 800703e:	e0c0      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	795b      	ldrb	r3, [r3, #5]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fc4c 	bl	80078e4 <USBH_LL_GetURBState>
 800704c:	4603      	mov	r3, r0
 800704e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d103      	bne.n	800705e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2207      	movs	r2, #7
 800705a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800705c:	e0ac      	b.n	80071b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	2b05      	cmp	r3, #5
 8007062:	d105      	bne.n	8007070 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	220c      	movs	r2, #12
 8007068:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800706a:	2303      	movs	r3, #3
 800706c:	73fb      	strb	r3, [r7, #15]
      break;
 800706e:	e0a3      	b.n	80071b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d103      	bne.n	800707e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2205      	movs	r2, #5
 800707a:	761a      	strb	r2, [r3, #24]
      break;
 800707c:	e09c      	b.n	80071b8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b04      	cmp	r3, #4
 8007082:	f040 8099 	bne.w	80071b8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	220b      	movs	r2, #11
 800708a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800708c:	2302      	movs	r3, #2
 800708e:	73fb      	strb	r3, [r7, #15]
      break;
 8007090:	e092      	b.n	80071b8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	791b      	ldrb	r3, [r3, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	2100      	movs	r1, #0
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f8d5 	bl	800724a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2208      	movs	r2, #8
 80070b0:	761a      	strb	r2, [r3, #24]

      break;
 80070b2:	e086      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	791b      	ldrb	r3, [r3, #4]
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fc12 	bl	80078e4 <USBH_LL_GetURBState>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d105      	bne.n	80070d6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	220d      	movs	r2, #13
 80070ce:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070d4:	e072      	b.n	80071bc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d103      	bne.n	80070e4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	220b      	movs	r2, #11
 80070e0:	761a      	strb	r2, [r3, #24]
      break;
 80070e2:	e06b      	b.n	80071bc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d168      	bne.n	80071bc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80070ea:	2303      	movs	r3, #3
 80070ec:	73fb      	strb	r3, [r7, #15]
      break;
 80070ee:	e065      	b.n	80071bc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	795b      	ldrb	r3, [r3, #5]
 80070f4:	2201      	movs	r2, #1
 80070f6:	9200      	str	r2, [sp, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	2100      	movs	r1, #0
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f87f 	bl	8007200 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007108:	b29a      	uxth	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	220a      	movs	r2, #10
 8007112:	761a      	strb	r2, [r3, #24]
      break;
 8007114:	e055      	b.n	80071c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	795b      	ldrb	r3, [r3, #5]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fbe1 	bl	80078e4 <USBH_LL_GetURBState>
 8007122:	4603      	mov	r3, r0
 8007124:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d105      	bne.n	8007138 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	220d      	movs	r2, #13
 8007134:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007136:	e043      	b.n	80071c0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d103      	bne.n	8007146 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2209      	movs	r2, #9
 8007142:	761a      	strb	r2, [r3, #24]
      break;
 8007144:	e03c      	b.n	80071c0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007146:	7bbb      	ldrb	r3, [r7, #14]
 8007148:	2b04      	cmp	r3, #4
 800714a:	d139      	bne.n	80071c0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	220b      	movs	r2, #11
 8007150:	761a      	strb	r2, [r3, #24]
      break;
 8007152:	e035      	b.n	80071c0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7e5b      	ldrb	r3, [r3, #25]
 8007158:	3301      	adds	r3, #1
 800715a:	b2da      	uxtb	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	765a      	strb	r2, [r3, #25]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7e5b      	ldrb	r3, [r3, #25]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d806      	bhi.n	8007176 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007174:	e025      	b.n	80071c2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800717c:	2106      	movs	r1, #6
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	795b      	ldrb	r3, [r3, #5]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f90c 	bl	80073ac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	791b      	ldrb	r3, [r3, #4]
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f906 	bl	80073ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80071a6:	2302      	movs	r3, #2
 80071a8:	73fb      	strb	r3, [r7, #15]
      break;
 80071aa:	e00a      	b.n	80071c2 <USBH_HandleControl+0x2de>

    default:
      break;
 80071ac:	bf00      	nop
 80071ae:	e008      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071b0:	bf00      	nop
 80071b2:	e006      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071b4:	bf00      	nop
 80071b6:	e004      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071b8:	bf00      	nop
 80071ba:	e002      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071bc:	bf00      	nop
 80071be:	e000      	b.n	80071c2 <USBH_HandleControl+0x2de>
      break;
 80071c0:	bf00      	nop
  }

  return status;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af04      	add	r7, sp, #16
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	4613      	mov	r3, r2
 80071d8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80071da:	79f9      	ldrb	r1, [r7, #7]
 80071dc:	2300      	movs	r3, #0
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	2308      	movs	r3, #8
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	2300      	movs	r3, #0
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	2300      	movs	r3, #0
 80071ee:	2200      	movs	r2, #0
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 fb46 	bl	8007882 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af04      	add	r7, sp, #16
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	4611      	mov	r1, r2
 800720c:	461a      	mov	r2, r3
 800720e:	460b      	mov	r3, r1
 8007210:	80fb      	strh	r3, [r7, #6]
 8007212:	4613      	mov	r3, r2
 8007214:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007224:	7979      	ldrb	r1, [r7, #5]
 8007226:	7e3b      	ldrb	r3, [r7, #24]
 8007228:	9303      	str	r3, [sp, #12]
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	2301      	movs	r3, #1
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	2300      	movs	r3, #0
 8007238:	2200      	movs	r2, #0
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fb21 	bl	8007882 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b088      	sub	sp, #32
 800724e:	af04      	add	r7, sp, #16
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	4611      	mov	r1, r2
 8007256:	461a      	mov	r2, r3
 8007258:	460b      	mov	r3, r1
 800725a:	80fb      	strh	r3, [r7, #6]
 800725c:	4613      	mov	r3, r2
 800725e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007260:	7979      	ldrb	r1, [r7, #5]
 8007262:	2300      	movs	r3, #0
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	2301      	movs	r3, #1
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	2300      	movs	r3, #0
 8007274:	2201      	movs	r2, #1
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fb03 	bl	8007882 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800727c:	2300      	movs	r3, #0

}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b088      	sub	sp, #32
 800728a:	af04      	add	r7, sp, #16
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	4611      	mov	r1, r2
 8007292:	461a      	mov	r2, r3
 8007294:	460b      	mov	r3, r1
 8007296:	80fb      	strh	r3, [r7, #6]
 8007298:	4613      	mov	r3, r2
 800729a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072aa:	7979      	ldrb	r1, [r7, #5]
 80072ac:	7e3b      	ldrb	r3, [r7, #24]
 80072ae:	9303      	str	r3, [sp, #12]
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	9302      	str	r3, [sp, #8]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	2301      	movs	r3, #1
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	2302      	movs	r3, #2
 80072be:	2200      	movs	r2, #0
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 fade 	bl	8007882 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af04      	add	r7, sp, #16
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	4611      	mov	r1, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	460b      	mov	r3, r1
 80072e0:	80fb      	strh	r3, [r7, #6]
 80072e2:	4613      	mov	r3, r2
 80072e4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072e6:	7979      	ldrb	r1, [r7, #5]
 80072e8:	2300      	movs	r3, #0
 80072ea:	9303      	str	r3, [sp, #12]
 80072ec:	88fb      	ldrh	r3, [r7, #6]
 80072ee:	9302      	str	r3, [sp, #8]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	2301      	movs	r3, #1
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	2302      	movs	r3, #2
 80072fa:	2201      	movs	r2, #1
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 fac0 	bl	8007882 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af04      	add	r7, sp, #16
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	4608      	mov	r0, r1
 8007316:	4611      	mov	r1, r2
 8007318:	461a      	mov	r2, r3
 800731a:	4603      	mov	r3, r0
 800731c:	70fb      	strb	r3, [r7, #3]
 800731e:	460b      	mov	r3, r1
 8007320:	70bb      	strb	r3, [r7, #2]
 8007322:	4613      	mov	r3, r2
 8007324:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007326:	7878      	ldrb	r0, [r7, #1]
 8007328:	78ba      	ldrb	r2, [r7, #2]
 800732a:	78f9      	ldrb	r1, [r7, #3]
 800732c:	8b3b      	ldrh	r3, [r7, #24]
 800732e:	9302      	str	r3, [sp, #8]
 8007330:	7d3b      	ldrb	r3, [r7, #20]
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	7c3b      	ldrb	r3, [r7, #16]
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	4603      	mov	r3, r0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa53 	bl	80077e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fa72 	bl	8007844 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f836 	bl	80073e8 <USBH_GetFreePipe>
 800737c:	4603      	mov	r3, r0
 800737e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007380:	89fb      	ldrh	r3, [r7, #14]
 8007382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007386:	4293      	cmp	r3, r2
 8007388:	d00a      	beq.n	80073a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800738a:	78fa      	ldrb	r2, [r7, #3]
 800738c:	89fb      	ldrh	r3, [r7, #14]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	33e0      	adds	r3, #224	; 0xe0
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80073a0:	89fb      	ldrh	r3, [r7, #14]
 80073a2:	b2db      	uxtb	r3, r3
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	2b0f      	cmp	r3, #15
 80073bc:	d80d      	bhi.n	80073da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	33e0      	adds	r3, #224	; 0xe0
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	33e0      	adds	r3, #224	; 0xe0
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	440b      	add	r3, r1
 80073d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]
 80073f8:	e00f      	b.n	800741a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	33e0      	adds	r3, #224	; 0xe0
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	b29b      	uxth	r3, r3
 8007412:	e007      	b.n	8007424 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	3301      	adds	r3, #1
 8007418:	73fb      	strb	r3, [r7, #15]
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b0f      	cmp	r3, #15
 800741e:	d9ec      	bls.n	80073fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007420:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007434:	2201      	movs	r2, #1
 8007436:	490e      	ldr	r1, [pc, #56]	; (8007470 <MX_USB_HOST_Init+0x40>)
 8007438:	480e      	ldr	r0, [pc, #56]	; (8007474 <MX_USB_HOST_Init+0x44>)
 800743a:	f7fe fba7 	bl	8005b8c <USBH_Init>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007444:	f7f9 fa8c 	bl	8000960 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007448:	490b      	ldr	r1, [pc, #44]	; (8007478 <MX_USB_HOST_Init+0x48>)
 800744a:	480a      	ldr	r0, [pc, #40]	; (8007474 <MX_USB_HOST_Init+0x44>)
 800744c:	f7fe fc2c 	bl	8005ca8 <USBH_RegisterClass>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007456:	f7f9 fa83 	bl	8000960 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800745a:	4806      	ldr	r0, [pc, #24]	; (8007474 <MX_USB_HOST_Init+0x44>)
 800745c:	f7fe fcb0 	bl	8005dc0 <USBH_Start>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007466:	f7f9 fa7b 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800746a:	bf00      	nop
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	08007491 	.word	0x08007491
 8007474:	200001a8 	.word	0x200001a8
 8007478:	2000000c 	.word	0x2000000c

0800747c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007480:	4802      	ldr	r0, [pc, #8]	; (800748c <MX_USB_HOST_Process+0x10>)
 8007482:	f7fe fcad 	bl	8005de0 <USBH_Process>
}
 8007486:	bf00      	nop
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200001a8 	.word	0x200001a8

08007490 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	3b01      	subs	r3, #1
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d819      	bhi.n	80074d8 <USBH_UserProcess+0x48>
 80074a4:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <USBH_UserProcess+0x1c>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	080074c9 	.word	0x080074c9
 80074b4:	080074d9 	.word	0x080074d9
 80074b8:	080074d1 	.word	0x080074d1
 80074bc:	080074c1 	.word	0x080074c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80074c0:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <USBH_UserProcess+0x58>)
 80074c2:	2203      	movs	r2, #3
 80074c4:	701a      	strb	r2, [r3, #0]
  break;
 80074c6:	e008      	b.n	80074da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80074c8:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <USBH_UserProcess+0x58>)
 80074ca:	2202      	movs	r2, #2
 80074cc:	701a      	strb	r2, [r3, #0]
  break;
 80074ce:	e004      	b.n	80074da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <USBH_UserProcess+0x58>)
 80074d2:	2201      	movs	r2, #1
 80074d4:	701a      	strb	r2, [r3, #0]
  break;
 80074d6:	e000      	b.n	80074da <USBH_UserProcess+0x4a>

  default:
  break;
 80074d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	20000580 	.word	0x20000580

080074ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074f4:	f107 0314 	add.w	r3, r7, #20
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	605a      	str	r2, [r3, #4]
 80074fe:	609a      	str	r2, [r3, #8]
 8007500:	60da      	str	r2, [r3, #12]
 8007502:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800750c:	d147      	bne.n	800759e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800750e:	2300      	movs	r3, #0
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	4a24      	ldr	r2, [pc, #144]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	6313      	str	r3, [r2, #48]	; 0x30
 800751e:	4b22      	ldr	r3, [pc, #136]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800752a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800752e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007530:	2300      	movs	r3, #0
 8007532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	4619      	mov	r1, r3
 800753e:	481b      	ldr	r0, [pc, #108]	; (80075ac <HAL_HCD_MspInit+0xc0>)
 8007540:	f7f9 fd9a 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007544:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754a:	2302      	movs	r3, #2
 800754c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007552:	2300      	movs	r3, #0
 8007554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007556:	230a      	movs	r3, #10
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800755a:	f107 0314 	add.w	r3, r7, #20
 800755e:	4619      	mov	r1, r3
 8007560:	4812      	ldr	r0, [pc, #72]	; (80075ac <HAL_HCD_MspInit+0xc0>)
 8007562:	f7f9 fd89 	bl	8001078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007566:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756a:	4a0f      	ldr	r2, [pc, #60]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 800756c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007570:	6353      	str	r3, [r2, #52]	; 0x34
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	4a0b      	ldr	r2, [pc, #44]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 800757c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007580:	6453      	str	r3, [r2, #68]	; 0x44
 8007582:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <HAL_HCD_MspInit+0xbc>)
 8007584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800758e:	2200      	movs	r2, #0
 8007590:	2100      	movs	r1, #0
 8007592:	2043      	movs	r0, #67	; 0x43
 8007594:	f7f9 fd39 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007598:	2043      	movs	r0, #67	; 0x43
 800759a:	f7f9 fd52 	bl	8001042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800759e:	bf00      	nop
 80075a0:	3728      	adds	r7, #40	; 0x28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	40023800 	.word	0x40023800
 80075ac:	40020000 	.word	0x40020000

080075b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe ffed 	bl	800659e <USBH_LL_IncTimer>
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff f825 	bl	800662a <USBH_LL_Connect>
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff f82e 	bl	8006658 <USBH_LL_Disconnect>
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
 8007610:	4613      	mov	r3, r2
 8007612:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe ffdf 	bl	80065f2 <USBH_LL_PortEnabled>
}
 8007634:	bf00      	nop
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800764a:	4618      	mov	r0, r3
 800764c:	f7fe ffdf 	bl	800660e <USBH_LL_PortDisabled>
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007666:	2b01      	cmp	r3, #1
 8007668:	d12a      	bne.n	80076c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800766a:	4a18      	ldr	r2, [pc, #96]	; (80076cc <USBH_LL_Init+0x74>)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <USBH_LL_Init+0x74>)
 8007676:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800767a:	4b14      	ldr	r3, [pc, #80]	; (80076cc <USBH_LL_Init+0x74>)
 800767c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007680:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007682:	4b12      	ldr	r3, [pc, #72]	; (80076cc <USBH_LL_Init+0x74>)
 8007684:	2208      	movs	r2, #8
 8007686:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <USBH_LL_Init+0x74>)
 800768a:	2201      	movs	r2, #1
 800768c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800768e:	4b0f      	ldr	r3, [pc, #60]	; (80076cc <USBH_LL_Init+0x74>)
 8007690:	2200      	movs	r2, #0
 8007692:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007694:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <USBH_LL_Init+0x74>)
 8007696:	2202      	movs	r2, #2
 8007698:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800769a:	4b0c      	ldr	r3, [pc, #48]	; (80076cc <USBH_LL_Init+0x74>)
 800769c:	2200      	movs	r2, #0
 800769e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80076a0:	480a      	ldr	r0, [pc, #40]	; (80076cc <USBH_LL_Init+0x74>)
 80076a2:	f7f9 feb6 	bl	8001412 <HAL_HCD_Init>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80076ac:	f7f9 f958 	bl	8000960 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80076b0:	4806      	ldr	r0, [pc, #24]	; (80076cc <USBH_LL_Init+0x74>)
 80076b2:	f7fa fa9a 	bl	8001bea <HAL_HCD_GetCurrentFrame>
 80076b6:	4603      	mov	r3, r0
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fe ff60 	bl	8006580 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20000584 	.word	0x20000584

080076d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fa fa09 	bl	8001afe <HAL_HCD_Start>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f95c 	bl	80079b0 <USBH_Get_USB_Status>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800771c:	4618      	mov	r0, r3
 800771e:	f7fa fa11 	bl	8001b44 <HAL_HCD_Stop>
 8007722:	4603      	mov	r3, r0
 8007724:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	4618      	mov	r0, r3
 800772a:	f000 f941 	bl	80079b0 <USBH_Get_USB_Status>
 800772e:	4603      	mov	r3, r0
 8007730:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007732:	7bbb      	ldrb	r3, [r7, #14]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800774e:	4618      	mov	r0, r3
 8007750:	f7fa fa59 	bl	8001c06 <HAL_HCD_GetCurrentSpeed>
 8007754:	4603      	mov	r3, r0
 8007756:	2b02      	cmp	r3, #2
 8007758:	d00c      	beq.n	8007774 <USBH_LL_GetSpeed+0x38>
 800775a:	2b02      	cmp	r3, #2
 800775c:	d80d      	bhi.n	800777a <USBH_LL_GetSpeed+0x3e>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <USBH_LL_GetSpeed+0x2c>
 8007762:	2b01      	cmp	r3, #1
 8007764:	d003      	beq.n	800776e <USBH_LL_GetSpeed+0x32>
 8007766:	e008      	b.n	800777a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]
    break;
 800776c:	e008      	b.n	8007780 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800776e:	2301      	movs	r3, #1
 8007770:	73fb      	strb	r3, [r7, #15]
    break;
 8007772:	e005      	b.n	8007780 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007774:	2302      	movs	r3, #2
 8007776:	73fb      	strb	r3, [r7, #15]
    break;
 8007778:	e002      	b.n	8007780 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800777a:	2301      	movs	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]
    break;
 800777e:	bf00      	nop
  }
  return  speed;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fa f9ec 	bl	8001b7e <HAL_HCD_ResetPort>
 80077a6:	4603      	mov	r3, r0
 80077a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 f8ff 	bl	80079b0 <USBH_Get_USB_Status>
 80077b2:	4603      	mov	r3, r0
 80077b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	4611      	mov	r1, r2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fa f9f3 	bl	8001bc2 <HAL_HCD_HC_GetXferCount>
 80077dc:	4603      	mov	r3, r0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80077e6:	b590      	push	{r4, r7, lr}
 80077e8:	b089      	sub	sp, #36	; 0x24
 80077ea:	af04      	add	r7, sp, #16
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	4608      	mov	r0, r1
 80077f0:	4611      	mov	r1, r2
 80077f2:	461a      	mov	r2, r3
 80077f4:	4603      	mov	r3, r0
 80077f6:	70fb      	strb	r3, [r7, #3]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70bb      	strb	r3, [r7, #2]
 80077fc:	4613      	mov	r3, r2
 80077fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800780e:	787c      	ldrb	r4, [r7, #1]
 8007810:	78ba      	ldrb	r2, [r7, #2]
 8007812:	78f9      	ldrb	r1, [r7, #3]
 8007814:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007816:	9302      	str	r3, [sp, #8]
 8007818:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	4623      	mov	r3, r4
 8007826:	f7f9 fe56 	bl	80014d6 <HAL_HCD_HC_Init>
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	4618      	mov	r0, r3
 8007832:	f000 f8bd 	bl	80079b0 <USBH_Get_USB_Status>
 8007836:	4603      	mov	r3, r0
 8007838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800783a:	7bbb      	ldrb	r3, [r7, #14]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	bd90      	pop	{r4, r7, pc}

08007844 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7f9 fec6 	bl	80015f4 <HAL_HCD_HC_Halt>
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 f89e 	bl	80079b0 <USBH_Get_USB_Status>
 8007874:	4603      	mov	r3, r0
 8007876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007878:	7bbb      	ldrb	r3, [r7, #14]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007882:	b590      	push	{r4, r7, lr}
 8007884:	b089      	sub	sp, #36	; 0x24
 8007886:	af04      	add	r7, sp, #16
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	4608      	mov	r0, r1
 800788c:	4611      	mov	r1, r2
 800788e:	461a      	mov	r2, r3
 8007890:	4603      	mov	r3, r0
 8007892:	70fb      	strb	r3, [r7, #3]
 8007894:	460b      	mov	r3, r1
 8007896:	70bb      	strb	r3, [r7, #2]
 8007898:	4613      	mov	r3, r2
 800789a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078aa:	787c      	ldrb	r4, [r7, #1]
 80078ac:	78ba      	ldrb	r2, [r7, #2]
 80078ae:	78f9      	ldrb	r1, [r7, #3]
 80078b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078b4:	9303      	str	r3, [sp, #12]
 80078b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078b8:	9302      	str	r3, [sp, #8]
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	4623      	mov	r3, r4
 80078c6:	f7f9 feb9 	bl	800163c <HAL_HCD_HC_SubmitRequest>
 80078ca:	4603      	mov	r3, r0
 80078cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 f86d 	bl	80079b0 <USBH_Get_USB_Status>
 80078d6:	4603      	mov	r3, r0
 80078d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078da:	7bbb      	ldrb	r3, [r7, #14]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd90      	pop	{r4, r7, pc}

080078e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078f6:	78fa      	ldrb	r2, [r7, #3]
 80078f8:	4611      	mov	r1, r2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fa f94d 	bl	8001b9a <HAL_HCD_HC_GetURBState>
 8007900:	4603      	mov	r3, r0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800791c:	2b01      	cmp	r3, #1
 800791e:	d103      	bne.n	8007928 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	4618      	mov	r0, r3
 8007924:	f000 f870 	bl	8007a08 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007928:	20c8      	movs	r0, #200	; 0xc8
 800792a:	f7f9 fa6f 	bl	8000e0c <HAL_Delay>
  return USBH_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
 8007944:	4613      	mov	r3, r2
 8007946:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800794e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	212c      	movs	r1, #44	; 0x2c
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	4413      	add	r3, r2
 800795c:	333b      	adds	r3, #59	; 0x3b
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d009      	beq.n	8007978 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	212c      	movs	r1, #44	; 0x2c
 800796a:	fb01 f303 	mul.w	r3, r1, r3
 800796e:	4413      	add	r3, r2
 8007970:	3354      	adds	r3, #84	; 0x54
 8007972:	78ba      	ldrb	r2, [r7, #2]
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	e008      	b.n	800798a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	212c      	movs	r1, #44	; 0x2c
 800797e:	fb01 f303 	mul.w	r3, r1, r3
 8007982:	4413      	add	r3, r2
 8007984:	3355      	adds	r3, #85	; 0x55
 8007986:	78ba      	ldrb	r2, [r7, #2]
 8007988:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7f9 fa33 	bl	8000e0c <HAL_Delay>
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d817      	bhi.n	80079f4 <USBH_Get_USB_Status+0x44>
 80079c4:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <USBH_Get_USB_Status+0x1c>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	080079dd 	.word	0x080079dd
 80079d0:	080079e3 	.word	0x080079e3
 80079d4:	080079e9 	.word	0x080079e9
 80079d8:	080079ef 	.word	0x080079ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]
    break;
 80079e0:	e00b      	b.n	80079fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80079e2:	2302      	movs	r3, #2
 80079e4:	73fb      	strb	r3, [r7, #15]
    break;
 80079e6:	e008      	b.n	80079fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
    break;
 80079ec:	e005      	b.n	80079fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80079ee:	2302      	movs	r3, #2
 80079f0:	73fb      	strb	r3, [r7, #15]
    break;
 80079f2:	e002      	b.n	80079fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80079f4:	2302      	movs	r3, #2
 80079f6:	73fb      	strb	r3, [r7, #15]
    break;
 80079f8:	bf00      	nop
  }
  return usb_status;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
 8007a20:	e001      	b.n	8007a26 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007a22:	2301      	movs	r3, #1
 8007a24:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4803      	ldr	r0, [pc, #12]	; (8007a3c <MX_DriverVbusFS+0x34>)
 8007a2e:	f7f9 fcd7 	bl	80013e0 <HAL_GPIO_WritePin>
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40020800 	.word	0x40020800

08007a40 <__errno>:
 8007a40:	4b01      	ldr	r3, [pc, #4]	; (8007a48 <__errno+0x8>)
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	2000002c 	.word	0x2000002c

08007a4c <__libc_init_array>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4d0d      	ldr	r5, [pc, #52]	; (8007a84 <__libc_init_array+0x38>)
 8007a50:	4c0d      	ldr	r4, [pc, #52]	; (8007a88 <__libc_init_array+0x3c>)
 8007a52:	1b64      	subs	r4, r4, r5
 8007a54:	10a4      	asrs	r4, r4, #2
 8007a56:	2600      	movs	r6, #0
 8007a58:	42a6      	cmp	r6, r4
 8007a5a:	d109      	bne.n	8007a70 <__libc_init_array+0x24>
 8007a5c:	4d0b      	ldr	r5, [pc, #44]	; (8007a8c <__libc_init_array+0x40>)
 8007a5e:	4c0c      	ldr	r4, [pc, #48]	; (8007a90 <__libc_init_array+0x44>)
 8007a60:	f000 f92e 	bl	8007cc0 <_init>
 8007a64:	1b64      	subs	r4, r4, r5
 8007a66:	10a4      	asrs	r4, r4, #2
 8007a68:	2600      	movs	r6, #0
 8007a6a:	42a6      	cmp	r6, r4
 8007a6c:	d105      	bne.n	8007a7a <__libc_init_array+0x2e>
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a74:	4798      	blx	r3
 8007a76:	3601      	adds	r6, #1
 8007a78:	e7ee      	b.n	8007a58 <__libc_init_array+0xc>
 8007a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7e:	4798      	blx	r3
 8007a80:	3601      	adds	r6, #1
 8007a82:	e7f2      	b.n	8007a6a <__libc_init_array+0x1e>
 8007a84:	08007cfc 	.word	0x08007cfc
 8007a88:	08007cfc 	.word	0x08007cfc
 8007a8c:	08007cfc 	.word	0x08007cfc
 8007a90:	08007d00 	.word	0x08007d00

08007a94 <malloc>:
 8007a94:	4b02      	ldr	r3, [pc, #8]	; (8007aa0 <malloc+0xc>)
 8007a96:	4601      	mov	r1, r0
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	f000 b87f 	b.w	8007b9c <_malloc_r>
 8007a9e:	bf00      	nop
 8007aa0:	2000002c 	.word	0x2000002c

08007aa4 <free>:
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <free+0xc>)
 8007aa6:	4601      	mov	r1, r0
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	f000 b80b 	b.w	8007ac4 <_free_r>
 8007aae:	bf00      	nop
 8007ab0:	2000002c 	.word	0x2000002c

08007ab4 <memset>:
 8007ab4:	4402      	add	r2, r0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d100      	bne.n	8007abe <memset+0xa>
 8007abc:	4770      	bx	lr
 8007abe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac2:	e7f9      	b.n	8007ab8 <memset+0x4>

08007ac4 <_free_r>:
 8007ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ac6:	2900      	cmp	r1, #0
 8007ac8:	d044      	beq.n	8007b54 <_free_r+0x90>
 8007aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ace:	9001      	str	r0, [sp, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ad6:	bfb8      	it	lt
 8007ad8:	18e4      	addlt	r4, r4, r3
 8007ada:	f000 f8e3 	bl	8007ca4 <__malloc_lock>
 8007ade:	4a1e      	ldr	r2, [pc, #120]	; (8007b58 <_free_r+0x94>)
 8007ae0:	9801      	ldr	r0, [sp, #4]
 8007ae2:	6813      	ldr	r3, [r2, #0]
 8007ae4:	b933      	cbnz	r3, 8007af4 <_free_r+0x30>
 8007ae6:	6063      	str	r3, [r4, #4]
 8007ae8:	6014      	str	r4, [r2, #0]
 8007aea:	b003      	add	sp, #12
 8007aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007af0:	f000 b8de 	b.w	8007cb0 <__malloc_unlock>
 8007af4:	42a3      	cmp	r3, r4
 8007af6:	d908      	bls.n	8007b0a <_free_r+0x46>
 8007af8:	6825      	ldr	r5, [r4, #0]
 8007afa:	1961      	adds	r1, r4, r5
 8007afc:	428b      	cmp	r3, r1
 8007afe:	bf01      	itttt	eq
 8007b00:	6819      	ldreq	r1, [r3, #0]
 8007b02:	685b      	ldreq	r3, [r3, #4]
 8007b04:	1949      	addeq	r1, r1, r5
 8007b06:	6021      	streq	r1, [r4, #0]
 8007b08:	e7ed      	b.n	8007ae6 <_free_r+0x22>
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	b10b      	cbz	r3, 8007b14 <_free_r+0x50>
 8007b10:	42a3      	cmp	r3, r4
 8007b12:	d9fa      	bls.n	8007b0a <_free_r+0x46>
 8007b14:	6811      	ldr	r1, [r2, #0]
 8007b16:	1855      	adds	r5, r2, r1
 8007b18:	42a5      	cmp	r5, r4
 8007b1a:	d10b      	bne.n	8007b34 <_free_r+0x70>
 8007b1c:	6824      	ldr	r4, [r4, #0]
 8007b1e:	4421      	add	r1, r4
 8007b20:	1854      	adds	r4, r2, r1
 8007b22:	42a3      	cmp	r3, r4
 8007b24:	6011      	str	r1, [r2, #0]
 8007b26:	d1e0      	bne.n	8007aea <_free_r+0x26>
 8007b28:	681c      	ldr	r4, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	6053      	str	r3, [r2, #4]
 8007b2e:	4421      	add	r1, r4
 8007b30:	6011      	str	r1, [r2, #0]
 8007b32:	e7da      	b.n	8007aea <_free_r+0x26>
 8007b34:	d902      	bls.n	8007b3c <_free_r+0x78>
 8007b36:	230c      	movs	r3, #12
 8007b38:	6003      	str	r3, [r0, #0]
 8007b3a:	e7d6      	b.n	8007aea <_free_r+0x26>
 8007b3c:	6825      	ldr	r5, [r4, #0]
 8007b3e:	1961      	adds	r1, r4, r5
 8007b40:	428b      	cmp	r3, r1
 8007b42:	bf04      	itt	eq
 8007b44:	6819      	ldreq	r1, [r3, #0]
 8007b46:	685b      	ldreq	r3, [r3, #4]
 8007b48:	6063      	str	r3, [r4, #4]
 8007b4a:	bf04      	itt	eq
 8007b4c:	1949      	addeq	r1, r1, r5
 8007b4e:	6021      	streq	r1, [r4, #0]
 8007b50:	6054      	str	r4, [r2, #4]
 8007b52:	e7ca      	b.n	8007aea <_free_r+0x26>
 8007b54:	b003      	add	sp, #12
 8007b56:	bd30      	pop	{r4, r5, pc}
 8007b58:	20000888 	.word	0x20000888

08007b5c <sbrk_aligned>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4e0e      	ldr	r6, [pc, #56]	; (8007b98 <sbrk_aligned+0x3c>)
 8007b60:	460c      	mov	r4, r1
 8007b62:	6831      	ldr	r1, [r6, #0]
 8007b64:	4605      	mov	r5, r0
 8007b66:	b911      	cbnz	r1, 8007b6e <sbrk_aligned+0x12>
 8007b68:	f000 f88c 	bl	8007c84 <_sbrk_r>
 8007b6c:	6030      	str	r0, [r6, #0]
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4628      	mov	r0, r5
 8007b72:	f000 f887 	bl	8007c84 <_sbrk_r>
 8007b76:	1c43      	adds	r3, r0, #1
 8007b78:	d00a      	beq.n	8007b90 <sbrk_aligned+0x34>
 8007b7a:	1cc4      	adds	r4, r0, #3
 8007b7c:	f024 0403 	bic.w	r4, r4, #3
 8007b80:	42a0      	cmp	r0, r4
 8007b82:	d007      	beq.n	8007b94 <sbrk_aligned+0x38>
 8007b84:	1a21      	subs	r1, r4, r0
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 f87c 	bl	8007c84 <_sbrk_r>
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d101      	bne.n	8007b94 <sbrk_aligned+0x38>
 8007b90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007b94:	4620      	mov	r0, r4
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	2000088c 	.word	0x2000088c

08007b9c <_malloc_r>:
 8007b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba0:	1ccd      	adds	r5, r1, #3
 8007ba2:	f025 0503 	bic.w	r5, r5, #3
 8007ba6:	3508      	adds	r5, #8
 8007ba8:	2d0c      	cmp	r5, #12
 8007baa:	bf38      	it	cc
 8007bac:	250c      	movcc	r5, #12
 8007bae:	2d00      	cmp	r5, #0
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	db01      	blt.n	8007bb8 <_malloc_r+0x1c>
 8007bb4:	42a9      	cmp	r1, r5
 8007bb6:	d905      	bls.n	8007bc4 <_malloc_r+0x28>
 8007bb8:	230c      	movs	r3, #12
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	2600      	movs	r6, #0
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc4:	4e2e      	ldr	r6, [pc, #184]	; (8007c80 <_malloc_r+0xe4>)
 8007bc6:	f000 f86d 	bl	8007ca4 <__malloc_lock>
 8007bca:	6833      	ldr	r3, [r6, #0]
 8007bcc:	461c      	mov	r4, r3
 8007bce:	bb34      	cbnz	r4, 8007c1e <_malloc_r+0x82>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	f7ff ffc2 	bl	8007b5c <sbrk_aligned>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	4604      	mov	r4, r0
 8007bdc:	d14d      	bne.n	8007c7a <_malloc_r+0xde>
 8007bde:	6834      	ldr	r4, [r6, #0]
 8007be0:	4626      	mov	r6, r4
 8007be2:	2e00      	cmp	r6, #0
 8007be4:	d140      	bne.n	8007c68 <_malloc_r+0xcc>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	4631      	mov	r1, r6
 8007bea:	4638      	mov	r0, r7
 8007bec:	eb04 0803 	add.w	r8, r4, r3
 8007bf0:	f000 f848 	bl	8007c84 <_sbrk_r>
 8007bf4:	4580      	cmp	r8, r0
 8007bf6:	d13a      	bne.n	8007c6e <_malloc_r+0xd2>
 8007bf8:	6821      	ldr	r1, [r4, #0]
 8007bfa:	3503      	adds	r5, #3
 8007bfc:	1a6d      	subs	r5, r5, r1
 8007bfe:	f025 0503 	bic.w	r5, r5, #3
 8007c02:	3508      	adds	r5, #8
 8007c04:	2d0c      	cmp	r5, #12
 8007c06:	bf38      	it	cc
 8007c08:	250c      	movcc	r5, #12
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	f7ff ffa5 	bl	8007b5c <sbrk_aligned>
 8007c12:	3001      	adds	r0, #1
 8007c14:	d02b      	beq.n	8007c6e <_malloc_r+0xd2>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	442b      	add	r3, r5
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	e00e      	b.n	8007c3c <_malloc_r+0xa0>
 8007c1e:	6822      	ldr	r2, [r4, #0]
 8007c20:	1b52      	subs	r2, r2, r5
 8007c22:	d41e      	bmi.n	8007c62 <_malloc_r+0xc6>
 8007c24:	2a0b      	cmp	r2, #11
 8007c26:	d916      	bls.n	8007c56 <_malloc_r+0xba>
 8007c28:	1961      	adds	r1, r4, r5
 8007c2a:	42a3      	cmp	r3, r4
 8007c2c:	6025      	str	r5, [r4, #0]
 8007c2e:	bf18      	it	ne
 8007c30:	6059      	strne	r1, [r3, #4]
 8007c32:	6863      	ldr	r3, [r4, #4]
 8007c34:	bf08      	it	eq
 8007c36:	6031      	streq	r1, [r6, #0]
 8007c38:	5162      	str	r2, [r4, r5]
 8007c3a:	604b      	str	r3, [r1, #4]
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f104 060b 	add.w	r6, r4, #11
 8007c42:	f000 f835 	bl	8007cb0 <__malloc_unlock>
 8007c46:	f026 0607 	bic.w	r6, r6, #7
 8007c4a:	1d23      	adds	r3, r4, #4
 8007c4c:	1af2      	subs	r2, r6, r3
 8007c4e:	d0b6      	beq.n	8007bbe <_malloc_r+0x22>
 8007c50:	1b9b      	subs	r3, r3, r6
 8007c52:	50a3      	str	r3, [r4, r2]
 8007c54:	e7b3      	b.n	8007bbe <_malloc_r+0x22>
 8007c56:	6862      	ldr	r2, [r4, #4]
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	bf0c      	ite	eq
 8007c5c:	6032      	streq	r2, [r6, #0]
 8007c5e:	605a      	strne	r2, [r3, #4]
 8007c60:	e7ec      	b.n	8007c3c <_malloc_r+0xa0>
 8007c62:	4623      	mov	r3, r4
 8007c64:	6864      	ldr	r4, [r4, #4]
 8007c66:	e7b2      	b.n	8007bce <_malloc_r+0x32>
 8007c68:	4634      	mov	r4, r6
 8007c6a:	6876      	ldr	r6, [r6, #4]
 8007c6c:	e7b9      	b.n	8007be2 <_malloc_r+0x46>
 8007c6e:	230c      	movs	r3, #12
 8007c70:	603b      	str	r3, [r7, #0]
 8007c72:	4638      	mov	r0, r7
 8007c74:	f000 f81c 	bl	8007cb0 <__malloc_unlock>
 8007c78:	e7a1      	b.n	8007bbe <_malloc_r+0x22>
 8007c7a:	6025      	str	r5, [r4, #0]
 8007c7c:	e7de      	b.n	8007c3c <_malloc_r+0xa0>
 8007c7e:	bf00      	nop
 8007c80:	20000888 	.word	0x20000888

08007c84 <_sbrk_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d06      	ldr	r5, [pc, #24]	; (8007ca0 <_sbrk_r+0x1c>)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	602b      	str	r3, [r5, #0]
 8007c90:	f7f8 ffd8 	bl	8000c44 <_sbrk>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_sbrk_r+0x1a>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_sbrk_r+0x1a>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20000890 	.word	0x20000890

08007ca4 <__malloc_lock>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	; (8007cac <__malloc_lock+0x8>)
 8007ca6:	f000 b809 	b.w	8007cbc <__retarget_lock_acquire_recursive>
 8007caa:	bf00      	nop
 8007cac:	20000894 	.word	0x20000894

08007cb0 <__malloc_unlock>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	; (8007cb8 <__malloc_unlock+0x8>)
 8007cb2:	f000 b804 	b.w	8007cbe <__retarget_lock_release_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	20000894 	.word	0x20000894

08007cbc <__retarget_lock_acquire_recursive>:
 8007cbc:	4770      	bx	lr

08007cbe <__retarget_lock_release_recursive>:
 8007cbe:	4770      	bx	lr

08007cc0 <_init>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr

08007ccc <_fini>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr
