
encoder_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000308c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003230  08003230  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003230  08003230  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003230  08003230  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003234  08003234  00013234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  080032a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080032a8  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c074  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db1  00000000  00000000  0002c10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0002dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  0002ec40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189aa  00000000  00000000  0002f908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce02  00000000  00000000  000482b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dff1  00000000  00000000  000550b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e30a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f38  00000000  00000000  000e30f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003180 	.word	0x08003180

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003180 	.word	0x08003180

0800014c <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t rot_new_state;
uint16_t rot_old_state;
uint16_t rot_cnt;
uint16_t _write(int file, char* p, int len){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	230a      	movs	r3, #10
 800015e:	68b9      	ldr	r1, [r7, #8]
 8000160:	4804      	ldr	r0, [pc, #16]	; (8000174 <_write+0x28>)
 8000162:	f002 f97a 	bl	800245a <HAL_UART_Transmit>
	return len;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	b29b      	uxth	r3, r3

}
 800016a:	4618      	mov	r0, r3
 800016c:	3710      	adds	r7, #16
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	20000144 	.word	0x20000144

08000178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017c:	f000 fc04 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000180:	f000 f814 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000184:	f000 f960 	bl	8000448 <MX_GPIO_Init>
  MX_CAN_Init();
 8000188:	f000 f856 	bl	8000238 <MX_CAN_Init>
  MX_TIM3_Init();
 800018c:	f000 f8de 	bl	800034c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000190:	f000 f888 	bl	80002a4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000194:	f000 f92e 	bl	80003f4 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("HelloWorld\n");
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <main+0x30>)
 800019a:	f002 fb69 	bl	8002870 <puts>
	  HAL_Delay(1000);
 800019e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a2:	f000 fc53 	bl	8000a4c <HAL_Delay>
	  printf("HelloWorld\n");
 80001a6:	e7f7      	b.n	8000198 <main+0x20>
 80001a8:	08003198 	.word	0x08003198

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	; 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 fae2 	bl	8002784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ce:	2301      	movs	r3, #1
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001dc:	2301      	movs	r3, #1
 80001de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e0:	2302      	movs	r3, #2
 80001e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0318 	add.w	r3, r7, #24
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fa1f 	bl	8001638 <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000200:	f000 f97a 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000204:	230f      	movs	r3, #15
 8000206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000208:	2302      	movs	r3, #2
 800020a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2102      	movs	r1, #2
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fc8c 	bl	8001b3c <HAL_RCC_ClockConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800022a:	f000 f965 	bl	80004f8 <Error_Handler>
  }
}
 800022e:	bf00      	nop
 8000230:	3740      	adds	r7, #64	; 0x40
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800023c:	4b17      	ldr	r3, [pc, #92]	; (800029c <MX_CAN_Init+0x64>)
 800023e:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <MX_CAN_Init+0x68>)
 8000240:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <MX_CAN_Init+0x64>)
 8000244:	2212      	movs	r2, #18
 8000246:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000248:	4b14      	ldr	r3, [pc, #80]	; (800029c <MX_CAN_Init+0x64>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800024e:	4b13      	ldr	r3, [pc, #76]	; (800029c <MX_CAN_Init+0x64>)
 8000250:	2200      	movs	r2, #0
 8000252:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <MX_CAN_Init+0x64>)
 8000256:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800025a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <MX_CAN_Init+0x64>)
 800025e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000262:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <MX_CAN_Init+0x64>)
 8000266:	2200      	movs	r2, #0
 8000268:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <MX_CAN_Init+0x64>)
 800026c:	2200      	movs	r2, #0
 800026e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <MX_CAN_Init+0x64>)
 8000272:	2200      	movs	r2, #0
 8000274:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <MX_CAN_Init+0x64>)
 8000278:	2200      	movs	r2, #0
 800027a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <MX_CAN_Init+0x64>)
 800027e:	2200      	movs	r2, #0
 8000280:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <MX_CAN_Init+0x64>)
 8000284:	2200      	movs	r2, #0
 8000286:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <MX_CAN_Init+0x64>)
 800028a:	f000 fc03 	bl	8000a94 <HAL_CAN_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000294:	f000 f930 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	2000008c 	.word	0x2000008c
 80002a0:	40006400 	.word	0x40006400

080002a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08c      	sub	sp, #48	; 0x30
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80002aa:	f107 030c 	add.w	r3, r7, #12
 80002ae:	2224      	movs	r2, #36	; 0x24
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 fa66 	bl	8002784 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c0:	4b21      	ldr	r3, [pc, #132]	; (8000348 <MX_TIM2_Init+0xa4>)
 80002c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002c8:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <MX_TIM2_Init+0xa4>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ce:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <MX_TIM2_Init+0xa4>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002d4:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <MX_TIM2_Init+0xa4>)
 80002d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002dc:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <MX_TIM2_Init+0xa4>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e2:	4b19      	ldr	r3, [pc, #100]	; (8000348 <MX_TIM2_Init+0xa4>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80002ec:	2300      	movs	r3, #0
 80002ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002f0:	2301      	movs	r3, #1
 80002f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80002fc:	2300      	movs	r3, #0
 80002fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000300:	2301      	movs	r3, #1
 8000302:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800030c:	f107 030c 	add.w	r3, r7, #12
 8000310:	4619      	mov	r1, r3
 8000312:	480d      	ldr	r0, [pc, #52]	; (8000348 <MX_TIM2_Init+0xa4>)
 8000314:	f001 fdaa 	bl	8001e6c <HAL_TIM_Encoder_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800031e:	f000 f8eb 	bl	80004f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4619      	mov	r1, r3
 800032e:	4806      	ldr	r0, [pc, #24]	; (8000348 <MX_TIM2_Init+0xa4>)
 8000330:	f001 ffd6 	bl	80022e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800033a:	f000 f8dd 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	3730      	adds	r7, #48	; 0x30
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	200000b4 	.word	0x200000b4

0800034c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08c      	sub	sp, #48	; 0x30
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	2224      	movs	r2, #36	; 0x24
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f002 fa12 	bl	8002784 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <MX_TIM3_Init+0xa0>)
 800036a:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <MX_TIM3_Init+0xa4>)
 800036c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <MX_TIM3_Init+0xa0>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <MX_TIM3_Init+0xa0>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <MX_TIM3_Init+0xa0>)
 800037c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000380:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_TIM3_Init+0xa0>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_TIM3_Init+0xa0>)
 800038a:	2200      	movs	r2, #0
 800038c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800038e:	2303      	movs	r3, #3
 8000390:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000396:	2301      	movs	r3, #1
 8000398:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003a2:	2300      	movs	r3, #0
 80003a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003a6:	2301      	movs	r3, #1
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80003b2:	f107 030c 	add.w	r3, r7, #12
 80003b6:	4619      	mov	r1, r3
 80003b8:	480c      	ldr	r0, [pc, #48]	; (80003ec <MX_TIM3_Init+0xa0>)
 80003ba:	f001 fd57 	bl	8001e6c <HAL_TIM_Encoder_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80003c4:	f000 f898 	bl	80004f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c8:	2300      	movs	r3, #0
 80003ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	4619      	mov	r1, r3
 80003d4:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_TIM3_Init+0xa0>)
 80003d6:	f001 ff83 	bl	80022e0 <HAL_TIMEx_MasterConfigSynchronization>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80003e0:	f000 f88a 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	3730      	adds	r7, #48	; 0x30
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200000fc 	.word	0x200000fc
 80003f0:	40000400 	.word	0x40000400

080003f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_USART3_UART_Init+0x4c>)
 80003fa:	4a12      	ldr	r2, [pc, #72]	; (8000444 <MX_USART3_UART_Init+0x50>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <MX_USART3_UART_Init+0x4c>)
 8000400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000404:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_USART3_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_USART3_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_USART3_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_USART3_UART_Init+0x4c>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_USART3_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_USART3_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <MX_USART3_UART_Init+0x4c>)
 800042c:	f001 ffc8 	bl	80023c0 <HAL_UART_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000436:	f000 f85f 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000144 	.word	0x20000144
 8000444:	40004800 	.word	0x40004800

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045c:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <MX_GPIO_Init+0xa8>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a23      	ldr	r2, [pc, #140]	; (80004f0 <MX_GPIO_Init+0xa8>)
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <MX_GPIO_Init+0xa8>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <MX_GPIO_Init+0xa8>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a1d      	ldr	r2, [pc, #116]	; (80004f0 <MX_GPIO_Init+0xa8>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_GPIO_Init+0xa8>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_GPIO_Init+0xa8>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a17      	ldr	r2, [pc, #92]	; (80004f0 <MX_GPIO_Init+0xa8>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_GPIO_Init+0xa8>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_GPIO_Init+0xa8>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a11      	ldr	r2, [pc, #68]	; (80004f0 <MX_GPIO_Init+0xa8>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_GPIO_Init+0xa8>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0308 	and.w	r3, r3, #8
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c2:	480c      	ldr	r0, [pc, #48]	; (80004f4 <MX_GPIO_Init+0xac>)
 80004c4:	f001 f8a0 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <MX_GPIO_Init+0xac>)
 80004e2:	f000 ff0d 	bl	8001300 <HAL_GPIO_Init>

}
 80004e6:	bf00      	nop
 80004e8:	3720      	adds	r7, #32
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40011000 	.word	0x40011000

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	e7fe      	b.n	8000500 <Error_Handler+0x8>
	...

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_MspInit+0x40>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_MspInit+0x40>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_MspInit+0x40>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_MspInit+0x40>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_MspInit+0x40>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_MspInit+0x40>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000

08000548 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a24      	ldr	r2, [pc, #144]	; (80005f4 <HAL_CAN_MspInit+0xac>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d141      	bne.n	80005ec <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <HAL_CAN_MspInit+0xb0>)
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <HAL_CAN_MspInit+0xb0>)
 800056e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000572:	61d3      	str	r3, [r2, #28]
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <HAL_CAN_MspInit+0xb0>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <HAL_CAN_MspInit+0xb0>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <HAL_CAN_MspInit+0xb0>)
 8000586:	f043 0304 	orr.w	r3, r3, #4
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <HAL_CAN_MspInit+0xb0>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0304 	and.w	r3, r3, #4
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800059c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	4619      	mov	r1, r3
 80005ac:	4813      	ldr	r0, [pc, #76]	; (80005fc <HAL_CAN_MspInit+0xb4>)
 80005ae:	f000 fea7 	bl	8001300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005bc:	2303      	movs	r3, #3
 80005be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	480d      	ldr	r0, [pc, #52]	; (80005fc <HAL_CAN_MspInit+0xb4>)
 80005c8:	f000 fe9a 	bl	8001300 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2014      	movs	r0, #20
 80005d2:	f000 fe5e 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80005d6:	2014      	movs	r0, #20
 80005d8:	f000 fe77 	bl	80012ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2015      	movs	r0, #21
 80005e2:	f000 fe56 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005e6:	2015      	movs	r0, #21
 80005e8:	f000 fe6f 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40006400 	.word	0x40006400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800

08000600 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f107 0318 	add.w	r3, r7, #24
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800061e:	d12c      	bne.n	800067a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	4a2f      	ldr	r2, [pc, #188]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	61d3      	str	r3, [r2, #28]
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800062e:	69db      	ldr	r3, [r3, #28]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000650:	2303      	movs	r3, #3
 8000652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	4619      	mov	r1, r3
 8000662:	4821      	ldr	r0, [pc, #132]	; (80006e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000664:	f000 fe4c 	bl	8001300 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	201c      	movs	r0, #28
 800066e:	f000 fe10 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000672:	201c      	movs	r0, #28
 8000674:	f000 fe29 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000678:	e030      	b.n	80006dc <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM3)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <HAL_TIM_Encoder_MspInit+0xec>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d12b      	bne.n	80006dc <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	4a16      	ldr	r2, [pc, #88]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800068a:	f043 0302 	orr.w	r3, r3, #2
 800068e:	61d3      	str	r3, [r2, #28]
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	f003 0302 	and.w	r3, r3, #2
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006b4:	23c0      	movs	r3, #192	; 0xc0
 80006b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4619      	mov	r1, r3
 80006c6:	4808      	ldr	r0, [pc, #32]	; (80006e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80006c8:	f000 fe1a 	bl	8001300 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	201d      	movs	r0, #29
 80006d2:	f000 fdde 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006d6:	201d      	movs	r0, #29
 80006d8:	f000 fdf7 	bl	80012ca <HAL_NVIC_EnableIRQ>
}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010800 	.word	0x40010800
 80006ec:	40000400 	.word	0x40000400

080006f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <HAL_UART_MspInit+0x8c>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d131      	bne.n	8000774 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <HAL_UART_MspInit+0x90>)
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <HAL_UART_MspInit+0x90>)
 8000716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800071a:	61d3      	str	r3, [r2, #28]
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_UART_MspInit+0x90>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_UART_MspInit+0x90>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <HAL_UART_MspInit+0x90>)
 800072e:	f043 0308 	orr.w	r3, r3, #8
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_UART_MspInit+0x90>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0308 	and.w	r3, r3, #8
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <HAL_UART_MspInit+0x94>)
 8000756:	f000 fdd3 	bl	8001300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800075a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <HAL_UART_MspInit+0x94>)
 8000770:	f000 fdc6 	bl	8001300 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40004800 	.word	0x40004800
 8000780:	40021000 	.word	0x40021000
 8000784:	40010c00 	.word	0x40010c00

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ce:	f000 f921 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007de:	f000 fa54 	bl	8000c8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000008c 	.word	0x2000008c

080007ec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <CAN1_RX1_IRQHandler+0x10>)
 80007f2:	f000 fa4a 	bl	8000c8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000008c 	.word	0x2000008c

08000800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <TIM2_IRQHandler+0x10>)
 8000806:	f001 fbd3 	bl	8001fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000b4 	.word	0x200000b4

08000814 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <TIM3_IRQHandler+0x10>)
 800081a:	f001 fbc9 	bl	8001fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000fc 	.word	0x200000fc

08000828 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e00a      	b.n	8000850 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800083a:	f3af 8000 	nop.w
 800083e:	4601      	mov	r1, r0
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	60ba      	str	r2, [r7, #8]
 8000846:	b2ca      	uxtb	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	3301      	adds	r3, #1
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697a      	ldr	r2, [r7, #20]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	429a      	cmp	r2, r3
 8000856:	dbf0      	blt.n	800083a <_read+0x12>
  }

  return len;
 8000858:	687b      	ldr	r3, [r7, #4]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800086a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000888:	605a      	str	r2, [r3, #4]
  return 0;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <_isatty>:

int _isatty(int file)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b085      	sub	sp, #20
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
	...

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f001 ff1c 	bl	8002730 <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20005000 	.word	0x20005000
 8000924:	00000400 	.word	0x00000400
 8000928:	20000188 	.word	0x20000188
 800092c:	200001a0 	.word	0x200001a0

08000930 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	; (8000974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	; (8000980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000962:	f7ff ffe5 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000966:	f001 fee9 	bl	800273c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fc05 	bl	8000178 <main>
  bx lr
 800096e:	4770      	bx	lr
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000978:	08003238 	.word	0x08003238
  ldr r2, =_sbss
 800097c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000980:	200001a0 	.word	0x200001a0

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x28>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x28>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 fc6f 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff fdae 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fc87 	bl	80012e6 <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 fc4f 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x1c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_IncTick+0x20>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <HAL_IncTick+0x20>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000008 	.word	0x20000008
 8000a34:	2000018c 	.word	0x2000018c

08000a38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <HAL_GetTick+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	2000018c 	.word	0x2000018c

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff fff0 	bl	8000a38 <HAL_GetTick>
 8000a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a64:	d005      	beq.n	8000a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_Delay+0x44>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a72:	bf00      	nop
 8000a74:	f7ff ffe0 	bl	8000a38 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d8f7      	bhi.n	8000a74 <HAL_Delay+0x28>
  {
  }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008

08000a94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e0ed      	b.n	8000c82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fd48 	bl	8000548 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f042 0201 	orr.w	r2, r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ac8:	f7ff ffb6 	bl	8000a38 <HAL_GetTick>
 8000acc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ace:	e012      	b.n	8000af6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ad0:	f7ff ffb2 	bl	8000a38 <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	2b0a      	cmp	r3, #10
 8000adc:	d90b      	bls.n	8000af6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2205      	movs	r2, #5
 8000aee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e0c5      	b.n	8000c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0e5      	beq.n	8000ad0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 0202 	bic.w	r2, r2, #2
 8000b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b14:	f7ff ff90 	bl	8000a38 <HAL_GetTick>
 8000b18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b1a:	e012      	b.n	8000b42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b1c:	f7ff ff8c 	bl	8000a38 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	2b0a      	cmp	r3, #10
 8000b28:	d90b      	bls.n	8000b42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2205      	movs	r2, #5
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e09f      	b.n	8000c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1e5      	bne.n	8000b1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7e1b      	ldrb	r3, [r3, #24]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d108      	bne.n	8000b6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e007      	b.n	8000b7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7e5b      	ldrb	r3, [r3, #25]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d108      	bne.n	8000b94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e007      	b.n	8000ba4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7e9b      	ldrb	r3, [r3, #26]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d108      	bne.n	8000bbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 0220 	orr.w	r2, r2, #32
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e007      	b.n	8000bce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0220 	bic.w	r2, r2, #32
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7edb      	ldrb	r3, [r3, #27]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d108      	bne.n	8000be8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 0210 	bic.w	r2, r2, #16
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 0210 	orr.w	r2, r2, #16
 8000bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7f1b      	ldrb	r3, [r3, #28]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d108      	bne.n	8000c12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f042 0208 	orr.w	r2, r2, #8
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	e007      	b.n	8000c22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 0208 	bic.w	r2, r2, #8
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7f5b      	ldrb	r3, [r3, #29]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d108      	bne.n	8000c3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f042 0204 	orr.w	r2, r2, #4
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	e007      	b.n	8000c4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0204 	bic.w	r2, r2, #4
 8000c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	ea42 0103 	orr.w	r1, r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	1e5a      	subs	r2, r3, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b08a      	sub	sp, #40	; 0x28
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d07c      	beq.n	8000dca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d023      	beq.n	8000d22 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f983 	bl	8000ff8 <HAL_CAN_TxMailbox0CompleteCallback>
 8000cf2:	e016      	b.n	8000d22 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d004      	beq.n	8000d08 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
 8000d06:	e00c      	b.n	8000d22 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1a:	e002      	b.n	8000d22 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f000 f986 	bl	800102e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d024      	beq.n	8000d76 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f962 	bl	800100a <HAL_CAN_TxMailbox1CompleteCallback>
 8000d46:	e016      	b.n	8000d76 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d004      	beq.n	8000d5c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5a:	e00c      	b.n	8000d76 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d004      	beq.n	8000d70 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	e002      	b.n	8000d76 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f000 f965 	bl	8001040 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d024      	beq.n	8000dca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f000 f941 	bl	800101c <HAL_CAN_TxMailbox2CompleteCallback>
 8000d9a:	e016      	b.n	8000dca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
 8000dae:	e00c      	b.n	8000dca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d004      	beq.n	8000dc4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc2:	e002      	b.n	8000dca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f000 f944 	bl	8001052 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000dca:	6a3b      	ldr	r3, [r7, #32]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d00c      	beq.n	8000dee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d007      	beq.n	8000dee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2210      	movs	r2, #16
 8000dec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000dee:	6a3b      	ldr	r3, [r7, #32]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00b      	beq.n	8000e10 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2208      	movs	r2, #8
 8000e08:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f933 	bl	8001076 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d009      	beq.n	8000e2e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f91b 	bl	8001064 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000e2e:	6a3b      	ldr	r3, [r7, #32]
 8000e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00c      	beq.n	8000e52 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	f003 0310 	and.w	r3, r3, #16
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d007      	beq.n	8000e52 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2210      	movs	r2, #16
 8000e50:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	f003 0320 	and.w	r3, r3, #32
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00b      	beq.n	8000e74 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 f913 	bl	800109a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000e74:	6a3b      	ldr	r3, [r7, #32]
 8000e76:	f003 0310 	and.w	r3, r3, #16
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d009      	beq.n	8000e92 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f8fb 	bl	8001088 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00b      	beq.n	8000eb4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0310 	and.w	r3, r3, #16
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d006      	beq.n	8000eb4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2210      	movs	r2, #16
 8000eac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f8fc 	bl	80010ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00b      	beq.n	8000ed6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d006      	beq.n	8000ed6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2208      	movs	r2, #8
 8000ece:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f8f4 	bl	80010be <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d07b      	beq.n	8000fd8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d072      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d008      	beq.n	8000f06 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d008      	beq.n	8000f22 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d008      	beq.n	8000f3e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d043      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d03e      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000f58:	2b60      	cmp	r3, #96	; 0x60
 8000f5a:	d02b      	beq.n	8000fb4 <HAL_CAN_IRQHandler+0x32a>
 8000f5c:	2b60      	cmp	r3, #96	; 0x60
 8000f5e:	d82e      	bhi.n	8000fbe <HAL_CAN_IRQHandler+0x334>
 8000f60:	2b50      	cmp	r3, #80	; 0x50
 8000f62:	d022      	beq.n	8000faa <HAL_CAN_IRQHandler+0x320>
 8000f64:	2b50      	cmp	r3, #80	; 0x50
 8000f66:	d82a      	bhi.n	8000fbe <HAL_CAN_IRQHandler+0x334>
 8000f68:	2b40      	cmp	r3, #64	; 0x40
 8000f6a:	d019      	beq.n	8000fa0 <HAL_CAN_IRQHandler+0x316>
 8000f6c:	2b40      	cmp	r3, #64	; 0x40
 8000f6e:	d826      	bhi.n	8000fbe <HAL_CAN_IRQHandler+0x334>
 8000f70:	2b30      	cmp	r3, #48	; 0x30
 8000f72:	d010      	beq.n	8000f96 <HAL_CAN_IRQHandler+0x30c>
 8000f74:	2b30      	cmp	r3, #48	; 0x30
 8000f76:	d822      	bhi.n	8000fbe <HAL_CAN_IRQHandler+0x334>
 8000f78:	2b10      	cmp	r3, #16
 8000f7a:	d002      	beq.n	8000f82 <HAL_CAN_IRQHandler+0x2f8>
 8000f7c:	2b20      	cmp	r3, #32
 8000f7e:	d005      	beq.n	8000f8c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000f80:	e01d      	b.n	8000fbe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f8a:	e019      	b.n	8000fc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f94:	e014      	b.n	8000fc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f9e:	e00f      	b.n	8000fc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fa8:	e00a      	b.n	8000fc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fb2:	e005      	b.n	8000fc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fbc:	e000      	b.n	8000fc0 <HAL_CAN_IRQHandler+0x336>
            break;
 8000fbe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	699a      	ldr	r2, [r3, #24]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f870 	bl	80010d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
	...

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db0b      	blt.n	8001172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	4906      	ldr	r1, [pc, #24]	; (800117c <__NVIC_EnableIRQ+0x34>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	2001      	movs	r0, #1
 800116a:	fa00 f202 	lsl.w	r2, r0, r2
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800125c:	f7ff ff90 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff2d 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff42 	bl	800112c <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff90 	bl	80011d4 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5f 	bl	8001180 <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff35 	bl	8001148 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001300:	b480      	push	{r7}
 8001302:	b08b      	sub	sp, #44	; 0x2c
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001312:	e169      	b.n	80015e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001314:	2201      	movs	r2, #1
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	429a      	cmp	r2, r3
 800132e:	f040 8158 	bne.w	80015e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4a9a      	ldr	r2, [pc, #616]	; (80015a0 <HAL_GPIO_Init+0x2a0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d05e      	beq.n	80013fa <HAL_GPIO_Init+0xfa>
 800133c:	4a98      	ldr	r2, [pc, #608]	; (80015a0 <HAL_GPIO_Init+0x2a0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d875      	bhi.n	800142e <HAL_GPIO_Init+0x12e>
 8001342:	4a98      	ldr	r2, [pc, #608]	; (80015a4 <HAL_GPIO_Init+0x2a4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d058      	beq.n	80013fa <HAL_GPIO_Init+0xfa>
 8001348:	4a96      	ldr	r2, [pc, #600]	; (80015a4 <HAL_GPIO_Init+0x2a4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d86f      	bhi.n	800142e <HAL_GPIO_Init+0x12e>
 800134e:	4a96      	ldr	r2, [pc, #600]	; (80015a8 <HAL_GPIO_Init+0x2a8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d052      	beq.n	80013fa <HAL_GPIO_Init+0xfa>
 8001354:	4a94      	ldr	r2, [pc, #592]	; (80015a8 <HAL_GPIO_Init+0x2a8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d869      	bhi.n	800142e <HAL_GPIO_Init+0x12e>
 800135a:	4a94      	ldr	r2, [pc, #592]	; (80015ac <HAL_GPIO_Init+0x2ac>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d04c      	beq.n	80013fa <HAL_GPIO_Init+0xfa>
 8001360:	4a92      	ldr	r2, [pc, #584]	; (80015ac <HAL_GPIO_Init+0x2ac>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d863      	bhi.n	800142e <HAL_GPIO_Init+0x12e>
 8001366:	4a92      	ldr	r2, [pc, #584]	; (80015b0 <HAL_GPIO_Init+0x2b0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d046      	beq.n	80013fa <HAL_GPIO_Init+0xfa>
 800136c:	4a90      	ldr	r2, [pc, #576]	; (80015b0 <HAL_GPIO_Init+0x2b0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d85d      	bhi.n	800142e <HAL_GPIO_Init+0x12e>
 8001372:	2b12      	cmp	r3, #18
 8001374:	d82a      	bhi.n	80013cc <HAL_GPIO_Init+0xcc>
 8001376:	2b12      	cmp	r3, #18
 8001378:	d859      	bhi.n	800142e <HAL_GPIO_Init+0x12e>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <HAL_GPIO_Init+0x80>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	080013fb 	.word	0x080013fb
 8001384:	080013d5 	.word	0x080013d5
 8001388:	080013e7 	.word	0x080013e7
 800138c:	08001429 	.word	0x08001429
 8001390:	0800142f 	.word	0x0800142f
 8001394:	0800142f 	.word	0x0800142f
 8001398:	0800142f 	.word	0x0800142f
 800139c:	0800142f 	.word	0x0800142f
 80013a0:	0800142f 	.word	0x0800142f
 80013a4:	0800142f 	.word	0x0800142f
 80013a8:	0800142f 	.word	0x0800142f
 80013ac:	0800142f 	.word	0x0800142f
 80013b0:	0800142f 	.word	0x0800142f
 80013b4:	0800142f 	.word	0x0800142f
 80013b8:	0800142f 	.word	0x0800142f
 80013bc:	0800142f 	.word	0x0800142f
 80013c0:	0800142f 	.word	0x0800142f
 80013c4:	080013dd 	.word	0x080013dd
 80013c8:	080013f1 	.word	0x080013f1
 80013cc:	4a79      	ldr	r2, [pc, #484]	; (80015b4 <HAL_GPIO_Init+0x2b4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013d2:	e02c      	b.n	800142e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	623b      	str	r3, [r7, #32]
          break;
 80013da:	e029      	b.n	8001430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	3304      	adds	r3, #4
 80013e2:	623b      	str	r3, [r7, #32]
          break;
 80013e4:	e024      	b.n	8001430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	3308      	adds	r3, #8
 80013ec:	623b      	str	r3, [r7, #32]
          break;
 80013ee:	e01f      	b.n	8001430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	330c      	adds	r3, #12
 80013f6:	623b      	str	r3, [r7, #32]
          break;
 80013f8:	e01a      	b.n	8001430 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001402:	2304      	movs	r3, #4
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e013      	b.n	8001430 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001410:	2308      	movs	r3, #8
 8001412:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	611a      	str	r2, [r3, #16]
          break;
 800141a:	e009      	b.n	8001430 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800141c:	2308      	movs	r3, #8
 800141e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	615a      	str	r2, [r3, #20]
          break;
 8001426:	e003      	b.n	8001430 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e000      	b.n	8001430 <HAL_GPIO_Init+0x130>
          break;
 800142e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2bff      	cmp	r3, #255	; 0xff
 8001434:	d801      	bhi.n	800143a <HAL_GPIO_Init+0x13a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	e001      	b.n	800143e <HAL_GPIO_Init+0x13e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3304      	adds	r3, #4
 800143e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2bff      	cmp	r3, #255	; 0xff
 8001444:	d802      	bhi.n	800144c <HAL_GPIO_Init+0x14c>
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	e002      	b.n	8001452 <HAL_GPIO_Init+0x152>
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	3b08      	subs	r3, #8
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	210f      	movs	r1, #15
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	401a      	ands	r2, r3
 8001464:	6a39      	ldr	r1, [r7, #32]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	431a      	orrs	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80b1 	beq.w	80015e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001480:	4b4d      	ldr	r3, [pc, #308]	; (80015b8 <HAL_GPIO_Init+0x2b8>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_GPIO_Init+0x2b8>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <HAL_GPIO_Init+0x2b8>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001498:	4a48      	ldr	r2, [pc, #288]	; (80015bc <HAL_GPIO_Init+0x2bc>)
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4013      	ands	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a40      	ldr	r2, [pc, #256]	; (80015c0 <HAL_GPIO_Init+0x2c0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d013      	beq.n	80014ec <HAL_GPIO_Init+0x1ec>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a3f      	ldr	r2, [pc, #252]	; (80015c4 <HAL_GPIO_Init+0x2c4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d00d      	beq.n	80014e8 <HAL_GPIO_Init+0x1e8>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a3e      	ldr	r2, [pc, #248]	; (80015c8 <HAL_GPIO_Init+0x2c8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d007      	beq.n	80014e4 <HAL_GPIO_Init+0x1e4>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a3d      	ldr	r2, [pc, #244]	; (80015cc <HAL_GPIO_Init+0x2cc>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d101      	bne.n	80014e0 <HAL_GPIO_Init+0x1e0>
 80014dc:	2303      	movs	r3, #3
 80014de:	e006      	b.n	80014ee <HAL_GPIO_Init+0x1ee>
 80014e0:	2304      	movs	r3, #4
 80014e2:	e004      	b.n	80014ee <HAL_GPIO_Init+0x1ee>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e002      	b.n	80014ee <HAL_GPIO_Init+0x1ee>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <HAL_GPIO_Init+0x1ee>
 80014ec:	2300      	movs	r3, #0
 80014ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f0:	f002 0203 	and.w	r2, r2, #3
 80014f4:	0092      	lsls	r2, r2, #2
 80014f6:	4093      	lsls	r3, r2
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014fe:	492f      	ldr	r1, [pc, #188]	; (80015bc <HAL_GPIO_Init+0x2bc>)
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	492c      	ldr	r1, [pc, #176]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	43db      	mvns	r3, r3
 800152e:	4928      	ldr	r1, [pc, #160]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 8001530:	4013      	ands	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4922      	ldr	r1, [pc, #136]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	43db      	mvns	r3, r3
 8001556:	491e      	ldr	r1, [pc, #120]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 8001558:	4013      	ands	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	4918      	ldr	r1, [pc, #96]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	4914      	ldr	r1, [pc, #80]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 8001580:	4013      	ands	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d021      	beq.n	80015d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	490e      	ldr	r1, [pc, #56]	; (80015d0 <HAL_GPIO_Init+0x2d0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	60cb      	str	r3, [r1, #12]
 800159c:	e021      	b.n	80015e2 <HAL_GPIO_Init+0x2e2>
 800159e:	bf00      	nop
 80015a0:	10320000 	.word	0x10320000
 80015a4:	10310000 	.word	0x10310000
 80015a8:	10220000 	.word	0x10220000
 80015ac:	10210000 	.word	0x10210000
 80015b0:	10120000 	.word	0x10120000
 80015b4:	10110000 	.word	0x10110000
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010000 	.word	0x40010000
 80015c0:	40010800 	.word	0x40010800
 80015c4:	40010c00 	.word	0x40010c00
 80015c8:	40011000 	.word	0x40011000
 80015cc:	40011400 	.word	0x40011400
 80015d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_GPIO_Init+0x304>)
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	43db      	mvns	r3, r3
 80015dc:	4909      	ldr	r1, [pc, #36]	; (8001604 <HAL_GPIO_Init+0x304>)
 80015de:	4013      	ands	r3, r2
 80015e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	3301      	adds	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f47f ae8e 	bne.w	8001314 <HAL_GPIO_Init+0x14>
  }
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	372c      	adds	r7, #44	; 0x2c
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	40010400 	.word	0x40010400

08001608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
 8001614:	4613      	mov	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001624:	e003      	b.n	800162e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	041a      	lsls	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	611a      	str	r2, [r3, #16]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e272      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8087 	beq.w	8001766 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001658:	4b92      	ldr	r3, [pc, #584]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	2b04      	cmp	r3, #4
 8001662:	d00c      	beq.n	800167e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001664:	4b8f      	ldr	r3, [pc, #572]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b08      	cmp	r3, #8
 800166e:	d112      	bne.n	8001696 <HAL_RCC_OscConfig+0x5e>
 8001670:	4b8c      	ldr	r3, [pc, #560]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167c:	d10b      	bne.n	8001696 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167e:	4b89      	ldr	r3, [pc, #548]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d06c      	beq.n	8001764 <HAL_RCC_OscConfig+0x12c>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d168      	bne.n	8001764 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e24c      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x76>
 80016a0:	4b80      	ldr	r3, [pc, #512]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a7f      	ldr	r2, [pc, #508]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	e02e      	b.n	800170c <HAL_RCC_OscConfig+0xd4>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x98>
 80016b6:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a7a      	ldr	r2, [pc, #488]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b78      	ldr	r3, [pc, #480]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a77      	ldr	r2, [pc, #476]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e01d      	b.n	800170c <HAL_RCC_OscConfig+0xd4>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0xbc>
 80016da:	4b72      	ldr	r3, [pc, #456]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a71      	ldr	r2, [pc, #452]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b6f      	ldr	r3, [pc, #444]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a6e      	ldr	r2, [pc, #440]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0xd4>
 80016f4:	4b6b      	ldr	r3, [pc, #428]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a6a      	ldr	r2, [pc, #424]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b68      	ldr	r3, [pc, #416]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a67      	ldr	r2, [pc, #412]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d013      	beq.n	800173c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff f990 	bl	8000a38 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff f98c 	bl	8000a38 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e200      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4b5d      	ldr	r3, [pc, #372]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0xe4>
 800173a:	e014      	b.n	8001766 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff f97c 	bl	8000a38 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff f978 	bl	8000a38 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e1ec      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001756:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x10c>
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d063      	beq.n	800183a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001772:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b08      	cmp	r3, #8
 8001788:	d11c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x18c>
 800178a:	4b46      	ldr	r3, [pc, #280]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d116      	bne.n	80017c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001796:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <HAL_RCC_OscConfig+0x176>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e1c0      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4939      	ldr	r1, [pc, #228]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c2:	e03a      	b.n	800183a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d020      	beq.n	800180e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017cc:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff f931 	bl	8000a38 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017da:	f7ff f92d 	bl	8000a38 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1a1      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4927      	ldr	r1, [pc, #156]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
 800180c:	e015      	b.n	800183a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_RCC_OscConfig+0x270>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff f910 	bl	8000a38 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181c:	f7ff f90c 	bl	8000a38 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e180      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d03a      	beq.n	80018bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d019      	beq.n	8001882 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_RCC_OscConfig+0x274>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001854:	f7ff f8f0 	bl	8000a38 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185c:	f7ff f8ec 	bl	8000a38 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e160      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_RCC_OscConfig+0x26c>)
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800187a:	2001      	movs	r0, #1
 800187c:	f000 fad8 	bl	8001e30 <RCC_Delay>
 8001880:	e01c      	b.n	80018bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_RCC_OscConfig+0x274>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001888:	f7ff f8d6 	bl	8000a38 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188e:	e00f      	b.n	80018b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001890:	f7ff f8d2 	bl	8000a38 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d908      	bls.n	80018b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e146      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	42420000 	.word	0x42420000
 80018ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	4b92      	ldr	r3, [pc, #584]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1e9      	bne.n	8001890 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80a6 	beq.w	8001a16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ce:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10d      	bne.n	80018f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b88      	ldr	r3, [pc, #544]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a87      	ldr	r2, [pc, #540]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b85      	ldr	r3, [pc, #532]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f2:	2301      	movs	r3, #1
 80018f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f6:	4b82      	ldr	r3, [pc, #520]	; (8001b00 <HAL_RCC_OscConfig+0x4c8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d118      	bne.n	8001934 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001902:	4b7f      	ldr	r3, [pc, #508]	; (8001b00 <HAL_RCC_OscConfig+0x4c8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7e      	ldr	r2, [pc, #504]	; (8001b00 <HAL_RCC_OscConfig+0x4c8>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190e:	f7ff f893 	bl	8000a38 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001916:	f7ff f88f 	bl	8000a38 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b64      	cmp	r3, #100	; 0x64
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e103      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001928:	4b75      	ldr	r3, [pc, #468]	; (8001b00 <HAL_RCC_OscConfig+0x4c8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x312>
 800193c:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4a6e      	ldr	r2, [pc, #440]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6213      	str	r3, [r2, #32]
 8001948:	e02d      	b.n	80019a6 <HAL_RCC_OscConfig+0x36e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x334>
 8001952:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a69      	ldr	r2, [pc, #420]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6213      	str	r3, [r2, #32]
 800195e:	4b67      	ldr	r3, [pc, #412]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a66      	ldr	r2, [pc, #408]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	6213      	str	r3, [r2, #32]
 800196a:	e01c      	b.n	80019a6 <HAL_RCC_OscConfig+0x36e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b05      	cmp	r3, #5
 8001972:	d10c      	bne.n	800198e <HAL_RCC_OscConfig+0x356>
 8001974:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4a60      	ldr	r2, [pc, #384]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4a5d      	ldr	r2, [pc, #372]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6213      	str	r3, [r2, #32]
 800198c:	e00b      	b.n	80019a6 <HAL_RCC_OscConfig+0x36e>
 800198e:	4b5b      	ldr	r3, [pc, #364]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a5a      	ldr	r2, [pc, #360]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	4b58      	ldr	r3, [pc, #352]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a57      	ldr	r2, [pc, #348]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d015      	beq.n	80019da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7ff f843 	bl	8000a38 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7ff f83f 	bl	8000a38 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e0b1      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019cc:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0ee      	beq.n	80019b6 <HAL_RCC_OscConfig+0x37e>
 80019d8:	e014      	b.n	8001a04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019da:	f7ff f82d 	bl	8000a38 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff f829 	bl	8000a38 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e09b      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f8:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ee      	bne.n	80019e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d105      	bne.n	8001a16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0a:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a3b      	ldr	r2, [pc, #236]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8087 	beq.w	8001b2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d061      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d146      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a34:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <HAL_RCC_OscConfig+0x4cc>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7fe fffd 	bl	8000a38 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a42:	f7fe fff9 	bl	8000a38 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e06d      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f0      	bne.n	8001a42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a68:	d108      	bne.n	8001a7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	4921      	ldr	r1, [pc, #132]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a19      	ldr	r1, [r3, #32]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	491b      	ldr	r1, [pc, #108]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_RCC_OscConfig+0x4cc>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7fe ffcd 	bl	8000a38 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7fe ffc9 	bl	8000a38 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e03d      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x46a>
 8001ac0:	e035      	b.n	8001b2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_RCC_OscConfig+0x4cc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7fe ffb6 	bl	8000a38 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7fe ffb2 	bl	8000a38 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e026      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x498>
 8001aee:	e01e      	b.n	8001b2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e019      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40007000 	.word	0x40007000
 8001b04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x500>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0d0      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d910      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 0207 	bic.w	r2, r3, #7
 8001b66:	4965      	ldr	r1, [pc, #404]	; (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b63      	ldr	r3, [pc, #396]	; (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0b8      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d020      	beq.n	8001bce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b98:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4a58      	ldr	r2, [pc, #352]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ba2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a52      	ldr	r2, [pc, #328]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbc:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	494d      	ldr	r1, [pc, #308]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d040      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d115      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e07f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e073      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e06b      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4936      	ldr	r1, [pc, #216]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c2c:	f7fe ff04 	bl	8000a38 <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7fe ff00 	bl	8000a38 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e053      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 020c 	and.w	r2, r3, #12
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1eb      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d210      	bcs.n	8001c8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	4922      	ldr	r1, [pc, #136]	; (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e032      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4916      	ldr	r1, [pc, #88]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	490e      	ldr	r1, [pc, #56]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cca:	f000 f821 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	490a      	ldr	r1, [pc, #40]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001cdc:	5ccb      	ldrb	r3, [r1, r3]
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <HAL_RCC_ClockConfig+0x1cc>)
 8001ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_ClockConfig+0x1d0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fe62 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	40021000 	.word	0x40021000
 8001d04:	080031b4 	.word	0x080031b4
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000004 	.word	0x20000004

08001d10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d10:	b490      	push	{r4, r7}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xac>)
 8001d18:	1d3c      	adds	r4, r7, #4
 8001d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d20:	f240 2301 	movw	r3, #513	; 0x201
 8001d24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d002      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x40>
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x46>
 8001d4e:	e02b      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d52:	623b      	str	r3, [r7, #32]
      break;
 8001d54:	e02b      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	0c9b      	lsrs	r3, r3, #18
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3328      	adds	r3, #40	; 0x28
 8001d60:	443b      	add	r3, r7
 8001d62:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d66:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d012      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	0c5b      	lsrs	r3, r3, #17
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	3328      	adds	r3, #40	; 0x28
 8001d7e:	443b      	add	r3, r7
 8001d80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d8a:	fb03 f202 	mul.w	r2, r3, r2
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
 8001d96:	e004      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	623b      	str	r3, [r7, #32]
      break;
 8001da6:	e002      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001daa:	623b      	str	r3, [r7, #32]
      break;
 8001dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dae:	6a3b      	ldr	r3, [r7, #32]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3728      	adds	r7, #40	; 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc90      	pop	{r4, r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	080031a4 	.word	0x080031a4
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	007a1200 	.word	0x007a1200
 8001dc8:	003d0900 	.word	0x003d0900

08001dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001de4:	f7ff fff2 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4903      	ldr	r1, [pc, #12]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	080031c4 	.word	0x080031c4

08001e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e0c:	f7ff ffde 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0adb      	lsrs	r3, r3, #11
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4903      	ldr	r1, [pc, #12]	; (8001e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	080031c4 	.word	0x080031c4

08001e30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <RCC_Delay+0x34>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <RCC_Delay+0x38>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0a5b      	lsrs	r3, r3, #9
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e4c:	bf00      	nop
  }
  while (Delay --);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1e5a      	subs	r2, r3, #1
 8001e52:	60fa      	str	r2, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f9      	bne.n	8001e4c <RCC_Delay+0x1c>
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	20000000 	.word	0x20000000
 8001e68:	10624dd3 	.word	0x10624dd3

08001e6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e093      	b.n	8001fa8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7fe fbb3 	bl	8000600 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eb0:	f023 0307 	bic.w	r3, r3, #7
 8001eb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	f000 f9ab 	bl	800221c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eee:	f023 0303 	bic.w	r3, r3, #3
 8001ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	4313      	orrs	r3, r2
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001f0c:	f023 030c 	bic.w	r3, r3, #12
 8001f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	011a      	lsls	r2, r3, #4
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	031b      	lsls	r3, r3, #12
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001f4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4313      	orrs	r3, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d122      	bne.n	800200c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d11b      	bne.n	800200c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0202 	mvn.w	r2, #2
 8001fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f8f6 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f8e9 	bl	80021d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f8f8 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b04      	cmp	r3, #4
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b04      	cmp	r3, #4
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0204 	mvn.w	r2, #4
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8cc 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8bf 	bl	80021d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f8ce 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b08      	cmp	r3, #8
 800206c:	d122      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b08      	cmp	r3, #8
 800207a:	d11b      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0208 	mvn.w	r2, #8
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2204      	movs	r2, #4
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8a2 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f895 	bl	80021d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f8a4 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d122      	bne.n	8002108 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d11b      	bne.n	8002108 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0210 	mvn.w	r2, #16
 80020d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2208      	movs	r2, #8
 80020de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f878 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f86b 	bl	80021d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f87a 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0201 	mvn.w	r2, #1
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f846 	bl	80021c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	2b80      	cmp	r3, #128	; 0x80
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f927 	bl	80023ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b40      	cmp	r3, #64	; 0x40
 800216c:	d10e      	bne.n	800218c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d107      	bne.n	800218c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f83e 	bl	8002208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b20      	cmp	r3, #32
 8002198:	d10e      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d107      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0220 	mvn.w	r2, #32
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f8f2 	bl	800239c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
	...

0800221c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a29      	ldr	r2, [pc, #164]	; (80022d4 <TIM_Base_SetConfig+0xb8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00b      	beq.n	800224c <TIM_Base_SetConfig+0x30>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223a:	d007      	beq.n	800224c <TIM_Base_SetConfig+0x30>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <TIM_Base_SetConfig+0xbc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d003      	beq.n	800224c <TIM_Base_SetConfig+0x30>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a25      	ldr	r2, [pc, #148]	; (80022dc <TIM_Base_SetConfig+0xc0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d108      	bne.n	800225e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <TIM_Base_SetConfig+0xb8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00b      	beq.n	800227e <TIM_Base_SetConfig+0x62>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226c:	d007      	beq.n	800227e <TIM_Base_SetConfig+0x62>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <TIM_Base_SetConfig+0xbc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d003      	beq.n	800227e <TIM_Base_SetConfig+0x62>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a18      	ldr	r2, [pc, #96]	; (80022dc <TIM_Base_SetConfig+0xc0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d108      	bne.n	8002290 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <TIM_Base_SetConfig+0xb8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d103      	bne.n	80022c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	615a      	str	r2, [r3, #20]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	40012c00 	.word	0x40012c00
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40000800 	.word	0x40000800

080022e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e046      	b.n	8002386 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a16      	ldr	r2, [pc, #88]	; (8002390 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00e      	beq.n	800235a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002344:	d009      	beq.n	800235a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a10      	ldr	r2, [pc, #64]	; (8002398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d10c      	bne.n	8002374 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4313      	orrs	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800

0800239c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e03f      	b.n	8002452 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe f982 	bl	80006f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2224      	movs	r2, #36	; 0x24
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f905 	bl	8002614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b08a      	sub	sp, #40	; 0x28
 800245e:	af02      	add	r7, sp, #8
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b20      	cmp	r3, #32
 8002478:	d17c      	bne.n	8002574 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_UART_Transmit+0x2c>
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e075      	b.n	8002576 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_UART_Transmit+0x3e>
 8002494:	2302      	movs	r3, #2
 8002496:	e06e      	b.n	8002576 <HAL_UART_Transmit+0x11c>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2221      	movs	r2, #33	; 0x21
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ae:	f7fe fac3 	bl	8000a38 <HAL_GetTick>
 80024b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	88fa      	ldrh	r2, [r7, #6]
 80024b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c8:	d108      	bne.n	80024dc <HAL_UART_Transmit+0x82>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e003      	b.n	80024e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024ec:	e02a      	b.n	8002544 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2200      	movs	r2, #0
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f840 	bl	800257e <UART_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e036      	b.n	8002576 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800251c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	3302      	adds	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e007      	b.n	8002536 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	3301      	adds	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1cf      	bne.n	80024ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2200      	movs	r2, #0
 8002556:	2140      	movs	r1, #64	; 0x40
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f810 	bl	800257e <UART_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e006      	b.n	8002576 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800258e:	e02c      	b.n	80025ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002596:	d028      	beq.n	80025ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <UART_WaitOnFlagUntilTimeout+0x30>
 800259e:	f7fe fa4b 	bl	8000a38 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d21d      	bcs.n	80025ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e00f      	b.n	800260a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4013      	ands	r3, r2
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	429a      	cmp	r2, r3
 8002606:	d0c3      	beq.n	8002590 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800264e:	f023 030c 	bic.w	r3, r3, #12
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	430b      	orrs	r3, r1
 800265a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2c      	ldr	r2, [pc, #176]	; (8002728 <UART_SetConfig+0x114>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d103      	bne.n	8002684 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800267c:	f7ff fbc4 	bl	8001e08 <HAL_RCC_GetPCLK2Freq>
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	e002      	b.n	800268a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002684:	f7ff fbac 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002688:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009a      	lsls	r2, r3, #2
 8002694:	441a      	add	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <UART_SetConfig+0x118>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	0119      	lsls	r1, r3, #4
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	009a      	lsls	r2, r3, #2
 80026b4:	441a      	add	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <UART_SetConfig+0x118>)
 80026c2:	fba3 0302 	umull	r0, r3, r3, r2
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2064      	movs	r0, #100	; 0x64
 80026ca:	fb00 f303 	mul.w	r3, r0, r3
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	3332      	adds	r3, #50	; 0x32
 80026d4:	4a15      	ldr	r2, [pc, #84]	; (800272c <UART_SetConfig+0x118>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e0:	4419      	add	r1, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009a      	lsls	r2, r3, #2
 80026ec:	441a      	add	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <UART_SetConfig+0x118>)
 80026fa:	fba3 0302 	umull	r0, r3, r3, r2
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2064      	movs	r0, #100	; 0x64
 8002702:	fb00 f303 	mul.w	r3, r0, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	3332      	adds	r3, #50	; 0x32
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <UART_SetConfig+0x118>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 020f 	and.w	r2, r3, #15
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	440a      	add	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40013800 	.word	0x40013800
 800272c:	51eb851f 	.word	0x51eb851f

08002730 <__errno>:
 8002730:	4b01      	ldr	r3, [pc, #4]	; (8002738 <__errno+0x8>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	2000000c 	.word	0x2000000c

0800273c <__libc_init_array>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	2600      	movs	r6, #0
 8002740:	4d0c      	ldr	r5, [pc, #48]	; (8002774 <__libc_init_array+0x38>)
 8002742:	4c0d      	ldr	r4, [pc, #52]	; (8002778 <__libc_init_array+0x3c>)
 8002744:	1b64      	subs	r4, r4, r5
 8002746:	10a4      	asrs	r4, r4, #2
 8002748:	42a6      	cmp	r6, r4
 800274a:	d109      	bne.n	8002760 <__libc_init_array+0x24>
 800274c:	f000 fd18 	bl	8003180 <_init>
 8002750:	2600      	movs	r6, #0
 8002752:	4d0a      	ldr	r5, [pc, #40]	; (800277c <__libc_init_array+0x40>)
 8002754:	4c0a      	ldr	r4, [pc, #40]	; (8002780 <__libc_init_array+0x44>)
 8002756:	1b64      	subs	r4, r4, r5
 8002758:	10a4      	asrs	r4, r4, #2
 800275a:	42a6      	cmp	r6, r4
 800275c:	d105      	bne.n	800276a <__libc_init_array+0x2e>
 800275e:	bd70      	pop	{r4, r5, r6, pc}
 8002760:	f855 3b04 	ldr.w	r3, [r5], #4
 8002764:	4798      	blx	r3
 8002766:	3601      	adds	r6, #1
 8002768:	e7ee      	b.n	8002748 <__libc_init_array+0xc>
 800276a:	f855 3b04 	ldr.w	r3, [r5], #4
 800276e:	4798      	blx	r3
 8002770:	3601      	adds	r6, #1
 8002772:	e7f2      	b.n	800275a <__libc_init_array+0x1e>
 8002774:	08003230 	.word	0x08003230
 8002778:	08003230 	.word	0x08003230
 800277c:	08003230 	.word	0x08003230
 8002780:	08003234 	.word	0x08003234

08002784 <memset>:
 8002784:	4603      	mov	r3, r0
 8002786:	4402      	add	r2, r0
 8002788:	4293      	cmp	r3, r2
 800278a:	d100      	bne.n	800278e <memset+0xa>
 800278c:	4770      	bx	lr
 800278e:	f803 1b01 	strb.w	r1, [r3], #1
 8002792:	e7f9      	b.n	8002788 <memset+0x4>

08002794 <_puts_r>:
 8002794:	b570      	push	{r4, r5, r6, lr}
 8002796:	460e      	mov	r6, r1
 8002798:	4605      	mov	r5, r0
 800279a:	b118      	cbz	r0, 80027a4 <_puts_r+0x10>
 800279c:	6983      	ldr	r3, [r0, #24]
 800279e:	b90b      	cbnz	r3, 80027a4 <_puts_r+0x10>
 80027a0:	f000 fa44 	bl	8002c2c <__sinit>
 80027a4:	69ab      	ldr	r3, [r5, #24]
 80027a6:	68ac      	ldr	r4, [r5, #8]
 80027a8:	b913      	cbnz	r3, 80027b0 <_puts_r+0x1c>
 80027aa:	4628      	mov	r0, r5
 80027ac:	f000 fa3e 	bl	8002c2c <__sinit>
 80027b0:	4b2c      	ldr	r3, [pc, #176]	; (8002864 <_puts_r+0xd0>)
 80027b2:	429c      	cmp	r4, r3
 80027b4:	d120      	bne.n	80027f8 <_puts_r+0x64>
 80027b6:	686c      	ldr	r4, [r5, #4]
 80027b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027ba:	07db      	lsls	r3, r3, #31
 80027bc:	d405      	bmi.n	80027ca <_puts_r+0x36>
 80027be:	89a3      	ldrh	r3, [r4, #12]
 80027c0:	0598      	lsls	r0, r3, #22
 80027c2:	d402      	bmi.n	80027ca <_puts_r+0x36>
 80027c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027c6:	f000 facf 	bl	8002d68 <__retarget_lock_acquire_recursive>
 80027ca:	89a3      	ldrh	r3, [r4, #12]
 80027cc:	0719      	lsls	r1, r3, #28
 80027ce:	d51d      	bpl.n	800280c <_puts_r+0x78>
 80027d0:	6923      	ldr	r3, [r4, #16]
 80027d2:	b1db      	cbz	r3, 800280c <_puts_r+0x78>
 80027d4:	3e01      	subs	r6, #1
 80027d6:	68a3      	ldr	r3, [r4, #8]
 80027d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027dc:	3b01      	subs	r3, #1
 80027de:	60a3      	str	r3, [r4, #8]
 80027e0:	bb39      	cbnz	r1, 8002832 <_puts_r+0x9e>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	da38      	bge.n	8002858 <_puts_r+0xc4>
 80027e6:	4622      	mov	r2, r4
 80027e8:	210a      	movs	r1, #10
 80027ea:	4628      	mov	r0, r5
 80027ec:	f000 f848 	bl	8002880 <__swbuf_r>
 80027f0:	3001      	adds	r0, #1
 80027f2:	d011      	beq.n	8002818 <_puts_r+0x84>
 80027f4:	250a      	movs	r5, #10
 80027f6:	e011      	b.n	800281c <_puts_r+0x88>
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <_puts_r+0xd4>)
 80027fa:	429c      	cmp	r4, r3
 80027fc:	d101      	bne.n	8002802 <_puts_r+0x6e>
 80027fe:	68ac      	ldr	r4, [r5, #8]
 8002800:	e7da      	b.n	80027b8 <_puts_r+0x24>
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <_puts_r+0xd8>)
 8002804:	429c      	cmp	r4, r3
 8002806:	bf08      	it	eq
 8002808:	68ec      	ldreq	r4, [r5, #12]
 800280a:	e7d5      	b.n	80027b8 <_puts_r+0x24>
 800280c:	4621      	mov	r1, r4
 800280e:	4628      	mov	r0, r5
 8002810:	f000 f888 	bl	8002924 <__swsetup_r>
 8002814:	2800      	cmp	r0, #0
 8002816:	d0dd      	beq.n	80027d4 <_puts_r+0x40>
 8002818:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800281c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800281e:	07da      	lsls	r2, r3, #31
 8002820:	d405      	bmi.n	800282e <_puts_r+0x9a>
 8002822:	89a3      	ldrh	r3, [r4, #12]
 8002824:	059b      	lsls	r3, r3, #22
 8002826:	d402      	bmi.n	800282e <_puts_r+0x9a>
 8002828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800282a:	f000 fa9e 	bl	8002d6a <__retarget_lock_release_recursive>
 800282e:	4628      	mov	r0, r5
 8002830:	bd70      	pop	{r4, r5, r6, pc}
 8002832:	2b00      	cmp	r3, #0
 8002834:	da04      	bge.n	8002840 <_puts_r+0xac>
 8002836:	69a2      	ldr	r2, [r4, #24]
 8002838:	429a      	cmp	r2, r3
 800283a:	dc06      	bgt.n	800284a <_puts_r+0xb6>
 800283c:	290a      	cmp	r1, #10
 800283e:	d004      	beq.n	800284a <_puts_r+0xb6>
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	6022      	str	r2, [r4, #0]
 8002846:	7019      	strb	r1, [r3, #0]
 8002848:	e7c5      	b.n	80027d6 <_puts_r+0x42>
 800284a:	4622      	mov	r2, r4
 800284c:	4628      	mov	r0, r5
 800284e:	f000 f817 	bl	8002880 <__swbuf_r>
 8002852:	3001      	adds	r0, #1
 8002854:	d1bf      	bne.n	80027d6 <_puts_r+0x42>
 8002856:	e7df      	b.n	8002818 <_puts_r+0x84>
 8002858:	250a      	movs	r5, #10
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	6022      	str	r2, [r4, #0]
 8002860:	701d      	strb	r5, [r3, #0]
 8002862:	e7db      	b.n	800281c <_puts_r+0x88>
 8002864:	080031f0 	.word	0x080031f0
 8002868:	08003210 	.word	0x08003210
 800286c:	080031d0 	.word	0x080031d0

08002870 <puts>:
 8002870:	4b02      	ldr	r3, [pc, #8]	; (800287c <puts+0xc>)
 8002872:	4601      	mov	r1, r0
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	f7ff bf8d 	b.w	8002794 <_puts_r>
 800287a:	bf00      	nop
 800287c:	2000000c 	.word	0x2000000c

08002880 <__swbuf_r>:
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002882:	460e      	mov	r6, r1
 8002884:	4614      	mov	r4, r2
 8002886:	4605      	mov	r5, r0
 8002888:	b118      	cbz	r0, 8002892 <__swbuf_r+0x12>
 800288a:	6983      	ldr	r3, [r0, #24]
 800288c:	b90b      	cbnz	r3, 8002892 <__swbuf_r+0x12>
 800288e:	f000 f9cd 	bl	8002c2c <__sinit>
 8002892:	4b21      	ldr	r3, [pc, #132]	; (8002918 <__swbuf_r+0x98>)
 8002894:	429c      	cmp	r4, r3
 8002896:	d12b      	bne.n	80028f0 <__swbuf_r+0x70>
 8002898:	686c      	ldr	r4, [r5, #4]
 800289a:	69a3      	ldr	r3, [r4, #24]
 800289c:	60a3      	str	r3, [r4, #8]
 800289e:	89a3      	ldrh	r3, [r4, #12]
 80028a0:	071a      	lsls	r2, r3, #28
 80028a2:	d52f      	bpl.n	8002904 <__swbuf_r+0x84>
 80028a4:	6923      	ldr	r3, [r4, #16]
 80028a6:	b36b      	cbz	r3, 8002904 <__swbuf_r+0x84>
 80028a8:	6923      	ldr	r3, [r4, #16]
 80028aa:	6820      	ldr	r0, [r4, #0]
 80028ac:	b2f6      	uxtb	r6, r6
 80028ae:	1ac0      	subs	r0, r0, r3
 80028b0:	6963      	ldr	r3, [r4, #20]
 80028b2:	4637      	mov	r7, r6
 80028b4:	4283      	cmp	r3, r0
 80028b6:	dc04      	bgt.n	80028c2 <__swbuf_r+0x42>
 80028b8:	4621      	mov	r1, r4
 80028ba:	4628      	mov	r0, r5
 80028bc:	f000 f922 	bl	8002b04 <_fflush_r>
 80028c0:	bb30      	cbnz	r0, 8002910 <__swbuf_r+0x90>
 80028c2:	68a3      	ldr	r3, [r4, #8]
 80028c4:	3001      	adds	r0, #1
 80028c6:	3b01      	subs	r3, #1
 80028c8:	60a3      	str	r3, [r4, #8]
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	6022      	str	r2, [r4, #0]
 80028d0:	701e      	strb	r6, [r3, #0]
 80028d2:	6963      	ldr	r3, [r4, #20]
 80028d4:	4283      	cmp	r3, r0
 80028d6:	d004      	beq.n	80028e2 <__swbuf_r+0x62>
 80028d8:	89a3      	ldrh	r3, [r4, #12]
 80028da:	07db      	lsls	r3, r3, #31
 80028dc:	d506      	bpl.n	80028ec <__swbuf_r+0x6c>
 80028de:	2e0a      	cmp	r6, #10
 80028e0:	d104      	bne.n	80028ec <__swbuf_r+0x6c>
 80028e2:	4621      	mov	r1, r4
 80028e4:	4628      	mov	r0, r5
 80028e6:	f000 f90d 	bl	8002b04 <_fflush_r>
 80028ea:	b988      	cbnz	r0, 8002910 <__swbuf_r+0x90>
 80028ec:	4638      	mov	r0, r7
 80028ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <__swbuf_r+0x9c>)
 80028f2:	429c      	cmp	r4, r3
 80028f4:	d101      	bne.n	80028fa <__swbuf_r+0x7a>
 80028f6:	68ac      	ldr	r4, [r5, #8]
 80028f8:	e7cf      	b.n	800289a <__swbuf_r+0x1a>
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <__swbuf_r+0xa0>)
 80028fc:	429c      	cmp	r4, r3
 80028fe:	bf08      	it	eq
 8002900:	68ec      	ldreq	r4, [r5, #12]
 8002902:	e7ca      	b.n	800289a <__swbuf_r+0x1a>
 8002904:	4621      	mov	r1, r4
 8002906:	4628      	mov	r0, r5
 8002908:	f000 f80c 	bl	8002924 <__swsetup_r>
 800290c:	2800      	cmp	r0, #0
 800290e:	d0cb      	beq.n	80028a8 <__swbuf_r+0x28>
 8002910:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002914:	e7ea      	b.n	80028ec <__swbuf_r+0x6c>
 8002916:	bf00      	nop
 8002918:	080031f0 	.word	0x080031f0
 800291c:	08003210 	.word	0x08003210
 8002920:	080031d0 	.word	0x080031d0

08002924 <__swsetup_r>:
 8002924:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <__swsetup_r+0xcc>)
 8002926:	b570      	push	{r4, r5, r6, lr}
 8002928:	681d      	ldr	r5, [r3, #0]
 800292a:	4606      	mov	r6, r0
 800292c:	460c      	mov	r4, r1
 800292e:	b125      	cbz	r5, 800293a <__swsetup_r+0x16>
 8002930:	69ab      	ldr	r3, [r5, #24]
 8002932:	b913      	cbnz	r3, 800293a <__swsetup_r+0x16>
 8002934:	4628      	mov	r0, r5
 8002936:	f000 f979 	bl	8002c2c <__sinit>
 800293a:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <__swsetup_r+0xd0>)
 800293c:	429c      	cmp	r4, r3
 800293e:	d10f      	bne.n	8002960 <__swsetup_r+0x3c>
 8002940:	686c      	ldr	r4, [r5, #4]
 8002942:	89a3      	ldrh	r3, [r4, #12]
 8002944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002948:	0719      	lsls	r1, r3, #28
 800294a:	d42c      	bmi.n	80029a6 <__swsetup_r+0x82>
 800294c:	06dd      	lsls	r5, r3, #27
 800294e:	d411      	bmi.n	8002974 <__swsetup_r+0x50>
 8002950:	2309      	movs	r3, #9
 8002952:	6033      	str	r3, [r6, #0]
 8002954:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800295c:	81a3      	strh	r3, [r4, #12]
 800295e:	e03e      	b.n	80029de <__swsetup_r+0xba>
 8002960:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <__swsetup_r+0xd4>)
 8002962:	429c      	cmp	r4, r3
 8002964:	d101      	bne.n	800296a <__swsetup_r+0x46>
 8002966:	68ac      	ldr	r4, [r5, #8]
 8002968:	e7eb      	b.n	8002942 <__swsetup_r+0x1e>
 800296a:	4b24      	ldr	r3, [pc, #144]	; (80029fc <__swsetup_r+0xd8>)
 800296c:	429c      	cmp	r4, r3
 800296e:	bf08      	it	eq
 8002970:	68ec      	ldreq	r4, [r5, #12]
 8002972:	e7e6      	b.n	8002942 <__swsetup_r+0x1e>
 8002974:	0758      	lsls	r0, r3, #29
 8002976:	d512      	bpl.n	800299e <__swsetup_r+0x7a>
 8002978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800297a:	b141      	cbz	r1, 800298e <__swsetup_r+0x6a>
 800297c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002980:	4299      	cmp	r1, r3
 8002982:	d002      	beq.n	800298a <__swsetup_r+0x66>
 8002984:	4630      	mov	r0, r6
 8002986:	f000 fa57 	bl	8002e38 <_free_r>
 800298a:	2300      	movs	r3, #0
 800298c:	6363      	str	r3, [r4, #52]	; 0x34
 800298e:	89a3      	ldrh	r3, [r4, #12]
 8002990:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002994:	81a3      	strh	r3, [r4, #12]
 8002996:	2300      	movs	r3, #0
 8002998:	6063      	str	r3, [r4, #4]
 800299a:	6923      	ldr	r3, [r4, #16]
 800299c:	6023      	str	r3, [r4, #0]
 800299e:	89a3      	ldrh	r3, [r4, #12]
 80029a0:	f043 0308 	orr.w	r3, r3, #8
 80029a4:	81a3      	strh	r3, [r4, #12]
 80029a6:	6923      	ldr	r3, [r4, #16]
 80029a8:	b94b      	cbnz	r3, 80029be <__swsetup_r+0x9a>
 80029aa:	89a3      	ldrh	r3, [r4, #12]
 80029ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b4:	d003      	beq.n	80029be <__swsetup_r+0x9a>
 80029b6:	4621      	mov	r1, r4
 80029b8:	4630      	mov	r0, r6
 80029ba:	f000 f9fd 	bl	8002db8 <__smakebuf_r>
 80029be:	89a0      	ldrh	r0, [r4, #12]
 80029c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029c4:	f010 0301 	ands.w	r3, r0, #1
 80029c8:	d00a      	beq.n	80029e0 <__swsetup_r+0xbc>
 80029ca:	2300      	movs	r3, #0
 80029cc:	60a3      	str	r3, [r4, #8]
 80029ce:	6963      	ldr	r3, [r4, #20]
 80029d0:	425b      	negs	r3, r3
 80029d2:	61a3      	str	r3, [r4, #24]
 80029d4:	6923      	ldr	r3, [r4, #16]
 80029d6:	b943      	cbnz	r3, 80029ea <__swsetup_r+0xc6>
 80029d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80029dc:	d1ba      	bne.n	8002954 <__swsetup_r+0x30>
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	0781      	lsls	r1, r0, #30
 80029e2:	bf58      	it	pl
 80029e4:	6963      	ldrpl	r3, [r4, #20]
 80029e6:	60a3      	str	r3, [r4, #8]
 80029e8:	e7f4      	b.n	80029d4 <__swsetup_r+0xb0>
 80029ea:	2000      	movs	r0, #0
 80029ec:	e7f7      	b.n	80029de <__swsetup_r+0xba>
 80029ee:	bf00      	nop
 80029f0:	2000000c 	.word	0x2000000c
 80029f4:	080031f0 	.word	0x080031f0
 80029f8:	08003210 	.word	0x08003210
 80029fc:	080031d0 	.word	0x080031d0

08002a00 <__sflush_r>:
 8002a00:	898a      	ldrh	r2, [r1, #12]
 8002a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a04:	4605      	mov	r5, r0
 8002a06:	0710      	lsls	r0, r2, #28
 8002a08:	460c      	mov	r4, r1
 8002a0a:	d457      	bmi.n	8002abc <__sflush_r+0xbc>
 8002a0c:	684b      	ldr	r3, [r1, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	dc04      	bgt.n	8002a1c <__sflush_r+0x1c>
 8002a12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dc01      	bgt.n	8002a1c <__sflush_r+0x1c>
 8002a18:	2000      	movs	r0, #0
 8002a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a1e:	2e00      	cmp	r6, #0
 8002a20:	d0fa      	beq.n	8002a18 <__sflush_r+0x18>
 8002a22:	2300      	movs	r3, #0
 8002a24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a28:	682f      	ldr	r7, [r5, #0]
 8002a2a:	602b      	str	r3, [r5, #0]
 8002a2c:	d032      	beq.n	8002a94 <__sflush_r+0x94>
 8002a2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a30:	89a3      	ldrh	r3, [r4, #12]
 8002a32:	075a      	lsls	r2, r3, #29
 8002a34:	d505      	bpl.n	8002a42 <__sflush_r+0x42>
 8002a36:	6863      	ldr	r3, [r4, #4]
 8002a38:	1ac0      	subs	r0, r0, r3
 8002a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a3c:	b10b      	cbz	r3, 8002a42 <__sflush_r+0x42>
 8002a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a40:	1ac0      	subs	r0, r0, r3
 8002a42:	2300      	movs	r3, #0
 8002a44:	4602      	mov	r2, r0
 8002a46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a48:	4628      	mov	r0, r5
 8002a4a:	6a21      	ldr	r1, [r4, #32]
 8002a4c:	47b0      	blx	r6
 8002a4e:	1c43      	adds	r3, r0, #1
 8002a50:	89a3      	ldrh	r3, [r4, #12]
 8002a52:	d106      	bne.n	8002a62 <__sflush_r+0x62>
 8002a54:	6829      	ldr	r1, [r5, #0]
 8002a56:	291d      	cmp	r1, #29
 8002a58:	d82c      	bhi.n	8002ab4 <__sflush_r+0xb4>
 8002a5a:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <__sflush_r+0x100>)
 8002a5c:	40ca      	lsrs	r2, r1
 8002a5e:	07d6      	lsls	r6, r2, #31
 8002a60:	d528      	bpl.n	8002ab4 <__sflush_r+0xb4>
 8002a62:	2200      	movs	r2, #0
 8002a64:	6062      	str	r2, [r4, #4]
 8002a66:	6922      	ldr	r2, [r4, #16]
 8002a68:	04d9      	lsls	r1, r3, #19
 8002a6a:	6022      	str	r2, [r4, #0]
 8002a6c:	d504      	bpl.n	8002a78 <__sflush_r+0x78>
 8002a6e:	1c42      	adds	r2, r0, #1
 8002a70:	d101      	bne.n	8002a76 <__sflush_r+0x76>
 8002a72:	682b      	ldr	r3, [r5, #0]
 8002a74:	b903      	cbnz	r3, 8002a78 <__sflush_r+0x78>
 8002a76:	6560      	str	r0, [r4, #84]	; 0x54
 8002a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a7a:	602f      	str	r7, [r5, #0]
 8002a7c:	2900      	cmp	r1, #0
 8002a7e:	d0cb      	beq.n	8002a18 <__sflush_r+0x18>
 8002a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a84:	4299      	cmp	r1, r3
 8002a86:	d002      	beq.n	8002a8e <__sflush_r+0x8e>
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f000 f9d5 	bl	8002e38 <_free_r>
 8002a8e:	2000      	movs	r0, #0
 8002a90:	6360      	str	r0, [r4, #52]	; 0x34
 8002a92:	e7c2      	b.n	8002a1a <__sflush_r+0x1a>
 8002a94:	6a21      	ldr	r1, [r4, #32]
 8002a96:	2301      	movs	r3, #1
 8002a98:	4628      	mov	r0, r5
 8002a9a:	47b0      	blx	r6
 8002a9c:	1c41      	adds	r1, r0, #1
 8002a9e:	d1c7      	bne.n	8002a30 <__sflush_r+0x30>
 8002aa0:	682b      	ldr	r3, [r5, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0c4      	beq.n	8002a30 <__sflush_r+0x30>
 8002aa6:	2b1d      	cmp	r3, #29
 8002aa8:	d001      	beq.n	8002aae <__sflush_r+0xae>
 8002aaa:	2b16      	cmp	r3, #22
 8002aac:	d101      	bne.n	8002ab2 <__sflush_r+0xb2>
 8002aae:	602f      	str	r7, [r5, #0]
 8002ab0:	e7b2      	b.n	8002a18 <__sflush_r+0x18>
 8002ab2:	89a3      	ldrh	r3, [r4, #12]
 8002ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ab8:	81a3      	strh	r3, [r4, #12]
 8002aba:	e7ae      	b.n	8002a1a <__sflush_r+0x1a>
 8002abc:	690f      	ldr	r7, [r1, #16]
 8002abe:	2f00      	cmp	r7, #0
 8002ac0:	d0aa      	beq.n	8002a18 <__sflush_r+0x18>
 8002ac2:	0793      	lsls	r3, r2, #30
 8002ac4:	bf18      	it	ne
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	680e      	ldr	r6, [r1, #0]
 8002aca:	bf08      	it	eq
 8002acc:	694b      	ldreq	r3, [r1, #20]
 8002ace:	1bf6      	subs	r6, r6, r7
 8002ad0:	600f      	str	r7, [r1, #0]
 8002ad2:	608b      	str	r3, [r1, #8]
 8002ad4:	2e00      	cmp	r6, #0
 8002ad6:	dd9f      	ble.n	8002a18 <__sflush_r+0x18>
 8002ad8:	4633      	mov	r3, r6
 8002ada:	463a      	mov	r2, r7
 8002adc:	4628      	mov	r0, r5
 8002ade:	6a21      	ldr	r1, [r4, #32]
 8002ae0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002ae4:	47e0      	blx	ip
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	dc06      	bgt.n	8002af8 <__sflush_r+0xf8>
 8002aea:	89a3      	ldrh	r3, [r4, #12]
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002af4:	81a3      	strh	r3, [r4, #12]
 8002af6:	e790      	b.n	8002a1a <__sflush_r+0x1a>
 8002af8:	4407      	add	r7, r0
 8002afa:	1a36      	subs	r6, r6, r0
 8002afc:	e7ea      	b.n	8002ad4 <__sflush_r+0xd4>
 8002afe:	bf00      	nop
 8002b00:	20400001 	.word	0x20400001

08002b04 <_fflush_r>:
 8002b04:	b538      	push	{r3, r4, r5, lr}
 8002b06:	690b      	ldr	r3, [r1, #16]
 8002b08:	4605      	mov	r5, r0
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	b913      	cbnz	r3, 8002b14 <_fflush_r+0x10>
 8002b0e:	2500      	movs	r5, #0
 8002b10:	4628      	mov	r0, r5
 8002b12:	bd38      	pop	{r3, r4, r5, pc}
 8002b14:	b118      	cbz	r0, 8002b1e <_fflush_r+0x1a>
 8002b16:	6983      	ldr	r3, [r0, #24]
 8002b18:	b90b      	cbnz	r3, 8002b1e <_fflush_r+0x1a>
 8002b1a:	f000 f887 	bl	8002c2c <__sinit>
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <_fflush_r+0x6c>)
 8002b20:	429c      	cmp	r4, r3
 8002b22:	d11b      	bne.n	8002b5c <_fflush_r+0x58>
 8002b24:	686c      	ldr	r4, [r5, #4]
 8002b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0ef      	beq.n	8002b0e <_fflush_r+0xa>
 8002b2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b30:	07d0      	lsls	r0, r2, #31
 8002b32:	d404      	bmi.n	8002b3e <_fflush_r+0x3a>
 8002b34:	0599      	lsls	r1, r3, #22
 8002b36:	d402      	bmi.n	8002b3e <_fflush_r+0x3a>
 8002b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b3a:	f000 f915 	bl	8002d68 <__retarget_lock_acquire_recursive>
 8002b3e:	4628      	mov	r0, r5
 8002b40:	4621      	mov	r1, r4
 8002b42:	f7ff ff5d 	bl	8002a00 <__sflush_r>
 8002b46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b48:	4605      	mov	r5, r0
 8002b4a:	07da      	lsls	r2, r3, #31
 8002b4c:	d4e0      	bmi.n	8002b10 <_fflush_r+0xc>
 8002b4e:	89a3      	ldrh	r3, [r4, #12]
 8002b50:	059b      	lsls	r3, r3, #22
 8002b52:	d4dd      	bmi.n	8002b10 <_fflush_r+0xc>
 8002b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b56:	f000 f908 	bl	8002d6a <__retarget_lock_release_recursive>
 8002b5a:	e7d9      	b.n	8002b10 <_fflush_r+0xc>
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <_fflush_r+0x70>)
 8002b5e:	429c      	cmp	r4, r3
 8002b60:	d101      	bne.n	8002b66 <_fflush_r+0x62>
 8002b62:	68ac      	ldr	r4, [r5, #8]
 8002b64:	e7df      	b.n	8002b26 <_fflush_r+0x22>
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <_fflush_r+0x74>)
 8002b68:	429c      	cmp	r4, r3
 8002b6a:	bf08      	it	eq
 8002b6c:	68ec      	ldreq	r4, [r5, #12]
 8002b6e:	e7da      	b.n	8002b26 <_fflush_r+0x22>
 8002b70:	080031f0 	.word	0x080031f0
 8002b74:	08003210 	.word	0x08003210
 8002b78:	080031d0 	.word	0x080031d0

08002b7c <std>:
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	b510      	push	{r4, lr}
 8002b80:	4604      	mov	r4, r0
 8002b82:	e9c0 3300 	strd	r3, r3, [r0]
 8002b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b8a:	6083      	str	r3, [r0, #8]
 8002b8c:	8181      	strh	r1, [r0, #12]
 8002b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8002b90:	81c2      	strh	r2, [r0, #14]
 8002b92:	6183      	str	r3, [r0, #24]
 8002b94:	4619      	mov	r1, r3
 8002b96:	2208      	movs	r2, #8
 8002b98:	305c      	adds	r0, #92	; 0x5c
 8002b9a:	f7ff fdf3 	bl	8002784 <memset>
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <std+0x38>)
 8002ba0:	6224      	str	r4, [r4, #32]
 8002ba2:	6263      	str	r3, [r4, #36]	; 0x24
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <std+0x3c>)
 8002ba6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <std+0x40>)
 8002baa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <std+0x44>)
 8002bae:	6323      	str	r3, [r4, #48]	; 0x30
 8002bb0:	bd10      	pop	{r4, pc}
 8002bb2:	bf00      	nop
 8002bb4:	08003011 	.word	0x08003011
 8002bb8:	08003033 	.word	0x08003033
 8002bbc:	0800306b 	.word	0x0800306b
 8002bc0:	0800308f 	.word	0x0800308f

08002bc4 <_cleanup_r>:
 8002bc4:	4901      	ldr	r1, [pc, #4]	; (8002bcc <_cleanup_r+0x8>)
 8002bc6:	f000 b8af 	b.w	8002d28 <_fwalk_reent>
 8002bca:	bf00      	nop
 8002bcc:	08002b05 	.word	0x08002b05

08002bd0 <__sfmoreglue>:
 8002bd0:	2268      	movs	r2, #104	; 0x68
 8002bd2:	b570      	push	{r4, r5, r6, lr}
 8002bd4:	1e4d      	subs	r5, r1, #1
 8002bd6:	4355      	muls	r5, r2
 8002bd8:	460e      	mov	r6, r1
 8002bda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002bde:	f000 f993 	bl	8002f08 <_malloc_r>
 8002be2:	4604      	mov	r4, r0
 8002be4:	b140      	cbz	r0, 8002bf8 <__sfmoreglue+0x28>
 8002be6:	2100      	movs	r1, #0
 8002be8:	e9c0 1600 	strd	r1, r6, [r0]
 8002bec:	300c      	adds	r0, #12
 8002bee:	60a0      	str	r0, [r4, #8]
 8002bf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002bf4:	f7ff fdc6 	bl	8002784 <memset>
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}

08002bfc <__sfp_lock_acquire>:
 8002bfc:	4801      	ldr	r0, [pc, #4]	; (8002c04 <__sfp_lock_acquire+0x8>)
 8002bfe:	f000 b8b3 	b.w	8002d68 <__retarget_lock_acquire_recursive>
 8002c02:	bf00      	nop
 8002c04:	20000191 	.word	0x20000191

08002c08 <__sfp_lock_release>:
 8002c08:	4801      	ldr	r0, [pc, #4]	; (8002c10 <__sfp_lock_release+0x8>)
 8002c0a:	f000 b8ae 	b.w	8002d6a <__retarget_lock_release_recursive>
 8002c0e:	bf00      	nop
 8002c10:	20000191 	.word	0x20000191

08002c14 <__sinit_lock_acquire>:
 8002c14:	4801      	ldr	r0, [pc, #4]	; (8002c1c <__sinit_lock_acquire+0x8>)
 8002c16:	f000 b8a7 	b.w	8002d68 <__retarget_lock_acquire_recursive>
 8002c1a:	bf00      	nop
 8002c1c:	20000192 	.word	0x20000192

08002c20 <__sinit_lock_release>:
 8002c20:	4801      	ldr	r0, [pc, #4]	; (8002c28 <__sinit_lock_release+0x8>)
 8002c22:	f000 b8a2 	b.w	8002d6a <__retarget_lock_release_recursive>
 8002c26:	bf00      	nop
 8002c28:	20000192 	.word	0x20000192

08002c2c <__sinit>:
 8002c2c:	b510      	push	{r4, lr}
 8002c2e:	4604      	mov	r4, r0
 8002c30:	f7ff fff0 	bl	8002c14 <__sinit_lock_acquire>
 8002c34:	69a3      	ldr	r3, [r4, #24]
 8002c36:	b11b      	cbz	r3, 8002c40 <__sinit+0x14>
 8002c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c3c:	f7ff bff0 	b.w	8002c20 <__sinit_lock_release>
 8002c40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002c44:	6523      	str	r3, [r4, #80]	; 0x50
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <__sinit+0x68>)
 8002c48:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <__sinit+0x6c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002c4e:	42a3      	cmp	r3, r4
 8002c50:	bf08      	it	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	4620      	mov	r0, r4
 8002c56:	bf08      	it	eq
 8002c58:	61a3      	streq	r3, [r4, #24]
 8002c5a:	f000 f81f 	bl	8002c9c <__sfp>
 8002c5e:	6060      	str	r0, [r4, #4]
 8002c60:	4620      	mov	r0, r4
 8002c62:	f000 f81b 	bl	8002c9c <__sfp>
 8002c66:	60a0      	str	r0, [r4, #8]
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f000 f817 	bl	8002c9c <__sfp>
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2104      	movs	r1, #4
 8002c72:	60e0      	str	r0, [r4, #12]
 8002c74:	6860      	ldr	r0, [r4, #4]
 8002c76:	f7ff ff81 	bl	8002b7c <std>
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	2109      	movs	r1, #9
 8002c7e:	68a0      	ldr	r0, [r4, #8]
 8002c80:	f7ff ff7c 	bl	8002b7c <std>
 8002c84:	2202      	movs	r2, #2
 8002c86:	2112      	movs	r1, #18
 8002c88:	68e0      	ldr	r0, [r4, #12]
 8002c8a:	f7ff ff77 	bl	8002b7c <std>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61a3      	str	r3, [r4, #24]
 8002c92:	e7d1      	b.n	8002c38 <__sinit+0xc>
 8002c94:	080031cc 	.word	0x080031cc
 8002c98:	08002bc5 	.word	0x08002bc5

08002c9c <__sfp>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	4607      	mov	r7, r0
 8002ca0:	f7ff ffac 	bl	8002bfc <__sfp_lock_acquire>
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <__sfp+0x84>)
 8002ca6:	681e      	ldr	r6, [r3, #0]
 8002ca8:	69b3      	ldr	r3, [r6, #24]
 8002caa:	b913      	cbnz	r3, 8002cb2 <__sfp+0x16>
 8002cac:	4630      	mov	r0, r6
 8002cae:	f7ff ffbd 	bl	8002c2c <__sinit>
 8002cb2:	3648      	adds	r6, #72	; 0x48
 8002cb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	d503      	bpl.n	8002cc4 <__sfp+0x28>
 8002cbc:	6833      	ldr	r3, [r6, #0]
 8002cbe:	b30b      	cbz	r3, 8002d04 <__sfp+0x68>
 8002cc0:	6836      	ldr	r6, [r6, #0]
 8002cc2:	e7f7      	b.n	8002cb4 <__sfp+0x18>
 8002cc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002cc8:	b9d5      	cbnz	r5, 8002d00 <__sfp+0x64>
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <__sfp+0x88>)
 8002ccc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002cd0:	60e3      	str	r3, [r4, #12]
 8002cd2:	6665      	str	r5, [r4, #100]	; 0x64
 8002cd4:	f000 f847 	bl	8002d66 <__retarget_lock_init_recursive>
 8002cd8:	f7ff ff96 	bl	8002c08 <__sfp_lock_release>
 8002cdc:	2208      	movs	r2, #8
 8002cde:	4629      	mov	r1, r5
 8002ce0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002ce4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ce8:	6025      	str	r5, [r4, #0]
 8002cea:	61a5      	str	r5, [r4, #24]
 8002cec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002cf0:	f7ff fd48 	bl	8002784 <memset>
 8002cf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002cf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d00:	3468      	adds	r4, #104	; 0x68
 8002d02:	e7d9      	b.n	8002cb8 <__sfp+0x1c>
 8002d04:	2104      	movs	r1, #4
 8002d06:	4638      	mov	r0, r7
 8002d08:	f7ff ff62 	bl	8002bd0 <__sfmoreglue>
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	6030      	str	r0, [r6, #0]
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d1d5      	bne.n	8002cc0 <__sfp+0x24>
 8002d14:	f7ff ff78 	bl	8002c08 <__sfp_lock_release>
 8002d18:	230c      	movs	r3, #12
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	e7ee      	b.n	8002cfc <__sfp+0x60>
 8002d1e:	bf00      	nop
 8002d20:	080031cc 	.word	0x080031cc
 8002d24:	ffff0001 	.word	0xffff0001

08002d28 <_fwalk_reent>:
 8002d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d2c:	4606      	mov	r6, r0
 8002d2e:	4688      	mov	r8, r1
 8002d30:	2700      	movs	r7, #0
 8002d32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d3a:	f1b9 0901 	subs.w	r9, r9, #1
 8002d3e:	d505      	bpl.n	8002d4c <_fwalk_reent+0x24>
 8002d40:	6824      	ldr	r4, [r4, #0]
 8002d42:	2c00      	cmp	r4, #0
 8002d44:	d1f7      	bne.n	8002d36 <_fwalk_reent+0xe>
 8002d46:	4638      	mov	r0, r7
 8002d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d4c:	89ab      	ldrh	r3, [r5, #12]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d907      	bls.n	8002d62 <_fwalk_reent+0x3a>
 8002d52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d56:	3301      	adds	r3, #1
 8002d58:	d003      	beq.n	8002d62 <_fwalk_reent+0x3a>
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	47c0      	blx	r8
 8002d60:	4307      	orrs	r7, r0
 8002d62:	3568      	adds	r5, #104	; 0x68
 8002d64:	e7e9      	b.n	8002d3a <_fwalk_reent+0x12>

08002d66 <__retarget_lock_init_recursive>:
 8002d66:	4770      	bx	lr

08002d68 <__retarget_lock_acquire_recursive>:
 8002d68:	4770      	bx	lr

08002d6a <__retarget_lock_release_recursive>:
 8002d6a:	4770      	bx	lr

08002d6c <__swhatbuf_r>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	460e      	mov	r6, r1
 8002d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d74:	4614      	mov	r4, r2
 8002d76:	2900      	cmp	r1, #0
 8002d78:	461d      	mov	r5, r3
 8002d7a:	b096      	sub	sp, #88	; 0x58
 8002d7c:	da08      	bge.n	8002d90 <__swhatbuf_r+0x24>
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002d84:	602a      	str	r2, [r5, #0]
 8002d86:	061a      	lsls	r2, r3, #24
 8002d88:	d410      	bmi.n	8002dac <__swhatbuf_r+0x40>
 8002d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d8e:	e00e      	b.n	8002dae <__swhatbuf_r+0x42>
 8002d90:	466a      	mov	r2, sp
 8002d92:	f000 f9a3 	bl	80030dc <_fstat_r>
 8002d96:	2800      	cmp	r0, #0
 8002d98:	dbf1      	blt.n	8002d7e <__swhatbuf_r+0x12>
 8002d9a:	9a01      	ldr	r2, [sp, #4]
 8002d9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002da0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002da4:	425a      	negs	r2, r3
 8002da6:	415a      	adcs	r2, r3
 8002da8:	602a      	str	r2, [r5, #0]
 8002daa:	e7ee      	b.n	8002d8a <__swhatbuf_r+0x1e>
 8002dac:	2340      	movs	r3, #64	; 0x40
 8002dae:	2000      	movs	r0, #0
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	b016      	add	sp, #88	; 0x58
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002db8 <__smakebuf_r>:
 8002db8:	898b      	ldrh	r3, [r1, #12]
 8002dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002dbc:	079d      	lsls	r5, r3, #30
 8002dbe:	4606      	mov	r6, r0
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	d507      	bpl.n	8002dd4 <__smakebuf_r+0x1c>
 8002dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002dc8:	6023      	str	r3, [r4, #0]
 8002dca:	6123      	str	r3, [r4, #16]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	6163      	str	r3, [r4, #20]
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
 8002dd4:	466a      	mov	r2, sp
 8002dd6:	ab01      	add	r3, sp, #4
 8002dd8:	f7ff ffc8 	bl	8002d6c <__swhatbuf_r>
 8002ddc:	9900      	ldr	r1, [sp, #0]
 8002dde:	4605      	mov	r5, r0
 8002de0:	4630      	mov	r0, r6
 8002de2:	f000 f891 	bl	8002f08 <_malloc_r>
 8002de6:	b948      	cbnz	r0, 8002dfc <__smakebuf_r+0x44>
 8002de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dec:	059a      	lsls	r2, r3, #22
 8002dee:	d4ef      	bmi.n	8002dd0 <__smakebuf_r+0x18>
 8002df0:	f023 0303 	bic.w	r3, r3, #3
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	81a3      	strh	r3, [r4, #12]
 8002dfa:	e7e3      	b.n	8002dc4 <__smakebuf_r+0xc>
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <__smakebuf_r+0x7c>)
 8002dfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	6020      	str	r0, [r4, #0]
 8002e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e08:	81a3      	strh	r3, [r4, #12]
 8002e0a:	9b00      	ldr	r3, [sp, #0]
 8002e0c:	6120      	str	r0, [r4, #16]
 8002e0e:	6163      	str	r3, [r4, #20]
 8002e10:	9b01      	ldr	r3, [sp, #4]
 8002e12:	b15b      	cbz	r3, 8002e2c <__smakebuf_r+0x74>
 8002e14:	4630      	mov	r0, r6
 8002e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e1a:	f000 f971 	bl	8003100 <_isatty_r>
 8002e1e:	b128      	cbz	r0, 8002e2c <__smakebuf_r+0x74>
 8002e20:	89a3      	ldrh	r3, [r4, #12]
 8002e22:	f023 0303 	bic.w	r3, r3, #3
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	81a3      	strh	r3, [r4, #12]
 8002e2c:	89a0      	ldrh	r0, [r4, #12]
 8002e2e:	4305      	orrs	r5, r0
 8002e30:	81a5      	strh	r5, [r4, #12]
 8002e32:	e7cd      	b.n	8002dd0 <__smakebuf_r+0x18>
 8002e34:	08002bc5 	.word	0x08002bc5

08002e38 <_free_r>:
 8002e38:	b538      	push	{r3, r4, r5, lr}
 8002e3a:	4605      	mov	r5, r0
 8002e3c:	2900      	cmp	r1, #0
 8002e3e:	d040      	beq.n	8002ec2 <_free_r+0x8a>
 8002e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e44:	1f0c      	subs	r4, r1, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bfb8      	it	lt
 8002e4a:	18e4      	addlt	r4, r4, r3
 8002e4c:	f000 f97a 	bl	8003144 <__malloc_lock>
 8002e50:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <_free_r+0x8c>)
 8002e52:	6813      	ldr	r3, [r2, #0]
 8002e54:	b933      	cbnz	r3, 8002e64 <_free_r+0x2c>
 8002e56:	6063      	str	r3, [r4, #4]
 8002e58:	6014      	str	r4, [r2, #0]
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e60:	f000 b976 	b.w	8003150 <__malloc_unlock>
 8002e64:	42a3      	cmp	r3, r4
 8002e66:	d908      	bls.n	8002e7a <_free_r+0x42>
 8002e68:	6820      	ldr	r0, [r4, #0]
 8002e6a:	1821      	adds	r1, r4, r0
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	bf01      	itttt	eq
 8002e70:	6819      	ldreq	r1, [r3, #0]
 8002e72:	685b      	ldreq	r3, [r3, #4]
 8002e74:	1809      	addeq	r1, r1, r0
 8002e76:	6021      	streq	r1, [r4, #0]
 8002e78:	e7ed      	b.n	8002e56 <_free_r+0x1e>
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	b10b      	cbz	r3, 8002e84 <_free_r+0x4c>
 8002e80:	42a3      	cmp	r3, r4
 8002e82:	d9fa      	bls.n	8002e7a <_free_r+0x42>
 8002e84:	6811      	ldr	r1, [r2, #0]
 8002e86:	1850      	adds	r0, r2, r1
 8002e88:	42a0      	cmp	r0, r4
 8002e8a:	d10b      	bne.n	8002ea4 <_free_r+0x6c>
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	4401      	add	r1, r0
 8002e90:	1850      	adds	r0, r2, r1
 8002e92:	4283      	cmp	r3, r0
 8002e94:	6011      	str	r1, [r2, #0]
 8002e96:	d1e0      	bne.n	8002e5a <_free_r+0x22>
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4401      	add	r1, r0
 8002e9e:	6011      	str	r1, [r2, #0]
 8002ea0:	6053      	str	r3, [r2, #4]
 8002ea2:	e7da      	b.n	8002e5a <_free_r+0x22>
 8002ea4:	d902      	bls.n	8002eac <_free_r+0x74>
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	602b      	str	r3, [r5, #0]
 8002eaa:	e7d6      	b.n	8002e5a <_free_r+0x22>
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	1821      	adds	r1, r4, r0
 8002eb0:	428b      	cmp	r3, r1
 8002eb2:	bf01      	itttt	eq
 8002eb4:	6819      	ldreq	r1, [r3, #0]
 8002eb6:	685b      	ldreq	r3, [r3, #4]
 8002eb8:	1809      	addeq	r1, r1, r0
 8002eba:	6021      	streq	r1, [r4, #0]
 8002ebc:	6063      	str	r3, [r4, #4]
 8002ebe:	6054      	str	r4, [r2, #4]
 8002ec0:	e7cb      	b.n	8002e5a <_free_r+0x22>
 8002ec2:	bd38      	pop	{r3, r4, r5, pc}
 8002ec4:	20000194 	.word	0x20000194

08002ec8 <sbrk_aligned>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	4e0e      	ldr	r6, [pc, #56]	; (8002f04 <sbrk_aligned+0x3c>)
 8002ecc:	460c      	mov	r4, r1
 8002ece:	6831      	ldr	r1, [r6, #0]
 8002ed0:	4605      	mov	r5, r0
 8002ed2:	b911      	cbnz	r1, 8002eda <sbrk_aligned+0x12>
 8002ed4:	f000 f88c 	bl	8002ff0 <_sbrk_r>
 8002ed8:	6030      	str	r0, [r6, #0]
 8002eda:	4621      	mov	r1, r4
 8002edc:	4628      	mov	r0, r5
 8002ede:	f000 f887 	bl	8002ff0 <_sbrk_r>
 8002ee2:	1c43      	adds	r3, r0, #1
 8002ee4:	d00a      	beq.n	8002efc <sbrk_aligned+0x34>
 8002ee6:	1cc4      	adds	r4, r0, #3
 8002ee8:	f024 0403 	bic.w	r4, r4, #3
 8002eec:	42a0      	cmp	r0, r4
 8002eee:	d007      	beq.n	8002f00 <sbrk_aligned+0x38>
 8002ef0:	1a21      	subs	r1, r4, r0
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f000 f87c 	bl	8002ff0 <_sbrk_r>
 8002ef8:	3001      	adds	r0, #1
 8002efa:	d101      	bne.n	8002f00 <sbrk_aligned+0x38>
 8002efc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002f00:	4620      	mov	r0, r4
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	20000198 	.word	0x20000198

08002f08 <_malloc_r>:
 8002f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0c:	1ccd      	adds	r5, r1, #3
 8002f0e:	f025 0503 	bic.w	r5, r5, #3
 8002f12:	3508      	adds	r5, #8
 8002f14:	2d0c      	cmp	r5, #12
 8002f16:	bf38      	it	cc
 8002f18:	250c      	movcc	r5, #12
 8002f1a:	2d00      	cmp	r5, #0
 8002f1c:	4607      	mov	r7, r0
 8002f1e:	db01      	blt.n	8002f24 <_malloc_r+0x1c>
 8002f20:	42a9      	cmp	r1, r5
 8002f22:	d905      	bls.n	8002f30 <_malloc_r+0x28>
 8002f24:	230c      	movs	r3, #12
 8002f26:	2600      	movs	r6, #0
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	4630      	mov	r0, r6
 8002f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f30:	4e2e      	ldr	r6, [pc, #184]	; (8002fec <_malloc_r+0xe4>)
 8002f32:	f000 f907 	bl	8003144 <__malloc_lock>
 8002f36:	6833      	ldr	r3, [r6, #0]
 8002f38:	461c      	mov	r4, r3
 8002f3a:	bb34      	cbnz	r4, 8002f8a <_malloc_r+0x82>
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	4638      	mov	r0, r7
 8002f40:	f7ff ffc2 	bl	8002ec8 <sbrk_aligned>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	4604      	mov	r4, r0
 8002f48:	d14d      	bne.n	8002fe6 <_malloc_r+0xde>
 8002f4a:	6834      	ldr	r4, [r6, #0]
 8002f4c:	4626      	mov	r6, r4
 8002f4e:	2e00      	cmp	r6, #0
 8002f50:	d140      	bne.n	8002fd4 <_malloc_r+0xcc>
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	4631      	mov	r1, r6
 8002f56:	4638      	mov	r0, r7
 8002f58:	eb04 0803 	add.w	r8, r4, r3
 8002f5c:	f000 f848 	bl	8002ff0 <_sbrk_r>
 8002f60:	4580      	cmp	r8, r0
 8002f62:	d13a      	bne.n	8002fda <_malloc_r+0xd2>
 8002f64:	6821      	ldr	r1, [r4, #0]
 8002f66:	3503      	adds	r5, #3
 8002f68:	1a6d      	subs	r5, r5, r1
 8002f6a:	f025 0503 	bic.w	r5, r5, #3
 8002f6e:	3508      	adds	r5, #8
 8002f70:	2d0c      	cmp	r5, #12
 8002f72:	bf38      	it	cc
 8002f74:	250c      	movcc	r5, #12
 8002f76:	4638      	mov	r0, r7
 8002f78:	4629      	mov	r1, r5
 8002f7a:	f7ff ffa5 	bl	8002ec8 <sbrk_aligned>
 8002f7e:	3001      	adds	r0, #1
 8002f80:	d02b      	beq.n	8002fda <_malloc_r+0xd2>
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	442b      	add	r3, r5
 8002f86:	6023      	str	r3, [r4, #0]
 8002f88:	e00e      	b.n	8002fa8 <_malloc_r+0xa0>
 8002f8a:	6822      	ldr	r2, [r4, #0]
 8002f8c:	1b52      	subs	r2, r2, r5
 8002f8e:	d41e      	bmi.n	8002fce <_malloc_r+0xc6>
 8002f90:	2a0b      	cmp	r2, #11
 8002f92:	d916      	bls.n	8002fc2 <_malloc_r+0xba>
 8002f94:	1961      	adds	r1, r4, r5
 8002f96:	42a3      	cmp	r3, r4
 8002f98:	6025      	str	r5, [r4, #0]
 8002f9a:	bf18      	it	ne
 8002f9c:	6059      	strne	r1, [r3, #4]
 8002f9e:	6863      	ldr	r3, [r4, #4]
 8002fa0:	bf08      	it	eq
 8002fa2:	6031      	streq	r1, [r6, #0]
 8002fa4:	5162      	str	r2, [r4, r5]
 8002fa6:	604b      	str	r3, [r1, #4]
 8002fa8:	4638      	mov	r0, r7
 8002faa:	f104 060b 	add.w	r6, r4, #11
 8002fae:	f000 f8cf 	bl	8003150 <__malloc_unlock>
 8002fb2:	f026 0607 	bic.w	r6, r6, #7
 8002fb6:	1d23      	adds	r3, r4, #4
 8002fb8:	1af2      	subs	r2, r6, r3
 8002fba:	d0b6      	beq.n	8002f2a <_malloc_r+0x22>
 8002fbc:	1b9b      	subs	r3, r3, r6
 8002fbe:	50a3      	str	r3, [r4, r2]
 8002fc0:	e7b3      	b.n	8002f2a <_malloc_r+0x22>
 8002fc2:	6862      	ldr	r2, [r4, #4]
 8002fc4:	42a3      	cmp	r3, r4
 8002fc6:	bf0c      	ite	eq
 8002fc8:	6032      	streq	r2, [r6, #0]
 8002fca:	605a      	strne	r2, [r3, #4]
 8002fcc:	e7ec      	b.n	8002fa8 <_malloc_r+0xa0>
 8002fce:	4623      	mov	r3, r4
 8002fd0:	6864      	ldr	r4, [r4, #4]
 8002fd2:	e7b2      	b.n	8002f3a <_malloc_r+0x32>
 8002fd4:	4634      	mov	r4, r6
 8002fd6:	6876      	ldr	r6, [r6, #4]
 8002fd8:	e7b9      	b.n	8002f4e <_malloc_r+0x46>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	4638      	mov	r0, r7
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	f000 f8b6 	bl	8003150 <__malloc_unlock>
 8002fe4:	e7a1      	b.n	8002f2a <_malloc_r+0x22>
 8002fe6:	6025      	str	r5, [r4, #0]
 8002fe8:	e7de      	b.n	8002fa8 <_malloc_r+0xa0>
 8002fea:	bf00      	nop
 8002fec:	20000194 	.word	0x20000194

08002ff0 <_sbrk_r>:
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	4d05      	ldr	r5, [pc, #20]	; (800300c <_sbrk_r+0x1c>)
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	4608      	mov	r0, r1
 8002ffa:	602b      	str	r3, [r5, #0]
 8002ffc:	f7fd fc62 	bl	80008c4 <_sbrk>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d102      	bne.n	800300a <_sbrk_r+0x1a>
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	b103      	cbz	r3, 800300a <_sbrk_r+0x1a>
 8003008:	6023      	str	r3, [r4, #0]
 800300a:	bd38      	pop	{r3, r4, r5, pc}
 800300c:	2000019c 	.word	0x2000019c

08003010 <__sread>:
 8003010:	b510      	push	{r4, lr}
 8003012:	460c      	mov	r4, r1
 8003014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003018:	f000 f8a0 	bl	800315c <_read_r>
 800301c:	2800      	cmp	r0, #0
 800301e:	bfab      	itete	ge
 8003020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003022:	89a3      	ldrhlt	r3, [r4, #12]
 8003024:	181b      	addge	r3, r3, r0
 8003026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800302a:	bfac      	ite	ge
 800302c:	6563      	strge	r3, [r4, #84]	; 0x54
 800302e:	81a3      	strhlt	r3, [r4, #12]
 8003030:	bd10      	pop	{r4, pc}

08003032 <__swrite>:
 8003032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003036:	461f      	mov	r7, r3
 8003038:	898b      	ldrh	r3, [r1, #12]
 800303a:	4605      	mov	r5, r0
 800303c:	05db      	lsls	r3, r3, #23
 800303e:	460c      	mov	r4, r1
 8003040:	4616      	mov	r6, r2
 8003042:	d505      	bpl.n	8003050 <__swrite+0x1e>
 8003044:	2302      	movs	r3, #2
 8003046:	2200      	movs	r2, #0
 8003048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800304c:	f000 f868 	bl	8003120 <_lseek_r>
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	4632      	mov	r2, r6
 8003054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003058:	81a3      	strh	r3, [r4, #12]
 800305a:	4628      	mov	r0, r5
 800305c:	463b      	mov	r3, r7
 800305e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003066:	f000 b817 	b.w	8003098 <_write_r>

0800306a <__sseek>:
 800306a:	b510      	push	{r4, lr}
 800306c:	460c      	mov	r4, r1
 800306e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003072:	f000 f855 	bl	8003120 <_lseek_r>
 8003076:	1c43      	adds	r3, r0, #1
 8003078:	89a3      	ldrh	r3, [r4, #12]
 800307a:	bf15      	itete	ne
 800307c:	6560      	strne	r0, [r4, #84]	; 0x54
 800307e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003086:	81a3      	strheq	r3, [r4, #12]
 8003088:	bf18      	it	ne
 800308a:	81a3      	strhne	r3, [r4, #12]
 800308c:	bd10      	pop	{r4, pc}

0800308e <__sclose>:
 800308e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003092:	f000 b813 	b.w	80030bc <_close_r>
	...

08003098 <_write_r>:
 8003098:	b538      	push	{r3, r4, r5, lr}
 800309a:	4604      	mov	r4, r0
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	2200      	movs	r2, #0
 80030a2:	4d05      	ldr	r5, [pc, #20]	; (80030b8 <_write_r+0x20>)
 80030a4:	602a      	str	r2, [r5, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f7fd f850 	bl	800014c <_write>
 80030ac:	1c43      	adds	r3, r0, #1
 80030ae:	d102      	bne.n	80030b6 <_write_r+0x1e>
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	b103      	cbz	r3, 80030b6 <_write_r+0x1e>
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
 80030b8:	2000019c 	.word	0x2000019c

080030bc <_close_r>:
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	2300      	movs	r3, #0
 80030c0:	4d05      	ldr	r5, [pc, #20]	; (80030d8 <_close_r+0x1c>)
 80030c2:	4604      	mov	r4, r0
 80030c4:	4608      	mov	r0, r1
 80030c6:	602b      	str	r3, [r5, #0]
 80030c8:	f7fd fbcb 	bl	8000862 <_close>
 80030cc:	1c43      	adds	r3, r0, #1
 80030ce:	d102      	bne.n	80030d6 <_close_r+0x1a>
 80030d0:	682b      	ldr	r3, [r5, #0]
 80030d2:	b103      	cbz	r3, 80030d6 <_close_r+0x1a>
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	bd38      	pop	{r3, r4, r5, pc}
 80030d8:	2000019c 	.word	0x2000019c

080030dc <_fstat_r>:
 80030dc:	b538      	push	{r3, r4, r5, lr}
 80030de:	2300      	movs	r3, #0
 80030e0:	4d06      	ldr	r5, [pc, #24]	; (80030fc <_fstat_r+0x20>)
 80030e2:	4604      	mov	r4, r0
 80030e4:	4608      	mov	r0, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	602b      	str	r3, [r5, #0]
 80030ea:	f7fd fbc5 	bl	8000878 <_fstat>
 80030ee:	1c43      	adds	r3, r0, #1
 80030f0:	d102      	bne.n	80030f8 <_fstat_r+0x1c>
 80030f2:	682b      	ldr	r3, [r5, #0]
 80030f4:	b103      	cbz	r3, 80030f8 <_fstat_r+0x1c>
 80030f6:	6023      	str	r3, [r4, #0]
 80030f8:	bd38      	pop	{r3, r4, r5, pc}
 80030fa:	bf00      	nop
 80030fc:	2000019c 	.word	0x2000019c

08003100 <_isatty_r>:
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	2300      	movs	r3, #0
 8003104:	4d05      	ldr	r5, [pc, #20]	; (800311c <_isatty_r+0x1c>)
 8003106:	4604      	mov	r4, r0
 8003108:	4608      	mov	r0, r1
 800310a:	602b      	str	r3, [r5, #0]
 800310c:	f7fd fbc3 	bl	8000896 <_isatty>
 8003110:	1c43      	adds	r3, r0, #1
 8003112:	d102      	bne.n	800311a <_isatty_r+0x1a>
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	b103      	cbz	r3, 800311a <_isatty_r+0x1a>
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	bd38      	pop	{r3, r4, r5, pc}
 800311c:	2000019c 	.word	0x2000019c

08003120 <_lseek_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	4604      	mov	r4, r0
 8003124:	4608      	mov	r0, r1
 8003126:	4611      	mov	r1, r2
 8003128:	2200      	movs	r2, #0
 800312a:	4d05      	ldr	r5, [pc, #20]	; (8003140 <_lseek_r+0x20>)
 800312c:	602a      	str	r2, [r5, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	f7fd fbbb 	bl	80008aa <_lseek>
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	d102      	bne.n	800313e <_lseek_r+0x1e>
 8003138:	682b      	ldr	r3, [r5, #0]
 800313a:	b103      	cbz	r3, 800313e <_lseek_r+0x1e>
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	bd38      	pop	{r3, r4, r5, pc}
 8003140:	2000019c 	.word	0x2000019c

08003144 <__malloc_lock>:
 8003144:	4801      	ldr	r0, [pc, #4]	; (800314c <__malloc_lock+0x8>)
 8003146:	f7ff be0f 	b.w	8002d68 <__retarget_lock_acquire_recursive>
 800314a:	bf00      	nop
 800314c:	20000190 	.word	0x20000190

08003150 <__malloc_unlock>:
 8003150:	4801      	ldr	r0, [pc, #4]	; (8003158 <__malloc_unlock+0x8>)
 8003152:	f7ff be0a 	b.w	8002d6a <__retarget_lock_release_recursive>
 8003156:	bf00      	nop
 8003158:	20000190 	.word	0x20000190

0800315c <_read_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4604      	mov	r4, r0
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	2200      	movs	r2, #0
 8003166:	4d05      	ldr	r5, [pc, #20]	; (800317c <_read_r+0x20>)
 8003168:	602a      	str	r2, [r5, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	f7fd fb5c 	bl	8000828 <_read>
 8003170:	1c43      	adds	r3, r0, #1
 8003172:	d102      	bne.n	800317a <_read_r+0x1e>
 8003174:	682b      	ldr	r3, [r5, #0]
 8003176:	b103      	cbz	r3, 800317a <_read_r+0x1e>
 8003178:	6023      	str	r3, [r4, #0]
 800317a:	bd38      	pop	{r3, r4, r5, pc}
 800317c:	2000019c 	.word	0x2000019c

08003180 <_init>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	bf00      	nop
 8003184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003186:	bc08      	pop	{r3}
 8003188:	469e      	mov	lr, r3
 800318a:	4770      	bx	lr

0800318c <_fini>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	bf00      	nop
 8003190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003192:	bc08      	pop	{r3}
 8003194:	469e      	mov	lr, r3
 8003196:	4770      	bx	lr
