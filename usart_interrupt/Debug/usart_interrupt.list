
usart_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008fbc  08008fbc  00018fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd8  08008fd8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe0  08008fe0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000858  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a04d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d05  00000000  00000000  0003a10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  0003f1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e41  00000000  00000000  00040458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab63  00000000  00000000  00064299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd36  00000000  00000000  0007edfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014cb32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005504  00000000  00000000  0014cb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008fa4 	.word	0x08008fa4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008fa4 	.word	0x08008fa4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc96 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f818 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f93e 	bl	8000758 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f87e 	bl	80005dc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8aa 	bl	8000638 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8d8 	bl	8000698 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f008 f914 	bl	8008714 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f90a 	bl	8000704 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_data, 10);
 80004f0:	220a      	movs	r2, #10
 80004f2:	4903      	ldr	r1, [pc, #12]	; (8000500 <main+0x34>)
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <main+0x38>)
 80004f6:	f004 f9a1 	bl	800483c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004fa:	f008 f931 	bl	8008760 <MX_USB_HOST_Process>
 80004fe:	e7fc      	b.n	80004fa <main+0x2e>
 8000500:	200001e4 	.word	0x200001e4
 8000504:	200001a0 	.word	0x200001a0

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f008 fc3e 	bl	8008d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fa14 	bl	80039bc <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f9f3 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fc75 	bl	8003eac <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 f9dc 	bl	8000984 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_I2C1_Init+0x50>)
 800061a:	f002 fbeb 	bl	8002df4 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f9ae 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000ac 	.word	0x200000ac
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_I2S3_Init+0x54>)
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_I2S3_Init+0x58>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2S3_Init+0x54>)
 8000644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000648:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_I2S3_Init+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2S3_Init+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_I2S3_Init+0x54>)
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <MX_I2S3_Init+0x5c>)
 8000662:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_I2S3_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_I2S3_Init+0x54>)
 8000678:	f002 fd00 	bl	800307c <HAL_I2S_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000682:	f000 f97f 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000100 	.word	0x20000100
 8000690:	40003c00 	.word	0x40003c00
 8000694:	00017700 	.word	0x00017700

08000698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_SPI1_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <MX_SPI1_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_SPI1_Init+0x64>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_SPI1_Init+0x64>)
 80006ea:	f003 ff3f 	bl	800456c <HAL_SPI_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f946 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000148 	.word	0x20000148
 8000700:	40013000 	.word	0x40013000

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f003 ff9f 	bl	800467e <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f91d 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200001a0 	.word	0x200001a0
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b72      	ldr	r3, [pc, #456]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a71      	ldr	r2, [pc, #452]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b6f      	ldr	r3, [pc, #444]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0310 	and.w	r3, r3, #16
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b6b      	ldr	r3, [pc, #428]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a6a      	ldr	r2, [pc, #424]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b68      	ldr	r3, [pc, #416]	; (800093c <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b64      	ldr	r3, [pc, #400]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a63      	ldr	r2, [pc, #396]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b61      	ldr	r3, [pc, #388]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b5d      	ldr	r3, [pc, #372]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a5c      	ldr	r2, [pc, #368]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b5a      	ldr	r3, [pc, #360]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b56      	ldr	r3, [pc, #344]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a55      	ldr	r2, [pc, #340]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b53      	ldr	r3, [pc, #332]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b4f      	ldr	r3, [pc, #316]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a4e      	ldr	r2, [pc, #312]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b4c      	ldr	r3, [pc, #304]	; (800093c <MX_GPIO_Init+0x1e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	4849      	ldr	r0, [pc, #292]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800081c:	f000 fec6 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2101      	movs	r1, #1
 8000824:	4847      	ldr	r0, [pc, #284]	; (8000944 <MX_GPIO_Init+0x1ec>)
 8000826:	f000 fec1 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800082a:	2200      	movs	r2, #0
 800082c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000830:	4845      	ldr	r0, [pc, #276]	; (8000948 <MX_GPIO_Init+0x1f0>)
 8000832:	f000 febb 	bl	80015ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	483c      	ldr	r0, [pc, #240]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800084e:	f000 fd11 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4836      	ldr	r0, [pc, #216]	; (8000944 <MX_GPIO_Init+0x1ec>)
 800086a:	f000 fd03 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087e:	2305      	movs	r3, #5
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	482e      	ldr	r0, [pc, #184]	; (8000944 <MX_GPIO_Init+0x1ec>)
 800088a:	f000 fcf3 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000892:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	482a      	ldr	r0, [pc, #168]	; (800094c <MX_GPIO_Init+0x1f4>)
 80008a4:	f000 fce6 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4825      	ldr	r0, [pc, #148]	; (8000950 <MX_GPIO_Init+0x1f8>)
 80008bc:	f000 fcda 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	481c      	ldr	r0, [pc, #112]	; (8000950 <MX_GPIO_Init+0x1f8>)
 80008de:	f000 fcc9 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <MX_GPIO_Init+0x1f0>)
 80008fc:	f000 fcba 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_GPIO_Init+0x1f0>)
 8000914:	f000 fcae 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800092e:	f000 fca1 	bl	8001274 <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40021000 	.word	0x40021000
 8000944:	40020800 	.word	0x40020800
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400

08000954 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart2, rx_data, 10);
 800095c:	220a      	movs	r2, #10
 800095e:	4907      	ldr	r1, [pc, #28]	; (800097c <HAL_UART_RxCpltCallback+0x28>)
 8000960:	4807      	ldr	r0, [pc, #28]	; (8000980 <HAL_UART_RxCpltCallback+0x2c>)
 8000962:	f003 ff6b 	bl	800483c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, rx_data, 10, 10);
 8000966:	230a      	movs	r3, #10
 8000968:	220a      	movs	r2, #10
 800096a:	4904      	ldr	r1, [pc, #16]	; (800097c <HAL_UART_RxCpltCallback+0x28>)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <HAL_UART_RxCpltCallback+0x2c>)
 800096e:	f003 fed3 	bl	8004718 <HAL_UART_Transmit>


}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200001e4 	.word	0x200001e4
 8000980:	200001a0 	.word	0x200001a0

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ce:	2007      	movs	r0, #7
 80009d0:	f000 fb7c 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_I2C_MspInit+0x84>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12c      	bne.n	8000a5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a1e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a24:	2312      	movs	r3, #18
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a30:	2304      	movs	r3, #4
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480c      	ldr	r0, [pc, #48]	; (8000a6c <HAL_I2C_MspInit+0x8c>)
 8000a3c:	f000 fc1a 	bl	8001274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40005400 	.word	0x40005400
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020400 	.word	0x40020400

08000a70 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a31      	ldr	r2, [pc, #196]	; (8000b60 <HAL_I2S_MspInit+0xf0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d15a      	bne.n	8000b56 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aa4:	23c0      	movs	r3, #192	; 0xc0
 8000aa6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 fc1b 	bl	80042ec <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000abc:	f7ff ff62 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <HAL_I2S_MspInit+0xf4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <HAL_I2S_MspInit+0xf4>)
 8000aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <HAL_I2S_MspInit+0xf4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <HAL_I2S_MspInit+0xf4>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <HAL_I2S_MspInit+0xf4>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_I2S_MspInit+0xf4>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <HAL_I2S_MspInit+0xf4>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_I2S_MspInit+0xf4>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b14:	2310      	movs	r3, #16
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b24:	2306      	movs	r3, #6
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480e      	ldr	r0, [pc, #56]	; (8000b68 <HAL_I2S_MspInit+0xf8>)
 8000b30:	f000 fba0 	bl	8001274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b34:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b46:	2306      	movs	r3, #6
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <HAL_I2S_MspInit+0xfc>)
 8000b52:	f000 fb8f 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3738      	adds	r7, #56	; 0x38
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40003c00 	.word	0x40003c00
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020800 	.word	0x40020800

08000b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <HAL_SPI_MspInit+0x84>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d12b      	bne.n	8000bea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_SPI_MspInit+0x88>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_SPI_MspInit+0x88>)
 8000b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_SPI_MspInit+0x88>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_SPI_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_SPI_MspInit+0x88>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_SPI_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bca:	23e0      	movs	r3, #224	; 0xe0
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_SPI_MspInit+0x8c>)
 8000be6:	f000 fb45 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40013000 	.word	0x40013000
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <HAL_UART_MspInit+0x94>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d133      	bne.n	8000c8a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c5a:	230c      	movs	r3, #12
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <HAL_UART_MspInit+0x9c>)
 8000c76:	f000 fafd 	bl	8001274 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2026      	movs	r0, #38	; 0x26
 8000c80:	f000 fa2f 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c84:	2026      	movs	r0, #38	; 0x26
 8000c86:	f000 fa48 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40004400 	.word	0x40004400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f8da 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <USART2_IRQHandler+0x10>)
 8000cfa:	f003 fdcf 	bl	800489c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200001a0 	.word	0x200001a0

08000d08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <OTG_FS_IRQHandler+0x10>)
 8000d0e:	f000 fed1 	bl	8001ab4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200005d4 	.word	0x200005d4

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f007 ffea 	bl	8008d24 <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	200001f0 	.word	0x200001f0
 8000d84:	200008e8 	.word	0x200008e8

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc8:	4c0b      	ldr	r4, [pc, #44]	; (8000df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd6:	f7ff ffd7 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f007 ffa9 	bl	8008d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fb75 	bl	80004cc <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000df0:	08008fe8 	.word	0x08008fe8
  ldr r2, =_sbss
 8000df4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000df8:	200008e8 	.word	0x200008e8

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f94f 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fdac 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f967 	bl	8001136 <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e80:	f000 f92f 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	200001f4 	.word	0x200001f4

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200001f4 	.word	0x200001f4

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	; (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff29 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff3e 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff31 	bl	8000f90 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa2 	bl	8001088 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff feb6 	bl	8000ecc <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d008      	beq.n	8001180 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e052      	b.n	8001226 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0216 	bic.w	r2, r2, #22
 800118e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800119e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d103      	bne.n	80011b0 <HAL_DMA_Abort+0x62>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d007      	beq.n	80011c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0208 	bic.w	r2, r2, #8
 80011be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0201 	bic.w	r2, r2, #1
 80011ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d0:	e013      	b.n	80011fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011d2:	f7ff fe7b 	bl	8000ecc <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d90c      	bls.n	80011fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2220      	movs	r2, #32
 80011e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2203      	movs	r2, #3
 80011ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e015      	b.n	8001226 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1e4      	bne.n	80011d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120c:	223f      	movs	r2, #63	; 0x3f
 800120e:	409a      	lsls	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d004      	beq.n	800124c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e00c      	b.n	8001266 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2205      	movs	r2, #5
 8001250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
 800128e:	e16b      	b.n	8001568 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001290:	2201      	movs	r2, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	f040 815a 	bne.w	8001562 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d005      	beq.n	80012c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d130      	bne.n	8001328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fc:	2201      	movs	r2, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 0201 	and.w	r2, r3, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b03      	cmp	r3, #3
 8001332:	d017      	beq.n	8001364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d123      	bne.n	80013b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	69b9      	ldr	r1, [r7, #24]
 80013b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0203 	and.w	r2, r3, #3
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80b4 	beq.w	8001562 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b60      	ldr	r3, [pc, #384]	; (8001580 <HAL_GPIO_Init+0x30c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a5f      	ldr	r2, [pc, #380]	; (8001580 <HAL_GPIO_Init+0x30c>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <HAL_GPIO_Init+0x30c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001416:	4a5b      	ldr	r2, [pc, #364]	; (8001584 <HAL_GPIO_Init+0x310>)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	220f      	movs	r2, #15
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a52      	ldr	r2, [pc, #328]	; (8001588 <HAL_GPIO_Init+0x314>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d02b      	beq.n	800149a <HAL_GPIO_Init+0x226>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a51      	ldr	r2, [pc, #324]	; (800158c <HAL_GPIO_Init+0x318>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d025      	beq.n	8001496 <HAL_GPIO_Init+0x222>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a50      	ldr	r2, [pc, #320]	; (8001590 <HAL_GPIO_Init+0x31c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d01f      	beq.n	8001492 <HAL_GPIO_Init+0x21e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4f      	ldr	r2, [pc, #316]	; (8001594 <HAL_GPIO_Init+0x320>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d019      	beq.n	800148e <HAL_GPIO_Init+0x21a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4e      	ldr	r2, [pc, #312]	; (8001598 <HAL_GPIO_Init+0x324>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0x216>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4d      	ldr	r2, [pc, #308]	; (800159c <HAL_GPIO_Init+0x328>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00d      	beq.n	8001486 <HAL_GPIO_Init+0x212>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4c      	ldr	r2, [pc, #304]	; (80015a0 <HAL_GPIO_Init+0x32c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d007      	beq.n	8001482 <HAL_GPIO_Init+0x20e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4b      	ldr	r2, [pc, #300]	; (80015a4 <HAL_GPIO_Init+0x330>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_GPIO_Init+0x20a>
 800147a:	2307      	movs	r3, #7
 800147c:	e00e      	b.n	800149c <HAL_GPIO_Init+0x228>
 800147e:	2308      	movs	r3, #8
 8001480:	e00c      	b.n	800149c <HAL_GPIO_Init+0x228>
 8001482:	2306      	movs	r3, #6
 8001484:	e00a      	b.n	800149c <HAL_GPIO_Init+0x228>
 8001486:	2305      	movs	r3, #5
 8001488:	e008      	b.n	800149c <HAL_GPIO_Init+0x228>
 800148a:	2304      	movs	r3, #4
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x228>
 800148e:	2303      	movs	r3, #3
 8001490:	e004      	b.n	800149c <HAL_GPIO_Init+0x228>
 8001492:	2302      	movs	r3, #2
 8001494:	e002      	b.n	800149c <HAL_GPIO_Init+0x228>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x228>
 800149a:	2300      	movs	r3, #0
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	f002 0203 	and.w	r2, r2, #3
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	4093      	lsls	r3, r2
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ac:	4935      	ldr	r1, [pc, #212]	; (8001584 <HAL_GPIO_Init+0x310>)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3302      	adds	r3, #2
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <HAL_GPIO_Init+0x334>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014de:	4a32      	ldr	r2, [pc, #200]	; (80015a8 <HAL_GPIO_Init+0x334>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_GPIO_Init+0x334>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001508:	4a27      	ldr	r2, [pc, #156]	; (80015a8 <HAL_GPIO_Init+0x334>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_GPIO_Init+0x334>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001532:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_GPIO_Init+0x334>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_GPIO_Init+0x334>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800155c:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <HAL_GPIO_Init+0x334>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3301      	adds	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b0f      	cmp	r3, #15
 800156c:	f67f ae90 	bls.w	8001290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40013800 	.word	0x40013800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020400 	.word	0x40020400
 8001590:	40020800 	.word	0x40020800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40021000 	.word	0x40021000
 800159c:	40021400 	.word	0x40021400
 80015a0:	40021800 	.word	0x40021800
 80015a4:	40021c00 	.word	0x40021c00
 80015a8:	40013c00 	.word	0x40013c00

080015ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
 80015b8:	4613      	mov	r3, r2
 80015ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015bc:	787b      	ldrb	r3, [r7, #1]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c8:	e003      	b.n	80015d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	041a      	lsls	r2, r3, #16
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	619a      	str	r2, [r3, #24]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e0:	b08f      	sub	sp, #60	; 0x3c
 80015e2:	af0a      	add	r7, sp, #40	; 0x28
 80015e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e054      	b.n	800169a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f007 f8e0 	bl	80087d0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2203      	movs	r2, #3
 8001614:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f004 f90e 	bl	8005850 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	687e      	ldr	r6, [r7, #4]
 800163c:	466d      	mov	r5, sp
 800163e:	f106 0410 	add.w	r4, r6, #16
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800164e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001652:	1d33      	adds	r3, r6, #4
 8001654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001656:	6838      	ldr	r0, [r7, #0]
 8001658:	f004 f888 	bl	800576c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2101      	movs	r1, #1
 8001662:	4618      	mov	r0, r3
 8001664:	f004 f905 	bl	8005872 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	687e      	ldr	r6, [r7, #4]
 8001670:	466d      	mov	r5, sp
 8001672:	f106 0410 	add.w	r4, r6, #16
 8001676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800167a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800167e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001682:	e885 0003 	stmia.w	r5, {r0, r1}
 8001686:	1d33      	adds	r3, r6, #4
 8001688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800168a:	6838      	ldr	r0, [r7, #0]
 800168c:	f004 fa8e 	bl	8005bac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016a2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016a2:	b590      	push	{r4, r7, lr}
 80016a4:	b089      	sub	sp, #36	; 0x24
 80016a6:	af04      	add	r7, sp, #16
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	4608      	mov	r0, r1
 80016ac:	4611      	mov	r1, r2
 80016ae:	461a      	mov	r2, r3
 80016b0:	4603      	mov	r3, r0
 80016b2:	70fb      	strb	r3, [r7, #3]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70bb      	strb	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_HCD_HC_Init+0x28>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e076      	b.n	80017b8 <HAL_HCD_HC_Init+0x116>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	212c      	movs	r1, #44	; 0x2c
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4413      	add	r3, r2
 80016de:	333d      	adds	r3, #61	; 0x3d
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	212c      	movs	r1, #44	; 0x2c
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	3338      	adds	r3, #56	; 0x38
 80016f2:	787a      	ldrb	r2, [r7, #1]
 80016f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	212c      	movs	r1, #44	; 0x2c
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	3340      	adds	r3, #64	; 0x40
 8001704:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001706:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	212c      	movs	r1, #44	; 0x2c
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	4413      	add	r3, r2
 8001714:	3339      	adds	r3, #57	; 0x39
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	212c      	movs	r1, #44	; 0x2c
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	333f      	adds	r3, #63	; 0x3f
 8001728:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800172c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	78ba      	ldrb	r2, [r7, #2]
 8001732:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001736:	b2d0      	uxtb	r0, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	333a      	adds	r3, #58	; 0x3a
 8001744:	4602      	mov	r2, r0
 8001746:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001748:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800174c:	2b00      	cmp	r3, #0
 800174e:	da09      	bge.n	8001764 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	212c      	movs	r1, #44	; 0x2c
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
 800175c:	333b      	adds	r3, #59	; 0x3b
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e008      	b.n	8001776 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	212c      	movs	r1, #44	; 0x2c
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	333b      	adds	r3, #59	; 0x3b
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	333c      	adds	r3, #60	; 0x3c
 8001784:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001788:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	787c      	ldrb	r4, [r7, #1]
 8001790:	78ba      	ldrb	r2, [r7, #2]
 8001792:	78f9      	ldrb	r1, [r7, #3]
 8001794:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	4623      	mov	r3, r4
 80017a6:	f004 fb87 	bl	8005eb8 <USB_HC_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd90      	pop	{r4, r7, pc}

080017c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_HCD_HC_Halt+0x1e>
 80017da:	2302      	movs	r3, #2
 80017dc:	e00f      	b.n	80017fe <HAL_HCD_HC_Halt+0x3e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 fdd7 	bl	80063a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	4608      	mov	r0, r1
 8001812:	4611      	mov	r1, r2
 8001814:	461a      	mov	r2, r3
 8001816:	4603      	mov	r3, r0
 8001818:	70fb      	strb	r3, [r7, #3]
 800181a:	460b      	mov	r3, r1
 800181c:	70bb      	strb	r3, [r7, #2]
 800181e:	4613      	mov	r3, r2
 8001820:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	333b      	adds	r3, #59	; 0x3b
 8001830:	78ba      	ldrb	r2, [r7, #2]
 8001832:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	212c      	movs	r1, #44	; 0x2c
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	333f      	adds	r3, #63	; 0x3f
 8001842:	787a      	ldrb	r2, [r7, #1]
 8001844:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001846:	7c3b      	ldrb	r3, [r7, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d112      	bne.n	8001872 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	3342      	adds	r3, #66	; 0x42
 800185a:	2203      	movs	r2, #3
 800185c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	333d      	adds	r3, #61	; 0x3d
 800186c:	7f3a      	ldrb	r2, [r7, #28]
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e008      	b.n	8001884 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	212c      	movs	r1, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	3342      	adds	r3, #66	; 0x42
 8001880:	2202      	movs	r2, #2
 8001882:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b03      	cmp	r3, #3
 8001888:	f200 80c6 	bhi.w	8001a18 <HAL_HCD_HC_SubmitRequest+0x210>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	08001a05 	.word	0x08001a05
 800189c:	08001909 	.word	0x08001909
 80018a0:	08001987 	.word	0x08001987
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018a4:	7c3b      	ldrb	r3, [r7, #16]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	f040 80b8 	bne.w	8001a1c <HAL_HCD_HC_SubmitRequest+0x214>
 80018ac:	78bb      	ldrb	r3, [r7, #2]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 80b4 	bne.w	8001a1c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80018b4:	8b3b      	ldrh	r3, [r7, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d108      	bne.n	80018cc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	212c      	movs	r1, #44	; 0x2c
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	3355      	adds	r3, #85	; 0x55
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	212c      	movs	r1, #44	; 0x2c
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	3355      	adds	r3, #85	; 0x55
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d109      	bne.n	80018f4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3342      	adds	r3, #66	; 0x42
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018f2:	e093      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	212c      	movs	r1, #44	; 0x2c
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	3342      	adds	r3, #66	; 0x42
 8001902:	2202      	movs	r2, #2
 8001904:	701a      	strb	r2, [r3, #0]
      break;
 8001906:	e089      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001908:	78bb      	ldrb	r3, [r7, #2]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d11d      	bne.n	800194a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3355      	adds	r3, #85	; 0x55
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	212c      	movs	r1, #44	; 0x2c
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	3342      	adds	r3, #66	; 0x42
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001934:	e073      	b.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	212c      	movs	r1, #44	; 0x2c
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	3342      	adds	r3, #66	; 0x42
 8001944:	2202      	movs	r2, #2
 8001946:	701a      	strb	r2, [r3, #0]
      break;
 8001948:	e069      	b.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	3354      	adds	r3, #84	; 0x54
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	3342      	adds	r3, #66	; 0x42
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
      break;
 8001970:	e055      	b.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	212c      	movs	r1, #44	; 0x2c
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	3342      	adds	r3, #66	; 0x42
 8001980:	2202      	movs	r2, #2
 8001982:	701a      	strb	r2, [r3, #0]
      break;
 8001984:	e04b      	b.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001986:	78bb      	ldrb	r3, [r7, #2]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d11d      	bne.n	80019c8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3355      	adds	r3, #85	; 0x55
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3342      	adds	r3, #66	; 0x42
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019b2:	e034      	b.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3342      	adds	r3, #66	; 0x42
 80019c2:	2202      	movs	r2, #2
 80019c4:	701a      	strb	r2, [r3, #0]
      break;
 80019c6:	e02a      	b.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	212c      	movs	r1, #44	; 0x2c
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	3354      	adds	r3, #84	; 0x54
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	3342      	adds	r3, #66	; 0x42
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
      break;
 80019ee:	e016      	b.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	3342      	adds	r3, #66	; 0x42
 80019fe:	2202      	movs	r2, #2
 8001a00:	701a      	strb	r2, [r3, #0]
      break;
 8001a02:	e00c      	b.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	212c      	movs	r1, #44	; 0x2c
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	3342      	adds	r3, #66	; 0x42
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
      break;
 8001a16:	e002      	b.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a18:	bf00      	nop
 8001a1a:	e000      	b.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a1c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	212c      	movs	r1, #44	; 0x2c
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	3344      	adds	r3, #68	; 0x44
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	8b3a      	ldrh	r2, [r7, #24]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	202c      	movs	r0, #44	; 0x2c
 8001a38:	fb00 f303 	mul.w	r3, r0, r3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	334c      	adds	r3, #76	; 0x4c
 8001a40:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	212c      	movs	r1, #44	; 0x2c
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3360      	adds	r3, #96	; 0x60
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	212c      	movs	r1, #44	; 0x2c
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	3350      	adds	r3, #80	; 0x50
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3339      	adds	r3, #57	; 0x39
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3361      	adds	r3, #97	; 0x61
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	222c      	movs	r2, #44	; 0x2c
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	3338      	adds	r3, #56	; 0x38
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	18d1      	adds	r1, r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f004 fb2a 	bl	80060fc <USB_HC_StartXfer>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop

08001ab4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f004 f82b 	bl	8005b26 <USB_GetMode>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	f040 80f6 	bne.w	8001cc4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 f80f 	bl	8005b00 <USB_ReadInterrupts>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80ec 	beq.w	8001cc2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 f806 	bl	8005b00 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001afe:	d104      	bne.n	8001b0a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fff6 	bl	8005b00 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b1e:	d104      	bne.n	8001b2a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 ffe6 	bl	8005b00 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b3e:	d104      	bne.n	8001b4a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 ffd6 	bl	8005b00 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d103      	bne.n	8001b66 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2202      	movs	r2, #2
 8001b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 ffc8 	bl	8005b00 <USB_ReadInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b7a:	d11c      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b84:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10f      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b96:	2110      	movs	r1, #16
 8001b98:	6938      	ldr	r0, [r7, #16]
 8001b9a:	f003 feb7 	bl	800590c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b9e:	6938      	ldr	r0, [r7, #16]
 8001ba0:	f003 fee8 	bl	8005974 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4618      	mov	r0, r3
 8001bac:	f004 f8be 	bl	8005d2c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f006 fe8b 	bl	80088cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 ffa0 	bl	8005b00 <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bca:	d102      	bne.n	8001bd2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f001 f89e 	bl	8002d0e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 ff92 	bl	8005b00 <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d106      	bne.n	8001bf4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f006 fe54 	bl	8008894 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 ff81 	bl	8005b00 <USB_ReadInterrupts>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	2b10      	cmp	r3, #16
 8001c06:	d101      	bne.n	8001c0c <HAL_HCD_IRQHandler+0x158>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_HCD_IRQHandler+0x15a>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d012      	beq.n	8001c38 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699a      	ldr	r2, [r3, #24]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0210 	bic.w	r2, r2, #16
 8001c20:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 ffa1 	bl	8002b6a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0210 	orr.w	r2, r2, #16
 8001c36:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 ff5f 	bl	8005b00 <USB_ReadInterrupts>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c4c:	d13a      	bne.n	8001cc4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 fb94 	bl	8006380 <USB_HC_ReadInterrupt>
 8001c58:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e025      	b.n	8001cac <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d018      	beq.n	8001ca6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c8a:	d106      	bne.n	8001c9a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8ab 	bl	8001dee <HCD_HC_IN_IRQHandler>
 8001c98:	e005      	b.n	8001ca6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 fbf9 	bl	8002498 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d3d4      	bcc.n	8001c60 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cbe:	615a      	str	r2, [r3, #20]
 8001cc0:	e000      	b.n	8001cc4 <HAL_HCD_IRQHandler+0x210>
      return;
 8001cc2:	bf00      	nop
    }
  }
}
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_HCD_Start+0x16>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e013      	b.n	8001d08 <HAL_HCD_Start+0x3e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2101      	movs	r1, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 f880 	bl	8005df4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 fd98 	bl	800582e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_HCD_Stop+0x16>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e00d      	b.n	8001d42 <HAL_HCD_Stop+0x32>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 fc6e 	bl	8006614 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 f822 	bl	8005da0 <USB_ResetPort>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3360      	adds	r3, #96	; 0x60
 8001d80:	781b      	ldrb	r3, [r3, #0]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	3350      	adds	r3, #80	; 0x50
 8001da8:	681b      	ldr	r3, [r3, #0]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 f866 	bl	8005e94 <USB_GetCurrentFrame>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 f841 	bl	8005e66 <USB_GetHostSpeed>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d11a      	bne.n	8001e54 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	212c      	movs	r1, #44	; 0x2c
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3361      	adds	r3, #97	; 0x61
 8001e3e:	2206      	movs	r2, #6
 8001e40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f004 faa8 	bl	80063a2 <USB_HC_Halt>
 8001e52:	e0af      	b.n	8001fb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6a:	d11b      	bne.n	8001ea4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	212c      	movs	r1, #44	; 0x2c
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3361      	adds	r3, #97	; 0x61
 8001e8e:	2207      	movs	r2, #7
 8001e90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 fa80 	bl	80063a2 <USB_HC_Halt>
 8001ea2:	e087      	b.n	8001fb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	d109      	bne.n	8001ece <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2320      	movs	r3, #32
 8001eca:	6093      	str	r3, [r2, #8]
 8001ecc:	e072      	b.n	8001fb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d11a      	bne.n	8001f1a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	3361      	adds	r3, #97	; 0x61
 8001f04:	2205      	movs	r2, #5
 8001f06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f004 fa45 	bl	80063a2 <USB_HC_Halt>
 8001f18:	e04c      	b.n	8001fb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f30:	d11b      	bne.n	8001f6a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	212c      	movs	r1, #44	; 0x2c
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	3361      	adds	r3, #97	; 0x61
 8001f54:	2208      	movs	r2, #8
 8001f56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 fa1d 	bl	80063a2 <USB_HC_Halt>
 8001f68:	e024      	b.n	8001fb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d119      	bne.n	8001fb4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3361      	adds	r3, #97	; 0x61
 8001fa0:	2206      	movs	r2, #6
 8001fa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 f9f7 	bl	80063a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fca:	d112      	bne.n	8001ff2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f004 f9e3 	bl	80063a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fee:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ff0:	e24e      	b.n	8002490 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	f040 80df 	bne.w	80021c8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d019      	beq.n	8002046 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	3348      	adds	r3, #72	; 0x48
 8002020:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	0159      	lsls	r1, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	440b      	add	r3, r1
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002034:	1ad2      	subs	r2, r2, r3
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	202c      	movs	r0, #44	; 0x2c
 800203c:	fb00 f303 	mul.w	r3, r0, r3
 8002040:	440b      	add	r3, r1
 8002042:	3350      	adds	r3, #80	; 0x50
 8002044:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	212c      	movs	r1, #44	; 0x2c
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	3361      	adds	r3, #97	; 0x61
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	212c      	movs	r1, #44	; 0x2c
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	335c      	adds	r3, #92	; 0x5c
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002076:	461a      	mov	r2, r3
 8002078:	2301      	movs	r3, #1
 800207a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	212c      	movs	r1, #44	; 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	333f      	adds	r3, #63	; 0x3f
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d009      	beq.n	80020a4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	333f      	adds	r3, #63	; 0x3f
 800209e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d111      	bne.n	80020c8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 f977 	bl	80063a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c0:	461a      	mov	r2, r3
 80020c2:	2310      	movs	r3, #16
 80020c4:	6093      	str	r3, [r2, #8]
 80020c6:	e03a      	b.n	800213e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	333f      	adds	r3, #63	; 0x3f
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d009      	beq.n	80020f0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	333f      	adds	r3, #63	; 0x3f
 80020ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d126      	bne.n	800213e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	0151      	lsls	r1, r2, #5
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	440a      	add	r2, r1
 8002106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800210a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800210e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3360      	adds	r3, #96	; 0x60
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	b2d9      	uxtb	r1, r3
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	202c      	movs	r0, #44	; 0x2c
 800212c:	fb00 f303 	mul.w	r3, r0, r3
 8002130:	4413      	add	r3, r2
 8002132:	3360      	adds	r3, #96	; 0x60
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f006 fbd5 	bl	80088e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d12b      	bne.n	800219e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	3348      	adds	r3, #72	; 0x48
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	202c      	movs	r0, #44	; 0x2c
 800215c:	fb00 f202 	mul.w	r2, r0, r2
 8002160:	440a      	add	r2, r1
 8002162:	3240      	adds	r2, #64	; 0x40
 8002164:	8812      	ldrh	r2, [r2, #0]
 8002166:	fbb3 f3f2 	udiv	r3, r3, r2
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 818e 	beq.w	8002490 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3354      	adds	r3, #84	; 0x54
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f083 0301 	eor.w	r3, r3, #1
 8002188:	b2d8      	uxtb	r0, r3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3354      	adds	r3, #84	; 0x54
 8002198:	4602      	mov	r2, r0
 800219a:	701a      	strb	r2, [r3, #0]
}
 800219c:	e178      	b.n	8002490 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3354      	adds	r3, #84	; 0x54
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	f083 0301 	eor.w	r3, r3, #1
 80021b2:	b2d8      	uxtb	r0, r3
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	3354      	adds	r3, #84	; 0x54
 80021c2:	4602      	mov	r2, r0
 80021c4:	701a      	strb	r2, [r3, #0]
}
 80021c6:	e163      	b.n	8002490 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	f040 80f6 	bne.w	80023cc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3361      	adds	r3, #97	; 0x61
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d109      	bne.n	8002208 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3360      	adds	r3, #96	; 0x60
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	e0c9      	b.n	800239c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3361      	adds	r3, #97	; 0x61
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d109      	bne.n	8002230 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3360      	adds	r3, #96	; 0x60
 800222a:	2205      	movs	r2, #5
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e0b5      	b.n	800239c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3361      	adds	r3, #97	; 0x61
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b06      	cmp	r3, #6
 8002242:	d009      	beq.n	8002258 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3361      	adds	r3, #97	; 0x61
 8002252:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002254:	2b08      	cmp	r3, #8
 8002256:	d150      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	335c      	adds	r3, #92	; 0x5c
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	202c      	movs	r0, #44	; 0x2c
 8002270:	fb00 f303 	mul.w	r3, r0, r3
 8002274:	440b      	add	r3, r1
 8002276:	335c      	adds	r3, #92	; 0x5c
 8002278:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	335c      	adds	r3, #92	; 0x5c
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d912      	bls.n	80022b4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	335c      	adds	r3, #92	; 0x5c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3360      	adds	r3, #96	; 0x60
 80022ae:	2204      	movs	r2, #4
 80022b0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022b2:	e073      	b.n	800239c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	212c      	movs	r1, #44	; 0x2c
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	3360      	adds	r3, #96	; 0x60
 80022c2:	2202      	movs	r2, #2
 80022c4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022dc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022e4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	461a      	mov	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022f8:	e050      	b.n	800239c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3361      	adds	r3, #97	; 0x61
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d122      	bne.n	8002354 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3360      	adds	r3, #96	; 0x60
 800231c:	2202      	movs	r2, #2
 800231e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002336:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800233e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234c:	461a      	mov	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e023      	b.n	800239c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3361      	adds	r3, #97	; 0x61
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b07      	cmp	r3, #7
 8002366:	d119      	bne.n	800239c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	335c      	adds	r3, #92	; 0x5c
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	202c      	movs	r0, #44	; 0x2c
 8002380:	fb00 f303 	mul.w	r3, r0, r3
 8002384:	440b      	add	r3, r1
 8002386:	335c      	adds	r3, #92	; 0x5c
 8002388:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	3360      	adds	r3, #96	; 0x60
 8002398:	2204      	movs	r2, #4
 800239a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	461a      	mov	r2, r3
 80023aa:	2302      	movs	r3, #2
 80023ac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	b2d9      	uxtb	r1, r3
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	202c      	movs	r0, #44	; 0x2c
 80023b8:	fb00 f303 	mul.w	r3, r0, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3360      	adds	r3, #96	; 0x60
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f006 fa8f 	bl	80088e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023ca:	e061      	b.n	8002490 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d156      	bne.n	8002490 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	333f      	adds	r3, #63	; 0x3f
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d111      	bne.n	800241a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	335c      	adds	r3, #92	; 0x5c
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f003 ffc5 	bl	80063a2 <USB_HC_Halt>
 8002418:	e031      	b.n	800247e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	333f      	adds	r3, #63	; 0x3f
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	333f      	adds	r3, #63	; 0x3f
 800243c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800243e:	2b02      	cmp	r3, #2
 8002440:	d11d      	bne.n	800247e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	335c      	adds	r3, #92	; 0x5c
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d110      	bne.n	800247e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3361      	adds	r3, #97	; 0x61
 800246a:	2203      	movs	r2, #3
 800246c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f003 ff92 	bl	80063a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	461a      	mov	r2, r3
 800248c:	2310      	movs	r3, #16
 800248e:	6093      	str	r3, [r2, #8]
}
 8002490:	bf00      	nop
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d11a      	bne.n	80024fe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	461a      	mov	r2, r3
 80024d6:	2304      	movs	r3, #4
 80024d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3361      	adds	r3, #97	; 0x61
 80024e8:	2206      	movs	r2, #6
 80024ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 ff53 	bl	80063a2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80024fc:	e331      	b.n	8002b62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b20      	cmp	r3, #32
 8002512:	d12e      	bne.n	8002572 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	2320      	movs	r3, #32
 8002524:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	333d      	adds	r3, #61	; 0x3d
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	f040 8313 	bne.w	8002b62 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	333d      	adds	r3, #61	; 0x3d
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	3360      	adds	r3, #96	; 0x60
 800255c:	2202      	movs	r2, #2
 800255e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f003 ff19 	bl	80063a2 <USB_HC_Halt>
}
 8002570:	e2f7      	b.n	8002b62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002588:	d112      	bne.n	80025b0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	461a      	mov	r2, r3
 8002598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800259c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 fefa 	bl	80063a2 <USB_HC_Halt>
}
 80025ae:	e2d8      	b.n	8002b62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d140      	bne.n	8002648 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	335c      	adds	r3, #92	; 0x5c
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b40      	cmp	r3, #64	; 0x40
 80025ec:	d111      	bne.n	8002612 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	333d      	adds	r3, #61	; 0x3d
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	461a      	mov	r2, r3
 800260e:	2340      	movs	r3, #64	; 0x40
 8002610:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	461a      	mov	r2, r3
 8002620:	2301      	movs	r3, #1
 8002622:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3361      	adds	r3, #97	; 0x61
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f003 feae 	bl	80063a2 <USB_HC_Halt>
}
 8002646:	e28c      	b.n	8002b62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265a:	2b40      	cmp	r3, #64	; 0x40
 800265c:	d12c      	bne.n	80026b8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	3361      	adds	r3, #97	; 0x61
 800266c:	2204      	movs	r2, #4
 800266e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	333d      	adds	r3, #61	; 0x3d
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	335c      	adds	r3, #92	; 0x5c
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fe7f 	bl	80063a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	461a      	mov	r2, r3
 80026b2:	2340      	movs	r3, #64	; 0x40
 80026b4:	6093      	str	r3, [r2, #8]
}
 80026b6:	e254      	b.n	8002b62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d11a      	bne.n	8002704 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026da:	461a      	mov	r2, r3
 80026dc:	2308      	movs	r3, #8
 80026de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	3361      	adds	r3, #97	; 0x61
 80026ee:	2205      	movs	r2, #5
 80026f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f003 fe50 	bl	80063a2 <USB_HC_Halt>
}
 8002702:	e22e      	b.n	8002b62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b10      	cmp	r3, #16
 8002718:	d140      	bne.n	800279c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	335c      	adds	r3, #92	; 0x5c
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3361      	adds	r3, #97	; 0x61
 800273a:	2203      	movs	r2, #3
 800273c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	333d      	adds	r3, #61	; 0x3d
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d112      	bne.n	8002778 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	333c      	adds	r3, #60	; 0x3c
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d108      	bne.n	8002778 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	333d      	adds	r3, #61	; 0x3d
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fe0d 	bl	80063a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	461a      	mov	r2, r3
 8002796:	2310      	movs	r3, #16
 8002798:	6093      	str	r3, [r2, #8]
}
 800279a:	e1e2      	b.n	8002b62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	2b80      	cmp	r3, #128	; 0x80
 80027b0:	d164      	bne.n	800287c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d111      	bne.n	80027de <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3361      	adds	r3, #97	; 0x61
 80027c8:	2206      	movs	r2, #6
 80027ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 fde3 	bl	80063a2 <USB_HC_Halt>
 80027dc:	e044      	b.n	8002868 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	335c      	adds	r3, #92	; 0x5c
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	202c      	movs	r0, #44	; 0x2c
 80027f6:	fb00 f303 	mul.w	r3, r0, r3
 80027fa:	440b      	add	r3, r1
 80027fc:	335c      	adds	r3, #92	; 0x5c
 80027fe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	335c      	adds	r3, #92	; 0x5c
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d920      	bls.n	8002856 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	335c      	adds	r3, #92	; 0x5c
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3360      	adds	r3, #96	; 0x60
 8002834:	2204      	movs	r2, #4
 8002836:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	b2d9      	uxtb	r1, r3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	202c      	movs	r0, #44	; 0x2c
 8002842:	fb00 f303 	mul.w	r3, r0, r3
 8002846:	4413      	add	r3, r2
 8002848:	3360      	adds	r3, #96	; 0x60
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f006 f84a 	bl	80088e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002854:	e008      	b.n	8002868 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3360      	adds	r3, #96	; 0x60
 8002864:	2202      	movs	r2, #2
 8002866:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	461a      	mov	r2, r3
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	6093      	str	r3, [r2, #8]
}
 800287a:	e172      	b.n	8002b62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002892:	d11b      	bne.n	80028cc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3361      	adds	r3, #97	; 0x61
 80028a2:	2208      	movs	r2, #8
 80028a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fd76 	bl	80063a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	461a      	mov	r2, r3
 80028c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c8:	6093      	str	r3, [r2, #8]
}
 80028ca:	e14a      	b.n	8002b62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b02      	cmp	r3, #2
 80028e0:	f040 813f 	bne.w	8002b62 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	3361      	adds	r3, #97	; 0x61
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d17d      	bne.n	80029f4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3360      	adds	r3, #96	; 0x60
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	333f      	adds	r3, #63	; 0x3f
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d00a      	beq.n	8002934 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	212c      	movs	r1, #44	; 0x2c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	333f      	adds	r3, #63	; 0x3f
 800292c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800292e:	2b03      	cmp	r3, #3
 8002930:	f040 8100 	bne.w	8002b34 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d113      	bne.n	8002964 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3355      	adds	r3, #85	; 0x55
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f083 0301 	eor.w	r3, r3, #1
 8002950:	b2d8      	uxtb	r0, r3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3355      	adds	r3, #85	; 0x55
 8002960:	4602      	mov	r2, r0
 8002962:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b01      	cmp	r3, #1
 800296a:	f040 80e3 	bne.w	8002b34 <HCD_HC_OUT_IRQHandler+0x69c>
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	334c      	adds	r3, #76	; 0x4c
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80d8 	beq.w	8002b34 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	334c      	adds	r3, #76	; 0x4c
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	202c      	movs	r0, #44	; 0x2c
 800299a:	fb00 f202 	mul.w	r2, r0, r2
 800299e:	440a      	add	r2, r1
 80029a0:	3240      	adds	r2, #64	; 0x40
 80029a2:	8812      	ldrh	r2, [r2, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	3b01      	subs	r3, #1
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	202c      	movs	r0, #44	; 0x2c
 80029ae:	fb00 f202 	mul.w	r2, r0, r2
 80029b2:	440a      	add	r2, r1
 80029b4:	3240      	adds	r2, #64	; 0x40
 80029b6:	8812      	ldrh	r2, [r2, #0]
 80029b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80b5 	beq.w	8002b34 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3355      	adds	r3, #85	; 0x55
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	f083 0301 	eor.w	r3, r3, #1
 80029de:	b2d8      	uxtb	r0, r3
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3355      	adds	r3, #85	; 0x55
 80029ee:	4602      	mov	r2, r0
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e09f      	b.n	8002b34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3361      	adds	r3, #97	; 0x61
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d109      	bne.n	8002a1c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3360      	adds	r3, #96	; 0x60
 8002a16:	2202      	movs	r2, #2
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e08b      	b.n	8002b34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3361      	adds	r3, #97	; 0x61
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d109      	bne.n	8002a44 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3360      	adds	r3, #96	; 0x60
 8002a3e:	2202      	movs	r2, #2
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e077      	b.n	8002b34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3361      	adds	r3, #97	; 0x61
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d109      	bne.n	8002a6c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3360      	adds	r3, #96	; 0x60
 8002a66:	2205      	movs	r2, #5
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e063      	b.n	8002b34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3361      	adds	r3, #97	; 0x61
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	d009      	beq.n	8002a94 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3361      	adds	r3, #97	; 0x61
 8002a8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d14f      	bne.n	8002b34 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	335c      	adds	r3, #92	; 0x5c
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	202c      	movs	r0, #44	; 0x2c
 8002aac:	fb00 f303 	mul.w	r3, r0, r3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	335c      	adds	r3, #92	; 0x5c
 8002ab4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	335c      	adds	r3, #92	; 0x5c
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d912      	bls.n	8002af0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	335c      	adds	r3, #92	; 0x5c
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3360      	adds	r3, #96	; 0x60
 8002aea:	2204      	movs	r2, #4
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e021      	b.n	8002b34 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3360      	adds	r3, #96	; 0x60
 8002afe:	2202      	movs	r2, #2
 8002b00:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b18:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b20:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	461a      	mov	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	2302      	movs	r3, #2
 8002b44:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	b2d9      	uxtb	r1, r3
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	202c      	movs	r0, #44	; 0x2c
 8002b50:	fb00 f303 	mul.w	r3, r0, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3360      	adds	r3, #96	; 0x60
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f005 fec3 	bl	80088e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b62:	bf00      	nop
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b08a      	sub	sp, #40	; 0x28
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	0c5b      	lsrs	r3, r3, #17
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b9e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d004      	beq.n	8002bb0 <HCD_RXQLVL_IRQHandler+0x46>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	f000 80a9 	beq.w	8002d00 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bae:	e0aa      	b.n	8002d06 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80a6 	beq.w	8002d04 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3344      	adds	r3, #68	; 0x44
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 809b 	beq.w	8002d04 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3350      	adds	r3, #80	; 0x50
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	441a      	add	r2, r3
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	202c      	movs	r0, #44	; 0x2c
 8002be8:	fb00 f303 	mul.w	r3, r0, r3
 8002bec:	440b      	add	r3, r1
 8002bee:	334c      	adds	r3, #76	; 0x4c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d87a      	bhi.n	8002cec <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3344      	adds	r3, #68	; 0x44
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	b292      	uxth	r2, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f002 ff1e 	bl	8005a50 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3344      	adds	r3, #68	; 0x44
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	441a      	add	r2, r3
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	202c      	movs	r0, #44	; 0x2c
 8002c2e:	fb00 f303 	mul.w	r3, r0, r3
 8002c32:	440b      	add	r3, r1
 8002c34:	3344      	adds	r3, #68	; 0x44
 8002c36:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3350      	adds	r3, #80	; 0x50
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	441a      	add	r2, r3
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	202c      	movs	r0, #44	; 0x2c
 8002c52:	fb00 f303 	mul.w	r3, r0, r3
 8002c56:	440b      	add	r3, r1
 8002c58:	3350      	adds	r3, #80	; 0x50
 8002c5a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	0cdb      	lsrs	r3, r3, #19
 8002c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c70:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3340      	adds	r3, #64	; 0x40
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d13c      	bne.n	8002d04 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d039      	beq.n	8002d04 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ca6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cae:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3354      	adds	r3, #84	; 0x54
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	f083 0301 	eor.w	r3, r3, #1
 8002cd6:	b2d8      	uxtb	r0, r3
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3354      	adds	r3, #84	; 0x54
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	701a      	strb	r2, [r3, #0]
      break;
 8002cea:	e00b      	b.n	8002d04 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3360      	adds	r3, #96	; 0x60
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	701a      	strb	r2, [r3, #0]
      break;
 8002cfe:	e001      	b.n	8002d04 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d00:	bf00      	nop
 8002d02:	e000      	b.n	8002d06 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d04:	bf00      	nop
  }
}
 8002d06:	bf00      	nop
 8002d08:	3728      	adds	r7, #40	; 0x28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d3a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d10b      	bne.n	8002d5e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d102      	bne.n	8002d56 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f005 fdad 	bl	80088b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f043 0302 	orr.w	r3, r3, #2
 8002d5c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d132      	bne.n	8002dce <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f043 0308 	orr.w	r3, r3, #8
 8002d6e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d126      	bne.n	8002dc8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d113      	bne.n	8002daa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d8c:	d106      	bne.n	8002d9c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2102      	movs	r1, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 ffc9 	bl	8005d2c <USB_InitFSLSPClkSel>
 8002d9a:	e011      	b.n	8002dc0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	4618      	mov	r0, r3
 8002da4:	f002 ffc2 	bl	8005d2c <USB_InitFSLSPClkSel>
 8002da8:	e00a      	b.n	8002dc0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d106      	bne.n	8002dc0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db8:	461a      	mov	r2, r3
 8002dba:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002dbe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f005 fd9f 	bl	8008904 <HAL_HCD_PortEnabled_Callback>
 8002dc6:	e002      	b.n	8002dce <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f005 fda9 	bl	8008920 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d103      	bne.n	8002de0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f043 0320 	orr.w	r3, r3, #32
 8002dde:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	bf00      	nop
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e12b      	b.n	800305e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd fde0 	bl	80009e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	; 0x24
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e58:	f001 fa20 	bl	800429c <HAL_RCC_GetPCLK1Freq>
 8002e5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4a81      	ldr	r2, [pc, #516]	; (8003068 <HAL_I2C_Init+0x274>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d807      	bhi.n	8002e78 <HAL_I2C_Init+0x84>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a80      	ldr	r2, [pc, #512]	; (800306c <HAL_I2C_Init+0x278>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	bf94      	ite	ls
 8002e70:	2301      	movls	r3, #1
 8002e72:	2300      	movhi	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e006      	b.n	8002e86 <HAL_I2C_Init+0x92>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a7d      	ldr	r2, [pc, #500]	; (8003070 <HAL_I2C_Init+0x27c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bf94      	ite	ls
 8002e80:	2301      	movls	r3, #1
 8002e82:	2300      	movhi	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0e7      	b.n	800305e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a78      	ldr	r2, [pc, #480]	; (8003074 <HAL_I2C_Init+0x280>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0c9b      	lsrs	r3, r3, #18
 8002e98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a6a      	ldr	r2, [pc, #424]	; (8003068 <HAL_I2C_Init+0x274>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d802      	bhi.n	8002ec8 <HAL_I2C_Init+0xd4>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	e009      	b.n	8002edc <HAL_I2C_Init+0xe8>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	4a69      	ldr	r2, [pc, #420]	; (8003078 <HAL_I2C_Init+0x284>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	3301      	adds	r3, #1
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	495c      	ldr	r1, [pc, #368]	; (8003068 <HAL_I2C_Init+0x274>)
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	d819      	bhi.n	8002f30 <HAL_I2C_Init+0x13c>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e59      	subs	r1, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f0a:	1c59      	adds	r1, r3, #1
 8002f0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f10:	400b      	ands	r3, r1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_I2C_Init+0x138>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1e59      	subs	r1, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2a:	e051      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	e04f      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d111      	bne.n	8002f5c <HAL_I2C_Init+0x168>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e58      	subs	r0, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	440b      	add	r3, r1
 8002f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e012      	b.n	8002f82 <HAL_I2C_Init+0x18e>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	0099      	lsls	r1, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_Init+0x196>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e022      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10e      	bne.n	8002fb0 <HAL_I2C_Init+0x1bc>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1e58      	subs	r0, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	440b      	add	r3, r1
 8002fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fae:	e00f      	b.n	8002fd0 <HAL_I2C_Init+0x1dc>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	0099      	lsls	r1, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	6809      	ldr	r1, [r1, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ffe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6911      	ldr	r1, [r2, #16]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68d2      	ldr	r2, [r2, #12]
 800300a:	4311      	orrs	r1, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	430b      	orrs	r3, r1
 8003012:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	000186a0 	.word	0x000186a0
 800306c:	001e847f 	.word	0x001e847f
 8003070:	003d08ff 	.word	0x003d08ff
 8003074:	431bde83 	.word	0x431bde83
 8003078:	10624dd3 	.word	0x10624dd3

0800307c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e128      	b.n	80032e0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a90      	ldr	r2, [pc, #576]	; (80032e8 <HAL_I2S_Init+0x26c>)
 80030a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fd fce1 	bl	8000a70 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030c4:	f023 030f 	bic.w	r3, r3, #15
 80030c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2202      	movs	r2, #2
 80030d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d060      	beq.n	800319c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030e2:	2310      	movs	r3, #16
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e001      	b.n	80030ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030e8:	2320      	movs	r3, #32
 80030ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d802      	bhi.n	80030fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030fa:	2001      	movs	r0, #1
 80030fc:	f001 f9d8 	bl	80044b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003100:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310a:	d125      	bne.n	8003158 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d010      	beq.n	8003136 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	fbb2 f2f3 	udiv	r2, r2, r3
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	461a      	mov	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	3305      	adds	r3, #5
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	e01f      	b.n	8003176 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	461a      	mov	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	3305      	adds	r3, #5
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e00e      	b.n	8003176 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	3305      	adds	r3, #5
 8003174:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4a5c      	ldr	r2, [pc, #368]	; (80032ec <HAL_I2S_Init+0x270>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	08db      	lsrs	r3, r3, #3
 8003180:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e003      	b.n	80031a4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800319c:	2302      	movs	r3, #2
 800319e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d902      	bls.n	80031b0 <HAL_I2S_Init+0x134>
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	2bff      	cmp	r3, #255	; 0xff
 80031ae:	d907      	bls.n	80031c0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	f043 0210 	orr.w	r2, r3, #16
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e08f      	b.n	80032e0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	ea42 0103 	orr.w	r1, r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031de:	f023 030f 	bic.w	r3, r3, #15
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6851      	ldr	r1, [r2, #4]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6892      	ldr	r2, [r2, #8]
 80031ea:	4311      	orrs	r1, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68d2      	ldr	r2, [r2, #12]
 80031f0:	4311      	orrs	r1, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6992      	ldr	r2, [r2, #24]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003202:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d161      	bne.n	80032d0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a38      	ldr	r2, [pc, #224]	; (80032f0 <HAL_I2S_Init+0x274>)
 8003210:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a37      	ldr	r2, [pc, #220]	; (80032f4 <HAL_I2S_Init+0x278>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_I2S_Init+0x1a4>
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <HAL_I2S_Init+0x27c>)
 800321e:	e001      	b.n	8003224 <HAL_I2S_Init+0x1a8>
 8003220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	4932      	ldr	r1, [pc, #200]	; (80032f4 <HAL_I2S_Init+0x278>)
 800322c:	428a      	cmp	r2, r1
 800322e:	d101      	bne.n	8003234 <HAL_I2S_Init+0x1b8>
 8003230:	4a31      	ldr	r2, [pc, #196]	; (80032f8 <HAL_I2S_Init+0x27c>)
 8003232:	e001      	b.n	8003238 <HAL_I2S_Init+0x1bc>
 8003234:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003238:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800323c:	f023 030f 	bic.w	r3, r3, #15
 8003240:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2b      	ldr	r2, [pc, #172]	; (80032f4 <HAL_I2S_Init+0x278>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <HAL_I2S_Init+0x1d4>
 800324c:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <HAL_I2S_Init+0x27c>)
 800324e:	e001      	b.n	8003254 <HAL_I2S_Init+0x1d8>
 8003250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003254:	2202      	movs	r2, #2
 8003256:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <HAL_I2S_Init+0x278>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_I2S_Init+0x1ea>
 8003262:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_I2S_Init+0x27c>)
 8003264:	e001      	b.n	800326a <HAL_I2S_Init+0x1ee>
 8003266:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003276:	d003      	beq.n	8003280 <HAL_I2S_Init+0x204>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	e001      	b.n	800328c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003296:	4313      	orrs	r3, r2
 8003298:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032a0:	4313      	orrs	r3, r2
 80032a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032aa:	4313      	orrs	r3, r2
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032b8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <HAL_I2S_Init+0x278>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d101      	bne.n	80032c8 <HAL_I2S_Init+0x24c>
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_I2S_Init+0x27c>)
 80032c6:	e001      	b.n	80032cc <HAL_I2S_Init+0x250>
 80032c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032cc:	897a      	ldrh	r2, [r7, #10]
 80032ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	080033f3 	.word	0x080033f3
 80032ec:	cccccccd 	.word	0xcccccccd
 80032f0:	08003509 	.word	0x08003509
 80032f4:	40003800 	.word	0x40003800
 80032f8:	40003400 	.word	0x40003400

080032fc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	881a      	ldrh	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	1c9a      	adds	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10e      	bne.n	800338c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800337c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff ffb8 	bl	80032fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	b292      	uxth	r2, r2
 80033a8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	1c9a      	adds	r2, r3, #2
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10e      	bne.n	80033ea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff93 	bl	8003310 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b04      	cmp	r3, #4
 800340c:	d13a      	bne.n	8003484 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d109      	bne.n	800342c <I2S_IRQHandler+0x3a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b40      	cmp	r3, #64	; 0x40
 8003424:	d102      	bne.n	800342c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ffb4 	bl	8003394 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d126      	bne.n	8003484 <I2S_IRQHandler+0x92>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b20      	cmp	r3, #32
 8003442:	d11f      	bne.n	8003484 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003452:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003454:	2300      	movs	r3, #0
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	f043 0202 	orr.w	r2, r3, #2
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff ff50 	bl	8003324 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b03      	cmp	r3, #3
 800348e:	d136      	bne.n	80034fe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b02      	cmp	r3, #2
 8003498:	d109      	bne.n	80034ae <I2S_IRQHandler+0xbc>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d102      	bne.n	80034ae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff45 	bl	8003338 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d122      	bne.n	80034fe <I2S_IRQHandler+0x10c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d11b      	bne.n	80034fe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034d4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	f043 0204 	orr.w	r2, r3, #4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff ff13 	bl	8003324 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a92      	ldr	r2, [pc, #584]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003522:	4b92      	ldr	r3, [pc, #584]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003524:	e001      	b.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003526:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a8b      	ldr	r2, [pc, #556]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d101      	bne.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003540:	4b8a      	ldr	r3, [pc, #552]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003542:	e001      	b.n	8003548 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003554:	d004      	beq.n	8003560 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 8099 	bne.w	8003692 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b02      	cmp	r3, #2
 8003568:	d107      	bne.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f925 	bl	80037c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d107      	bne.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9c8 	bl	8003924 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d13a      	bne.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d035      	beq.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6e      	ldr	r2, [pc, #440]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035b2:	4b6e      	ldr	r3, [pc, #440]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035b4:	e001      	b.n	80035ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4969      	ldr	r1, [pc, #420]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035c2:	428b      	cmp	r3, r1
 80035c4:	d101      	bne.n	80035ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80035c6:	4b69      	ldr	r3, [pc, #420]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035c8:	e001      	b.n	80035ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f043 0202 	orr.w	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff fe88 	bl	8003324 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b08      	cmp	r3, #8
 800361c:	f040 80c3 	bne.w	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80bd 	beq.w	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800363a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a49      	ldr	r2, [pc, #292]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003646:	4b49      	ldr	r3, [pc, #292]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003648:	e001      	b.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4944      	ldr	r1, [pc, #272]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003656:	428b      	cmp	r3, r1
 8003658:	d101      	bne.n	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800365a:	4b44      	ldr	r3, [pc, #272]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800365c:	e001      	b.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800365e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003666:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003668:	2300      	movs	r3, #0
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff fe4a 	bl	8003324 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003690:	e089      	b.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b02      	cmp	r3, #2
 800369a:	d107      	bne.n	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8be 	bl	8003828 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8fd 	bl	80038c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	d12f      	bne.n	8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d02a      	beq.n	8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036f4:	4b1d      	ldr	r3, [pc, #116]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f6:	e001      	b.n	80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80036f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4919      	ldr	r1, [pc, #100]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003704:	428b      	cmp	r3, r1
 8003706:	d101      	bne.n	800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003708:	4b18      	ldr	r3, [pc, #96]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800370a:	e001      	b.n	8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800370c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003714:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff fdfa 	bl	8003324 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b08      	cmp	r3, #8
 8003738:	d136      	bne.n	80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d031      	beq.n	80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003750:	e001      	b.n	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003752:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4902      	ldr	r1, [pc, #8]	; (8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800375e:	428b      	cmp	r3, r1
 8003760:	d106      	bne.n	8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003762:	4b02      	ldr	r3, [pc, #8]	; (800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003764:	e006      	b.n	8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003766:	bf00      	nop
 8003768:	40003800 	.word	0x40003800
 800376c:	40003400 	.word	0x40003400
 8003770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003774:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003778:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003788:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f043 0204 	orr.w	r2, r3, #4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fdc0 	bl	8003324 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037a4:	e000      	b.n	80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037a6:	bf00      	nop
}
 80037a8:	bf00      	nop
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	1c99      	adds	r1, r3, #2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6251      	str	r1, [r2, #36]	; 0x24
 80037d6:	881a      	ldrh	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d113      	bne.n	800381e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003804:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ffc9 	bl	80037b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	1c99      	adds	r1, r3, #2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6251      	str	r1, [r2, #36]	; 0x24
 800383a:	8819      	ldrh	r1, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <I2SEx_TxISR_I2SExt+0x22>
 8003846:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <I2SEx_TxISR_I2SExt+0x94>)
 8003848:	e001      	b.n	800384e <I2SEx_TxISR_I2SExt+0x26>
 800384a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800384e:	460a      	mov	r2, r1
 8003850:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d121      	bne.n	80038ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d101      	bne.n	8003878 <I2SEx_TxISR_I2SExt+0x50>
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <I2SEx_TxISR_I2SExt+0x94>)
 8003876:	e001      	b.n	800387c <I2SEx_TxISR_I2SExt+0x54>
 8003878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	490d      	ldr	r1, [pc, #52]	; (80038b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003884:	428b      	cmp	r3, r1
 8003886:	d101      	bne.n	800388c <I2SEx_TxISR_I2SExt+0x64>
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <I2SEx_TxISR_I2SExt+0x94>)
 800388a:	e001      	b.n	8003890 <I2SEx_TxISR_I2SExt+0x68>
 800388c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003890:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003894:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff ff81 	bl	80037b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40003800 	.word	0x40003800
 80038bc:	40003400 	.word	0x40003400

080038c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68d8      	ldr	r0, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	1c99      	adds	r1, r3, #2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038d8:	b282      	uxth	r2, r0
 80038da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d113      	bne.n	800391c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003902:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ff4a 	bl	80037b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a20      	ldr	r2, [pc, #128]	; (80039b4 <I2SEx_RxISR_I2SExt+0x90>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <I2SEx_RxISR_I2SExt+0x16>
 8003936:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <I2SEx_RxISR_I2SExt+0x94>)
 8003938:	e001      	b.n	800393e <I2SEx_RxISR_I2SExt+0x1a>
 800393a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393e:	68d8      	ldr	r0, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	1c99      	adds	r1, r3, #2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	62d1      	str	r1, [r2, #44]	; 0x2c
 800394a:	b282      	uxth	r2, r0
 800394c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d121      	bne.n	80039aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <I2SEx_RxISR_I2SExt+0x90>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <I2SEx_RxISR_I2SExt+0x50>
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <I2SEx_RxISR_I2SExt+0x94>)
 8003972:	e001      	b.n	8003978 <I2SEx_RxISR_I2SExt+0x54>
 8003974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	490d      	ldr	r1, [pc, #52]	; (80039b4 <I2SEx_RxISR_I2SExt+0x90>)
 8003980:	428b      	cmp	r3, r1
 8003982:	d101      	bne.n	8003988 <I2SEx_RxISR_I2SExt+0x64>
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <I2SEx_RxISR_I2SExt+0x94>)
 8003986:	e001      	b.n	800398c <I2SEx_RxISR_I2SExt+0x68>
 8003988:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800398c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003990:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff03 	bl	80037b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40003800 	.word	0x40003800
 80039b8:	40003400 	.word	0x40003400

080039bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e267      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d075      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039da:	4b88      	ldr	r3, [pc, #544]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d00c      	beq.n	8003a00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e6:	4b85      	ldr	r3, [pc, #532]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d112      	bne.n	8003a18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f2:	4b82      	ldr	r3, [pc, #520]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fe:	d10b      	bne.n	8003a18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	4b7e      	ldr	r3, [pc, #504]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d05b      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x108>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d157      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e242      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a20:	d106      	bne.n	8003a30 <HAL_RCC_OscConfig+0x74>
 8003a22:	4b76      	ldr	r3, [pc, #472]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a75      	ldr	r2, [pc, #468]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e01d      	b.n	8003a6c <HAL_RCC_OscConfig+0xb0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x98>
 8003a3a:	4b70      	ldr	r3, [pc, #448]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6f      	ldr	r2, [pc, #444]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b6d      	ldr	r3, [pc, #436]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a6c      	ldr	r2, [pc, #432]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e00b      	b.n	8003a6c <HAL_RCC_OscConfig+0xb0>
 8003a54:	4b69      	ldr	r3, [pc, #420]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a68      	ldr	r2, [pc, #416]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b66      	ldr	r3, [pc, #408]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a65      	ldr	r2, [pc, #404]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fd fa2a 	bl	8000ecc <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fd fa26 	bl	8000ecc <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e207      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b5b      	ldr	r3, [pc, #364]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0xc0>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fd fa16 	bl	8000ecc <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fd fa12 	bl	8000ecc <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e1f3      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab6:	4b51      	ldr	r3, [pc, #324]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0xe8>
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d063      	beq.n	8003b9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ad2:	4b4a      	ldr	r3, [pc, #296]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ade:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d11c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aea:	4b44      	ldr	r3, [pc, #272]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d116      	bne.n	8003b24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af6:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_RCC_OscConfig+0x152>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d001      	beq.n	8003b0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e1c7      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0e:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4937      	ldr	r1, [pc, #220]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b22:	e03a      	b.n	8003b9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d020      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b2c:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <HAL_RCC_OscConfig+0x244>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b32:	f7fd f9cb 	bl	8000ecc <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b3a:	f7fd f9c7 	bl	8000ecc <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e1a8      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4925      	ldr	r1, [pc, #148]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]
 8003b6c:	e015      	b.n	8003b9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6e:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCC_OscConfig+0x244>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fd f9aa 	bl	8000ecc <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b7c:	f7fd f9a6 	bl	8000ecc <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e187      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8e:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d036      	beq.n	8003c14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bae:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <HAL_RCC_OscConfig+0x248>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fd f98a 	bl	8000ecc <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fd f986 	bl	8000ecc <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e167      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_OscConfig+0x240>)
 8003bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x200>
 8003bda:	e01b      	b.n	8003c14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_OscConfig+0x248>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be2:	f7fd f973 	bl	8000ecc <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be8:	e00e      	b.n	8003c08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bea:	f7fd f96f 	bl	8000ecc <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d907      	bls.n	8003c08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e150      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	42470000 	.word	0x42470000
 8003c04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c08:	4b88      	ldr	r3, [pc, #544]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ea      	bne.n	8003bea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8097 	beq.w	8003d50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c22:	2300      	movs	r3, #0
 8003c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c26:	4b81      	ldr	r3, [pc, #516]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10f      	bne.n	8003c52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	4b7d      	ldr	r3, [pc, #500]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4a7c      	ldr	r2, [pc, #496]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c40:	6413      	str	r3, [r2, #64]	; 0x40
 8003c42:	4b7a      	ldr	r3, [pc, #488]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c52:	4b77      	ldr	r3, [pc, #476]	; (8003e30 <HAL_RCC_OscConfig+0x474>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d118      	bne.n	8003c90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5e:	4b74      	ldr	r3, [pc, #464]	; (8003e30 <HAL_RCC_OscConfig+0x474>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a73      	ldr	r2, [pc, #460]	; (8003e30 <HAL_RCC_OscConfig+0x474>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd f92f 	bl	8000ecc <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c72:	f7fd f92b 	bl	8000ecc <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e10c      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c84:	4b6a      	ldr	r3, [pc, #424]	; (8003e30 <HAL_RCC_OscConfig+0x474>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x2ea>
 8003c98:	4b64      	ldr	r3, [pc, #400]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	4a63      	ldr	r2, [pc, #396]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca4:	e01c      	b.n	8003ce0 <HAL_RCC_OscConfig+0x324>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x30c>
 8003cae:	4b5f      	ldr	r3, [pc, #380]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	4a5e      	ldr	r2, [pc, #376]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003cb4:	f043 0304 	orr.w	r3, r3, #4
 8003cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cba:	4b5c      	ldr	r3, [pc, #368]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	4a5b      	ldr	r2, [pc, #364]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_OscConfig+0x324>
 8003cc8:	4b58      	ldr	r3, [pc, #352]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	4a57      	ldr	r2, [pc, #348]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd4:	4b55      	ldr	r3, [pc, #340]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	4a54      	ldr	r2, [pc, #336]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003cda:	f023 0304 	bic.w	r3, r3, #4
 8003cde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d015      	beq.n	8003d14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fd f8f0 	bl	8000ecc <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf0:	f7fd f8ec 	bl	8000ecc <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0cb      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d06:	4b49      	ldr	r3, [pc, #292]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0ee      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x334>
 8003d12:	e014      	b.n	8003d3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d14:	f7fd f8da 	bl	8000ecc <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1c:	f7fd f8d6 	bl	8000ecc <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e0b5      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d32:	4b3e      	ldr	r3, [pc, #248]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1ee      	bne.n	8003d1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d105      	bne.n	8003d50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d44:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	4a38      	ldr	r2, [pc, #224]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a1 	beq.w	8003e9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d5a:	4b34      	ldr	r3, [pc, #208]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d05c      	beq.n	8003e20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d141      	bne.n	8003df2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_RCC_OscConfig+0x478>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d74:	f7fd f8aa 	bl	8000ecc <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7c:	f7fd f8a6 	bl	8000ecc <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e087      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8e:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	019b      	lsls	r3, r3, #6
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	3b01      	subs	r3, #1
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	491b      	ldr	r1, [pc, #108]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_RCC_OscConfig+0x478>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fd f87f 	bl	8000ecc <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fd f87b 	bl	8000ecc <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e05c      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x416>
 8003df0:	e054      	b.n	8003e9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <HAL_RCC_OscConfig+0x478>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd f868 	bl	8000ecc <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fd f864 	bl	8000ecc <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e045      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCC_OscConfig+0x470>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x444>
 8003e1e:	e03d      	b.n	8003e9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e038      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40007000 	.word	0x40007000
 8003e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e38:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <HAL_RCC_OscConfig+0x4ec>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d028      	beq.n	8003e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d121      	bne.n	8003e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d11a      	bne.n	8003e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d111      	bne.n	8003e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	3b01      	subs	r3, #1
 8003e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d107      	bne.n	8003e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800

08003eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0cc      	b.n	800405a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec0:	4b68      	ldr	r3, [pc, #416]	; (8004064 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d90c      	bls.n	8003ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ece:	4b65      	ldr	r3, [pc, #404]	; (8004064 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed6:	4b63      	ldr	r3, [pc, #396]	; (8004064 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0b8      	b.n	800405a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d020      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f00:	4b59      	ldr	r3, [pc, #356]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a58      	ldr	r2, [pc, #352]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f18:	4b53      	ldr	r3, [pc, #332]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4a52      	ldr	r2, [pc, #328]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f24:	4b50      	ldr	r3, [pc, #320]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	494d      	ldr	r1, [pc, #308]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d044      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d107      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4a:	4b47      	ldr	r3, [pc, #284]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d119      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e07f      	b.n	800405a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d003      	beq.n	8003f6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d107      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6a:	4b3f      	ldr	r3, [pc, #252]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e06f      	b.n	800405a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7a:	4b3b      	ldr	r3, [pc, #236]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e067      	b.n	800405a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f8a:	4b37      	ldr	r3, [pc, #220]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f023 0203 	bic.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4934      	ldr	r1, [pc, #208]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f9c:	f7fc ff96 	bl	8000ecc <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	e00a      	b.n	8003fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa4:	f7fc ff92 	bl	8000ecc <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e04f      	b.n	800405a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 020c 	and.w	r2, r3, #12
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d1eb      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b25      	ldr	r3, [pc, #148]	; (8004064 <HAL_RCC_ClockConfig+0x1b8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d20c      	bcs.n	8003ff4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b22      	ldr	r3, [pc, #136]	; (8004064 <HAL_RCC_ClockConfig+0x1b8>)
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b20      	ldr	r3, [pc, #128]	; (8004064 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e032      	b.n	800405a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4916      	ldr	r1, [pc, #88]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	490e      	ldr	r1, [pc, #56]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	4313      	orrs	r3, r2
 8004030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004032:	f000 f821 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8004036:	4602      	mov	r2, r0
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	490a      	ldr	r1, [pc, #40]	; (800406c <HAL_RCC_ClockConfig+0x1c0>)
 8004044:	5ccb      	ldrb	r3, [r1, r3]
 8004046:	fa22 f303 	lsr.w	r3, r2, r3
 800404a:	4a09      	ldr	r2, [pc, #36]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7fc fef6 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40023c00 	.word	0x40023c00
 8004068:	40023800 	.word	0x40023800
 800406c:	08008fc0 	.word	0x08008fc0
 8004070:	20000000 	.word	0x20000000
 8004074:	20000004 	.word	0x20000004

08004078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800407c:	b094      	sub	sp, #80	; 0x50
 800407e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	647b      	str	r3, [r7, #68]	; 0x44
 8004084:	2300      	movs	r3, #0
 8004086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004088:	2300      	movs	r3, #0
 800408a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004090:	4b79      	ldr	r3, [pc, #484]	; (8004278 <HAL_RCC_GetSysClockFreq+0x200>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b08      	cmp	r3, #8
 800409a:	d00d      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x40>
 800409c:	2b08      	cmp	r3, #8
 800409e:	f200 80e1 	bhi.w	8004264 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x34>
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d003      	beq.n	80040b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040aa:	e0db      	b.n	8004264 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040ac:	4b73      	ldr	r3, [pc, #460]	; (800427c <HAL_RCC_GetSysClockFreq+0x204>)
 80040ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040b0:	e0db      	b.n	800426a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040b2:	4b73      	ldr	r3, [pc, #460]	; (8004280 <HAL_RCC_GetSysClockFreq+0x208>)
 80040b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040b6:	e0d8      	b.n	800426a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b8:	4b6f      	ldr	r3, [pc, #444]	; (8004278 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040c2:	4b6d      	ldr	r3, [pc, #436]	; (8004278 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d063      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ce:	4b6a      	ldr	r3, [pc, #424]	; (8004278 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	099b      	lsrs	r3, r3, #6
 80040d4:	2200      	movs	r2, #0
 80040d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e0:	633b      	str	r3, [r7, #48]	; 0x30
 80040e2:	2300      	movs	r3, #0
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
 80040e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040ea:	4622      	mov	r2, r4
 80040ec:	462b      	mov	r3, r5
 80040ee:	f04f 0000 	mov.w	r0, #0
 80040f2:	f04f 0100 	mov.w	r1, #0
 80040f6:	0159      	lsls	r1, r3, #5
 80040f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040fc:	0150      	lsls	r0, r2, #5
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4621      	mov	r1, r4
 8004104:	1a51      	subs	r1, r2, r1
 8004106:	6139      	str	r1, [r7, #16]
 8004108:	4629      	mov	r1, r5
 800410a:	eb63 0301 	sbc.w	r3, r3, r1
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800411c:	4659      	mov	r1, fp
 800411e:	018b      	lsls	r3, r1, #6
 8004120:	4651      	mov	r1, sl
 8004122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004126:	4651      	mov	r1, sl
 8004128:	018a      	lsls	r2, r1, #6
 800412a:	4651      	mov	r1, sl
 800412c:	ebb2 0801 	subs.w	r8, r2, r1
 8004130:	4659      	mov	r1, fp
 8004132:	eb63 0901 	sbc.w	r9, r3, r1
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800414a:	4690      	mov	r8, r2
 800414c:	4699      	mov	r9, r3
 800414e:	4623      	mov	r3, r4
 8004150:	eb18 0303 	adds.w	r3, r8, r3
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	462b      	mov	r3, r5
 8004158:	eb49 0303 	adc.w	r3, r9, r3
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800416a:	4629      	mov	r1, r5
 800416c:	024b      	lsls	r3, r1, #9
 800416e:	4621      	mov	r1, r4
 8004170:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004174:	4621      	mov	r1, r4
 8004176:	024a      	lsls	r2, r1, #9
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800417e:	2200      	movs	r2, #0
 8004180:	62bb      	str	r3, [r7, #40]	; 0x28
 8004182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004184:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004188:	f7fc f81e 	bl	80001c8 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4613      	mov	r3, r2
 8004192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004194:	e058      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004196:	4b38      	ldr	r3, [pc, #224]	; (8004278 <HAL_RCC_GetSysClockFreq+0x200>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	099b      	lsrs	r3, r3, #6
 800419c:	2200      	movs	r2, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	4611      	mov	r1, r2
 80041a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041a6:	623b      	str	r3, [r7, #32]
 80041a8:	2300      	movs	r3, #0
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
 80041ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	f04f 0000 	mov.w	r0, #0
 80041b8:	f04f 0100 	mov.w	r1, #0
 80041bc:	0159      	lsls	r1, r3, #5
 80041be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c2:	0150      	lsls	r0, r2, #5
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4641      	mov	r1, r8
 80041ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ce:	4649      	mov	r1, r9
 80041d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041e8:	ebb2 040a 	subs.w	r4, r2, sl
 80041ec:	eb63 050b 	sbc.w	r5, r3, fp
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	00eb      	lsls	r3, r5, #3
 80041fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041fe:	00e2      	lsls	r2, r4, #3
 8004200:	4614      	mov	r4, r2
 8004202:	461d      	mov	r5, r3
 8004204:	4643      	mov	r3, r8
 8004206:	18e3      	adds	r3, r4, r3
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	464b      	mov	r3, r9
 800420c:	eb45 0303 	adc.w	r3, r5, r3
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800421e:	4629      	mov	r1, r5
 8004220:	028b      	lsls	r3, r1, #10
 8004222:	4621      	mov	r1, r4
 8004224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004228:	4621      	mov	r1, r4
 800422a:	028a      	lsls	r2, r1, #10
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004232:	2200      	movs	r2, #0
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	61fa      	str	r2, [r7, #28]
 8004238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800423c:	f7fb ffc4 	bl	80001c8 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4613      	mov	r3, r2
 8004246:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_RCC_GetSysClockFreq+0x200>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	3301      	adds	r3, #1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800425a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004262:	e002      	b.n	800426a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_RCC_GetSysClockFreq+0x204>)
 8004266:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800426a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800426c:	4618      	mov	r0, r3
 800426e:	3750      	adds	r7, #80	; 0x50
 8004270:	46bd      	mov	sp, r7
 8004272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	00f42400 	.word	0x00f42400
 8004280:	007a1200 	.word	0x007a1200

08004284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <HAL_RCC_GetHCLKFreq+0x14>)
 800428a:	681b      	ldr	r3, [r3, #0]
}
 800428c:	4618      	mov	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000000 	.word	0x20000000

0800429c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042a0:	f7ff fff0 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	0a9b      	lsrs	r3, r3, #10
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	4903      	ldr	r1, [pc, #12]	; (80042c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042b2:	5ccb      	ldrb	r3, [r1, r3]
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40023800 	.word	0x40023800
 80042c0:	08008fd0 	.word	0x08008fd0

080042c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042c8:	f7ff ffdc 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	0b5b      	lsrs	r3, r3, #13
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	4903      	ldr	r1, [pc, #12]	; (80042e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40023800 	.word	0x40023800
 80042e8:	08008fd0 	.word	0x08008fd0

080042ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004310:	2b00      	cmp	r3, #0
 8004312:	d035      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004314:	4b62      	ldr	r3, [pc, #392]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800431a:	f7fc fdd7 	bl	8000ecc <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004322:	f7fc fdd3 	bl	8000ecc <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e0b0      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004334:	4b5b      	ldr	r3, [pc, #364]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f0      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	019a      	lsls	r2, r3, #6
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	071b      	lsls	r3, r3, #28
 800434c:	4955      	ldr	r1, [pc, #340]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004354:	4b52      	ldr	r3, [pc, #328]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800435a:	f7fc fdb7 	bl	8000ecc <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004362:	f7fc fdb3 	bl	8000ecc <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e090      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004374:	4b4b      	ldr	r3, [pc, #300]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8083 	beq.w	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	4b44      	ldr	r3, [pc, #272]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	4a43      	ldr	r2, [pc, #268]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439c:	6413      	str	r3, [r2, #64]	; 0x40
 800439e:	4b41      	ldr	r3, [pc, #260]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043aa:	4b3f      	ldr	r3, [pc, #252]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a3e      	ldr	r2, [pc, #248]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043b6:	f7fc fd89 	bl	8000ecc <HAL_GetTick>
 80043ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043be:	f7fc fd85 	bl	8000ecc <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e062      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043d0:	4b35      	ldr	r3, [pc, #212]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043dc:	4b31      	ldr	r3, [pc, #196]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02f      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d028      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043fa:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004402:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004404:	4b29      	ldr	r3, [pc, #164]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800440a:	4b28      	ldr	r3, [pc, #160]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004410:	4a24      	ldr	r2, [pc, #144]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004416:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d114      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004422:	f7fc fd53 	bl	8000ecc <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fc fd4f 	bl	8000ecc <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	; 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e02a      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004440:	4b18      	ldr	r3, [pc, #96]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ee      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004458:	d10d      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800446a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446e:	490d      	ldr	r1, [pc, #52]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004470:	4313      	orrs	r3, r2
 8004472:	608b      	str	r3, [r1, #8]
 8004474:	e005      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004480:	6093      	str	r3, [r2, #8]
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004484:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448e:	4905      	ldr	r1, [pc, #20]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004490:	4313      	orrs	r3, r2
 8004492:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	42470068 	.word	0x42470068
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40007000 	.word	0x40007000
 80044ac:	42470e40 	.word	0x42470e40

080044b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d13e      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d12f      	bne.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044e4:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044e6:	617b      	str	r3, [r7, #20]
          break;
 80044e8:	e02f      	b.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044ea:	4b1c      	ldr	r3, [pc, #112]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f6:	d108      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044f8:	4b18      	ldr	r3, [pc, #96]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004500:	4a18      	ldr	r2, [pc, #96]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	e007      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004512:	4a15      	ldr	r2, [pc, #84]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800451c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004534:	0f1b      	lsrs	r3, r3, #28
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	617b      	str	r3, [r7, #20]
          break;
 8004542:	e002      	b.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
          break;
 8004548:	bf00      	nop
        }
      }
      break;
 800454a:	bf00      	nop
    }
  }
  return frequency;
 800454c:	697b      	ldr	r3, [r7, #20]
}
 800454e:	4618      	mov	r0, r3
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	00bb8000 	.word	0x00bb8000
 8004564:	007a1200 	.word	0x007a1200
 8004568:	00f42400 	.word	0x00f42400

0800456c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e07b      	b.n	8004676 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d108      	bne.n	8004598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800458e:	d009      	beq.n	80045a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	61da      	str	r2, [r3, #28]
 8004596:	e005      	b.n	80045a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc fad6 	bl	8000b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004628:	ea42 0103 	orr.w	r1, r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	f003 0104 	and.w	r1, r3, #4
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0210 	and.w	r2, r3, #16
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004664:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e03f      	b.n	8004710 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d106      	bne.n	80046aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7fc faab 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2224      	movs	r2, #36	; 0x24
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fdde 	bl	8005284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b20      	cmp	r3, #32
 8004736:	d17c      	bne.n	8004832 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_UART_Transmit+0x2c>
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e075      	b.n	8004834 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_UART_Transmit+0x3e>
 8004752:	2302      	movs	r3, #2
 8004754:	e06e      	b.n	8004834 <HAL_UART_Transmit+0x11c>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2221      	movs	r2, #33	; 0x21
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800476c:	f7fc fbae 	bl	8000ecc <HAL_GetTick>
 8004770:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004786:	d108      	bne.n	800479a <HAL_UART_Transmit+0x82>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	e003      	b.n	80047a2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047aa:	e02a      	b.n	8004802 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	2180      	movs	r1, #128	; 0x80
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fb1e 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e036      	b.n	8004834 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10b      	bne.n	80047e4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	3302      	adds	r3, #2
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	e007      	b.n	80047f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	781a      	ldrb	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3301      	adds	r3, #1
 80047f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1cf      	bne.n	80047ac <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2200      	movs	r2, #0
 8004814:	2140      	movs	r1, #64	; 0x40
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 faee 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e006      	b.n	8004834 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	e000      	b.n	8004834 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004832:	2302      	movs	r3, #2
  }
}
 8004834:	4618      	mov	r0, r3
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b20      	cmp	r3, #32
 8004854:	d11d      	bne.n	8004892 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_UART_Receive_IT+0x26>
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e016      	b.n	8004894 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_UART_Receive_IT+0x38>
 8004870:	2302      	movs	r3, #2
 8004872:	e00f      	b.n	8004894 <HAL_UART_Receive_IT+0x58>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	461a      	mov	r2, r3
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fb23 	bl	8004ed4 <UART_Start_Receive_IT>
 800488e:	4603      	mov	r3, r0
 8004890:	e000      	b.n	8004894 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b0ba      	sub	sp, #232	; 0xe8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <HAL_UART_IRQHandler+0x66>
 80048ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fc07 	bl	800510e <UART_Receive_IT>
      return;
 8004900:	e256      	b.n	8004db0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004902:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80de 	beq.w	8004ac8 <HAL_UART_IRQHandler+0x22c>
 800490c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80d1 	beq.w	8004ac8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <HAL_UART_IRQHandler+0xae>
 8004932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0201 	orr.w	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800494a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00b      	beq.n	800496e <HAL_UART_IRQHandler+0xd2>
 8004956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f043 0202 	orr.w	r2, r3, #2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800496e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <HAL_UART_IRQHandler+0xf6>
 800497a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f043 0204 	orr.w	r2, r3, #4
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d011      	beq.n	80049c2 <HAL_UART_IRQHandler+0x126>
 800499e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d105      	bne.n	80049b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f043 0208 	orr.w	r2, r3, #8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 81ed 	beq.w	8004da6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_UART_IRQHandler+0x14e>
 80049d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fb92 	bl	800510e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <HAL_UART_IRQHandler+0x17a>
 8004a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d04f      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa9a 	bl	8004f50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a26:	2b40      	cmp	r3, #64	; 0x40
 8004a28:	d141      	bne.n	8004aae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3314      	adds	r3, #20
 8004a30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3314      	adds	r3, #20
 8004a52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1d9      	bne.n	8004a2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d013      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	4a7d      	ldr	r2, [pc, #500]	; (8004c78 <HAL_UART_IRQHandler+0x3dc>)
 8004a84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fc fbcf 	bl	800122e <HAL_DMA_Abort_IT>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d016      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	e00e      	b.n	8004ac4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f990 	bl	8004dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aac:	e00a      	b.n	8004ac4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f98c 	bl	8004dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	e006      	b.n	8004ac4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f988 	bl	8004dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ac2:	e170      	b.n	8004da6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac4:	bf00      	nop
    return;
 8004ac6:	e16e      	b.n	8004da6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	f040 814a 	bne.w	8004d66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 8143 	beq.w	8004d66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 813c 	beq.w	8004d66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	f040 80b4 	bne.w	8004c7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8140 	beq.w	8004daa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b32:	429a      	cmp	r2, r3
 8004b34:	f080 8139 	bcs.w	8004daa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4a:	f000 8088 	beq.w	8004c5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	330c      	adds	r3, #12
 8004b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1d9      	bne.n	8004b4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3314      	adds	r3, #20
 8004bba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e1      	bne.n	8004b9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3314      	adds	r3, #20
 8004bf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e3      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2e:	f023 0310 	bic.w	r3, r3, #16
 8004c32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c40:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e3      	bne.n	8004c1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fc fa78 	bl	800114e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f8b6 	bl	8004de0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c74:	e099      	b.n	8004daa <HAL_UART_IRQHandler+0x50e>
 8004c76:	bf00      	nop
 8004c78:	08005017 	.word	0x08005017
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 808b 	beq.w	8004dae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8086 	beq.w	8004dae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cc6:	647a      	str	r2, [r7, #68]	; 0x44
 8004cc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e3      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3314      	adds	r3, #20
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cfe:	633a      	str	r2, [r7, #48]	; 0x30
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e3      	bne.n	8004cda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0310 	bic.w	r3, r3, #16
 8004d36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d44:	61fa      	str	r2, [r7, #28]
 8004d46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	69b9      	ldr	r1, [r7, #24]
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	617b      	str	r3, [r7, #20]
   return(result);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e3      	bne.n	8004d20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f83e 	bl	8004de0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d64:	e023      	b.n	8004dae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <HAL_UART_IRQHandler+0x4ea>
 8004d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f95d 	bl	800503e <UART_Transmit_IT>
    return;
 8004d84:	e014      	b.n	8004db0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00e      	beq.n	8004db0 <HAL_UART_IRQHandler+0x514>
 8004d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f99d 	bl	80050de <UART_EndTransmit_IT>
    return;
 8004da4:	e004      	b.n	8004db0 <HAL_UART_IRQHandler+0x514>
    return;
 8004da6:	bf00      	nop
 8004da8:	e002      	b.n	8004db0 <HAL_UART_IRQHandler+0x514>
      return;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <HAL_UART_IRQHandler+0x514>
      return;
 8004dae:	bf00      	nop
  }
}
 8004db0:	37e8      	adds	r7, #232	; 0xe8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop

08004db8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b090      	sub	sp, #64	; 0x40
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e08:	e050      	b.n	8004eac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e10:	d04c      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e18:	f7fc f858 	bl	8000ecc <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d241      	bcs.n	8004eac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e48:	637a      	str	r2, [r7, #52]	; 0x34
 8004e4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3314      	adds	r3, #20
 8004e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3314      	adds	r3, #20
 8004e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e7c:	623a      	str	r2, [r7, #32]
 8004e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	69f9      	ldr	r1, [r7, #28]
 8004e82:	6a3a      	ldr	r2, [r7, #32]
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e5      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e00f      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d09f      	beq.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3740      	adds	r7, #64	; 0x40
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	88fa      	ldrh	r2, [r7, #6]
 8004eec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2222      	movs	r2, #34	; 0x22
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0201 	orr.w	r2, r2, #1
 8004f30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0220 	orr.w	r2, r2, #32
 8004f40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b095      	sub	sp, #84	; 0x54
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f78:	643a      	str	r2, [r7, #64]	; 0x40
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e5      	bne.n	8004f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e5      	bne.n	8004f8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d119      	bne.n	8004ffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f023 0310 	bic.w	r3, r3, #16
 8004fde:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fe8:	61ba      	str	r2, [r7, #24]
 8004fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6979      	ldr	r1, [r7, #20]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e5      	bne.n	8004fc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	; 0x30
}
 800500a:	bf00      	nop
 800500c:	3754      	adds	r7, #84	; 0x54
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff fecb 	bl	8004dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b21      	cmp	r3, #33	; 0x21
 8005050:	d13e      	bne.n	80050d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	d114      	bne.n	8005086 <UART_Transmit_IT+0x48>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d110      	bne.n	8005086 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005078:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	1c9a      	adds	r2, r3, #2
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	621a      	str	r2, [r3, #32]
 8005084:	e008      	b.n	8005098 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	1c59      	adds	r1, r3, #1
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6211      	str	r1, [r2, #32]
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4619      	mov	r1, r3
 80050a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10f      	bne.n	80050cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fe5a 	bl	8004db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08c      	sub	sp, #48	; 0x30
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b22      	cmp	r3, #34	; 0x22
 8005120:	f040 80ab 	bne.w	800527a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d117      	bne.n	800515e <UART_Receive_IT+0x50>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d113      	bne.n	800515e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514c:	b29a      	uxth	r2, r3
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	1c9a      	adds	r2, r3, #2
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28
 800515c:	e026      	b.n	80051ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d007      	beq.n	8005182 <UART_Receive_IT+0x74>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <UART_Receive_IT+0x82>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e008      	b.n	80051a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519c:	b2da      	uxtb	r2, r3
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4619      	mov	r1, r3
 80051ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d15a      	bne.n	8005276 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0220 	bic.w	r2, r2, #32
 80051ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0201 	bic.w	r2, r2, #1
 80051ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d135      	bne.n	800526c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	613b      	str	r3, [r7, #16]
   return(result);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f023 0310 	bic.w	r3, r3, #16
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005226:	623a      	str	r2, [r7, #32]
 8005228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	69f9      	ldr	r1, [r7, #28]
 800522c:	6a3a      	ldr	r2, [r7, #32]
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	61bb      	str	r3, [r7, #24]
   return(result);
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b10      	cmp	r3, #16
 8005246:	d10a      	bne.n	800525e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff fdbb 	bl	8004de0 <HAL_UARTEx_RxEventCallback>
 800526a:	e002      	b.n	8005272 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7fb fb71 	bl	8000954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e002      	b.n	800527c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e000      	b.n	800527c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3730      	adds	r7, #48	; 0x30
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005288:	b0c0      	sub	sp, #256	; 0x100
 800528a:	af00      	add	r7, sp, #0
 800528c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a0:	68d9      	ldr	r1, [r3, #12]
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	ea40 0301 	orr.w	r3, r0, r1
 80052ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052dc:	f021 010c 	bic.w	r1, r1, #12
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052ea:	430b      	orrs	r3, r1
 80052ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fe:	6999      	ldr	r1, [r3, #24]
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	ea40 0301 	orr.w	r3, r0, r1
 800530a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b8f      	ldr	r3, [pc, #572]	; (8005550 <UART_SetConfig+0x2cc>)
 8005314:	429a      	cmp	r2, r3
 8005316:	d005      	beq.n	8005324 <UART_SetConfig+0xa0>
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b8d      	ldr	r3, [pc, #564]	; (8005554 <UART_SetConfig+0x2d0>)
 8005320:	429a      	cmp	r2, r3
 8005322:	d104      	bne.n	800532e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005324:	f7fe ffce 	bl	80042c4 <HAL_RCC_GetPCLK2Freq>
 8005328:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800532c:	e003      	b.n	8005336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800532e:	f7fe ffb5 	bl	800429c <HAL_RCC_GetPCLK1Freq>
 8005332:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005340:	f040 810c 	bne.w	800555c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800534e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	1891      	adds	r1, r2, r2
 800535c:	65b9      	str	r1, [r7, #88]	; 0x58
 800535e:	415b      	adcs	r3, r3
 8005360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005366:	4621      	mov	r1, r4
 8005368:	eb12 0801 	adds.w	r8, r2, r1
 800536c:	4629      	mov	r1, r5
 800536e:	eb43 0901 	adc.w	r9, r3, r1
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800537e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005386:	4690      	mov	r8, r2
 8005388:	4699      	mov	r9, r3
 800538a:	4623      	mov	r3, r4
 800538c:	eb18 0303 	adds.w	r3, r8, r3
 8005390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005394:	462b      	mov	r3, r5
 8005396:	eb49 0303 	adc.w	r3, r9, r3
 800539a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053b2:	460b      	mov	r3, r1
 80053b4:	18db      	adds	r3, r3, r3
 80053b6:	653b      	str	r3, [r7, #80]	; 0x50
 80053b8:	4613      	mov	r3, r2
 80053ba:	eb42 0303 	adc.w	r3, r2, r3
 80053be:	657b      	str	r3, [r7, #84]	; 0x54
 80053c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053c8:	f7fa fefe 	bl	80001c8 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4b61      	ldr	r3, [pc, #388]	; (8005558 <UART_SetConfig+0x2d4>)
 80053d2:	fba3 2302 	umull	r2, r3, r3, r2
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	011c      	lsls	r4, r3, #4
 80053da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053ec:	4642      	mov	r2, r8
 80053ee:	464b      	mov	r3, r9
 80053f0:	1891      	adds	r1, r2, r2
 80053f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80053f4:	415b      	adcs	r3, r3
 80053f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053fc:	4641      	mov	r1, r8
 80053fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005402:	4649      	mov	r1, r9
 8005404:	eb43 0b01 	adc.w	fp, r3, r1
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800541c:	4692      	mov	sl, r2
 800541e:	469b      	mov	fp, r3
 8005420:	4643      	mov	r3, r8
 8005422:	eb1a 0303 	adds.w	r3, sl, r3
 8005426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800542a:	464b      	mov	r3, r9
 800542c:	eb4b 0303 	adc.w	r3, fp, r3
 8005430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005440:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005448:	460b      	mov	r3, r1
 800544a:	18db      	adds	r3, r3, r3
 800544c:	643b      	str	r3, [r7, #64]	; 0x40
 800544e:	4613      	mov	r3, r2
 8005450:	eb42 0303 	adc.w	r3, r2, r3
 8005454:	647b      	str	r3, [r7, #68]	; 0x44
 8005456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800545a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800545e:	f7fa feb3 	bl	80001c8 <__aeabi_uldivmod>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4611      	mov	r1, r2
 8005468:	4b3b      	ldr	r3, [pc, #236]	; (8005558 <UART_SetConfig+0x2d4>)
 800546a:	fba3 2301 	umull	r2, r3, r3, r1
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	2264      	movs	r2, #100	; 0x64
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	1acb      	subs	r3, r1, r3
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800547e:	4b36      	ldr	r3, [pc, #216]	; (8005558 <UART_SetConfig+0x2d4>)
 8005480:	fba3 2302 	umull	r2, r3, r3, r2
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800548c:	441c      	add	r4, r3
 800548e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005492:	2200      	movs	r2, #0
 8005494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005498:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800549c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054a0:	4642      	mov	r2, r8
 80054a2:	464b      	mov	r3, r9
 80054a4:	1891      	adds	r1, r2, r2
 80054a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80054a8:	415b      	adcs	r3, r3
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054b0:	4641      	mov	r1, r8
 80054b2:	1851      	adds	r1, r2, r1
 80054b4:	6339      	str	r1, [r7, #48]	; 0x30
 80054b6:	4649      	mov	r1, r9
 80054b8:	414b      	adcs	r3, r1
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054c8:	4659      	mov	r1, fp
 80054ca:	00cb      	lsls	r3, r1, #3
 80054cc:	4651      	mov	r1, sl
 80054ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054d2:	4651      	mov	r1, sl
 80054d4:	00ca      	lsls	r2, r1, #3
 80054d6:	4610      	mov	r0, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	4642      	mov	r2, r8
 80054de:	189b      	adds	r3, r3, r2
 80054e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054e4:	464b      	mov	r3, r9
 80054e6:	460a      	mov	r2, r1
 80054e8:	eb42 0303 	adc.w	r3, r2, r3
 80054ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005504:	460b      	mov	r3, r1
 8005506:	18db      	adds	r3, r3, r3
 8005508:	62bb      	str	r3, [r7, #40]	; 0x28
 800550a:	4613      	mov	r3, r2
 800550c:	eb42 0303 	adc.w	r3, r2, r3
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800551a:	f7fa fe55 	bl	80001c8 <__aeabi_uldivmod>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <UART_SetConfig+0x2d4>)
 8005524:	fba3 1302 	umull	r1, r3, r3, r2
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	2164      	movs	r1, #100	; 0x64
 800552c:	fb01 f303 	mul.w	r3, r1, r3
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	3332      	adds	r3, #50	; 0x32
 8005536:	4a08      	ldr	r2, [pc, #32]	; (8005558 <UART_SetConfig+0x2d4>)
 8005538:	fba2 2303 	umull	r2, r3, r2, r3
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	f003 0207 	and.w	r2, r3, #7
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4422      	add	r2, r4
 800554a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800554c:	e105      	b.n	800575a <UART_SetConfig+0x4d6>
 800554e:	bf00      	nop
 8005550:	40011000 	.word	0x40011000
 8005554:	40011400 	.word	0x40011400
 8005558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800555c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005560:	2200      	movs	r2, #0
 8005562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005566:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800556a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800556e:	4642      	mov	r2, r8
 8005570:	464b      	mov	r3, r9
 8005572:	1891      	adds	r1, r2, r2
 8005574:	6239      	str	r1, [r7, #32]
 8005576:	415b      	adcs	r3, r3
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
 800557a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800557e:	4641      	mov	r1, r8
 8005580:	1854      	adds	r4, r2, r1
 8005582:	4649      	mov	r1, r9
 8005584:	eb43 0501 	adc.w	r5, r3, r1
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	00eb      	lsls	r3, r5, #3
 8005592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005596:	00e2      	lsls	r2, r4, #3
 8005598:	4614      	mov	r4, r2
 800559a:	461d      	mov	r5, r3
 800559c:	4643      	mov	r3, r8
 800559e:	18e3      	adds	r3, r4, r3
 80055a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055a4:	464b      	mov	r3, r9
 80055a6:	eb45 0303 	adc.w	r3, r5, r3
 80055aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055ca:	4629      	mov	r1, r5
 80055cc:	008b      	lsls	r3, r1, #2
 80055ce:	4621      	mov	r1, r4
 80055d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d4:	4621      	mov	r1, r4
 80055d6:	008a      	lsls	r2, r1, #2
 80055d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055dc:	f7fa fdf4 	bl	80001c8 <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4b60      	ldr	r3, [pc, #384]	; (8005768 <UART_SetConfig+0x4e4>)
 80055e6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	011c      	lsls	r4, r3, #4
 80055ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	1891      	adds	r1, r2, r2
 8005606:	61b9      	str	r1, [r7, #24]
 8005608:	415b      	adcs	r3, r3
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005610:	4641      	mov	r1, r8
 8005612:	1851      	adds	r1, r2, r1
 8005614:	6139      	str	r1, [r7, #16]
 8005616:	4649      	mov	r1, r9
 8005618:	414b      	adcs	r3, r1
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005628:	4659      	mov	r1, fp
 800562a:	00cb      	lsls	r3, r1, #3
 800562c:	4651      	mov	r1, sl
 800562e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005632:	4651      	mov	r1, sl
 8005634:	00ca      	lsls	r2, r1, #3
 8005636:	4610      	mov	r0, r2
 8005638:	4619      	mov	r1, r3
 800563a:	4603      	mov	r3, r0
 800563c:	4642      	mov	r2, r8
 800563e:	189b      	adds	r3, r3, r2
 8005640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005644:	464b      	mov	r3, r9
 8005646:	460a      	mov	r2, r1
 8005648:	eb42 0303 	adc.w	r3, r2, r3
 800564c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	67bb      	str	r3, [r7, #120]	; 0x78
 800565a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005668:	4649      	mov	r1, r9
 800566a:	008b      	lsls	r3, r1, #2
 800566c:	4641      	mov	r1, r8
 800566e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005672:	4641      	mov	r1, r8
 8005674:	008a      	lsls	r2, r1, #2
 8005676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800567a:	f7fa fda5 	bl	80001c8 <__aeabi_uldivmod>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4b39      	ldr	r3, [pc, #228]	; (8005768 <UART_SetConfig+0x4e4>)
 8005684:	fba3 1302 	umull	r1, r3, r3, r2
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	2164      	movs	r1, #100	; 0x64
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	3332      	adds	r3, #50	; 0x32
 8005696:	4a34      	ldr	r2, [pc, #208]	; (8005768 <UART_SetConfig+0x4e4>)
 8005698:	fba2 2303 	umull	r2, r3, r2, r3
 800569c:	095b      	lsrs	r3, r3, #5
 800569e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056a2:	441c      	add	r4, r3
 80056a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a8:	2200      	movs	r2, #0
 80056aa:	673b      	str	r3, [r7, #112]	; 0x70
 80056ac:	677a      	str	r2, [r7, #116]	; 0x74
 80056ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056b2:	4642      	mov	r2, r8
 80056b4:	464b      	mov	r3, r9
 80056b6:	1891      	adds	r1, r2, r2
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	415b      	adcs	r3, r3
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c2:	4641      	mov	r1, r8
 80056c4:	1851      	adds	r1, r2, r1
 80056c6:	6039      	str	r1, [r7, #0]
 80056c8:	4649      	mov	r1, r9
 80056ca:	414b      	adcs	r3, r1
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056da:	4659      	mov	r1, fp
 80056dc:	00cb      	lsls	r3, r1, #3
 80056de:	4651      	mov	r1, sl
 80056e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056e4:	4651      	mov	r1, sl
 80056e6:	00ca      	lsls	r2, r1, #3
 80056e8:	4610      	mov	r0, r2
 80056ea:	4619      	mov	r1, r3
 80056ec:	4603      	mov	r3, r0
 80056ee:	4642      	mov	r2, r8
 80056f0:	189b      	adds	r3, r3, r2
 80056f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056f4:	464b      	mov	r3, r9
 80056f6:	460a      	mov	r2, r1
 80056f8:	eb42 0303 	adc.w	r3, r2, r3
 80056fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	663b      	str	r3, [r7, #96]	; 0x60
 8005708:	667a      	str	r2, [r7, #100]	; 0x64
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	f04f 0300 	mov.w	r3, #0
 8005712:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005716:	4649      	mov	r1, r9
 8005718:	008b      	lsls	r3, r1, #2
 800571a:	4641      	mov	r1, r8
 800571c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005720:	4641      	mov	r1, r8
 8005722:	008a      	lsls	r2, r1, #2
 8005724:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005728:	f7fa fd4e 	bl	80001c8 <__aeabi_uldivmod>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <UART_SetConfig+0x4e4>)
 8005732:	fba3 1302 	umull	r1, r3, r3, r2
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	2164      	movs	r1, #100	; 0x64
 800573a:	fb01 f303 	mul.w	r3, r1, r3
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	3332      	adds	r3, #50	; 0x32
 8005744:	4a08      	ldr	r2, [pc, #32]	; (8005768 <UART_SetConfig+0x4e4>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4422      	add	r2, r4
 8005758:	609a      	str	r2, [r3, #8]
}
 800575a:	bf00      	nop
 800575c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005760:	46bd      	mov	sp, r7
 8005762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005766:	bf00      	nop
 8005768:	51eb851f 	.word	0x51eb851f

0800576c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800576c:	b084      	sub	sp, #16
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	f107 001c 	add.w	r0, r7, #28
 800577a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	2b01      	cmp	r3, #1
 8005782:	d122      	bne.n	80057ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d105      	bne.n	80057be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f9c0 	bl	8005b44 <USB_CoreReset>
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]
 80057c8:	e01a      	b.n	8005800 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f9b4 	bl	8005b44 <USB_CoreReset>
 80057dc:	4603      	mov	r3, r0
 80057de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
 80057f2:	e005      	b.n	8005800 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	2b01      	cmp	r3, #1
 8005804:	d10b      	bne.n	800581e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f043 0206 	orr.w	r2, r3, #6
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f043 0220 	orr.w	r2, r3, #32
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800582a:	b004      	add	sp, #16
 800582c:	4770      	bx	lr

0800582e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f043 0201 	orr.w	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f023 0201 	bic.w	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d115      	bne.n	80058c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058a0:	2001      	movs	r0, #1
 80058a2:	f7fb fb1f 	bl	8000ee4 <HAL_Delay>
      ms++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3301      	adds	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f93a 	bl	8005b26 <USB_GetMode>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d01e      	beq.n	80058f6 <USB_SetCurrentMode+0x84>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b31      	cmp	r3, #49	; 0x31
 80058bc:	d9f0      	bls.n	80058a0 <USB_SetCurrentMode+0x2e>
 80058be:	e01a      	b.n	80058f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d115      	bne.n	80058f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058d2:	2001      	movs	r0, #1
 80058d4:	f7fb fb06 	bl	8000ee4 <HAL_Delay>
      ms++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f921 	bl	8005b26 <USB_GetMode>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <USB_SetCurrentMode+0x84>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b31      	cmp	r3, #49	; 0x31
 80058ee:	d9f0      	bls.n	80058d2 <USB_SetCurrentMode+0x60>
 80058f0:	e001      	b.n	80058f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e005      	b.n	8005902 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b32      	cmp	r3, #50	; 0x32
 80058fa:	d101      	bne.n	8005900 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3301      	adds	r3, #1
 800591e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a13      	ldr	r2, [pc, #76]	; (8005970 <USB_FlushTxFifo+0x64>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d901      	bls.n	800592c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e01b      	b.n	8005964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	daf2      	bge.n	800591a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	019b      	lsls	r3, r3, #6
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3301      	adds	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a08      	ldr	r2, [pc, #32]	; (8005970 <USB_FlushTxFifo+0x64>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e006      	b.n	8005964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b20      	cmp	r3, #32
 8005960:	d0f0      	beq.n	8005944 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	00030d40 	.word	0x00030d40

08005974 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4a11      	ldr	r2, [pc, #68]	; (80059d0 <USB_FlushRxFifo+0x5c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d901      	bls.n	8005992 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e018      	b.n	80059c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	daf2      	bge.n	8005980 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2210      	movs	r2, #16
 80059a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3301      	adds	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4a08      	ldr	r2, [pc, #32]	; (80059d0 <USB_FlushRxFifo+0x5c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e006      	b.n	80059c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d0f0      	beq.n	80059a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	00030d40 	.word	0x00030d40

080059d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b089      	sub	sp, #36	; 0x24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4611      	mov	r1, r2
 80059e0:	461a      	mov	r2, r3
 80059e2:	460b      	mov	r3, r1
 80059e4:	71fb      	strb	r3, [r7, #7]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d123      	bne.n	8005a42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059fa:	88bb      	ldrh	r3, [r7, #4]
 80059fc:	3303      	adds	r3, #3
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a02:	2300      	movs	r3, #0
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	e018      	b.n	8005a3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	031a      	lsls	r2, r3, #12
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a14:	461a      	mov	r2, r3
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	3301      	adds	r3, #1
 8005a26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3301      	adds	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	3301      	adds	r3, #1
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d3e2      	bcc.n	8005a08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3724      	adds	r7, #36	; 0x24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b08b      	sub	sp, #44	; 0x2c
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	089b      	lsrs	r3, r3, #2
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a6e:	88fb      	ldrh	r3, [r7, #6]
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a76:	2300      	movs	r3, #0
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	e014      	b.n	8005aa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	3301      	adds	r3, #1
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	3301      	adds	r3, #1
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	623b      	str	r3, [r7, #32]
 8005aa6:	6a3a      	ldr	r2, [r7, #32]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d3e6      	bcc.n	8005a7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005aae:	8bfb      	ldrh	r3, [r7, #30]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01e      	beq.n	8005af2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f107 0310 	add.w	r3, r7, #16
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	701a      	strb	r2, [r3, #0]
      i++;
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	3301      	adds	r3, #1
 8005ade:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ae6:	8bfb      	ldrh	r3, [r7, #30]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005aec:	8bfb      	ldrh	r3, [r7, #30]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1ea      	bne.n	8005ac8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	372c      	adds	r7, #44	; 0x2c
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4013      	ands	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b18:	68fb      	ldr	r3, [r7, #12]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0301 	and.w	r3, r3, #1
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <USB_CoreReset+0x64>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e01b      	b.n	8005b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	daf2      	bge.n	8005b50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f043 0201 	orr.w	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <USB_CoreReset+0x64>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d901      	bls.n	8005b8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e006      	b.n	8005b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d0f0      	beq.n	8005b7a <USB_CoreReset+0x36>

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	00030d40 	.word	0x00030d40

08005bac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bac:	b084      	sub	sp, #16
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b086      	sub	sp, #24
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d018      	beq.n	8005c34 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d10a      	bne.n	8005c1e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c16:	f043 0304 	orr.w	r3, r3, #4
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	e014      	b.n	8005c48 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c2c:	f023 0304 	bic.w	r3, r3, #4
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	e009      	b.n	8005c48 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c42:	f023 0304 	bic.w	r3, r3, #4
 8005c46:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c48:	2110      	movs	r1, #16
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff fe5e 	bl	800590c <USB_FlushTxFifo>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff fe8a 	bl	8005974 <USB_FlushRxFifo>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	e015      	b.n	8005c9c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c82:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c90:	461a      	mov	r2, r3
 8005c92:	2300      	movs	r3, #0
 8005c94:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d3e5      	bcc.n	8005c70 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cb0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a13      	ldr	r2, [pc, #76]	; (8005d18 <USB_HostInit+0x16c>)
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a13      	ldr	r2, [pc, #76]	; (8005d1c <USB_HostInit+0x170>)
 8005cd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005cd4:	e009      	b.n	8005cea <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2280      	movs	r2, #128	; 0x80
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a10      	ldr	r2, [pc, #64]	; (8005d20 <USB_HostInit+0x174>)
 8005ce0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a0f      	ldr	r2, [pc, #60]	; (8005d24 <USB_HostInit+0x178>)
 8005ce6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d105      	bne.n	8005cfc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f043 0210 	orr.w	r2, r3, #16
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699a      	ldr	r2, [r3, #24]
 8005d00:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <USB_HostInit+0x17c>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d14:	b004      	add	sp, #16
 8005d16:	4770      	bx	lr
 8005d18:	01000200 	.word	0x01000200
 8005d1c:	00e00300 	.word	0x00e00300
 8005d20:	00600080 	.word	0x00600080
 8005d24:	004000e0 	.word	0x004000e0
 8005d28:	a3200008 	.word	0xa3200008

08005d2c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d107      	bne.n	8005d7e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d74:	461a      	mov	r2, r3
 8005d76:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d7a:	6053      	str	r3, [r2, #4]
 8005d7c:	e009      	b.n	8005d92 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d106      	bne.n	8005d92 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d90:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dc0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005dd0:	2064      	movs	r0, #100	; 0x64
 8005dd2:	f7fb f887 	bl	8000ee4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005de2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005de4:	200a      	movs	r0, #10
 8005de6:	f7fb f87d 	bl	8000ee4 <HAL_Delay>

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e18:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <USB_DriveVbus+0x44>
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d106      	bne.n	8005e38 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e36:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e42:	d109      	bne.n	8005e58 <USB_DriveVbus+0x64>
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e56:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	0c5b      	lsrs	r3, r3, #17
 8005e84:	f003 0303 	and.w	r3, r3, #3
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	b29b      	uxth	r3, r3
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	4608      	mov	r0, r1
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	70fb      	strb	r3, [r7, #3]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70bb      	strb	r3, [r7, #2]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d87e      	bhi.n	8005ff4 <USB_HC_Init+0x13c>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <USB_HC_Init+0x44>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f0d 	.word	0x08005f0d
 8005f00:	08005fb7 	.word	0x08005fb7
 8005f04:	08005f0d 	.word	0x08005f0d
 8005f08:	08005f79 	.word	0x08005f79
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	da10      	bge.n	8005f4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	78fa      	ldrb	r2, [r7, #3]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f46:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f48:	e057      	b.n	8005ffa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d051      	beq.n	8005ffa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f74:	60d3      	str	r3, [r2, #12]
      break;
 8005f76:	e040      	b.n	8005ffa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f84:	461a      	mov	r2, r3
 8005f86:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da34      	bge.n	8005ffe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	78fa      	ldrb	r2, [r7, #3]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005fb4:	e023      	b.n	8005ffe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f240 2325 	movw	r3, #549	; 0x225
 8005fc8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	da17      	bge.n	8006002 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ff0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ff2:	e006      	b.n	8006002 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	77fb      	strb	r3, [r7, #31]
      break;
 8005ff8:	e004      	b.n	8006004 <USB_HC_Init+0x14c>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e002      	b.n	8006004 <USB_HC_Init+0x14c>
      break;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <USB_HC_Init+0x14c>
      break;
 8006002:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	440a      	add	r2, r1
 800601a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601e:	f043 0302 	orr.w	r3, r3, #2
 8006022:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800602a:	699a      	ldr	r2, [r3, #24]
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	f003 030f 	and.w	r3, r3, #15
 8006032:	2101      	movs	r1, #1
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	6939      	ldr	r1, [r7, #16]
 800603a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800603e:	4313      	orrs	r3, r2
 8006040:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800604e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006052:	2b00      	cmp	r3, #0
 8006054:	da03      	bge.n	800605e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e001      	b.n	8006062 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff feff 	bl	8005e66 <USB_GetHostSpeed>
 8006068:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800606a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800606e:	2b02      	cmp	r3, #2
 8006070:	d106      	bne.n	8006080 <USB_HC_Init+0x1c8>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d003      	beq.n	8006080 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e001      	b.n	8006084 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006084:	787b      	ldrb	r3, [r7, #1]
 8006086:	059b      	lsls	r3, r3, #22
 8006088:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800608c:	78bb      	ldrb	r3, [r7, #2]
 800608e:	02db      	lsls	r3, r3, #11
 8006090:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006094:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006096:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800609a:	049b      	lsls	r3, r3, #18
 800609c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	0159      	lsls	r1, r3, #5
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	440b      	add	r3, r1
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060c0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80060c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d003      	beq.n	80060d2 <USB_HC_Init+0x21a>
 80060ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d10f      	bne.n	80060f2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80060f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3720      	adds	r7, #32
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08c      	sub	sp, #48	; 0x30
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006118:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d02d      	beq.n	8006182 <USB_HC_StartXfer+0x86>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	791b      	ldrb	r3, [r3, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d129      	bne.n	8006182 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d117      	bne.n	8006164 <USB_HC_StartXfer+0x68>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	79db      	ldrb	r3, [r3, #7]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <USB_HC_StartXfer+0x48>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	79db      	ldrb	r3, [r3, #7]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d10f      	bne.n	8006164 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	4413      	add	r3, r2
 800614c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	6a3a      	ldr	r2, [r7, #32]
 8006158:	440a      	add	r2, r1
 800615a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <USB_HC_StartXfer+0x86>
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	795b      	ldrb	r3, [r3, #5]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d107      	bne.n	8006182 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	4619      	mov	r1, r3
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fa0f 	bl	800659c <USB_DoPing>
      return HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	e0f8      	b.n	8006374 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d018      	beq.n	80061bc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	8912      	ldrh	r2, [r2, #8]
 8006192:	4413      	add	r3, r2
 8006194:	3b01      	subs	r3, #1
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	8912      	ldrh	r2, [r2, #8]
 800619a:	fbb3 f3f2 	udiv	r3, r3, r2
 800619e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80061a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061a2:	8b7b      	ldrh	r3, [r7, #26]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d90b      	bls.n	80061c0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80061a8:	8b7b      	ldrh	r3, [r7, #26]
 80061aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	8912      	ldrh	r2, [r2, #8]
 80061b2:	fb03 f202 	mul.w	r2, r3, r2
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	611a      	str	r2, [r3, #16]
 80061ba:	e001      	b.n	80061c0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80061bc:	2301      	movs	r3, #1
 80061be:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	78db      	ldrb	r3, [r3, #3]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	8912      	ldrh	r2, [r2, #8]
 80061ce:	fb03 f202 	mul.w	r2, r3, r2
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	611a      	str	r2, [r3, #16]
 80061d6:	e003      	b.n	80061e0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ea:	04d9      	lsls	r1, r3, #19
 80061ec:	4b63      	ldr	r3, [pc, #396]	; (800637c <USB_HC_StartXfer+0x280>)
 80061ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	7a9b      	ldrb	r3, [r3, #10]
 80061f6:	075b      	lsls	r3, r3, #29
 80061f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061fc:	69f9      	ldr	r1, [r7, #28]
 80061fe:	0148      	lsls	r0, r1, #5
 8006200:	6a39      	ldr	r1, [r7, #32]
 8006202:	4401      	add	r1, r0
 8006204:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006208:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800620a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d009      	beq.n	8006226 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	68d9      	ldr	r1, [r3, #12]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	4413      	add	r3, r2
 800621e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006222:	460a      	mov	r2, r1
 8006224:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	bf0c      	ite	eq
 8006236:	2301      	moveq	r3, #1
 8006238:	2300      	movne	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	6a3a      	ldr	r2, [r7, #32]
 8006252:	440a      	add	r2, r1
 8006254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006258:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800625c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	4413      	add	r3, r2
 8006266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	7e7b      	ldrb	r3, [r7, #25]
 800626e:	075b      	lsls	r3, r3, #29
 8006270:	69f9      	ldr	r1, [r7, #28]
 8006272:	0148      	lsls	r0, r1, #5
 8006274:	6a39      	ldr	r1, [r7, #32]
 8006276:	4401      	add	r1, r0
 8006278:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800627c:	4313      	orrs	r3, r2
 800627e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006296:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	78db      	ldrb	r3, [r3, #3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	e003      	b.n	80062b2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062b0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062b8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c6:	461a      	mov	r2, r3
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	e04e      	b.n	8006374 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	78db      	ldrb	r3, [r3, #3]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d149      	bne.n	8006372 <USB_HC_StartXfer+0x276>
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d045      	beq.n	8006372 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	79db      	ldrb	r3, [r3, #7]
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d830      	bhi.n	8006350 <USB_HC_StartXfer+0x254>
 80062ee:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <USB_HC_StartXfer+0x1f8>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006305 	.word	0x08006305
 80062f8:	08006329 	.word	0x08006329
 80062fc:	08006305 	.word	0x08006305
 8006300:	08006329 	.word	0x08006329
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	3303      	adds	r3, #3
 800630a:	089b      	lsrs	r3, r3, #2
 800630c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800630e:	8afa      	ldrh	r2, [r7, #22]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	b29b      	uxth	r3, r3
 8006316:	429a      	cmp	r2, r3
 8006318:	d91c      	bls.n	8006354 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f043 0220 	orr.w	r2, r3, #32
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	619a      	str	r2, [r3, #24]
        }
        break;
 8006326:	e015      	b.n	8006354 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	3303      	adds	r3, #3
 800632e:	089b      	lsrs	r3, r3, #2
 8006330:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006332:	8afa      	ldrh	r2, [r7, #22]
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	b29b      	uxth	r3, r3
 800633e:	429a      	cmp	r2, r3
 8006340:	d90a      	bls.n	8006358 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	619a      	str	r2, [r3, #24]
        }
        break;
 800634e:	e003      	b.n	8006358 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006350:	bf00      	nop
 8006352:	e002      	b.n	800635a <USB_HC_StartXfer+0x25e>
        break;
 8006354:	bf00      	nop
 8006356:	e000      	b.n	800635a <USB_HC_StartXfer+0x25e>
        break;
 8006358:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	68d9      	ldr	r1, [r3, #12]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	785a      	ldrb	r2, [r3, #1]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	b29b      	uxth	r3, r3
 8006368:	2000      	movs	r0, #0
 800636a:	9000      	str	r0, [sp, #0]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff fb31 	bl	80059d4 <USB_WritePacket>
  }

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3728      	adds	r7, #40	; 0x28
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	1ff80000 	.word	0x1ff80000

08006380 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	b29b      	uxth	r3, r3
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b089      	sub	sp, #36	; 0x24
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063b2:	78fb      	ldrb	r3, [r7, #3]
 80063b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	0c9b      	lsrs	r3, r3, #18
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	0fdb      	lsrs	r3, r3, #31
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d104      	bne.n	80063fc <USB_HC_Halt+0x5a>
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e0c8      	b.n	800658e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <USB_HC_Halt+0x66>
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d163      	bne.n	80064d0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	440a      	add	r2, r1
 800641e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006426:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b00      	cmp	r3, #0
 8006432:	f040 80ab 	bne.w	800658c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d133      	bne.n	80064aa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	440a      	add	r2, r1
 8006458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800645c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006460:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	440a      	add	r2, r1
 8006478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800647c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006480:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3301      	adds	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800648e:	d81d      	bhi.n	80064cc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	4413      	add	r3, r2
 8006498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a6:	d0ec      	beq.n	8006482 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064a8:	e070      	b.n	800658c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064ca:	e05f      	b.n	800658c <USB_HC_Halt+0x1ea>
            break;
 80064cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064ce:	e05d      	b.n	800658c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d133      	bne.n	8006568 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	440a      	add	r2, r1
 8006516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800651e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	4413      	add	r3, r2
 8006528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	440a      	add	r2, r1
 8006536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800653a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800653e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800654c:	d81d      	bhi.n	800658a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006564:	d0ec      	beq.n	8006540 <USB_HC_Halt+0x19e>
 8006566:	e011      	b.n	800658c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	440a      	add	r2, r1
 800657e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006582:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	e000      	b.n	800658c <USB_HC_Halt+0x1ea>
          break;
 800658a:	bf00      	nop
    }
  }

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3724      	adds	r7, #36	; 0x24
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
	...

0800659c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065b0:	2301      	movs	r3, #1
 80065b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	04da      	lsls	r2, r3, #19
 80065b8:	4b15      	ldr	r3, [pc, #84]	; (8006610 <USB_DoPing+0x74>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fa:	461a      	mov	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	1ff80000 	.word	0x1ff80000

08006614 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff f911 	bl	8005850 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800662e:	2110      	movs	r1, #16
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff f96b 	bl	800590c <USB_FlushTxFifo>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff f997 	bl	8005974 <USB_FlushRxFifo>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006650:	2300      	movs	r3, #0
 8006652:	61bb      	str	r3, [r7, #24]
 8006654:	e01f      	b.n	8006696 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	4413      	add	r3, r2
 800665e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800666c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006674:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800667c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	4413      	add	r3, r2
 8006686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668a:	461a      	mov	r2, r3
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	3301      	adds	r3, #1
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2b0f      	cmp	r3, #15
 800669a:	d9dc      	bls.n	8006656 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e034      	b.n	800670c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d6:	461a      	mov	r2, r3
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3301      	adds	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066e8:	d80c      	bhi.n	8006704 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006700:	d0ec      	beq.n	80066dc <USB_StopHost+0xc8>
 8006702:	e000      	b.n	8006706 <USB_StopHost+0xf2>
        break;
 8006704:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	3301      	adds	r3, #1
 800670a:	61bb      	str	r3, [r7, #24]
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b0f      	cmp	r3, #15
 8006710:	d9c7      	bls.n	80066a2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006718:	461a      	mov	r2, r3
 800671a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800671e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006726:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff f880 	bl	800582e <USB_EnableGlobalInt>

  return ret;
 800672e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3720      	adds	r7, #32
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006738:	b590      	push	{r4, r7, lr}
 800673a:	b089      	sub	sp, #36	; 0x24
 800673c:	af04      	add	r7, sp, #16
 800673e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006740:	2301      	movs	r3, #1
 8006742:	2202      	movs	r2, #2
 8006744:	2102      	movs	r1, #2
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fc66 	bl	8007018 <USBH_FindInterface>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2bff      	cmp	r3, #255	; 0xff
 8006754:	d002      	beq.n	800675c <USBH_CDC_InterfaceInit+0x24>
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d901      	bls.n	8006760 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800675c:	2302      	movs	r3, #2
 800675e:	e13d      	b.n	80069dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fc3b 	bl	8006fe0 <USBH_SelectInterface>
 800676a:	4603      	mov	r3, r0
 800676c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800676e:	7bbb      	ldrb	r3, [r7, #14]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006774:	2302      	movs	r3, #2
 8006776:	e131      	b.n	80069dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800677e:	2050      	movs	r0, #80	; 0x50
 8006780:	f002 fafa 	bl	8008d78 <malloc>
 8006784:	4603      	mov	r3, r0
 8006786:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006798:	2302      	movs	r3, #2
 800679a:	e11f      	b.n	80069dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800679c:	2250      	movs	r2, #80	; 0x50
 800679e:	2100      	movs	r1, #0
 80067a0:	68b8      	ldr	r0, [r7, #8]
 80067a2:	f002 faf9 	bl	8008d98 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	211a      	movs	r1, #26
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da15      	bge.n	80067ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	211a      	movs	r1, #26
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	4413      	add	r3, r2
 80067ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067ce:	781a      	ldrb	r2, [r3, #0]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	211a      	movs	r1, #26
 80067da:	fb01 f303 	mul.w	r3, r1, r3
 80067de:	4413      	add	r3, r2
 80067e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067e4:	881a      	ldrh	r2, [r3, #0]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	785b      	ldrb	r3, [r3, #1]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 ff2c 	bl	800864e <USBH_AllocPipe>
 80067f6:	4603      	mov	r3, r0
 80067f8:	461a      	mov	r2, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	7819      	ldrb	r1, [r3, #0]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	7858      	ldrb	r0, [r3, #1]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	8952      	ldrh	r2, [r2, #10]
 8006816:	9202      	str	r2, [sp, #8]
 8006818:	2203      	movs	r2, #3
 800681a:	9201      	str	r2, [sp, #4]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	4623      	mov	r3, r4
 8006820:	4602      	mov	r2, r0
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fee4 	bl	80085f0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2200      	movs	r2, #0
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f002 f9f3 	bl	8008c1c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006836:	2300      	movs	r3, #0
 8006838:	2200      	movs	r2, #0
 800683a:	210a      	movs	r1, #10
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fbeb 	bl	8007018 <USBH_FindInterface>
 8006842:	4603      	mov	r3, r0
 8006844:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	2bff      	cmp	r3, #255	; 0xff
 800684a:	d002      	beq.n	8006852 <USBH_CDC_InterfaceInit+0x11a>
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d901      	bls.n	8006856 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006852:	2302      	movs	r3, #2
 8006854:	e0c2      	b.n	80069dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	211a      	movs	r1, #26
 800685c:	fb01 f303 	mul.w	r3, r1, r3
 8006860:	4413      	add	r3, r2
 8006862:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	b25b      	sxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	da16      	bge.n	800689c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	211a      	movs	r1, #26
 8006874:	fb01 f303 	mul.w	r3, r1, r3
 8006878:	4413      	add	r3, r2
 800687a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800687e:	781a      	ldrb	r2, [r3, #0]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	211a      	movs	r1, #26
 800688a:	fb01 f303 	mul.w	r3, r1, r3
 800688e:	4413      	add	r3, r2
 8006890:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006894:	881a      	ldrh	r2, [r3, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	835a      	strh	r2, [r3, #26]
 800689a:	e015      	b.n	80068c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	211a      	movs	r1, #26
 80068a2:	fb01 f303 	mul.w	r3, r1, r3
 80068a6:	4413      	add	r3, r2
 80068a8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068ac:	781a      	ldrb	r2, [r3, #0]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	211a      	movs	r1, #26
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	4413      	add	r3, r2
 80068be:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068c2:	881a      	ldrh	r2, [r3, #0]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	211a      	movs	r1, #26
 80068ce:	fb01 f303 	mul.w	r3, r1, r3
 80068d2:	4413      	add	r3, r2
 80068d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	b25b      	sxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	da16      	bge.n	800690e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	211a      	movs	r1, #26
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
 80068ea:	4413      	add	r3, r2
 80068ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068f0:	781a      	ldrb	r2, [r3, #0]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	211a      	movs	r1, #26
 80068fc:	fb01 f303 	mul.w	r3, r1, r3
 8006900:	4413      	add	r3, r2
 8006902:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006906:	881a      	ldrh	r2, [r3, #0]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	835a      	strh	r2, [r3, #26]
 800690c:	e015      	b.n	800693a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	211a      	movs	r1, #26
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	4413      	add	r3, r2
 800691a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800691e:	781a      	ldrb	r2, [r3, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	211a      	movs	r1, #26
 800692a:	fb01 f303 	mul.w	r3, r1, r3
 800692e:	4413      	add	r3, r2
 8006930:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006934:	881a      	ldrh	r2, [r3, #0]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	7b9b      	ldrb	r3, [r3, #14]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 fe84 	bl	800864e <USBH_AllocPipe>
 8006946:	4603      	mov	r3, r0
 8006948:	461a      	mov	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	7bdb      	ldrb	r3, [r3, #15]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 fe7a 	bl	800864e <USBH_AllocPipe>
 800695a:	4603      	mov	r3, r0
 800695c:	461a      	mov	r2, r3
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	7b59      	ldrb	r1, [r3, #13]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	7b98      	ldrb	r0, [r3, #14]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	8b12      	ldrh	r2, [r2, #24]
 800697a:	9202      	str	r2, [sp, #8]
 800697c:	2202      	movs	r2, #2
 800697e:	9201      	str	r2, [sp, #4]
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	4623      	mov	r3, r4
 8006984:	4602      	mov	r2, r0
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 fe32 	bl	80085f0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	7b19      	ldrb	r1, [r3, #12]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	7bd8      	ldrb	r0, [r3, #15]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	8b52      	ldrh	r2, [r2, #26]
 80069a4:	9202      	str	r2, [sp, #8]
 80069a6:	2202      	movs	r2, #2
 80069a8:	9201      	str	r2, [sp, #4]
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4623      	mov	r3, r4
 80069ae:	4602      	mov	r2, r0
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fe1d 	bl	80085f0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	7b5b      	ldrb	r3, [r3, #13]
 80069c2:	2200      	movs	r2, #0
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f002 f928 	bl	8008c1c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	7b1b      	ldrb	r3, [r3, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f002 f921 	bl	8008c1c <USBH_LL_SetToggle>

  return USBH_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd90      	pop	{r4, r7, pc}

080069e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00e      	beq.n	8006a1c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fe12 	bl	800862e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 fe3d 	bl	8008690 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	7b1b      	ldrb	r3, [r3, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00e      	beq.n	8006a42 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	7b1b      	ldrb	r3, [r3, #12]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 fdff 	bl	800862e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	7b1b      	ldrb	r3, [r3, #12]
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fe2a 	bl	8008690 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	7b5b      	ldrb	r3, [r3, #13]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00e      	beq.n	8006a68 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	7b5b      	ldrb	r3, [r3, #13]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fdec 	bl	800862e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	7b5b      	ldrb	r3, [r3, #13]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 fe17 	bl	8008690 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f002 f983 	bl	8008d88 <free>
    phost->pActiveClass->pData = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a88:	2200      	movs	r2, #0
 8006a8a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3340      	adds	r3, #64	; 0x40
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f8b1 	bl	8006c16 <GetLineCoding>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ab8:	7afb      	ldrb	r3, [r7, #11]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d105      	bne.n	8006aca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ac4:	2102      	movs	r1, #2
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006aca:	7afb      	ldrb	r3, [r7, #11]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006adc:	2301      	movs	r3, #1
 8006ade:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d877      	bhi.n	8006be8 <USBH_CDC_Process+0x114>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <USBH_CDC_Process+0x2c>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b15 	.word	0x08006b15
 8006b04:	08006b1b 	.word	0x08006b1b
 8006b08:	08006b4b 	.word	0x08006b4b
 8006b0c:	08006bbf 	.word	0x08006bbf
 8006b10:	08006bcd 	.word	0x08006bcd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]
      break;
 8006b18:	e06d      	b.n	8006bf6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f897 	bl	8006c54 <SetLineCoding>
 8006b26:	4603      	mov	r3, r0
 8006b28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b38:	e058      	b.n	8006bec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d055      	beq.n	8006bec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2204      	movs	r2, #4
 8006b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b48:	e050      	b.n	8006bec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	3340      	adds	r3, #64	; 0x40
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f860 	bl	8006c16 <GetLineCoding>
 8006b56:	4603      	mov	r3, r0
 8006b58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b5a:	7bbb      	ldrb	r3, [r7, #14]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d126      	bne.n	8006bae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b72:	791b      	ldrb	r3, [r3, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d13b      	bne.n	8006bf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b82:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d133      	bne.n	8006bf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b92:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d12b      	bne.n	8006bf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d124      	bne.n	8006bf0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f958 	bl	8006e5c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bac:	e020      	b.n	8006bf0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d01d      	beq.n	8006bf0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bbc:	e018      	b.n	8006bf0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f867 	bl	8006c92 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f8da 	bl	8006d7e <CDC_ProcessReception>
      break;
 8006bca:	e014      	b.n	8006bf6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006bcc:	2100      	movs	r1, #0
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 ffef 	bl	8007bb2 <USBH_ClrFeature>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006be6:	e005      	b.n	8006bf4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006be8:	bf00      	nop
 8006bea:	e004      	b.n	8006bf6 <USBH_CDC_Process+0x122>
      break;
 8006bec:	bf00      	nop
 8006bee:	e002      	b.n	8006bf6 <USBH_CDC_Process+0x122>
      break;
 8006bf0:	bf00      	nop
 8006bf2:	e000      	b.n	8006bf6 <USBH_CDC_Process+0x122>
      break;
 8006bf4:	bf00      	nop

  }

  return status;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b082      	sub	sp, #8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	22a1      	movs	r2, #161	; 0xa1
 8006c24:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2221      	movs	r2, #33	; 0x21
 8006c2a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2207      	movs	r2, #7
 8006c3c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2207      	movs	r2, #7
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 fa81 	bl	800814c <USBH_CtlReq>
 8006c4a:	4603      	mov	r3, r0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2221      	movs	r2, #33	; 0x21
 8006c62:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2207      	movs	r2, #7
 8006c7a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2207      	movs	r2, #7
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fa62 	bl	800814c <USBH_CtlReq>
 8006c88:	4603      	mov	r3, r0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b086      	sub	sp, #24
 8006c96:	af02      	add	r7, sp, #8
 8006c98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d002      	beq.n	8006cb8 <CDC_ProcessTransmission+0x26>
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d023      	beq.n	8006cfe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006cb6:	e05e      	b.n	8006d76 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	8b12      	ldrh	r2, [r2, #24]
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d90b      	bls.n	8006cdc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	69d9      	ldr	r1, [r3, #28]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8b1a      	ldrh	r2, [r3, #24]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	7b5b      	ldrb	r3, [r3, #13]
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	9000      	str	r0, [sp, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 fc48 	bl	800856a <USBH_BulkSendData>
 8006cda:	e00b      	b.n	8006cf4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	7b5b      	ldrb	r3, [r3, #13]
 8006cea:	2001      	movs	r0, #1
 8006cec:	9000      	str	r0, [sp, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 fc3b 	bl	800856a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006cfc:	e03b      	b.n	8006d76 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	7b5b      	ldrb	r3, [r3, #13]
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 ff5f 	bl	8008bc8 <USBH_LL_GetURBState>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d0e:	7afb      	ldrb	r3, [r7, #11]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d128      	bne.n	8006d66 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	8b12      	ldrh	r2, [r2, #24]
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d90e      	bls.n	8006d3e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	8b12      	ldrh	r2, [r2, #24]
 8006d28:	1a9a      	subs	r2, r3, r2
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	8b12      	ldrh	r2, [r2, #24]
 8006d36:	441a      	add	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	61da      	str	r2, [r3, #28]
 8006d3c:	e002      	b.n	8006d44 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d54:	e00e      	b.n	8006d74 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f868 	bl	8006e34 <USBH_CDC_TransmitCallback>
      break;
 8006d64:	e006      	b.n	8006d74 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d66:	7afb      	ldrb	r3, [r7, #11]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d103      	bne.n	8006d74 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d74:	bf00      	nop
  }
}
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d002      	beq.n	8006da4 <CDC_ProcessReception+0x26>
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d00e      	beq.n	8006dc0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006da2:	e043      	b.n	8006e2c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	6a19      	ldr	r1, [r3, #32]
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	8b5a      	ldrh	r2, [r3, #26]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	7b1b      	ldrb	r3, [r3, #12]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 fbff 	bl	80085b4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2204      	movs	r2, #4
 8006dba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006dbe:	e035      	b.n	8006e2c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	7b1b      	ldrb	r3, [r3, #12]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 fefe 	bl	8008bc8 <USBH_LL_GetURBState>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006dd0:	7cfb      	ldrb	r3, [r7, #19]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d129      	bne.n	8006e2a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	7b1b      	ldrb	r3, [r3, #12]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fe61 	bl	8008aa4 <USBH_LL_GetLastXferSize>
 8006de2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d016      	beq.n	8006e1c <CDC_ProcessReception+0x9e>
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	8b5b      	ldrh	r3, [r3, #26]
 8006df2:	461a      	mov	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d910      	bls.n	8006e1c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1ad2      	subs	r2, r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	6a1a      	ldr	r2, [r3, #32]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	441a      	add	r2, r3
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2203      	movs	r2, #3
 8006e16:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e1a:	e006      	b.n	8006e2a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f80f 	bl	8006e48 <USBH_CDC_ReceiveCallback>
      break;
 8006e2a:	bf00      	nop
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e84:	2302      	movs	r3, #2
 8006e86:	e029      	b.n	8006edc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	79fa      	ldrb	r2, [r7, #7]
 8006e8c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f81f 	bl	8006ee4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f001 fd31 	bl	800893c <USBH_LL_Init>

  return USBH_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e009      	b.n	8006f0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	33e0      	adds	r3, #224	; 0xe0
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	2200      	movs	r2, #0
 8006f02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b0f      	cmp	r3, #15
 8006f0e:	d9f2      	bls.n	8006ef6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e009      	b.n	8006f2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f30:	d3f1      	bcc.n	8006f16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2240      	movs	r2, #64	; 0x40
 8006f56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d016      	beq.n	8006fce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10e      	bne.n	8006fc8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fb0:	1c59      	adds	r1, r3, #1
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	33de      	adds	r3, #222	; 0xde
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]
 8006fc6:	e004      	b.n	8006fd2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	73fb      	strb	r3, [r7, #15]
 8006fcc:	e001      	b.n	8006fd2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006fce:	2302      	movs	r3, #2
 8006fd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006ff6:	78fa      	ldrb	r2, [r7, #3]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d204      	bcs.n	8007006 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	78fa      	ldrb	r2, [r7, #3]
 8007000:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007004:	e001      	b.n	800700a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007006:	2302      	movs	r3, #2
 8007008:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	461a      	mov	r2, r3
 8007026:	4603      	mov	r3, r0
 8007028:	70fb      	strb	r3, [r7, #3]
 800702a:	460b      	mov	r3, r1
 800702c:	70bb      	strb	r3, [r7, #2]
 800702e:	4613      	mov	r3, r2
 8007030:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007036:	2300      	movs	r3, #0
 8007038:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007040:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007042:	e025      	b.n	8007090 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	221a      	movs	r2, #26
 8007048:	fb02 f303 	mul.w	r3, r2, r3
 800704c:	3308      	adds	r3, #8
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	3302      	adds	r3, #2
 8007054:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	795b      	ldrb	r3, [r3, #5]
 800705a:	78fa      	ldrb	r2, [r7, #3]
 800705c:	429a      	cmp	r2, r3
 800705e:	d002      	beq.n	8007066 <USBH_FindInterface+0x4e>
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	2bff      	cmp	r3, #255	; 0xff
 8007064:	d111      	bne.n	800708a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800706a:	78ba      	ldrb	r2, [r7, #2]
 800706c:	429a      	cmp	r2, r3
 800706e:	d002      	beq.n	8007076 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007070:	78bb      	ldrb	r3, [r7, #2]
 8007072:	2bff      	cmp	r3, #255	; 0xff
 8007074:	d109      	bne.n	800708a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800707a:	787a      	ldrb	r2, [r7, #1]
 800707c:	429a      	cmp	r2, r3
 800707e:	d002      	beq.n	8007086 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007080:	787b      	ldrb	r3, [r7, #1]
 8007082:	2bff      	cmp	r3, #255	; 0xff
 8007084:	d101      	bne.n	800708a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	e006      	b.n	8007098 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	3301      	adds	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d9d6      	bls.n	8007044 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007096:	23ff      	movs	r3, #255	; 0xff
}
 8007098:	4618      	mov	r0, r3
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 fc81 	bl	80089b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80070b2:	2101      	movs	r1, #1
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fd9a 	bl	8008bee <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af04      	add	r7, sp, #16
 80070ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80070cc:	2302      	movs	r3, #2
 80070ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d102      	bne.n	80070e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2203      	movs	r2, #3
 80070e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b0b      	cmp	r3, #11
 80070ee:	f200 81be 	bhi.w	800746e <USBH_Process+0x3aa>
 80070f2:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <USBH_Process+0x34>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	08007129 	.word	0x08007129
 80070fc:	0800715b 	.word	0x0800715b
 8007100:	080071c3 	.word	0x080071c3
 8007104:	08007409 	.word	0x08007409
 8007108:	0800746f 	.word	0x0800746f
 800710c:	08007267 	.word	0x08007267
 8007110:	080073af 	.word	0x080073af
 8007114:	0800729d 	.word	0x0800729d
 8007118:	080072bd 	.word	0x080072bd
 800711c:	080072dd 	.word	0x080072dd
 8007120:	08007321 	.word	0x08007321
 8007124:	080073f1 	.word	0x080073f1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 819e 	beq.w	8007472 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800713c:	20c8      	movs	r0, #200	; 0xc8
 800713e:	f001 fd9d 	bl	8008c7c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 fc93 	bl	8008a6e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007158:	e18b      	b.n	8007472 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007160:	2b01      	cmp	r3, #1
 8007162:	d107      	bne.n	8007174 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007172:	e18d      	b.n	8007490 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800717a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800717e:	d914      	bls.n	80071aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007186:	3301      	adds	r3, #1
 8007188:	b2da      	uxtb	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007196:	2b03      	cmp	r3, #3
 8007198:	d903      	bls.n	80071a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	220d      	movs	r2, #13
 800719e:	701a      	strb	r2, [r3, #0]
      break;
 80071a0:	e176      	b.n	8007490 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	701a      	strb	r2, [r3, #0]
      break;
 80071a8:	e172      	b.n	8007490 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071b0:	f103 020a 	add.w	r2, r3, #10
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80071ba:	200a      	movs	r0, #10
 80071bc:	f001 fd5e 	bl	8008c7c <USBH_Delay>
      break;
 80071c0:	e166      	b.n	8007490 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071d2:	2104      	movs	r1, #4
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80071d8:	2064      	movs	r0, #100	; 0x64
 80071da:	f001 fd4f 	bl	8008c7c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f001 fc1e 	bl	8008a20 <USBH_LL_GetSpeed>
 80071e4:	4603      	mov	r3, r0
 80071e6:	461a      	mov	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2205      	movs	r2, #5
 80071f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80071f4:	2100      	movs	r1, #0
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 fa29 	bl	800864e <USBH_AllocPipe>
 80071fc:	4603      	mov	r3, r0
 80071fe:	461a      	mov	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007204:	2180      	movs	r1, #128	; 0x80
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 fa21 	bl	800864e <USBH_AllocPipe>
 800720c:	4603      	mov	r3, r0
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	7919      	ldrb	r1, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007228:	b292      	uxth	r2, r2
 800722a:	9202      	str	r2, [sp, #8]
 800722c:	2200      	movs	r2, #0
 800722e:	9201      	str	r2, [sp, #4]
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	4603      	mov	r3, r0
 8007234:	2280      	movs	r2, #128	; 0x80
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 f9da 	bl	80085f0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	7959      	ldrb	r1, [r3, #5]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007250:	b292      	uxth	r2, r2
 8007252:	9202      	str	r2, [sp, #8]
 8007254:	2200      	movs	r2, #0
 8007256:	9201      	str	r2, [sp, #4]
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	4603      	mov	r3, r0
 800725c:	2200      	movs	r2, #0
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 f9c6 	bl	80085f0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007264:	e114      	b.n	8007490 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f918 	bl	800749c <USBH_HandleEnum>
 800726c:	4603      	mov	r3, r0
 800726e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	f040 80fe 	bne.w	8007476 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007288:	2b01      	cmp	r3, #1
 800728a:	d103      	bne.n	8007294 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2208      	movs	r2, #8
 8007290:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007292:	e0f0      	b.n	8007476 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2207      	movs	r2, #7
 8007298:	701a      	strb	r2, [r3, #0]
      break;
 800729a:	e0ec      	b.n	8007476 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80e9 	beq.w	800747a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072ae:	2101      	movs	r1, #1
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2208      	movs	r2, #8
 80072b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80072ba:	e0de      	b.n	800747a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fc2c 	bl	8007b24 <USBH_SetCfg>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f040 80d5 	bne.w	800747e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2209      	movs	r2, #9
 80072d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072da:	e0d0      	b.n	800747e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d016      	beq.n	8007318 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80072ea:	2101      	movs	r1, #1
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fc3c 	bl	8007b6a <USBH_SetFeature>
 80072f2:	4603      	mov	r3, r0
 80072f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d103      	bne.n	8007306 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	220a      	movs	r2, #10
 8007302:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007304:	e0bd      	b.n	8007482 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b03      	cmp	r3, #3
 800730c:	f040 80b9 	bne.w	8007482 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	220a      	movs	r2, #10
 8007314:	701a      	strb	r2, [r3, #0]
      break;
 8007316:	e0b4      	b.n	8007482 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	220a      	movs	r2, #10
 800731c:	701a      	strb	r2, [r3, #0]
      break;
 800731e:	e0b0      	b.n	8007482 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 80ad 	beq.w	8007486 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
 8007338:	e016      	b.n	8007368 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800733a:	7bfa      	ldrb	r2, [r7, #15]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	32de      	adds	r2, #222	; 0xde
 8007340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007344:	791a      	ldrb	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800734c:	429a      	cmp	r2, r3
 800734e:	d108      	bne.n	8007362 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007350:	7bfa      	ldrb	r2, [r7, #15]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	32de      	adds	r2, #222	; 0xde
 8007356:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007360:	e005      	b.n	800736e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	3301      	adds	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0e5      	beq.n	800733a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d016      	beq.n	80073a6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d109      	bne.n	800739e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2206      	movs	r2, #6
 800738e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007396:	2103      	movs	r1, #3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800739c:	e073      	b.n	8007486 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	220d      	movs	r2, #13
 80073a2:	701a      	strb	r2, [r3, #0]
      break;
 80073a4:	e06f      	b.n	8007486 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	220d      	movs	r2, #13
 80073aa:	701a      	strb	r2, [r3, #0]
      break;
 80073ac:	e06b      	b.n	8007486 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d017      	beq.n	80073e8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	4798      	blx	r3
 80073c4:	4603      	mov	r3, r0
 80073c6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d103      	bne.n	80073d8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	220b      	movs	r2, #11
 80073d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073d6:	e058      	b.n	800748a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d154      	bne.n	800748a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	220d      	movs	r2, #13
 80073e4:	701a      	strb	r2, [r3, #0]
      break;
 80073e6:	e050      	b.n	800748a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	220d      	movs	r2, #13
 80073ec:	701a      	strb	r2, [r3, #0]
      break;
 80073ee:	e04c      	b.n	800748a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d049      	beq.n	800748e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	4798      	blx	r3
      }
      break;
 8007406:	e042      	b.n	800748e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7ff fd67 	bl	8006ee4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800741c:	2b00      	cmp	r3, #0
 800741e:	d009      	beq.n	8007434 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d005      	beq.n	800744a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007444:	2105      	movs	r1, #5
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b01      	cmp	r3, #1
 8007454:	d107      	bne.n	8007466 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7ff fe20 	bl	80070a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007464:	e014      	b.n	8007490 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 faa4 	bl	80089b4 <USBH_LL_Start>
      break;
 800746c:	e010      	b.n	8007490 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800746e:	bf00      	nop
 8007470:	e00e      	b.n	8007490 <USBH_Process+0x3cc>
      break;
 8007472:	bf00      	nop
 8007474:	e00c      	b.n	8007490 <USBH_Process+0x3cc>
      break;
 8007476:	bf00      	nop
 8007478:	e00a      	b.n	8007490 <USBH_Process+0x3cc>
    break;
 800747a:	bf00      	nop
 800747c:	e008      	b.n	8007490 <USBH_Process+0x3cc>
      break;
 800747e:	bf00      	nop
 8007480:	e006      	b.n	8007490 <USBH_Process+0x3cc>
      break;
 8007482:	bf00      	nop
 8007484:	e004      	b.n	8007490 <USBH_Process+0x3cc>
      break;
 8007486:	bf00      	nop
 8007488:	e002      	b.n	8007490 <USBH_Process+0x3cc>
      break;
 800748a:	bf00      	nop
 800748c:	e000      	b.n	8007490 <USBH_Process+0x3cc>
      break;
 800748e:	bf00      	nop
  }
  return USBH_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop

0800749c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af04      	add	r7, sp, #16
 80074a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074a4:	2301      	movs	r3, #1
 80074a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80074a8:	2301      	movs	r3, #1
 80074aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	2b07      	cmp	r3, #7
 80074b2:	f200 81c1 	bhi.w	8007838 <USBH_HandleEnum+0x39c>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <USBH_HandleEnum+0x20>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074dd 	.word	0x080074dd
 80074c0:	0800759b 	.word	0x0800759b
 80074c4:	08007605 	.word	0x08007605
 80074c8:	08007693 	.word	0x08007693
 80074cc:	080076fd 	.word	0x080076fd
 80074d0:	0800776d 	.word	0x0800776d
 80074d4:	080077b3 	.word	0x080077b3
 80074d8:	080077f9 	.word	0x080077f9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80074dc:	2108      	movs	r1, #8
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa50 	bl	8007984 <USBH_Get_DevDesc>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d130      	bne.n	8007550 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7919      	ldrb	r1, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007512:	b292      	uxth	r2, r2
 8007514:	9202      	str	r2, [sp, #8]
 8007516:	2200      	movs	r2, #0
 8007518:	9201      	str	r2, [sp, #4]
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	4603      	mov	r3, r0
 800751e:	2280      	movs	r2, #128	; 0x80
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 f865 	bl	80085f0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	7959      	ldrb	r1, [r3, #5]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800753a:	b292      	uxth	r2, r2
 800753c:	9202      	str	r2, [sp, #8]
 800753e:	2200      	movs	r2, #0
 8007540:	9201      	str	r2, [sp, #4]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	4603      	mov	r3, r0
 8007546:	2200      	movs	r2, #0
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f001 f851 	bl	80085f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800754e:	e175      	b.n	800783c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b03      	cmp	r3, #3
 8007554:	f040 8172 	bne.w	800783c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800755e:	3301      	adds	r3, #1
 8007560:	b2da      	uxtb	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800756e:	2b03      	cmp	r3, #3
 8007570:	d903      	bls.n	800757a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	220d      	movs	r2, #13
 8007576:	701a      	strb	r2, [r3, #0]
      break;
 8007578:	e160      	b.n	800783c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	795b      	ldrb	r3, [r3, #5]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 f885 	bl	8008690 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	791b      	ldrb	r3, [r3, #4]
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 f87f 	bl	8008690 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	701a      	strb	r2, [r3, #0]
      break;
 8007598:	e150      	b.n	800783c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800759a:	2112      	movs	r1, #18
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f9f1 	bl	8007984 <USBH_Get_DevDesc>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075b2:	e145      	b.n	8007840 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	f040 8142 	bne.w	8007840 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075c2:	3301      	adds	r3, #1
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d903      	bls.n	80075de <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	220d      	movs	r2, #13
 80075da:	701a      	strb	r2, [r3, #0]
      break;
 80075dc:	e130      	b.n	8007840 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	795b      	ldrb	r3, [r3, #5]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 f853 	bl	8008690 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	791b      	ldrb	r3, [r3, #4]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 f84d 	bl	8008690 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
      break;
 8007602:	e11d      	b.n	8007840 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007604:	2101      	movs	r1, #1
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa68 	bl	8007adc <USBH_SetAddress>
 800760c:	4603      	mov	r3, r0
 800760e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d132      	bne.n	800767c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007616:	2002      	movs	r0, #2
 8007618:	f001 fb30 	bl	8008c7c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2203      	movs	r2, #3
 8007628:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	7919      	ldrb	r1, [r3, #4]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800763e:	b292      	uxth	r2, r2
 8007640:	9202      	str	r2, [sp, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	9201      	str	r2, [sp, #4]
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	4603      	mov	r3, r0
 800764a:	2280      	movs	r2, #128	; 0x80
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 ffcf 	bl	80085f0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7959      	ldrb	r1, [r3, #5]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007666:	b292      	uxth	r2, r2
 8007668:	9202      	str	r2, [sp, #8]
 800766a:	2200      	movs	r2, #0
 800766c:	9201      	str	r2, [sp, #4]
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	4603      	mov	r3, r0
 8007672:	2200      	movs	r2, #0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 ffbb 	bl	80085f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800767a:	e0e3      	b.n	8007844 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	2b03      	cmp	r3, #3
 8007680:	f040 80e0 	bne.w	8007844 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	220d      	movs	r2, #13
 8007688:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	705a      	strb	r2, [r3, #1]
      break;
 8007690:	e0d8      	b.n	8007844 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007692:	2109      	movs	r1, #9
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f99d 	bl	80079d4 <USBH_Get_CfgDesc>
 800769a:	4603      	mov	r3, r0
 800769c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d103      	bne.n	80076ac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2204      	movs	r2, #4
 80076a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076aa:	e0cd      	b.n	8007848 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	f040 80ca 	bne.w	8007848 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ba:	3301      	adds	r3, #1
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d903      	bls.n	80076d6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	220d      	movs	r2, #13
 80076d2:	701a      	strb	r2, [r3, #0]
      break;
 80076d4:	e0b8      	b.n	8007848 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	795b      	ldrb	r3, [r3, #5]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 ffd7 	bl	8008690 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	791b      	ldrb	r3, [r3, #4]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 ffd1 	bl	8008690 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
      break;
 80076fa:	e0a5      	b.n	8007848 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f965 	bl	80079d4 <USBH_Get_CfgDesc>
 800770a:	4603      	mov	r3, r0
 800770c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800770e:	7bbb      	ldrb	r3, [r7, #14]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2205      	movs	r2, #5
 8007718:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800771a:	e097      	b.n	800784c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	2b03      	cmp	r3, #3
 8007720:	f040 8094 	bne.w	800784c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800772a:	3301      	adds	r3, #1
 800772c:	b2da      	uxtb	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800773a:	2b03      	cmp	r3, #3
 800773c:	d903      	bls.n	8007746 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	220d      	movs	r2, #13
 8007742:	701a      	strb	r2, [r3, #0]
      break;
 8007744:	e082      	b.n	800784c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	795b      	ldrb	r3, [r3, #5]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 ff9f 	bl	8008690 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	791b      	ldrb	r3, [r3, #4]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 ff99 	bl	8008690 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
      break;
 800776a:	e06f      	b.n	800784c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007772:	2b00      	cmp	r3, #0
 8007774:	d019      	beq.n	80077aa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007782:	23ff      	movs	r3, #255	; 0xff
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f949 	bl	8007a1c <USBH_Get_StringDesc>
 800778a:	4603      	mov	r3, r0
 800778c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d103      	bne.n	800779c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2206      	movs	r2, #6
 8007798:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800779a:	e059      	b.n	8007850 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d156      	bne.n	8007850 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2206      	movs	r2, #6
 80077a6:	705a      	strb	r2, [r3, #1]
      break;
 80077a8:	e052      	b.n	8007850 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2206      	movs	r2, #6
 80077ae:	705a      	strb	r2, [r3, #1]
      break;
 80077b0:	e04e      	b.n	8007850 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d019      	beq.n	80077f0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077c8:	23ff      	movs	r3, #255	; 0xff
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f926 	bl	8007a1c <USBH_Get_StringDesc>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d103      	bne.n	80077e2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2207      	movs	r2, #7
 80077de:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077e0:	e038      	b.n	8007854 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d135      	bne.n	8007854 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2207      	movs	r2, #7
 80077ec:	705a      	strb	r2, [r3, #1]
      break;
 80077ee:	e031      	b.n	8007854 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2207      	movs	r2, #7
 80077f4:	705a      	strb	r2, [r3, #1]
      break;
 80077f6:	e02d      	b.n	8007854 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d017      	beq.n	8007832 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800780e:	23ff      	movs	r3, #255	; 0xff
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f903 	bl	8007a1c <USBH_Get_StringDesc>
 8007816:	4603      	mov	r3, r0
 8007818:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d102      	bne.n	8007826 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007824:	e018      	b.n	8007858 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	2b03      	cmp	r3, #3
 800782a:	d115      	bne.n	8007858 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
      break;
 8007830:	e012      	b.n	8007858 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
      break;
 8007836:	e00f      	b.n	8007858 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007838:	bf00      	nop
 800783a:	e00e      	b.n	800785a <USBH_HandleEnum+0x3be>
      break;
 800783c:	bf00      	nop
 800783e:	e00c      	b.n	800785a <USBH_HandleEnum+0x3be>
      break;
 8007840:	bf00      	nop
 8007842:	e00a      	b.n	800785a <USBH_HandleEnum+0x3be>
      break;
 8007844:	bf00      	nop
 8007846:	e008      	b.n	800785a <USBH_HandleEnum+0x3be>
      break;
 8007848:	bf00      	nop
 800784a:	e006      	b.n	800785a <USBH_HandleEnum+0x3be>
      break;
 800784c:	bf00      	nop
 800784e:	e004      	b.n	800785a <USBH_HandleEnum+0x3be>
      break;
 8007850:	bf00      	nop
 8007852:	e002      	b.n	800785a <USBH_HandleEnum+0x3be>
      break;
 8007854:	bf00      	nop
 8007856:	e000      	b.n	800785a <USBH_HandleEnum+0x3be>
      break;
 8007858:	bf00      	nop
  }
  return Status;
 800785a:	7bfb      	ldrb	r3, [r7, #15]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f804 	bl	80078a6 <USBH_HandleSof>
}
 800789e:	bf00      	nop
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b0b      	cmp	r3, #11
 80078b6:	d10a      	bne.n	80078ce <USBH_HandleSof+0x28>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	4798      	blx	r3
  }
}
 80078ce:	bf00      	nop
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80078e6:	bf00      	nop
}
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007902:	bf00      	nop
}
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 f844 	bl	80089ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	791b      	ldrb	r3, [r3, #4]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fe91 	bl	8008690 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	795b      	ldrb	r3, [r3, #5]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fe8b 	bl	8008690 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af02      	add	r7, sp, #8
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007996:	78fb      	ldrb	r3, [r7, #3]
 8007998:	b29b      	uxth	r3, r3
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	4613      	mov	r3, r2
 800799e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079a2:	2100      	movs	r1, #0
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f864 	bl	8007a72 <USBH_GetDescriptor>
 80079aa:	4603      	mov	r3, r0
 80079ac:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	b292      	uxth	r2, r2
 80079c4:	4619      	mov	r1, r3
 80079c6:	f000 f918 	bl	8007bfa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af02      	add	r7, sp, #8
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	331c      	adds	r3, #28
 80079e4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80079e6:	887b      	ldrh	r3, [r7, #2]
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079f0:	2100      	movs	r1, #0
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f83d 	bl	8007a72 <USBH_GetDescriptor>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d107      	bne.n	8007a12 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a02:	887b      	ldrh	r3, [r7, #2]
 8007a04:	461a      	mov	r2, r3
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f987 	bl	8007d1c <USBH_ParseCfgDesc>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	607a      	str	r2, [r7, #4]
 8007a26:	461a      	mov	r2, r3
 8007a28:	460b      	mov	r3, r1
 8007a2a:	72fb      	strb	r3, [r7, #11]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007a30:	7afb      	ldrb	r3, [r7, #11]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a38:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a40:	893b      	ldrh	r3, [r7, #8]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	460b      	mov	r3, r1
 8007a46:	2100      	movs	r1, #0
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 f812 	bl	8007a72 <USBH_GetDescriptor>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d107      	bne.n	8007a68 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a5e:	893a      	ldrh	r2, [r7, #8]
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 fb24 	bl	80080b0 <USBH_ParseStringDesc>
  }

  return status;
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	607b      	str	r3, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	72fb      	strb	r3, [r7, #11]
 8007a80:	4613      	mov	r3, r2
 8007a82:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	789b      	ldrb	r3, [r3, #2]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d11c      	bne.n	8007ac6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007a8c:	7afb      	ldrb	r3, [r7, #11]
 8007a8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2206      	movs	r2, #6
 8007a9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	893a      	ldrh	r2, [r7, #8]
 8007aa2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007aa4:	893b      	ldrh	r3, [r7, #8]
 8007aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007aaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aae:	d104      	bne.n	8007aba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f240 4209 	movw	r2, #1033	; 0x409
 8007ab6:	829a      	strh	r2, [r3, #20]
 8007ab8:	e002      	b.n	8007ac0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8b3a      	ldrh	r2, [r7, #24]
 8007ac4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ac6:	8b3b      	ldrh	r3, [r7, #24]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 fb3d 	bl	800814c <USBH_CtlReq>
 8007ad2:	4603      	mov	r3, r0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	789b      	ldrb	r3, [r3, #2]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d10f      	bne.n	8007b10 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2205      	movs	r2, #5
 8007afa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b10:	2200      	movs	r2, #0
 8007b12:	2100      	movs	r1, #0
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fb19 	bl	800814c <USBH_CtlReq>
 8007b1a:	4603      	mov	r3, r0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	789b      	ldrb	r3, [r3, #2]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d10e      	bne.n	8007b56 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2209      	movs	r2, #9
 8007b42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	887a      	ldrh	r2, [r7, #2]
 8007b48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b56:	2200      	movs	r2, #0
 8007b58:	2100      	movs	r1, #0
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 faf6 	bl	800814c <USBH_CtlReq>
 8007b60:	4603      	mov	r3, r0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	460b      	mov	r3, r1
 8007b74:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	789b      	ldrb	r3, [r3, #2]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d10f      	bne.n	8007b9e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2203      	movs	r2, #3
 8007b88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fad2 	bl	800814c <USBH_CtlReq>
 8007ba8:	4603      	mov	r3, r0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	789b      	ldrb	r3, [r3, #2]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d10f      	bne.n	8007be6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007be6:	2200      	movs	r2, #0
 8007be8:	2100      	movs	r1, #0
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 faae 	bl	800814c <USBH_CtlReq>
 8007bf0:	4603      	mov	r3, r0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	4613      	mov	r3, r2
 8007c06:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	781a      	ldrb	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	785a      	ldrb	r2, [r3, #1]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	3303      	adds	r3, #3
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	791a      	ldrb	r2, [r3, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	795a      	ldrb	r2, [r3, #5]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	799a      	ldrb	r2, [r3, #6]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	79da      	ldrb	r2, [r3, #7]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	79db      	ldrb	r3, [r3, #7]
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	dc11      	bgt.n	8007c80 <USBH_ParseDevDesc+0x86>
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	db16      	blt.n	8007c8e <USBH_ParseDevDesc+0x94>
 8007c60:	3b08      	subs	r3, #8
 8007c62:	2201      	movs	r2, #1
 8007c64:	fa02 f303 	lsl.w	r3, r2, r3
 8007c68:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bf14      	ite	ne
 8007c74:	2301      	movne	r3, #1
 8007c76:	2300      	moveq	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d102      	bne.n	8007c84 <USBH_ParseDevDesc+0x8a>
 8007c7e:	e006      	b.n	8007c8e <USBH_ParseDevDesc+0x94>
 8007c80:	2b40      	cmp	r3, #64	; 0x40
 8007c82:	d104      	bne.n	8007c8e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	79da      	ldrb	r2, [r3, #7]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	71da      	strb	r2, [r3, #7]
      break;
 8007c8c:	e003      	b.n	8007c96 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2240      	movs	r2, #64	; 0x40
 8007c92:	71da      	strb	r2, [r3, #7]
      break;
 8007c94:	bf00      	nop
  }

  if (length > 8U)
 8007c96:	88fb      	ldrh	r3, [r7, #6]
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	d939      	bls.n	8007d10 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	3309      	adds	r3, #9
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	330a      	adds	r3, #10
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	330b      	adds	r3, #11
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	330c      	adds	r3, #12
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	330d      	adds	r3, #13
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	7b9a      	ldrb	r2, [r3, #14]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	7bda      	ldrb	r2, [r3, #15]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	7c1a      	ldrb	r2, [r3, #16]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	7c5a      	ldrb	r2, [r3, #17]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	745a      	strb	r2, [r3, #17]
  }
}
 8007d10:	bf00      	nop
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08c      	sub	sp, #48	; 0x30
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d30:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	781a      	ldrb	r2, [r3, #0]
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	785a      	ldrb	r2, [r3, #1]
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	3302      	adds	r3, #2
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	3303      	adds	r3, #3
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	4313      	orrs	r3, r2
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d78:	bf28      	it	cs
 8007d7a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	791a      	ldrb	r2, [r3, #4]
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	795a      	ldrb	r2, [r3, #5]
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	799a      	ldrb	r2, [r3, #6]
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	79da      	ldrb	r2, [r3, #7]
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	7a1a      	ldrb	r2, [r3, #8]
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b09      	cmp	r3, #9
 8007db2:	d002      	beq.n	8007dba <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	2209      	movs	r2, #9
 8007db8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	2b09      	cmp	r3, #9
 8007dbe:	f240 809d 	bls.w	8007efc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007dc2:	2309      	movs	r3, #9
 8007dc4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007dca:	e081      	b.n	8007ed0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007dcc:	f107 0316 	add.w	r3, r7, #22
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd4:	f000 f99f 	bl	8008116 <USBH_GetNextDesc>
 8007dd8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	785b      	ldrb	r3, [r3, #1]
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d176      	bne.n	8007ed0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b09      	cmp	r3, #9
 8007de8:	d002      	beq.n	8007df0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	2209      	movs	r2, #9
 8007dee:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007df4:	221a      	movs	r2, #26
 8007df6:	fb02 f303 	mul.w	r3, r2, r3
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	6a3a      	ldr	r2, [r7, #32]
 8007dfe:	4413      	add	r3, r2
 8007e00:	3302      	adds	r3, #2
 8007e02:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e06:	69f8      	ldr	r0, [r7, #28]
 8007e08:	f000 f87e 	bl	8007f08 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e16:	e043      	b.n	8007ea0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e18:	f107 0316 	add.w	r3, r7, #22
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e20:	f000 f979 	bl	8008116 <USBH_GetNextDesc>
 8007e24:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b05      	cmp	r3, #5
 8007e2c:	d138      	bne.n	8007ea0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	795b      	ldrb	r3, [r3, #5]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d10f      	bne.n	8007e56 <USBH_ParseCfgDesc+0x13a>
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	799b      	ldrb	r3, [r3, #6]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d10b      	bne.n	8007e56 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	79db      	ldrb	r3, [r3, #7]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10f      	bne.n	8007e66 <USBH_ParseCfgDesc+0x14a>
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b09      	cmp	r3, #9
 8007e4c:	d00b      	beq.n	8007e66 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	2209      	movs	r2, #9
 8007e52:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e54:	e007      	b.n	8007e66 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b07      	cmp	r3, #7
 8007e5c:	d004      	beq.n	8007e68 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	2207      	movs	r2, #7
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	e000      	b.n	8007e68 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e66:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e6c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e70:	3201      	adds	r2, #1
 8007e72:	00d2      	lsls	r2, r2, #3
 8007e74:	211a      	movs	r1, #26
 8007e76:	fb01 f303 	mul.w	r3, r1, r3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	6a3a      	ldr	r2, [r7, #32]
 8007e80:	4413      	add	r3, r2
 8007e82:	3304      	adds	r3, #4
 8007e84:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e88:	69b9      	ldr	r1, [r7, #24]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f86b 	bl	8007f66 <USBH_ParseEPDesc>
 8007e90:	4603      	mov	r3, r0
 8007e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007e96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	791b      	ldrb	r3, [r3, #4]
 8007ea4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d204      	bcs.n	8007eb6 <USBH_ParseCfgDesc+0x19a>
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	885a      	ldrh	r2, [r3, #2]
 8007eb0:	8afb      	ldrh	r3, [r7, #22]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d8b0      	bhi.n	8007e18 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	791b      	ldrb	r3, [r3, #4]
 8007eba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d201      	bcs.n	8007ec6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e01c      	b.n	8007f00 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eca:	3301      	adds	r3, #1
 8007ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d805      	bhi.n	8007ee4 <USBH_ParseCfgDesc+0x1c8>
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	885a      	ldrh	r2, [r3, #2]
 8007edc:	8afb      	ldrh	r3, [r7, #22]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	f63f af74 	bhi.w	8007dcc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	791b      	ldrb	r3, [r3, #4]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	bf28      	it	cs
 8007eec:	2302      	movcs	r3, #2
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d201      	bcs.n	8007efc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e001      	b.n	8007f00 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007efc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3730      	adds	r7, #48	; 0x30
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781a      	ldrb	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	785a      	ldrb	r2, [r3, #1]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	789a      	ldrb	r2, [r3, #2]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	78da      	ldrb	r2, [r3, #3]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	791a      	ldrb	r2, [r3, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	795a      	ldrb	r2, [r3, #5]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	799a      	ldrb	r2, [r3, #6]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	79da      	ldrb	r2, [r3, #7]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	7a1a      	ldrb	r2, [r3, #8]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	721a      	strb	r2, [r3, #8]
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b087      	sub	sp, #28
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	785a      	ldrb	r2, [r3, #1]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	789a      	ldrb	r2, [r3, #2]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	78da      	ldrb	r2, [r3, #3]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3305      	adds	r3, #5
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	4313      	orrs	r3, r2
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	799a      	ldrb	r2, [r3, #6]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	889b      	ldrh	r3, [r3, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d102      	bne.n	8007fc8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	75fb      	strb	r3, [r7, #23]
 8007fc6:	e033      	b.n	8008030 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	889b      	ldrh	r3, [r3, #4]
 8007fcc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007fd0:	f023 0307 	bic.w	r3, r3, #7
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	889b      	ldrh	r3, [r3, #4]
 8007fde:	b21a      	sxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b299      	uxth	r1, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	3305      	adds	r3, #5
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	021b      	lsls	r3, r3, #8
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d110      	bne.n	8008022 <USBH_ParseEPDesc+0xbc>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3304      	adds	r3, #4
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	b299      	uxth	r1, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3305      	adds	r3, #5
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	021b      	lsls	r3, r3, #8
 8008012:	b29b      	uxth	r3, r3
 8008014:	430b      	orrs	r3, r1
 8008016:	b29b      	uxth	r3, r3
 8008018:	b21b      	sxth	r3, r3
 800801a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800801e:	b21b      	sxth	r3, r3
 8008020:	e001      	b.n	8008026 <USBH_ParseEPDesc+0xc0>
 8008022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008026:	4313      	orrs	r3, r2
 8008028:	b21b      	sxth	r3, r3
 800802a:	b29a      	uxth	r2, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008036:	2b00      	cmp	r3, #0
 8008038:	d116      	bne.n	8008068 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	78db      	ldrb	r3, [r3, #3]
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	2b01      	cmp	r3, #1
 8008044:	d005      	beq.n	8008052 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	78db      	ldrb	r3, [r3, #3]
 800804a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800804e:	2b03      	cmp	r3, #3
 8008050:	d127      	bne.n	80080a2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	799b      	ldrb	r3, [r3, #6]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <USBH_ParseEPDesc+0xfc>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	799b      	ldrb	r3, [r3, #6]
 800805e:	2b10      	cmp	r3, #16
 8008060:	d91f      	bls.n	80080a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008062:	2303      	movs	r3, #3
 8008064:	75fb      	strb	r3, [r7, #23]
 8008066:	e01c      	b.n	80080a2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	78db      	ldrb	r3, [r3, #3]
 800806c:	f003 0303 	and.w	r3, r3, #3
 8008070:	2b01      	cmp	r3, #1
 8008072:	d10a      	bne.n	800808a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	799b      	ldrb	r3, [r3, #6]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <USBH_ParseEPDesc+0x11e>
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	799b      	ldrb	r3, [r3, #6]
 8008080:	2b10      	cmp	r3, #16
 8008082:	d90e      	bls.n	80080a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008084:	2303      	movs	r3, #3
 8008086:	75fb      	strb	r3, [r7, #23]
 8008088:	e00b      	b.n	80080a2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	78db      	ldrb	r3, [r3, #3]
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	2b03      	cmp	r3, #3
 8008094:	d105      	bne.n	80080a2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	799b      	ldrb	r3, [r3, #6]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800809e:	2303      	movs	r3, #3
 80080a0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	371c      	adds	r7, #28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3301      	adds	r3, #1
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d120      	bne.n	800810a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	1e9a      	subs	r2, r3, #2
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	4293      	cmp	r3, r2
 80080d2:	bf28      	it	cs
 80080d4:	4613      	movcs	r3, r2
 80080d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	3302      	adds	r3, #2
 80080dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80080de:	2300      	movs	r3, #0
 80080e0:	82fb      	strh	r3, [r7, #22]
 80080e2:	e00b      	b.n	80080fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80080e4:	8afb      	ldrh	r3, [r7, #22]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4413      	add	r3, r2
 80080ea:	781a      	ldrb	r2, [r3, #0]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80080f6:	8afb      	ldrh	r3, [r7, #22]
 80080f8:	3302      	adds	r3, #2
 80080fa:	82fb      	strh	r3, [r7, #22]
 80080fc:	8afa      	ldrh	r2, [r7, #22]
 80080fe:	8abb      	ldrh	r3, [r7, #20]
 8008100:	429a      	cmp	r2, r3
 8008102:	d3ef      	bcc.n	80080e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2200      	movs	r2, #0
 8008108:	701a      	strb	r2, [r3, #0]
  }
}
 800810a:	bf00      	nop
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008116:	b480      	push	{r7}
 8008118:	b085      	sub	sp, #20
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	881a      	ldrh	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	b29b      	uxth	r3, r3
 800812a:	4413      	add	r3, r2
 800812c:	b29a      	uxth	r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4413      	add	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800813e:	68fb      	ldr	r3, [r7, #12]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4613      	mov	r3, r2
 8008158:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800815a:	2301      	movs	r3, #1
 800815c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	789b      	ldrb	r3, [r3, #2]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d002      	beq.n	800816c <USBH_CtlReq+0x20>
 8008166:	2b02      	cmp	r3, #2
 8008168:	d00f      	beq.n	800818a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800816a:	e027      	b.n	80081bc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	88fa      	ldrh	r2, [r7, #6]
 8008176:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2201      	movs	r2, #1
 800817c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2202      	movs	r2, #2
 8008182:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008184:	2301      	movs	r3, #1
 8008186:	75fb      	strb	r3, [r7, #23]
      break;
 8008188:	e018      	b.n	80081bc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 f81c 	bl	80081c8 <USBH_HandleControl>
 8008190:	4603      	mov	r3, r0
 8008192:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <USBH_CtlReq+0x54>
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	2b03      	cmp	r3, #3
 800819e:	d106      	bne.n	80081ae <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2201      	movs	r2, #1
 80081a4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	761a      	strb	r2, [r3, #24]
      break;
 80081ac:	e005      	b.n	80081ba <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d102      	bne.n	80081ba <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	709a      	strb	r2, [r3, #2]
      break;
 80081ba:	bf00      	nop
  }
  return status;
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80081d0:	2301      	movs	r3, #1
 80081d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	7e1b      	ldrb	r3, [r3, #24]
 80081dc:	3b01      	subs	r3, #1
 80081de:	2b0a      	cmp	r3, #10
 80081e0:	f200 8156 	bhi.w	8008490 <USBH_HandleControl+0x2c8>
 80081e4:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <USBH_HandleControl+0x24>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	08008219 	.word	0x08008219
 80081f0:	08008233 	.word	0x08008233
 80081f4:	0800829d 	.word	0x0800829d
 80081f8:	080082c3 	.word	0x080082c3
 80081fc:	080082fb 	.word	0x080082fb
 8008200:	08008325 	.word	0x08008325
 8008204:	08008377 	.word	0x08008377
 8008208:	08008399 	.word	0x08008399
 800820c:	080083d5 	.word	0x080083d5
 8008210:	080083fb 	.word	0x080083fb
 8008214:	08008439 	.word	0x08008439
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f103 0110 	add.w	r1, r3, #16
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	795b      	ldrb	r3, [r3, #5]
 8008222:	461a      	mov	r2, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f943 	bl	80084b0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2202      	movs	r2, #2
 800822e:	761a      	strb	r2, [r3, #24]
      break;
 8008230:	e139      	b.n	80084a6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	795b      	ldrb	r3, [r3, #5]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fcc5 	bl	8008bc8 <USBH_LL_GetURBState>
 800823e:	4603      	mov	r3, r0
 8008240:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d11e      	bne.n	8008286 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7c1b      	ldrb	r3, [r3, #16]
 800824c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008250:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	8adb      	ldrh	r3, [r3, #22]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800825a:	7b7b      	ldrb	r3, [r7, #13]
 800825c:	2b80      	cmp	r3, #128	; 0x80
 800825e:	d103      	bne.n	8008268 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2203      	movs	r2, #3
 8008264:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008266:	e115      	b.n	8008494 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2205      	movs	r2, #5
 800826c:	761a      	strb	r2, [r3, #24]
      break;
 800826e:	e111      	b.n	8008494 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008270:	7b7b      	ldrb	r3, [r7, #13]
 8008272:	2b80      	cmp	r3, #128	; 0x80
 8008274:	d103      	bne.n	800827e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2209      	movs	r2, #9
 800827a:	761a      	strb	r2, [r3, #24]
      break;
 800827c:	e10a      	b.n	8008494 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2207      	movs	r2, #7
 8008282:	761a      	strb	r2, [r3, #24]
      break;
 8008284:	e106      	b.n	8008494 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	2b04      	cmp	r3, #4
 800828a:	d003      	beq.n	8008294 <USBH_HandleControl+0xcc>
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2b02      	cmp	r3, #2
 8008290:	f040 8100 	bne.w	8008494 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	220b      	movs	r2, #11
 8008298:	761a      	strb	r2, [r3, #24]
      break;
 800829a:	e0fb      	b.n	8008494 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6899      	ldr	r1, [r3, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	899a      	ldrh	r2, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	791b      	ldrb	r3, [r3, #4]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f93a 	bl	800852e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2204      	movs	r2, #4
 80082be:	761a      	strb	r2, [r3, #24]
      break;
 80082c0:	e0f1      	b.n	80084a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	791b      	ldrb	r3, [r3, #4]
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fc7d 	bl	8008bc8 <USBH_LL_GetURBState>
 80082ce:	4603      	mov	r3, r0
 80082d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d102      	bne.n	80082de <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2209      	movs	r2, #9
 80082dc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	2b05      	cmp	r3, #5
 80082e2:	d102      	bne.n	80082ea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80082e4:	2303      	movs	r3, #3
 80082e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082e8:	e0d6      	b.n	8008498 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80082ea:	7bbb      	ldrb	r3, [r7, #14]
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	f040 80d3 	bne.w	8008498 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	220b      	movs	r2, #11
 80082f6:	761a      	strb	r2, [r3, #24]
      break;
 80082f8:	e0ce      	b.n	8008498 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6899      	ldr	r1, [r3, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	899a      	ldrh	r2, [r3, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	795b      	ldrb	r3, [r3, #5]
 8008306:	2001      	movs	r0, #1
 8008308:	9000      	str	r0, [sp, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f8ea 	bl	80084e4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008316:	b29a      	uxth	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2206      	movs	r2, #6
 8008320:	761a      	strb	r2, [r3, #24]
      break;
 8008322:	e0c0      	b.n	80084a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	795b      	ldrb	r3, [r3, #5]
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fc4c 	bl	8008bc8 <USBH_LL_GetURBState>
 8008330:	4603      	mov	r3, r0
 8008332:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d103      	bne.n	8008342 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2207      	movs	r2, #7
 800833e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008340:	e0ac      	b.n	800849c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	2b05      	cmp	r3, #5
 8008346:	d105      	bne.n	8008354 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	220c      	movs	r2, #12
 800834c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800834e:	2303      	movs	r3, #3
 8008350:	73fb      	strb	r3, [r7, #15]
      break;
 8008352:	e0a3      	b.n	800849c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d103      	bne.n	8008362 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2205      	movs	r2, #5
 800835e:	761a      	strb	r2, [r3, #24]
      break;
 8008360:	e09c      	b.n	800849c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b04      	cmp	r3, #4
 8008366:	f040 8099 	bne.w	800849c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	220b      	movs	r2, #11
 800836e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008370:	2302      	movs	r3, #2
 8008372:	73fb      	strb	r3, [r7, #15]
      break;
 8008374:	e092      	b.n	800849c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	791b      	ldrb	r3, [r3, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	2100      	movs	r1, #0
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f8d5 	bl	800852e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800838a:	b29a      	uxth	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2208      	movs	r2, #8
 8008394:	761a      	strb	r2, [r3, #24]

      break;
 8008396:	e086      	b.n	80084a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	791b      	ldrb	r3, [r3, #4]
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fc12 	bl	8008bc8 <USBH_LL_GetURBState>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d105      	bne.n	80083ba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	220d      	movs	r2, #13
 80083b2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083b8:	e072      	b.n	80084a0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d103      	bne.n	80083c8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	220b      	movs	r2, #11
 80083c4:	761a      	strb	r2, [r3, #24]
      break;
 80083c6:	e06b      	b.n	80084a0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b05      	cmp	r3, #5
 80083cc:	d168      	bne.n	80084a0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80083ce:	2303      	movs	r3, #3
 80083d0:	73fb      	strb	r3, [r7, #15]
      break;
 80083d2:	e065      	b.n	80084a0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	795b      	ldrb	r3, [r3, #5]
 80083d8:	2201      	movs	r2, #1
 80083da:	9200      	str	r2, [sp, #0]
 80083dc:	2200      	movs	r2, #0
 80083de:	2100      	movs	r1, #0
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f87f 	bl	80084e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	220a      	movs	r2, #10
 80083f6:	761a      	strb	r2, [r3, #24]
      break;
 80083f8:	e055      	b.n	80084a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	795b      	ldrb	r3, [r3, #5]
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fbe1 	bl	8008bc8 <USBH_LL_GetURBState>
 8008406:	4603      	mov	r3, r0
 8008408:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800840a:	7bbb      	ldrb	r3, [r7, #14]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d105      	bne.n	800841c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	220d      	movs	r2, #13
 8008418:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800841a:	e043      	b.n	80084a4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d103      	bne.n	800842a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2209      	movs	r2, #9
 8008426:	761a      	strb	r2, [r3, #24]
      break;
 8008428:	e03c      	b.n	80084a4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b04      	cmp	r3, #4
 800842e:	d139      	bne.n	80084a4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	220b      	movs	r2, #11
 8008434:	761a      	strb	r2, [r3, #24]
      break;
 8008436:	e035      	b.n	80084a4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	7e5b      	ldrb	r3, [r3, #25]
 800843c:	3301      	adds	r3, #1
 800843e:	b2da      	uxtb	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	765a      	strb	r2, [r3, #25]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	7e5b      	ldrb	r3, [r3, #25]
 8008448:	2b02      	cmp	r3, #2
 800844a:	d806      	bhi.n	800845a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008458:	e025      	b.n	80084a6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008460:	2106      	movs	r1, #6
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	795b      	ldrb	r3, [r3, #5]
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f90c 	bl	8008690 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	791b      	ldrb	r3, [r3, #4]
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f906 	bl	8008690 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800848a:	2302      	movs	r3, #2
 800848c:	73fb      	strb	r3, [r7, #15]
      break;
 800848e:	e00a      	b.n	80084a6 <USBH_HandleControl+0x2de>

    default:
      break;
 8008490:	bf00      	nop
 8008492:	e008      	b.n	80084a6 <USBH_HandleControl+0x2de>
      break;
 8008494:	bf00      	nop
 8008496:	e006      	b.n	80084a6 <USBH_HandleControl+0x2de>
      break;
 8008498:	bf00      	nop
 800849a:	e004      	b.n	80084a6 <USBH_HandleControl+0x2de>
      break;
 800849c:	bf00      	nop
 800849e:	e002      	b.n	80084a6 <USBH_HandleControl+0x2de>
      break;
 80084a0:	bf00      	nop
 80084a2:	e000      	b.n	80084a6 <USBH_HandleControl+0x2de>
      break;
 80084a4:	bf00      	nop
  }

  return status;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af04      	add	r7, sp, #16
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	4613      	mov	r3, r2
 80084bc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084be:	79f9      	ldrb	r1, [r7, #7]
 80084c0:	2300      	movs	r3, #0
 80084c2:	9303      	str	r3, [sp, #12]
 80084c4:	2308      	movs	r3, #8
 80084c6:	9302      	str	r3, [sp, #8]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	9301      	str	r3, [sp, #4]
 80084cc:	2300      	movs	r3, #0
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	2300      	movs	r3, #0
 80084d2:	2200      	movs	r2, #0
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 fb46 	bl	8008b66 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af04      	add	r7, sp, #16
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4611      	mov	r1, r2
 80084f0:	461a      	mov	r2, r3
 80084f2:	460b      	mov	r3, r1
 80084f4:	80fb      	strh	r3, [r7, #6]
 80084f6:	4613      	mov	r3, r2
 80084f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008508:	7979      	ldrb	r1, [r7, #5]
 800850a:	7e3b      	ldrb	r3, [r7, #24]
 800850c:	9303      	str	r3, [sp, #12]
 800850e:	88fb      	ldrh	r3, [r7, #6]
 8008510:	9302      	str	r3, [sp, #8]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	2301      	movs	r3, #1
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	2300      	movs	r3, #0
 800851c:	2200      	movs	r2, #0
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 fb21 	bl	8008b66 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b088      	sub	sp, #32
 8008532:	af04      	add	r7, sp, #16
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	60b9      	str	r1, [r7, #8]
 8008538:	4611      	mov	r1, r2
 800853a:	461a      	mov	r2, r3
 800853c:	460b      	mov	r3, r1
 800853e:	80fb      	strh	r3, [r7, #6]
 8008540:	4613      	mov	r3, r2
 8008542:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008544:	7979      	ldrb	r1, [r7, #5]
 8008546:	2300      	movs	r3, #0
 8008548:	9303      	str	r3, [sp, #12]
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	9302      	str	r3, [sp, #8]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	2301      	movs	r3, #1
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	2300      	movs	r3, #0
 8008558:	2201      	movs	r2, #1
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 fb03 	bl	8008b66 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008560:	2300      	movs	r3, #0

}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b088      	sub	sp, #32
 800856e:	af04      	add	r7, sp, #16
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	4611      	mov	r1, r2
 8008576:	461a      	mov	r2, r3
 8008578:	460b      	mov	r3, r1
 800857a:	80fb      	strh	r3, [r7, #6]
 800857c:	4613      	mov	r3, r2
 800857e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800858e:	7979      	ldrb	r1, [r7, #5]
 8008590:	7e3b      	ldrb	r3, [r7, #24]
 8008592:	9303      	str	r3, [sp, #12]
 8008594:	88fb      	ldrh	r3, [r7, #6]
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	9301      	str	r3, [sp, #4]
 800859c:	2301      	movs	r3, #1
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	2302      	movs	r3, #2
 80085a2:	2200      	movs	r2, #0
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 fade 	bl	8008b66 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af04      	add	r7, sp, #16
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	4611      	mov	r1, r2
 80085c0:	461a      	mov	r2, r3
 80085c2:	460b      	mov	r3, r1
 80085c4:	80fb      	strh	r3, [r7, #6]
 80085c6:	4613      	mov	r3, r2
 80085c8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085ca:	7979      	ldrb	r1, [r7, #5]
 80085cc:	2300      	movs	r3, #0
 80085ce:	9303      	str	r3, [sp, #12]
 80085d0:	88fb      	ldrh	r3, [r7, #6]
 80085d2:	9302      	str	r3, [sp, #8]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	2301      	movs	r3, #1
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	2302      	movs	r3, #2
 80085de:	2201      	movs	r2, #1
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 fac0 	bl	8008b66 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af04      	add	r7, sp, #16
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	4608      	mov	r0, r1
 80085fa:	4611      	mov	r1, r2
 80085fc:	461a      	mov	r2, r3
 80085fe:	4603      	mov	r3, r0
 8008600:	70fb      	strb	r3, [r7, #3]
 8008602:	460b      	mov	r3, r1
 8008604:	70bb      	strb	r3, [r7, #2]
 8008606:	4613      	mov	r3, r2
 8008608:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800860a:	7878      	ldrb	r0, [r7, #1]
 800860c:	78ba      	ldrb	r2, [r7, #2]
 800860e:	78f9      	ldrb	r1, [r7, #3]
 8008610:	8b3b      	ldrh	r3, [r7, #24]
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	7d3b      	ldrb	r3, [r7, #20]
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	7c3b      	ldrb	r3, [r7, #16]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4603      	mov	r3, r0
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fa53 	bl	8008aca <USBH_LL_OpenPipe>

  return USBH_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa72 	bl	8008b28 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b084      	sub	sp, #16
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	460b      	mov	r3, r1
 8008658:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f836 	bl	80086cc <USBH_GetFreePipe>
 8008660:	4603      	mov	r3, r0
 8008662:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008664:	89fb      	ldrh	r3, [r7, #14]
 8008666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800866a:	4293      	cmp	r3, r2
 800866c:	d00a      	beq.n	8008684 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800866e:	78fa      	ldrb	r2, [r7, #3]
 8008670:	89fb      	ldrh	r3, [r7, #14]
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	33e0      	adds	r3, #224	; 0xe0
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	440b      	add	r3, r1
 8008682:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008684:	89fb      	ldrh	r3, [r7, #14]
 8008686:	b2db      	uxtb	r3, r3
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800869c:	78fb      	ldrb	r3, [r7, #3]
 800869e:	2b0f      	cmp	r3, #15
 80086a0:	d80d      	bhi.n	80086be <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086a2:	78fb      	ldrb	r3, [r7, #3]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	33e0      	adds	r3, #224	; 0xe0
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	33e0      	adds	r3, #224	; 0xe0
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	440b      	add	r3, r1
 80086bc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80086d8:	2300      	movs	r3, #0
 80086da:	73fb      	strb	r3, [r7, #15]
 80086dc:	e00f      	b.n	80086fe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	33e0      	adds	r3, #224	; 0xe0
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d102      	bne.n	80086f8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	e007      	b.n	8008708 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	3301      	adds	r3, #1
 80086fc:	73fb      	strb	r3, [r7, #15]
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	2b0f      	cmp	r3, #15
 8008702:	d9ec      	bls.n	80086de <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008704:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008718:	2201      	movs	r2, #1
 800871a:	490e      	ldr	r1, [pc, #56]	; (8008754 <MX_USB_HOST_Init+0x40>)
 800871c:	480e      	ldr	r0, [pc, #56]	; (8008758 <MX_USB_HOST_Init+0x44>)
 800871e:	f7fe fba7 	bl	8006e70 <USBH_Init>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008728:	f7f8 f92c 	bl	8000984 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800872c:	490b      	ldr	r1, [pc, #44]	; (800875c <MX_USB_HOST_Init+0x48>)
 800872e:	480a      	ldr	r0, [pc, #40]	; (8008758 <MX_USB_HOST_Init+0x44>)
 8008730:	f7fe fc2c 	bl	8006f8c <USBH_RegisterClass>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800873a:	f7f8 f923 	bl	8000984 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800873e:	4806      	ldr	r0, [pc, #24]	; (8008758 <MX_USB_HOST_Init+0x44>)
 8008740:	f7fe fcb0 	bl	80070a4 <USBH_Start>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800874a:	f7f8 f91b 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800874e:	bf00      	nop
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	08008775 	.word	0x08008775
 8008758:	200001f8 	.word	0x200001f8
 800875c:	2000000c 	.word	0x2000000c

08008760 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008764:	4802      	ldr	r0, [pc, #8]	; (8008770 <MX_USB_HOST_Process+0x10>)
 8008766:	f7fe fcad 	bl	80070c4 <USBH_Process>
}
 800876a:	bf00      	nop
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	200001f8 	.word	0x200001f8

08008774 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	3b01      	subs	r3, #1
 8008784:	2b04      	cmp	r3, #4
 8008786:	d819      	bhi.n	80087bc <USBH_UserProcess+0x48>
 8008788:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <USBH_UserProcess+0x1c>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	080087bd 	.word	0x080087bd
 8008794:	080087ad 	.word	0x080087ad
 8008798:	080087bd 	.word	0x080087bd
 800879c:	080087b5 	.word	0x080087b5
 80087a0:	080087a5 	.word	0x080087a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087a4:	4b09      	ldr	r3, [pc, #36]	; (80087cc <USBH_UserProcess+0x58>)
 80087a6:	2203      	movs	r2, #3
 80087a8:	701a      	strb	r2, [r3, #0]
  break;
 80087aa:	e008      	b.n	80087be <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80087ac:	4b07      	ldr	r3, [pc, #28]	; (80087cc <USBH_UserProcess+0x58>)
 80087ae:	2202      	movs	r2, #2
 80087b0:	701a      	strb	r2, [r3, #0]
  break;
 80087b2:	e004      	b.n	80087be <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80087b4:	4b05      	ldr	r3, [pc, #20]	; (80087cc <USBH_UserProcess+0x58>)
 80087b6:	2201      	movs	r2, #1
 80087b8:	701a      	strb	r2, [r3, #0]
  break;
 80087ba:	e000      	b.n	80087be <USBH_UserProcess+0x4a>

  default:
  break;
 80087bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	200005d0 	.word	0x200005d0

080087d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	; 0x28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d8:	f107 0314 	add.w	r3, r7, #20
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	605a      	str	r2, [r3, #4]
 80087e2:	609a      	str	r2, [r3, #8]
 80087e4:	60da      	str	r2, [r3, #12]
 80087e6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087f0:	d147      	bne.n	8008882 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087f2:	2300      	movs	r3, #0
 80087f4:	613b      	str	r3, [r7, #16]
 80087f6:	4b25      	ldr	r3, [pc, #148]	; (800888c <HAL_HCD_MspInit+0xbc>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	4a24      	ldr	r2, [pc, #144]	; (800888c <HAL_HCD_MspInit+0xbc>)
 80087fc:	f043 0301 	orr.w	r3, r3, #1
 8008800:	6313      	str	r3, [r2, #48]	; 0x30
 8008802:	4b22      	ldr	r3, [pc, #136]	; (800888c <HAL_HCD_MspInit+0xbc>)
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	613b      	str	r3, [r7, #16]
 800880c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800880e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008814:	2300      	movs	r3, #0
 8008816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008818:	2300      	movs	r3, #0
 800881a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800881c:	f107 0314 	add.w	r3, r7, #20
 8008820:	4619      	mov	r1, r3
 8008822:	481b      	ldr	r0, [pc, #108]	; (8008890 <HAL_HCD_MspInit+0xc0>)
 8008824:	f7f8 fd26 	bl	8001274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008828:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800882c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800882e:	2302      	movs	r3, #2
 8008830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008832:	2300      	movs	r3, #0
 8008834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008836:	2300      	movs	r3, #0
 8008838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800883a:	230a      	movs	r3, #10
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800883e:	f107 0314 	add.w	r3, r7, #20
 8008842:	4619      	mov	r1, r3
 8008844:	4812      	ldr	r0, [pc, #72]	; (8008890 <HAL_HCD_MspInit+0xc0>)
 8008846:	f7f8 fd15 	bl	8001274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800884a:	4b10      	ldr	r3, [pc, #64]	; (800888c <HAL_HCD_MspInit+0xbc>)
 800884c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884e:	4a0f      	ldr	r2, [pc, #60]	; (800888c <HAL_HCD_MspInit+0xbc>)
 8008850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008854:	6353      	str	r3, [r2, #52]	; 0x34
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	4b0c      	ldr	r3, [pc, #48]	; (800888c <HAL_HCD_MspInit+0xbc>)
 800885c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800885e:	4a0b      	ldr	r2, [pc, #44]	; (800888c <HAL_HCD_MspInit+0xbc>)
 8008860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008864:	6453      	str	r3, [r2, #68]	; 0x44
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <HAL_HCD_MspInit+0xbc>)
 8008868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008872:	2200      	movs	r2, #0
 8008874:	2100      	movs	r1, #0
 8008876:	2043      	movs	r0, #67	; 0x43
 8008878:	f7f8 fc33 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800887c:	2043      	movs	r0, #67	; 0x43
 800887e:	f7f8 fc4c 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008882:	bf00      	nop
 8008884:	3728      	adds	r7, #40	; 0x28
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	40023800 	.word	0x40023800
 8008890:	40020000 	.word	0x40020000

08008894 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe ffed 	bl	8007882 <USBH_LL_IncTimer>
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff f825 	bl	800790e <USBH_LL_Connect>
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088da:	4618      	mov	r0, r3
 80088dc:	f7ff f82e 	bl	800793c <USBH_LL_Disconnect>
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
 80088f4:	4613      	mov	r3, r2
 80088f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe ffdf 	bl	80078d6 <USBH_LL_PortEnabled>
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe ffdf 	bl	80078f2 <USBH_LL_PortDisabled>
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800894a:	2b01      	cmp	r3, #1
 800894c:	d12a      	bne.n	80089a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800894e:	4a18      	ldr	r2, [pc, #96]	; (80089b0 <USBH_LL_Init+0x74>)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a15      	ldr	r2, [pc, #84]	; (80089b0 <USBH_LL_Init+0x74>)
 800895a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800895e:	4b14      	ldr	r3, [pc, #80]	; (80089b0 <USBH_LL_Init+0x74>)
 8008960:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008964:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008966:	4b12      	ldr	r3, [pc, #72]	; (80089b0 <USBH_LL_Init+0x74>)
 8008968:	2208      	movs	r2, #8
 800896a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800896c:	4b10      	ldr	r3, [pc, #64]	; (80089b0 <USBH_LL_Init+0x74>)
 800896e:	2201      	movs	r2, #1
 8008970:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008972:	4b0f      	ldr	r3, [pc, #60]	; (80089b0 <USBH_LL_Init+0x74>)
 8008974:	2200      	movs	r2, #0
 8008976:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008978:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <USBH_LL_Init+0x74>)
 800897a:	2202      	movs	r2, #2
 800897c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800897e:	4b0c      	ldr	r3, [pc, #48]	; (80089b0 <USBH_LL_Init+0x74>)
 8008980:	2200      	movs	r2, #0
 8008982:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008984:	480a      	ldr	r0, [pc, #40]	; (80089b0 <USBH_LL_Init+0x74>)
 8008986:	f7f8 fe2a 	bl	80015de <HAL_HCD_Init>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008990:	f7f7 fff8 	bl	8000984 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008994:	4806      	ldr	r0, [pc, #24]	; (80089b0 <USBH_LL_Init+0x74>)
 8008996:	f7f9 fa0e 	bl	8001db6 <HAL_HCD_GetCurrentFrame>
 800899a:	4603      	mov	r3, r0
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7fe ff60 	bl	8007864 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	200005d4 	.word	0x200005d4

080089b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7f9 f97d 	bl	8001cca <HAL_HCD_Start>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 f95c 	bl	8008c94 <USBH_Get_USB_Status>
 80089dc:	4603      	mov	r3, r0
 80089de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7f9 f985 	bl	8001d10 <HAL_HCD_Stop>
 8008a06:	4603      	mov	r3, r0
 8008a08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 f941 	bl	8008c94 <USBH_Get_USB_Status>
 8008a12:	4603      	mov	r3, r0
 8008a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7f9 f9cd 	bl	8001dd2 <HAL_HCD_GetCurrentSpeed>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d00c      	beq.n	8008a58 <USBH_LL_GetSpeed+0x38>
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d80d      	bhi.n	8008a5e <USBH_LL_GetSpeed+0x3e>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <USBH_LL_GetSpeed+0x2c>
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d003      	beq.n	8008a52 <USBH_LL_GetSpeed+0x32>
 8008a4a:	e008      	b.n	8008a5e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a50:	e008      	b.n	8008a64 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a52:	2301      	movs	r3, #1
 8008a54:	73fb      	strb	r3, [r7, #15]
    break;
 8008a56:	e005      	b.n	8008a64 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a58:	2302      	movs	r3, #2
 8008a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a5c:	e002      	b.n	8008a64 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	73fb      	strb	r3, [r7, #15]
    break;
 8008a62:	bf00      	nop
  }
  return  speed;
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7f9 f960 	bl	8001d4a <HAL_HCD_ResetPort>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 f8ff 	bl	8008c94 <USBH_Get_USB_Status>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ab6:	78fa      	ldrb	r2, [r7, #3]
 8008ab8:	4611      	mov	r1, r2
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7f9 f967 	bl	8001d8e <HAL_HCD_HC_GetXferCount>
 8008ac0:	4603      	mov	r3, r0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008aca:	b590      	push	{r4, r7, lr}
 8008acc:	b089      	sub	sp, #36	; 0x24
 8008ace:	af04      	add	r7, sp, #16
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	4608      	mov	r0, r1
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4603      	mov	r3, r0
 8008ada:	70fb      	strb	r3, [r7, #3]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70bb      	strb	r3, [r7, #2]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008af2:	787c      	ldrb	r4, [r7, #1]
 8008af4:	78ba      	ldrb	r2, [r7, #2]
 8008af6:	78f9      	ldrb	r1, [r7, #3]
 8008af8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008afa:	9302      	str	r3, [sp, #8]
 8008afc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	4623      	mov	r3, r4
 8008b0a:	f7f8 fdca 	bl	80016a2 <HAL_HCD_HC_Init>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 f8bd 	bl	8008c94 <USBH_Get_USB_Status>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd90      	pop	{r4, r7, pc}

08008b28 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	4611      	mov	r1, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7f8 fe3a 	bl	80017c0 <HAL_HCD_HC_Halt>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f89e 	bl	8008c94 <USBH_Get_USB_Status>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b66:	b590      	push	{r4, r7, lr}
 8008b68:	b089      	sub	sp, #36	; 0x24
 8008b6a:	af04      	add	r7, sp, #16
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	4608      	mov	r0, r1
 8008b70:	4611      	mov	r1, r2
 8008b72:	461a      	mov	r2, r3
 8008b74:	4603      	mov	r3, r0
 8008b76:	70fb      	strb	r3, [r7, #3]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70bb      	strb	r3, [r7, #2]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b8e:	787c      	ldrb	r4, [r7, #1]
 8008b90:	78ba      	ldrb	r2, [r7, #2]
 8008b92:	78f9      	ldrb	r1, [r7, #3]
 8008b94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b98:	9303      	str	r3, [sp, #12]
 8008b9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b9c:	9302      	str	r3, [sp, #8]
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	4623      	mov	r3, r4
 8008baa:	f7f8 fe2d 	bl	8001808 <HAL_HCD_HC_SubmitRequest>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 f86d 	bl	8008c94 <USBH_Get_USB_Status>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd90      	pop	{r4, r7, pc}

08008bc8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	4611      	mov	r1, r2
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7f9 f8c1 	bl	8001d66 <HAL_HCD_HC_GetURBState>
 8008be4:	4603      	mov	r3, r0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d103      	bne.n	8008c0c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 f870 	bl	8008cec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c0c:	20c8      	movs	r0, #200	; 0xc8
 8008c0e:	f7f8 f969 	bl	8000ee4 <HAL_Delay>
  return USBH_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c32:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c34:	78fb      	ldrb	r3, [r7, #3]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	212c      	movs	r1, #44	; 0x2c
 8008c3a:	fb01 f303 	mul.w	r3, r1, r3
 8008c3e:	4413      	add	r3, r2
 8008c40:	333b      	adds	r3, #59	; 0x3b
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d009      	beq.n	8008c5c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	212c      	movs	r1, #44	; 0x2c
 8008c4e:	fb01 f303 	mul.w	r3, r1, r3
 8008c52:	4413      	add	r3, r2
 8008c54:	3354      	adds	r3, #84	; 0x54
 8008c56:	78ba      	ldrb	r2, [r7, #2]
 8008c58:	701a      	strb	r2, [r3, #0]
 8008c5a:	e008      	b.n	8008c6e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	212c      	movs	r1, #44	; 0x2c
 8008c62:	fb01 f303 	mul.w	r3, r1, r3
 8008c66:	4413      	add	r3, r2
 8008c68:	3355      	adds	r3, #85	; 0x55
 8008c6a:	78ba      	ldrb	r2, [r7, #2]
 8008c6c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7f8 f92d 	bl	8000ee4 <HAL_Delay>
}
 8008c8a:	bf00      	nop
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d817      	bhi.n	8008cd8 <USBH_Get_USB_Status+0x44>
 8008ca8:	a201      	add	r2, pc, #4	; (adr r2, 8008cb0 <USBH_Get_USB_Status+0x1c>)
 8008caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cae:	bf00      	nop
 8008cb0:	08008cc1 	.word	0x08008cc1
 8008cb4:	08008cc7 	.word	0x08008cc7
 8008cb8:	08008ccd 	.word	0x08008ccd
 8008cbc:	08008cd3 	.word	0x08008cd3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc4:	e00b      	b.n	8008cde <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cca:	e008      	b.n	8008cde <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd0:	e005      	b.n	8008cde <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd6:	e002      	b.n	8008cde <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008cd8:	2302      	movs	r3, #2
 8008cda:	73fb      	strb	r3, [r7, #15]
    break;
 8008cdc:	bf00      	nop
  }
  return usb_status;
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]
 8008d04:	e001      	b.n	8008d0a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d06:	2301      	movs	r3, #1
 8008d08:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	2101      	movs	r1, #1
 8008d10:	4803      	ldr	r0, [pc, #12]	; (8008d20 <MX_DriverVbusFS+0x34>)
 8008d12:	f7f8 fc4b 	bl	80015ac <HAL_GPIO_WritePin>
}
 8008d16:	bf00      	nop
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	40020800 	.word	0x40020800

08008d24 <__errno>:
 8008d24:	4b01      	ldr	r3, [pc, #4]	; (8008d2c <__errno+0x8>)
 8008d26:	6818      	ldr	r0, [r3, #0]
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	2000002c 	.word	0x2000002c

08008d30 <__libc_init_array>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	4d0d      	ldr	r5, [pc, #52]	; (8008d68 <__libc_init_array+0x38>)
 8008d34:	4c0d      	ldr	r4, [pc, #52]	; (8008d6c <__libc_init_array+0x3c>)
 8008d36:	1b64      	subs	r4, r4, r5
 8008d38:	10a4      	asrs	r4, r4, #2
 8008d3a:	2600      	movs	r6, #0
 8008d3c:	42a6      	cmp	r6, r4
 8008d3e:	d109      	bne.n	8008d54 <__libc_init_array+0x24>
 8008d40:	4d0b      	ldr	r5, [pc, #44]	; (8008d70 <__libc_init_array+0x40>)
 8008d42:	4c0c      	ldr	r4, [pc, #48]	; (8008d74 <__libc_init_array+0x44>)
 8008d44:	f000 f92e 	bl	8008fa4 <_init>
 8008d48:	1b64      	subs	r4, r4, r5
 8008d4a:	10a4      	asrs	r4, r4, #2
 8008d4c:	2600      	movs	r6, #0
 8008d4e:	42a6      	cmp	r6, r4
 8008d50:	d105      	bne.n	8008d5e <__libc_init_array+0x2e>
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
 8008d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d58:	4798      	blx	r3
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	e7ee      	b.n	8008d3c <__libc_init_array+0xc>
 8008d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d62:	4798      	blx	r3
 8008d64:	3601      	adds	r6, #1
 8008d66:	e7f2      	b.n	8008d4e <__libc_init_array+0x1e>
 8008d68:	08008fe0 	.word	0x08008fe0
 8008d6c:	08008fe0 	.word	0x08008fe0
 8008d70:	08008fe0 	.word	0x08008fe0
 8008d74:	08008fe4 	.word	0x08008fe4

08008d78 <malloc>:
 8008d78:	4b02      	ldr	r3, [pc, #8]	; (8008d84 <malloc+0xc>)
 8008d7a:	4601      	mov	r1, r0
 8008d7c:	6818      	ldr	r0, [r3, #0]
 8008d7e:	f000 b87f 	b.w	8008e80 <_malloc_r>
 8008d82:	bf00      	nop
 8008d84:	2000002c 	.word	0x2000002c

08008d88 <free>:
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <free+0xc>)
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	6818      	ldr	r0, [r3, #0]
 8008d8e:	f000 b80b 	b.w	8008da8 <_free_r>
 8008d92:	bf00      	nop
 8008d94:	2000002c 	.word	0x2000002c

08008d98 <memset>:
 8008d98:	4402      	add	r2, r0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d100      	bne.n	8008da2 <memset+0xa>
 8008da0:	4770      	bx	lr
 8008da2:	f803 1b01 	strb.w	r1, [r3], #1
 8008da6:	e7f9      	b.n	8008d9c <memset+0x4>

08008da8 <_free_r>:
 8008da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008daa:	2900      	cmp	r1, #0
 8008dac:	d044      	beq.n	8008e38 <_free_r+0x90>
 8008dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db2:	9001      	str	r0, [sp, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f1a1 0404 	sub.w	r4, r1, #4
 8008dba:	bfb8      	it	lt
 8008dbc:	18e4      	addlt	r4, r4, r3
 8008dbe:	f000 f8e3 	bl	8008f88 <__malloc_lock>
 8008dc2:	4a1e      	ldr	r2, [pc, #120]	; (8008e3c <_free_r+0x94>)
 8008dc4:	9801      	ldr	r0, [sp, #4]
 8008dc6:	6813      	ldr	r3, [r2, #0]
 8008dc8:	b933      	cbnz	r3, 8008dd8 <_free_r+0x30>
 8008dca:	6063      	str	r3, [r4, #4]
 8008dcc:	6014      	str	r4, [r2, #0]
 8008dce:	b003      	add	sp, #12
 8008dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dd4:	f000 b8de 	b.w	8008f94 <__malloc_unlock>
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	d908      	bls.n	8008dee <_free_r+0x46>
 8008ddc:	6825      	ldr	r5, [r4, #0]
 8008dde:	1961      	adds	r1, r4, r5
 8008de0:	428b      	cmp	r3, r1
 8008de2:	bf01      	itttt	eq
 8008de4:	6819      	ldreq	r1, [r3, #0]
 8008de6:	685b      	ldreq	r3, [r3, #4]
 8008de8:	1949      	addeq	r1, r1, r5
 8008dea:	6021      	streq	r1, [r4, #0]
 8008dec:	e7ed      	b.n	8008dca <_free_r+0x22>
 8008dee:	461a      	mov	r2, r3
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	b10b      	cbz	r3, 8008df8 <_free_r+0x50>
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	d9fa      	bls.n	8008dee <_free_r+0x46>
 8008df8:	6811      	ldr	r1, [r2, #0]
 8008dfa:	1855      	adds	r5, r2, r1
 8008dfc:	42a5      	cmp	r5, r4
 8008dfe:	d10b      	bne.n	8008e18 <_free_r+0x70>
 8008e00:	6824      	ldr	r4, [r4, #0]
 8008e02:	4421      	add	r1, r4
 8008e04:	1854      	adds	r4, r2, r1
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	6011      	str	r1, [r2, #0]
 8008e0a:	d1e0      	bne.n	8008dce <_free_r+0x26>
 8008e0c:	681c      	ldr	r4, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	6053      	str	r3, [r2, #4]
 8008e12:	4421      	add	r1, r4
 8008e14:	6011      	str	r1, [r2, #0]
 8008e16:	e7da      	b.n	8008dce <_free_r+0x26>
 8008e18:	d902      	bls.n	8008e20 <_free_r+0x78>
 8008e1a:	230c      	movs	r3, #12
 8008e1c:	6003      	str	r3, [r0, #0]
 8008e1e:	e7d6      	b.n	8008dce <_free_r+0x26>
 8008e20:	6825      	ldr	r5, [r4, #0]
 8008e22:	1961      	adds	r1, r4, r5
 8008e24:	428b      	cmp	r3, r1
 8008e26:	bf04      	itt	eq
 8008e28:	6819      	ldreq	r1, [r3, #0]
 8008e2a:	685b      	ldreq	r3, [r3, #4]
 8008e2c:	6063      	str	r3, [r4, #4]
 8008e2e:	bf04      	itt	eq
 8008e30:	1949      	addeq	r1, r1, r5
 8008e32:	6021      	streq	r1, [r4, #0]
 8008e34:	6054      	str	r4, [r2, #4]
 8008e36:	e7ca      	b.n	8008dce <_free_r+0x26>
 8008e38:	b003      	add	sp, #12
 8008e3a:	bd30      	pop	{r4, r5, pc}
 8008e3c:	200008d8 	.word	0x200008d8

08008e40 <sbrk_aligned>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	4e0e      	ldr	r6, [pc, #56]	; (8008e7c <sbrk_aligned+0x3c>)
 8008e44:	460c      	mov	r4, r1
 8008e46:	6831      	ldr	r1, [r6, #0]
 8008e48:	4605      	mov	r5, r0
 8008e4a:	b911      	cbnz	r1, 8008e52 <sbrk_aligned+0x12>
 8008e4c:	f000 f88c 	bl	8008f68 <_sbrk_r>
 8008e50:	6030      	str	r0, [r6, #0]
 8008e52:	4621      	mov	r1, r4
 8008e54:	4628      	mov	r0, r5
 8008e56:	f000 f887 	bl	8008f68 <_sbrk_r>
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	d00a      	beq.n	8008e74 <sbrk_aligned+0x34>
 8008e5e:	1cc4      	adds	r4, r0, #3
 8008e60:	f024 0403 	bic.w	r4, r4, #3
 8008e64:	42a0      	cmp	r0, r4
 8008e66:	d007      	beq.n	8008e78 <sbrk_aligned+0x38>
 8008e68:	1a21      	subs	r1, r4, r0
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f000 f87c 	bl	8008f68 <_sbrk_r>
 8008e70:	3001      	adds	r0, #1
 8008e72:	d101      	bne.n	8008e78 <sbrk_aligned+0x38>
 8008e74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008e78:	4620      	mov	r0, r4
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}
 8008e7c:	200008dc 	.word	0x200008dc

08008e80 <_malloc_r>:
 8008e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e84:	1ccd      	adds	r5, r1, #3
 8008e86:	f025 0503 	bic.w	r5, r5, #3
 8008e8a:	3508      	adds	r5, #8
 8008e8c:	2d0c      	cmp	r5, #12
 8008e8e:	bf38      	it	cc
 8008e90:	250c      	movcc	r5, #12
 8008e92:	2d00      	cmp	r5, #0
 8008e94:	4607      	mov	r7, r0
 8008e96:	db01      	blt.n	8008e9c <_malloc_r+0x1c>
 8008e98:	42a9      	cmp	r1, r5
 8008e9a:	d905      	bls.n	8008ea8 <_malloc_r+0x28>
 8008e9c:	230c      	movs	r3, #12
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	2600      	movs	r6, #0
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea8:	4e2e      	ldr	r6, [pc, #184]	; (8008f64 <_malloc_r+0xe4>)
 8008eaa:	f000 f86d 	bl	8008f88 <__malloc_lock>
 8008eae:	6833      	ldr	r3, [r6, #0]
 8008eb0:	461c      	mov	r4, r3
 8008eb2:	bb34      	cbnz	r4, 8008f02 <_malloc_r+0x82>
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4638      	mov	r0, r7
 8008eb8:	f7ff ffc2 	bl	8008e40 <sbrk_aligned>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	d14d      	bne.n	8008f5e <_malloc_r+0xde>
 8008ec2:	6834      	ldr	r4, [r6, #0]
 8008ec4:	4626      	mov	r6, r4
 8008ec6:	2e00      	cmp	r6, #0
 8008ec8:	d140      	bne.n	8008f4c <_malloc_r+0xcc>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	4631      	mov	r1, r6
 8008ece:	4638      	mov	r0, r7
 8008ed0:	eb04 0803 	add.w	r8, r4, r3
 8008ed4:	f000 f848 	bl	8008f68 <_sbrk_r>
 8008ed8:	4580      	cmp	r8, r0
 8008eda:	d13a      	bne.n	8008f52 <_malloc_r+0xd2>
 8008edc:	6821      	ldr	r1, [r4, #0]
 8008ede:	3503      	adds	r5, #3
 8008ee0:	1a6d      	subs	r5, r5, r1
 8008ee2:	f025 0503 	bic.w	r5, r5, #3
 8008ee6:	3508      	adds	r5, #8
 8008ee8:	2d0c      	cmp	r5, #12
 8008eea:	bf38      	it	cc
 8008eec:	250c      	movcc	r5, #12
 8008eee:	4629      	mov	r1, r5
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f7ff ffa5 	bl	8008e40 <sbrk_aligned>
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d02b      	beq.n	8008f52 <_malloc_r+0xd2>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	442b      	add	r3, r5
 8008efe:	6023      	str	r3, [r4, #0]
 8008f00:	e00e      	b.n	8008f20 <_malloc_r+0xa0>
 8008f02:	6822      	ldr	r2, [r4, #0]
 8008f04:	1b52      	subs	r2, r2, r5
 8008f06:	d41e      	bmi.n	8008f46 <_malloc_r+0xc6>
 8008f08:	2a0b      	cmp	r2, #11
 8008f0a:	d916      	bls.n	8008f3a <_malloc_r+0xba>
 8008f0c:	1961      	adds	r1, r4, r5
 8008f0e:	42a3      	cmp	r3, r4
 8008f10:	6025      	str	r5, [r4, #0]
 8008f12:	bf18      	it	ne
 8008f14:	6059      	strne	r1, [r3, #4]
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	bf08      	it	eq
 8008f1a:	6031      	streq	r1, [r6, #0]
 8008f1c:	5162      	str	r2, [r4, r5]
 8008f1e:	604b      	str	r3, [r1, #4]
 8008f20:	4638      	mov	r0, r7
 8008f22:	f104 060b 	add.w	r6, r4, #11
 8008f26:	f000 f835 	bl	8008f94 <__malloc_unlock>
 8008f2a:	f026 0607 	bic.w	r6, r6, #7
 8008f2e:	1d23      	adds	r3, r4, #4
 8008f30:	1af2      	subs	r2, r6, r3
 8008f32:	d0b6      	beq.n	8008ea2 <_malloc_r+0x22>
 8008f34:	1b9b      	subs	r3, r3, r6
 8008f36:	50a3      	str	r3, [r4, r2]
 8008f38:	e7b3      	b.n	8008ea2 <_malloc_r+0x22>
 8008f3a:	6862      	ldr	r2, [r4, #4]
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	bf0c      	ite	eq
 8008f40:	6032      	streq	r2, [r6, #0]
 8008f42:	605a      	strne	r2, [r3, #4]
 8008f44:	e7ec      	b.n	8008f20 <_malloc_r+0xa0>
 8008f46:	4623      	mov	r3, r4
 8008f48:	6864      	ldr	r4, [r4, #4]
 8008f4a:	e7b2      	b.n	8008eb2 <_malloc_r+0x32>
 8008f4c:	4634      	mov	r4, r6
 8008f4e:	6876      	ldr	r6, [r6, #4]
 8008f50:	e7b9      	b.n	8008ec6 <_malloc_r+0x46>
 8008f52:	230c      	movs	r3, #12
 8008f54:	603b      	str	r3, [r7, #0]
 8008f56:	4638      	mov	r0, r7
 8008f58:	f000 f81c 	bl	8008f94 <__malloc_unlock>
 8008f5c:	e7a1      	b.n	8008ea2 <_malloc_r+0x22>
 8008f5e:	6025      	str	r5, [r4, #0]
 8008f60:	e7de      	b.n	8008f20 <_malloc_r+0xa0>
 8008f62:	bf00      	nop
 8008f64:	200008d8 	.word	0x200008d8

08008f68 <_sbrk_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4d06      	ldr	r5, [pc, #24]	; (8008f84 <_sbrk_r+0x1c>)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4604      	mov	r4, r0
 8008f70:	4608      	mov	r0, r1
 8008f72:	602b      	str	r3, [r5, #0]
 8008f74:	f7f7 fed2 	bl	8000d1c <_sbrk>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_sbrk_r+0x1a>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_sbrk_r+0x1a>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	200008e0 	.word	0x200008e0

08008f88 <__malloc_lock>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__malloc_lock+0x8>)
 8008f8a:	f000 b809 	b.w	8008fa0 <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	200008e4 	.word	0x200008e4

08008f94 <__malloc_unlock>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__malloc_unlock+0x8>)
 8008f96:	f000 b804 	b.w	8008fa2 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	200008e4 	.word	0x200008e4

08008fa0 <__retarget_lock_acquire_recursive>:
 8008fa0:	4770      	bx	lr

08008fa2 <__retarget_lock_release_recursive>:
 8008fa2:	4770      	bx	lr

08008fa4 <_init>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	bf00      	nop
 8008fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008faa:	bc08      	pop	{r3}
 8008fac:	469e      	mov	lr, r3
 8008fae:	4770      	bx	lr

08008fb0 <_fini>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	bf00      	nop
 8008fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb6:	bc08      	pop	{r3}
 8008fb8:	469e      	mov	lr, r3
 8008fba:	4770      	bx	lr
