
encoder_mode1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08009d10  08009d10  00019d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009df0  08009df0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009df0  08009df0  00019df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009df8  08009df8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009df8  08009df8  00019df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dfc  08009dfc  00019dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000894  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000924  20000924  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e9c2  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000417c  00000000  00000000  0003ea82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001940  00000000  00000000  00042c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c0  00000000  00000000  00044540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026184  00000000  00000000  00045d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd54  00000000  00000000  0006be84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d72af  00000000  00000000  0008bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00162e87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073bc  00000000  00000000  00162ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cf8 	.word	0x08009cf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009cf8 	.word	0x08009cf8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:

/* USER CODE BEGIN PFP */
uint32_t rot_new_state;
uint32_t rot_old_state;
uint32_t rot_cnt;
uint32_t _write(int file, char* p, int len){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	230a      	movs	r3, #10
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <_write+0x24>)
 800058a:	f004 fd94 	bl	80050b6 <HAL_UART_Transmit>
	return len;
 800058e:	687b      	ldr	r3, [r7, #4]

}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200001e8 	.word	0x200001e8

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fda9 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f835 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f9af 	bl	800090c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ae:	f000 f89b 	bl	80006e8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005b2:	f000 f8c7 	bl	8000744 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005b6:	f000 f8f5 	bl	80007a4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005ba:	f008 f8c5 	bl	8008748 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f97b 	bl	80008b8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005c2:	f000 f925 	bl	8000810 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80005c6:	213c      	movs	r1, #60	; 0x3c
 80005c8:	480f      	ldr	r0, [pc, #60]	; (8000608 <main+0x6c>)
 80005ca:	f004 f9e8 	bl	800499e <HAL_TIM_Encoder_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ce:	f008 f8e1 	bl	8008794 <MX_USB_HOST_Process>
    uint32_t last_print = 0, now = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]

       long int count = (int)TIM3->CNT/4;
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <main+0x70>)
 80005dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005de:	2b00      	cmp	r3, #0
 80005e0:	da00      	bge.n	80005e4 <main+0x48>
 80005e2:	3303      	adds	r3, #3
 80005e4:	109b      	asrs	r3, r3, #2
 80005e6:	607b      	str	r3, [r7, #4]

   	now = HAL_GetTick();
 80005e8:	f000 fdec 	bl	80011c4 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
   	if (now - last_print >= 1000) {
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005f8:	d3e9      	bcc.n	80005ce <main+0x32>
   		printf("Encoder counter = %ld\n", count );
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <main+0x74>)
 80005fe:	f008 fccd 	bl	8008f9c <iprintf>
   		last_print = now;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	60fb      	str	r3, [r7, #12]
  {
 8000606:	e7e2      	b.n	80005ce <main+0x32>
 8000608:	200001a0 	.word	0x200001a0
 800060c:	40000400 	.word	0x40000400
 8000610:	08009d10 	.word	0x08009d10

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f008 fbd2 	bl	8008dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000688:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800068c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000692:	2307      	movs	r3, #7
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fa78 	bl	8003b90 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a6:	f000 fa2f 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2302      	movs	r3, #2
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2105      	movs	r1, #5
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 fcd9 	bl	8004080 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d4:	f000 fa18 	bl	8000b08 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x50>)
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_I2C1_Init+0x54>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x50>)
 80006f4:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_I2C1_Init+0x58>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_I2C1_Init+0x50>)
 8000706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_I2C1_Init+0x50>)
 8000726:	f002 fc4f 	bl	8002fc8 <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 f9ea 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000ac 	.word	0x200000ac
 800073c:	40005400 	.word	0x40005400
 8000740:	000186a0 	.word	0x000186a0

08000744 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_I2S3_Init+0x54>)
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <MX_I2S3_Init+0x58>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2S3_Init+0x54>)
 8000750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000754:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_I2S3_Init+0x54>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2S3_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_I2S3_Init+0x54>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_I2S3_Init+0x54>)
 800076c:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <MX_I2S3_Init+0x5c>)
 800076e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2S3_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_I2S3_Init+0x54>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2S3_Init+0x54>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_I2S3_Init+0x54>)
 8000784:	f002 fd64 	bl	8003250 <HAL_I2S_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800078e:	f000 f9bb 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000100 	.word	0x20000100
 800079c:	40003c00 	.word	0x40003c00
 80007a0:	00017700 	.word	0x00017700

080007a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_SPI1_Init+0x64>)
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <MX_SPI1_Init+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_SPI1_Init+0x64>)
 80007b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_SPI1_Init+0x64>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SPI1_Init+0x64>)
 80007f0:	220a      	movs	r2, #10
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_SPI1_Init+0x64>)
 80007f6:	f003 ffa3 	bl	8004740 <HAL_SPI_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000800:	f000 f982 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000148 	.word	0x20000148
 800080c:	40013000 	.word	0x40013000

08000810 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2224      	movs	r2, #36	; 0x24
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f008 fad4 	bl	8008dcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_TIM3_Init+0xa0>)
 800082e:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <MX_TIM3_Init+0xa4>)
 8000830:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_TIM3_Init+0xa0>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_TIM3_Init+0xa0>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_TIM3_Init+0xa0>)
 8000840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000844:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_TIM3_Init+0xa0>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_TIM3_Init+0xa0>)
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000852:	2303      	movs	r3, #3
 8000854:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800085a:	2301      	movs	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800086a:	2301      	movs	r3, #1
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_TIM3_Init+0xa0>)
 800087e:	f003 ffe8 	bl	8004852 <HAL_TIM_Encoder_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000888:	f000 f93e 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_TIM3_Init+0xa0>)
 800089a:	f004 fb2f 	bl	8004efc <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80008a4:	f000 f930 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3730      	adds	r7, #48	; 0x30
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200001a0 	.word	0x200001a0
 80008b4:	40000400 	.word	0x40000400

080008b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART2_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f004 fb94 	bl	800501c <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f905 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001e8 	.word	0x200001e8
 8000908:	40004400 	.word	0x40004400

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	4b72      	ldr	r3, [pc, #456]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a71      	ldr	r2, [pc, #452]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b6f      	ldr	r3, [pc, #444]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	4b6b      	ldr	r3, [pc, #428]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a6a      	ldr	r2, [pc, #424]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b68      	ldr	r3, [pc, #416]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b64      	ldr	r3, [pc, #400]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a63      	ldr	r2, [pc, #396]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b61      	ldr	r3, [pc, #388]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b5d      	ldr	r3, [pc, #372]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a5c      	ldr	r2, [pc, #368]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b5a      	ldr	r3, [pc, #360]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a55      	ldr	r2, [pc, #340]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b53      	ldr	r3, [pc, #332]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b4f      	ldr	r3, [pc, #316]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a4e      	ldr	r2, [pc, #312]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b4c      	ldr	r3, [pc, #304]	; (8000af0 <MX_GPIO_Init+0x1e4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2108      	movs	r1, #8
 80009ce:	4849      	ldr	r0, [pc, #292]	; (8000af4 <MX_GPIO_Init+0x1e8>)
 80009d0:	f000 fed6 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2101      	movs	r1, #1
 80009d8:	4847      	ldr	r0, [pc, #284]	; (8000af8 <MX_GPIO_Init+0x1ec>)
 80009da:	f000 fed1 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009de:	2200      	movs	r2, #0
 80009e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009e4:	4845      	ldr	r0, [pc, #276]	; (8000afc <MX_GPIO_Init+0x1f0>)
 80009e6:	f000 fecb 	bl	8001780 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ea:	2308      	movs	r3, #8
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	483c      	ldr	r0, [pc, #240]	; (8000af4 <MX_GPIO_Init+0x1e8>)
 8000a02:	f000 fd21 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4836      	ldr	r0, [pc, #216]	; (8000af8 <MX_GPIO_Init+0x1ec>)
 8000a1e:	f000 fd13 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a22:	2308      	movs	r3, #8
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a32:	2305      	movs	r3, #5
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	482e      	ldr	r0, [pc, #184]	; (8000af8 <MX_GPIO_Init+0x1ec>)
 8000a3e:	f000 fd03 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a46:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	482a      	ldr	r0, [pc, #168]	; (8000b00 <MX_GPIO_Init+0x1f4>)
 8000a58:	f000 fcf6 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4825      	ldr	r0, [pc, #148]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 8000a70:	f000 fcea 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a86:	2305      	movs	r3, #5
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481c      	ldr	r0, [pc, #112]	; (8000b04 <MX_GPIO_Init+0x1f8>)
 8000a92:	f000 fcd9 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a96:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a9a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000ab0:	f000 fcca 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_GPIO_Init+0x1f0>)
 8000ac8:	f000 fcbe 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ad0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_GPIO_Init+0x1e8>)
 8000ae2:	f000 fcb1 	bl	8001448 <HAL_GPIO_Init>

}
 8000ae6:	bf00      	nop
 8000ae8:	3730      	adds	r7, #48	; 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40020800 	.word	0x40020800
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020400 	.word	0x40020400

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b52:	2007      	movs	r0, #7
 8000b54:	f000 fc36 	bl	80013c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_I2C_MspInit+0x84>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d12c      	bne.n	8000be0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ba2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba8:	2312      	movs	r3, #18
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <HAL_I2C_MspInit+0x8c>)
 8000bc0:	f000 fc42 	bl	8001448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_I2C_MspInit+0x88>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40005400 	.word	0x40005400
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a31      	ldr	r2, [pc, #196]	; (8000ce4 <HAL_I2S_MspInit+0xf0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d15a      	bne.n	8000cda <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c24:	2301      	movs	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c28:	23c0      	movs	r3, #192	; 0xc0
 8000c2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fc43 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c40:	f7ff ff62 	bl	8000b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <HAL_I2S_MspInit+0xf4>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <HAL_I2S_MspInit+0xf4>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_I2S_MspInit+0xf4>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a1f      	ldr	r2, [pc, #124]	; (8000ce8 <HAL_I2S_MspInit+0xf4>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <HAL_I2S_MspInit+0xf4>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_I2S_MspInit+0xf4>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <HAL_I2S_MspInit+0xf4>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_I2S_MspInit+0xf4>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c98:	2310      	movs	r3, #16
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ca8:	2306      	movs	r3, #6
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480e      	ldr	r0, [pc, #56]	; (8000cec <HAL_I2S_MspInit+0xf8>)
 8000cb4:	f000 fbc8 	bl	8001448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cb8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <HAL_I2S_MspInit+0xfc>)
 8000cd6:	f000 fbb7 	bl	8001448 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3738      	adds	r7, #56	; 0x38
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40003c00 	.word	0x40003c00
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020800 	.word	0x40020800

08000cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <HAL_SPI_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12b      	bne.n	8000d6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d4e:	23e0      	movs	r3, #224	; 0xe0
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_SPI_MspInit+0x8c>)
 8000d6a:	f000 fb6d 	bl	8001448 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a2c      	ldr	r2, [pc, #176]	; (8000e54 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d151      	bne.n	8000e4a <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a2a      	ldr	r2, [pc, #168]	; (8000e58 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dfa:	2340      	movs	r3, #64	; 0x40
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4811      	ldr	r0, [pc, #68]	; (8000e5c <HAL_TIM_Encoder_MspInit+0xd8>)
 8000e16:	f000 fb17 	bl	8001448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e1a:	2320      	movs	r3, #32
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	480a      	ldr	r0, [pc, #40]	; (8000e60 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e36:	f000 fb07 	bl	8001448 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f000 facb 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e44:	201d      	movs	r0, #29
 8000e46:	f000 fae4 	bl	8001412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40000400 	.word	0x40000400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020400 	.word	0x40020400

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_UART_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000eda:	f000 fab5 	bl	8001448 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f40:	f000 f92c 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM3_IRQHandler+0x10>)
 8000f4e:	f003 fdd4 	bl	8004afa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200001a0 	.word	0x200001a0

08000f5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <OTG_FS_IRQHandler+0x10>)
 8000f62:	f000 fe91 	bl	8001c88 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000610 	.word	0x20000610

08000f70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e00a      	b.n	8000f98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f82:	f3af 8000 	nop.w
 8000f86:	4601      	mov	r1, r0
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf0      	blt.n	8000f82 <_read+0x12>
  }

  return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <_isatty>:

int _isatty(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f007 fe88 	bl	8008d58 <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20020000 	.word	0x20020000
 8001074:	00000400 	.word	0x00000400
 8001078:	2000022c 	.word	0x2000022c
 800107c:	20000928 	.word	0x20000928

08001080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <SystemInit+0x20>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <SystemInit+0x20>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010aa:	490e      	ldr	r1, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010ac:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c0:	4c0b      	ldr	r4, [pc, #44]	; (80010f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ce:	f7ff ffd7 	bl	8001080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d2:	f007 fe47 	bl	8008d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d6:	f7ff fa61 	bl	800059c <main>
  bx  lr    
 80010da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80010e8:	08009e00 	.word	0x08009e00
  ldr r2, =_sbss
 80010ec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80010f0:	20000924 	.word	0x20000924

080010f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_Init+0x40>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_Init+0x40>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x40>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f94f 	bl	80013c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	2000      	movs	r0, #0
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fcf2 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f967 	bl	800142e <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001178:	f000 f92f 	bl	80013da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000000 	.word	0x20000000
 8001194:	20000008 	.word	0x20000008
 8001198:	20000004 	.word	0x20000004

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000230 	.word	0x20000230

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000230 	.word	0x20000230

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001390:	d301      	bcc.n	8001396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001392:	2301      	movs	r3, #1
 8001394:	e00f      	b.n	80013b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <SysTick_Config+0x40>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139e:	210f      	movs	r1, #15
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a4:	f7ff ff8e 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <SysTick_Config+0x40>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <SysTick_Config+0x40>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010

080013c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff29 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ec:	f7ff ff3e 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	f7ff ff8e 	bl	8001318 <NVIC_EncodePriority>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff5d 	bl	80012c4 <__NVIC_SetPriority>
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff31 	bl	8001288 <__NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffa2 	bl	8001380 <SysTick_Config>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	e16b      	b.n	800173c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 815a 	bne.w	8001736 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d005      	beq.n	800149a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001496:	2b02      	cmp	r3, #2
 8001498:	d130      	bne.n	80014fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d0:	2201      	movs	r2, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 0201 	and.w	r2, r3, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b03      	cmp	r3, #3
 8001506:	d017      	beq.n	8001538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d123      	bne.n	800158c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	08da      	lsrs	r2, r3, #3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3208      	adds	r2, #8
 800154c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	08da      	lsrs	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3208      	adds	r2, #8
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0203 	and.w	r2, r3, #3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80b4 	beq.w	8001736 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b60      	ldr	r3, [pc, #384]	; (8001754 <HAL_GPIO_Init+0x30c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a5f      	ldr	r2, [pc, #380]	; (8001754 <HAL_GPIO_Init+0x30c>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b5d      	ldr	r3, [pc, #372]	; (8001754 <HAL_GPIO_Init+0x30c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ea:	4a5b      	ldr	r2, [pc, #364]	; (8001758 <HAL_GPIO_Init+0x310>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a52      	ldr	r2, [pc, #328]	; (800175c <HAL_GPIO_Init+0x314>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d02b      	beq.n	800166e <HAL_GPIO_Init+0x226>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a51      	ldr	r2, [pc, #324]	; (8001760 <HAL_GPIO_Init+0x318>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d025      	beq.n	800166a <HAL_GPIO_Init+0x222>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a50      	ldr	r2, [pc, #320]	; (8001764 <HAL_GPIO_Init+0x31c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d01f      	beq.n	8001666 <HAL_GPIO_Init+0x21e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4f      	ldr	r2, [pc, #316]	; (8001768 <HAL_GPIO_Init+0x320>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d019      	beq.n	8001662 <HAL_GPIO_Init+0x21a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4e      	ldr	r2, [pc, #312]	; (800176c <HAL_GPIO_Init+0x324>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d013      	beq.n	800165e <HAL_GPIO_Init+0x216>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4d      	ldr	r2, [pc, #308]	; (8001770 <HAL_GPIO_Init+0x328>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00d      	beq.n	800165a <HAL_GPIO_Init+0x212>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4c      	ldr	r2, [pc, #304]	; (8001774 <HAL_GPIO_Init+0x32c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d007      	beq.n	8001656 <HAL_GPIO_Init+0x20e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4b      	ldr	r2, [pc, #300]	; (8001778 <HAL_GPIO_Init+0x330>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_GPIO_Init+0x20a>
 800164e:	2307      	movs	r3, #7
 8001650:	e00e      	b.n	8001670 <HAL_GPIO_Init+0x228>
 8001652:	2308      	movs	r3, #8
 8001654:	e00c      	b.n	8001670 <HAL_GPIO_Init+0x228>
 8001656:	2306      	movs	r3, #6
 8001658:	e00a      	b.n	8001670 <HAL_GPIO_Init+0x228>
 800165a:	2305      	movs	r3, #5
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x228>
 800165e:	2304      	movs	r3, #4
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x228>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x228>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x228>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x228>
 800166e:	2300      	movs	r3, #0
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f002 0203 	and.w	r2, r2, #3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	; (8001758 <HAL_GPIO_Init+0x310>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_GPIO_Init+0x334>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b2:	4a32      	ldr	r2, [pc, #200]	; (800177c <HAL_GPIO_Init+0x334>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b8:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_GPIO_Init+0x334>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016dc:	4a27      	ldr	r2, [pc, #156]	; (800177c <HAL_GPIO_Init+0x334>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_GPIO_Init+0x334>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001706:	4a1d      	ldr	r2, [pc, #116]	; (800177c <HAL_GPIO_Init+0x334>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_GPIO_Init+0x334>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001730:	4a12      	ldr	r2, [pc, #72]	; (800177c <HAL_GPIO_Init+0x334>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3301      	adds	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	f67f ae90 	bls.w	8001464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40021400 	.word	0x40021400
 8001774:	40021800 	.word	0x40021800
 8001778:	40021c00 	.word	0x40021c00
 800177c:	40013c00 	.word	0x40013c00

08001780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
 800178c:	4613      	mov	r3, r2
 800178e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001790:	787b      	ldrb	r3, [r7, #1]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800179c:	e003      	b.n	80017a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	041a      	lsls	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	619a      	str	r2, [r3, #24]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b4:	b08f      	sub	sp, #60	; 0x3c
 80017b6:	af0a      	add	r7, sp, #40	; 0x28
 80017b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e054      	b.n	800186e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f007 f810 	bl	8008804 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2203      	movs	r2, #3
 80017e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f004 f83e 	bl	8005884 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	687e      	ldr	r6, [r7, #4]
 8001810:	466d      	mov	r5, sp
 8001812:	f106 0410 	add.w	r4, r6, #16
 8001816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001822:	e885 0003 	stmia.w	r5, {r0, r1}
 8001826:	1d33      	adds	r3, r6, #4
 8001828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800182a:	6838      	ldr	r0, [r7, #0]
 800182c:	f003 ffb8 	bl	80057a0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	4618      	mov	r0, r3
 8001838:	f004 f835 	bl	80058a6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	687e      	ldr	r6, [r7, #4]
 8001844:	466d      	mov	r5, sp
 8001846:	f106 0410 	add.w	r4, r6, #16
 800184a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800184e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001852:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001856:	e885 0003 	stmia.w	r5, {r0, r1}
 800185a:	1d33      	adds	r3, r6, #4
 800185c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800185e:	6838      	ldr	r0, [r7, #0]
 8001860:	f004 f9be 	bl	8005be0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001876 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001876:	b590      	push	{r4, r7, lr}
 8001878:	b089      	sub	sp, #36	; 0x24
 800187a:	af04      	add	r7, sp, #16
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	4608      	mov	r0, r1
 8001880:	4611      	mov	r1, r2
 8001882:	461a      	mov	r2, r3
 8001884:	4603      	mov	r3, r0
 8001886:	70fb      	strb	r3, [r7, #3]
 8001888:	460b      	mov	r3, r1
 800188a:	70bb      	strb	r3, [r7, #2]
 800188c:	4613      	mov	r3, r2
 800188e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_HCD_HC_Init+0x28>
 800189a:	2302      	movs	r3, #2
 800189c:	e076      	b.n	800198c <HAL_HCD_HC_Init+0x116>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	333d      	adds	r3, #61	; 0x3d
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	212c      	movs	r1, #44	; 0x2c
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	3338      	adds	r3, #56	; 0x38
 80018c6:	787a      	ldrb	r2, [r7, #1]
 80018c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3340      	adds	r3, #64	; 0x40
 80018d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018da:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3339      	adds	r3, #57	; 0x39
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	333f      	adds	r3, #63	; 0x3f
 80018fc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001900:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	78ba      	ldrb	r2, [r7, #2]
 8001906:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800190a:	b2d0      	uxtb	r0, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	212c      	movs	r1, #44	; 0x2c
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	333a      	adds	r3, #58	; 0x3a
 8001918:	4602      	mov	r2, r0
 800191a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800191c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001920:	2b00      	cmp	r3, #0
 8001922:	da09      	bge.n	8001938 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	212c      	movs	r1, #44	; 0x2c
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	333b      	adds	r3, #59	; 0x3b
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	e008      	b.n	800194a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	212c      	movs	r1, #44	; 0x2c
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	333b      	adds	r3, #59	; 0x3b
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	333c      	adds	r3, #60	; 0x3c
 8001958:	f897 2020 	ldrb.w	r2, [r7, #32]
 800195c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	787c      	ldrb	r4, [r7, #1]
 8001964:	78ba      	ldrb	r2, [r7, #2]
 8001966:	78f9      	ldrb	r1, [r7, #3]
 8001968:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4623      	mov	r3, r4
 800197a:	f004 fab7 	bl	8005eec <USB_HC_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}

08001994 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_HCD_HC_Halt+0x1e>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e00f      	b.n	80019d2 <HAL_HCD_HC_Halt+0x3e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f004 fd07 	bl	80063d6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	70fb      	strb	r3, [r7, #3]
 80019ee:	460b      	mov	r3, r1
 80019f0:	70bb      	strb	r3, [r7, #2]
 80019f2:	4613      	mov	r3, r2
 80019f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	212c      	movs	r1, #44	; 0x2c
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	333b      	adds	r3, #59	; 0x3b
 8001a04:	78ba      	ldrb	r2, [r7, #2]
 8001a06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	333f      	adds	r3, #63	; 0x3f
 8001a16:	787a      	ldrb	r2, [r7, #1]
 8001a18:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a1a:	7c3b      	ldrb	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d112      	bne.n	8001a46 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3342      	adds	r3, #66	; 0x42
 8001a2e:	2203      	movs	r2, #3
 8001a30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	212c      	movs	r1, #44	; 0x2c
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	333d      	adds	r3, #61	; 0x3d
 8001a40:	7f3a      	ldrb	r2, [r7, #28]
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	e008      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	212c      	movs	r1, #44	; 0x2c
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	3342      	adds	r3, #66	; 0x42
 8001a54:	2202      	movs	r2, #2
 8001a56:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	f200 80c6 	bhi.w	8001bec <HAL_HCD_HC_SubmitRequest+0x210>
 8001a60:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001bd9 	.word	0x08001bd9
 8001a70:	08001add 	.word	0x08001add
 8001a74:	08001b5b 	.word	0x08001b5b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a78:	7c3b      	ldrb	r3, [r7, #16]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	f040 80b8 	bne.w	8001bf0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a80:	78bb      	ldrb	r3, [r7, #2]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 80b4 	bne.w	8001bf0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a88:	8b3b      	ldrh	r3, [r7, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d108      	bne.n	8001aa0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	212c      	movs	r1, #44	; 0x2c
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	3355      	adds	r3, #85	; 0x55
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3355      	adds	r3, #85	; 0x55
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	212c      	movs	r1, #44	; 0x2c
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	3342      	adds	r3, #66	; 0x42
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ac6:	e093      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	212c      	movs	r1, #44	; 0x2c
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3342      	adds	r3, #66	; 0x42
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	701a      	strb	r2, [r3, #0]
      break;
 8001ada:	e089      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001adc:	78bb      	ldrb	r3, [r7, #2]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d11d      	bne.n	8001b1e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	3355      	adds	r3, #85	; 0x55
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3342      	adds	r3, #66	; 0x42
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b08:	e073      	b.n	8001bf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	3342      	adds	r3, #66	; 0x42
 8001b18:	2202      	movs	r2, #2
 8001b1a:	701a      	strb	r2, [r3, #0]
      break;
 8001b1c:	e069      	b.n	8001bf2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	212c      	movs	r1, #44	; 0x2c
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	3354      	adds	r3, #84	; 0x54
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3342      	adds	r3, #66	; 0x42
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
      break;
 8001b44:	e055      	b.n	8001bf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	212c      	movs	r1, #44	; 0x2c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	3342      	adds	r3, #66	; 0x42
 8001b54:	2202      	movs	r2, #2
 8001b56:	701a      	strb	r2, [r3, #0]
      break;
 8001b58:	e04b      	b.n	8001bf2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b5a:	78bb      	ldrb	r3, [r7, #2]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11d      	bne.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3355      	adds	r3, #85	; 0x55
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d109      	bne.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	212c      	movs	r1, #44	; 0x2c
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	3342      	adds	r3, #66	; 0x42
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b86:	e034      	b.n	8001bf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	212c      	movs	r1, #44	; 0x2c
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	3342      	adds	r3, #66	; 0x42
 8001b96:	2202      	movs	r2, #2
 8001b98:	701a      	strb	r2, [r3, #0]
      break;
 8001b9a:	e02a      	b.n	8001bf2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	212c      	movs	r1, #44	; 0x2c
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3354      	adds	r3, #84	; 0x54
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	212c      	movs	r1, #44	; 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3342      	adds	r3, #66	; 0x42
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
      break;
 8001bc2:	e016      	b.n	8001bf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	212c      	movs	r1, #44	; 0x2c
 8001bca:	fb01 f303 	mul.w	r3, r1, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	3342      	adds	r3, #66	; 0x42
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	701a      	strb	r2, [r3, #0]
      break;
 8001bd6:	e00c      	b.n	8001bf2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	212c      	movs	r1, #44	; 0x2c
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	3342      	adds	r3, #66	; 0x42
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
      break;
 8001bea:	e002      	b.n	8001bf2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001bec:	bf00      	nop
 8001bee:	e000      	b.n	8001bf2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001bf0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	212c      	movs	r1, #44	; 0x2c
 8001bf8:	fb01 f303 	mul.w	r3, r1, r3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3344      	adds	r3, #68	; 0x44
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	8b3a      	ldrh	r2, [r7, #24]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	202c      	movs	r0, #44	; 0x2c
 8001c0c:	fb00 f303 	mul.w	r3, r0, r3
 8001c10:	440b      	add	r3, r1
 8001c12:	334c      	adds	r3, #76	; 0x4c
 8001c14:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3360      	adds	r3, #96	; 0x60
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	212c      	movs	r1, #44	; 0x2c
 8001c2e:	fb01 f303 	mul.w	r3, r1, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	3350      	adds	r3, #80	; 0x50
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	3339      	adds	r3, #57	; 0x39
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	212c      	movs	r1, #44	; 0x2c
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	3361      	adds	r3, #97	; 0x61
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	222c      	movs	r2, #44	; 0x2c
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	3338      	adds	r3, #56	; 0x38
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	18d1      	adds	r1, r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	f004 fa5a 	bl	8006130 <USB_HC_StartXfer>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop

08001c88 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 ff5b 	bl	8005b5a <USB_GetMode>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	f040 80f6 	bne.w	8001e98 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 ff3f 	bl	8005b34 <USB_ReadInterrupts>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80ec 	beq.w	8001e96 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 ff36 	bl	8005b34 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cd2:	d104      	bne.n	8001cde <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cdc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 ff26 	bl	8005b34 <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cf2:	d104      	bne.n	8001cfe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 ff16 	bl	8005b34 <USB_ReadInterrupts>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d12:	d104      	bne.n	8001d1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 ff06 	bl	8005b34 <USB_ReadInterrupts>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d103      	bne.n	8001d3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2202      	movs	r2, #2
 8001d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 fef8 	bl	8005b34 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d4e:	d11c      	bne.n	8001d8a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	6938      	ldr	r0, [r7, #16]
 8001d6e:	f003 fde7 	bl	8005940 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d72:	6938      	ldr	r0, [r7, #16]
 8001d74:	f003 fe18 	bl	80059a8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 ffee 	bl	8005d60 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f006 fdbb 	bl	8008900 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fed0 	bl	8005b34 <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d9e:	d102      	bne.n	8001da6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f001 f89e 	bl	8002ee2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 fec2 	bl	8005b34 <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d106      	bne.n	8001dc8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f006 fd84 	bl	80088c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 feb1 	bl	8005b34 <USB_ReadInterrupts>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d101      	bne.n	8001de0 <HAL_HCD_IRQHandler+0x158>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_HCD_IRQHandler+0x15a>
 8001de0:	2300      	movs	r3, #0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0210 	bic.w	r2, r2, #16
 8001df4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 ffa1 	bl	8002d3e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0210 	orr.w	r2, r2, #16
 8001e0a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 fe8f 	bl	8005b34 <USB_ReadInterrupts>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e20:	d13a      	bne.n	8001e98 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 fac4 	bl	80063b4 <USB_HC_ReadInterrupt>
 8001e2c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e025      	b.n	8001e80 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d018      	beq.n	8001e7a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e5e:	d106      	bne.n	8001e6e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8ab 	bl	8001fc2 <HCD_HC_IN_IRQHandler>
 8001e6c:	e005      	b.n	8001e7a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	4619      	mov	r1, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fbf9 	bl	800266c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d3d4      	bcc.n	8001e34 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e92:	615a      	str	r2, [r3, #20]
 8001e94:	e000      	b.n	8001e98 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e96:	bf00      	nop
    }
  }
}
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_HCD_Start+0x16>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e013      	b.n	8001edc <HAL_HCD_Start+0x3e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 ffb0 	bl	8005e28 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f003 fcc8 	bl	8005862 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_HCD_Stop+0x16>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e00d      	b.n	8001f16 <HAL_HCD_Stop+0x32>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 fb9e 	bl	8006648 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 ff52 	bl	8005dd4 <USB_ResetPort>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	212c      	movs	r1, #44	; 0x2c
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	3360      	adds	r3, #96	; 0x60
 8001f54:	781b      	ldrb	r3, [r3, #0]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3350      	adds	r3, #80	; 0x50
 8001f7c:	681b      	ldr	r3, [r3, #0]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 ff96 	bl	8005ec8 <USB_GetCurrentFrame>
 8001f9c:	4603      	mov	r3, r0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 ff71 	bl	8005e9a <USB_GetHostSpeed>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d11a      	bne.n	8002028 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffe:	461a      	mov	r2, r3
 8002000:	2304      	movs	r3, #4
 8002002:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	212c      	movs	r1, #44	; 0x2c
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	4413      	add	r3, r2
 8002010:	3361      	adds	r3, #97	; 0x61
 8002012:	2206      	movs	r2, #6
 8002014:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f004 f9d8 	bl	80063d6 <USB_HC_Halt>
 8002026:	e0af      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203e:	d11b      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	461a      	mov	r2, r3
 800204e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002052:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	3361      	adds	r3, #97	; 0x61
 8002062:	2207      	movs	r2, #7
 8002064:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f004 f9b0 	bl	80063d6 <USB_HC_Halt>
 8002076:	e087      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b20      	cmp	r3, #32
 800208c:	d109      	bne.n	80020a2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	461a      	mov	r2, r3
 800209c:	2320      	movs	r3, #32
 800209e:	6093      	str	r3, [r2, #8]
 80020a0:	e072      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d11a      	bne.n	80020ee <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c4:	461a      	mov	r2, r3
 80020c6:	2308      	movs	r3, #8
 80020c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3361      	adds	r3, #97	; 0x61
 80020d8:	2205      	movs	r2, #5
 80020da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 f975 	bl	80063d6 <USB_HC_Halt>
 80020ec:	e04c      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002104:	d11b      	bne.n	800213e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	461a      	mov	r2, r3
 8002114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002118:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3361      	adds	r3, #97	; 0x61
 8002128:	2208      	movs	r2, #8
 800212a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f004 f94d 	bl	80063d6 <USB_HC_Halt>
 800213c:	e024      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b80      	cmp	r3, #128	; 0x80
 8002152:	d119      	bne.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	461a      	mov	r2, r3
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3361      	adds	r3, #97	; 0x61
 8002174:	2206      	movs	r2, #6
 8002176:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f004 f927 	bl	80063d6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800219a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219e:	d112      	bne.n	80021c6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 f913 	bl	80063d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	461a      	mov	r2, r3
 80021be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021c4:	e24e      	b.n	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 80df 	bne.w	800239c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d019      	beq.n	800221a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3348      	adds	r3, #72	; 0x48
 80021f4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	0159      	lsls	r1, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	440b      	add	r3, r1
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002208:	1ad2      	subs	r2, r2, r3
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	202c      	movs	r0, #44	; 0x2c
 8002210:	fb00 f303 	mul.w	r3, r0, r3
 8002214:	440b      	add	r3, r1
 8002216:	3350      	adds	r3, #80	; 0x50
 8002218:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	3361      	adds	r3, #97	; 0x61
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	335c      	adds	r3, #92	; 0x5c
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	461a      	mov	r2, r3
 800224c:	2301      	movs	r3, #1
 800224e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	333f      	adds	r3, #63	; 0x3f
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	333f      	adds	r3, #63	; 0x3f
 8002272:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002274:	2b02      	cmp	r3, #2
 8002276:	d111      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f004 f8a7 	bl	80063d6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	461a      	mov	r2, r3
 8002296:	2310      	movs	r3, #16
 8002298:	6093      	str	r3, [r2, #8]
 800229a:	e03a      	b.n	8002312 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	333f      	adds	r3, #63	; 0x3f
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d009      	beq.n	80022c4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	333f      	adds	r3, #63	; 0x3f
 80022be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d126      	bne.n	8002312 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	0151      	lsls	r1, r2, #5
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	440a      	add	r2, r1
 80022da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3360      	adds	r3, #96	; 0x60
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	b2d9      	uxtb	r1, r3
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	202c      	movs	r0, #44	; 0x2c
 8002300:	fb00 f303 	mul.w	r3, r0, r3
 8002304:	4413      	add	r3, r2
 8002306:	3360      	adds	r3, #96	; 0x60
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f006 fb05 	bl	800891c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d12b      	bne.n	8002372 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3348      	adds	r3, #72	; 0x48
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	202c      	movs	r0, #44	; 0x2c
 8002330:	fb00 f202 	mul.w	r2, r0, r2
 8002334:	440a      	add	r2, r1
 8002336:	3240      	adds	r2, #64	; 0x40
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	fbb3 f3f2 	udiv	r3, r3, r2
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 818e 	beq.w	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	3354      	adds	r3, #84	; 0x54
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2d8      	uxtb	r0, r3
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	3354      	adds	r3, #84	; 0x54
 800236c:	4602      	mov	r2, r0
 800236e:	701a      	strb	r2, [r3, #0]
}
 8002370:	e178      	b.n	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	3354      	adds	r3, #84	; 0x54
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	f083 0301 	eor.w	r3, r3, #1
 8002386:	b2d8      	uxtb	r0, r3
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	3354      	adds	r3, #84	; 0x54
 8002396:	4602      	mov	r2, r0
 8002398:	701a      	strb	r2, [r3, #0]
}
 800239a:	e163      	b.n	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	f040 80f6 	bne.w	80025a0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3361      	adds	r3, #97	; 0x61
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d109      	bne.n	80023dc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3360      	adds	r3, #96	; 0x60
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	e0c9      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3361      	adds	r3, #97	; 0x61
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d109      	bne.n	8002404 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3360      	adds	r3, #96	; 0x60
 80023fe:	2205      	movs	r2, #5
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e0b5      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3361      	adds	r3, #97	; 0x61
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b06      	cmp	r3, #6
 8002416:	d009      	beq.n	800242c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3361      	adds	r3, #97	; 0x61
 8002426:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002428:	2b08      	cmp	r3, #8
 800242a:	d150      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	335c      	adds	r3, #92	; 0x5c
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	202c      	movs	r0, #44	; 0x2c
 8002444:	fb00 f303 	mul.w	r3, r0, r3
 8002448:	440b      	add	r3, r1
 800244a:	335c      	adds	r3, #92	; 0x5c
 800244c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	335c      	adds	r3, #92	; 0x5c
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d912      	bls.n	8002488 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	335c      	adds	r3, #92	; 0x5c
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3360      	adds	r3, #96	; 0x60
 8002482:	2204      	movs	r2, #4
 8002484:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002486:	e073      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3360      	adds	r3, #96	; 0x60
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024b0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024b8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024cc:	e050      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3361      	adds	r3, #97	; 0x61
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d122      	bne.n	8002528 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	3360      	adds	r3, #96	; 0x60
 80024f0:	2202      	movs	r2, #2
 80024f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800250a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002512:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e023      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3361      	adds	r3, #97	; 0x61
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b07      	cmp	r3, #7
 800253a:	d119      	bne.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	335c      	adds	r3, #92	; 0x5c
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	202c      	movs	r0, #44	; 0x2c
 8002554:	fb00 f303 	mul.w	r3, r0, r3
 8002558:	440b      	add	r3, r1
 800255a:	335c      	adds	r3, #92	; 0x5c
 800255c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	3360      	adds	r3, #96	; 0x60
 800256c:	2204      	movs	r2, #4
 800256e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	461a      	mov	r2, r3
 800257e:	2302      	movs	r3, #2
 8002580:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	b2d9      	uxtb	r1, r3
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	202c      	movs	r0, #44	; 0x2c
 800258c:	fb00 f303 	mul.w	r3, r0, r3
 8002590:	4413      	add	r3, r2
 8002592:	3360      	adds	r3, #96	; 0x60
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f006 f9bf 	bl	800891c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800259e:	e061      	b.n	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b10      	cmp	r3, #16
 80025b4:	d156      	bne.n	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	333f      	adds	r3, #63	; 0x3f
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d111      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	335c      	adds	r3, #92	; 0x5c
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fef5 	bl	80063d6 <USB_HC_Halt>
 80025ec:	e031      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	333f      	adds	r3, #63	; 0x3f
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	333f      	adds	r3, #63	; 0x3f
 8002610:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002612:	2b02      	cmp	r3, #2
 8002614:	d11d      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	335c      	adds	r3, #92	; 0x5c
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d110      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	212c      	movs	r1, #44	; 0x2c
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	3361      	adds	r3, #97	; 0x61
 800263e:	2203      	movs	r2, #3
 8002640:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f003 fec2 	bl	80063d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	461a      	mov	r2, r3
 8002660:	2310      	movs	r3, #16
 8002662:	6093      	str	r3, [r2, #8]
}
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b04      	cmp	r3, #4
 800269a:	d11a      	bne.n	80026d2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2304      	movs	r3, #4
 80026ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	3361      	adds	r3, #97	; 0x61
 80026bc:	2206      	movs	r2, #6
 80026be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fe83 	bl	80063d6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80026d0:	e331      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d12e      	bne.n	8002746 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	461a      	mov	r2, r3
 80026f6:	2320      	movs	r3, #32
 80026f8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	333d      	adds	r3, #61	; 0x3d
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	f040 8313 	bne.w	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	333d      	adds	r3, #61	; 0x3d
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3360      	adds	r3, #96	; 0x60
 8002730:	2202      	movs	r2, #2
 8002732:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fe49 	bl	80063d6 <USB_HC_Halt>
}
 8002744:	e2f7      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275c:	d112      	bne.n	8002784 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002770:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f003 fe2a 	bl	80063d6 <USB_HC_Halt>
}
 8002782:	e2d8      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d140      	bne.n	800281c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	335c      	adds	r3, #92	; 0x5c
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b40      	cmp	r3, #64	; 0x40
 80027c0:	d111      	bne.n	80027e6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	333d      	adds	r3, #61	; 0x3d
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	461a      	mov	r2, r3
 80027e2:	2340      	movs	r3, #64	; 0x40
 80027e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	461a      	mov	r2, r3
 80027f4:	2301      	movs	r3, #1
 80027f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3361      	adds	r3, #97	; 0x61
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f003 fdde 	bl	80063d6 <USB_HC_Halt>
}
 800281a:	e28c      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d12c      	bne.n	800288c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3361      	adds	r3, #97	; 0x61
 8002840:	2204      	movs	r2, #4
 8002842:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	333d      	adds	r3, #61	; 0x3d
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	335c      	adds	r3, #92	; 0x5c
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f003 fdaf 	bl	80063d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	461a      	mov	r2, r3
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	6093      	str	r3, [r2, #8]
}
 800288a:	e254      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d11a      	bne.n	80028d8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	461a      	mov	r2, r3
 80028b0:	2308      	movs	r3, #8
 80028b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3361      	adds	r3, #97	; 0x61
 80028c2:	2205      	movs	r2, #5
 80028c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fd80 	bl	80063d6 <USB_HC_Halt>
}
 80028d6:	e22e      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d140      	bne.n	8002970 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	335c      	adds	r3, #92	; 0x5c
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3361      	adds	r3, #97	; 0x61
 800290e:	2203      	movs	r2, #3
 8002910:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	333d      	adds	r3, #61	; 0x3d
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d112      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	333c      	adds	r3, #60	; 0x3c
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d108      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	333d      	adds	r3, #61	; 0x3d
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f003 fd3d 	bl	80063d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	2310      	movs	r3, #16
 800296c:	6093      	str	r3, [r2, #8]
}
 800296e:	e1e2      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002982:	2b80      	cmp	r3, #128	; 0x80
 8002984:	d164      	bne.n	8002a50 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d111      	bne.n	80029b2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3361      	adds	r3, #97	; 0x61
 800299c:	2206      	movs	r2, #6
 800299e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 fd13 	bl	80063d6 <USB_HC_Halt>
 80029b0:	e044      	b.n	8002a3c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	335c      	adds	r3, #92	; 0x5c
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	202c      	movs	r0, #44	; 0x2c
 80029ca:	fb00 f303 	mul.w	r3, r0, r3
 80029ce:	440b      	add	r3, r1
 80029d0:	335c      	adds	r3, #92	; 0x5c
 80029d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	335c      	adds	r3, #92	; 0x5c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d920      	bls.n	8002a2a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	335c      	adds	r3, #92	; 0x5c
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3360      	adds	r3, #96	; 0x60
 8002a08:	2204      	movs	r2, #4
 8002a0a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	b2d9      	uxtb	r1, r3
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	202c      	movs	r0, #44	; 0x2c
 8002a16:	fb00 f303 	mul.w	r3, r0, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3360      	adds	r3, #96	; 0x60
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f005 ff7a 	bl	800891c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a28:	e008      	b.n	8002a3c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	3360      	adds	r3, #96	; 0x60
 8002a38:	2202      	movs	r2, #2
 8002a3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	6093      	str	r3, [r2, #8]
}
 8002a4e:	e172      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a66:	d11b      	bne.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3361      	adds	r3, #97	; 0x61
 8002a76:	2208      	movs	r2, #8
 8002a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 fca6 	bl	80063d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	461a      	mov	r2, r3
 8002a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9c:	6093      	str	r3, [r2, #8]
}
 8002a9e:	e14a      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	f040 813f 	bne.w	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3361      	adds	r3, #97	; 0x61
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d17d      	bne.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3360      	adds	r3, #96	; 0x60
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	333f      	adds	r3, #63	; 0x3f
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d00a      	beq.n	8002b08 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	333f      	adds	r3, #63	; 0x3f
 8002b00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	f040 8100 	bne.w	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d113      	bne.n	8002b38 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3355      	adds	r3, #85	; 0x55
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	f083 0301 	eor.w	r3, r3, #1
 8002b24:	b2d8      	uxtb	r0, r3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3355      	adds	r3, #85	; 0x55
 8002b34:	4602      	mov	r2, r0
 8002b36:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	f040 80e3 	bne.w	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	334c      	adds	r3, #76	; 0x4c
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80d8 	beq.w	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	334c      	adds	r3, #76	; 0x4c
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	202c      	movs	r0, #44	; 0x2c
 8002b6e:	fb00 f202 	mul.w	r2, r0, r2
 8002b72:	440a      	add	r2, r1
 8002b74:	3240      	adds	r2, #64	; 0x40
 8002b76:	8812      	ldrh	r2, [r2, #0]
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	202c      	movs	r0, #44	; 0x2c
 8002b82:	fb00 f202 	mul.w	r2, r0, r2
 8002b86:	440a      	add	r2, r1
 8002b88:	3240      	adds	r2, #64	; 0x40
 8002b8a:	8812      	ldrh	r2, [r2, #0]
 8002b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80b5 	beq.w	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3355      	adds	r3, #85	; 0x55
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	f083 0301 	eor.w	r3, r3, #1
 8002bb2:	b2d8      	uxtb	r0, r3
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3355      	adds	r3, #85	; 0x55
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e09f      	b.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3361      	adds	r3, #97	; 0x61
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d109      	bne.n	8002bf0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3360      	adds	r3, #96	; 0x60
 8002bea:	2202      	movs	r2, #2
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e08b      	b.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3361      	adds	r3, #97	; 0x61
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d109      	bne.n	8002c18 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3360      	adds	r3, #96	; 0x60
 8002c12:	2202      	movs	r2, #2
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e077      	b.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3361      	adds	r3, #97	; 0x61
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d109      	bne.n	8002c40 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3360      	adds	r3, #96	; 0x60
 8002c3a:	2205      	movs	r2, #5
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e063      	b.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3361      	adds	r3, #97	; 0x61
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d009      	beq.n	8002c68 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3361      	adds	r3, #97	; 0x61
 8002c62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d14f      	bne.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	335c      	adds	r3, #92	; 0x5c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	202c      	movs	r0, #44	; 0x2c
 8002c80:	fb00 f303 	mul.w	r3, r0, r3
 8002c84:	440b      	add	r3, r1
 8002c86:	335c      	adds	r3, #92	; 0x5c
 8002c88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	335c      	adds	r3, #92	; 0x5c
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d912      	bls.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	335c      	adds	r3, #92	; 0x5c
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3360      	adds	r3, #96	; 0x60
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e021      	b.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3360      	adds	r3, #96	; 0x60
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cf4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d02:	461a      	mov	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	461a      	mov	r2, r3
 8002d16:	2302      	movs	r3, #2
 8002d18:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	b2d9      	uxtb	r1, r3
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	202c      	movs	r0, #44	; 0x2c
 8002d24:	fb00 f303 	mul.w	r3, r0, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3360      	adds	r3, #96	; 0x60
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f005 fdf3 	bl	800891c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d36:	bf00      	nop
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b08a      	sub	sp, #40	; 0x28
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	0c5b      	lsrs	r3, r3, #17
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d72:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d004      	beq.n	8002d84 <HCD_RXQLVL_IRQHandler+0x46>
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	f000 80a9 	beq.w	8002ed4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d82:	e0aa      	b.n	8002eda <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80a6 	beq.w	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3344      	adds	r3, #68	; 0x44
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 809b 	beq.w	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3350      	adds	r3, #80	; 0x50
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	441a      	add	r2, r3
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	202c      	movs	r0, #44	; 0x2c
 8002dbc:	fb00 f303 	mul.w	r3, r0, r3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	334c      	adds	r3, #76	; 0x4c
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d87a      	bhi.n	8002ec0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3344      	adds	r3, #68	; 0x44
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	b292      	uxth	r2, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f002 fe4e 	bl	8005a84 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3344      	adds	r3, #68	; 0x44
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	441a      	add	r2, r3
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	202c      	movs	r0, #44	; 0x2c
 8002e02:	fb00 f303 	mul.w	r3, r0, r3
 8002e06:	440b      	add	r3, r1
 8002e08:	3344      	adds	r3, #68	; 0x44
 8002e0a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3350      	adds	r3, #80	; 0x50
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	441a      	add	r2, r3
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	202c      	movs	r0, #44	; 0x2c
 8002e26:	fb00 f303 	mul.w	r3, r0, r3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3350      	adds	r3, #80	; 0x50
 8002e2e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	0cdb      	lsrs	r3, r3, #19
 8002e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e44:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	3340      	adds	r3, #64	; 0x40
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d13c      	bne.n	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d039      	beq.n	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e7a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e82:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3354      	adds	r3, #84	; 0x54
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f083 0301 	eor.w	r3, r3, #1
 8002eaa:	b2d8      	uxtb	r0, r3
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3354      	adds	r3, #84	; 0x54
 8002eba:	4602      	mov	r2, r0
 8002ebc:	701a      	strb	r2, [r3, #0]
      break;
 8002ebe:	e00b      	b.n	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3360      	adds	r3, #96	; 0x60
 8002ece:	2204      	movs	r2, #4
 8002ed0:	701a      	strb	r2, [r3, #0]
      break;
 8002ed2:	e001      	b.n	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ed4:	bf00      	nop
 8002ed6:	e000      	b.n	8002eda <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ed8:	bf00      	nop
  }
}
 8002eda:	bf00      	nop
 8002edc:	3728      	adds	r7, #40	; 0x28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f0e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d10b      	bne.n	8002f32 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d102      	bne.n	8002f2a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f005 fcdd 	bl	80088e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d132      	bne.n	8002fa2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f043 0308 	orr.w	r3, r3, #8
 8002f42:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d126      	bne.n	8002f9c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d113      	bne.n	8002f7e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f60:	d106      	bne.n	8002f70 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2102      	movs	r1, #2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f002 fef9 	bl	8005d60 <USB_InitFSLSPClkSel>
 8002f6e:	e011      	b.n	8002f94 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 fef2 	bl	8005d60 <USB_InitFSLSPClkSel>
 8002f7c:	e00a      	b.n	8002f94 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d106      	bne.n	8002f94 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f92:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f005 fccf 	bl	8008938 <HAL_HCD_PortEnabled_Callback>
 8002f9a:	e002      	b.n	8002fa2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f005 fcd9 	bl	8008954 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d103      	bne.n	8002fb4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f043 0320 	orr.w	r3, r3, #32
 8002fb2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e12b      	b.n	8003232 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fdb8 	bl	8000b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2224      	movs	r2, #36	; 0x24
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800301a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800302a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800302c:	f001 fa20 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 8003030:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4a81      	ldr	r2, [pc, #516]	; (800323c <HAL_I2C_Init+0x274>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d807      	bhi.n	800304c <HAL_I2C_Init+0x84>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a80      	ldr	r2, [pc, #512]	; (8003240 <HAL_I2C_Init+0x278>)
 8003040:	4293      	cmp	r3, r2
 8003042:	bf94      	ite	ls
 8003044:	2301      	movls	r3, #1
 8003046:	2300      	movhi	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e006      	b.n	800305a <HAL_I2C_Init+0x92>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a7d      	ldr	r2, [pc, #500]	; (8003244 <HAL_I2C_Init+0x27c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	bf94      	ite	ls
 8003054:	2301      	movls	r3, #1
 8003056:	2300      	movhi	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e0e7      	b.n	8003232 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4a78      	ldr	r2, [pc, #480]	; (8003248 <HAL_I2C_Init+0x280>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0c9b      	lsrs	r3, r3, #18
 800306c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a6a      	ldr	r2, [pc, #424]	; (800323c <HAL_I2C_Init+0x274>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d802      	bhi.n	800309c <HAL_I2C_Init+0xd4>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	3301      	adds	r3, #1
 800309a:	e009      	b.n	80030b0 <HAL_I2C_Init+0xe8>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	4a69      	ldr	r2, [pc, #420]	; (800324c <HAL_I2C_Init+0x284>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	099b      	lsrs	r3, r3, #6
 80030ae:	3301      	adds	r3, #1
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	495c      	ldr	r1, [pc, #368]	; (800323c <HAL_I2C_Init+0x274>)
 80030cc:	428b      	cmp	r3, r1
 80030ce:	d819      	bhi.n	8003104 <HAL_I2C_Init+0x13c>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e59      	subs	r1, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	fbb1 f3f3 	udiv	r3, r1, r3
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030e4:	400b      	ands	r3, r1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_I2C_Init+0x138>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1e59      	subs	r1, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fe:	e051      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003100:	2304      	movs	r3, #4
 8003102:	e04f      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d111      	bne.n	8003130 <HAL_I2C_Init+0x168>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1e58      	subs	r0, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	440b      	add	r3, r1
 800311a:	fbb0 f3f3 	udiv	r3, r0, r3
 800311e:	3301      	adds	r3, #1
 8003120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e012      	b.n	8003156 <HAL_I2C_Init+0x18e>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e58      	subs	r0, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	0099      	lsls	r1, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Init+0x196>
 800315a:	2301      	movs	r3, #1
 800315c:	e022      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10e      	bne.n	8003184 <HAL_I2C_Init+0x1bc>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1e58      	subs	r0, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	440b      	add	r3, r1
 8003174:	fbb0 f3f3 	udiv	r3, r0, r3
 8003178:	3301      	adds	r3, #1
 800317a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003182:	e00f      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	0099      	lsls	r1, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	fbb0 f3f3 	udiv	r3, r0, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	6809      	ldr	r1, [r1, #0]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6911      	ldr	r1, [r2, #16]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68d2      	ldr	r2, [r2, #12]
 80031de:	4311      	orrs	r1, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	000186a0 	.word	0x000186a0
 8003240:	001e847f 	.word	0x001e847f
 8003244:	003d08ff 	.word	0x003d08ff
 8003248:	431bde83 	.word	0x431bde83
 800324c:	10624dd3 	.word	0x10624dd3

08003250 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e128      	b.n	80034b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a90      	ldr	r2, [pc, #576]	; (80034bc <HAL_I2S_Init+0x26c>)
 800327a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fd fcb9 	bl	8000bf4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003298:	f023 030f 	bic.w	r3, r3, #15
 800329c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2202      	movs	r2, #2
 80032a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d060      	beq.n	8003370 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032b6:	2310      	movs	r3, #16
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e001      	b.n	80032c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032bc:	2320      	movs	r3, #32
 80032be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d802      	bhi.n	80032ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032ce:	2001      	movs	r0, #1
 80032d0:	f001 f9d8 	bl	8004684 <HAL_RCCEx_GetPeriphCLKFreq>
 80032d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032de:	d125      	bne.n	800332c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d010      	beq.n	800330a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	461a      	mov	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	3305      	adds	r3, #5
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	e01f      	b.n	800334a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	fbb2 f2f3 	udiv	r2, r2, r3
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	461a      	mov	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	3305      	adds	r3, #5
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	e00e      	b.n	800334a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	fbb2 f2f3 	udiv	r2, r2, r3
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	461a      	mov	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	3305      	adds	r3, #5
 8003348:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4a5c      	ldr	r2, [pc, #368]	; (80034c0 <HAL_I2S_Init+0x270>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	08db      	lsrs	r3, r3, #3
 8003354:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	e003      	b.n	8003378 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003370:	2302      	movs	r3, #2
 8003372:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d902      	bls.n	8003384 <HAL_I2S_Init+0x134>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	2bff      	cmp	r3, #255	; 0xff
 8003382:	d907      	bls.n	8003394 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	f043 0210 	orr.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e08f      	b.n	80034b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	ea42 0103 	orr.w	r1, r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033b2:	f023 030f 	bic.w	r3, r3, #15
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6851      	ldr	r1, [r2, #4]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	4311      	orrs	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68d2      	ldr	r2, [r2, #12]
 80033c4:	4311      	orrs	r1, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6992      	ldr	r2, [r2, #24]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d161      	bne.n	80034a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a38      	ldr	r2, [pc, #224]	; (80034c4 <HAL_I2S_Init+0x274>)
 80033e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a37      	ldr	r2, [pc, #220]	; (80034c8 <HAL_I2S_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_I2S_Init+0x1a4>
 80033f0:	4b36      	ldr	r3, [pc, #216]	; (80034cc <HAL_I2S_Init+0x27c>)
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x1a8>
 80033f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	4932      	ldr	r1, [pc, #200]	; (80034c8 <HAL_I2S_Init+0x278>)
 8003400:	428a      	cmp	r2, r1
 8003402:	d101      	bne.n	8003408 <HAL_I2S_Init+0x1b8>
 8003404:	4a31      	ldr	r2, [pc, #196]	; (80034cc <HAL_I2S_Init+0x27c>)
 8003406:	e001      	b.n	800340c <HAL_I2S_Init+0x1bc>
 8003408:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800340c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003410:	f023 030f 	bic.w	r3, r3, #15
 8003414:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2b      	ldr	r2, [pc, #172]	; (80034c8 <HAL_I2S_Init+0x278>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d101      	bne.n	8003424 <HAL_I2S_Init+0x1d4>
 8003420:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_I2S_Init+0x27c>)
 8003422:	e001      	b.n	8003428 <HAL_I2S_Init+0x1d8>
 8003424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003428:	2202      	movs	r2, #2
 800342a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <HAL_I2S_Init+0x278>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_I2S_Init+0x1ea>
 8003436:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_I2S_Init+0x27c>)
 8003438:	e001      	b.n	800343e <HAL_I2S_Init+0x1ee>
 800343a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344a:	d003      	beq.n	8003454 <HAL_I2S_Init+0x204>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d103      	bne.n	800345c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e001      	b.n	8003460 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800346a:	4313      	orrs	r3, r2
 800346c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003474:	4313      	orrs	r3, r2
 8003476:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800347e:	4313      	orrs	r3, r2
 8003480:	b29a      	uxth	r2, r3
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	4313      	orrs	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800348c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <HAL_I2S_Init+0x278>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_I2S_Init+0x24c>
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_I2S_Init+0x27c>)
 800349a:	e001      	b.n	80034a0 <HAL_I2S_Init+0x250>
 800349c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a0:	897a      	ldrh	r2, [r7, #10]
 80034a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	080035c7 	.word	0x080035c7
 80034c0:	cccccccd 	.word	0xcccccccd
 80034c4:	080036dd 	.word	0x080036dd
 80034c8:	40003800 	.word	0x40003800
 80034cc:	40003400 	.word	0x40003400

080034d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	881a      	ldrh	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	1c9a      	adds	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10e      	bne.n	8003560 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003550:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ffb8 	bl	80034d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	b292      	uxth	r2, r2
 800357c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	1c9a      	adds	r2, r3, #2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10e      	bne.n	80035be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff93 	bl	80034e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d13a      	bne.n	8003658 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d109      	bne.n	8003600 <I2S_IRQHandler+0x3a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d102      	bne.n	8003600 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ffb4 	bl	8003568 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d126      	bne.n	8003658 <I2S_IRQHandler+0x92>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b20      	cmp	r3, #32
 8003616:	d11f      	bne.n	8003658 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003626:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f043 0202 	orr.w	r2, r3, #2
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ff50 	bl	80034f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b03      	cmp	r3, #3
 8003662:	d136      	bne.n	80036d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d109      	bne.n	8003682 <I2S_IRQHandler+0xbc>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d102      	bne.n	8003682 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff45 	bl	800350c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b08      	cmp	r3, #8
 800368a:	d122      	bne.n	80036d2 <I2S_IRQHandler+0x10c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b20      	cmp	r3, #32
 8003698:	d11b      	bne.n	80036d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff13 	bl	80034f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a92      	ldr	r2, [pc, #584]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036f6:	4b92      	ldr	r3, [pc, #584]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f8:	e001      	b.n	80036fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a8b      	ldr	r2, [pc, #556]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d101      	bne.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003714:	4b8a      	ldr	r3, [pc, #552]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003716:	e001      	b.n	800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003718:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003728:	d004      	beq.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f040 8099 	bne.w	8003866 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d107      	bne.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f925 	bl	8003998 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f9c8 	bl	8003af8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	d13a      	bne.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d035      	beq.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a6e      	ldr	r2, [pc, #440]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003786:	4b6e      	ldr	r3, [pc, #440]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003788:	e001      	b.n	800378e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800378a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4969      	ldr	r1, [pc, #420]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003796:	428b      	cmp	r3, r1
 8003798:	d101      	bne.n	800379e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800379a:	4b69      	ldr	r3, [pc, #420]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800379c:	e001      	b.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800379e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f043 0202 	orr.w	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fe88 	bl	80034f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	f040 80c3 	bne.w	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80bd 	beq.w	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800380e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a49      	ldr	r2, [pc, #292]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800381a:	4b49      	ldr	r3, [pc, #292]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800381c:	e001      	b.n	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800381e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4944      	ldr	r1, [pc, #272]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800382a:	428b      	cmp	r3, r1
 800382c:	d101      	bne.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800382e:	4b44      	ldr	r3, [pc, #272]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003830:	e001      	b.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003836:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800383a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f043 0204 	orr.w	r2, r3, #4
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff fe4a 	bl	80034f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003864:	e089      	b.n	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d107      	bne.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8be 	bl	80039fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8fd 	bl	8003a94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d12f      	bne.n	8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d02a      	beq.n	8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ca:	e001      	b.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4919      	ldr	r1, [pc, #100]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038d8:	428b      	cmp	r3, r1
 80038da:	d101      	bne.n	80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038dc:	4b18      	ldr	r3, [pc, #96]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038de:	e001      	b.n	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f043 0202 	orr.w	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff fdfa 	bl	80034f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b08      	cmp	r3, #8
 800390c:	d136      	bne.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d031      	beq.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a07      	ldr	r2, [pc, #28]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003922:	4b07      	ldr	r3, [pc, #28]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003924:	e001      	b.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4902      	ldr	r1, [pc, #8]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003932:	428b      	cmp	r3, r1
 8003934:	d106      	bne.n	8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003936:	4b02      	ldr	r3, [pc, #8]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003938:	e006      	b.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800393a:	bf00      	nop
 800393c:	40003800 	.word	0x40003800
 8003940:	40003400 	.word	0x40003400
 8003944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003948:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800394c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800395c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f043 0204 	orr.w	r2, r3, #4
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fdc0 	bl	80034f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003978:	e000      	b.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800397a:	bf00      	nop
}
 800397c:	bf00      	nop
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c99      	adds	r1, r3, #2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6251      	str	r1, [r2, #36]	; 0x24
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d113      	bne.n	80039f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ffc9 	bl	8003984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	1c99      	adds	r1, r3, #2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6251      	str	r1, [r2, #36]	; 0x24
 8003a0e:	8819      	ldrh	r1, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <I2SEx_TxISR_I2SExt+0x90>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <I2SEx_TxISR_I2SExt+0x22>
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <I2SEx_TxISR_I2SExt+0x94>)
 8003a1c:	e001      	b.n	8003a22 <I2SEx_TxISR_I2SExt+0x26>
 8003a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a22:	460a      	mov	r2, r1
 8003a24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d121      	bne.n	8003a82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <I2SEx_TxISR_I2SExt+0x90>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d101      	bne.n	8003a4c <I2SEx_TxISR_I2SExt+0x50>
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <I2SEx_TxISR_I2SExt+0x94>)
 8003a4a:	e001      	b.n	8003a50 <I2SEx_TxISR_I2SExt+0x54>
 8003a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	490d      	ldr	r1, [pc, #52]	; (8003a8c <I2SEx_TxISR_I2SExt+0x90>)
 8003a58:	428b      	cmp	r3, r1
 8003a5a:	d101      	bne.n	8003a60 <I2SEx_TxISR_I2SExt+0x64>
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <I2SEx_TxISR_I2SExt+0x94>)
 8003a5e:	e001      	b.n	8003a64 <I2SEx_TxISR_I2SExt+0x68>
 8003a60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff81 	bl	8003984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40003800 	.word	0x40003800
 8003a90:	40003400 	.word	0x40003400

08003a94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68d8      	ldr	r0, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	1c99      	adds	r1, r3, #2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003aac:	b282      	uxth	r2, r0
 8003aae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d113      	bne.n	8003af0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ad6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff ff4a 	bl	8003984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a20      	ldr	r2, [pc, #128]	; (8003b88 <I2SEx_RxISR_I2SExt+0x90>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <I2SEx_RxISR_I2SExt+0x16>
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <I2SEx_RxISR_I2SExt+0x94>)
 8003b0c:	e001      	b.n	8003b12 <I2SEx_RxISR_I2SExt+0x1a>
 8003b0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b12:	68d8      	ldr	r0, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	1c99      	adds	r1, r3, #2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b1e:	b282      	uxth	r2, r0
 8003b20:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d121      	bne.n	8003b7e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <I2SEx_RxISR_I2SExt+0x90>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <I2SEx_RxISR_I2SExt+0x50>
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <I2SEx_RxISR_I2SExt+0x94>)
 8003b46:	e001      	b.n	8003b4c <I2SEx_RxISR_I2SExt+0x54>
 8003b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	490d      	ldr	r1, [pc, #52]	; (8003b88 <I2SEx_RxISR_I2SExt+0x90>)
 8003b54:	428b      	cmp	r3, r1
 8003b56:	d101      	bne.n	8003b5c <I2SEx_RxISR_I2SExt+0x64>
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <I2SEx_RxISR_I2SExt+0x94>)
 8003b5a:	e001      	b.n	8003b60 <I2SEx_RxISR_I2SExt+0x68>
 8003b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b64:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff03 	bl	8003984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40003800 	.word	0x40003800
 8003b8c:	40003400 	.word	0x40003400

08003b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e267      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d075      	beq.n	8003c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bae:	4b88      	ldr	r3, [pc, #544]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bba:	4b85      	ldr	r3, [pc, #532]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d112      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc6:	4b82      	ldr	r3, [pc, #520]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd2:	d10b      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d05b      	beq.n	8003c98 <HAL_RCC_OscConfig+0x108>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d157      	bne.n	8003c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e242      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d106      	bne.n	8003c04 <HAL_RCC_OscConfig+0x74>
 8003bf6:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e01d      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x98>
 8003c0e:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6f      	ldr	r2, [pc, #444]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6c      	ldr	r2, [pc, #432]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c28:	4b69      	ldr	r3, [pc, #420]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a68      	ldr	r2, [pc, #416]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a65      	ldr	r2, [pc, #404]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fd fabc 	bl	80011c4 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c50:	f7fd fab8 	bl	80011c4 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	; 0x64
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e207      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0xc0>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fd faa8 	bl	80011c4 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fd faa4 	bl	80011c4 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e1f3      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8a:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0xe8>
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d063      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca6:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d11c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b44      	ldr	r3, [pc, #272]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d116      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e1c7      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce2:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4937      	ldr	r1, [pc, #220]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	e03a      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d00:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <HAL_RCC_OscConfig+0x244>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fd fa5d 	bl	80011c4 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fd fa59 	bl	80011c4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e1a8      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4925      	ldr	r1, [pc, #148]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]
 8003d40:	e015      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_RCC_OscConfig+0x244>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fd fa3c 	bl	80011c4 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d50:	f7fd fa38 	bl	80011c4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e187      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d036      	beq.n	8003de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d016      	beq.n	8003db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_RCC_OscConfig+0x248>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fd fa1c 	bl	80011c4 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d90:	f7fd fa18 	bl	80011c4 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e167      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x200>
 8003dae:	e01b      	b.n	8003de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_RCC_OscConfig+0x248>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db6:	f7fd fa05 	bl	80011c4 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	e00e      	b.n	8003ddc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fd fa01 	bl	80011c4 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d907      	bls.n	8003ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e150      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	42470000 	.word	0x42470000
 8003dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ea      	bne.n	8003dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8097 	beq.w	8003f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b81      	ldr	r3, [pc, #516]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10f      	bne.n	8003e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	4b7d      	ldr	r3, [pc, #500]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a7c      	ldr	r2, [pc, #496]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
 8003e16:	4b7a      	ldr	r3, [pc, #488]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e26:	4b77      	ldr	r3, [pc, #476]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d118      	bne.n	8003e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e32:	4b74      	ldr	r3, [pc, #464]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a73      	ldr	r2, [pc, #460]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3e:	f7fd f9c1 	bl	80011c4 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7fd f9bd 	bl	80011c4 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e10c      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x2ea>
 8003e6c:	4b64      	ldr	r3, [pc, #400]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a63      	ldr	r2, [pc, #396]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
 8003e78:	e01c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x324>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x30c>
 8003e82:	4b5f      	ldr	r3, [pc, #380]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a5e      	ldr	r2, [pc, #376]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	4b5c      	ldr	r3, [pc, #368]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a5b      	ldr	r2, [pc, #364]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x324>
 8003e9c:	4b58      	ldr	r3, [pc, #352]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a57      	ldr	r2, [pc, #348]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea8:	4b55      	ldr	r3, [pc, #340]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a54      	ldr	r2, [pc, #336]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003eae:	f023 0304 	bic.w	r3, r3, #4
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d015      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fd f982 	bl	80011c4 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7fd f97e 	bl	80011c4 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0cb      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eda:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ee      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x334>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee8:	f7fd f96c 	bl	80011c4 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fd f968 	bl	80011c4 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e0b5      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f06:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1ee      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d105      	bne.n	8003f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f18:	4b39      	ldr	r3, [pc, #228]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	4a38      	ldr	r2, [pc, #224]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80a1 	beq.w	8004070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d05c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d141      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f42:	4b31      	ldr	r3, [pc, #196]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fd f93c 	bl	80011c4 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd f938 	bl	80011c4 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e087      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	4b27      	ldr	r3, [pc, #156]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	019b      	lsls	r3, r3, #6
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	3b01      	subs	r3, #1
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	491b      	ldr	r1, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f98:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fd f911 	bl	80011c4 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fd f90d 	bl	80011c4 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e05c      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb8:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x416>
 8003fc4:	e054      	b.n	8004070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fd f8fa 	bl	80011c4 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fd f8f6 	bl	80011c4 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e045      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x444>
 8003ff2:	e03d      	b.n	8004070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e038      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
 8004000:	40023800 	.word	0x40023800
 8004004:	40007000 	.word	0x40007000
 8004008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x4ec>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d028      	beq.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d121      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d11a      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004044:	4293      	cmp	r3, r2
 8004046:	d111      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	3b01      	subs	r3, #1
 8004056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0cc      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b68      	ldr	r3, [pc, #416]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d90c      	bls.n	80040bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b65      	ldr	r3, [pc, #404]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b63      	ldr	r3, [pc, #396]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0b8      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d4:	4b59      	ldr	r3, [pc, #356]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a58      	ldr	r2, [pc, #352]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ec:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f8:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	494d      	ldr	r1, [pc, #308]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d044      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d119      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d003      	beq.n	800413e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	2b03      	cmp	r3, #3
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413e:	4b3f      	ldr	r3, [pc, #252]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e06f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e067      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415e:	4b37      	ldr	r3, [pc, #220]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 0203 	bic.w	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4934      	ldr	r1, [pc, #208]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004170:	f7fd f828 	bl	80011c4 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	e00a      	b.n	800418e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004178:	f7fd f824 	bl	80011c4 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e04f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 020c 	and.w	r2, r3, #12
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	429a      	cmp	r2, r3
 800419e:	d1eb      	bne.n	8004178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d20c      	bcs.n	80041c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e032      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4916      	ldr	r1, [pc, #88]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	490e      	ldr	r1, [pc, #56]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004206:	f000 f821 	bl	800424c <HAL_RCC_GetSysClockFreq>
 800420a:	4602      	mov	r2, r0
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	490a      	ldr	r1, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	5ccb      	ldrb	r3, [r1, r3]
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004222:	4b09      	ldr	r3, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fc ff88 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023c00 	.word	0x40023c00
 800423c:	40023800 	.word	0x40023800
 8004240:	08009d40 	.word	0x08009d40
 8004244:	20000000 	.word	0x20000000
 8004248:	20000004 	.word	0x20000004

0800424c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800424c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004250:	b094      	sub	sp, #80	; 0x50
 8004252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
 8004258:	2300      	movs	r3, #0
 800425a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425c:	2300      	movs	r3, #0
 800425e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004264:	4b79      	ldr	r3, [pc, #484]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d00d      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x40>
 8004270:	2b08      	cmp	r3, #8
 8004272:	f200 80e1 	bhi.w	8004438 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x34>
 800427a:	2b04      	cmp	r3, #4
 800427c:	d003      	beq.n	8004286 <HAL_RCC_GetSysClockFreq+0x3a>
 800427e:	e0db      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004280:	4b73      	ldr	r3, [pc, #460]	; (8004450 <HAL_RCC_GetSysClockFreq+0x204>)
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004284:	e0db      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004286:	4b73      	ldr	r3, [pc, #460]	; (8004454 <HAL_RCC_GetSysClockFreq+0x208>)
 8004288:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800428a:	e0d8      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800428c:	4b6f      	ldr	r3, [pc, #444]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004294:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004296:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d063      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a2:	4b6a      	ldr	r3, [pc, #424]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	2200      	movs	r2, #0
 80042aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b4:	633b      	str	r3, [r7, #48]	; 0x30
 80042b6:	2300      	movs	r3, #0
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
 80042ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042be:	4622      	mov	r2, r4
 80042c0:	462b      	mov	r3, r5
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	0159      	lsls	r1, r3, #5
 80042cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d0:	0150      	lsls	r0, r2, #5
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4621      	mov	r1, r4
 80042d8:	1a51      	subs	r1, r2, r1
 80042da:	6139      	str	r1, [r7, #16]
 80042dc:	4629      	mov	r1, r5
 80042de:	eb63 0301 	sbc.w	r3, r3, r1
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f0:	4659      	mov	r1, fp
 80042f2:	018b      	lsls	r3, r1, #6
 80042f4:	4651      	mov	r1, sl
 80042f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042fa:	4651      	mov	r1, sl
 80042fc:	018a      	lsls	r2, r1, #6
 80042fe:	4651      	mov	r1, sl
 8004300:	ebb2 0801 	subs.w	r8, r2, r1
 8004304:	4659      	mov	r1, fp
 8004306:	eb63 0901 	sbc.w	r9, r3, r1
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800431a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800431e:	4690      	mov	r8, r2
 8004320:	4699      	mov	r9, r3
 8004322:	4623      	mov	r3, r4
 8004324:	eb18 0303 	adds.w	r3, r8, r3
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	462b      	mov	r3, r5
 800432c:	eb49 0303 	adc.w	r3, r9, r3
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800433e:	4629      	mov	r1, r5
 8004340:	024b      	lsls	r3, r1, #9
 8004342:	4621      	mov	r1, r4
 8004344:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004348:	4621      	mov	r1, r4
 800434a:	024a      	lsls	r2, r1, #9
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004352:	2200      	movs	r2, #0
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
 8004356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800435c:	f7fb ff88 	bl	8000270 <__aeabi_uldivmod>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4613      	mov	r3, r2
 8004366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004368:	e058      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436a:	4b38      	ldr	r3, [pc, #224]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	099b      	lsrs	r3, r3, #6
 8004370:	2200      	movs	r2, #0
 8004372:	4618      	mov	r0, r3
 8004374:	4611      	mov	r1, r2
 8004376:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800437a:	623b      	str	r3, [r7, #32]
 800437c:	2300      	movs	r3, #0
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
 8004380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	f04f 0000 	mov.w	r0, #0
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	0159      	lsls	r1, r3, #5
 8004392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004396:	0150      	lsls	r0, r2, #5
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4641      	mov	r1, r8
 800439e:	ebb2 0a01 	subs.w	sl, r2, r1
 80043a2:	4649      	mov	r1, r9
 80043a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043bc:	ebb2 040a 	subs.w	r4, r2, sl
 80043c0:	eb63 050b 	sbc.w	r5, r3, fp
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	00eb      	lsls	r3, r5, #3
 80043ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043d2:	00e2      	lsls	r2, r4, #3
 80043d4:	4614      	mov	r4, r2
 80043d6:	461d      	mov	r5, r3
 80043d8:	4643      	mov	r3, r8
 80043da:	18e3      	adds	r3, r4, r3
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	464b      	mov	r3, r9
 80043e0:	eb45 0303 	adc.w	r3, r5, r3
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043f2:	4629      	mov	r1, r5
 80043f4:	028b      	lsls	r3, r1, #10
 80043f6:	4621      	mov	r1, r4
 80043f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043fc:	4621      	mov	r1, r4
 80043fe:	028a      	lsls	r2, r1, #10
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004406:	2200      	movs	r2, #0
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	61fa      	str	r2, [r7, #28]
 800440c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004410:	f7fb ff2e 	bl	8000270 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4613      	mov	r3, r2
 800441a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	3301      	adds	r3, #1
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800442c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800442e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004436:	e002      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetSysClockFreq+0x204>)
 800443a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800443c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800443e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004440:	4618      	mov	r0, r3
 8004442:	3750      	adds	r7, #80	; 0x50
 8004444:	46bd      	mov	sp, r7
 8004446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	00f42400 	.word	0x00f42400
 8004454:	007a1200 	.word	0x007a1200

08004458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <HAL_RCC_GetHCLKFreq+0x14>)
 800445e:	681b      	ldr	r3, [r3, #0]
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000000 	.word	0x20000000

08004470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004474:	f7ff fff0 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 8004478:	4602      	mov	r2, r0
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	0a9b      	lsrs	r3, r3, #10
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4903      	ldr	r1, [pc, #12]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004486:	5ccb      	ldrb	r3, [r1, r3]
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40023800 	.word	0x40023800
 8004494:	08009d50 	.word	0x08009d50

08004498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800449c:	f7ff ffdc 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0b5b      	lsrs	r3, r3, #13
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4903      	ldr	r1, [pc, #12]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40023800 	.word	0x40023800
 80044bc:	08009d50 	.word	0x08009d50

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d035      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044e8:	4b62      	ldr	r3, [pc, #392]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044ee:	f7fc fe69 	bl	80011c4 <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044f6:	f7fc fe65 	bl	80011c4 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e0b0      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004508:	4b5b      	ldr	r3, [pc, #364]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f0      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	019a      	lsls	r2, r3, #6
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	071b      	lsls	r3, r3, #28
 8004520:	4955      	ldr	r1, [pc, #340]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004528:	4b52      	ldr	r3, [pc, #328]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800452e:	f7fc fe49 	bl	80011c4 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004536:	f7fc fe45 	bl	80011c4 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e090      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004548:	4b4b      	ldr	r3, [pc, #300]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8083 	beq.w	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	4b44      	ldr	r3, [pc, #272]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a43      	ldr	r2, [pc, #268]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
 8004572:	4b41      	ldr	r3, [pc, #260]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800457e:	4b3f      	ldr	r3, [pc, #252]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a3e      	ldr	r2, [pc, #248]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004588:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800458a:	f7fc fe1b 	bl	80011c4 <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004592:	f7fc fe17 	bl	80011c4 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e062      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045a4:	4b35      	ldr	r3, [pc, #212]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045b0:	4b31      	ldr	r3, [pc, #196]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02f      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d028      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ce:	4b2a      	ldr	r3, [pc, #168]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045d8:	4b29      	ldr	r3, [pc, #164]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045de:	4b28      	ldr	r3, [pc, #160]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045e4:	4a24      	ldr	r2, [pc, #144]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d114      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fc fde5 	bl	80011c4 <HAL_GetTick>
 80045fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fc fde1 	bl	80011c4 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e02a      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0ee      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462c:	d10d      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800463e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004642:	490d      	ldr	r1, [pc, #52]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004644:	4313      	orrs	r3, r2
 8004646:	608b      	str	r3, [r1, #8]
 8004648:	e005      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004650:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004654:	6093      	str	r3, [r2, #8]
 8004656:	4b08      	ldr	r3, [pc, #32]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004658:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004662:	4905      	ldr	r1, [pc, #20]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004664:	4313      	orrs	r3, r2
 8004666:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	42470068 	.word	0x42470068
 8004678:	40023800 	.word	0x40023800
 800467c:	40007000 	.word	0x40007000
 8004680:	42470e40 	.word	0x42470e40

08004684 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d13e      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046a2:	4b23      	ldr	r3, [pc, #140]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d12f      	bne.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046b8:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046ba:	617b      	str	r3, [r7, #20]
          break;
 80046bc:	e02f      	b.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046be:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ca:	d108      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d4:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	e007      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e6:	4a15      	ldr	r2, [pc, #84]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	fb02 f303 	mul.w	r3, r2, r3
 8004700:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004708:	0f1b      	lsrs	r3, r3, #28
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
          break;
 8004716:	e002      	b.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
          break;
 800471c:	bf00      	nop
        }
      }
      break;
 800471e:	bf00      	nop
    }
  }
  return frequency;
 8004720:	697b      	ldr	r3, [r7, #20]
}
 8004722:	4618      	mov	r0, r3
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800
 8004734:	00bb8000 	.word	0x00bb8000
 8004738:	007a1200 	.word	0x007a1200
 800473c:	00f42400 	.word	0x00f42400

08004740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e07b      	b.n	800484a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	2b00      	cmp	r3, #0
 8004758:	d108      	bne.n	800476c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004762:	d009      	beq.n	8004778 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	61da      	str	r2, [r3, #28]
 800476a:	e005      	b.n	8004778 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc faae 	bl	8000cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fc:	ea42 0103 	orr.w	r1, r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	f003 0104 	and.w	r1, r3, #4
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	f003 0210 	and.w	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004838:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e097      	b.n	8004996 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fc fa82 	bl	8000d84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004896:	f023 0307 	bic.w	r3, r3, #7
 800489a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 fa62 	bl	8004d70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	f023 0303 	bic.w	r3, r3, #3
 80048d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	4313      	orrs	r3, r2
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048f2:	f023 030c 	bic.w	r3, r3, #12
 80048f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	4313      	orrs	r3, r2
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	011a      	lsls	r2, r3, #4
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	031b      	lsls	r3, r3, #12
 8004922:	4313      	orrs	r3, r2
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004930:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004938:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	4313      	orrs	r3, r2
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049be:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049c6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d110      	bne.n	80049f0 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d102      	bne.n	80049da <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049d4:	7b7b      	ldrb	r3, [r7, #13]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d001      	beq.n	80049de <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e089      	b.n	8004af2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2202      	movs	r2, #2
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ee:	e031      	b.n	8004a54 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d110      	bne.n	8004a18 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049f6:	7bbb      	ldrb	r3, [r7, #14]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d102      	bne.n	8004a02 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049fc:	7b3b      	ldrb	r3, [r7, #12]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e075      	b.n	8004af2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a16:	e01d      	b.n	8004a54 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d108      	bne.n	8004a30 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a1e:	7bbb      	ldrb	r3, [r7, #14]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a24:	7b7b      	ldrb	r3, [r7, #13]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d102      	bne.n	8004a30 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a2a:	7b3b      	ldrb	r3, [r7, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d001      	beq.n	8004a34 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e05e      	b.n	8004af2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d010      	beq.n	8004a82 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004a60:	e01f      	b.n	8004aa2 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2201      	movs	r2, #1
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fa20 	bl	8004eb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0202 	orr.w	r2, r2, #2
 8004a7e:	60da      	str	r2, [r3, #12]
      break;
 8004a80:	e02e      	b.n	8004ae0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2201      	movs	r2, #1
 8004a88:	2104      	movs	r1, #4
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fa10 	bl	8004eb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0204 	orr.w	r2, r2, #4
 8004a9e:	60da      	str	r2, [r3, #12]
      break;
 8004aa0:	e01e      	b.n	8004ae0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fa00 	bl	8004eb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	2104      	movs	r1, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f9f9 	bl	8004eb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0202 	orr.w	r2, r2, #2
 8004acc:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0204 	orr.w	r2, r2, #4
 8004adc:	60da      	str	r2, [r3, #12]
      break;
 8004ade:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d122      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d11b      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f06f 0202 	mvn.w	r2, #2
 8004b26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8f8 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 8004b42:	e005      	b.n	8004b50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f8ea 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8fb 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d122      	bne.n	8004baa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d11b      	bne.n	8004baa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f06f 0204 	mvn.w	r2, #4
 8004b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f8ce 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 8004b96:	e005      	b.n	8004ba4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f8c0 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f8d1 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d122      	bne.n	8004bfe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d11b      	bne.n	8004bfe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f06f 0208 	mvn.w	r2, #8
 8004bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f8a4 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 8004bea:	e005      	b.n	8004bf8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f896 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8a7 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d122      	bne.n	8004c52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d11b      	bne.n	8004c52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f06f 0210 	mvn.w	r2, #16
 8004c22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2208      	movs	r2, #8
 8004c28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f87a 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 8004c3e:	e005      	b.n	8004c4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f86c 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f87d 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d10e      	bne.n	8004c7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d107      	bne.n	8004c7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f06f 0201 	mvn.w	r2, #1
 8004c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f846 	bl	8004d0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	2b80      	cmp	r3, #128	; 0x80
 8004c8a:	d10e      	bne.n	8004caa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c96:	2b80      	cmp	r3, #128	; 0x80
 8004c98:	d107      	bne.n	8004caa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f9af 	bl	8005008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d10e      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc2:	2b40      	cmp	r3, #64	; 0x40
 8004cc4:	d107      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f842 	bl	8004d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d10e      	bne.n	8004d02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d107      	bne.n	8004d02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f06f 0220 	mvn.w	r2, #32
 8004cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f979 	bl	8004ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a40      	ldr	r2, [pc, #256]	; (8004e84 <TIM_Base_SetConfig+0x114>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8e:	d00f      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a3d      	ldr	r2, [pc, #244]	; (8004e88 <TIM_Base_SetConfig+0x118>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00b      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a3c      	ldr	r2, [pc, #240]	; (8004e8c <TIM_Base_SetConfig+0x11c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d007      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a3b      	ldr	r2, [pc, #236]	; (8004e90 <TIM_Base_SetConfig+0x120>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a3a      	ldr	r2, [pc, #232]	; (8004e94 <TIM_Base_SetConfig+0x124>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d108      	bne.n	8004dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2f      	ldr	r2, [pc, #188]	; (8004e84 <TIM_Base_SetConfig+0x114>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d02b      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd0:	d027      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2c      	ldr	r2, [pc, #176]	; (8004e88 <TIM_Base_SetConfig+0x118>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d023      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a2b      	ldr	r2, [pc, #172]	; (8004e8c <TIM_Base_SetConfig+0x11c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d01f      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a2a      	ldr	r2, [pc, #168]	; (8004e90 <TIM_Base_SetConfig+0x120>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01b      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a29      	ldr	r2, [pc, #164]	; (8004e94 <TIM_Base_SetConfig+0x124>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d017      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a28      	ldr	r2, [pc, #160]	; (8004e98 <TIM_Base_SetConfig+0x128>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a27      	ldr	r2, [pc, #156]	; (8004e9c <TIM_Base_SetConfig+0x12c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00f      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a26      	ldr	r2, [pc, #152]	; (8004ea0 <TIM_Base_SetConfig+0x130>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00b      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a25      	ldr	r2, [pc, #148]	; (8004ea4 <TIM_Base_SetConfig+0x134>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <TIM_Base_SetConfig+0x138>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a23      	ldr	r2, [pc, #140]	; (8004eac <TIM_Base_SetConfig+0x13c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d108      	bne.n	8004e34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <TIM_Base_SetConfig+0x114>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0xf8>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a0c      	ldr	r2, [pc, #48]	; (8004e94 <TIM_Base_SetConfig+0x124>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	615a      	str	r2, [r3, #20]
}
 8004e76:	bf00      	nop
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800
 8004e90:	40000c00 	.word	0x40000c00
 8004e94:	40010400 	.word	0x40010400
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40014400 	.word	0x40014400
 8004ea0:	40014800 	.word	0x40014800
 8004ea4:	40001800 	.word	0x40001800
 8004ea8:	40001c00 	.word	0x40001c00
 8004eac:	40002000 	.word	0x40002000

08004eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a1a      	ldr	r2, [r3, #32]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1a      	ldr	r2, [r3, #32]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e05a      	b.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a21      	ldr	r2, [pc, #132]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d022      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f60:	d01d      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d018      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1a      	ldr	r2, [pc, #104]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d009      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a17      	ldr	r2, [pc, #92]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00
 8004fe8:	40010400 	.word	0x40010400
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40001800 	.word	0x40001800

08004ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e03f      	b.n	80050ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fb ff0e 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2224      	movs	r2, #36	; 0x24
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800505e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f929 	bl	80052b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b08a      	sub	sp, #40	; 0x28
 80050ba:	af02      	add	r7, sp, #8
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	4613      	mov	r3, r2
 80050c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d17c      	bne.n	80051d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_UART_Transmit+0x2c>
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e075      	b.n	80051d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_UART_Transmit+0x3e>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e06e      	b.n	80051d2 <HAL_UART_Transmit+0x11c>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2221      	movs	r2, #33	; 0x21
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800510a:	f7fc f85b 	bl	80011c4 <HAL_GetTick>
 800510e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005124:	d108      	bne.n	8005138 <HAL_UART_Transmit+0x82>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	e003      	b.n	8005140 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005148:	e02a      	b.n	80051a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2200      	movs	r2, #0
 8005152:	2180      	movs	r1, #128	; 0x80
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f840 	bl	80051da <UART_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e036      	b.n	80051d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10b      	bne.n	8005182 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005178:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	3302      	adds	r3, #2
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e007      	b.n	8005192 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	781a      	ldrb	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	3301      	adds	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1cf      	bne.n	800514a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2200      	movs	r2, #0
 80051b2:	2140      	movs	r1, #64	; 0x40
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f810 	bl	80051da <UART_WaitOnFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e006      	b.n	80051d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051d0:	2302      	movs	r3, #2
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b090      	sub	sp, #64	; 0x40
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	4613      	mov	r3, r2
 80051e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ea:	e050      	b.n	800528e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f2:	d04c      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0x30>
 80051fa:	f7fb ffe3 	bl	80011c4 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005206:	429a      	cmp	r2, r3
 8005208:	d241      	bcs.n	800528e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800522a:	637a      	str	r2, [r7, #52]	; 0x34
 800522c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e5      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	613b      	str	r3, [r7, #16]
   return(result);
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	63bb      	str	r3, [r7, #56]	; 0x38
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3314      	adds	r3, #20
 800525c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800525e:	623a      	str	r2, [r7, #32]
 8005260:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	69f9      	ldr	r1, [r7, #28]
 8005264:	6a3a      	ldr	r2, [r7, #32]
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	61bb      	str	r3, [r7, #24]
   return(result);
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e5      	bne.n	800523e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e00f      	b.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4013      	ands	r3, r2
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	429a      	cmp	r2, r3
 800529c:	bf0c      	ite	eq
 800529e:	2301      	moveq	r3, #1
 80052a0:	2300      	movne	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d09f      	beq.n	80051ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3740      	adds	r7, #64	; 0x40
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052bc:	b0c0      	sub	sp, #256	; 0x100
 80052be:	af00      	add	r7, sp, #0
 80052c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	68d9      	ldr	r1, [r3, #12]
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	ea40 0301 	orr.w	r3, r0, r1
 80052e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005310:	f021 010c 	bic.w	r1, r1, #12
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800531e:	430b      	orrs	r3, r1
 8005320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005332:	6999      	ldr	r1, [r3, #24]
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	ea40 0301 	orr.w	r3, r0, r1
 800533e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b8f      	ldr	r3, [pc, #572]	; (8005584 <UART_SetConfig+0x2cc>)
 8005348:	429a      	cmp	r2, r3
 800534a:	d005      	beq.n	8005358 <UART_SetConfig+0xa0>
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b8d      	ldr	r3, [pc, #564]	; (8005588 <UART_SetConfig+0x2d0>)
 8005354:	429a      	cmp	r2, r3
 8005356:	d104      	bne.n	8005362 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005358:	f7ff f89e 	bl	8004498 <HAL_RCC_GetPCLK2Freq>
 800535c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005360:	e003      	b.n	800536a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005362:	f7ff f885 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 8005366:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005374:	f040 810c 	bne.w	8005590 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537c:	2200      	movs	r2, #0
 800537e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005382:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800538a:	4622      	mov	r2, r4
 800538c:	462b      	mov	r3, r5
 800538e:	1891      	adds	r1, r2, r2
 8005390:	65b9      	str	r1, [r7, #88]	; 0x58
 8005392:	415b      	adcs	r3, r3
 8005394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005396:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800539a:	4621      	mov	r1, r4
 800539c:	eb12 0801 	adds.w	r8, r2, r1
 80053a0:	4629      	mov	r1, r5
 80053a2:	eb43 0901 	adc.w	r9, r3, r1
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ba:	4690      	mov	r8, r2
 80053bc:	4699      	mov	r9, r3
 80053be:	4623      	mov	r3, r4
 80053c0:	eb18 0303 	adds.w	r3, r8, r3
 80053c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053c8:	462b      	mov	r3, r5
 80053ca:	eb49 0303 	adc.w	r3, r9, r3
 80053ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053e6:	460b      	mov	r3, r1
 80053e8:	18db      	adds	r3, r3, r3
 80053ea:	653b      	str	r3, [r7, #80]	; 0x50
 80053ec:	4613      	mov	r3, r2
 80053ee:	eb42 0303 	adc.w	r3, r2, r3
 80053f2:	657b      	str	r3, [r7, #84]	; 0x54
 80053f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053fc:	f7fa ff38 	bl	8000270 <__aeabi_uldivmod>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4b61      	ldr	r3, [pc, #388]	; (800558c <UART_SetConfig+0x2d4>)
 8005406:	fba3 2302 	umull	r2, r3, r3, r2
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	011c      	lsls	r4, r3, #4
 800540e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005412:	2200      	movs	r2, #0
 8005414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005418:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800541c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005420:	4642      	mov	r2, r8
 8005422:	464b      	mov	r3, r9
 8005424:	1891      	adds	r1, r2, r2
 8005426:	64b9      	str	r1, [r7, #72]	; 0x48
 8005428:	415b      	adcs	r3, r3
 800542a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800542c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005430:	4641      	mov	r1, r8
 8005432:	eb12 0a01 	adds.w	sl, r2, r1
 8005436:	4649      	mov	r1, r9
 8005438:	eb43 0b01 	adc.w	fp, r3, r1
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005448:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800544c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005450:	4692      	mov	sl, r2
 8005452:	469b      	mov	fp, r3
 8005454:	4643      	mov	r3, r8
 8005456:	eb1a 0303 	adds.w	r3, sl, r3
 800545a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800545e:	464b      	mov	r3, r9
 8005460:	eb4b 0303 	adc.w	r3, fp, r3
 8005464:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005474:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005478:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800547c:	460b      	mov	r3, r1
 800547e:	18db      	adds	r3, r3, r3
 8005480:	643b      	str	r3, [r7, #64]	; 0x40
 8005482:	4613      	mov	r3, r2
 8005484:	eb42 0303 	adc.w	r3, r2, r3
 8005488:	647b      	str	r3, [r7, #68]	; 0x44
 800548a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800548e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005492:	f7fa feed 	bl	8000270 <__aeabi_uldivmod>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4611      	mov	r1, r2
 800549c:	4b3b      	ldr	r3, [pc, #236]	; (800558c <UART_SetConfig+0x2d4>)
 800549e:	fba3 2301 	umull	r2, r3, r3, r1
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2264      	movs	r2, #100	; 0x64
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	1acb      	subs	r3, r1, r3
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054b2:	4b36      	ldr	r3, [pc, #216]	; (800558c <UART_SetConfig+0x2d4>)
 80054b4:	fba3 2302 	umull	r2, r3, r3, r2
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054c0:	441c      	add	r4, r3
 80054c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054d4:	4642      	mov	r2, r8
 80054d6:	464b      	mov	r3, r9
 80054d8:	1891      	adds	r1, r2, r2
 80054da:	63b9      	str	r1, [r7, #56]	; 0x38
 80054dc:	415b      	adcs	r3, r3
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054e4:	4641      	mov	r1, r8
 80054e6:	1851      	adds	r1, r2, r1
 80054e8:	6339      	str	r1, [r7, #48]	; 0x30
 80054ea:	4649      	mov	r1, r9
 80054ec:	414b      	adcs	r3, r1
 80054ee:	637b      	str	r3, [r7, #52]	; 0x34
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054fc:	4659      	mov	r1, fp
 80054fe:	00cb      	lsls	r3, r1, #3
 8005500:	4651      	mov	r1, sl
 8005502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005506:	4651      	mov	r1, sl
 8005508:	00ca      	lsls	r2, r1, #3
 800550a:	4610      	mov	r0, r2
 800550c:	4619      	mov	r1, r3
 800550e:	4603      	mov	r3, r0
 8005510:	4642      	mov	r2, r8
 8005512:	189b      	adds	r3, r3, r2
 8005514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005518:	464b      	mov	r3, r9
 800551a:	460a      	mov	r2, r1
 800551c:	eb42 0303 	adc.w	r3, r2, r3
 8005520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005530:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005534:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005538:	460b      	mov	r3, r1
 800553a:	18db      	adds	r3, r3, r3
 800553c:	62bb      	str	r3, [r7, #40]	; 0x28
 800553e:	4613      	mov	r3, r2
 8005540:	eb42 0303 	adc.w	r3, r2, r3
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800554a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800554e:	f7fa fe8f 	bl	8000270 <__aeabi_uldivmod>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4b0d      	ldr	r3, [pc, #52]	; (800558c <UART_SetConfig+0x2d4>)
 8005558:	fba3 1302 	umull	r1, r3, r3, r2
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	2164      	movs	r1, #100	; 0x64
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	3332      	adds	r3, #50	; 0x32
 800556a:	4a08      	ldr	r2, [pc, #32]	; (800558c <UART_SetConfig+0x2d4>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	f003 0207 	and.w	r2, r3, #7
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4422      	add	r2, r4
 800557e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005580:	e105      	b.n	800578e <UART_SetConfig+0x4d6>
 8005582:	bf00      	nop
 8005584:	40011000 	.word	0x40011000
 8005588:	40011400 	.word	0x40011400
 800558c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005594:	2200      	movs	r2, #0
 8005596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800559a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800559e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055a2:	4642      	mov	r2, r8
 80055a4:	464b      	mov	r3, r9
 80055a6:	1891      	adds	r1, r2, r2
 80055a8:	6239      	str	r1, [r7, #32]
 80055aa:	415b      	adcs	r3, r3
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
 80055ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055b2:	4641      	mov	r1, r8
 80055b4:	1854      	adds	r4, r2, r1
 80055b6:	4649      	mov	r1, r9
 80055b8:	eb43 0501 	adc.w	r5, r3, r1
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	00eb      	lsls	r3, r5, #3
 80055c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ca:	00e2      	lsls	r2, r4, #3
 80055cc:	4614      	mov	r4, r2
 80055ce:	461d      	mov	r5, r3
 80055d0:	4643      	mov	r3, r8
 80055d2:	18e3      	adds	r3, r4, r3
 80055d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055d8:	464b      	mov	r3, r9
 80055da:	eb45 0303 	adc.w	r3, r5, r3
 80055de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055fe:	4629      	mov	r1, r5
 8005600:	008b      	lsls	r3, r1, #2
 8005602:	4621      	mov	r1, r4
 8005604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005608:	4621      	mov	r1, r4
 800560a:	008a      	lsls	r2, r1, #2
 800560c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005610:	f7fa fe2e 	bl	8000270 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4b60      	ldr	r3, [pc, #384]	; (800579c <UART_SetConfig+0x4e4>)
 800561a:	fba3 2302 	umull	r2, r3, r3, r2
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	011c      	lsls	r4, r3, #4
 8005622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005626:	2200      	movs	r2, #0
 8005628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800562c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005630:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005634:	4642      	mov	r2, r8
 8005636:	464b      	mov	r3, r9
 8005638:	1891      	adds	r1, r2, r2
 800563a:	61b9      	str	r1, [r7, #24]
 800563c:	415b      	adcs	r3, r3
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005644:	4641      	mov	r1, r8
 8005646:	1851      	adds	r1, r2, r1
 8005648:	6139      	str	r1, [r7, #16]
 800564a:	4649      	mov	r1, r9
 800564c:	414b      	adcs	r3, r1
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800565c:	4659      	mov	r1, fp
 800565e:	00cb      	lsls	r3, r1, #3
 8005660:	4651      	mov	r1, sl
 8005662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005666:	4651      	mov	r1, sl
 8005668:	00ca      	lsls	r2, r1, #3
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	4603      	mov	r3, r0
 8005670:	4642      	mov	r2, r8
 8005672:	189b      	adds	r3, r3, r2
 8005674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005678:	464b      	mov	r3, r9
 800567a:	460a      	mov	r2, r1
 800567c:	eb42 0303 	adc.w	r3, r2, r3
 8005680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	67bb      	str	r3, [r7, #120]	; 0x78
 800568e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800569c:	4649      	mov	r1, r9
 800569e:	008b      	lsls	r3, r1, #2
 80056a0:	4641      	mov	r1, r8
 80056a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056a6:	4641      	mov	r1, r8
 80056a8:	008a      	lsls	r2, r1, #2
 80056aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056ae:	f7fa fddf 	bl	8000270 <__aeabi_uldivmod>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4b39      	ldr	r3, [pc, #228]	; (800579c <UART_SetConfig+0x4e4>)
 80056b8:	fba3 1302 	umull	r1, r3, r3, r2
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	2164      	movs	r1, #100	; 0x64
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	3332      	adds	r3, #50	; 0x32
 80056ca:	4a34      	ldr	r2, [pc, #208]	; (800579c <UART_SetConfig+0x4e4>)
 80056cc:	fba2 2303 	umull	r2, r3, r2, r3
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d6:	441c      	add	r4, r3
 80056d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056dc:	2200      	movs	r2, #0
 80056de:	673b      	str	r3, [r7, #112]	; 0x70
 80056e0:	677a      	str	r2, [r7, #116]	; 0x74
 80056e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056e6:	4642      	mov	r2, r8
 80056e8:	464b      	mov	r3, r9
 80056ea:	1891      	adds	r1, r2, r2
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	415b      	adcs	r3, r3
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056f6:	4641      	mov	r1, r8
 80056f8:	1851      	adds	r1, r2, r1
 80056fa:	6039      	str	r1, [r7, #0]
 80056fc:	4649      	mov	r1, r9
 80056fe:	414b      	adcs	r3, r1
 8005700:	607b      	str	r3, [r7, #4]
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800570e:	4659      	mov	r1, fp
 8005710:	00cb      	lsls	r3, r1, #3
 8005712:	4651      	mov	r1, sl
 8005714:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005718:	4651      	mov	r1, sl
 800571a:	00ca      	lsls	r2, r1, #3
 800571c:	4610      	mov	r0, r2
 800571e:	4619      	mov	r1, r3
 8005720:	4603      	mov	r3, r0
 8005722:	4642      	mov	r2, r8
 8005724:	189b      	adds	r3, r3, r2
 8005726:	66bb      	str	r3, [r7, #104]	; 0x68
 8005728:	464b      	mov	r3, r9
 800572a:	460a      	mov	r2, r1
 800572c:	eb42 0303 	adc.w	r3, r2, r3
 8005730:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	663b      	str	r3, [r7, #96]	; 0x60
 800573c:	667a      	str	r2, [r7, #100]	; 0x64
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800574a:	4649      	mov	r1, r9
 800574c:	008b      	lsls	r3, r1, #2
 800574e:	4641      	mov	r1, r8
 8005750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005754:	4641      	mov	r1, r8
 8005756:	008a      	lsls	r2, r1, #2
 8005758:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800575c:	f7fa fd88 	bl	8000270 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <UART_SetConfig+0x4e4>)
 8005766:	fba3 1302 	umull	r1, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	2164      	movs	r1, #100	; 0x64
 800576e:	fb01 f303 	mul.w	r3, r1, r3
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	3332      	adds	r3, #50	; 0x32
 8005778:	4a08      	ldr	r2, [pc, #32]	; (800579c <UART_SetConfig+0x4e4>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	f003 020f 	and.w	r2, r3, #15
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4422      	add	r2, r4
 800578c:	609a      	str	r2, [r3, #8]
}
 800578e:	bf00      	nop
 8005790:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005794:	46bd      	mov	sp, r7
 8005796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800579a:	bf00      	nop
 800579c:	51eb851f 	.word	0x51eb851f

080057a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057a0:	b084      	sub	sp, #16
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	f107 001c 	add.w	r0, r7, #28
 80057ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d122      	bne.n	80057fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d105      	bne.n	80057f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9c0 	bl	8005b78 <USB_CoreReset>
 80057f8:	4603      	mov	r3, r0
 80057fa:	73fb      	strb	r3, [r7, #15]
 80057fc:	e01a      	b.n	8005834 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f9b4 	bl	8005b78 <USB_CoreReset>
 8005810:	4603      	mov	r3, r0
 8005812:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	639a      	str	r2, [r3, #56]	; 0x38
 8005826:	e005      	b.n	8005834 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	2b01      	cmp	r3, #1
 8005838:	d10b      	bne.n	8005852 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f043 0206 	orr.w	r2, r3, #6
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f043 0220 	orr.w	r2, r3, #32
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005852:	7bfb      	ldrb	r3, [r7, #15]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800585e:	b004      	add	sp, #16
 8005860:	4770      	bx	lr

08005862 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f043 0201 	orr.w	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f023 0201 	bic.w	r2, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d115      	bne.n	80058f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058d4:	2001      	movs	r0, #1
 80058d6:	f7fb fc81 	bl	80011dc <HAL_Delay>
      ms++;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3301      	adds	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f93a 	bl	8005b5a <USB_GetMode>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d01e      	beq.n	800592a <USB_SetCurrentMode+0x84>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b31      	cmp	r3, #49	; 0x31
 80058f0:	d9f0      	bls.n	80058d4 <USB_SetCurrentMode+0x2e>
 80058f2:	e01a      	b.n	800592a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d115      	bne.n	8005926 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005906:	2001      	movs	r0, #1
 8005908:	f7fb fc68 	bl	80011dc <HAL_Delay>
      ms++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f921 	bl	8005b5a <USB_GetMode>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <USB_SetCurrentMode+0x84>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b31      	cmp	r3, #49	; 0x31
 8005922:	d9f0      	bls.n	8005906 <USB_SetCurrentMode+0x60>
 8005924:	e001      	b.n	800592a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e005      	b.n	8005936 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b32      	cmp	r3, #50	; 0x32
 800592e:	d101      	bne.n	8005934 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3301      	adds	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <USB_FlushTxFifo+0x64>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d901      	bls.n	8005960 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e01b      	b.n	8005998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	daf2      	bge.n	800594e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	019b      	lsls	r3, r3, #6
 8005970:	f043 0220 	orr.w	r2, r3, #32
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <USB_FlushTxFifo+0x64>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e006      	b.n	8005998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b20      	cmp	r3, #32
 8005994:	d0f0      	beq.n	8005978 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	00030d40 	.word	0x00030d40

080059a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4a11      	ldr	r2, [pc, #68]	; (8005a04 <USB_FlushRxFifo+0x5c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e018      	b.n	80059f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	daf2      	bge.n	80059b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2210      	movs	r2, #16
 80059d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4a08      	ldr	r2, [pc, #32]	; (8005a04 <USB_FlushRxFifo+0x5c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d901      	bls.n	80059ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e006      	b.n	80059f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b10      	cmp	r3, #16
 80059f4:	d0f0      	beq.n	80059d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	00030d40 	.word	0x00030d40

08005a08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b089      	sub	sp, #36	; 0x24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4611      	mov	r1, r2
 8005a14:	461a      	mov	r2, r3
 8005a16:	460b      	mov	r3, r1
 8005a18:	71fb      	strb	r3, [r7, #7]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d123      	bne.n	8005a76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a2e:	88bb      	ldrh	r3, [r7, #4]
 8005a30:	3303      	adds	r3, #3
 8005a32:	089b      	lsrs	r3, r3, #2
 8005a34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	e018      	b.n	8005a6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	031a      	lsls	r2, r3, #12
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a48:	461a      	mov	r2, r3
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	3301      	adds	r3, #1
 8005a54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3301      	adds	r3, #1
 8005a66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d3e2      	bcc.n	8005a3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3724      	adds	r7, #36	; 0x24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b08b      	sub	sp, #44	; 0x2c
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a9a:	88fb      	ldrh	r3, [r7, #6]
 8005a9c:	089b      	lsrs	r3, r3, #2
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	623b      	str	r3, [r7, #32]
 8005aae:	e014      	b.n	8005ada <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	601a      	str	r2, [r3, #0]
    pDest++;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	3301      	adds	r3, #1
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	3301      	adds	r3, #1
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	623b      	str	r3, [r7, #32]
 8005ada:	6a3a      	ldr	r2, [r7, #32]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d3e6      	bcc.n	8005ab0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ae2:	8bfb      	ldrh	r3, [r7, #30]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01e      	beq.n	8005b26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af2:	461a      	mov	r2, r3
 8005af4:	f107 0310 	add.w	r3, r7, #16
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	701a      	strb	r2, [r3, #0]
      i++;
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	3301      	adds	r3, #1
 8005b12:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	3301      	adds	r3, #1
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b1a:	8bfb      	ldrh	r3, [r7, #30]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b20:	8bfb      	ldrh	r3, [r7, #30]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1ea      	bne.n	8005afc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	372c      	adds	r7, #44	; 0x2c
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0301 	and.w	r3, r3, #1
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a13      	ldr	r2, [pc, #76]	; (8005bdc <USB_CoreReset+0x64>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e01b      	b.n	8005bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	daf2      	bge.n	8005b84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f043 0201 	orr.w	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4a09      	ldr	r2, [pc, #36]	; (8005bdc <USB_CoreReset+0x64>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d901      	bls.n	8005bc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e006      	b.n	8005bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d0f0      	beq.n	8005bae <USB_CoreReset+0x36>

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	00030d40 	.word	0x00030d40

08005be0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005be0:	b084      	sub	sp, #16
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c00:	461a      	mov	r2, r3
 8005c02:	2300      	movs	r3, #0
 8005c04:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d018      	beq.n	8005c68 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10a      	bne.n	8005c52 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c4a:	f043 0304 	orr.w	r3, r3, #4
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	e014      	b.n	8005c7c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c60:	f023 0304 	bic.w	r3, r3, #4
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	e009      	b.n	8005c7c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c76:	f023 0304 	bic.w	r3, r3, #4
 8005c7a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c7c:	2110      	movs	r1, #16
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff fe5e 	bl	8005940 <USB_FlushTxFifo>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff fe8a 	bl	80059a8 <USB_FlushRxFifo>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	e015      	b.n	8005cd0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cb6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	613b      	str	r3, [r7, #16]
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d3e5      	bcc.n	8005ca4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ce4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00b      	beq.n	8005d0a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a13      	ldr	r2, [pc, #76]	; (8005d4c <USB_HostInit+0x16c>)
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <USB_HostInit+0x170>)
 8005d04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d08:	e009      	b.n	8005d1e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2280      	movs	r2, #128	; 0x80
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a10      	ldr	r2, [pc, #64]	; (8005d54 <USB_HostInit+0x174>)
 8005d14:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a0f      	ldr	r2, [pc, #60]	; (8005d58 <USB_HostInit+0x178>)
 8005d1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f043 0210 	orr.w	r2, r3, #16
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699a      	ldr	r2, [r3, #24]
 8005d34:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <USB_HostInit+0x17c>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d48:	b004      	add	sp, #16
 8005d4a:	4770      	bx	lr
 8005d4c:	01000200 	.word	0x01000200
 8005d50:	00e00300 	.word	0x00e00300
 8005d54:	00600080 	.word	0x00600080
 8005d58:	004000e0 	.word	0x004000e0
 8005d5c:	a3200008 	.word	0xa3200008

08005d60 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	68f9      	ldr	r1, [r7, #12]
 8005d94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d107      	bne.n	8005db2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da8:	461a      	mov	r2, r3
 8005daa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005dae:	6053      	str	r3, [r2, #4]
 8005db0:	e009      	b.n	8005dc6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d106      	bne.n	8005dc6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f241 7370 	movw	r3, #6000	; 0x1770
 8005dc4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005df4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e02:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e04:	2064      	movs	r0, #100	; 0x64
 8005e06:	f7fb f9e9 	bl	80011dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e16:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e18:	200a      	movs	r0, #10
 8005e1a:	f7fb f9df 	bl	80011dc <HAL_Delay>

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e4c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d109      	bne.n	8005e6c <USB_DriveVbus+0x44>
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d106      	bne.n	8005e6c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e6a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e76:	d109      	bne.n	8005e8c <USB_DriveVbus+0x64>
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e8a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	0c5b      	lsrs	r3, r3, #17
 8005eb8:	f003 0303 	and.w	r3, r3, #3
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	b29b      	uxth	r3, r3
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	4608      	mov	r0, r1
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4603      	mov	r3, r0
 8005efc:	70fb      	strb	r3, [r7, #3]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70bb      	strb	r3, [r7, #2]
 8005f02:	4613      	mov	r3, r2
 8005f04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f20:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	d87e      	bhi.n	8006028 <USB_HC_Init+0x13c>
 8005f2a:	a201      	add	r2, pc, #4	; (adr r2, 8005f30 <USB_HC_Init+0x44>)
 8005f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f30:	08005f41 	.word	0x08005f41
 8005f34:	08005feb 	.word	0x08005feb
 8005f38:	08005f41 	.word	0x08005f41
 8005f3c:	08005fad 	.word	0x08005fad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	da10      	bge.n	8005f7e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	78fa      	ldrb	r2, [r7, #3]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f7c:	e057      	b.n	800602e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d051      	beq.n	800602e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005fa8:	60d3      	str	r3, [r2, #12]
      break;
 8005faa:	e040      	b.n	800602e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fac:	78fb      	ldrb	r3, [r7, #3]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb8:	461a      	mov	r2, r3
 8005fba:	f240 639d 	movw	r3, #1693	; 0x69d
 8005fbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	da34      	bge.n	8006032 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	78fa      	ldrb	r2, [r7, #3]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005fe8:	e023      	b.n	8006032 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f240 2325 	movw	r3, #549	; 0x225
 8005ffc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ffe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006002:	2b00      	cmp	r3, #0
 8006004:	da17      	bge.n	8006036 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006006:	78fb      	ldrb	r3, [r7, #3]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4413      	add	r3, r2
 800600e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	78fa      	ldrb	r2, [r7, #3]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	440a      	add	r2, r1
 800601c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006020:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006024:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006026:	e006      	b.n	8006036 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	77fb      	strb	r3, [r7, #31]
      break;
 800602c:	e004      	b.n	8006038 <USB_HC_Init+0x14c>
      break;
 800602e:	bf00      	nop
 8006030:	e002      	b.n	8006038 <USB_HC_Init+0x14c>
      break;
 8006032:	bf00      	nop
 8006034:	e000      	b.n	8006038 <USB_HC_Init+0x14c>
      break;
 8006036:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	4413      	add	r3, r2
 8006040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	78fa      	ldrb	r2, [r7, #3]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	440a      	add	r2, r1
 800604e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006052:	f043 0302 	orr.w	r3, r3, #2
 8006056:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	2101      	movs	r1, #1
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	6939      	ldr	r1, [r7, #16]
 800606e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006072:	4313      	orrs	r3, r2
 8006074:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006082:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006086:	2b00      	cmp	r3, #0
 8006088:	da03      	bge.n	8006092 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800608a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	e001      	b.n	8006096 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff feff 	bl	8005e9a <USB_GetHostSpeed>
 800609c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800609e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d106      	bne.n	80060b4 <USB_HC_Init+0x1c8>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d003      	beq.n	80060b4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	e001      	b.n	80060b8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060b8:	787b      	ldrb	r3, [r7, #1]
 80060ba:	059b      	lsls	r3, r3, #22
 80060bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060c0:	78bb      	ldrb	r3, [r7, #2]
 80060c2:	02db      	lsls	r3, r3, #11
 80060c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060ce:	049b      	lsls	r3, r3, #18
 80060d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	0159      	lsls	r1, r3, #5
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	440b      	add	r3, r1
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060f4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80060f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d003      	beq.n	8006106 <USB_HC_Init+0x21a>
 80060fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006102:	2b01      	cmp	r3, #1
 8006104:	d10f      	bne.n	8006126 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	78fa      	ldrb	r2, [r7, #3]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	440a      	add	r2, r1
 800611c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006120:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006124:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006126:	7ffb      	ldrb	r3, [r7, #31]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08c      	sub	sp, #48	; 0x30
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4613      	mov	r3, r2
 800613c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800614c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d02d      	beq.n	80061b6 <USB_HC_StartXfer+0x86>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	791b      	ldrb	r3, [r3, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d129      	bne.n	80061b6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d117      	bne.n	8006198 <USB_HC_StartXfer+0x68>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	79db      	ldrb	r3, [r3, #7]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <USB_HC_StartXfer+0x48>
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	79db      	ldrb	r3, [r3, #7]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d10f      	bne.n	8006198 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	4413      	add	r3, r2
 8006180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	6a3a      	ldr	r2, [r7, #32]
 800618c:	440a      	add	r2, r1
 800618e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10b      	bne.n	80061b6 <USB_HC_StartXfer+0x86>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	795b      	ldrb	r3, [r3, #5]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d107      	bne.n	80061b6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	4619      	mov	r1, r3
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 fa0f 	bl	80065d0 <USB_DoPing>
      return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e0f8      	b.n	80063a8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d018      	beq.n	80061f0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	8912      	ldrh	r2, [r2, #8]
 80061c6:	4413      	add	r3, r2
 80061c8:	3b01      	subs	r3, #1
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	8912      	ldrh	r2, [r2, #8]
 80061ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80061d2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80061d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061d6:	8b7b      	ldrh	r3, [r7, #26]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d90b      	bls.n	80061f4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80061dc:	8b7b      	ldrh	r3, [r7, #26]
 80061de:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	8912      	ldrh	r2, [r2, #8]
 80061e6:	fb03 f202 	mul.w	r2, r3, r2
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	611a      	str	r2, [r3, #16]
 80061ee:	e001      	b.n	80061f4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80061f0:	2301      	movs	r3, #1
 80061f2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	78db      	ldrb	r3, [r3, #3]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	8912      	ldrh	r2, [r2, #8]
 8006202:	fb03 f202 	mul.w	r2, r3, r2
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	611a      	str	r2, [r3, #16]
 800620a:	e003      	b.n	8006214 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	695a      	ldr	r2, [r3, #20]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800621c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800621e:	04d9      	lsls	r1, r3, #19
 8006220:	4b63      	ldr	r3, [pc, #396]	; (80063b0 <USB_HC_StartXfer+0x280>)
 8006222:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006224:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	7a9b      	ldrb	r3, [r3, #10]
 800622a:	075b      	lsls	r3, r3, #29
 800622c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006230:	69f9      	ldr	r1, [r7, #28]
 8006232:	0148      	lsls	r0, r1, #5
 8006234:	6a39      	ldr	r1, [r7, #32]
 8006236:	4401      	add	r1, r0
 8006238:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800623c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800623e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d009      	beq.n	800625a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	68d9      	ldr	r1, [r3, #12]
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	4413      	add	r3, r2
 8006252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006256:	460a      	mov	r2, r1
 8006258:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	bf0c      	ite	eq
 800626a:	2301      	moveq	r3, #1
 800626c:	2300      	movne	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	6a3a      	ldr	r2, [r7, #32]
 8006286:	440a      	add	r2, r1
 8006288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800628c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006290:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	4413      	add	r3, r2
 800629a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	7e7b      	ldrb	r3, [r7, #25]
 80062a2:	075b      	lsls	r3, r3, #29
 80062a4:	69f9      	ldr	r1, [r7, #28]
 80062a6:	0148      	lsls	r0, r1, #5
 80062a8:	6a39      	ldr	r1, [r7, #32]
 80062aa:	4401      	add	r1, r0
 80062ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80062b0:	4313      	orrs	r3, r2
 80062b2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062ca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	78db      	ldrb	r3, [r3, #3]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	e003      	b.n	80062e6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062e4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	461a      	mov	r2, r3
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	e04e      	b.n	80063a8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	78db      	ldrb	r3, [r3, #3]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d149      	bne.n	80063a6 <USB_HC_StartXfer+0x276>
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d045      	beq.n	80063a6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	79db      	ldrb	r3, [r3, #7]
 800631e:	2b03      	cmp	r3, #3
 8006320:	d830      	bhi.n	8006384 <USB_HC_StartXfer+0x254>
 8006322:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <USB_HC_StartXfer+0x1f8>)
 8006324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006328:	08006339 	.word	0x08006339
 800632c:	0800635d 	.word	0x0800635d
 8006330:	08006339 	.word	0x08006339
 8006334:	0800635d 	.word	0x0800635d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	3303      	adds	r3, #3
 800633e:	089b      	lsrs	r3, r3, #2
 8006340:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006342:	8afa      	ldrh	r2, [r7, #22]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	b29b      	uxth	r3, r3
 800634a:	429a      	cmp	r2, r3
 800634c:	d91c      	bls.n	8006388 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	f043 0220 	orr.w	r2, r3, #32
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	619a      	str	r2, [r3, #24]
        }
        break;
 800635a:	e015      	b.n	8006388 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	3303      	adds	r3, #3
 8006362:	089b      	lsrs	r3, r3, #2
 8006364:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006366:	8afa      	ldrh	r2, [r7, #22]
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	b29b      	uxth	r3, r3
 8006372:	429a      	cmp	r2, r3
 8006374:	d90a      	bls.n	800638c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	619a      	str	r2, [r3, #24]
        }
        break;
 8006382:	e003      	b.n	800638c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006384:	bf00      	nop
 8006386:	e002      	b.n	800638e <USB_HC_StartXfer+0x25e>
        break;
 8006388:	bf00      	nop
 800638a:	e000      	b.n	800638e <USB_HC_StartXfer+0x25e>
        break;
 800638c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	68d9      	ldr	r1, [r3, #12]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	785a      	ldrb	r2, [r3, #1]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	b29b      	uxth	r3, r3
 800639c:	2000      	movs	r0, #0
 800639e:	9000      	str	r0, [sp, #0]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7ff fb31 	bl	8005a08 <USB_WritePacket>
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3728      	adds	r7, #40	; 0x28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	1ff80000 	.word	0x1ff80000

080063b4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	b29b      	uxth	r3, r3
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b089      	sub	sp, #36	; 0x24
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	0c9b      	lsrs	r3, r3, #18
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	0fdb      	lsrs	r3, r3, #31
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b20      	cmp	r3, #32
 8006424:	d104      	bne.n	8006430 <USB_HC_Halt+0x5a>
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e0c8      	b.n	80065c2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <USB_HC_Halt+0x66>
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d163      	bne.n	8006504 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	440a      	add	r2, r1
 8006452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006456:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800645a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 80ab 	bne.w	80065c0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d133      	bne.n	80064de <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	0151      	lsls	r1, r2, #5
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	440a      	add	r2, r1
 800648c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006494:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064b4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3301      	adds	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064c2:	d81d      	bhi.n	8006500 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064da:	d0ec      	beq.n	80064b6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064dc:	e070      	b.n	80065c0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	0151      	lsls	r1, r2, #5
 80064f0:	69fa      	ldr	r2, [r7, #28]
 80064f2:	440a      	add	r2, r1
 80064f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064fc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064fe:	e05f      	b.n	80065c0 <USB_HC_Halt+0x1ea>
            break;
 8006500:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006502:	e05d      	b.n	80065c0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	4413      	add	r3, r2
 800650c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	0151      	lsls	r1, r2, #5
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	440a      	add	r2, r1
 800651a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006522:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d133      	bne.n	800659c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	69fa      	ldr	r2, [r7, #28]
 8006548:	440a      	add	r2, r1
 800654a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006552:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	440a      	add	r2, r1
 800656a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800656e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006572:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006580:	d81d      	bhi.n	80065be <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006598:	d0ec      	beq.n	8006574 <USB_HC_Halt+0x19e>
 800659a:	e011      	b.n	80065c0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	e000      	b.n	80065c0 <USB_HC_Halt+0x1ea>
          break;
 80065be:	bf00      	nop
    }
  }

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3724      	adds	r7, #36	; 0x24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
	...

080065d0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065e4:	2301      	movs	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	04da      	lsls	r2, r3, #19
 80065ec:	4b15      	ldr	r3, [pc, #84]	; (8006644 <USB_DoPing+0x74>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006600:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006618:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006620:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662e:	461a      	mov	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	1ff80000 	.word	0x1ff80000

08006648 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff f911 	bl	8005884 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006662:	2110      	movs	r1, #16
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff f96b 	bl	8005940 <USB_FlushTxFifo>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff f997 	bl	80059a8 <USB_FlushRxFifo>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006684:	2300      	movs	r3, #0
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	e01f      	b.n	80066ca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066be:	461a      	mov	r2, r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	3301      	adds	r3, #1
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	2b0f      	cmp	r3, #15
 80066ce:	d9dc      	bls.n	800668a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066d0:	2300      	movs	r3, #0
 80066d2:	61bb      	str	r3, [r7, #24]
 80066d4:	e034      	b.n	8006740 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670a:	461a      	mov	r2, r3
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3301      	adds	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800671c:	d80c      	bhi.n	8006738 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	4413      	add	r3, r2
 8006726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006734:	d0ec      	beq.n	8006710 <USB_StopHost+0xc8>
 8006736:	e000      	b.n	800673a <USB_StopHost+0xf2>
        break;
 8006738:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	3301      	adds	r3, #1
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2b0f      	cmp	r3, #15
 8006744:	d9c7      	bls.n	80066d6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674c:	461a      	mov	r2, r3
 800674e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006752:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800675a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff f880 	bl	8005862 <USB_EnableGlobalInt>

  return ret;
 8006762:	7ffb      	ldrb	r3, [r7, #31]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3720      	adds	r7, #32
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800676c:	b590      	push	{r4, r7, lr}
 800676e:	b089      	sub	sp, #36	; 0x24
 8006770:	af04      	add	r7, sp, #16
 8006772:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006774:	2301      	movs	r3, #1
 8006776:	2202      	movs	r2, #2
 8006778:	2102      	movs	r1, #2
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fc66 	bl	800704c <USBH_FindInterface>
 8006780:	4603      	mov	r3, r0
 8006782:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	2bff      	cmp	r3, #255	; 0xff
 8006788:	d002      	beq.n	8006790 <USBH_CDC_InterfaceInit+0x24>
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d901      	bls.n	8006794 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006790:	2302      	movs	r3, #2
 8006792:	e13d      	b.n	8006a10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fc3b 	bl	8007014 <USBH_SelectInterface>
 800679e:	4603      	mov	r3, r0
 80067a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80067a8:	2302      	movs	r3, #2
 80067aa:	e131      	b.n	8006a10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80067b2:	2050      	movs	r0, #80	; 0x50
 80067b4:	f002 fafa 	bl	8008dac <malloc>
 80067b8:	4603      	mov	r3, r0
 80067ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80067cc:	2302      	movs	r3, #2
 80067ce:	e11f      	b.n	8006a10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80067d0:	2250      	movs	r2, #80	; 0x50
 80067d2:	2100      	movs	r1, #0
 80067d4:	68b8      	ldr	r0, [r7, #8]
 80067d6:	f002 faf9 	bl	8008dcc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	211a      	movs	r1, #26
 80067e0:	fb01 f303 	mul.w	r3, r1, r3
 80067e4:	4413      	add	r3, r2
 80067e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	da15      	bge.n	800681e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	211a      	movs	r1, #26
 80067f8:	fb01 f303 	mul.w	r3, r1, r3
 80067fc:	4413      	add	r3, r2
 80067fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006802:	781a      	ldrb	r2, [r3, #0]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	211a      	movs	r1, #26
 800680e:	fb01 f303 	mul.w	r3, r1, r3
 8006812:	4413      	add	r3, r2
 8006814:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006818:	881a      	ldrh	r2, [r3, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 ff2c 	bl	8008682 <USBH_AllocPipe>
 800682a:	4603      	mov	r3, r0
 800682c:	461a      	mov	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	7819      	ldrb	r1, [r3, #0]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	7858      	ldrb	r0, [r3, #1]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	8952      	ldrh	r2, [r2, #10]
 800684a:	9202      	str	r2, [sp, #8]
 800684c:	2203      	movs	r2, #3
 800684e:	9201      	str	r2, [sp, #4]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4623      	mov	r3, r4
 8006854:	4602      	mov	r2, r0
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 fee4 	bl	8008624 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2200      	movs	r2, #0
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f002 f9f3 	bl	8008c50 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800686a:	2300      	movs	r3, #0
 800686c:	2200      	movs	r2, #0
 800686e:	210a      	movs	r1, #10
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fbeb 	bl	800704c <USBH_FindInterface>
 8006876:	4603      	mov	r3, r0
 8006878:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	2bff      	cmp	r3, #255	; 0xff
 800687e:	d002      	beq.n	8006886 <USBH_CDC_InterfaceInit+0x11a>
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d901      	bls.n	800688a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006886:	2302      	movs	r3, #2
 8006888:	e0c2      	b.n	8006a10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	211a      	movs	r1, #26
 8006890:	fb01 f303 	mul.w	r3, r1, r3
 8006894:	4413      	add	r3, r2
 8006896:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	b25b      	sxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	da16      	bge.n	80068d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	211a      	movs	r1, #26
 80068a8:	fb01 f303 	mul.w	r3, r1, r3
 80068ac:	4413      	add	r3, r2
 80068ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068b2:	781a      	ldrb	r2, [r3, #0]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	211a      	movs	r1, #26
 80068be:	fb01 f303 	mul.w	r3, r1, r3
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068c8:	881a      	ldrh	r2, [r3, #0]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	835a      	strh	r2, [r3, #26]
 80068ce:	e015      	b.n	80068fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	211a      	movs	r1, #26
 80068d6:	fb01 f303 	mul.w	r3, r1, r3
 80068da:	4413      	add	r3, r2
 80068dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068e0:	781a      	ldrb	r2, [r3, #0]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	211a      	movs	r1, #26
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068f6:	881a      	ldrh	r2, [r3, #0]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	211a      	movs	r1, #26
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	4413      	add	r3, r2
 8006908:	f203 3356 	addw	r3, r3, #854	; 0x356
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	b25b      	sxtb	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	da16      	bge.n	8006942 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	211a      	movs	r1, #26
 800691a:	fb01 f303 	mul.w	r3, r1, r3
 800691e:	4413      	add	r3, r2
 8006920:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006924:	781a      	ldrb	r2, [r3, #0]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	211a      	movs	r1, #26
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	4413      	add	r3, r2
 8006936:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800693a:	881a      	ldrh	r2, [r3, #0]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	835a      	strh	r2, [r3, #26]
 8006940:	e015      	b.n	800696e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	211a      	movs	r1, #26
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	4413      	add	r3, r2
 800694e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006952:	781a      	ldrb	r2, [r3, #0]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	211a      	movs	r1, #26
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	4413      	add	r3, r2
 8006964:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006968:	881a      	ldrh	r2, [r3, #0]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	7b9b      	ldrb	r3, [r3, #14]
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 fe84 	bl	8008682 <USBH_AllocPipe>
 800697a:	4603      	mov	r3, r0
 800697c:	461a      	mov	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	7bdb      	ldrb	r3, [r3, #15]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 fe7a 	bl	8008682 <USBH_AllocPipe>
 800698e:	4603      	mov	r3, r0
 8006990:	461a      	mov	r2, r3
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	7b59      	ldrb	r1, [r3, #13]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	7b98      	ldrb	r0, [r3, #14]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	8b12      	ldrh	r2, [r2, #24]
 80069ae:	9202      	str	r2, [sp, #8]
 80069b0:	2202      	movs	r2, #2
 80069b2:	9201      	str	r2, [sp, #4]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	4623      	mov	r3, r4
 80069b8:	4602      	mov	r2, r0
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fe32 	bl	8008624 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	7b19      	ldrb	r1, [r3, #12]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	7bd8      	ldrb	r0, [r3, #15]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	8b52      	ldrh	r2, [r2, #26]
 80069d8:	9202      	str	r2, [sp, #8]
 80069da:	2202      	movs	r2, #2
 80069dc:	9201      	str	r2, [sp, #4]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	4623      	mov	r3, r4
 80069e2:	4602      	mov	r2, r0
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 fe1d 	bl	8008624 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	7b5b      	ldrb	r3, [r3, #13]
 80069f6:	2200      	movs	r2, #0
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f002 f928 	bl	8008c50 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	7b1b      	ldrb	r3, [r3, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f002 f921 	bl	8008c50 <USBH_LL_SetToggle>

  return USBH_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd90      	pop	{r4, r7, pc}

08006a18 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00e      	beq.n	8006a50 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fe12 	bl	8008662 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 fe3d 	bl	80086c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	7b1b      	ldrb	r3, [r3, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00e      	beq.n	8006a76 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	7b1b      	ldrb	r3, [r3, #12]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 fdff 	bl	8008662 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	7b1b      	ldrb	r3, [r3, #12]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 fe2a 	bl	80086c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	7b5b      	ldrb	r3, [r3, #13]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00e      	beq.n	8006a9c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	7b5b      	ldrb	r3, [r3, #13]
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fdec 	bl	8008662 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	7b5b      	ldrb	r3, [r3, #13]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 fe17 	bl	80086c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f002 f983 	bl	8008dbc <free>
    phost->pActiveClass->pData = 0U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006abc:	2200      	movs	r2, #0
 8006abe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3340      	adds	r3, #64	; 0x40
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f8b1 	bl	8006c4a <GetLineCoding>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d105      	bne.n	8006afe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006af8:	2102      	movs	r1, #2
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006afe:	7afb      	ldrb	r3, [r7, #11]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b10:	2301      	movs	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d877      	bhi.n	8006c1c <USBH_CDC_Process+0x114>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <USBH_CDC_Process+0x2c>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b49 	.word	0x08006b49
 8006b38:	08006b4f 	.word	0x08006b4f
 8006b3c:	08006b7f 	.word	0x08006b7f
 8006b40:	08006bf3 	.word	0x08006bf3
 8006b44:	08006c01 	.word	0x08006c01
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4c:	e06d      	b.n	8006c2a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f897 	bl	8006c88 <SetLineCoding>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d104      	bne.n	8006b6e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b6c:	e058      	b.n	8006c20 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d055      	beq.n	8006c20 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2204      	movs	r2, #4
 8006b78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b7c:	e050      	b.n	8006c20 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	3340      	adds	r3, #64	; 0x40
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f860 	bl	8006c4a <GetLineCoding>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d126      	bne.n	8006be2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba6:	791b      	ldrb	r3, [r3, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d13b      	bne.n	8006c24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d133      	bne.n	8006c24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d12b      	bne.n	8006c24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d124      	bne.n	8006c24 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f958 	bl	8006e90 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006be0:	e020      	b.n	8006c24 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d01d      	beq.n	8006c24 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2204      	movs	r2, #4
 8006bec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bf0:	e018      	b.n	8006c24 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f867 	bl	8006cc6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f8da 	bl	8006db2 <CDC_ProcessReception>
      break;
 8006bfe:	e014      	b.n	8006c2a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c00:	2100      	movs	r1, #0
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 ffef 	bl	8007be6 <USBH_ClrFeature>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c1a:	e005      	b.n	8006c28 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c1c:	bf00      	nop
 8006c1e:	e004      	b.n	8006c2a <USBH_CDC_Process+0x122>
      break;
 8006c20:	bf00      	nop
 8006c22:	e002      	b.n	8006c2a <USBH_CDC_Process+0x122>
      break;
 8006c24:	bf00      	nop
 8006c26:	e000      	b.n	8006c2a <USBH_CDC_Process+0x122>
      break;
 8006c28:	bf00      	nop

  }

  return status;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	22a1      	movs	r2, #161	; 0xa1
 8006c58:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2221      	movs	r2, #33	; 0x21
 8006c5e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2207      	movs	r2, #7
 8006c70:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2207      	movs	r2, #7
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 fa81 	bl	8008180 <USBH_CtlReq>
 8006c7e:	4603      	mov	r3, r0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2221      	movs	r2, #33	; 0x21
 8006c96:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2207      	movs	r2, #7
 8006cae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2207      	movs	r2, #7
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fa62 	bl	8008180 <USBH_CtlReq>
 8006cbc:	4603      	mov	r3, r0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b086      	sub	sp, #24
 8006cca:	af02      	add	r7, sp, #8
 8006ccc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d002      	beq.n	8006cec <CDC_ProcessTransmission+0x26>
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d023      	beq.n	8006d32 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006cea:	e05e      	b.n	8006daa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	8b12      	ldrh	r2, [r2, #24]
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d90b      	bls.n	8006d10 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	69d9      	ldr	r1, [r3, #28]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8b1a      	ldrh	r2, [r3, #24]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	7b5b      	ldrb	r3, [r3, #13]
 8006d04:	2001      	movs	r0, #1
 8006d06:	9000      	str	r0, [sp, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fc48 	bl	800859e <USBH_BulkSendData>
 8006d0e:	e00b      	b.n	8006d28 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	7b5b      	ldrb	r3, [r3, #13]
 8006d1e:	2001      	movs	r0, #1
 8006d20:	9000      	str	r0, [sp, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 fc3b 	bl	800859e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d30:	e03b      	b.n	8006daa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	7b5b      	ldrb	r3, [r3, #13]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 ff5f 	bl	8008bfc <USBH_LL_GetURBState>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d42:	7afb      	ldrb	r3, [r7, #11]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d128      	bne.n	8006d9a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	8b12      	ldrh	r2, [r2, #24]
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d90e      	bls.n	8006d72 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	8b12      	ldrh	r2, [r2, #24]
 8006d5c:	1a9a      	subs	r2, r3, r2
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	8b12      	ldrh	r2, [r2, #24]
 8006d6a:	441a      	add	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	61da      	str	r2, [r3, #28]
 8006d70:	e002      	b.n	8006d78 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d88:	e00e      	b.n	8006da8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f868 	bl	8006e68 <USBH_CDC_TransmitCallback>
      break;
 8006d98:	e006      	b.n	8006da8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d103      	bne.n	8006da8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006da8:	bf00      	nop
  }
}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b086      	sub	sp, #24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d002      	beq.n	8006dd8 <CDC_ProcessReception+0x26>
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d00e      	beq.n	8006df4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006dd6:	e043      	b.n	8006e60 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	6a19      	ldr	r1, [r3, #32]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	8b5a      	ldrh	r2, [r3, #26]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	7b1b      	ldrb	r3, [r3, #12]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fbff 	bl	80085e8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2204      	movs	r2, #4
 8006dee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006df2:	e035      	b.n	8006e60 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	7b1b      	ldrb	r3, [r3, #12]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 fefe 	bl	8008bfc <USBH_LL_GetURBState>
 8006e00:	4603      	mov	r3, r0
 8006e02:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e04:	7cfb      	ldrb	r3, [r7, #19]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d129      	bne.n	8006e5e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	7b1b      	ldrb	r3, [r3, #12]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 fe61 	bl	8008ad8 <USBH_LL_GetLastXferSize>
 8006e16:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d016      	beq.n	8006e50 <CDC_ProcessReception+0x9e>
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	8b5b      	ldrh	r3, [r3, #26]
 8006e26:	461a      	mov	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d910      	bls.n	8006e50 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1ad2      	subs	r2, r2, r3
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	6a1a      	ldr	r2, [r3, #32]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	441a      	add	r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2203      	movs	r2, #3
 8006e4a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e4e:	e006      	b.n	8006e5e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f80f 	bl	8006e7c <USBH_CDC_ReceiveCallback>
      break;
 8006e5e:	bf00      	nop
  }
}
 8006e60:	bf00      	nop
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e029      	b.n	8006f10 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	79fa      	ldrb	r2, [r7, #7]
 8006ec0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f81f 	bl	8006f18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f001 fd31 	bl	8008970 <USBH_LL_Init>

  return USBH_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	e009      	b.n	8006f3e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	33e0      	adds	r3, #224	; 0xe0
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	2200      	movs	r2, #0
 8006f36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b0f      	cmp	r3, #15
 8006f42:	d9f2      	bls.n	8006f2a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	e009      	b.n	8006f5e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f54:	2200      	movs	r2, #0
 8006f56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f64:	d3f1      	bcc.n	8006f4a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2240      	movs	r2, #64	; 0x40
 8006f8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d016      	beq.n	8007002 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10e      	bne.n	8006ffc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fe4:	1c59      	adds	r1, r3, #1
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	33de      	adds	r3, #222	; 0xde
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
 8006ffa:	e004      	b.n	8007006 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	73fb      	strb	r3, [r7, #15]
 8007000:	e001      	b.n	8007006 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007002:	2302      	movs	r3, #2
 8007004:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800702a:	78fa      	ldrb	r2, [r7, #3]
 800702c:	429a      	cmp	r2, r3
 800702e:	d204      	bcs.n	800703a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	78fa      	ldrb	r2, [r7, #3]
 8007034:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007038:	e001      	b.n	800703e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800703a:	2302      	movs	r3, #2
 800703c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800703e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	4608      	mov	r0, r1
 8007056:	4611      	mov	r1, r2
 8007058:	461a      	mov	r2, r3
 800705a:	4603      	mov	r3, r0
 800705c:	70fb      	strb	r3, [r7, #3]
 800705e:	460b      	mov	r3, r1
 8007060:	70bb      	strb	r3, [r7, #2]
 8007062:	4613      	mov	r3, r2
 8007064:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007074:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007076:	e025      	b.n	80070c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	221a      	movs	r2, #26
 800707c:	fb02 f303 	mul.w	r3, r2, r3
 8007080:	3308      	adds	r3, #8
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4413      	add	r3, r2
 8007086:	3302      	adds	r3, #2
 8007088:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	795b      	ldrb	r3, [r3, #5]
 800708e:	78fa      	ldrb	r2, [r7, #3]
 8007090:	429a      	cmp	r2, r3
 8007092:	d002      	beq.n	800709a <USBH_FindInterface+0x4e>
 8007094:	78fb      	ldrb	r3, [r7, #3]
 8007096:	2bff      	cmp	r3, #255	; 0xff
 8007098:	d111      	bne.n	80070be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800709e:	78ba      	ldrb	r2, [r7, #2]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d002      	beq.n	80070aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070a4:	78bb      	ldrb	r3, [r7, #2]
 80070a6:	2bff      	cmp	r3, #255	; 0xff
 80070a8:	d109      	bne.n	80070be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070ae:	787a      	ldrb	r2, [r7, #1]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d002      	beq.n	80070ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070b4:	787b      	ldrb	r3, [r7, #1]
 80070b6:	2bff      	cmp	r3, #255	; 0xff
 80070b8:	d101      	bne.n	80070be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	e006      	b.n	80070cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	3301      	adds	r3, #1
 80070c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d9d6      	bls.n	8007078 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070ca:	23ff      	movs	r3, #255	; 0xff
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fc81 	bl	80089e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80070e6:	2101      	movs	r1, #1
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fd9a 	bl	8008c22 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af04      	add	r7, sp, #16
 80070fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007100:	2302      	movs	r3, #2
 8007102:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	d102      	bne.n	800711a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2203      	movs	r2, #3
 8007118:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b0b      	cmp	r3, #11
 8007122:	f200 81be 	bhi.w	80074a2 <USBH_Process+0x3aa>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <USBH_Process+0x34>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	0800715d 	.word	0x0800715d
 8007130:	0800718f 	.word	0x0800718f
 8007134:	080071f7 	.word	0x080071f7
 8007138:	0800743d 	.word	0x0800743d
 800713c:	080074a3 	.word	0x080074a3
 8007140:	0800729b 	.word	0x0800729b
 8007144:	080073e3 	.word	0x080073e3
 8007148:	080072d1 	.word	0x080072d1
 800714c:	080072f1 	.word	0x080072f1
 8007150:	08007311 	.word	0x08007311
 8007154:	08007355 	.word	0x08007355
 8007158:	08007425 	.word	0x08007425
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 819e 	beq.w	80074a6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007170:	20c8      	movs	r0, #200	; 0xc8
 8007172:	f001 fd9d 	bl	8008cb0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 fc93 	bl	8008aa2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800718c:	e18b      	b.n	80074a6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007194:	2b01      	cmp	r3, #1
 8007196:	d107      	bne.n	80071a8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071a6:	e18d      	b.n	80074c4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071b2:	d914      	bls.n	80071de <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071ba:	3301      	adds	r3, #1
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d903      	bls.n	80071d6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	220d      	movs	r2, #13
 80071d2:	701a      	strb	r2, [r3, #0]
      break;
 80071d4:	e176      	b.n	80074c4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]
      break;
 80071dc:	e172      	b.n	80074c4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071e4:	f103 020a 	add.w	r2, r3, #10
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80071ee:	200a      	movs	r0, #10
 80071f0:	f001 fd5e 	bl	8008cb0 <USBH_Delay>
      break;
 80071f4:	e166      	b.n	80074c4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d005      	beq.n	800720c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007206:	2104      	movs	r1, #4
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800720c:	2064      	movs	r0, #100	; 0x64
 800720e:	f001 fd4f 	bl	8008cb0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 fc1e 	bl	8008a54 <USBH_LL_GetSpeed>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2205      	movs	r2, #5
 8007226:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007228:	2100      	movs	r1, #0
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fa29 	bl	8008682 <USBH_AllocPipe>
 8007230:	4603      	mov	r3, r0
 8007232:	461a      	mov	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007238:	2180      	movs	r1, #128	; 0x80
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fa21 	bl	8008682 <USBH_AllocPipe>
 8007240:	4603      	mov	r3, r0
 8007242:	461a      	mov	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7919      	ldrb	r1, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800725c:	b292      	uxth	r2, r2
 800725e:	9202      	str	r2, [sp, #8]
 8007260:	2200      	movs	r2, #0
 8007262:	9201      	str	r2, [sp, #4]
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	4603      	mov	r3, r0
 8007268:	2280      	movs	r2, #128	; 0x80
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 f9da 	bl	8008624 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7959      	ldrb	r1, [r3, #5]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007284:	b292      	uxth	r2, r2
 8007286:	9202      	str	r2, [sp, #8]
 8007288:	2200      	movs	r2, #0
 800728a:	9201      	str	r2, [sp, #4]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	4603      	mov	r3, r0
 8007290:	2200      	movs	r2, #0
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 f9c6 	bl	8008624 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007298:	e114      	b.n	80074c4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f918 	bl	80074d0 <USBH_HandleEnum>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f040 80fe 	bne.w	80074aa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d103      	bne.n	80072c8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2208      	movs	r2, #8
 80072c4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072c6:	e0f0      	b.n	80074aa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2207      	movs	r2, #7
 80072cc:	701a      	strb	r2, [r3, #0]
      break;
 80072ce:	e0ec      	b.n	80074aa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80e9 	beq.w	80074ae <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072e2:	2101      	movs	r1, #1
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2208      	movs	r2, #8
 80072ec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80072ee:	e0de      	b.n	80074ae <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fc2c 	bl	8007b58 <USBH_SetCfg>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	f040 80d5 	bne.w	80074b2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2209      	movs	r2, #9
 800730c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800730e:	e0d0      	b.n	80074b2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d016      	beq.n	800734c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800731e:	2101      	movs	r1, #1
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fc3c 	bl	8007b9e <USBH_SetFeature>
 8007326:	4603      	mov	r3, r0
 8007328:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	220a      	movs	r2, #10
 8007336:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007338:	e0bd      	b.n	80074b6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b03      	cmp	r3, #3
 8007340:	f040 80b9 	bne.w	80074b6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	220a      	movs	r2, #10
 8007348:	701a      	strb	r2, [r3, #0]
      break;
 800734a:	e0b4      	b.n	80074b6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	220a      	movs	r2, #10
 8007350:	701a      	strb	r2, [r3, #0]
      break;
 8007352:	e0b0      	b.n	80074b6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 80ad 	beq.w	80074ba <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
 800736c:	e016      	b.n	800739c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800736e:	7bfa      	ldrb	r2, [r7, #15]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	32de      	adds	r2, #222	; 0xde
 8007374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007378:	791a      	ldrb	r2, [r3, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007380:	429a      	cmp	r2, r3
 8007382:	d108      	bne.n	8007396 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007384:	7bfa      	ldrb	r2, [r7, #15]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	32de      	adds	r2, #222	; 0xde
 800738a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007394:	e005      	b.n	80073a2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	3301      	adds	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0e5      	beq.n	800736e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d016      	beq.n	80073da <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d109      	bne.n	80073d2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2206      	movs	r2, #6
 80073c2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ca:	2103      	movs	r1, #3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073d0:	e073      	b.n	80074ba <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	220d      	movs	r2, #13
 80073d6:	701a      	strb	r2, [r3, #0]
      break;
 80073d8:	e06f      	b.n	80074ba <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	220d      	movs	r2, #13
 80073de:	701a      	strb	r2, [r3, #0]
      break;
 80073e0:	e06b      	b.n	80074ba <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d017      	beq.n	800741c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
 80073f8:	4603      	mov	r3, r0
 80073fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d103      	bne.n	800740c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	220b      	movs	r2, #11
 8007408:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800740a:	e058      	b.n	80074be <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d154      	bne.n	80074be <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	220d      	movs	r2, #13
 8007418:	701a      	strb	r2, [r3, #0]
      break;
 800741a:	e050      	b.n	80074be <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	220d      	movs	r2, #13
 8007420:	701a      	strb	r2, [r3, #0]
      break;
 8007422:	e04c      	b.n	80074be <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d049      	beq.n	80074c2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
      }
      break;
 800743a:	e042      	b.n	80074c2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff fd67 	bl	8006f18 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d009      	beq.n	8007468 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d005      	beq.n	800747e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007478:	2105      	movs	r1, #5
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b01      	cmp	r3, #1
 8007488:	d107      	bne.n	800749a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff fe20 	bl	80070d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007498:	e014      	b.n	80074c4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f001 faa4 	bl	80089e8 <USBH_LL_Start>
      break;
 80074a0:	e010      	b.n	80074c4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80074a2:	bf00      	nop
 80074a4:	e00e      	b.n	80074c4 <USBH_Process+0x3cc>
      break;
 80074a6:	bf00      	nop
 80074a8:	e00c      	b.n	80074c4 <USBH_Process+0x3cc>
      break;
 80074aa:	bf00      	nop
 80074ac:	e00a      	b.n	80074c4 <USBH_Process+0x3cc>
    break;
 80074ae:	bf00      	nop
 80074b0:	e008      	b.n	80074c4 <USBH_Process+0x3cc>
      break;
 80074b2:	bf00      	nop
 80074b4:	e006      	b.n	80074c4 <USBH_Process+0x3cc>
      break;
 80074b6:	bf00      	nop
 80074b8:	e004      	b.n	80074c4 <USBH_Process+0x3cc>
      break;
 80074ba:	bf00      	nop
 80074bc:	e002      	b.n	80074c4 <USBH_Process+0x3cc>
      break;
 80074be:	bf00      	nop
 80074c0:	e000      	b.n	80074c4 <USBH_Process+0x3cc>
      break;
 80074c2:	bf00      	nop
  }
  return USBH_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop

080074d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af04      	add	r7, sp, #16
 80074d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80074dc:	2301      	movs	r3, #1
 80074de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	785b      	ldrb	r3, [r3, #1]
 80074e4:	2b07      	cmp	r3, #7
 80074e6:	f200 81c1 	bhi.w	800786c <USBH_HandleEnum+0x39c>
 80074ea:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <USBH_HandleEnum+0x20>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	08007511 	.word	0x08007511
 80074f4:	080075cf 	.word	0x080075cf
 80074f8:	08007639 	.word	0x08007639
 80074fc:	080076c7 	.word	0x080076c7
 8007500:	08007731 	.word	0x08007731
 8007504:	080077a1 	.word	0x080077a1
 8007508:	080077e7 	.word	0x080077e7
 800750c:	0800782d 	.word	0x0800782d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007510:	2108      	movs	r1, #8
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa50 	bl	80079b8 <USBH_Get_DevDesc>
 8007518:	4603      	mov	r3, r0
 800751a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d130      	bne.n	8007584 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	7919      	ldrb	r1, [r3, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007546:	b292      	uxth	r2, r2
 8007548:	9202      	str	r2, [sp, #8]
 800754a:	2200      	movs	r2, #0
 800754c:	9201      	str	r2, [sp, #4]
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	4603      	mov	r3, r0
 8007552:	2280      	movs	r2, #128	; 0x80
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 f865 	bl	8008624 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	7959      	ldrb	r1, [r3, #5]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800756e:	b292      	uxth	r2, r2
 8007570:	9202      	str	r2, [sp, #8]
 8007572:	2200      	movs	r2, #0
 8007574:	9201      	str	r2, [sp, #4]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	4603      	mov	r3, r0
 800757a:	2200      	movs	r2, #0
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 f851 	bl	8008624 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007582:	e175      	b.n	8007870 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	2b03      	cmp	r3, #3
 8007588:	f040 8172 	bne.w	8007870 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007592:	3301      	adds	r3, #1
 8007594:	b2da      	uxtb	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d903      	bls.n	80075ae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	220d      	movs	r2, #13
 80075aa:	701a      	strb	r2, [r3, #0]
      break;
 80075ac:	e160      	b.n	8007870 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	795b      	ldrb	r3, [r3, #5]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 f885 	bl	80086c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	791b      	ldrb	r3, [r3, #4]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 f87f 	bl	80086c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
      break;
 80075cc:	e150      	b.n	8007870 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80075ce:	2112      	movs	r1, #18
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f9f1 	bl	80079b8 <USBH_Get_DevDesc>
 80075d6:	4603      	mov	r3, r0
 80075d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d103      	bne.n	80075e8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075e6:	e145      	b.n	8007874 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	f040 8142 	bne.w	8007874 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075f6:	3301      	adds	r3, #1
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007606:	2b03      	cmp	r3, #3
 8007608:	d903      	bls.n	8007612 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	220d      	movs	r2, #13
 800760e:	701a      	strb	r2, [r3, #0]
      break;
 8007610:	e130      	b.n	8007874 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	795b      	ldrb	r3, [r3, #5]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 f853 	bl	80086c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	791b      	ldrb	r3, [r3, #4]
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 f84d 	bl	80086c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	701a      	strb	r2, [r3, #0]
      break;
 8007636:	e11d      	b.n	8007874 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007638:	2101      	movs	r1, #1
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fa68 	bl	8007b10 <USBH_SetAddress>
 8007640:	4603      	mov	r3, r0
 8007642:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d132      	bne.n	80076b0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800764a:	2002      	movs	r0, #2
 800764c:	f001 fb30 	bl	8008cb0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2203      	movs	r2, #3
 800765c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	7919      	ldrb	r1, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007672:	b292      	uxth	r2, r2
 8007674:	9202      	str	r2, [sp, #8]
 8007676:	2200      	movs	r2, #0
 8007678:	9201      	str	r2, [sp, #4]
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	4603      	mov	r3, r0
 800767e:	2280      	movs	r2, #128	; 0x80
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 ffcf 	bl	8008624 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7959      	ldrb	r1, [r3, #5]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800769a:	b292      	uxth	r2, r2
 800769c:	9202      	str	r2, [sp, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	9201      	str	r2, [sp, #4]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4603      	mov	r3, r0
 80076a6:	2200      	movs	r2, #0
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 ffbb 	bl	8008624 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076ae:	e0e3      	b.n	8007878 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	f040 80e0 	bne.w	8007878 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	220d      	movs	r2, #13
 80076bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	705a      	strb	r2, [r3, #1]
      break;
 80076c4:	e0d8      	b.n	8007878 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80076c6:	2109      	movs	r1, #9
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f99d 	bl	8007a08 <USBH_Get_CfgDesc>
 80076ce:	4603      	mov	r3, r0
 80076d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d103      	bne.n	80076e0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2204      	movs	r2, #4
 80076dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076de:	e0cd      	b.n	800787c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	f040 80ca 	bne.w	800787c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ee:	3301      	adds	r3, #1
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d903      	bls.n	800770a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	220d      	movs	r2, #13
 8007706:	701a      	strb	r2, [r3, #0]
      break;
 8007708:	e0b8      	b.n	800787c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	795b      	ldrb	r3, [r3, #5]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 ffd7 	bl	80086c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	791b      	ldrb	r3, [r3, #4]
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 ffd1 	bl	80086c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	701a      	strb	r2, [r3, #0]
      break;
 800772e:	e0a5      	b.n	800787c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f965 	bl	8007a08 <USBH_Get_CfgDesc>
 800773e:	4603      	mov	r3, r0
 8007740:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d103      	bne.n	8007750 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2205      	movs	r2, #5
 800774c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800774e:	e097      	b.n	8007880 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b03      	cmp	r3, #3
 8007754:	f040 8094 	bne.w	8007880 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800775e:	3301      	adds	r3, #1
 8007760:	b2da      	uxtb	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800776e:	2b03      	cmp	r3, #3
 8007770:	d903      	bls.n	800777a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	220d      	movs	r2, #13
 8007776:	701a      	strb	r2, [r3, #0]
      break;
 8007778:	e082      	b.n	8007880 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	795b      	ldrb	r3, [r3, #5]
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 ff9f 	bl	80086c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	791b      	ldrb	r3, [r3, #4]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 ff99 	bl	80086c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	701a      	strb	r2, [r3, #0]
      break;
 800779e:	e06f      	b.n	8007880 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d019      	beq.n	80077de <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077b6:	23ff      	movs	r3, #255	; 0xff
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f949 	bl	8007a50 <USBH_Get_StringDesc>
 80077be:	4603      	mov	r3, r0
 80077c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d103      	bne.n	80077d0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2206      	movs	r2, #6
 80077cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077ce:	e059      	b.n	8007884 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d156      	bne.n	8007884 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2206      	movs	r2, #6
 80077da:	705a      	strb	r2, [r3, #1]
      break;
 80077dc:	e052      	b.n	8007884 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2206      	movs	r2, #6
 80077e2:	705a      	strb	r2, [r3, #1]
      break;
 80077e4:	e04e      	b.n	8007884 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d019      	beq.n	8007824 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077fc:	23ff      	movs	r3, #255	; 0xff
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f926 	bl	8007a50 <USBH_Get_StringDesc>
 8007804:	4603      	mov	r3, r0
 8007806:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d103      	bne.n	8007816 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2207      	movs	r2, #7
 8007812:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007814:	e038      	b.n	8007888 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	2b03      	cmp	r3, #3
 800781a:	d135      	bne.n	8007888 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2207      	movs	r2, #7
 8007820:	705a      	strb	r2, [r3, #1]
      break;
 8007822:	e031      	b.n	8007888 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2207      	movs	r2, #7
 8007828:	705a      	strb	r2, [r3, #1]
      break;
 800782a:	e02d      	b.n	8007888 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007832:	2b00      	cmp	r3, #0
 8007834:	d017      	beq.n	8007866 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007842:	23ff      	movs	r3, #255	; 0xff
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f903 	bl	8007a50 <USBH_Get_StringDesc>
 800784a:	4603      	mov	r3, r0
 800784c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d102      	bne.n	800785a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007858:	e018      	b.n	800788c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	2b03      	cmp	r3, #3
 800785e:	d115      	bne.n	800788c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
      break;
 8007864:	e012      	b.n	800788c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]
      break;
 800786a:	e00f      	b.n	800788c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800786c:	bf00      	nop
 800786e:	e00e      	b.n	800788e <USBH_HandleEnum+0x3be>
      break;
 8007870:	bf00      	nop
 8007872:	e00c      	b.n	800788e <USBH_HandleEnum+0x3be>
      break;
 8007874:	bf00      	nop
 8007876:	e00a      	b.n	800788e <USBH_HandleEnum+0x3be>
      break;
 8007878:	bf00      	nop
 800787a:	e008      	b.n	800788e <USBH_HandleEnum+0x3be>
      break;
 800787c:	bf00      	nop
 800787e:	e006      	b.n	800788e <USBH_HandleEnum+0x3be>
      break;
 8007880:	bf00      	nop
 8007882:	e004      	b.n	800788e <USBH_HandleEnum+0x3be>
      break;
 8007884:	bf00      	nop
 8007886:	e002      	b.n	800788e <USBH_HandleEnum+0x3be>
      break;
 8007888:	bf00      	nop
 800788a:	e000      	b.n	800788e <USBH_HandleEnum+0x3be>
      break;
 800788c:	bf00      	nop
  }
  return Status;
 800788e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f804 	bl	80078da <USBH_HandleSof>
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b0b      	cmp	r3, #11
 80078ea:	d10a      	bne.n	8007902 <USBH_HandleSof+0x28>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
  }
}
 8007902:	bf00      	nop
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800791a:	bf00      	nop
}
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007936:	bf00      	nop
}
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f001 f844 	bl	8008a1e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	791b      	ldrb	r3, [r3, #4]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fe91 	bl	80086c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	795b      	ldrb	r3, [r3, #5]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fe8b 	bl	80086c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af02      	add	r7, sp, #8
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	4613      	mov	r3, r2
 80079d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079d6:	2100      	movs	r1, #0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f864 	bl	8007aa6 <USBH_GetDescriptor>
 80079de:	4603      	mov	r3, r0
 80079e0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f203 3026 	addw	r0, r3, #806	; 0x326
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079f4:	78fa      	ldrb	r2, [r7, #3]
 80079f6:	b292      	uxth	r2, r2
 80079f8:	4619      	mov	r1, r3
 80079fa:	f000 f918 	bl	8007c2e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	331c      	adds	r3, #28
 8007a18:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007a1a:	887b      	ldrh	r3, [r7, #2]
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a24:	2100      	movs	r1, #0
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f83d 	bl	8007aa6 <USBH_GetDescriptor>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d107      	bne.n	8007a46 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a36:	887b      	ldrh	r3, [r7, #2]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	68b9      	ldr	r1, [r7, #8]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f987 	bl	8007d50 <USBH_ParseCfgDesc>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	607a      	str	r2, [r7, #4]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	72fb      	strb	r3, [r7, #11]
 8007a60:	4613      	mov	r3, r2
 8007a62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007a64:	7afb      	ldrb	r3, [r7, #11]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a6c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a74:	893b      	ldrh	r3, [r7, #8]
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 f812 	bl	8007aa6 <USBH_GetDescriptor>
 8007a82:	4603      	mov	r3, r0
 8007a84:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d107      	bne.n	8007a9c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a92:	893a      	ldrh	r2, [r7, #8]
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fb24 	bl	80080e4 <USBH_ParseStringDesc>
  }

  return status;
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	607b      	str	r3, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	72fb      	strb	r3, [r7, #11]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	789b      	ldrb	r3, [r3, #2]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d11c      	bne.n	8007afa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ac0:	7afb      	ldrb	r3, [r7, #11]
 8007ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2206      	movs	r2, #6
 8007ad0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	893a      	ldrh	r2, [r7, #8]
 8007ad6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ad8:	893b      	ldrh	r3, [r7, #8]
 8007ada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ae2:	d104      	bne.n	8007aee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f240 4209 	movw	r2, #1033	; 0x409
 8007aea:	829a      	strh	r2, [r3, #20]
 8007aec:	e002      	b.n	8007af4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8b3a      	ldrh	r2, [r7, #24]
 8007af8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007afa:	8b3b      	ldrh	r3, [r7, #24]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 fb3d 	bl	8008180 <USBH_CtlReq>
 8007b06:	4603      	mov	r3, r0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	789b      	ldrb	r3, [r3, #2]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d10f      	bne.n	8007b44 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2205      	movs	r2, #5
 8007b2e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b44:	2200      	movs	r2, #0
 8007b46:	2100      	movs	r1, #0
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fb19 	bl	8008180 <USBH_CtlReq>
 8007b4e:	4603      	mov	r3, r0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	789b      	ldrb	r3, [r3, #2]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d10e      	bne.n	8007b8a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2209      	movs	r2, #9
 8007b76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	887a      	ldrh	r2, [r7, #2]
 8007b7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 faf6 	bl	8008180 <USBH_CtlReq>
 8007b94:	4603      	mov	r3, r0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	789b      	ldrb	r3, [r3, #2]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d10f      	bne.n	8007bd2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2203      	movs	r2, #3
 8007bbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fad2 	bl	8008180 <USBH_CtlReq>
 8007bdc:	4603      	mov	r3, r0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	789b      	ldrb	r3, [r3, #2]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d10f      	bne.n	8007c1a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 faae 	bl	8008180 <USBH_CtlReq>
 8007c24:	4603      	mov	r3, r0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	781a      	ldrb	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	785a      	ldrb	r2, [r3, #1]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	3302      	adds	r3, #2
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	3303      	adds	r3, #3
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	4313      	orrs	r3, r2
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	791a      	ldrb	r2, [r3, #4]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	795a      	ldrb	r2, [r3, #5]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	799a      	ldrb	r2, [r3, #6]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	79da      	ldrb	r2, [r3, #7]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	79db      	ldrb	r3, [r3, #7]
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	dc11      	bgt.n	8007cb4 <USBH_ParseDevDesc+0x86>
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	db16      	blt.n	8007cc2 <USBH_ParseDevDesc+0x94>
 8007c94:	3b08      	subs	r3, #8
 8007c96:	2201      	movs	r2, #1
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bf14      	ite	ne
 8007ca8:	2301      	movne	r3, #1
 8007caa:	2300      	moveq	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d102      	bne.n	8007cb8 <USBH_ParseDevDesc+0x8a>
 8007cb2:	e006      	b.n	8007cc2 <USBH_ParseDevDesc+0x94>
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d104      	bne.n	8007cc2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	79da      	ldrb	r2, [r3, #7]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	71da      	strb	r2, [r3, #7]
      break;
 8007cc0:	e003      	b.n	8007cca <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2240      	movs	r2, #64	; 0x40
 8007cc6:	71da      	strb	r2, [r3, #7]
      break;
 8007cc8:	bf00      	nop
  }

  if (length > 8U)
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d939      	bls.n	8007d44 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	3309      	adds	r3, #9
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	330a      	adds	r3, #10
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	330b      	adds	r3, #11
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	021b      	lsls	r3, r3, #8
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	4313      	orrs	r3, r2
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	330d      	adds	r3, #13
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	7b9a      	ldrb	r2, [r3, #14]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	7bda      	ldrb	r2, [r3, #15]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	7c1a      	ldrb	r2, [r3, #16]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	7c5a      	ldrb	r2, [r3, #17]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	745a      	strb	r2, [r3, #17]
  }
}
 8007d44:	bf00      	nop
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08c      	sub	sp, #48	; 0x30
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d64:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	781a      	ldrb	r2, [r3, #0]
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	785a      	ldrb	r2, [r3, #1]
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	3302      	adds	r3, #2
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	3303      	adds	r3, #3
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	021b      	lsls	r3, r3, #8
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dac:	bf28      	it	cs
 8007dae:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	791a      	ldrb	r2, [r3, #4]
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	795a      	ldrb	r2, [r3, #5]
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	799a      	ldrb	r2, [r3, #6]
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	79da      	ldrb	r2, [r3, #7]
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	7a1a      	ldrb	r2, [r3, #8]
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b09      	cmp	r3, #9
 8007de6:	d002      	beq.n	8007dee <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	2209      	movs	r2, #9
 8007dec:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007dee:	88fb      	ldrh	r3, [r7, #6]
 8007df0:	2b09      	cmp	r3, #9
 8007df2:	f240 809d 	bls.w	8007f30 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007df6:	2309      	movs	r3, #9
 8007df8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007dfe:	e081      	b.n	8007f04 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e00:	f107 0316 	add.w	r3, r7, #22
 8007e04:	4619      	mov	r1, r3
 8007e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e08:	f000 f99f 	bl	800814a <USBH_GetNextDesc>
 8007e0c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d176      	bne.n	8007f04 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	2b09      	cmp	r3, #9
 8007e1c:	d002      	beq.n	8007e24 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	2209      	movs	r2, #9
 8007e22:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e28:	221a      	movs	r2, #26
 8007e2a:	fb02 f303 	mul.w	r3, r2, r3
 8007e2e:	3308      	adds	r3, #8
 8007e30:	6a3a      	ldr	r2, [r7, #32]
 8007e32:	4413      	add	r3, r2
 8007e34:	3302      	adds	r3, #2
 8007e36:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e3a:	69f8      	ldr	r0, [r7, #28]
 8007e3c:	f000 f87e 	bl	8007f3c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e4a:	e043      	b.n	8007ed4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e4c:	f107 0316 	add.w	r3, r7, #22
 8007e50:	4619      	mov	r1, r3
 8007e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e54:	f000 f979 	bl	800814a <USBH_GetNextDesc>
 8007e58:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	2b05      	cmp	r3, #5
 8007e60:	d138      	bne.n	8007ed4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	795b      	ldrb	r3, [r3, #5]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d10f      	bne.n	8007e8a <USBH_ParseCfgDesc+0x13a>
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	799b      	ldrb	r3, [r3, #6]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d10b      	bne.n	8007e8a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	79db      	ldrb	r3, [r3, #7]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10f      	bne.n	8007e9a <USBH_ParseCfgDesc+0x14a>
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b09      	cmp	r3, #9
 8007e80:	d00b      	beq.n	8007e9a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	2209      	movs	r2, #9
 8007e86:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e88:	e007      	b.n	8007e9a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b07      	cmp	r3, #7
 8007e90:	d004      	beq.n	8007e9c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	2207      	movs	r2, #7
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	e000      	b.n	8007e9c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e9a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ea0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ea4:	3201      	adds	r2, #1
 8007ea6:	00d2      	lsls	r2, r2, #3
 8007ea8:	211a      	movs	r1, #26
 8007eaa:	fb01 f303 	mul.w	r3, r1, r3
 8007eae:	4413      	add	r3, r2
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	6a3a      	ldr	r2, [r7, #32]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ebc:	69b9      	ldr	r1, [r7, #24]
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 f86b 	bl	8007f9a <USBH_ParseEPDesc>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	791b      	ldrb	r3, [r3, #4]
 8007ed8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d204      	bcs.n	8007eea <USBH_ParseCfgDesc+0x19a>
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	885a      	ldrh	r2, [r3, #2]
 8007ee4:	8afb      	ldrh	r3, [r7, #22]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d8b0      	bhi.n	8007e4c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	791b      	ldrb	r3, [r3, #4]
 8007eee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d201      	bcs.n	8007efa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e01c      	b.n	8007f34 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007efe:	3301      	adds	r3, #1
 8007f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d805      	bhi.n	8007f18 <USBH_ParseCfgDesc+0x1c8>
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	885a      	ldrh	r2, [r3, #2]
 8007f10:	8afb      	ldrh	r3, [r7, #22]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	f63f af74 	bhi.w	8007e00 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	791b      	ldrb	r3, [r3, #4]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	bf28      	it	cs
 8007f20:	2302      	movcs	r3, #2
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d201      	bcs.n	8007f30 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e001      	b.n	8007f34 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007f30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3730      	adds	r7, #48	; 0x30
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781a      	ldrb	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	785a      	ldrb	r2, [r3, #1]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	789a      	ldrb	r2, [r3, #2]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	78da      	ldrb	r2, [r3, #3]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	791a      	ldrb	r2, [r3, #4]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	795a      	ldrb	r2, [r3, #5]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	799a      	ldrb	r2, [r3, #6]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	79da      	ldrb	r2, [r3, #7]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	7a1a      	ldrb	r2, [r3, #8]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	721a      	strb	r2, [r3, #8]
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b087      	sub	sp, #28
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	781a      	ldrb	r2, [r3, #0]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	785a      	ldrb	r2, [r3, #1]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	789a      	ldrb	r2, [r3, #2]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	78da      	ldrb	r2, [r3, #3]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3305      	adds	r3, #5
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	021b      	lsls	r3, r3, #8
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	799a      	ldrb	r2, [r3, #6]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	889b      	ldrh	r3, [r3, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d102      	bne.n	8007ffc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	75fb      	strb	r3, [r7, #23]
 8007ffa:	e033      	b.n	8008064 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	889b      	ldrh	r3, [r3, #4]
 8008000:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008004:	f023 0307 	bic.w	r3, r3, #7
 8008008:	b29a      	uxth	r2, r3
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	889b      	ldrh	r3, [r3, #4]
 8008012:	b21a      	sxth	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3304      	adds	r3, #4
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	b299      	uxth	r1, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3305      	adds	r3, #5
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	021b      	lsls	r3, r3, #8
 8008026:	b29b      	uxth	r3, r3
 8008028:	430b      	orrs	r3, r1
 800802a:	b29b      	uxth	r3, r3
 800802c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008030:	2b00      	cmp	r3, #0
 8008032:	d110      	bne.n	8008056 <USBH_ParseEPDesc+0xbc>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3304      	adds	r3, #4
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	b299      	uxth	r1, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3305      	adds	r3, #5
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	021b      	lsls	r3, r3, #8
 8008046:	b29b      	uxth	r3, r3
 8008048:	430b      	orrs	r3, r1
 800804a:	b29b      	uxth	r3, r3
 800804c:	b21b      	sxth	r3, r3
 800804e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008052:	b21b      	sxth	r3, r3
 8008054:	e001      	b.n	800805a <USBH_ParseEPDesc+0xc0>
 8008056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800805a:	4313      	orrs	r3, r2
 800805c:	b21b      	sxth	r3, r3
 800805e:	b29a      	uxth	r2, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800806a:	2b00      	cmp	r3, #0
 800806c:	d116      	bne.n	800809c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	78db      	ldrb	r3, [r3, #3]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b01      	cmp	r3, #1
 8008078:	d005      	beq.n	8008086 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	78db      	ldrb	r3, [r3, #3]
 800807e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008082:	2b03      	cmp	r3, #3
 8008084:	d127      	bne.n	80080d6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	799b      	ldrb	r3, [r3, #6]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <USBH_ParseEPDesc+0xfc>
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	799b      	ldrb	r3, [r3, #6]
 8008092:	2b10      	cmp	r3, #16
 8008094:	d91f      	bls.n	80080d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008096:	2303      	movs	r3, #3
 8008098:	75fb      	strb	r3, [r7, #23]
 800809a:	e01c      	b.n	80080d6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	78db      	ldrb	r3, [r3, #3]
 80080a0:	f003 0303 	and.w	r3, r3, #3
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d10a      	bne.n	80080be <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	799b      	ldrb	r3, [r3, #6]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <USBH_ParseEPDesc+0x11e>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	799b      	ldrb	r3, [r3, #6]
 80080b4:	2b10      	cmp	r3, #16
 80080b6:	d90e      	bls.n	80080d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080b8:	2303      	movs	r3, #3
 80080ba:	75fb      	strb	r3, [r7, #23]
 80080bc:	e00b      	b.n	80080d6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	78db      	ldrb	r3, [r3, #3]
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d105      	bne.n	80080d6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	799b      	ldrb	r3, [r3, #6]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080d2:	2303      	movs	r3, #3
 80080d4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	371c      	adds	r7, #28
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d120      	bne.n	800813e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	1e9a      	subs	r2, r3, #2
 8008102:	88fb      	ldrh	r3, [r7, #6]
 8008104:	4293      	cmp	r3, r2
 8008106:	bf28      	it	cs
 8008108:	4613      	movcs	r3, r2
 800810a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3302      	adds	r3, #2
 8008110:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008112:	2300      	movs	r3, #0
 8008114:	82fb      	strh	r3, [r7, #22]
 8008116:	e00b      	b.n	8008130 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008118:	8afb      	ldrh	r3, [r7, #22]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4413      	add	r3, r2
 800811e:	781a      	ldrb	r2, [r3, #0]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	3301      	adds	r3, #1
 8008128:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800812a:	8afb      	ldrh	r3, [r7, #22]
 800812c:	3302      	adds	r3, #2
 800812e:	82fb      	strh	r3, [r7, #22]
 8008130:	8afa      	ldrh	r2, [r7, #22]
 8008132:	8abb      	ldrh	r3, [r7, #20]
 8008134:	429a      	cmp	r2, r3
 8008136:	d3ef      	bcc.n	8008118 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2200      	movs	r2, #0
 800813c:	701a      	strb	r2, [r3, #0]
  }
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	881a      	ldrh	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	4413      	add	r3, r2
 8008160:	b29a      	uxth	r2, r3
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4413      	add	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008172:	68fb      	ldr	r3, [r7, #12]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	4613      	mov	r3, r2
 800818c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800818e:	2301      	movs	r3, #1
 8008190:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	789b      	ldrb	r3, [r3, #2]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d002      	beq.n	80081a0 <USBH_CtlReq+0x20>
 800819a:	2b02      	cmp	r3, #2
 800819c:	d00f      	beq.n	80081be <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800819e:	e027      	b.n	80081f0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	88fa      	ldrh	r2, [r7, #6]
 80081aa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2201      	movs	r2, #1
 80081b0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2202      	movs	r2, #2
 80081b6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081b8:	2301      	movs	r3, #1
 80081ba:	75fb      	strb	r3, [r7, #23]
      break;
 80081bc:	e018      	b.n	80081f0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f81c 	bl	80081fc <USBH_HandleControl>
 80081c4:	4603      	mov	r3, r0
 80081c6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <USBH_CtlReq+0x54>
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d106      	bne.n	80081e2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	761a      	strb	r2, [r3, #24]
      break;
 80081e0:	e005      	b.n	80081ee <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d102      	bne.n	80081ee <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	709a      	strb	r2, [r3, #2]
      break;
 80081ee:	bf00      	nop
  }
  return status;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af02      	add	r7, sp, #8
 8008202:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008204:	2301      	movs	r3, #1
 8008206:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008208:	2300      	movs	r3, #0
 800820a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	7e1b      	ldrb	r3, [r3, #24]
 8008210:	3b01      	subs	r3, #1
 8008212:	2b0a      	cmp	r3, #10
 8008214:	f200 8156 	bhi.w	80084c4 <USBH_HandleControl+0x2c8>
 8008218:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <USBH_HandleControl+0x24>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	0800824d 	.word	0x0800824d
 8008224:	08008267 	.word	0x08008267
 8008228:	080082d1 	.word	0x080082d1
 800822c:	080082f7 	.word	0x080082f7
 8008230:	0800832f 	.word	0x0800832f
 8008234:	08008359 	.word	0x08008359
 8008238:	080083ab 	.word	0x080083ab
 800823c:	080083cd 	.word	0x080083cd
 8008240:	08008409 	.word	0x08008409
 8008244:	0800842f 	.word	0x0800842f
 8008248:	0800846d 	.word	0x0800846d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f103 0110 	add.w	r1, r3, #16
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	795b      	ldrb	r3, [r3, #5]
 8008256:	461a      	mov	r2, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f943 	bl	80084e4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2202      	movs	r2, #2
 8008262:	761a      	strb	r2, [r3, #24]
      break;
 8008264:	e139      	b.n	80084da <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	795b      	ldrb	r3, [r3, #5]
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fcc5 	bl	8008bfc <USBH_LL_GetURBState>
 8008272:	4603      	mov	r3, r0
 8008274:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d11e      	bne.n	80082ba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7c1b      	ldrb	r3, [r3, #16]
 8008280:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008284:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	8adb      	ldrh	r3, [r3, #22]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800828e:	7b7b      	ldrb	r3, [r7, #13]
 8008290:	2b80      	cmp	r3, #128	; 0x80
 8008292:	d103      	bne.n	800829c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2203      	movs	r2, #3
 8008298:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800829a:	e115      	b.n	80084c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2205      	movs	r2, #5
 80082a0:	761a      	strb	r2, [r3, #24]
      break;
 80082a2:	e111      	b.n	80084c8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80082a4:	7b7b      	ldrb	r3, [r7, #13]
 80082a6:	2b80      	cmp	r3, #128	; 0x80
 80082a8:	d103      	bne.n	80082b2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2209      	movs	r2, #9
 80082ae:	761a      	strb	r2, [r3, #24]
      break;
 80082b0:	e10a      	b.n	80084c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2207      	movs	r2, #7
 80082b6:	761a      	strb	r2, [r3, #24]
      break;
 80082b8:	e106      	b.n	80084c8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d003      	beq.n	80082c8 <USBH_HandleControl+0xcc>
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	f040 8100 	bne.w	80084c8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	220b      	movs	r2, #11
 80082cc:	761a      	strb	r2, [r3, #24]
      break;
 80082ce:	e0fb      	b.n	80084c8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6899      	ldr	r1, [r3, #8]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	899a      	ldrh	r2, [r3, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	791b      	ldrb	r3, [r3, #4]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f93a 	bl	8008562 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2204      	movs	r2, #4
 80082f2:	761a      	strb	r2, [r3, #24]
      break;
 80082f4:	e0f1      	b.n	80084da <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	791b      	ldrb	r3, [r3, #4]
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fc7d 	bl	8008bfc <USBH_LL_GetURBState>
 8008302:	4603      	mov	r3, r0
 8008304:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d102      	bne.n	8008312 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2209      	movs	r2, #9
 8008310:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	2b05      	cmp	r3, #5
 8008316:	d102      	bne.n	800831e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008318:	2303      	movs	r3, #3
 800831a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800831c:	e0d6      	b.n	80084cc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b04      	cmp	r3, #4
 8008322:	f040 80d3 	bne.w	80084cc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	220b      	movs	r2, #11
 800832a:	761a      	strb	r2, [r3, #24]
      break;
 800832c:	e0ce      	b.n	80084cc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6899      	ldr	r1, [r3, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	899a      	ldrh	r2, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	795b      	ldrb	r3, [r3, #5]
 800833a:	2001      	movs	r0, #1
 800833c:	9000      	str	r0, [sp, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f8ea 	bl	8008518 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800834a:	b29a      	uxth	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2206      	movs	r2, #6
 8008354:	761a      	strb	r2, [r3, #24]
      break;
 8008356:	e0c0      	b.n	80084da <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	795b      	ldrb	r3, [r3, #5]
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fc4c 	bl	8008bfc <USBH_LL_GetURBState>
 8008364:	4603      	mov	r3, r0
 8008366:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d103      	bne.n	8008376 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2207      	movs	r2, #7
 8008372:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008374:	e0ac      	b.n	80084d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b05      	cmp	r3, #5
 800837a:	d105      	bne.n	8008388 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	220c      	movs	r2, #12
 8008380:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008382:	2303      	movs	r3, #3
 8008384:	73fb      	strb	r3, [r7, #15]
      break;
 8008386:	e0a3      	b.n	80084d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d103      	bne.n	8008396 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2205      	movs	r2, #5
 8008392:	761a      	strb	r2, [r3, #24]
      break;
 8008394:	e09c      	b.n	80084d0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	2b04      	cmp	r3, #4
 800839a:	f040 8099 	bne.w	80084d0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	220b      	movs	r2, #11
 80083a2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083a4:	2302      	movs	r3, #2
 80083a6:	73fb      	strb	r3, [r7, #15]
      break;
 80083a8:	e092      	b.n	80084d0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	791b      	ldrb	r3, [r3, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	2100      	movs	r1, #0
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8d5 	bl	8008562 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083be:	b29a      	uxth	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2208      	movs	r2, #8
 80083c8:	761a      	strb	r2, [r3, #24]

      break;
 80083ca:	e086      	b.n	80084da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	791b      	ldrb	r3, [r3, #4]
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fc12 	bl	8008bfc <USBH_LL_GetURBState>
 80083d8:	4603      	mov	r3, r0
 80083da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d105      	bne.n	80083ee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	220d      	movs	r2, #13
 80083e6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083ec:	e072      	b.n	80084d4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d103      	bne.n	80083fc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	220b      	movs	r2, #11
 80083f8:	761a      	strb	r2, [r3, #24]
      break;
 80083fa:	e06b      	b.n	80084d4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b05      	cmp	r3, #5
 8008400:	d168      	bne.n	80084d4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008402:	2303      	movs	r3, #3
 8008404:	73fb      	strb	r3, [r7, #15]
      break;
 8008406:	e065      	b.n	80084d4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	795b      	ldrb	r3, [r3, #5]
 800840c:	2201      	movs	r2, #1
 800840e:	9200      	str	r2, [sp, #0]
 8008410:	2200      	movs	r2, #0
 8008412:	2100      	movs	r1, #0
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f87f 	bl	8008518 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008420:	b29a      	uxth	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	220a      	movs	r2, #10
 800842a:	761a      	strb	r2, [r3, #24]
      break;
 800842c:	e055      	b.n	80084da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	795b      	ldrb	r3, [r3, #5]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fbe1 	bl	8008bfc <USBH_LL_GetURBState>
 800843a:	4603      	mov	r3, r0
 800843c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d105      	bne.n	8008450 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	220d      	movs	r2, #13
 800844c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800844e:	e043      	b.n	80084d8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d103      	bne.n	800845e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2209      	movs	r2, #9
 800845a:	761a      	strb	r2, [r3, #24]
      break;
 800845c:	e03c      	b.n	80084d8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	2b04      	cmp	r3, #4
 8008462:	d139      	bne.n	80084d8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	220b      	movs	r2, #11
 8008468:	761a      	strb	r2, [r3, #24]
      break;
 800846a:	e035      	b.n	80084d8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	7e5b      	ldrb	r3, [r3, #25]
 8008470:	3301      	adds	r3, #1
 8008472:	b2da      	uxtb	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	765a      	strb	r2, [r3, #25]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	7e5b      	ldrb	r3, [r3, #25]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d806      	bhi.n	800848e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800848c:	e025      	b.n	80084da <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008494:	2106      	movs	r1, #6
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	795b      	ldrb	r3, [r3, #5]
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f90c 	bl	80086c4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	791b      	ldrb	r3, [r3, #4]
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f906 	bl	80086c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084be:	2302      	movs	r3, #2
 80084c0:	73fb      	strb	r3, [r7, #15]
      break;
 80084c2:	e00a      	b.n	80084da <USBH_HandleControl+0x2de>

    default:
      break;
 80084c4:	bf00      	nop
 80084c6:	e008      	b.n	80084da <USBH_HandleControl+0x2de>
      break;
 80084c8:	bf00      	nop
 80084ca:	e006      	b.n	80084da <USBH_HandleControl+0x2de>
      break;
 80084cc:	bf00      	nop
 80084ce:	e004      	b.n	80084da <USBH_HandleControl+0x2de>
      break;
 80084d0:	bf00      	nop
 80084d2:	e002      	b.n	80084da <USBH_HandleControl+0x2de>
      break;
 80084d4:	bf00      	nop
 80084d6:	e000      	b.n	80084da <USBH_HandleControl+0x2de>
      break;
 80084d8:	bf00      	nop
  }

  return status;
 80084da:	7bfb      	ldrb	r3, [r7, #15]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af04      	add	r7, sp, #16
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084f2:	79f9      	ldrb	r1, [r7, #7]
 80084f4:	2300      	movs	r3, #0
 80084f6:	9303      	str	r3, [sp, #12]
 80084f8:	2308      	movs	r3, #8
 80084fa:	9302      	str	r3, [sp, #8]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	2300      	movs	r3, #0
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	2300      	movs	r3, #0
 8008506:	2200      	movs	r2, #0
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 fb46 	bl	8008b9a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af04      	add	r7, sp, #16
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	4611      	mov	r1, r2
 8008524:	461a      	mov	r2, r3
 8008526:	460b      	mov	r3, r1
 8008528:	80fb      	strh	r3, [r7, #6]
 800852a:	4613      	mov	r3, r2
 800852c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800853c:	7979      	ldrb	r1, [r7, #5]
 800853e:	7e3b      	ldrb	r3, [r7, #24]
 8008540:	9303      	str	r3, [sp, #12]
 8008542:	88fb      	ldrh	r3, [r7, #6]
 8008544:	9302      	str	r3, [sp, #8]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	2301      	movs	r3, #1
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	2300      	movs	r3, #0
 8008550:	2200      	movs	r2, #0
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 fb21 	bl	8008b9a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b088      	sub	sp, #32
 8008566:	af04      	add	r7, sp, #16
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	4611      	mov	r1, r2
 800856e:	461a      	mov	r2, r3
 8008570:	460b      	mov	r3, r1
 8008572:	80fb      	strh	r3, [r7, #6]
 8008574:	4613      	mov	r3, r2
 8008576:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008578:	7979      	ldrb	r1, [r7, #5]
 800857a:	2300      	movs	r3, #0
 800857c:	9303      	str	r3, [sp, #12]
 800857e:	88fb      	ldrh	r3, [r7, #6]
 8008580:	9302      	str	r3, [sp, #8]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	2301      	movs	r3, #1
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	2300      	movs	r3, #0
 800858c:	2201      	movs	r2, #1
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 fb03 	bl	8008b9a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008594:	2300      	movs	r3, #0

}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b088      	sub	sp, #32
 80085a2:	af04      	add	r7, sp, #16
 80085a4:	60f8      	str	r0, [r7, #12]
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	4611      	mov	r1, r2
 80085aa:	461a      	mov	r2, r3
 80085ac:	460b      	mov	r3, r1
 80085ae:	80fb      	strh	r3, [r7, #6]
 80085b0:	4613      	mov	r3, r2
 80085b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085c2:	7979      	ldrb	r1, [r7, #5]
 80085c4:	7e3b      	ldrb	r3, [r7, #24]
 80085c6:	9303      	str	r3, [sp, #12]
 80085c8:	88fb      	ldrh	r3, [r7, #6]
 80085ca:	9302      	str	r3, [sp, #8]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	2301      	movs	r3, #1
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	2302      	movs	r3, #2
 80085d6:	2200      	movs	r2, #0
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 fade 	bl	8008b9a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af04      	add	r7, sp, #16
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	4611      	mov	r1, r2
 80085f4:	461a      	mov	r2, r3
 80085f6:	460b      	mov	r3, r1
 80085f8:	80fb      	strh	r3, [r7, #6]
 80085fa:	4613      	mov	r3, r2
 80085fc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085fe:	7979      	ldrb	r1, [r7, #5]
 8008600:	2300      	movs	r3, #0
 8008602:	9303      	str	r3, [sp, #12]
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	9302      	str	r3, [sp, #8]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	2301      	movs	r3, #1
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	2302      	movs	r3, #2
 8008612:	2201      	movs	r2, #1
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fac0 	bl	8008b9a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af04      	add	r7, sp, #16
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	4608      	mov	r0, r1
 800862e:	4611      	mov	r1, r2
 8008630:	461a      	mov	r2, r3
 8008632:	4603      	mov	r3, r0
 8008634:	70fb      	strb	r3, [r7, #3]
 8008636:	460b      	mov	r3, r1
 8008638:	70bb      	strb	r3, [r7, #2]
 800863a:	4613      	mov	r3, r2
 800863c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800863e:	7878      	ldrb	r0, [r7, #1]
 8008640:	78ba      	ldrb	r2, [r7, #2]
 8008642:	78f9      	ldrb	r1, [r7, #3]
 8008644:	8b3b      	ldrh	r3, [r7, #24]
 8008646:	9302      	str	r3, [sp, #8]
 8008648:	7d3b      	ldrb	r3, [r7, #20]
 800864a:	9301      	str	r3, [sp, #4]
 800864c:	7c3b      	ldrb	r3, [r7, #16]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	4603      	mov	r3, r0
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa53 	bl	8008afe <USBH_LL_OpenPipe>

  return USBH_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	460b      	mov	r3, r1
 800866c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800866e:	78fb      	ldrb	r3, [r7, #3]
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa72 	bl	8008b5c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f836 	bl	8008700 <USBH_GetFreePipe>
 8008694:	4603      	mov	r3, r0
 8008696:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008698:	89fb      	ldrh	r3, [r7, #14]
 800869a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800869e:	4293      	cmp	r3, r2
 80086a0:	d00a      	beq.n	80086b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	89fb      	ldrh	r3, [r7, #14]
 80086a6:	f003 030f 	and.w	r3, r3, #15
 80086aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	33e0      	adds	r3, #224	; 0xe0
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	440b      	add	r3, r1
 80086b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086b8:	89fb      	ldrh	r3, [r7, #14]
 80086ba:	b2db      	uxtb	r3, r3
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	2b0f      	cmp	r3, #15
 80086d4:	d80d      	bhi.n	80086f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086d6:	78fb      	ldrb	r3, [r7, #3]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	33e0      	adds	r3, #224	; 0xe0
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086e8:	6879      	ldr	r1, [r7, #4]
 80086ea:	33e0      	adds	r3, #224	; 0xe0
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	440b      	add	r3, r1
 80086f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]
 8008710:	e00f      	b.n	8008732 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	33e0      	adds	r3, #224	; 0xe0
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d102      	bne.n	800872c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	b29b      	uxth	r3, r3
 800872a:	e007      	b.n	800873c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	3301      	adds	r3, #1
 8008730:	73fb      	strb	r3, [r7, #15]
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	2b0f      	cmp	r3, #15
 8008736:	d9ec      	bls.n	8008712 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008738:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800874c:	2201      	movs	r2, #1
 800874e:	490e      	ldr	r1, [pc, #56]	; (8008788 <MX_USB_HOST_Init+0x40>)
 8008750:	480e      	ldr	r0, [pc, #56]	; (800878c <MX_USB_HOST_Init+0x44>)
 8008752:	f7fe fba7 	bl	8006ea4 <USBH_Init>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800875c:	f7f8 f9d4 	bl	8000b08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008760:	490b      	ldr	r1, [pc, #44]	; (8008790 <MX_USB_HOST_Init+0x48>)
 8008762:	480a      	ldr	r0, [pc, #40]	; (800878c <MX_USB_HOST_Init+0x44>)
 8008764:	f7fe fc2c 	bl	8006fc0 <USBH_RegisterClass>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800876e:	f7f8 f9cb 	bl	8000b08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008772:	4806      	ldr	r0, [pc, #24]	; (800878c <MX_USB_HOST_Init+0x44>)
 8008774:	f7fe fcb0 	bl	80070d8 <USBH_Start>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800877e:	f7f8 f9c3 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008782:	bf00      	nop
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	080087a9 	.word	0x080087a9
 800878c:	20000234 	.word	0x20000234
 8008790:	2000000c 	.word	0x2000000c

08008794 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008798:	4802      	ldr	r0, [pc, #8]	; (80087a4 <MX_USB_HOST_Process+0x10>)
 800879a:	f7fe fcad 	bl	80070f8 <USBH_Process>
}
 800879e:	bf00      	nop
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20000234 	.word	0x20000234

080087a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	d819      	bhi.n	80087f0 <USBH_UserProcess+0x48>
 80087bc:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <USBH_UserProcess+0x1c>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087f1 	.word	0x080087f1
 80087c8:	080087e1 	.word	0x080087e1
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	080087e9 	.word	0x080087e9
 80087d4:	080087d9 	.word	0x080087d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087d8:	4b09      	ldr	r3, [pc, #36]	; (8008800 <USBH_UserProcess+0x58>)
 80087da:	2203      	movs	r2, #3
 80087dc:	701a      	strb	r2, [r3, #0]
  break;
 80087de:	e008      	b.n	80087f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80087e0:	4b07      	ldr	r3, [pc, #28]	; (8008800 <USBH_UserProcess+0x58>)
 80087e2:	2202      	movs	r2, #2
 80087e4:	701a      	strb	r2, [r3, #0]
  break;
 80087e6:	e004      	b.n	80087f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80087e8:	4b05      	ldr	r3, [pc, #20]	; (8008800 <USBH_UserProcess+0x58>)
 80087ea:	2201      	movs	r2, #1
 80087ec:	701a      	strb	r2, [r3, #0]
  break;
 80087ee:	e000      	b.n	80087f2 <USBH_UserProcess+0x4a>

  default:
  break;
 80087f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	2000060c 	.word	0x2000060c

08008804 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08a      	sub	sp, #40	; 0x28
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800880c:	f107 0314 	add.w	r3, r7, #20
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	605a      	str	r2, [r3, #4]
 8008816:	609a      	str	r2, [r3, #8]
 8008818:	60da      	str	r2, [r3, #12]
 800881a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008824:	d147      	bne.n	80088b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008826:	2300      	movs	r3, #0
 8008828:	613b      	str	r3, [r7, #16]
 800882a:	4b25      	ldr	r3, [pc, #148]	; (80088c0 <HAL_HCD_MspInit+0xbc>)
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	4a24      	ldr	r2, [pc, #144]	; (80088c0 <HAL_HCD_MspInit+0xbc>)
 8008830:	f043 0301 	orr.w	r3, r3, #1
 8008834:	6313      	str	r3, [r2, #48]	; 0x30
 8008836:	4b22      	ldr	r3, [pc, #136]	; (80088c0 <HAL_HCD_MspInit+0xbc>)
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	613b      	str	r3, [r7, #16]
 8008840:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008848:	2300      	movs	r3, #0
 800884a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800884c:	2300      	movs	r3, #0
 800884e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008850:	f107 0314 	add.w	r3, r7, #20
 8008854:	4619      	mov	r1, r3
 8008856:	481b      	ldr	r0, [pc, #108]	; (80088c4 <HAL_HCD_MspInit+0xc0>)
 8008858:	f7f8 fdf6 	bl	8001448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800885c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008862:	2302      	movs	r3, #2
 8008864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008866:	2300      	movs	r3, #0
 8008868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800886a:	2300      	movs	r3, #0
 800886c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800886e:	230a      	movs	r3, #10
 8008870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008872:	f107 0314 	add.w	r3, r7, #20
 8008876:	4619      	mov	r1, r3
 8008878:	4812      	ldr	r0, [pc, #72]	; (80088c4 <HAL_HCD_MspInit+0xc0>)
 800887a:	f7f8 fde5 	bl	8001448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800887e:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <HAL_HCD_MspInit+0xbc>)
 8008880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008882:	4a0f      	ldr	r2, [pc, #60]	; (80088c0 <HAL_HCD_MspInit+0xbc>)
 8008884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008888:	6353      	str	r3, [r2, #52]	; 0x34
 800888a:	2300      	movs	r3, #0
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	4b0c      	ldr	r3, [pc, #48]	; (80088c0 <HAL_HCD_MspInit+0xbc>)
 8008890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008892:	4a0b      	ldr	r2, [pc, #44]	; (80088c0 <HAL_HCD_MspInit+0xbc>)
 8008894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008898:	6453      	str	r3, [r2, #68]	; 0x44
 800889a:	4b09      	ldr	r3, [pc, #36]	; (80088c0 <HAL_HCD_MspInit+0xbc>)
 800889c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088a6:	2200      	movs	r2, #0
 80088a8:	2100      	movs	r1, #0
 80088aa:	2043      	movs	r0, #67	; 0x43
 80088ac:	f7f8 fd95 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088b0:	2043      	movs	r0, #67	; 0x43
 80088b2:	f7f8 fdae 	bl	8001412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088b6:	bf00      	nop
 80088b8:	3728      	adds	r7, #40	; 0x28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	40023800 	.word	0x40023800
 80088c4:	40020000 	.word	0x40020000

080088c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe ffed 	bl	80078b6 <USBH_LL_IncTimer>
}
 80088dc:	bf00      	nop
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff f825 	bl	8007942 <USBH_LL_Connect>
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800890e:	4618      	mov	r0, r3
 8008910:	f7ff f82e 	bl	8007970 <USBH_LL_Disconnect>
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
 8008928:	4613      	mov	r3, r2
 800892a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe ffdf 	bl	800790a <USBH_LL_PortEnabled>
}
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe ffdf 	bl	8007926 <USBH_LL_PortDisabled>
}
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800897e:	2b01      	cmp	r3, #1
 8008980:	d12a      	bne.n	80089d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008982:	4a18      	ldr	r2, [pc, #96]	; (80089e4 <USBH_LL_Init+0x74>)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a15      	ldr	r2, [pc, #84]	; (80089e4 <USBH_LL_Init+0x74>)
 800898e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008992:	4b14      	ldr	r3, [pc, #80]	; (80089e4 <USBH_LL_Init+0x74>)
 8008994:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008998:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800899a:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <USBH_LL_Init+0x74>)
 800899c:	2208      	movs	r2, #8
 800899e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80089a0:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <USBH_LL_Init+0x74>)
 80089a2:	2201      	movs	r2, #1
 80089a4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089a6:	4b0f      	ldr	r3, [pc, #60]	; (80089e4 <USBH_LL_Init+0x74>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089ac:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <USBH_LL_Init+0x74>)
 80089ae:	2202      	movs	r2, #2
 80089b0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089b2:	4b0c      	ldr	r3, [pc, #48]	; (80089e4 <USBH_LL_Init+0x74>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089b8:	480a      	ldr	r0, [pc, #40]	; (80089e4 <USBH_LL_Init+0x74>)
 80089ba:	f7f8 fefa 	bl	80017b2 <HAL_HCD_Init>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089c4:	f7f8 f8a0 	bl	8000b08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089c8:	4806      	ldr	r0, [pc, #24]	; (80089e4 <USBH_LL_Init+0x74>)
 80089ca:	f7f9 fade 	bl	8001f8a <HAL_HCD_GetCurrentFrame>
 80089ce:	4603      	mov	r3, r0
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7fe ff60 	bl	8007898 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20000610 	.word	0x20000610

080089e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7f9 fa4d 	bl	8001e9e <HAL_HCD_Start>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 f95c 	bl	8008cc8 <USBH_Get_USB_Status>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7f9 fa55 	bl	8001ee4 <HAL_HCD_Stop>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 f941 	bl	8008cc8 <USBH_Get_USB_Status>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f9 fa9d 	bl	8001fa6 <HAL_HCD_GetCurrentSpeed>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d00c      	beq.n	8008a8c <USBH_LL_GetSpeed+0x38>
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d80d      	bhi.n	8008a92 <USBH_LL_GetSpeed+0x3e>
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <USBH_LL_GetSpeed+0x2c>
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d003      	beq.n	8008a86 <USBH_LL_GetSpeed+0x32>
 8008a7e:	e008      	b.n	8008a92 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a80:	2300      	movs	r3, #0
 8008a82:	73fb      	strb	r3, [r7, #15]
    break;
 8008a84:	e008      	b.n	8008a98 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a86:	2301      	movs	r3, #1
 8008a88:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8a:	e005      	b.n	8008a98 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a90:	e002      	b.n	8008a98 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a92:	2301      	movs	r3, #1
 8008a94:	73fb      	strb	r3, [r7, #15]
    break;
 8008a96:	bf00      	nop
  }
  return  speed;
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7f9 fa30 	bl	8001f1e <HAL_HCD_ResetPort>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 f8ff 	bl	8008cc8 <USBH_Get_USB_Status>
 8008aca:	4603      	mov	r3, r0
 8008acc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aea:	78fa      	ldrb	r2, [r7, #3]
 8008aec:	4611      	mov	r1, r2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7f9 fa37 	bl	8001f62 <HAL_HCD_HC_GetXferCount>
 8008af4:	4603      	mov	r3, r0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008afe:	b590      	push	{r4, r7, lr}
 8008b00:	b089      	sub	sp, #36	; 0x24
 8008b02:	af04      	add	r7, sp, #16
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	4608      	mov	r0, r1
 8008b08:	4611      	mov	r1, r2
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	70fb      	strb	r3, [r7, #3]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70bb      	strb	r3, [r7, #2]
 8008b14:	4613      	mov	r3, r2
 8008b16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b26:	787c      	ldrb	r4, [r7, #1]
 8008b28:	78ba      	ldrb	r2, [r7, #2]
 8008b2a:	78f9      	ldrb	r1, [r7, #3]
 8008b2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b2e:	9302      	str	r3, [sp, #8]
 8008b30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b34:	9301      	str	r3, [sp, #4]
 8008b36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	4623      	mov	r3, r4
 8008b3e:	f7f8 fe9a 	bl	8001876 <HAL_HCD_HC_Init>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 f8bd 	bl	8008cc8 <USBH_Get_USB_Status>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd90      	pop	{r4, r7, pc}

08008b5c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b76:	78fa      	ldrb	r2, [r7, #3]
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7f8 ff0a 	bl	8001994 <HAL_HCD_HC_Halt>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f89e 	bl	8008cc8 <USBH_Get_USB_Status>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b9a:	b590      	push	{r4, r7, lr}
 8008b9c:	b089      	sub	sp, #36	; 0x24
 8008b9e:	af04      	add	r7, sp, #16
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	4608      	mov	r0, r1
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	4603      	mov	r3, r0
 8008baa:	70fb      	strb	r3, [r7, #3]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70bb      	strb	r3, [r7, #2]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bc2:	787c      	ldrb	r4, [r7, #1]
 8008bc4:	78ba      	ldrb	r2, [r7, #2]
 8008bc6:	78f9      	ldrb	r1, [r7, #3]
 8008bc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bcc:	9303      	str	r3, [sp, #12]
 8008bce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bd0:	9302      	str	r3, [sp, #8]
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	9301      	str	r3, [sp, #4]
 8008bd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	4623      	mov	r3, r4
 8008bde:	f7f8 fefd 	bl	80019dc <HAL_HCD_HC_SubmitRequest>
 8008be2:	4603      	mov	r3, r0
 8008be4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 f86d 	bl	8008cc8 <USBH_Get_USB_Status>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd90      	pop	{r4, r7, pc}

08008bfc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c0e:	78fa      	ldrb	r2, [r7, #3]
 8008c10:	4611      	mov	r1, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7f9 f991 	bl	8001f3a <HAL_HCD_HC_GetURBState>
 8008c18:	4603      	mov	r3, r0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b082      	sub	sp, #8
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d103      	bne.n	8008c40 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c38:	78fb      	ldrb	r3, [r7, #3]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 f870 	bl	8008d20 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c40:	20c8      	movs	r0, #200	; 0xc8
 8008c42:	f7f8 facb 	bl	80011dc <HAL_Delay>
  return USBH_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c66:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	212c      	movs	r1, #44	; 0x2c
 8008c6e:	fb01 f303 	mul.w	r3, r1, r3
 8008c72:	4413      	add	r3, r2
 8008c74:	333b      	adds	r3, #59	; 0x3b
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d009      	beq.n	8008c90 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	212c      	movs	r1, #44	; 0x2c
 8008c82:	fb01 f303 	mul.w	r3, r1, r3
 8008c86:	4413      	add	r3, r2
 8008c88:	3354      	adds	r3, #84	; 0x54
 8008c8a:	78ba      	ldrb	r2, [r7, #2]
 8008c8c:	701a      	strb	r2, [r3, #0]
 8008c8e:	e008      	b.n	8008ca2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	212c      	movs	r1, #44	; 0x2c
 8008c96:	fb01 f303 	mul.w	r3, r1, r3
 8008c9a:	4413      	add	r3, r2
 8008c9c:	3355      	adds	r3, #85	; 0x55
 8008c9e:	78ba      	ldrb	r2, [r7, #2]
 8008ca0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7f8 fa8f 	bl	80011dc <HAL_Delay>
}
 8008cbe:	bf00      	nop
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
	...

08008cc8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d817      	bhi.n	8008d0c <USBH_Get_USB_Status+0x44>
 8008cdc:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <USBH_Get_USB_Status+0x1c>)
 8008cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce2:	bf00      	nop
 8008ce4:	08008cf5 	.word	0x08008cf5
 8008ce8:	08008cfb 	.word	0x08008cfb
 8008cec:	08008d01 	.word	0x08008d01
 8008cf0:	08008d07 	.word	0x08008d07
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf8:	e00b      	b.n	8008d12 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfe:	e008      	b.n	8008d12 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d00:	2301      	movs	r3, #1
 8008d02:	73fb      	strb	r3, [r7, #15]
    break;
 8008d04:	e005      	b.n	8008d12 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d06:	2302      	movs	r3, #2
 8008d08:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0a:	e002      	b.n	8008d12 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d10:	bf00      	nop
  }
  return usb_status;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4603      	mov	r3, r0
 8008d28:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d2a:	79fb      	ldrb	r3, [r7, #7]
 8008d2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d102      	bne.n	8008d3a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
 8008d38:	e001      	b.n	8008d3e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	461a      	mov	r2, r3
 8008d42:	2101      	movs	r1, #1
 8008d44:	4803      	ldr	r0, [pc, #12]	; (8008d54 <MX_DriverVbusFS+0x34>)
 8008d46:	f7f8 fd1b 	bl	8001780 <HAL_GPIO_WritePin>
}
 8008d4a:	bf00      	nop
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	40020800 	.word	0x40020800

08008d58 <__errno>:
 8008d58:	4b01      	ldr	r3, [pc, #4]	; (8008d60 <__errno+0x8>)
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	2000002c 	.word	0x2000002c

08008d64 <__libc_init_array>:
 8008d64:	b570      	push	{r4, r5, r6, lr}
 8008d66:	4d0d      	ldr	r5, [pc, #52]	; (8008d9c <__libc_init_array+0x38>)
 8008d68:	4c0d      	ldr	r4, [pc, #52]	; (8008da0 <__libc_init_array+0x3c>)
 8008d6a:	1b64      	subs	r4, r4, r5
 8008d6c:	10a4      	asrs	r4, r4, #2
 8008d6e:	2600      	movs	r6, #0
 8008d70:	42a6      	cmp	r6, r4
 8008d72:	d109      	bne.n	8008d88 <__libc_init_array+0x24>
 8008d74:	4d0b      	ldr	r5, [pc, #44]	; (8008da4 <__libc_init_array+0x40>)
 8008d76:	4c0c      	ldr	r4, [pc, #48]	; (8008da8 <__libc_init_array+0x44>)
 8008d78:	f000 ffbe 	bl	8009cf8 <_init>
 8008d7c:	1b64      	subs	r4, r4, r5
 8008d7e:	10a4      	asrs	r4, r4, #2
 8008d80:	2600      	movs	r6, #0
 8008d82:	42a6      	cmp	r6, r4
 8008d84:	d105      	bne.n	8008d92 <__libc_init_array+0x2e>
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d8c:	4798      	blx	r3
 8008d8e:	3601      	adds	r6, #1
 8008d90:	e7ee      	b.n	8008d70 <__libc_init_array+0xc>
 8008d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d96:	4798      	blx	r3
 8008d98:	3601      	adds	r6, #1
 8008d9a:	e7f2      	b.n	8008d82 <__libc_init_array+0x1e>
 8008d9c:	08009df8 	.word	0x08009df8
 8008da0:	08009df8 	.word	0x08009df8
 8008da4:	08009df8 	.word	0x08009df8
 8008da8:	08009dfc 	.word	0x08009dfc

08008dac <malloc>:
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <malloc+0xc>)
 8008dae:	4601      	mov	r1, r0
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	f000 b87f 	b.w	8008eb4 <_malloc_r>
 8008db6:	bf00      	nop
 8008db8:	2000002c 	.word	0x2000002c

08008dbc <free>:
 8008dbc:	4b02      	ldr	r3, [pc, #8]	; (8008dc8 <free+0xc>)
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	6818      	ldr	r0, [r3, #0]
 8008dc2:	f000 b80b 	b.w	8008ddc <_free_r>
 8008dc6:	bf00      	nop
 8008dc8:	2000002c 	.word	0x2000002c

08008dcc <memset>:
 8008dcc:	4402      	add	r2, r0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d100      	bne.n	8008dd6 <memset+0xa>
 8008dd4:	4770      	bx	lr
 8008dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dda:	e7f9      	b.n	8008dd0 <memset+0x4>

08008ddc <_free_r>:
 8008ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dde:	2900      	cmp	r1, #0
 8008de0:	d044      	beq.n	8008e6c <_free_r+0x90>
 8008de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008de6:	9001      	str	r0, [sp, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f1a1 0404 	sub.w	r4, r1, #4
 8008dee:	bfb8      	it	lt
 8008df0:	18e4      	addlt	r4, r4, r3
 8008df2:	f000 f9f3 	bl	80091dc <__malloc_lock>
 8008df6:	4a1e      	ldr	r2, [pc, #120]	; (8008e70 <_free_r+0x94>)
 8008df8:	9801      	ldr	r0, [sp, #4]
 8008dfa:	6813      	ldr	r3, [r2, #0]
 8008dfc:	b933      	cbnz	r3, 8008e0c <_free_r+0x30>
 8008dfe:	6063      	str	r3, [r4, #4]
 8008e00:	6014      	str	r4, [r2, #0]
 8008e02:	b003      	add	sp, #12
 8008e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e08:	f000 b9ee 	b.w	80091e8 <__malloc_unlock>
 8008e0c:	42a3      	cmp	r3, r4
 8008e0e:	d908      	bls.n	8008e22 <_free_r+0x46>
 8008e10:	6825      	ldr	r5, [r4, #0]
 8008e12:	1961      	adds	r1, r4, r5
 8008e14:	428b      	cmp	r3, r1
 8008e16:	bf01      	itttt	eq
 8008e18:	6819      	ldreq	r1, [r3, #0]
 8008e1a:	685b      	ldreq	r3, [r3, #4]
 8008e1c:	1949      	addeq	r1, r1, r5
 8008e1e:	6021      	streq	r1, [r4, #0]
 8008e20:	e7ed      	b.n	8008dfe <_free_r+0x22>
 8008e22:	461a      	mov	r2, r3
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	b10b      	cbz	r3, 8008e2c <_free_r+0x50>
 8008e28:	42a3      	cmp	r3, r4
 8008e2a:	d9fa      	bls.n	8008e22 <_free_r+0x46>
 8008e2c:	6811      	ldr	r1, [r2, #0]
 8008e2e:	1855      	adds	r5, r2, r1
 8008e30:	42a5      	cmp	r5, r4
 8008e32:	d10b      	bne.n	8008e4c <_free_r+0x70>
 8008e34:	6824      	ldr	r4, [r4, #0]
 8008e36:	4421      	add	r1, r4
 8008e38:	1854      	adds	r4, r2, r1
 8008e3a:	42a3      	cmp	r3, r4
 8008e3c:	6011      	str	r1, [r2, #0]
 8008e3e:	d1e0      	bne.n	8008e02 <_free_r+0x26>
 8008e40:	681c      	ldr	r4, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	6053      	str	r3, [r2, #4]
 8008e46:	4421      	add	r1, r4
 8008e48:	6011      	str	r1, [r2, #0]
 8008e4a:	e7da      	b.n	8008e02 <_free_r+0x26>
 8008e4c:	d902      	bls.n	8008e54 <_free_r+0x78>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	6003      	str	r3, [r0, #0]
 8008e52:	e7d6      	b.n	8008e02 <_free_r+0x26>
 8008e54:	6825      	ldr	r5, [r4, #0]
 8008e56:	1961      	adds	r1, r4, r5
 8008e58:	428b      	cmp	r3, r1
 8008e5a:	bf04      	itt	eq
 8008e5c:	6819      	ldreq	r1, [r3, #0]
 8008e5e:	685b      	ldreq	r3, [r3, #4]
 8008e60:	6063      	str	r3, [r4, #4]
 8008e62:	bf04      	itt	eq
 8008e64:	1949      	addeq	r1, r1, r5
 8008e66:	6021      	streq	r1, [r4, #0]
 8008e68:	6054      	str	r4, [r2, #4]
 8008e6a:	e7ca      	b.n	8008e02 <_free_r+0x26>
 8008e6c:	b003      	add	sp, #12
 8008e6e:	bd30      	pop	{r4, r5, pc}
 8008e70:	20000914 	.word	0x20000914

08008e74 <sbrk_aligned>:
 8008e74:	b570      	push	{r4, r5, r6, lr}
 8008e76:	4e0e      	ldr	r6, [pc, #56]	; (8008eb0 <sbrk_aligned+0x3c>)
 8008e78:	460c      	mov	r4, r1
 8008e7a:	6831      	ldr	r1, [r6, #0]
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	b911      	cbnz	r1, 8008e86 <sbrk_aligned+0x12>
 8008e80:	f000 f8a4 	bl	8008fcc <_sbrk_r>
 8008e84:	6030      	str	r0, [r6, #0]
 8008e86:	4621      	mov	r1, r4
 8008e88:	4628      	mov	r0, r5
 8008e8a:	f000 f89f 	bl	8008fcc <_sbrk_r>
 8008e8e:	1c43      	adds	r3, r0, #1
 8008e90:	d00a      	beq.n	8008ea8 <sbrk_aligned+0x34>
 8008e92:	1cc4      	adds	r4, r0, #3
 8008e94:	f024 0403 	bic.w	r4, r4, #3
 8008e98:	42a0      	cmp	r0, r4
 8008e9a:	d007      	beq.n	8008eac <sbrk_aligned+0x38>
 8008e9c:	1a21      	subs	r1, r4, r0
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f000 f894 	bl	8008fcc <_sbrk_r>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d101      	bne.n	8008eac <sbrk_aligned+0x38>
 8008ea8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008eac:	4620      	mov	r0, r4
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	20000918 	.word	0x20000918

08008eb4 <_malloc_r>:
 8008eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb8:	1ccd      	adds	r5, r1, #3
 8008eba:	f025 0503 	bic.w	r5, r5, #3
 8008ebe:	3508      	adds	r5, #8
 8008ec0:	2d0c      	cmp	r5, #12
 8008ec2:	bf38      	it	cc
 8008ec4:	250c      	movcc	r5, #12
 8008ec6:	2d00      	cmp	r5, #0
 8008ec8:	4607      	mov	r7, r0
 8008eca:	db01      	blt.n	8008ed0 <_malloc_r+0x1c>
 8008ecc:	42a9      	cmp	r1, r5
 8008ece:	d905      	bls.n	8008edc <_malloc_r+0x28>
 8008ed0:	230c      	movs	r3, #12
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008edc:	4e2e      	ldr	r6, [pc, #184]	; (8008f98 <_malloc_r+0xe4>)
 8008ede:	f000 f97d 	bl	80091dc <__malloc_lock>
 8008ee2:	6833      	ldr	r3, [r6, #0]
 8008ee4:	461c      	mov	r4, r3
 8008ee6:	bb34      	cbnz	r4, 8008f36 <_malloc_r+0x82>
 8008ee8:	4629      	mov	r1, r5
 8008eea:	4638      	mov	r0, r7
 8008eec:	f7ff ffc2 	bl	8008e74 <sbrk_aligned>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	d14d      	bne.n	8008f92 <_malloc_r+0xde>
 8008ef6:	6834      	ldr	r4, [r6, #0]
 8008ef8:	4626      	mov	r6, r4
 8008efa:	2e00      	cmp	r6, #0
 8008efc:	d140      	bne.n	8008f80 <_malloc_r+0xcc>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	4631      	mov	r1, r6
 8008f02:	4638      	mov	r0, r7
 8008f04:	eb04 0803 	add.w	r8, r4, r3
 8008f08:	f000 f860 	bl	8008fcc <_sbrk_r>
 8008f0c:	4580      	cmp	r8, r0
 8008f0e:	d13a      	bne.n	8008f86 <_malloc_r+0xd2>
 8008f10:	6821      	ldr	r1, [r4, #0]
 8008f12:	3503      	adds	r5, #3
 8008f14:	1a6d      	subs	r5, r5, r1
 8008f16:	f025 0503 	bic.w	r5, r5, #3
 8008f1a:	3508      	adds	r5, #8
 8008f1c:	2d0c      	cmp	r5, #12
 8008f1e:	bf38      	it	cc
 8008f20:	250c      	movcc	r5, #12
 8008f22:	4629      	mov	r1, r5
 8008f24:	4638      	mov	r0, r7
 8008f26:	f7ff ffa5 	bl	8008e74 <sbrk_aligned>
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d02b      	beq.n	8008f86 <_malloc_r+0xd2>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	442b      	add	r3, r5
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	e00e      	b.n	8008f54 <_malloc_r+0xa0>
 8008f36:	6822      	ldr	r2, [r4, #0]
 8008f38:	1b52      	subs	r2, r2, r5
 8008f3a:	d41e      	bmi.n	8008f7a <_malloc_r+0xc6>
 8008f3c:	2a0b      	cmp	r2, #11
 8008f3e:	d916      	bls.n	8008f6e <_malloc_r+0xba>
 8008f40:	1961      	adds	r1, r4, r5
 8008f42:	42a3      	cmp	r3, r4
 8008f44:	6025      	str	r5, [r4, #0]
 8008f46:	bf18      	it	ne
 8008f48:	6059      	strne	r1, [r3, #4]
 8008f4a:	6863      	ldr	r3, [r4, #4]
 8008f4c:	bf08      	it	eq
 8008f4e:	6031      	streq	r1, [r6, #0]
 8008f50:	5162      	str	r2, [r4, r5]
 8008f52:	604b      	str	r3, [r1, #4]
 8008f54:	4638      	mov	r0, r7
 8008f56:	f104 060b 	add.w	r6, r4, #11
 8008f5a:	f000 f945 	bl	80091e8 <__malloc_unlock>
 8008f5e:	f026 0607 	bic.w	r6, r6, #7
 8008f62:	1d23      	adds	r3, r4, #4
 8008f64:	1af2      	subs	r2, r6, r3
 8008f66:	d0b6      	beq.n	8008ed6 <_malloc_r+0x22>
 8008f68:	1b9b      	subs	r3, r3, r6
 8008f6a:	50a3      	str	r3, [r4, r2]
 8008f6c:	e7b3      	b.n	8008ed6 <_malloc_r+0x22>
 8008f6e:	6862      	ldr	r2, [r4, #4]
 8008f70:	42a3      	cmp	r3, r4
 8008f72:	bf0c      	ite	eq
 8008f74:	6032      	streq	r2, [r6, #0]
 8008f76:	605a      	strne	r2, [r3, #4]
 8008f78:	e7ec      	b.n	8008f54 <_malloc_r+0xa0>
 8008f7a:	4623      	mov	r3, r4
 8008f7c:	6864      	ldr	r4, [r4, #4]
 8008f7e:	e7b2      	b.n	8008ee6 <_malloc_r+0x32>
 8008f80:	4634      	mov	r4, r6
 8008f82:	6876      	ldr	r6, [r6, #4]
 8008f84:	e7b9      	b.n	8008efa <_malloc_r+0x46>
 8008f86:	230c      	movs	r3, #12
 8008f88:	603b      	str	r3, [r7, #0]
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	f000 f92c 	bl	80091e8 <__malloc_unlock>
 8008f90:	e7a1      	b.n	8008ed6 <_malloc_r+0x22>
 8008f92:	6025      	str	r5, [r4, #0]
 8008f94:	e7de      	b.n	8008f54 <_malloc_r+0xa0>
 8008f96:	bf00      	nop
 8008f98:	20000914 	.word	0x20000914

08008f9c <iprintf>:
 8008f9c:	b40f      	push	{r0, r1, r2, r3}
 8008f9e:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <iprintf+0x2c>)
 8008fa0:	b513      	push	{r0, r1, r4, lr}
 8008fa2:	681c      	ldr	r4, [r3, #0]
 8008fa4:	b124      	cbz	r4, 8008fb0 <iprintf+0x14>
 8008fa6:	69a3      	ldr	r3, [r4, #24]
 8008fa8:	b913      	cbnz	r3, 8008fb0 <iprintf+0x14>
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 f876 	bl	800909c <__sinit>
 8008fb0:	ab05      	add	r3, sp, #20
 8008fb2:	9a04      	ldr	r2, [sp, #16]
 8008fb4:	68a1      	ldr	r1, [r4, #8]
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f000 f945 	bl	8009248 <_vfiprintf_r>
 8008fbe:	b002      	add	sp, #8
 8008fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fc4:	b004      	add	sp, #16
 8008fc6:	4770      	bx	lr
 8008fc8:	2000002c 	.word	0x2000002c

08008fcc <_sbrk_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	4d06      	ldr	r5, [pc, #24]	; (8008fe8 <_sbrk_r+0x1c>)
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	4608      	mov	r0, r1
 8008fd6:	602b      	str	r3, [r5, #0]
 8008fd8:	f7f8 f81c 	bl	8001014 <_sbrk>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d102      	bne.n	8008fe6 <_sbrk_r+0x1a>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	b103      	cbz	r3, 8008fe6 <_sbrk_r+0x1a>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	20000920 	.word	0x20000920

08008fec <std>:
 8008fec:	2300      	movs	r3, #0
 8008fee:	b510      	push	{r4, lr}
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ffa:	6083      	str	r3, [r0, #8]
 8008ffc:	8181      	strh	r1, [r0, #12]
 8008ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8009000:	81c2      	strh	r2, [r0, #14]
 8009002:	6183      	str	r3, [r0, #24]
 8009004:	4619      	mov	r1, r3
 8009006:	2208      	movs	r2, #8
 8009008:	305c      	adds	r0, #92	; 0x5c
 800900a:	f7ff fedf 	bl	8008dcc <memset>
 800900e:	4b05      	ldr	r3, [pc, #20]	; (8009024 <std+0x38>)
 8009010:	6263      	str	r3, [r4, #36]	; 0x24
 8009012:	4b05      	ldr	r3, [pc, #20]	; (8009028 <std+0x3c>)
 8009014:	62a3      	str	r3, [r4, #40]	; 0x28
 8009016:	4b05      	ldr	r3, [pc, #20]	; (800902c <std+0x40>)
 8009018:	62e3      	str	r3, [r4, #44]	; 0x2c
 800901a:	4b05      	ldr	r3, [pc, #20]	; (8009030 <std+0x44>)
 800901c:	6224      	str	r4, [r4, #32]
 800901e:	6323      	str	r3, [r4, #48]	; 0x30
 8009020:	bd10      	pop	{r4, pc}
 8009022:	bf00      	nop
 8009024:	080097d1 	.word	0x080097d1
 8009028:	080097f3 	.word	0x080097f3
 800902c:	0800982b 	.word	0x0800982b
 8009030:	0800984f 	.word	0x0800984f

08009034 <_cleanup_r>:
 8009034:	4901      	ldr	r1, [pc, #4]	; (800903c <_cleanup_r+0x8>)
 8009036:	f000 b8af 	b.w	8009198 <_fwalk_reent>
 800903a:	bf00      	nop
 800903c:	08009b29 	.word	0x08009b29

08009040 <__sfmoreglue>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	2268      	movs	r2, #104	; 0x68
 8009044:	1e4d      	subs	r5, r1, #1
 8009046:	4355      	muls	r5, r2
 8009048:	460e      	mov	r6, r1
 800904a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800904e:	f7ff ff31 	bl	8008eb4 <_malloc_r>
 8009052:	4604      	mov	r4, r0
 8009054:	b140      	cbz	r0, 8009068 <__sfmoreglue+0x28>
 8009056:	2100      	movs	r1, #0
 8009058:	e9c0 1600 	strd	r1, r6, [r0]
 800905c:	300c      	adds	r0, #12
 800905e:	60a0      	str	r0, [r4, #8]
 8009060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009064:	f7ff feb2 	bl	8008dcc <memset>
 8009068:	4620      	mov	r0, r4
 800906a:	bd70      	pop	{r4, r5, r6, pc}

0800906c <__sfp_lock_acquire>:
 800906c:	4801      	ldr	r0, [pc, #4]	; (8009074 <__sfp_lock_acquire+0x8>)
 800906e:	f000 b8b3 	b.w	80091d8 <__retarget_lock_acquire_recursive>
 8009072:	bf00      	nop
 8009074:	2000091d 	.word	0x2000091d

08009078 <__sfp_lock_release>:
 8009078:	4801      	ldr	r0, [pc, #4]	; (8009080 <__sfp_lock_release+0x8>)
 800907a:	f000 b8ae 	b.w	80091da <__retarget_lock_release_recursive>
 800907e:	bf00      	nop
 8009080:	2000091d 	.word	0x2000091d

08009084 <__sinit_lock_acquire>:
 8009084:	4801      	ldr	r0, [pc, #4]	; (800908c <__sinit_lock_acquire+0x8>)
 8009086:	f000 b8a7 	b.w	80091d8 <__retarget_lock_acquire_recursive>
 800908a:	bf00      	nop
 800908c:	2000091e 	.word	0x2000091e

08009090 <__sinit_lock_release>:
 8009090:	4801      	ldr	r0, [pc, #4]	; (8009098 <__sinit_lock_release+0x8>)
 8009092:	f000 b8a2 	b.w	80091da <__retarget_lock_release_recursive>
 8009096:	bf00      	nop
 8009098:	2000091e 	.word	0x2000091e

0800909c <__sinit>:
 800909c:	b510      	push	{r4, lr}
 800909e:	4604      	mov	r4, r0
 80090a0:	f7ff fff0 	bl	8009084 <__sinit_lock_acquire>
 80090a4:	69a3      	ldr	r3, [r4, #24]
 80090a6:	b11b      	cbz	r3, 80090b0 <__sinit+0x14>
 80090a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090ac:	f7ff bff0 	b.w	8009090 <__sinit_lock_release>
 80090b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090b4:	6523      	str	r3, [r4, #80]	; 0x50
 80090b6:	4b13      	ldr	r3, [pc, #76]	; (8009104 <__sinit+0x68>)
 80090b8:	4a13      	ldr	r2, [pc, #76]	; (8009108 <__sinit+0x6c>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80090be:	42a3      	cmp	r3, r4
 80090c0:	bf04      	itt	eq
 80090c2:	2301      	moveq	r3, #1
 80090c4:	61a3      	streq	r3, [r4, #24]
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 f820 	bl	800910c <__sfp>
 80090cc:	6060      	str	r0, [r4, #4]
 80090ce:	4620      	mov	r0, r4
 80090d0:	f000 f81c 	bl	800910c <__sfp>
 80090d4:	60a0      	str	r0, [r4, #8]
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 f818 	bl	800910c <__sfp>
 80090dc:	2200      	movs	r2, #0
 80090de:	60e0      	str	r0, [r4, #12]
 80090e0:	2104      	movs	r1, #4
 80090e2:	6860      	ldr	r0, [r4, #4]
 80090e4:	f7ff ff82 	bl	8008fec <std>
 80090e8:	68a0      	ldr	r0, [r4, #8]
 80090ea:	2201      	movs	r2, #1
 80090ec:	2109      	movs	r1, #9
 80090ee:	f7ff ff7d 	bl	8008fec <std>
 80090f2:	68e0      	ldr	r0, [r4, #12]
 80090f4:	2202      	movs	r2, #2
 80090f6:	2112      	movs	r1, #18
 80090f8:	f7ff ff78 	bl	8008fec <std>
 80090fc:	2301      	movs	r3, #1
 80090fe:	61a3      	str	r3, [r4, #24]
 8009100:	e7d2      	b.n	80090a8 <__sinit+0xc>
 8009102:	bf00      	nop
 8009104:	08009d58 	.word	0x08009d58
 8009108:	08009035 	.word	0x08009035

0800910c <__sfp>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	4607      	mov	r7, r0
 8009110:	f7ff ffac 	bl	800906c <__sfp_lock_acquire>
 8009114:	4b1e      	ldr	r3, [pc, #120]	; (8009190 <__sfp+0x84>)
 8009116:	681e      	ldr	r6, [r3, #0]
 8009118:	69b3      	ldr	r3, [r6, #24]
 800911a:	b913      	cbnz	r3, 8009122 <__sfp+0x16>
 800911c:	4630      	mov	r0, r6
 800911e:	f7ff ffbd 	bl	800909c <__sinit>
 8009122:	3648      	adds	r6, #72	; 0x48
 8009124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009128:	3b01      	subs	r3, #1
 800912a:	d503      	bpl.n	8009134 <__sfp+0x28>
 800912c:	6833      	ldr	r3, [r6, #0]
 800912e:	b30b      	cbz	r3, 8009174 <__sfp+0x68>
 8009130:	6836      	ldr	r6, [r6, #0]
 8009132:	e7f7      	b.n	8009124 <__sfp+0x18>
 8009134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009138:	b9d5      	cbnz	r5, 8009170 <__sfp+0x64>
 800913a:	4b16      	ldr	r3, [pc, #88]	; (8009194 <__sfp+0x88>)
 800913c:	60e3      	str	r3, [r4, #12]
 800913e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009142:	6665      	str	r5, [r4, #100]	; 0x64
 8009144:	f000 f847 	bl	80091d6 <__retarget_lock_init_recursive>
 8009148:	f7ff ff96 	bl	8009078 <__sfp_lock_release>
 800914c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009150:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009154:	6025      	str	r5, [r4, #0]
 8009156:	61a5      	str	r5, [r4, #24]
 8009158:	2208      	movs	r2, #8
 800915a:	4629      	mov	r1, r5
 800915c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009160:	f7ff fe34 	bl	8008dcc <memset>
 8009164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800916c:	4620      	mov	r0, r4
 800916e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009170:	3468      	adds	r4, #104	; 0x68
 8009172:	e7d9      	b.n	8009128 <__sfp+0x1c>
 8009174:	2104      	movs	r1, #4
 8009176:	4638      	mov	r0, r7
 8009178:	f7ff ff62 	bl	8009040 <__sfmoreglue>
 800917c:	4604      	mov	r4, r0
 800917e:	6030      	str	r0, [r6, #0]
 8009180:	2800      	cmp	r0, #0
 8009182:	d1d5      	bne.n	8009130 <__sfp+0x24>
 8009184:	f7ff ff78 	bl	8009078 <__sfp_lock_release>
 8009188:	230c      	movs	r3, #12
 800918a:	603b      	str	r3, [r7, #0]
 800918c:	e7ee      	b.n	800916c <__sfp+0x60>
 800918e:	bf00      	nop
 8009190:	08009d58 	.word	0x08009d58
 8009194:	ffff0001 	.word	0xffff0001

08009198 <_fwalk_reent>:
 8009198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800919c:	4606      	mov	r6, r0
 800919e:	4688      	mov	r8, r1
 80091a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091a4:	2700      	movs	r7, #0
 80091a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091aa:	f1b9 0901 	subs.w	r9, r9, #1
 80091ae:	d505      	bpl.n	80091bc <_fwalk_reent+0x24>
 80091b0:	6824      	ldr	r4, [r4, #0]
 80091b2:	2c00      	cmp	r4, #0
 80091b4:	d1f7      	bne.n	80091a6 <_fwalk_reent+0xe>
 80091b6:	4638      	mov	r0, r7
 80091b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091bc:	89ab      	ldrh	r3, [r5, #12]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d907      	bls.n	80091d2 <_fwalk_reent+0x3a>
 80091c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091c6:	3301      	adds	r3, #1
 80091c8:	d003      	beq.n	80091d2 <_fwalk_reent+0x3a>
 80091ca:	4629      	mov	r1, r5
 80091cc:	4630      	mov	r0, r6
 80091ce:	47c0      	blx	r8
 80091d0:	4307      	orrs	r7, r0
 80091d2:	3568      	adds	r5, #104	; 0x68
 80091d4:	e7e9      	b.n	80091aa <_fwalk_reent+0x12>

080091d6 <__retarget_lock_init_recursive>:
 80091d6:	4770      	bx	lr

080091d8 <__retarget_lock_acquire_recursive>:
 80091d8:	4770      	bx	lr

080091da <__retarget_lock_release_recursive>:
 80091da:	4770      	bx	lr

080091dc <__malloc_lock>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__malloc_lock+0x8>)
 80091de:	f7ff bffb 	b.w	80091d8 <__retarget_lock_acquire_recursive>
 80091e2:	bf00      	nop
 80091e4:	2000091c 	.word	0x2000091c

080091e8 <__malloc_unlock>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__malloc_unlock+0x8>)
 80091ea:	f7ff bff6 	b.w	80091da <__retarget_lock_release_recursive>
 80091ee:	bf00      	nop
 80091f0:	2000091c 	.word	0x2000091c

080091f4 <__sfputc_r>:
 80091f4:	6893      	ldr	r3, [r2, #8]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	b410      	push	{r4}
 80091fc:	6093      	str	r3, [r2, #8]
 80091fe:	da08      	bge.n	8009212 <__sfputc_r+0x1e>
 8009200:	6994      	ldr	r4, [r2, #24]
 8009202:	42a3      	cmp	r3, r4
 8009204:	db01      	blt.n	800920a <__sfputc_r+0x16>
 8009206:	290a      	cmp	r1, #10
 8009208:	d103      	bne.n	8009212 <__sfputc_r+0x1e>
 800920a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800920e:	f000 bb23 	b.w	8009858 <__swbuf_r>
 8009212:	6813      	ldr	r3, [r2, #0]
 8009214:	1c58      	adds	r0, r3, #1
 8009216:	6010      	str	r0, [r2, #0]
 8009218:	7019      	strb	r1, [r3, #0]
 800921a:	4608      	mov	r0, r1
 800921c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009220:	4770      	bx	lr

08009222 <__sfputs_r>:
 8009222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009224:	4606      	mov	r6, r0
 8009226:	460f      	mov	r7, r1
 8009228:	4614      	mov	r4, r2
 800922a:	18d5      	adds	r5, r2, r3
 800922c:	42ac      	cmp	r4, r5
 800922e:	d101      	bne.n	8009234 <__sfputs_r+0x12>
 8009230:	2000      	movs	r0, #0
 8009232:	e007      	b.n	8009244 <__sfputs_r+0x22>
 8009234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009238:	463a      	mov	r2, r7
 800923a:	4630      	mov	r0, r6
 800923c:	f7ff ffda 	bl	80091f4 <__sfputc_r>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d1f3      	bne.n	800922c <__sfputs_r+0xa>
 8009244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009248 <_vfiprintf_r>:
 8009248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	460d      	mov	r5, r1
 800924e:	b09d      	sub	sp, #116	; 0x74
 8009250:	4614      	mov	r4, r2
 8009252:	4698      	mov	r8, r3
 8009254:	4606      	mov	r6, r0
 8009256:	b118      	cbz	r0, 8009260 <_vfiprintf_r+0x18>
 8009258:	6983      	ldr	r3, [r0, #24]
 800925a:	b90b      	cbnz	r3, 8009260 <_vfiprintf_r+0x18>
 800925c:	f7ff ff1e 	bl	800909c <__sinit>
 8009260:	4b89      	ldr	r3, [pc, #548]	; (8009488 <_vfiprintf_r+0x240>)
 8009262:	429d      	cmp	r5, r3
 8009264:	d11b      	bne.n	800929e <_vfiprintf_r+0x56>
 8009266:	6875      	ldr	r5, [r6, #4]
 8009268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800926a:	07d9      	lsls	r1, r3, #31
 800926c:	d405      	bmi.n	800927a <_vfiprintf_r+0x32>
 800926e:	89ab      	ldrh	r3, [r5, #12]
 8009270:	059a      	lsls	r2, r3, #22
 8009272:	d402      	bmi.n	800927a <_vfiprintf_r+0x32>
 8009274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009276:	f7ff ffaf 	bl	80091d8 <__retarget_lock_acquire_recursive>
 800927a:	89ab      	ldrh	r3, [r5, #12]
 800927c:	071b      	lsls	r3, r3, #28
 800927e:	d501      	bpl.n	8009284 <_vfiprintf_r+0x3c>
 8009280:	692b      	ldr	r3, [r5, #16]
 8009282:	b9eb      	cbnz	r3, 80092c0 <_vfiprintf_r+0x78>
 8009284:	4629      	mov	r1, r5
 8009286:	4630      	mov	r0, r6
 8009288:	f000 fb4a 	bl	8009920 <__swsetup_r>
 800928c:	b1c0      	cbz	r0, 80092c0 <_vfiprintf_r+0x78>
 800928e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009290:	07dc      	lsls	r4, r3, #31
 8009292:	d50e      	bpl.n	80092b2 <_vfiprintf_r+0x6a>
 8009294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009298:	b01d      	add	sp, #116	; 0x74
 800929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929e:	4b7b      	ldr	r3, [pc, #492]	; (800948c <_vfiprintf_r+0x244>)
 80092a0:	429d      	cmp	r5, r3
 80092a2:	d101      	bne.n	80092a8 <_vfiprintf_r+0x60>
 80092a4:	68b5      	ldr	r5, [r6, #8]
 80092a6:	e7df      	b.n	8009268 <_vfiprintf_r+0x20>
 80092a8:	4b79      	ldr	r3, [pc, #484]	; (8009490 <_vfiprintf_r+0x248>)
 80092aa:	429d      	cmp	r5, r3
 80092ac:	bf08      	it	eq
 80092ae:	68f5      	ldreq	r5, [r6, #12]
 80092b0:	e7da      	b.n	8009268 <_vfiprintf_r+0x20>
 80092b2:	89ab      	ldrh	r3, [r5, #12]
 80092b4:	0598      	lsls	r0, r3, #22
 80092b6:	d4ed      	bmi.n	8009294 <_vfiprintf_r+0x4c>
 80092b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ba:	f7ff ff8e 	bl	80091da <__retarget_lock_release_recursive>
 80092be:	e7e9      	b.n	8009294 <_vfiprintf_r+0x4c>
 80092c0:	2300      	movs	r3, #0
 80092c2:	9309      	str	r3, [sp, #36]	; 0x24
 80092c4:	2320      	movs	r3, #32
 80092c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ce:	2330      	movs	r3, #48	; 0x30
 80092d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009494 <_vfiprintf_r+0x24c>
 80092d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092d8:	f04f 0901 	mov.w	r9, #1
 80092dc:	4623      	mov	r3, r4
 80092de:	469a      	mov	sl, r3
 80092e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092e4:	b10a      	cbz	r2, 80092ea <_vfiprintf_r+0xa2>
 80092e6:	2a25      	cmp	r2, #37	; 0x25
 80092e8:	d1f9      	bne.n	80092de <_vfiprintf_r+0x96>
 80092ea:	ebba 0b04 	subs.w	fp, sl, r4
 80092ee:	d00b      	beq.n	8009308 <_vfiprintf_r+0xc0>
 80092f0:	465b      	mov	r3, fp
 80092f2:	4622      	mov	r2, r4
 80092f4:	4629      	mov	r1, r5
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7ff ff93 	bl	8009222 <__sfputs_r>
 80092fc:	3001      	adds	r0, #1
 80092fe:	f000 80aa 	beq.w	8009456 <_vfiprintf_r+0x20e>
 8009302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009304:	445a      	add	r2, fp
 8009306:	9209      	str	r2, [sp, #36]	; 0x24
 8009308:	f89a 3000 	ldrb.w	r3, [sl]
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 80a2 	beq.w	8009456 <_vfiprintf_r+0x20e>
 8009312:	2300      	movs	r3, #0
 8009314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800931c:	f10a 0a01 	add.w	sl, sl, #1
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	9307      	str	r3, [sp, #28]
 8009324:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009328:	931a      	str	r3, [sp, #104]	; 0x68
 800932a:	4654      	mov	r4, sl
 800932c:	2205      	movs	r2, #5
 800932e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009332:	4858      	ldr	r0, [pc, #352]	; (8009494 <_vfiprintf_r+0x24c>)
 8009334:	f7f6 ff4c 	bl	80001d0 <memchr>
 8009338:	9a04      	ldr	r2, [sp, #16]
 800933a:	b9d8      	cbnz	r0, 8009374 <_vfiprintf_r+0x12c>
 800933c:	06d1      	lsls	r1, r2, #27
 800933e:	bf44      	itt	mi
 8009340:	2320      	movmi	r3, #32
 8009342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009346:	0713      	lsls	r3, r2, #28
 8009348:	bf44      	itt	mi
 800934a:	232b      	movmi	r3, #43	; 0x2b
 800934c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009350:	f89a 3000 	ldrb.w	r3, [sl]
 8009354:	2b2a      	cmp	r3, #42	; 0x2a
 8009356:	d015      	beq.n	8009384 <_vfiprintf_r+0x13c>
 8009358:	9a07      	ldr	r2, [sp, #28]
 800935a:	4654      	mov	r4, sl
 800935c:	2000      	movs	r0, #0
 800935e:	f04f 0c0a 	mov.w	ip, #10
 8009362:	4621      	mov	r1, r4
 8009364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009368:	3b30      	subs	r3, #48	; 0x30
 800936a:	2b09      	cmp	r3, #9
 800936c:	d94e      	bls.n	800940c <_vfiprintf_r+0x1c4>
 800936e:	b1b0      	cbz	r0, 800939e <_vfiprintf_r+0x156>
 8009370:	9207      	str	r2, [sp, #28]
 8009372:	e014      	b.n	800939e <_vfiprintf_r+0x156>
 8009374:	eba0 0308 	sub.w	r3, r0, r8
 8009378:	fa09 f303 	lsl.w	r3, r9, r3
 800937c:	4313      	orrs	r3, r2
 800937e:	9304      	str	r3, [sp, #16]
 8009380:	46a2      	mov	sl, r4
 8009382:	e7d2      	b.n	800932a <_vfiprintf_r+0xe2>
 8009384:	9b03      	ldr	r3, [sp, #12]
 8009386:	1d19      	adds	r1, r3, #4
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	9103      	str	r1, [sp, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	bfbb      	ittet	lt
 8009390:	425b      	neglt	r3, r3
 8009392:	f042 0202 	orrlt.w	r2, r2, #2
 8009396:	9307      	strge	r3, [sp, #28]
 8009398:	9307      	strlt	r3, [sp, #28]
 800939a:	bfb8      	it	lt
 800939c:	9204      	strlt	r2, [sp, #16]
 800939e:	7823      	ldrb	r3, [r4, #0]
 80093a0:	2b2e      	cmp	r3, #46	; 0x2e
 80093a2:	d10c      	bne.n	80093be <_vfiprintf_r+0x176>
 80093a4:	7863      	ldrb	r3, [r4, #1]
 80093a6:	2b2a      	cmp	r3, #42	; 0x2a
 80093a8:	d135      	bne.n	8009416 <_vfiprintf_r+0x1ce>
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	1d1a      	adds	r2, r3, #4
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	9203      	str	r2, [sp, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	bfb8      	it	lt
 80093b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80093ba:	3402      	adds	r4, #2
 80093bc:	9305      	str	r3, [sp, #20]
 80093be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094a4 <_vfiprintf_r+0x25c>
 80093c2:	7821      	ldrb	r1, [r4, #0]
 80093c4:	2203      	movs	r2, #3
 80093c6:	4650      	mov	r0, sl
 80093c8:	f7f6 ff02 	bl	80001d0 <memchr>
 80093cc:	b140      	cbz	r0, 80093e0 <_vfiprintf_r+0x198>
 80093ce:	2340      	movs	r3, #64	; 0x40
 80093d0:	eba0 000a 	sub.w	r0, r0, sl
 80093d4:	fa03 f000 	lsl.w	r0, r3, r0
 80093d8:	9b04      	ldr	r3, [sp, #16]
 80093da:	4303      	orrs	r3, r0
 80093dc:	3401      	adds	r4, #1
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e4:	482c      	ldr	r0, [pc, #176]	; (8009498 <_vfiprintf_r+0x250>)
 80093e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ea:	2206      	movs	r2, #6
 80093ec:	f7f6 fef0 	bl	80001d0 <memchr>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d03f      	beq.n	8009474 <_vfiprintf_r+0x22c>
 80093f4:	4b29      	ldr	r3, [pc, #164]	; (800949c <_vfiprintf_r+0x254>)
 80093f6:	bb1b      	cbnz	r3, 8009440 <_vfiprintf_r+0x1f8>
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	3307      	adds	r3, #7
 80093fc:	f023 0307 	bic.w	r3, r3, #7
 8009400:	3308      	adds	r3, #8
 8009402:	9303      	str	r3, [sp, #12]
 8009404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009406:	443b      	add	r3, r7
 8009408:	9309      	str	r3, [sp, #36]	; 0x24
 800940a:	e767      	b.n	80092dc <_vfiprintf_r+0x94>
 800940c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009410:	460c      	mov	r4, r1
 8009412:	2001      	movs	r0, #1
 8009414:	e7a5      	b.n	8009362 <_vfiprintf_r+0x11a>
 8009416:	2300      	movs	r3, #0
 8009418:	3401      	adds	r4, #1
 800941a:	9305      	str	r3, [sp, #20]
 800941c:	4619      	mov	r1, r3
 800941e:	f04f 0c0a 	mov.w	ip, #10
 8009422:	4620      	mov	r0, r4
 8009424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009428:	3a30      	subs	r2, #48	; 0x30
 800942a:	2a09      	cmp	r2, #9
 800942c:	d903      	bls.n	8009436 <_vfiprintf_r+0x1ee>
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0c5      	beq.n	80093be <_vfiprintf_r+0x176>
 8009432:	9105      	str	r1, [sp, #20]
 8009434:	e7c3      	b.n	80093be <_vfiprintf_r+0x176>
 8009436:	fb0c 2101 	mla	r1, ip, r1, r2
 800943a:	4604      	mov	r4, r0
 800943c:	2301      	movs	r3, #1
 800943e:	e7f0      	b.n	8009422 <_vfiprintf_r+0x1da>
 8009440:	ab03      	add	r3, sp, #12
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	462a      	mov	r2, r5
 8009446:	4b16      	ldr	r3, [pc, #88]	; (80094a0 <_vfiprintf_r+0x258>)
 8009448:	a904      	add	r1, sp, #16
 800944a:	4630      	mov	r0, r6
 800944c:	f3af 8000 	nop.w
 8009450:	4607      	mov	r7, r0
 8009452:	1c78      	adds	r0, r7, #1
 8009454:	d1d6      	bne.n	8009404 <_vfiprintf_r+0x1bc>
 8009456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009458:	07d9      	lsls	r1, r3, #31
 800945a:	d405      	bmi.n	8009468 <_vfiprintf_r+0x220>
 800945c:	89ab      	ldrh	r3, [r5, #12]
 800945e:	059a      	lsls	r2, r3, #22
 8009460:	d402      	bmi.n	8009468 <_vfiprintf_r+0x220>
 8009462:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009464:	f7ff feb9 	bl	80091da <__retarget_lock_release_recursive>
 8009468:	89ab      	ldrh	r3, [r5, #12]
 800946a:	065b      	lsls	r3, r3, #25
 800946c:	f53f af12 	bmi.w	8009294 <_vfiprintf_r+0x4c>
 8009470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009472:	e711      	b.n	8009298 <_vfiprintf_r+0x50>
 8009474:	ab03      	add	r3, sp, #12
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	462a      	mov	r2, r5
 800947a:	4b09      	ldr	r3, [pc, #36]	; (80094a0 <_vfiprintf_r+0x258>)
 800947c:	a904      	add	r1, sp, #16
 800947e:	4630      	mov	r0, r6
 8009480:	f000 f880 	bl	8009584 <_printf_i>
 8009484:	e7e4      	b.n	8009450 <_vfiprintf_r+0x208>
 8009486:	bf00      	nop
 8009488:	08009d7c 	.word	0x08009d7c
 800948c:	08009d9c 	.word	0x08009d9c
 8009490:	08009d5c 	.word	0x08009d5c
 8009494:	08009dbc 	.word	0x08009dbc
 8009498:	08009dc6 	.word	0x08009dc6
 800949c:	00000000 	.word	0x00000000
 80094a0:	08009223 	.word	0x08009223
 80094a4:	08009dc2 	.word	0x08009dc2

080094a8 <_printf_common>:
 80094a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ac:	4616      	mov	r6, r2
 80094ae:	4699      	mov	r9, r3
 80094b0:	688a      	ldr	r2, [r1, #8]
 80094b2:	690b      	ldr	r3, [r1, #16]
 80094b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094b8:	4293      	cmp	r3, r2
 80094ba:	bfb8      	it	lt
 80094bc:	4613      	movlt	r3, r2
 80094be:	6033      	str	r3, [r6, #0]
 80094c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094c4:	4607      	mov	r7, r0
 80094c6:	460c      	mov	r4, r1
 80094c8:	b10a      	cbz	r2, 80094ce <_printf_common+0x26>
 80094ca:	3301      	adds	r3, #1
 80094cc:	6033      	str	r3, [r6, #0]
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	0699      	lsls	r1, r3, #26
 80094d2:	bf42      	ittt	mi
 80094d4:	6833      	ldrmi	r3, [r6, #0]
 80094d6:	3302      	addmi	r3, #2
 80094d8:	6033      	strmi	r3, [r6, #0]
 80094da:	6825      	ldr	r5, [r4, #0]
 80094dc:	f015 0506 	ands.w	r5, r5, #6
 80094e0:	d106      	bne.n	80094f0 <_printf_common+0x48>
 80094e2:	f104 0a19 	add.w	sl, r4, #25
 80094e6:	68e3      	ldr	r3, [r4, #12]
 80094e8:	6832      	ldr	r2, [r6, #0]
 80094ea:	1a9b      	subs	r3, r3, r2
 80094ec:	42ab      	cmp	r3, r5
 80094ee:	dc26      	bgt.n	800953e <_printf_common+0x96>
 80094f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094f4:	1e13      	subs	r3, r2, #0
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	bf18      	it	ne
 80094fa:	2301      	movne	r3, #1
 80094fc:	0692      	lsls	r2, r2, #26
 80094fe:	d42b      	bmi.n	8009558 <_printf_common+0xb0>
 8009500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009504:	4649      	mov	r1, r9
 8009506:	4638      	mov	r0, r7
 8009508:	47c0      	blx	r8
 800950a:	3001      	adds	r0, #1
 800950c:	d01e      	beq.n	800954c <_printf_common+0xa4>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	68e5      	ldr	r5, [r4, #12]
 8009512:	6832      	ldr	r2, [r6, #0]
 8009514:	f003 0306 	and.w	r3, r3, #6
 8009518:	2b04      	cmp	r3, #4
 800951a:	bf08      	it	eq
 800951c:	1aad      	subeq	r5, r5, r2
 800951e:	68a3      	ldr	r3, [r4, #8]
 8009520:	6922      	ldr	r2, [r4, #16]
 8009522:	bf0c      	ite	eq
 8009524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009528:	2500      	movne	r5, #0
 800952a:	4293      	cmp	r3, r2
 800952c:	bfc4      	itt	gt
 800952e:	1a9b      	subgt	r3, r3, r2
 8009530:	18ed      	addgt	r5, r5, r3
 8009532:	2600      	movs	r6, #0
 8009534:	341a      	adds	r4, #26
 8009536:	42b5      	cmp	r5, r6
 8009538:	d11a      	bne.n	8009570 <_printf_common+0xc8>
 800953a:	2000      	movs	r0, #0
 800953c:	e008      	b.n	8009550 <_printf_common+0xa8>
 800953e:	2301      	movs	r3, #1
 8009540:	4652      	mov	r2, sl
 8009542:	4649      	mov	r1, r9
 8009544:	4638      	mov	r0, r7
 8009546:	47c0      	blx	r8
 8009548:	3001      	adds	r0, #1
 800954a:	d103      	bne.n	8009554 <_printf_common+0xac>
 800954c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009554:	3501      	adds	r5, #1
 8009556:	e7c6      	b.n	80094e6 <_printf_common+0x3e>
 8009558:	18e1      	adds	r1, r4, r3
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	2030      	movs	r0, #48	; 0x30
 800955e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009562:	4422      	add	r2, r4
 8009564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800956c:	3302      	adds	r3, #2
 800956e:	e7c7      	b.n	8009500 <_printf_common+0x58>
 8009570:	2301      	movs	r3, #1
 8009572:	4622      	mov	r2, r4
 8009574:	4649      	mov	r1, r9
 8009576:	4638      	mov	r0, r7
 8009578:	47c0      	blx	r8
 800957a:	3001      	adds	r0, #1
 800957c:	d0e6      	beq.n	800954c <_printf_common+0xa4>
 800957e:	3601      	adds	r6, #1
 8009580:	e7d9      	b.n	8009536 <_printf_common+0x8e>
	...

08009584 <_printf_i>:
 8009584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009588:	7e0f      	ldrb	r7, [r1, #24]
 800958a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800958c:	2f78      	cmp	r7, #120	; 0x78
 800958e:	4691      	mov	r9, r2
 8009590:	4680      	mov	r8, r0
 8009592:	460c      	mov	r4, r1
 8009594:	469a      	mov	sl, r3
 8009596:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800959a:	d807      	bhi.n	80095ac <_printf_i+0x28>
 800959c:	2f62      	cmp	r7, #98	; 0x62
 800959e:	d80a      	bhi.n	80095b6 <_printf_i+0x32>
 80095a0:	2f00      	cmp	r7, #0
 80095a2:	f000 80d8 	beq.w	8009756 <_printf_i+0x1d2>
 80095a6:	2f58      	cmp	r7, #88	; 0x58
 80095a8:	f000 80a3 	beq.w	80096f2 <_printf_i+0x16e>
 80095ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095b4:	e03a      	b.n	800962c <_printf_i+0xa8>
 80095b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095ba:	2b15      	cmp	r3, #21
 80095bc:	d8f6      	bhi.n	80095ac <_printf_i+0x28>
 80095be:	a101      	add	r1, pc, #4	; (adr r1, 80095c4 <_printf_i+0x40>)
 80095c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095c4:	0800961d 	.word	0x0800961d
 80095c8:	08009631 	.word	0x08009631
 80095cc:	080095ad 	.word	0x080095ad
 80095d0:	080095ad 	.word	0x080095ad
 80095d4:	080095ad 	.word	0x080095ad
 80095d8:	080095ad 	.word	0x080095ad
 80095dc:	08009631 	.word	0x08009631
 80095e0:	080095ad 	.word	0x080095ad
 80095e4:	080095ad 	.word	0x080095ad
 80095e8:	080095ad 	.word	0x080095ad
 80095ec:	080095ad 	.word	0x080095ad
 80095f0:	0800973d 	.word	0x0800973d
 80095f4:	08009661 	.word	0x08009661
 80095f8:	0800971f 	.word	0x0800971f
 80095fc:	080095ad 	.word	0x080095ad
 8009600:	080095ad 	.word	0x080095ad
 8009604:	0800975f 	.word	0x0800975f
 8009608:	080095ad 	.word	0x080095ad
 800960c:	08009661 	.word	0x08009661
 8009610:	080095ad 	.word	0x080095ad
 8009614:	080095ad 	.word	0x080095ad
 8009618:	08009727 	.word	0x08009727
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	1d1a      	adds	r2, r3, #4
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	602a      	str	r2, [r5, #0]
 8009624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800962c:	2301      	movs	r3, #1
 800962e:	e0a3      	b.n	8009778 <_printf_i+0x1f4>
 8009630:	6820      	ldr	r0, [r4, #0]
 8009632:	6829      	ldr	r1, [r5, #0]
 8009634:	0606      	lsls	r6, r0, #24
 8009636:	f101 0304 	add.w	r3, r1, #4
 800963a:	d50a      	bpl.n	8009652 <_printf_i+0xce>
 800963c:	680e      	ldr	r6, [r1, #0]
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	2e00      	cmp	r6, #0
 8009642:	da03      	bge.n	800964c <_printf_i+0xc8>
 8009644:	232d      	movs	r3, #45	; 0x2d
 8009646:	4276      	negs	r6, r6
 8009648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800964c:	485e      	ldr	r0, [pc, #376]	; (80097c8 <_printf_i+0x244>)
 800964e:	230a      	movs	r3, #10
 8009650:	e019      	b.n	8009686 <_printf_i+0x102>
 8009652:	680e      	ldr	r6, [r1, #0]
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	f010 0f40 	tst.w	r0, #64	; 0x40
 800965a:	bf18      	it	ne
 800965c:	b236      	sxthne	r6, r6
 800965e:	e7ef      	b.n	8009640 <_printf_i+0xbc>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	6820      	ldr	r0, [r4, #0]
 8009664:	1d19      	adds	r1, r3, #4
 8009666:	6029      	str	r1, [r5, #0]
 8009668:	0601      	lsls	r1, r0, #24
 800966a:	d501      	bpl.n	8009670 <_printf_i+0xec>
 800966c:	681e      	ldr	r6, [r3, #0]
 800966e:	e002      	b.n	8009676 <_printf_i+0xf2>
 8009670:	0646      	lsls	r6, r0, #25
 8009672:	d5fb      	bpl.n	800966c <_printf_i+0xe8>
 8009674:	881e      	ldrh	r6, [r3, #0]
 8009676:	4854      	ldr	r0, [pc, #336]	; (80097c8 <_printf_i+0x244>)
 8009678:	2f6f      	cmp	r7, #111	; 0x6f
 800967a:	bf0c      	ite	eq
 800967c:	2308      	moveq	r3, #8
 800967e:	230a      	movne	r3, #10
 8009680:	2100      	movs	r1, #0
 8009682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009686:	6865      	ldr	r5, [r4, #4]
 8009688:	60a5      	str	r5, [r4, #8]
 800968a:	2d00      	cmp	r5, #0
 800968c:	bfa2      	ittt	ge
 800968e:	6821      	ldrge	r1, [r4, #0]
 8009690:	f021 0104 	bicge.w	r1, r1, #4
 8009694:	6021      	strge	r1, [r4, #0]
 8009696:	b90e      	cbnz	r6, 800969c <_printf_i+0x118>
 8009698:	2d00      	cmp	r5, #0
 800969a:	d04d      	beq.n	8009738 <_printf_i+0x1b4>
 800969c:	4615      	mov	r5, r2
 800969e:	fbb6 f1f3 	udiv	r1, r6, r3
 80096a2:	fb03 6711 	mls	r7, r3, r1, r6
 80096a6:	5dc7      	ldrb	r7, [r0, r7]
 80096a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096ac:	4637      	mov	r7, r6
 80096ae:	42bb      	cmp	r3, r7
 80096b0:	460e      	mov	r6, r1
 80096b2:	d9f4      	bls.n	800969e <_printf_i+0x11a>
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d10b      	bne.n	80096d0 <_printf_i+0x14c>
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	07de      	lsls	r6, r3, #31
 80096bc:	d508      	bpl.n	80096d0 <_printf_i+0x14c>
 80096be:	6923      	ldr	r3, [r4, #16]
 80096c0:	6861      	ldr	r1, [r4, #4]
 80096c2:	4299      	cmp	r1, r3
 80096c4:	bfde      	ittt	le
 80096c6:	2330      	movle	r3, #48	; 0x30
 80096c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80096d0:	1b52      	subs	r2, r2, r5
 80096d2:	6122      	str	r2, [r4, #16]
 80096d4:	f8cd a000 	str.w	sl, [sp]
 80096d8:	464b      	mov	r3, r9
 80096da:	aa03      	add	r2, sp, #12
 80096dc:	4621      	mov	r1, r4
 80096de:	4640      	mov	r0, r8
 80096e0:	f7ff fee2 	bl	80094a8 <_printf_common>
 80096e4:	3001      	adds	r0, #1
 80096e6:	d14c      	bne.n	8009782 <_printf_i+0x1fe>
 80096e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096ec:	b004      	add	sp, #16
 80096ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f2:	4835      	ldr	r0, [pc, #212]	; (80097c8 <_printf_i+0x244>)
 80096f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80096f8:	6829      	ldr	r1, [r5, #0]
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009700:	6029      	str	r1, [r5, #0]
 8009702:	061d      	lsls	r5, r3, #24
 8009704:	d514      	bpl.n	8009730 <_printf_i+0x1ac>
 8009706:	07df      	lsls	r7, r3, #31
 8009708:	bf44      	itt	mi
 800970a:	f043 0320 	orrmi.w	r3, r3, #32
 800970e:	6023      	strmi	r3, [r4, #0]
 8009710:	b91e      	cbnz	r6, 800971a <_printf_i+0x196>
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	f023 0320 	bic.w	r3, r3, #32
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	2310      	movs	r3, #16
 800971c:	e7b0      	b.n	8009680 <_printf_i+0xfc>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	f043 0320 	orr.w	r3, r3, #32
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	2378      	movs	r3, #120	; 0x78
 8009728:	4828      	ldr	r0, [pc, #160]	; (80097cc <_printf_i+0x248>)
 800972a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800972e:	e7e3      	b.n	80096f8 <_printf_i+0x174>
 8009730:	0659      	lsls	r1, r3, #25
 8009732:	bf48      	it	mi
 8009734:	b2b6      	uxthmi	r6, r6
 8009736:	e7e6      	b.n	8009706 <_printf_i+0x182>
 8009738:	4615      	mov	r5, r2
 800973a:	e7bb      	b.n	80096b4 <_printf_i+0x130>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	6826      	ldr	r6, [r4, #0]
 8009740:	6961      	ldr	r1, [r4, #20]
 8009742:	1d18      	adds	r0, r3, #4
 8009744:	6028      	str	r0, [r5, #0]
 8009746:	0635      	lsls	r5, r6, #24
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	d501      	bpl.n	8009750 <_printf_i+0x1cc>
 800974c:	6019      	str	r1, [r3, #0]
 800974e:	e002      	b.n	8009756 <_printf_i+0x1d2>
 8009750:	0670      	lsls	r0, r6, #25
 8009752:	d5fb      	bpl.n	800974c <_printf_i+0x1c8>
 8009754:	8019      	strh	r1, [r3, #0]
 8009756:	2300      	movs	r3, #0
 8009758:	6123      	str	r3, [r4, #16]
 800975a:	4615      	mov	r5, r2
 800975c:	e7ba      	b.n	80096d4 <_printf_i+0x150>
 800975e:	682b      	ldr	r3, [r5, #0]
 8009760:	1d1a      	adds	r2, r3, #4
 8009762:	602a      	str	r2, [r5, #0]
 8009764:	681d      	ldr	r5, [r3, #0]
 8009766:	6862      	ldr	r2, [r4, #4]
 8009768:	2100      	movs	r1, #0
 800976a:	4628      	mov	r0, r5
 800976c:	f7f6 fd30 	bl	80001d0 <memchr>
 8009770:	b108      	cbz	r0, 8009776 <_printf_i+0x1f2>
 8009772:	1b40      	subs	r0, r0, r5
 8009774:	6060      	str	r0, [r4, #4]
 8009776:	6863      	ldr	r3, [r4, #4]
 8009778:	6123      	str	r3, [r4, #16]
 800977a:	2300      	movs	r3, #0
 800977c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009780:	e7a8      	b.n	80096d4 <_printf_i+0x150>
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	462a      	mov	r2, r5
 8009786:	4649      	mov	r1, r9
 8009788:	4640      	mov	r0, r8
 800978a:	47d0      	blx	sl
 800978c:	3001      	adds	r0, #1
 800978e:	d0ab      	beq.n	80096e8 <_printf_i+0x164>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	079b      	lsls	r3, r3, #30
 8009794:	d413      	bmi.n	80097be <_printf_i+0x23a>
 8009796:	68e0      	ldr	r0, [r4, #12]
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	4298      	cmp	r0, r3
 800979c:	bfb8      	it	lt
 800979e:	4618      	movlt	r0, r3
 80097a0:	e7a4      	b.n	80096ec <_printf_i+0x168>
 80097a2:	2301      	movs	r3, #1
 80097a4:	4632      	mov	r2, r6
 80097a6:	4649      	mov	r1, r9
 80097a8:	4640      	mov	r0, r8
 80097aa:	47d0      	blx	sl
 80097ac:	3001      	adds	r0, #1
 80097ae:	d09b      	beq.n	80096e8 <_printf_i+0x164>
 80097b0:	3501      	adds	r5, #1
 80097b2:	68e3      	ldr	r3, [r4, #12]
 80097b4:	9903      	ldr	r1, [sp, #12]
 80097b6:	1a5b      	subs	r3, r3, r1
 80097b8:	42ab      	cmp	r3, r5
 80097ba:	dcf2      	bgt.n	80097a2 <_printf_i+0x21e>
 80097bc:	e7eb      	b.n	8009796 <_printf_i+0x212>
 80097be:	2500      	movs	r5, #0
 80097c0:	f104 0619 	add.w	r6, r4, #25
 80097c4:	e7f5      	b.n	80097b2 <_printf_i+0x22e>
 80097c6:	bf00      	nop
 80097c8:	08009dcd 	.word	0x08009dcd
 80097cc:	08009dde 	.word	0x08009dde

080097d0 <__sread>:
 80097d0:	b510      	push	{r4, lr}
 80097d2:	460c      	mov	r4, r1
 80097d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d8:	f000 fa5a 	bl	8009c90 <_read_r>
 80097dc:	2800      	cmp	r0, #0
 80097de:	bfab      	itete	ge
 80097e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097e2:	89a3      	ldrhlt	r3, [r4, #12]
 80097e4:	181b      	addge	r3, r3, r0
 80097e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097ea:	bfac      	ite	ge
 80097ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80097ee:	81a3      	strhlt	r3, [r4, #12]
 80097f0:	bd10      	pop	{r4, pc}

080097f2 <__swrite>:
 80097f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f6:	461f      	mov	r7, r3
 80097f8:	898b      	ldrh	r3, [r1, #12]
 80097fa:	05db      	lsls	r3, r3, #23
 80097fc:	4605      	mov	r5, r0
 80097fe:	460c      	mov	r4, r1
 8009800:	4616      	mov	r6, r2
 8009802:	d505      	bpl.n	8009810 <__swrite+0x1e>
 8009804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009808:	2302      	movs	r3, #2
 800980a:	2200      	movs	r2, #0
 800980c:	f000 f9c8 	bl	8009ba0 <_lseek_r>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800981a:	81a3      	strh	r3, [r4, #12]
 800981c:	4632      	mov	r2, r6
 800981e:	463b      	mov	r3, r7
 8009820:	4628      	mov	r0, r5
 8009822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009826:	f000 b869 	b.w	80098fc <_write_r>

0800982a <__sseek>:
 800982a:	b510      	push	{r4, lr}
 800982c:	460c      	mov	r4, r1
 800982e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009832:	f000 f9b5 	bl	8009ba0 <_lseek_r>
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	bf15      	itete	ne
 800983c:	6560      	strne	r0, [r4, #84]	; 0x54
 800983e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009846:	81a3      	strheq	r3, [r4, #12]
 8009848:	bf18      	it	ne
 800984a:	81a3      	strhne	r3, [r4, #12]
 800984c:	bd10      	pop	{r4, pc}

0800984e <__sclose>:
 800984e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009852:	f000 b8d3 	b.w	80099fc <_close_r>
	...

08009858 <__swbuf_r>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	460e      	mov	r6, r1
 800985c:	4614      	mov	r4, r2
 800985e:	4605      	mov	r5, r0
 8009860:	b118      	cbz	r0, 800986a <__swbuf_r+0x12>
 8009862:	6983      	ldr	r3, [r0, #24]
 8009864:	b90b      	cbnz	r3, 800986a <__swbuf_r+0x12>
 8009866:	f7ff fc19 	bl	800909c <__sinit>
 800986a:	4b21      	ldr	r3, [pc, #132]	; (80098f0 <__swbuf_r+0x98>)
 800986c:	429c      	cmp	r4, r3
 800986e:	d12b      	bne.n	80098c8 <__swbuf_r+0x70>
 8009870:	686c      	ldr	r4, [r5, #4]
 8009872:	69a3      	ldr	r3, [r4, #24]
 8009874:	60a3      	str	r3, [r4, #8]
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	071a      	lsls	r2, r3, #28
 800987a:	d52f      	bpl.n	80098dc <__swbuf_r+0x84>
 800987c:	6923      	ldr	r3, [r4, #16]
 800987e:	b36b      	cbz	r3, 80098dc <__swbuf_r+0x84>
 8009880:	6923      	ldr	r3, [r4, #16]
 8009882:	6820      	ldr	r0, [r4, #0]
 8009884:	1ac0      	subs	r0, r0, r3
 8009886:	6963      	ldr	r3, [r4, #20]
 8009888:	b2f6      	uxtb	r6, r6
 800988a:	4283      	cmp	r3, r0
 800988c:	4637      	mov	r7, r6
 800988e:	dc04      	bgt.n	800989a <__swbuf_r+0x42>
 8009890:	4621      	mov	r1, r4
 8009892:	4628      	mov	r0, r5
 8009894:	f000 f948 	bl	8009b28 <_fflush_r>
 8009898:	bb30      	cbnz	r0, 80098e8 <__swbuf_r+0x90>
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	3b01      	subs	r3, #1
 800989e:	60a3      	str	r3, [r4, #8]
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	6022      	str	r2, [r4, #0]
 80098a6:	701e      	strb	r6, [r3, #0]
 80098a8:	6963      	ldr	r3, [r4, #20]
 80098aa:	3001      	adds	r0, #1
 80098ac:	4283      	cmp	r3, r0
 80098ae:	d004      	beq.n	80098ba <__swbuf_r+0x62>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	07db      	lsls	r3, r3, #31
 80098b4:	d506      	bpl.n	80098c4 <__swbuf_r+0x6c>
 80098b6:	2e0a      	cmp	r6, #10
 80098b8:	d104      	bne.n	80098c4 <__swbuf_r+0x6c>
 80098ba:	4621      	mov	r1, r4
 80098bc:	4628      	mov	r0, r5
 80098be:	f000 f933 	bl	8009b28 <_fflush_r>
 80098c2:	b988      	cbnz	r0, 80098e8 <__swbuf_r+0x90>
 80098c4:	4638      	mov	r0, r7
 80098c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <__swbuf_r+0x9c>)
 80098ca:	429c      	cmp	r4, r3
 80098cc:	d101      	bne.n	80098d2 <__swbuf_r+0x7a>
 80098ce:	68ac      	ldr	r4, [r5, #8]
 80098d0:	e7cf      	b.n	8009872 <__swbuf_r+0x1a>
 80098d2:	4b09      	ldr	r3, [pc, #36]	; (80098f8 <__swbuf_r+0xa0>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	bf08      	it	eq
 80098d8:	68ec      	ldreq	r4, [r5, #12]
 80098da:	e7ca      	b.n	8009872 <__swbuf_r+0x1a>
 80098dc:	4621      	mov	r1, r4
 80098de:	4628      	mov	r0, r5
 80098e0:	f000 f81e 	bl	8009920 <__swsetup_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d0cb      	beq.n	8009880 <__swbuf_r+0x28>
 80098e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80098ec:	e7ea      	b.n	80098c4 <__swbuf_r+0x6c>
 80098ee:	bf00      	nop
 80098f0:	08009d7c 	.word	0x08009d7c
 80098f4:	08009d9c 	.word	0x08009d9c
 80098f8:	08009d5c 	.word	0x08009d5c

080098fc <_write_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4d07      	ldr	r5, [pc, #28]	; (800991c <_write_r+0x20>)
 8009900:	4604      	mov	r4, r0
 8009902:	4608      	mov	r0, r1
 8009904:	4611      	mov	r1, r2
 8009906:	2200      	movs	r2, #0
 8009908:	602a      	str	r2, [r5, #0]
 800990a:	461a      	mov	r2, r3
 800990c:	f7f6 fe32 	bl	8000574 <_write>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	d102      	bne.n	800991a <_write_r+0x1e>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	b103      	cbz	r3, 800991a <_write_r+0x1e>
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	bd38      	pop	{r3, r4, r5, pc}
 800991c:	20000920 	.word	0x20000920

08009920 <__swsetup_r>:
 8009920:	4b32      	ldr	r3, [pc, #200]	; (80099ec <__swsetup_r+0xcc>)
 8009922:	b570      	push	{r4, r5, r6, lr}
 8009924:	681d      	ldr	r5, [r3, #0]
 8009926:	4606      	mov	r6, r0
 8009928:	460c      	mov	r4, r1
 800992a:	b125      	cbz	r5, 8009936 <__swsetup_r+0x16>
 800992c:	69ab      	ldr	r3, [r5, #24]
 800992e:	b913      	cbnz	r3, 8009936 <__swsetup_r+0x16>
 8009930:	4628      	mov	r0, r5
 8009932:	f7ff fbb3 	bl	800909c <__sinit>
 8009936:	4b2e      	ldr	r3, [pc, #184]	; (80099f0 <__swsetup_r+0xd0>)
 8009938:	429c      	cmp	r4, r3
 800993a:	d10f      	bne.n	800995c <__swsetup_r+0x3c>
 800993c:	686c      	ldr	r4, [r5, #4]
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009944:	0719      	lsls	r1, r3, #28
 8009946:	d42c      	bmi.n	80099a2 <__swsetup_r+0x82>
 8009948:	06dd      	lsls	r5, r3, #27
 800994a:	d411      	bmi.n	8009970 <__swsetup_r+0x50>
 800994c:	2309      	movs	r3, #9
 800994e:	6033      	str	r3, [r6, #0]
 8009950:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009954:	81a3      	strh	r3, [r4, #12]
 8009956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800995a:	e03e      	b.n	80099da <__swsetup_r+0xba>
 800995c:	4b25      	ldr	r3, [pc, #148]	; (80099f4 <__swsetup_r+0xd4>)
 800995e:	429c      	cmp	r4, r3
 8009960:	d101      	bne.n	8009966 <__swsetup_r+0x46>
 8009962:	68ac      	ldr	r4, [r5, #8]
 8009964:	e7eb      	b.n	800993e <__swsetup_r+0x1e>
 8009966:	4b24      	ldr	r3, [pc, #144]	; (80099f8 <__swsetup_r+0xd8>)
 8009968:	429c      	cmp	r4, r3
 800996a:	bf08      	it	eq
 800996c:	68ec      	ldreq	r4, [r5, #12]
 800996e:	e7e6      	b.n	800993e <__swsetup_r+0x1e>
 8009970:	0758      	lsls	r0, r3, #29
 8009972:	d512      	bpl.n	800999a <__swsetup_r+0x7a>
 8009974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009976:	b141      	cbz	r1, 800998a <__swsetup_r+0x6a>
 8009978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800997c:	4299      	cmp	r1, r3
 800997e:	d002      	beq.n	8009986 <__swsetup_r+0x66>
 8009980:	4630      	mov	r0, r6
 8009982:	f7ff fa2b 	bl	8008ddc <_free_r>
 8009986:	2300      	movs	r3, #0
 8009988:	6363      	str	r3, [r4, #52]	; 0x34
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	2300      	movs	r3, #0
 8009994:	6063      	str	r3, [r4, #4]
 8009996:	6923      	ldr	r3, [r4, #16]
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	f043 0308 	orr.w	r3, r3, #8
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	6923      	ldr	r3, [r4, #16]
 80099a4:	b94b      	cbnz	r3, 80099ba <__swsetup_r+0x9a>
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099b0:	d003      	beq.n	80099ba <__swsetup_r+0x9a>
 80099b2:	4621      	mov	r1, r4
 80099b4:	4630      	mov	r0, r6
 80099b6:	f000 f92b 	bl	8009c10 <__smakebuf_r>
 80099ba:	89a0      	ldrh	r0, [r4, #12]
 80099bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099c0:	f010 0301 	ands.w	r3, r0, #1
 80099c4:	d00a      	beq.n	80099dc <__swsetup_r+0xbc>
 80099c6:	2300      	movs	r3, #0
 80099c8:	60a3      	str	r3, [r4, #8]
 80099ca:	6963      	ldr	r3, [r4, #20]
 80099cc:	425b      	negs	r3, r3
 80099ce:	61a3      	str	r3, [r4, #24]
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	b943      	cbnz	r3, 80099e6 <__swsetup_r+0xc6>
 80099d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099d8:	d1ba      	bne.n	8009950 <__swsetup_r+0x30>
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	0781      	lsls	r1, r0, #30
 80099de:	bf58      	it	pl
 80099e0:	6963      	ldrpl	r3, [r4, #20]
 80099e2:	60a3      	str	r3, [r4, #8]
 80099e4:	e7f4      	b.n	80099d0 <__swsetup_r+0xb0>
 80099e6:	2000      	movs	r0, #0
 80099e8:	e7f7      	b.n	80099da <__swsetup_r+0xba>
 80099ea:	bf00      	nop
 80099ec:	2000002c 	.word	0x2000002c
 80099f0:	08009d7c 	.word	0x08009d7c
 80099f4:	08009d9c 	.word	0x08009d9c
 80099f8:	08009d5c 	.word	0x08009d5c

080099fc <_close_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4d06      	ldr	r5, [pc, #24]	; (8009a18 <_close_r+0x1c>)
 8009a00:	2300      	movs	r3, #0
 8009a02:	4604      	mov	r4, r0
 8009a04:	4608      	mov	r0, r1
 8009a06:	602b      	str	r3, [r5, #0]
 8009a08:	f7f7 facf 	bl	8000faa <_close>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_close_r+0x1a>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_close_r+0x1a>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	20000920 	.word	0x20000920

08009a1c <__sflush_r>:
 8009a1c:	898a      	ldrh	r2, [r1, #12]
 8009a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a22:	4605      	mov	r5, r0
 8009a24:	0710      	lsls	r0, r2, #28
 8009a26:	460c      	mov	r4, r1
 8009a28:	d458      	bmi.n	8009adc <__sflush_r+0xc0>
 8009a2a:	684b      	ldr	r3, [r1, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	dc05      	bgt.n	8009a3c <__sflush_r+0x20>
 8009a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	dc02      	bgt.n	8009a3c <__sflush_r+0x20>
 8009a36:	2000      	movs	r0, #0
 8009a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a3e:	2e00      	cmp	r6, #0
 8009a40:	d0f9      	beq.n	8009a36 <__sflush_r+0x1a>
 8009a42:	2300      	movs	r3, #0
 8009a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a48:	682f      	ldr	r7, [r5, #0]
 8009a4a:	602b      	str	r3, [r5, #0]
 8009a4c:	d032      	beq.n	8009ab4 <__sflush_r+0x98>
 8009a4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	075a      	lsls	r2, r3, #29
 8009a54:	d505      	bpl.n	8009a62 <__sflush_r+0x46>
 8009a56:	6863      	ldr	r3, [r4, #4]
 8009a58:	1ac0      	subs	r0, r0, r3
 8009a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a5c:	b10b      	cbz	r3, 8009a62 <__sflush_r+0x46>
 8009a5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a60:	1ac0      	subs	r0, r0, r3
 8009a62:	2300      	movs	r3, #0
 8009a64:	4602      	mov	r2, r0
 8009a66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a68:	6a21      	ldr	r1, [r4, #32]
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	47b0      	blx	r6
 8009a6e:	1c43      	adds	r3, r0, #1
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	d106      	bne.n	8009a82 <__sflush_r+0x66>
 8009a74:	6829      	ldr	r1, [r5, #0]
 8009a76:	291d      	cmp	r1, #29
 8009a78:	d82c      	bhi.n	8009ad4 <__sflush_r+0xb8>
 8009a7a:	4a2a      	ldr	r2, [pc, #168]	; (8009b24 <__sflush_r+0x108>)
 8009a7c:	40ca      	lsrs	r2, r1
 8009a7e:	07d6      	lsls	r6, r2, #31
 8009a80:	d528      	bpl.n	8009ad4 <__sflush_r+0xb8>
 8009a82:	2200      	movs	r2, #0
 8009a84:	6062      	str	r2, [r4, #4]
 8009a86:	04d9      	lsls	r1, r3, #19
 8009a88:	6922      	ldr	r2, [r4, #16]
 8009a8a:	6022      	str	r2, [r4, #0]
 8009a8c:	d504      	bpl.n	8009a98 <__sflush_r+0x7c>
 8009a8e:	1c42      	adds	r2, r0, #1
 8009a90:	d101      	bne.n	8009a96 <__sflush_r+0x7a>
 8009a92:	682b      	ldr	r3, [r5, #0]
 8009a94:	b903      	cbnz	r3, 8009a98 <__sflush_r+0x7c>
 8009a96:	6560      	str	r0, [r4, #84]	; 0x54
 8009a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a9a:	602f      	str	r7, [r5, #0]
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	d0ca      	beq.n	8009a36 <__sflush_r+0x1a>
 8009aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aa4:	4299      	cmp	r1, r3
 8009aa6:	d002      	beq.n	8009aae <__sflush_r+0x92>
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	f7ff f997 	bl	8008ddc <_free_r>
 8009aae:	2000      	movs	r0, #0
 8009ab0:	6360      	str	r0, [r4, #52]	; 0x34
 8009ab2:	e7c1      	b.n	8009a38 <__sflush_r+0x1c>
 8009ab4:	6a21      	ldr	r1, [r4, #32]
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4628      	mov	r0, r5
 8009aba:	47b0      	blx	r6
 8009abc:	1c41      	adds	r1, r0, #1
 8009abe:	d1c7      	bne.n	8009a50 <__sflush_r+0x34>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d0c4      	beq.n	8009a50 <__sflush_r+0x34>
 8009ac6:	2b1d      	cmp	r3, #29
 8009ac8:	d001      	beq.n	8009ace <__sflush_r+0xb2>
 8009aca:	2b16      	cmp	r3, #22
 8009acc:	d101      	bne.n	8009ad2 <__sflush_r+0xb6>
 8009ace:	602f      	str	r7, [r5, #0]
 8009ad0:	e7b1      	b.n	8009a36 <__sflush_r+0x1a>
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ad8:	81a3      	strh	r3, [r4, #12]
 8009ada:	e7ad      	b.n	8009a38 <__sflush_r+0x1c>
 8009adc:	690f      	ldr	r7, [r1, #16]
 8009ade:	2f00      	cmp	r7, #0
 8009ae0:	d0a9      	beq.n	8009a36 <__sflush_r+0x1a>
 8009ae2:	0793      	lsls	r3, r2, #30
 8009ae4:	680e      	ldr	r6, [r1, #0]
 8009ae6:	bf08      	it	eq
 8009ae8:	694b      	ldreq	r3, [r1, #20]
 8009aea:	600f      	str	r7, [r1, #0]
 8009aec:	bf18      	it	ne
 8009aee:	2300      	movne	r3, #0
 8009af0:	eba6 0807 	sub.w	r8, r6, r7
 8009af4:	608b      	str	r3, [r1, #8]
 8009af6:	f1b8 0f00 	cmp.w	r8, #0
 8009afa:	dd9c      	ble.n	8009a36 <__sflush_r+0x1a>
 8009afc:	6a21      	ldr	r1, [r4, #32]
 8009afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b00:	4643      	mov	r3, r8
 8009b02:	463a      	mov	r2, r7
 8009b04:	4628      	mov	r0, r5
 8009b06:	47b0      	blx	r6
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	dc06      	bgt.n	8009b1a <__sflush_r+0xfe>
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b18:	e78e      	b.n	8009a38 <__sflush_r+0x1c>
 8009b1a:	4407      	add	r7, r0
 8009b1c:	eba8 0800 	sub.w	r8, r8, r0
 8009b20:	e7e9      	b.n	8009af6 <__sflush_r+0xda>
 8009b22:	bf00      	nop
 8009b24:	20400001 	.word	0x20400001

08009b28 <_fflush_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	690b      	ldr	r3, [r1, #16]
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	b913      	cbnz	r3, 8009b38 <_fflush_r+0x10>
 8009b32:	2500      	movs	r5, #0
 8009b34:	4628      	mov	r0, r5
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	b118      	cbz	r0, 8009b42 <_fflush_r+0x1a>
 8009b3a:	6983      	ldr	r3, [r0, #24]
 8009b3c:	b90b      	cbnz	r3, 8009b42 <_fflush_r+0x1a>
 8009b3e:	f7ff faad 	bl	800909c <__sinit>
 8009b42:	4b14      	ldr	r3, [pc, #80]	; (8009b94 <_fflush_r+0x6c>)
 8009b44:	429c      	cmp	r4, r3
 8009b46:	d11b      	bne.n	8009b80 <_fflush_r+0x58>
 8009b48:	686c      	ldr	r4, [r5, #4]
 8009b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0ef      	beq.n	8009b32 <_fflush_r+0xa>
 8009b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b54:	07d0      	lsls	r0, r2, #31
 8009b56:	d404      	bmi.n	8009b62 <_fflush_r+0x3a>
 8009b58:	0599      	lsls	r1, r3, #22
 8009b5a:	d402      	bmi.n	8009b62 <_fflush_r+0x3a>
 8009b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b5e:	f7ff fb3b 	bl	80091d8 <__retarget_lock_acquire_recursive>
 8009b62:	4628      	mov	r0, r5
 8009b64:	4621      	mov	r1, r4
 8009b66:	f7ff ff59 	bl	8009a1c <__sflush_r>
 8009b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b6c:	07da      	lsls	r2, r3, #31
 8009b6e:	4605      	mov	r5, r0
 8009b70:	d4e0      	bmi.n	8009b34 <_fflush_r+0xc>
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	059b      	lsls	r3, r3, #22
 8009b76:	d4dd      	bmi.n	8009b34 <_fflush_r+0xc>
 8009b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b7a:	f7ff fb2e 	bl	80091da <__retarget_lock_release_recursive>
 8009b7e:	e7d9      	b.n	8009b34 <_fflush_r+0xc>
 8009b80:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <_fflush_r+0x70>)
 8009b82:	429c      	cmp	r4, r3
 8009b84:	d101      	bne.n	8009b8a <_fflush_r+0x62>
 8009b86:	68ac      	ldr	r4, [r5, #8]
 8009b88:	e7df      	b.n	8009b4a <_fflush_r+0x22>
 8009b8a:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <_fflush_r+0x74>)
 8009b8c:	429c      	cmp	r4, r3
 8009b8e:	bf08      	it	eq
 8009b90:	68ec      	ldreq	r4, [r5, #12]
 8009b92:	e7da      	b.n	8009b4a <_fflush_r+0x22>
 8009b94:	08009d7c 	.word	0x08009d7c
 8009b98:	08009d9c 	.word	0x08009d9c
 8009b9c:	08009d5c 	.word	0x08009d5c

08009ba0 <_lseek_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d07      	ldr	r5, [pc, #28]	; (8009bc0 <_lseek_r+0x20>)
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	4608      	mov	r0, r1
 8009ba8:	4611      	mov	r1, r2
 8009baa:	2200      	movs	r2, #0
 8009bac:	602a      	str	r2, [r5, #0]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f7f7 fa22 	bl	8000ff8 <_lseek>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d102      	bne.n	8009bbe <_lseek_r+0x1e>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	b103      	cbz	r3, 8009bbe <_lseek_r+0x1e>
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	20000920 	.word	0x20000920

08009bc4 <__swhatbuf_r>:
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	460e      	mov	r6, r1
 8009bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bcc:	2900      	cmp	r1, #0
 8009bce:	b096      	sub	sp, #88	; 0x58
 8009bd0:	4614      	mov	r4, r2
 8009bd2:	461d      	mov	r5, r3
 8009bd4:	da08      	bge.n	8009be8 <__swhatbuf_r+0x24>
 8009bd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	602a      	str	r2, [r5, #0]
 8009bde:	061a      	lsls	r2, r3, #24
 8009be0:	d410      	bmi.n	8009c04 <__swhatbuf_r+0x40>
 8009be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009be6:	e00e      	b.n	8009c06 <__swhatbuf_r+0x42>
 8009be8:	466a      	mov	r2, sp
 8009bea:	f000 f863 	bl	8009cb4 <_fstat_r>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	dbf1      	blt.n	8009bd6 <__swhatbuf_r+0x12>
 8009bf2:	9a01      	ldr	r2, [sp, #4]
 8009bf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bfc:	425a      	negs	r2, r3
 8009bfe:	415a      	adcs	r2, r3
 8009c00:	602a      	str	r2, [r5, #0]
 8009c02:	e7ee      	b.n	8009be2 <__swhatbuf_r+0x1e>
 8009c04:	2340      	movs	r3, #64	; 0x40
 8009c06:	2000      	movs	r0, #0
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	b016      	add	sp, #88	; 0x58
 8009c0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c10 <__smakebuf_r>:
 8009c10:	898b      	ldrh	r3, [r1, #12]
 8009c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c14:	079d      	lsls	r5, r3, #30
 8009c16:	4606      	mov	r6, r0
 8009c18:	460c      	mov	r4, r1
 8009c1a:	d507      	bpl.n	8009c2c <__smakebuf_r+0x1c>
 8009c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	6123      	str	r3, [r4, #16]
 8009c24:	2301      	movs	r3, #1
 8009c26:	6163      	str	r3, [r4, #20]
 8009c28:	b002      	add	sp, #8
 8009c2a:	bd70      	pop	{r4, r5, r6, pc}
 8009c2c:	ab01      	add	r3, sp, #4
 8009c2e:	466a      	mov	r2, sp
 8009c30:	f7ff ffc8 	bl	8009bc4 <__swhatbuf_r>
 8009c34:	9900      	ldr	r1, [sp, #0]
 8009c36:	4605      	mov	r5, r0
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f7ff f93b 	bl	8008eb4 <_malloc_r>
 8009c3e:	b948      	cbnz	r0, 8009c54 <__smakebuf_r+0x44>
 8009c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c44:	059a      	lsls	r2, r3, #22
 8009c46:	d4ef      	bmi.n	8009c28 <__smakebuf_r+0x18>
 8009c48:	f023 0303 	bic.w	r3, r3, #3
 8009c4c:	f043 0302 	orr.w	r3, r3, #2
 8009c50:	81a3      	strh	r3, [r4, #12]
 8009c52:	e7e3      	b.n	8009c1c <__smakebuf_r+0xc>
 8009c54:	4b0d      	ldr	r3, [pc, #52]	; (8009c8c <__smakebuf_r+0x7c>)
 8009c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	6020      	str	r0, [r4, #0]
 8009c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c60:	81a3      	strh	r3, [r4, #12]
 8009c62:	9b00      	ldr	r3, [sp, #0]
 8009c64:	6163      	str	r3, [r4, #20]
 8009c66:	9b01      	ldr	r3, [sp, #4]
 8009c68:	6120      	str	r0, [r4, #16]
 8009c6a:	b15b      	cbz	r3, 8009c84 <__smakebuf_r+0x74>
 8009c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c70:	4630      	mov	r0, r6
 8009c72:	f000 f831 	bl	8009cd8 <_isatty_r>
 8009c76:	b128      	cbz	r0, 8009c84 <__smakebuf_r+0x74>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f023 0303 	bic.w	r3, r3, #3
 8009c7e:	f043 0301 	orr.w	r3, r3, #1
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	89a0      	ldrh	r0, [r4, #12]
 8009c86:	4305      	orrs	r5, r0
 8009c88:	81a5      	strh	r5, [r4, #12]
 8009c8a:	e7cd      	b.n	8009c28 <__smakebuf_r+0x18>
 8009c8c:	08009035 	.word	0x08009035

08009c90 <_read_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4d07      	ldr	r5, [pc, #28]	; (8009cb0 <_read_r+0x20>)
 8009c94:	4604      	mov	r4, r0
 8009c96:	4608      	mov	r0, r1
 8009c98:	4611      	mov	r1, r2
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	602a      	str	r2, [r5, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f7f7 f966 	bl	8000f70 <_read>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d102      	bne.n	8009cae <_read_r+0x1e>
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	b103      	cbz	r3, 8009cae <_read_r+0x1e>
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	20000920 	.word	0x20000920

08009cb4 <_fstat_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4d07      	ldr	r5, [pc, #28]	; (8009cd4 <_fstat_r+0x20>)
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4604      	mov	r4, r0
 8009cbc:	4608      	mov	r0, r1
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	602b      	str	r3, [r5, #0]
 8009cc2:	f7f7 f97e 	bl	8000fc2 <_fstat>
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	d102      	bne.n	8009cd0 <_fstat_r+0x1c>
 8009cca:	682b      	ldr	r3, [r5, #0]
 8009ccc:	b103      	cbz	r3, 8009cd0 <_fstat_r+0x1c>
 8009cce:	6023      	str	r3, [r4, #0]
 8009cd0:	bd38      	pop	{r3, r4, r5, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20000920 	.word	0x20000920

08009cd8 <_isatty_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4d06      	ldr	r5, [pc, #24]	; (8009cf4 <_isatty_r+0x1c>)
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4604      	mov	r4, r0
 8009ce0:	4608      	mov	r0, r1
 8009ce2:	602b      	str	r3, [r5, #0]
 8009ce4:	f7f7 f97d 	bl	8000fe2 <_isatty>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d102      	bne.n	8009cf2 <_isatty_r+0x1a>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	b103      	cbz	r3, 8009cf2 <_isatty_r+0x1a>
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	20000920 	.word	0x20000920

08009cf8 <_init>:
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	bf00      	nop
 8009cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfe:	bc08      	pop	{r3}
 8009d00:	469e      	mov	lr, r3
 8009d02:	4770      	bx	lr

08009d04 <_fini>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	bf00      	nop
 8009d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0a:	bc08      	pop	{r3}
 8009d0c:	469e      	mov	lr, r3
 8009d0e:	4770      	bx	lr
