
encoder_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f04  08009f04  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009f04  08009f04  00019f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f0c  08009f0c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f0c  08009f0c  00019f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f10  08009f10  00019f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008dc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000096c  2000096c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ea48  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000417c  00000000  00000000  0003eb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001948  00000000  00000000  00042c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c8  00000000  00000000  000445d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026184  00000000  00000000  00045d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fddb  00000000  00000000  0006bf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d72c1  00000000  00000000  0008bcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00162fb8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073e0  00000000  00000000  00163008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e0c 	.word	0x08009e0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009e0c 	.word	0x08009e0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t rot_new_state;
uint32_t rot_old_state;
uint32_t rot_cnt;
uint32_t _write(int file, char* p, int len){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	230a      	movs	r3, #10
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <_write+0x24>)
 800058a:	f004 fe1e 	bl	80051ca <HAL_UART_Transmit>
	return len;
 800058e:	687b      	ldr	r3, [r7, #4]

}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000230 	.word	0x20000230

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fe33 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f837 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 fa05 	bl	80009b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ae:	f000 f89d 	bl	80006ec <MX_I2C1_Init>
  MX_I2S3_Init();
 80005b2:	f000 f8c9 	bl	8000748 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005b6:	f000 f8f7 	bl	80007a8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005ba:	f008 f94f 	bl	800885c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f9d1 	bl	8000964 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005c2:	f000 f97b 	bl	80008bc <MX_TIM3_Init>
  MX_TIM2_Init();
 80005c6:	f000 f925 	bl	8000814 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80005ca:	213c      	movs	r1, #60	; 0x3c
 80005cc:	4810      	ldr	r0, [pc, #64]	; (8000610 <main+0x74>)
 80005ce:	f004 fa70 	bl	8004ab2 <HAL_TIM_Encoder_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005d2:	f008 f969 	bl	80088a8 <MX_USB_HOST_Process>
    uint32_t last_print = 0, now = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]

    long int count = (int)TIM2->CNT/4;
 80005de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da00      	bge.n	80005ea <main+0x4e>
 80005e8:	3303      	adds	r3, #3
 80005ea:	109b      	asrs	r3, r3, #2
 80005ec:	607b      	str	r3, [r7, #4]

	now = HAL_GetTick();
 80005ee:	f000 fe73 	bl	80012d8 <HAL_GetTick>
 80005f2:	60b8      	str	r0, [r7, #8]
	if (now - last_print >= 1000) {
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005fe:	d3e8      	bcc.n	80005d2 <main+0x36>
		printf("Encoder counter = %ld\n", count );
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4804      	ldr	r0, [pc, #16]	; (8000614 <main+0x78>)
 8000604:	f008 fd54 	bl	80090b0 <iprintf>
		last_print = now;
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	60fb      	str	r3, [r7, #12]
  {
 800060c:	e7e1      	b.n	80005d2 <main+0x36>
 800060e:	bf00      	nop
 8000610:	200001a0 	.word	0x200001a0
 8000614:	08009e24 	.word	0x08009e24

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f008 fc5a 	bl	8008ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800068c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000696:	2307      	movs	r3, #7
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fb00 	bl	8003ca4 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006aa:	f000 fa83 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2105      	movs	r1, #5
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 fd61 	bl	8004194 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d8:	f000 fa6c 	bl	8000bb4 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f002 fcd7 	bl	80030dc <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 fa3e 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000ac 	.word	0x200000ac
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_I2S3_Init+0x54>)
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <MX_I2S3_Init+0x58>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2S3_Init+0x54>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_I2S3_Init+0x54>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_I2S3_Init+0x54>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_I2S3_Init+0x54>)
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_I2S3_Init+0x54>)
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <MX_I2S3_Init+0x5c>)
 8000772:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2S3_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_I2S3_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2S3_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_I2S3_Init+0x54>)
 8000788:	f002 fdec 	bl	8003364 <HAL_I2S_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000792:	f000 fa0f 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000100 	.word	0x20000100
 80007a0:	40003c00 	.word	0x40003c00
 80007a4:	00017700 	.word	0x00017700

080007a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_SPI1_Init+0x64>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <MX_SPI1_Init+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x64>)
 80007b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x64>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x64>)
 80007f4:	220a      	movs	r2, #10
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_SPI1_Init+0x64>)
 80007fa:	f004 f82b 	bl	8004854 <HAL_SPI_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000804:	f000 f9d6 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000148 	.word	0x20000148
 8000810:	40013000 	.word	0x40013000

08000814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2224      	movs	r2, #36	; 0x24
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f008 fb5c 	bl	8008ee0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_TIM2_Init+0xa4>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800084a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_TIM2_Init+0xa4>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000858:	2303      	movs	r3, #3
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000860:	2301      	movs	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000870:	2301      	movs	r3, #1
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000884:	f004 f86f 	bl	8004966 <HAL_TIM_Encoder_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800088e:	f000 f991 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_TIM2_Init+0xa4>)
 80008a0:	f004 fbb6 	bl	8005010 <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008aa:	f000 f983 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200001a0 	.word	0x200001a0

080008bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2224      	movs	r2, #36	; 0x24
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 fb08 	bl	8008ee0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_TIM3_Init+0xa0>)
 80008da:	4a21      	ldr	r2, [pc, #132]	; (8000960 <MX_TIM3_Init+0xa4>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_TIM3_Init+0xa0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_TIM3_Init+0xa0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_TIM3_Init+0xa0>)
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_TIM3_Init+0xa0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_TIM3_Init+0xa0>)
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008fe:	2303      	movs	r3, #3
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000906:	2301      	movs	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000916:	2301      	movs	r3, #1
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_TIM3_Init+0xa0>)
 800092a:	f004 f81c 	bl	8004966 <HAL_TIM_Encoder_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000934:	f000 f93e 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_TIM3_Init+0xa0>)
 8000946:	f004 fb63 	bl	8005010 <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000950:	f000 f930 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200001e8 	.word	0x200001e8
 8000960:	40000400 	.word	0x40000400

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_USART2_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800099c:	f004 fbc8 	bl	8005130 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 f905 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000230 	.word	0x20000230
 80009b4:	40004400 	.word	0x40004400

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
 80009d2:	4b72      	ldr	r3, [pc, #456]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a71      	ldr	r2, [pc, #452]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b6f      	ldr	r3, [pc, #444]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	61bb      	str	r3, [r7, #24]
 80009e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	4b6b      	ldr	r3, [pc, #428]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a6a      	ldr	r2, [pc, #424]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b68      	ldr	r3, [pc, #416]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b64      	ldr	r3, [pc, #400]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a63      	ldr	r2, [pc, #396]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b61      	ldr	r3, [pc, #388]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b5d      	ldr	r3, [pc, #372]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a5c      	ldr	r2, [pc, #368]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b5a      	ldr	r3, [pc, #360]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b56      	ldr	r3, [pc, #344]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a55      	ldr	r2, [pc, #340]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b53      	ldr	r3, [pc, #332]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b4f      	ldr	r3, [pc, #316]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a4e      	ldr	r2, [pc, #312]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b4c      	ldr	r3, [pc, #304]	; (8000b9c <MX_GPIO_Init+0x1e4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2108      	movs	r1, #8
 8000a7a:	4849      	ldr	r0, [pc, #292]	; (8000ba0 <MX_GPIO_Init+0x1e8>)
 8000a7c:	f000 ff0a 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2101      	movs	r1, #1
 8000a84:	4847      	ldr	r0, [pc, #284]	; (8000ba4 <MX_GPIO_Init+0x1ec>)
 8000a86:	f000 ff05 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a90:	4845      	ldr	r0, [pc, #276]	; (8000ba8 <MX_GPIO_Init+0x1f0>)
 8000a92:	f000 feff 	bl	8001894 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a96:	2308      	movs	r3, #8
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	483c      	ldr	r0, [pc, #240]	; (8000ba0 <MX_GPIO_Init+0x1e8>)
 8000aae:	f000 fd55 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4836      	ldr	r0, [pc, #216]	; (8000ba4 <MX_GPIO_Init+0x1ec>)
 8000aca:	f000 fd47 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ace:	2308      	movs	r3, #8
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	482e      	ldr	r0, [pc, #184]	; (8000ba4 <MX_GPIO_Init+0x1ec>)
 8000aea:	f000 fd37 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000af2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	482a      	ldr	r0, [pc, #168]	; (8000bac <MX_GPIO_Init+0x1f4>)
 8000b04:	f000 fd2a 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <MX_GPIO_Init+0x1f8>)
 8000b1c:	f000 fd1e 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b32:	2305      	movs	r3, #5
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481c      	ldr	r0, [pc, #112]	; (8000bb0 <MX_GPIO_Init+0x1f8>)
 8000b3e:	f000 fd0d 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b42:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b46:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <MX_GPIO_Init+0x1f0>)
 8000b5c:	f000 fcfe 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b60:	2320      	movs	r3, #32
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_GPIO_Init+0x1f0>)
 8000b74:	f000 fcf2 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b7c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_GPIO_Init+0x1e8>)
 8000b8e:	f000 fce5 	bl	800155c <HAL_GPIO_Init>

}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	; 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020c00 	.word	0x40020c00
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f000 fc6a 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800

08000c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_I2C_MspInit+0x84>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12c      	bne.n	8000c8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c54:	2312      	movs	r3, #18
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c60:	2304      	movs	r3, #4
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480c      	ldr	r0, [pc, #48]	; (8000c9c <HAL_I2C_MspInit+0x8c>)
 8000c6c:	f000 fc76 	bl	800155c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_I2C_MspInit+0x88>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40005400 	.word	0x40005400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020400 	.word	0x40020400

08000ca0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a31      	ldr	r2, [pc, #196]	; (8000d90 <HAL_I2S_MspInit+0xf0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d15a      	bne.n	8000d86 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cd4:	23c0      	movs	r3, #192	; 0xc0
 8000cd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 fc77 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cec:	f7ff ff62 	bl	8000bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <HAL_I2S_MspInit+0xf4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a26      	ldr	r2, [pc, #152]	; (8000d94 <HAL_I2S_MspInit+0xf4>)
 8000cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_I2S_MspInit+0xf4>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HAL_I2S_MspInit+0xf4>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <HAL_I2S_MspInit+0xf4>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <HAL_I2S_MspInit+0xf4>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_I2S_MspInit+0xf4>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <HAL_I2S_MspInit+0xf4>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6313      	str	r3, [r2, #48]	; 0x30
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_I2S_MspInit+0xf4>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d44:	2310      	movs	r3, #16
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d54:	2306      	movs	r3, #6
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <HAL_I2S_MspInit+0xf8>)
 8000d60:	f000 fbfc 	bl	800155c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d64:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d76:	2306      	movs	r3, #6
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4806      	ldr	r0, [pc, #24]	; (8000d9c <HAL_I2S_MspInit+0xfc>)
 8000d82:	f000 fbeb 	bl	800155c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3738      	adds	r7, #56	; 0x38
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40003c00 	.word	0x40003c00
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40020800 	.word	0x40020800

08000da0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_SPI_MspInit+0x84>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d12b      	bne.n	8000e1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dfa:	23e0      	movs	r3, #224	; 0xe0
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_SPI_MspInit+0x8c>)
 8000e16:	f000 fba1 	bl	800155c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40013000 	.word	0x40013000
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000

08000e30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e50:	d135      	bne.n	8000ebe <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a42      	ldr	r2, [pc, #264]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	4b3c      	ldr	r3, [pc, #240]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a3b      	ldr	r2, [pc, #236]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b39      	ldr	r3, [pc, #228]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000e8a:	f248 0302 	movw	r3, #32770	; 0x8002
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4830      	ldr	r0, [pc, #192]	; (8000f68 <HAL_TIM_Encoder_MspInit+0x138>)
 8000ea8:	f000 fb58 	bl	800155c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	201c      	movs	r0, #28
 8000eb2:	f000 fb1c 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eb6:	201c      	movs	r0, #28
 8000eb8:	f000 fb35 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ebc:	e04e      	b.n	8000f5c <HAL_TIM_Encoder_MspInit+0x12c>
  else if(htim_encoder->Instance==TIM3)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a2a      	ldr	r2, [pc, #168]	; (8000f6c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d149      	bne.n	8000f5c <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x134>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f1c:	2340      	movs	r3, #64	; 0x40
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f38:	f000 fb10 	bl	800155c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <HAL_TIM_Encoder_MspInit+0x144>)
 8000f58:	f000 fb00 	bl	800155c <HAL_GPIO_Init>
}
 8000f5c:	bf00      	nop
 8000f5e:	3730      	adds	r7, #48	; 0x30
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40000400 	.word	0x40000400
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020400 	.word	0x40020400

08000f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_UART_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12b      	bne.n	8000ff2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fd2:	230c      	movs	r3, #12
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <HAL_UART_MspInit+0x8c>)
 8000fee:	f000 fab5 	bl	800155c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40004400 	.word	0x40004400
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f92c 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <TIM2_IRQHandler+0x10>)
 8001062:	f003 fdd4 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200001a0 	.word	0x200001a0

08001070 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <OTG_FS_IRQHandler+0x10>)
 8001076:	f000 fe91 	bl	8001d9c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000658 	.word	0x20000658

08001084 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e00a      	b.n	80010ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001096:	f3af 8000 	nop.w
 800109a:	4601      	mov	r1, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf0      	blt.n	8001096 <_read+0x12>
  }

  return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_close>:
  }
  return len;
}

int _close(int file)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e6:	605a      	str	r2, [r3, #4]
  return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_isatty>:

int _isatty(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	; (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f007 fe88 	bl	8008e6c <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20020000 	.word	0x20020000
 8001188:	00000400 	.word	0x00000400
 800118c:	20000274 	.word	0x20000274
 8001190:	20000970 	.word	0x20000970

08001194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <SystemInit+0x20>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <SystemInit+0x20>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011be:	490e      	ldr	r1, [pc, #56]	; (80011f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d4:	4c0b      	ldr	r4, [pc, #44]	; (8001204 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e2:	f7ff ffd7 	bl	8001194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f007 fe47 	bl	8008e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff f9d7 	bl	800059c <main>
  bx  lr    
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80011fc:	08009f14 	.word	0x08009f14
  ldr r2, =_sbss
 8001200:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001204:	2000096c 	.word	0x2000096c

08001208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <HAL_Init+0x40>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_Init+0x40>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x40>)
 800122e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f94f 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fcbe 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f967 	bl	8001542 <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800128c:	f000 f92f 	bl	80014ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008
 80012d4:	20000278 	.word	0x20000278

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000278 	.word	0x20000278

080012f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff ffee 	bl	80012d8 <HAL_GetTick>
 80012fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001308:	d005      	beq.n	8001316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_Delay+0x44>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001316:	bf00      	nop
 8001318:	f7ff ffde 	bl	80012d8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	429a      	cmp	r2, r3
 8001326:	d8f7      	bhi.n	8001318 <HAL_Delay+0x28>
  {
  }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <__NVIC_EnableIRQ+0x38>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b8:	f7ff ff8e 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff29 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001500:	f7ff ff3e 	bl	8001380 <__NVIC_GetPriorityGrouping>
 8001504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff ff8e 	bl	800142c <NVIC_EncodePriority>
 8001510:	4602      	mov	r2, r0
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff5d 	bl	80013d8 <__NVIC_SetPriority>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff31 	bl	800139c <__NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffa2 	bl	8001494 <SysTick_Config>
 8001550:	4603      	mov	r3, r0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e16b      	b.n	8001850 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001578:	2201      	movs	r2, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	429a      	cmp	r2, r3
 8001592:	f040 815a 	bne.w	800184a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d005      	beq.n	80015ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d130      	bne.n	8001610 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e4:	2201      	movs	r2, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 0201 	and.w	r2, r3, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b03      	cmp	r3, #3
 800161a:	d017      	beq.n	800164c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d123      	bne.n	80016a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	08da      	lsrs	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3208      	adds	r2, #8
 8001660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	08da      	lsrs	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3208      	adds	r2, #8
 800169a:	69b9      	ldr	r1, [r7, #24]
 800169c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0203 	and.w	r2, r3, #3
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80b4 	beq.w	800184a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b60      	ldr	r3, [pc, #384]	; (8001868 <HAL_GPIO_Init+0x30c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a5f      	ldr	r2, [pc, #380]	; (8001868 <HAL_GPIO_Init+0x30c>)
 80016ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b5d      	ldr	r3, [pc, #372]	; (8001868 <HAL_GPIO_Init+0x30c>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fe:	4a5b      	ldr	r2, [pc, #364]	; (800186c <HAL_GPIO_Init+0x310>)
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	3302      	adds	r3, #2
 8001706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	220f      	movs	r2, #15
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a52      	ldr	r2, [pc, #328]	; (8001870 <HAL_GPIO_Init+0x314>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d02b      	beq.n	8001782 <HAL_GPIO_Init+0x226>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a51      	ldr	r2, [pc, #324]	; (8001874 <HAL_GPIO_Init+0x318>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d025      	beq.n	800177e <HAL_GPIO_Init+0x222>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a50      	ldr	r2, [pc, #320]	; (8001878 <HAL_GPIO_Init+0x31c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01f      	beq.n	800177a <HAL_GPIO_Init+0x21e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4f      	ldr	r2, [pc, #316]	; (800187c <HAL_GPIO_Init+0x320>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d019      	beq.n	8001776 <HAL_GPIO_Init+0x21a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4e      	ldr	r2, [pc, #312]	; (8001880 <HAL_GPIO_Init+0x324>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0x216>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4d      	ldr	r2, [pc, #308]	; (8001884 <HAL_GPIO_Init+0x328>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00d      	beq.n	800176e <HAL_GPIO_Init+0x212>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4c      	ldr	r2, [pc, #304]	; (8001888 <HAL_GPIO_Init+0x32c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d007      	beq.n	800176a <HAL_GPIO_Init+0x20e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4b      	ldr	r2, [pc, #300]	; (800188c <HAL_GPIO_Init+0x330>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_GPIO_Init+0x20a>
 8001762:	2307      	movs	r3, #7
 8001764:	e00e      	b.n	8001784 <HAL_GPIO_Init+0x228>
 8001766:	2308      	movs	r3, #8
 8001768:	e00c      	b.n	8001784 <HAL_GPIO_Init+0x228>
 800176a:	2306      	movs	r3, #6
 800176c:	e00a      	b.n	8001784 <HAL_GPIO_Init+0x228>
 800176e:	2305      	movs	r3, #5
 8001770:	e008      	b.n	8001784 <HAL_GPIO_Init+0x228>
 8001772:	2304      	movs	r3, #4
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x228>
 8001776:	2303      	movs	r3, #3
 8001778:	e004      	b.n	8001784 <HAL_GPIO_Init+0x228>
 800177a:	2302      	movs	r3, #2
 800177c:	e002      	b.n	8001784 <HAL_GPIO_Init+0x228>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_GPIO_Init+0x228>
 8001782:	2300      	movs	r3, #0
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f002 0203 	and.w	r2, r2, #3
 800178a:	0092      	lsls	r2, r2, #2
 800178c:	4093      	lsls	r3, r2
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001794:	4935      	ldr	r1, [pc, #212]	; (800186c <HAL_GPIO_Init+0x310>)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a2:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <HAL_GPIO_Init+0x334>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c6:	4a32      	ldr	r2, [pc, #200]	; (8001890 <HAL_GPIO_Init+0x334>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017cc:	4b30      	ldr	r3, [pc, #192]	; (8001890 <HAL_GPIO_Init+0x334>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f0:	4a27      	ldr	r2, [pc, #156]	; (8001890 <HAL_GPIO_Init+0x334>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <HAL_GPIO_Init+0x334>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800181a:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <HAL_GPIO_Init+0x334>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_GPIO_Init+0x334>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001844:	4a12      	ldr	r2, [pc, #72]	; (8001890 <HAL_GPIO_Init+0x334>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3301      	adds	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b0f      	cmp	r3, #15
 8001854:	f67f ae90 	bls.w	8001578 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	40013800 	.word	0x40013800
 8001870:	40020000 	.word	0x40020000
 8001874:	40020400 	.word	0x40020400
 8001878:	40020800 	.word	0x40020800
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40021000 	.word	0x40021000
 8001884:	40021400 	.word	0x40021400
 8001888:	40021800 	.word	0x40021800
 800188c:	40021c00 	.word	0x40021c00
 8001890:	40013c00 	.word	0x40013c00

08001894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018b0:	e003      	b.n	80018ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	041a      	lsls	r2, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	619a      	str	r2, [r3, #24]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c8:	b08f      	sub	sp, #60	; 0x3c
 80018ca:	af0a      	add	r7, sp, #40	; 0x28
 80018cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e054      	b.n	8001982 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f007 f810 	bl	8008918 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2203      	movs	r2, #3
 80018fc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f004 f83e 	bl	8005998 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	687e      	ldr	r6, [r7, #4]
 8001924:	466d      	mov	r5, sp
 8001926:	f106 0410 	add.w	r4, r6, #16
 800192a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001932:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001936:	e885 0003 	stmia.w	r5, {r0, r1}
 800193a:	1d33      	adds	r3, r6, #4
 800193c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193e:	6838      	ldr	r0, [r7, #0]
 8001940:	f003 ffb8 	bl	80058b4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f004 f835 	bl	80059ba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	687e      	ldr	r6, [r7, #4]
 8001958:	466d      	mov	r5, sp
 800195a:	f106 0410 	add.w	r4, r6, #16
 800195e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001966:	e894 0003 	ldmia.w	r4, {r0, r1}
 800196a:	e885 0003 	stmia.w	r5, {r0, r1}
 800196e:	1d33      	adds	r3, r6, #4
 8001970:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001972:	6838      	ldr	r0, [r7, #0]
 8001974:	f004 f9be 	bl	8005cf4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800198a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800198a:	b590      	push	{r4, r7, lr}
 800198c:	b089      	sub	sp, #36	; 0x24
 800198e:	af04      	add	r7, sp, #16
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	4608      	mov	r0, r1
 8001994:	4611      	mov	r1, r2
 8001996:	461a      	mov	r2, r3
 8001998:	4603      	mov	r3, r0
 800199a:	70fb      	strb	r3, [r7, #3]
 800199c:	460b      	mov	r3, r1
 800199e:	70bb      	strb	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_HCD_HC_Init+0x28>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e076      	b.n	8001aa0 <HAL_HCD_HC_Init+0x116>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	333d      	adds	r3, #61	; 0x3d
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	212c      	movs	r1, #44	; 0x2c
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	3338      	adds	r3, #56	; 0x38
 80019da:	787a      	ldrb	r2, [r7, #1]
 80019dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3340      	adds	r3, #64	; 0x40
 80019ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019ee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	3339      	adds	r3, #57	; 0x39
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	333f      	adds	r3, #63	; 0x3f
 8001a10:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	78ba      	ldrb	r2, [r7, #2]
 8001a1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a1e:	b2d0      	uxtb	r0, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	212c      	movs	r1, #44	; 0x2c
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	333a      	adds	r3, #58	; 0x3a
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da09      	bge.n	8001a4c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	212c      	movs	r1, #44	; 0x2c
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	333b      	adds	r3, #59	; 0x3b
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	e008      	b.n	8001a5e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	212c      	movs	r1, #44	; 0x2c
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	333b      	adds	r3, #59	; 0x3b
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	333c      	adds	r3, #60	; 0x3c
 8001a6c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a70:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	787c      	ldrb	r4, [r7, #1]
 8001a78:	78ba      	ldrb	r2, [r7, #2]
 8001a7a:	78f9      	ldrb	r1, [r7, #3]
 8001a7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	f004 fab7 	bl	8006000 <USB_HC_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}

08001aa8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_HCD_HC_Halt+0x1e>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e00f      	b.n	8001ae6 <HAL_HCD_HC_Halt+0x3e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 fd07 	bl	80064ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	4608      	mov	r0, r1
 8001afa:	4611      	mov	r1, r2
 8001afc:	461a      	mov	r2, r3
 8001afe:	4603      	mov	r3, r0
 8001b00:	70fb      	strb	r3, [r7, #3]
 8001b02:	460b      	mov	r3, r1
 8001b04:	70bb      	strb	r3, [r7, #2]
 8001b06:	4613      	mov	r3, r2
 8001b08:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	333b      	adds	r3, #59	; 0x3b
 8001b18:	78ba      	ldrb	r2, [r7, #2]
 8001b1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	212c      	movs	r1, #44	; 0x2c
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	333f      	adds	r3, #63	; 0x3f
 8001b2a:	787a      	ldrb	r2, [r7, #1]
 8001b2c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b2e:	7c3b      	ldrb	r3, [r7, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d112      	bne.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	3342      	adds	r3, #66	; 0x42
 8001b42:	2203      	movs	r2, #3
 8001b44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	212c      	movs	r1, #44	; 0x2c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	333d      	adds	r3, #61	; 0x3d
 8001b54:	7f3a      	ldrb	r2, [r7, #28]
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e008      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	212c      	movs	r1, #44	; 0x2c
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	4413      	add	r3, r2
 8001b66:	3342      	adds	r3, #66	; 0x42
 8001b68:	2202      	movs	r2, #2
 8001b6a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	f200 80c6 	bhi.w	8001d00 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b74:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7a:	bf00      	nop
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001ced 	.word	0x08001ced
 8001b84:	08001bf1 	.word	0x08001bf1
 8001b88:	08001c6f 	.word	0x08001c6f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b8c:	7c3b      	ldrb	r3, [r7, #16]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	f040 80b8 	bne.w	8001d04 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b94:	78bb      	ldrb	r3, [r7, #2]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 80b4 	bne.w	8001d04 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b9c:	8b3b      	ldrh	r3, [r7, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d108      	bne.n	8001bb4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	212c      	movs	r1, #44	; 0x2c
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	3355      	adds	r3, #85	; 0x55
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	212c      	movs	r1, #44	; 0x2c
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3355      	adds	r3, #85	; 0x55
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	212c      	movs	r1, #44	; 0x2c
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3342      	adds	r3, #66	; 0x42
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bda:	e093      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	212c      	movs	r1, #44	; 0x2c
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	3342      	adds	r3, #66	; 0x42
 8001bea:	2202      	movs	r2, #2
 8001bec:	701a      	strb	r2, [r3, #0]
      break;
 8001bee:	e089      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bf0:	78bb      	ldrb	r3, [r7, #2]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d11d      	bne.n	8001c32 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3355      	adds	r3, #85	; 0x55
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	3342      	adds	r3, #66	; 0x42
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c1c:	e073      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3342      	adds	r3, #66	; 0x42
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	701a      	strb	r2, [r3, #0]
      break;
 8001c30:	e069      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3354      	adds	r3, #84	; 0x54
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	212c      	movs	r1, #44	; 0x2c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3342      	adds	r3, #66	; 0x42
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
      break;
 8001c58:	e055      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3342      	adds	r3, #66	; 0x42
 8001c68:	2202      	movs	r2, #2
 8001c6a:	701a      	strb	r2, [r3, #0]
      break;
 8001c6c:	e04b      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c6e:	78bb      	ldrb	r3, [r7, #2]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d11d      	bne.n	8001cb0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3355      	adds	r3, #85	; 0x55
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3342      	adds	r3, #66	; 0x42
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c9a:	e034      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	212c      	movs	r1, #44	; 0x2c
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3342      	adds	r3, #66	; 0x42
 8001caa:	2202      	movs	r2, #2
 8001cac:	701a      	strb	r2, [r3, #0]
      break;
 8001cae:	e02a      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	212c      	movs	r1, #44	; 0x2c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	3354      	adds	r3, #84	; 0x54
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d109      	bne.n	8001cd8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3342      	adds	r3, #66	; 0x42
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
      break;
 8001cd6:	e016      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3342      	adds	r3, #66	; 0x42
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	701a      	strb	r2, [r3, #0]
      break;
 8001cea:	e00c      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3342      	adds	r3, #66	; 0x42
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
      break;
 8001cfe:	e002      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d00:	bf00      	nop
 8001d02:	e000      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d04:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	3344      	adds	r3, #68	; 0x44
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	8b3a      	ldrh	r2, [r7, #24]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	202c      	movs	r0, #44	; 0x2c
 8001d20:	fb00 f303 	mul.w	r3, r0, r3
 8001d24:	440b      	add	r3, r1
 8001d26:	334c      	adds	r3, #76	; 0x4c
 8001d28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3360      	adds	r3, #96	; 0x60
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3350      	adds	r3, #80	; 0x50
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	212c      	movs	r1, #44	; 0x2c
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	3339      	adds	r3, #57	; 0x39
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	212c      	movs	r1, #44	; 0x2c
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3361      	adds	r3, #97	; 0x61
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	222c      	movs	r2, #44	; 0x2c
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	3338      	adds	r3, #56	; 0x38
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	18d1      	adds	r1, r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f004 fa5a 	bl	8006244 <USB_HC_StartXfer>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 ff5b 	bl	8005c6e <USB_GetMode>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f040 80f6 	bne.w	8001fac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 ff3f 	bl	8005c48 <USB_ReadInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80ec 	beq.w	8001faa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 ff36 	bl	8005c48 <USB_ReadInterrupts>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001de6:	d104      	bne.n	8001df2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001df0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 ff26 	bl	8005c48 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e06:	d104      	bne.n	8001e12 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 ff16 	bl	8005c48 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e26:	d104      	bne.n	8001e32 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 ff06 	bl	8005c48 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d103      	bne.n	8001e4e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 fef8 	bl	8005c48 <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e62:	d11c      	bne.n	8001e9e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e6c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e7e:	2110      	movs	r1, #16
 8001e80:	6938      	ldr	r0, [r7, #16]
 8001e82:	f003 fde7 	bl	8005a54 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e86:	6938      	ldr	r0, [r7, #16]
 8001e88:	f003 fe18 	bl	8005abc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 ffee 	bl	8005e74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f006 fdbb 	bl	8008a14 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fed0 	bl	8005c48 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb2:	d102      	bne.n	8001eba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f001 f89e 	bl	8002ff6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fec2 	bl	8005c48 <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d106      	bne.n	8001edc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f006 fd84 	bl	80089dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 feb1 	bl	8005c48 <USB_ReadInterrupts>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d101      	bne.n	8001ef4 <HAL_HCD_IRQHandler+0x158>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_HCD_IRQHandler+0x15a>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d012      	beq.n	8001f20 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0210 	bic.w	r2, r2, #16
 8001f08:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 ffa1 	bl	8002e52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0210 	orr.w	r2, r2, #16
 8001f1e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 fe8f 	bl	8005c48 <USB_ReadInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f34:	d13a      	bne.n	8001fac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 fac4 	bl	80064c8 <USB_HC_ReadInterrupt>
 8001f40:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e025      	b.n	8001f94 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d018      	beq.n	8001f8e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f72:	d106      	bne.n	8001f82 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8ab 	bl	80020d6 <HCD_HC_IN_IRQHandler>
 8001f80:	e005      	b.n	8001f8e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fbf9 	bl	8002780 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3d4      	bcc.n	8001f48 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa6:	615a      	str	r2, [r3, #20]
 8001fa8:	e000      	b.n	8001fac <HAL_HCD_IRQHandler+0x210>
      return;
 8001faa:	bf00      	nop
    }
  }
}
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_HCD_Start+0x16>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e013      	b.n	8001ff0 <HAL_HCD_Start+0x3e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 ffb0 	bl	8005f3c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fcc8 	bl	8005976 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_HCD_Stop+0x16>
 800200a:	2302      	movs	r3, #2
 800200c:	e00d      	b.n	800202a <HAL_HCD_Stop+0x32>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f004 fb9e 	bl	800675c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f003 ff52 	bl	8005ee8 <USB_ResetPort>
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	3360      	adds	r3, #96	; 0x60
 8002068:	781b      	ldrb	r3, [r3, #0]
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3350      	adds	r3, #80	; 0x50
 8002090:	681b      	ldr	r3, [r3, #0]
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 ff96 	bl	8005fdc <USB_GetCurrentFrame>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 ff71 	bl	8005fae <USB_GetHostSpeed>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b04      	cmp	r3, #4
 8002104:	d11a      	bne.n	800213c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	461a      	mov	r2, r3
 8002114:	2304      	movs	r3, #4
 8002116:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3361      	adds	r3, #97	; 0x61
 8002126:	2206      	movs	r2, #6
 8002128:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f004 f9d8 	bl	80064ea <USB_HC_Halt>
 800213a:	e0af      	b.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002152:	d11b      	bne.n	800218c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	461a      	mov	r2, r3
 8002162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002166:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3361      	adds	r3, #97	; 0x61
 8002176:	2207      	movs	r2, #7
 8002178:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f004 f9b0 	bl	80064ea <USB_HC_Halt>
 800218a:	e087      	b.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d109      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	2320      	movs	r3, #32
 80021b2:	6093      	str	r3, [r2, #8]
 80021b4:	e072      	b.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d11a      	bne.n	8002202 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	461a      	mov	r2, r3
 80021da:	2308      	movs	r3, #8
 80021dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3361      	adds	r3, #97	; 0x61
 80021ec:	2205      	movs	r2, #5
 80021ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f004 f975 	bl	80064ea <USB_HC_Halt>
 8002200:	e04c      	b.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002218:	d11b      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	461a      	mov	r2, r3
 8002228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800222c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	3361      	adds	r3, #97	; 0x61
 800223c:	2208      	movs	r2, #8
 800223e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f004 f94d 	bl	80064ea <USB_HC_Halt>
 8002250:	e024      	b.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002264:	2b80      	cmp	r3, #128	; 0x80
 8002266:	d119      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	3361      	adds	r3, #97	; 0x61
 8002288:	2206      	movs	r2, #6
 800228a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f004 f927 	bl	80064ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b2:	d112      	bne.n	80022da <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 f913 	bl	80064ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	461a      	mov	r2, r3
 80022d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022d8:	e24e      	b.n	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	f040 80df 	bne.w	80024b0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d019      	beq.n	800232e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3348      	adds	r3, #72	; 0x48
 8002308:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	0159      	lsls	r1, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	440b      	add	r3, r1
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800231c:	1ad2      	subs	r2, r2, r3
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	202c      	movs	r0, #44	; 0x2c
 8002324:	fb00 f303 	mul.w	r3, r0, r3
 8002328:	440b      	add	r3, r1
 800232a:	3350      	adds	r3, #80	; 0x50
 800232c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3361      	adds	r3, #97	; 0x61
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	335c      	adds	r3, #92	; 0x5c
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	461a      	mov	r2, r3
 8002360:	2301      	movs	r3, #1
 8002362:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	333f      	adds	r3, #63	; 0x3f
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	333f      	adds	r3, #63	; 0x3f
 8002386:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002388:	2b02      	cmp	r3, #2
 800238a:	d111      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f004 f8a7 	bl	80064ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	461a      	mov	r2, r3
 80023aa:	2310      	movs	r3, #16
 80023ac:	6093      	str	r3, [r2, #8]
 80023ae:	e03a      	b.n	8002426 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	333f      	adds	r3, #63	; 0x3f
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d009      	beq.n	80023d8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	333f      	adds	r3, #63	; 0x3f
 80023d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d126      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	0151      	lsls	r1, r2, #5
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	440a      	add	r2, r1
 80023ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3360      	adds	r3, #96	; 0x60
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	b2d9      	uxtb	r1, r3
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	202c      	movs	r0, #44	; 0x2c
 8002414:	fb00 f303 	mul.w	r3, r0, r3
 8002418:	4413      	add	r3, r2
 800241a:	3360      	adds	r3, #96	; 0x60
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f006 fb05 	bl	8008a30 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d12b      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	3348      	adds	r3, #72	; 0x48
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	202c      	movs	r0, #44	; 0x2c
 8002444:	fb00 f202 	mul.w	r2, r0, r2
 8002448:	440a      	add	r2, r1
 800244a:	3240      	adds	r2, #64	; 0x40
 800244c:	8812      	ldrh	r2, [r2, #0]
 800244e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 818e 	beq.w	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3354      	adds	r3, #84	; 0x54
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	f083 0301 	eor.w	r3, r3, #1
 8002470:	b2d8      	uxtb	r0, r3
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3354      	adds	r3, #84	; 0x54
 8002480:	4602      	mov	r2, r0
 8002482:	701a      	strb	r2, [r3, #0]
}
 8002484:	e178      	b.n	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3354      	adds	r3, #84	; 0x54
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2d8      	uxtb	r0, r3
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3354      	adds	r3, #84	; 0x54
 80024aa:	4602      	mov	r2, r0
 80024ac:	701a      	strb	r2, [r3, #0]
}
 80024ae:	e163      	b.n	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	f040 80f6 	bne.w	80026b4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3361      	adds	r3, #97	; 0x61
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d109      	bne.n	80024f0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3360      	adds	r3, #96	; 0x60
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e0c9      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3361      	adds	r3, #97	; 0x61
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b05      	cmp	r3, #5
 8002502:	d109      	bne.n	8002518 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3360      	adds	r3, #96	; 0x60
 8002512:	2205      	movs	r2, #5
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e0b5      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3361      	adds	r3, #97	; 0x61
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d009      	beq.n	8002540 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3361      	adds	r3, #97	; 0x61
 800253a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800253c:	2b08      	cmp	r3, #8
 800253e:	d150      	bne.n	80025e2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	335c      	adds	r3, #92	; 0x5c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	202c      	movs	r0, #44	; 0x2c
 8002558:	fb00 f303 	mul.w	r3, r0, r3
 800255c:	440b      	add	r3, r1
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	335c      	adds	r3, #92	; 0x5c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d912      	bls.n	800259c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	335c      	adds	r3, #92	; 0x5c
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	2204      	movs	r2, #4
 8002598:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800259a:	e073      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	212c      	movs	r1, #44	; 0x2c
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	3360      	adds	r3, #96	; 0x60
 80025aa:	2202      	movs	r2, #2
 80025ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025c4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025cc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	461a      	mov	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025e0:	e050      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3361      	adds	r3, #97	; 0x61
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d122      	bne.n	800263c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3360      	adds	r3, #96	; 0x60
 8002604:	2202      	movs	r2, #2
 8002606:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800261e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002626:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	461a      	mov	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e023      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3361      	adds	r3, #97	; 0x61
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b07      	cmp	r3, #7
 800264e:	d119      	bne.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	335c      	adds	r3, #92	; 0x5c
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	202c      	movs	r0, #44	; 0x2c
 8002668:	fb00 f303 	mul.w	r3, r0, r3
 800266c:	440b      	add	r3, r1
 800266e:	335c      	adds	r3, #92	; 0x5c
 8002670:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3360      	adds	r3, #96	; 0x60
 8002680:	2204      	movs	r2, #4
 8002682:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	461a      	mov	r2, r3
 8002692:	2302      	movs	r3, #2
 8002694:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	b2d9      	uxtb	r1, r3
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	202c      	movs	r0, #44	; 0x2c
 80026a0:	fb00 f303 	mul.w	r3, r0, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3360      	adds	r3, #96	; 0x60
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f006 f9bf 	bl	8008a30 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026b2:	e061      	b.n	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d156      	bne.n	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	333f      	adds	r3, #63	; 0x3f
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d111      	bne.n	8002702 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	335c      	adds	r3, #92	; 0x5c
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f003 fef5 	bl	80064ea <USB_HC_Halt>
 8002700:	e031      	b.n	8002766 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	333f      	adds	r3, #63	; 0x3f
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	333f      	adds	r3, #63	; 0x3f
 8002724:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002726:	2b02      	cmp	r3, #2
 8002728:	d11d      	bne.n	8002766 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	335c      	adds	r3, #92	; 0x5c
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d110      	bne.n	8002766 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3361      	adds	r3, #97	; 0x61
 8002752:	2203      	movs	r2, #3
 8002754:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f003 fec2 	bl	80064ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	2310      	movs	r3, #16
 8002776:	6093      	str	r3, [r2, #8]
}
 8002778:	bf00      	nop
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d11a      	bne.n	80027e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	461a      	mov	r2, r3
 80027be:	2304      	movs	r3, #4
 80027c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	3361      	adds	r3, #97	; 0x61
 80027d0:	2206      	movs	r2, #6
 80027d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 fe83 	bl	80064ea <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80027e4:	e331      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d12e      	bne.n	800285a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	461a      	mov	r2, r3
 800280a:	2320      	movs	r3, #32
 800280c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	333d      	adds	r3, #61	; 0x3d
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	f040 8313 	bne.w	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	333d      	adds	r3, #61	; 0x3d
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3360      	adds	r3, #96	; 0x60
 8002844:	2202      	movs	r2, #2
 8002846:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f003 fe49 	bl	80064ea <USB_HC_Halt>
}
 8002858:	e2f7      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002870:	d112      	bne.n	8002898 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	461a      	mov	r2, r3
 8002880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002884:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f003 fe2a 	bl	80064ea <USB_HC_Halt>
}
 8002896:	e2d8      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d140      	bne.n	8002930 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	335c      	adds	r3, #92	; 0x5c
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d2:	2b40      	cmp	r3, #64	; 0x40
 80028d4:	d111      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	333d      	adds	r3, #61	; 0x3d
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	461a      	mov	r2, r3
 80028f6:	2340      	movs	r3, #64	; 0x40
 80028f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	461a      	mov	r2, r3
 8002908:	2301      	movs	r3, #1
 800290a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3361      	adds	r3, #97	; 0x61
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f003 fdde 	bl	80064ea <USB_HC_Halt>
}
 800292e:	e28c      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d12c      	bne.n	80029a0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	3361      	adds	r3, #97	; 0x61
 8002954:	2204      	movs	r2, #4
 8002956:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	333d      	adds	r3, #61	; 0x3d
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	335c      	adds	r3, #92	; 0x5c
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f003 fdaf 	bl	80064ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	461a      	mov	r2, r3
 800299a:	2340      	movs	r3, #64	; 0x40
 800299c:	6093      	str	r3, [r2, #8]
}
 800299e:	e254      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d11a      	bne.n	80029ec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	461a      	mov	r2, r3
 80029c4:	2308      	movs	r3, #8
 80029c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3361      	adds	r3, #97	; 0x61
 80029d6:	2205      	movs	r2, #5
 80029d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 fd80 	bl	80064ea <USB_HC_Halt>
}
 80029ea:	e22e      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d140      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3361      	adds	r3, #97	; 0x61
 8002a22:	2203      	movs	r2, #3
 8002a24:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	333d      	adds	r3, #61	; 0x3d
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d112      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	333c      	adds	r3, #60	; 0x3c
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d108      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	333d      	adds	r3, #61	; 0x3d
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fd3d 	bl	80064ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2310      	movs	r3, #16
 8002a80:	6093      	str	r3, [r2, #8]
}
 8002a82:	e1e2      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b80      	cmp	r3, #128	; 0x80
 8002a98:	d164      	bne.n	8002b64 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d111      	bne.n	8002ac6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3361      	adds	r3, #97	; 0x61
 8002ab0:	2206      	movs	r2, #6
 8002ab2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 fd13 	bl	80064ea <USB_HC_Halt>
 8002ac4:	e044      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	335c      	adds	r3, #92	; 0x5c
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	202c      	movs	r0, #44	; 0x2c
 8002ade:	fb00 f303 	mul.w	r3, r0, r3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	335c      	adds	r3, #92	; 0x5c
 8002ae6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	335c      	adds	r3, #92	; 0x5c
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d920      	bls.n	8002b3e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	335c      	adds	r3, #92	; 0x5c
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3360      	adds	r3, #96	; 0x60
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	b2d9      	uxtb	r1, r3
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	202c      	movs	r0, #44	; 0x2c
 8002b2a:	fb00 f303 	mul.w	r3, r0, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3360      	adds	r3, #96	; 0x60
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f005 ff7a 	bl	8008a30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b3c:	e008      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3360      	adds	r3, #96	; 0x60
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	6093      	str	r3, [r2, #8]
}
 8002b62:	e172      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d11b      	bne.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3361      	adds	r3, #97	; 0x61
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 fca6 	bl	80064ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002baa:	461a      	mov	r2, r3
 8002bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb0:	6093      	str	r3, [r2, #8]
}
 8002bb2:	e14a      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	f040 813f 	bne.w	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3361      	adds	r3, #97	; 0x61
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d17d      	bne.n	8002cdc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3360      	adds	r3, #96	; 0x60
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	333f      	adds	r3, #63	; 0x3f
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d00a      	beq.n	8002c1c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	333f      	adds	r3, #63	; 0x3f
 8002c14:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	f040 8100 	bne.w	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d113      	bne.n	8002c4c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3355      	adds	r3, #85	; 0x55
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2d8      	uxtb	r0, r3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3355      	adds	r3, #85	; 0x55
 8002c48:	4602      	mov	r2, r0
 8002c4a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	f040 80e3 	bne.w	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	334c      	adds	r3, #76	; 0x4c
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80d8 	beq.w	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	334c      	adds	r3, #76	; 0x4c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	202c      	movs	r0, #44	; 0x2c
 8002c82:	fb00 f202 	mul.w	r2, r0, r2
 8002c86:	440a      	add	r2, r1
 8002c88:	3240      	adds	r2, #64	; 0x40
 8002c8a:	8812      	ldrh	r2, [r2, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	202c      	movs	r0, #44	; 0x2c
 8002c96:	fb00 f202 	mul.w	r2, r0, r2
 8002c9a:	440a      	add	r2, r1
 8002c9c:	3240      	adds	r2, #64	; 0x40
 8002c9e:	8812      	ldrh	r2, [r2, #0]
 8002ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80b5 	beq.w	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3355      	adds	r3, #85	; 0x55
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	f083 0301 	eor.w	r3, r3, #1
 8002cc6:	b2d8      	uxtb	r0, r3
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3355      	adds	r3, #85	; 0x55
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e09f      	b.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3361      	adds	r3, #97	; 0x61
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d109      	bne.n	8002d04 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3360      	adds	r3, #96	; 0x60
 8002cfe:	2202      	movs	r2, #2
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	e08b      	b.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	; 0x61
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d109      	bne.n	8002d2c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3360      	adds	r3, #96	; 0x60
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e077      	b.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3361      	adds	r3, #97	; 0x61
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d109      	bne.n	8002d54 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3360      	adds	r3, #96	; 0x60
 8002d4e:	2205      	movs	r2, #5
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e063      	b.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3361      	adds	r3, #97	; 0x61
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b06      	cmp	r3, #6
 8002d66:	d009      	beq.n	8002d7c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3361      	adds	r3, #97	; 0x61
 8002d76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d14f      	bne.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	335c      	adds	r3, #92	; 0x5c
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	202c      	movs	r0, #44	; 0x2c
 8002d94:	fb00 f303 	mul.w	r3, r0, r3
 8002d98:	440b      	add	r3, r1
 8002d9a:	335c      	adds	r3, #92	; 0x5c
 8002d9c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	335c      	adds	r3, #92	; 0x5c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d912      	bls.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	335c      	adds	r3, #92	; 0x5c
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3360      	adds	r3, #96	; 0x60
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e021      	b.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	3360      	adds	r3, #96	; 0x60
 8002de6:	2202      	movs	r2, #2
 8002de8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e00:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e08:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e16:	461a      	mov	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	b2d9      	uxtb	r1, r3
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	202c      	movs	r0, #44	; 0x2c
 8002e38:	fb00 f303 	mul.w	r3, r0, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3360      	adds	r3, #96	; 0x60
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f005 fdf3 	bl	8008a30 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e4a:	bf00      	nop
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b08a      	sub	sp, #40	; 0x28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	0c5b      	lsrs	r3, r3, #17
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d004      	beq.n	8002e98 <HCD_RXQLVL_IRQHandler+0x46>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	f000 80a9 	beq.w	8002fe8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e96:	e0aa      	b.n	8002fee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80a6 	beq.w	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3344      	adds	r3, #68	; 0x44
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 809b 	beq.w	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3350      	adds	r3, #80	; 0x50
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	441a      	add	r2, r3
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	202c      	movs	r0, #44	; 0x2c
 8002ed0:	fb00 f303 	mul.w	r3, r0, r3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	334c      	adds	r3, #76	; 0x4c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d87a      	bhi.n	8002fd4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3344      	adds	r3, #68	; 0x44
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	b292      	uxth	r2, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f002 fe4e 	bl	8005b98 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3344      	adds	r3, #68	; 0x44
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	441a      	add	r2, r3
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	202c      	movs	r0, #44	; 0x2c
 8002f16:	fb00 f303 	mul.w	r3, r0, r3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3344      	adds	r3, #68	; 0x44
 8002f1e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3350      	adds	r3, #80	; 0x50
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	441a      	add	r2, r3
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	202c      	movs	r0, #44	; 0x2c
 8002f3a:	fb00 f303 	mul.w	r3, r0, r3
 8002f3e:	440b      	add	r3, r1
 8002f40:	3350      	adds	r3, #80	; 0x50
 8002f42:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	0cdb      	lsrs	r3, r3, #19
 8002f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f58:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3340      	adds	r3, #64	; 0x40
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d13c      	bne.n	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d039      	beq.n	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f8e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f96:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3354      	adds	r3, #84	; 0x54
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	f083 0301 	eor.w	r3, r3, #1
 8002fbe:	b2d8      	uxtb	r0, r3
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	3354      	adds	r3, #84	; 0x54
 8002fce:	4602      	mov	r2, r0
 8002fd0:	701a      	strb	r2, [r3, #0]
      break;
 8002fd2:	e00b      	b.n	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3360      	adds	r3, #96	; 0x60
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	701a      	strb	r2, [r3, #0]
      break;
 8002fe6:	e001      	b.n	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fe8:	bf00      	nop
 8002fea:	e000      	b.n	8002fee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fec:	bf00      	nop
  }
}
 8002fee:	bf00      	nop
 8002ff0:	3728      	adds	r7, #40	; 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b086      	sub	sp, #24
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003022:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	d10b      	bne.n	8003046 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d102      	bne.n	800303e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f005 fcdd 	bl	80089f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b08      	cmp	r3, #8
 800304e:	d132      	bne.n	80030b6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f043 0308 	orr.w	r3, r3, #8
 8003056:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d126      	bne.n	80030b0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d113      	bne.n	8003092 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003074:	d106      	bne.n	8003084 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2102      	movs	r1, #2
 800307c:	4618      	mov	r0, r3
 800307e:	f002 fef9 	bl	8005e74 <USB_InitFSLSPClkSel>
 8003082:	e011      	b.n	80030a8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f002 fef2 	bl	8005e74 <USB_InitFSLSPClkSel>
 8003090:	e00a      	b.n	80030a8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d106      	bne.n	80030a8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030a0:	461a      	mov	r2, r3
 80030a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030a6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f005 fccf 	bl	8008a4c <HAL_HCD_PortEnabled_Callback>
 80030ae:	e002      	b.n	80030b6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f005 fcd9 	bl	8008a68 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d103      	bne.n	80030c8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f043 0320 	orr.w	r3, r3, #32
 80030c6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030ce:	461a      	mov	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e12b      	b.n	8003346 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd fd84 	bl	8000c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	; 0x24
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800312e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800313e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003140:	f001 fa20 	bl	8004584 <HAL_RCC_GetPCLK1Freq>
 8003144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4a81      	ldr	r2, [pc, #516]	; (8003350 <HAL_I2C_Init+0x274>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d807      	bhi.n	8003160 <HAL_I2C_Init+0x84>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a80      	ldr	r2, [pc, #512]	; (8003354 <HAL_I2C_Init+0x278>)
 8003154:	4293      	cmp	r3, r2
 8003156:	bf94      	ite	ls
 8003158:	2301      	movls	r3, #1
 800315a:	2300      	movhi	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e006      	b.n	800316e <HAL_I2C_Init+0x92>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a7d      	ldr	r2, [pc, #500]	; (8003358 <HAL_I2C_Init+0x27c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	bf94      	ite	ls
 8003168:	2301      	movls	r3, #1
 800316a:	2300      	movhi	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0e7      	b.n	8003346 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a78      	ldr	r2, [pc, #480]	; (800335c <HAL_I2C_Init+0x280>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	0c9b      	lsrs	r3, r3, #18
 8003180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a6a      	ldr	r2, [pc, #424]	; (8003350 <HAL_I2C_Init+0x274>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d802      	bhi.n	80031b0 <HAL_I2C_Init+0xd4>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3301      	adds	r3, #1
 80031ae:	e009      	b.n	80031c4 <HAL_I2C_Init+0xe8>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	4a69      	ldr	r2, [pc, #420]	; (8003360 <HAL_I2C_Init+0x284>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	3301      	adds	r3, #1
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	495c      	ldr	r1, [pc, #368]	; (8003350 <HAL_I2C_Init+0x274>)
 80031e0:	428b      	cmp	r3, r1
 80031e2:	d819      	bhi.n	8003218 <HAL_I2C_Init+0x13c>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1e59      	subs	r1, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031f8:	400b      	ands	r3, r1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_I2C_Init+0x138>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1e59      	subs	r1, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fbb1 f3f3 	udiv	r3, r1, r3
 800320c:	3301      	adds	r3, #1
 800320e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003212:	e051      	b.n	80032b8 <HAL_I2C_Init+0x1dc>
 8003214:	2304      	movs	r3, #4
 8003216:	e04f      	b.n	80032b8 <HAL_I2C_Init+0x1dc>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d111      	bne.n	8003244 <HAL_I2C_Init+0x168>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1e58      	subs	r0, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	440b      	add	r3, r1
 800322e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003232:	3301      	adds	r3, #1
 8003234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	e012      	b.n	800326a <HAL_I2C_Init+0x18e>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1e58      	subs	r0, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	0099      	lsls	r1, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	fbb0 f3f3 	udiv	r3, r0, r3
 800325a:	3301      	adds	r3, #1
 800325c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Init+0x196>
 800326e:	2301      	movs	r3, #1
 8003270:	e022      	b.n	80032b8 <HAL_I2C_Init+0x1dc>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10e      	bne.n	8003298 <HAL_I2C_Init+0x1bc>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1e58      	subs	r0, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	440b      	add	r3, r1
 8003288:	fbb0 f3f3 	udiv	r3, r0, r3
 800328c:	3301      	adds	r3, #1
 800328e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003296:	e00f      	b.n	80032b8 <HAL_I2C_Init+0x1dc>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e58      	subs	r0, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	0099      	lsls	r1, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	6809      	ldr	r1, [r1, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69da      	ldr	r2, [r3, #28]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6911      	ldr	r1, [r2, #16]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68d2      	ldr	r2, [r2, #12]
 80032f2:	4311      	orrs	r1, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	000186a0 	.word	0x000186a0
 8003354:	001e847f 	.word	0x001e847f
 8003358:	003d08ff 	.word	0x003d08ff
 800335c:	431bde83 	.word	0x431bde83
 8003360:	10624dd3 	.word	0x10624dd3

08003364 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e128      	b.n	80035c8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a90      	ldr	r2, [pc, #576]	; (80035d0 <HAL_I2S_Init+0x26c>)
 800338e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7fd fc85 	bl	8000ca0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2202      	movs	r2, #2
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033ac:	f023 030f 	bic.w	r3, r3, #15
 80033b0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2202      	movs	r2, #2
 80033b8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d060      	beq.n	8003484 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033ca:	2310      	movs	r3, #16
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	e001      	b.n	80033d4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033d0:	2320      	movs	r3, #32
 80033d2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d802      	bhi.n	80033e2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f001 f9d8 	bl	8004798 <HAL_RCCEx_GetPeriphCLKFreq>
 80033e8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f2:	d125      	bne.n	8003440 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d010      	beq.n	800341e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	fbb2 f2f3 	udiv	r2, r2, r3
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	461a      	mov	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	3305      	adds	r3, #5
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	e01f      	b.n	800345e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	fbb2 f2f3 	udiv	r2, r2, r3
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	461a      	mov	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	3305      	adds	r3, #5
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	e00e      	b.n	800345e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	fbb2 f2f3 	udiv	r2, r2, r3
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	3305      	adds	r3, #5
 800345c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4a5c      	ldr	r2, [pc, #368]	; (80035d4 <HAL_I2S_Init+0x270>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	08db      	lsrs	r3, r3, #3
 8003468:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e003      	b.n	800348c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003484:	2302      	movs	r3, #2
 8003486:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d902      	bls.n	8003498 <HAL_I2S_Init+0x134>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2bff      	cmp	r3, #255	; 0xff
 8003496:	d907      	bls.n	80034a8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	f043 0210 	orr.w	r2, r3, #16
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e08f      	b.n	80035c8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	ea42 0103 	orr.w	r1, r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034c6:	f023 030f 	bic.w	r3, r3, #15
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6851      	ldr	r1, [r2, #4]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6892      	ldr	r2, [r2, #8]
 80034d2:	4311      	orrs	r1, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68d2      	ldr	r2, [r2, #12]
 80034d8:	4311      	orrs	r1, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6992      	ldr	r2, [r2, #24]
 80034de:	430a      	orrs	r2, r1
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d161      	bne.n	80035b8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a38      	ldr	r2, [pc, #224]	; (80035d8 <HAL_I2S_Init+0x274>)
 80034f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a37      	ldr	r2, [pc, #220]	; (80035dc <HAL_I2S_Init+0x278>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d101      	bne.n	8003508 <HAL_I2S_Init+0x1a4>
 8003504:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_I2S_Init+0x27c>)
 8003506:	e001      	b.n	800350c <HAL_I2S_Init+0x1a8>
 8003508:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	4932      	ldr	r1, [pc, #200]	; (80035dc <HAL_I2S_Init+0x278>)
 8003514:	428a      	cmp	r2, r1
 8003516:	d101      	bne.n	800351c <HAL_I2S_Init+0x1b8>
 8003518:	4a31      	ldr	r2, [pc, #196]	; (80035e0 <HAL_I2S_Init+0x27c>)
 800351a:	e001      	b.n	8003520 <HAL_I2S_Init+0x1bc>
 800351c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003520:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003524:	f023 030f 	bic.w	r3, r3, #15
 8003528:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2b      	ldr	r2, [pc, #172]	; (80035dc <HAL_I2S_Init+0x278>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_I2S_Init+0x1d4>
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <HAL_I2S_Init+0x27c>)
 8003536:	e001      	b.n	800353c <HAL_I2S_Init+0x1d8>
 8003538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800353c:	2202      	movs	r2, #2
 800353e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a25      	ldr	r2, [pc, #148]	; (80035dc <HAL_I2S_Init+0x278>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_I2S_Init+0x1ea>
 800354a:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_I2S_Init+0x27c>)
 800354c:	e001      	b.n	8003552 <HAL_I2S_Init+0x1ee>
 800354e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355e:	d003      	beq.n	8003568 <HAL_I2S_Init+0x204>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	e001      	b.n	8003574 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800357e:	4313      	orrs	r3, r2
 8003580:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003588:	4313      	orrs	r3, r2
 800358a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003592:	4313      	orrs	r3, r2
 8003594:	b29a      	uxth	r2, r3
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	4313      	orrs	r3, r2
 800359a:	b29b      	uxth	r3, r3
 800359c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035a0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <HAL_I2S_Init+0x278>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_I2S_Init+0x24c>
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <HAL_I2S_Init+0x27c>)
 80035ae:	e001      	b.n	80035b4 <HAL_I2S_Init+0x250>
 80035b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b4:	897a      	ldrh	r2, [r7, #10]
 80035b6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	080036db 	.word	0x080036db
 80035d4:	cccccccd 	.word	0xcccccccd
 80035d8:	080037f1 	.word	0x080037f1
 80035dc:	40003800 	.word	0x40003800
 80035e0:	40003400 	.word	0x40003400

080035e4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	881a      	ldrh	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	1c9a      	adds	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10e      	bne.n	8003674 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003664:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff ffb8 	bl	80035e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	b292      	uxth	r2, r2
 8003690:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	1c9a      	adds	r2, r3, #2
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10e      	bne.n	80036d2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff93 	bl	80035f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d13a      	bne.n	800376c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d109      	bne.n	8003714 <I2S_IRQHandler+0x3a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b40      	cmp	r3, #64	; 0x40
 800370c:	d102      	bne.n	8003714 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff ffb4 	bl	800367c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d126      	bne.n	800376c <I2S_IRQHandler+0x92>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b20      	cmp	r3, #32
 800372a:	d11f      	bne.n	800376c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f043 0202 	orr.w	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ff50 	bl	800360c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b03      	cmp	r3, #3
 8003776:	d136      	bne.n	80037e6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d109      	bne.n	8003796 <I2S_IRQHandler+0xbc>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d102      	bne.n	8003796 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff45 	bl	8003620 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b08      	cmp	r3, #8
 800379e:	d122      	bne.n	80037e6 <I2S_IRQHandler+0x10c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d11b      	bne.n	80037e6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037bc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	f043 0204 	orr.w	r2, r3, #4
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff13 	bl	800360c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037e6:	bf00      	nop
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a92      	ldr	r2, [pc, #584]	; (8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800380a:	4b92      	ldr	r3, [pc, #584]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800380c:	e001      	b.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800380e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a8b      	ldr	r2, [pc, #556]	; (8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d101      	bne.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003828:	4b8a      	ldr	r3, [pc, #552]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800382a:	e001      	b.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800382c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800383c:	d004      	beq.n	8003848 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 8099 	bne.w	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d107      	bne.n	8003862 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f925 	bl	8003aac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	d107      	bne.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9c8 	bl	8003c0c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d13a      	bne.n	80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d035      	beq.n	80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a6e      	ldr	r2, [pc, #440]	; (8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d101      	bne.n	800389e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800389a:	4b6e      	ldr	r3, [pc, #440]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800389c:	e001      	b.n	80038a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800389e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4969      	ldr	r1, [pc, #420]	; (8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038aa:	428b      	cmp	r3, r1
 80038ac:	d101      	bne.n	80038b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038ae:	4b69      	ldr	r3, [pc, #420]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038b0:	e001      	b.n	80038b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f043 0202 	orr.w	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fe88 	bl	800360c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b08      	cmp	r3, #8
 8003904:	f040 80c3 	bne.w	8003a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80bd 	beq.w	8003a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003922:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a49      	ldr	r2, [pc, #292]	; (8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d101      	bne.n	8003932 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800392e:	4b49      	ldr	r3, [pc, #292]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003930:	e001      	b.n	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003932:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4944      	ldr	r1, [pc, #272]	; (8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800393e:	428b      	cmp	r3, r1
 8003940:	d101      	bne.n	8003946 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003942:	4b44      	ldr	r3, [pc, #272]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003944:	e001      	b.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003946:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800394e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003950:	2300      	movs	r3, #0
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f043 0204 	orr.w	r2, r3, #4
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fe4a 	bl	800360c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003978:	e089      	b.n	8003a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	d107      	bne.n	8003994 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8be 	bl	8003b10 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d107      	bne.n	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8fd 	bl	8003ba8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d12f      	bne.n	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02a      	beq.n	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1e      	ldr	r2, [pc, #120]	; (8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039de:	e001      	b.n	80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4919      	ldr	r1, [pc, #100]	; (8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039ec:	428b      	cmp	r3, r1
 80039ee:	d101      	bne.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039f0:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039f2:	e001      	b.n	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f043 0202 	orr.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fdfa 	bl	800360c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d136      	bne.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d031      	beq.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d101      	bne.n	8003a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a38:	e001      	b.n	8003a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4902      	ldr	r1, [pc, #8]	; (8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a46:	428b      	cmp	r3, r1
 8003a48:	d106      	bne.n	8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a4a:	4b02      	ldr	r3, [pc, #8]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a4c:	e006      	b.n	8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a4e:	bf00      	nop
 8003a50:	40003800 	.word	0x40003800
 8003a54:	40003400 	.word	0x40003400
 8003a58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a60:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f043 0204 	orr.w	r2, r3, #4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fdc0 	bl	800360c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a8c:	e000      	b.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a8e:	bf00      	nop
}
 8003a90:	bf00      	nop
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	1c99      	adds	r1, r3, #2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6251      	str	r1, [r2, #36]	; 0x24
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d113      	bne.n	8003b06 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d106      	bne.n	8003b06 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ffc9 	bl	8003a98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	1c99      	adds	r1, r3, #2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6251      	str	r1, [r2, #36]	; 0x24
 8003b22:	8819      	ldrh	r1, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1d      	ldr	r2, [pc, #116]	; (8003ba0 <I2SEx_TxISR_I2SExt+0x90>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <I2SEx_TxISR_I2SExt+0x22>
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <I2SEx_TxISR_I2SExt+0x94>)
 8003b30:	e001      	b.n	8003b36 <I2SEx_TxISR_I2SExt+0x26>
 8003b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b36:	460a      	mov	r2, r1
 8003b38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d121      	bne.n	8003b96 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a12      	ldr	r2, [pc, #72]	; (8003ba0 <I2SEx_TxISR_I2SExt+0x90>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d101      	bne.n	8003b60 <I2SEx_TxISR_I2SExt+0x50>
 8003b5c:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <I2SEx_TxISR_I2SExt+0x94>)
 8003b5e:	e001      	b.n	8003b64 <I2SEx_TxISR_I2SExt+0x54>
 8003b60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	490d      	ldr	r1, [pc, #52]	; (8003ba0 <I2SEx_TxISR_I2SExt+0x90>)
 8003b6c:	428b      	cmp	r3, r1
 8003b6e:	d101      	bne.n	8003b74 <I2SEx_TxISR_I2SExt+0x64>
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <I2SEx_TxISR_I2SExt+0x94>)
 8003b72:	e001      	b.n	8003b78 <I2SEx_TxISR_I2SExt+0x68>
 8003b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff81 	bl	8003a98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40003800 	.word	0x40003800
 8003ba4:	40003400 	.word	0x40003400

08003ba8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68d8      	ldr	r0, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	1c99      	adds	r1, r3, #2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bc0:	b282      	uxth	r2, r0
 8003bc2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d113      	bne.n	8003c04 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff ff4a 	bl	8003a98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <I2SEx_RxISR_I2SExt+0x90>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <I2SEx_RxISR_I2SExt+0x16>
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <I2SEx_RxISR_I2SExt+0x94>)
 8003c20:	e001      	b.n	8003c26 <I2SEx_RxISR_I2SExt+0x1a>
 8003c22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c26:	68d8      	ldr	r0, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	1c99      	adds	r1, r3, #2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c32:	b282      	uxth	r2, r0
 8003c34:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d121      	bne.n	8003c92 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a12      	ldr	r2, [pc, #72]	; (8003c9c <I2SEx_RxISR_I2SExt+0x90>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <I2SEx_RxISR_I2SExt+0x50>
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <I2SEx_RxISR_I2SExt+0x94>)
 8003c5a:	e001      	b.n	8003c60 <I2SEx_RxISR_I2SExt+0x54>
 8003c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	490d      	ldr	r1, [pc, #52]	; (8003c9c <I2SEx_RxISR_I2SExt+0x90>)
 8003c68:	428b      	cmp	r3, r1
 8003c6a:	d101      	bne.n	8003c70 <I2SEx_RxISR_I2SExt+0x64>
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <I2SEx_RxISR_I2SExt+0x94>)
 8003c6e:	e001      	b.n	8003c74 <I2SEx_RxISR_I2SExt+0x68>
 8003c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c78:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff03 	bl	8003a98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40003800 	.word	0x40003800
 8003ca0:	40003400 	.word	0x40003400

08003ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e267      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d075      	beq.n	8003dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc2:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cce:	4b85      	ldr	r3, [pc, #532]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d112      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cda:	4b82      	ldr	r3, [pc, #520]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	4b7e      	ldr	r3, [pc, #504]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d05b      	beq.n	8003dac <HAL_RCC_OscConfig+0x108>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d157      	bne.n	8003dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e242      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d106      	bne.n	8003d18 <HAL_RCC_OscConfig+0x74>
 8003d0a:	4b76      	ldr	r3, [pc, #472]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a75      	ldr	r2, [pc, #468]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e01d      	b.n	8003d54 <HAL_RCC_OscConfig+0xb0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x98>
 8003d22:	4b70      	ldr	r3, [pc, #448]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a6f      	ldr	r2, [pc, #444]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b6d      	ldr	r3, [pc, #436]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6c      	ldr	r2, [pc, #432]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0xb0>
 8003d3c:	4b69      	ldr	r3, [pc, #420]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a68      	ldr	r2, [pc, #416]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b66      	ldr	r3, [pc, #408]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a65      	ldr	r2, [pc, #404]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fd fabc 	bl	80012d8 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fd fab8 	bl	80012d8 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e207      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	4b5b      	ldr	r3, [pc, #364]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0xc0>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7fd faa8 	bl	80012d8 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fd faa4 	bl	80012d8 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e1f3      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0xe8>
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d063      	beq.n	8003e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dba:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d11c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd2:	4b44      	ldr	r3, [pc, #272]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d116      	bne.n	8003e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_OscConfig+0x152>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e1c7      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df6:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4937      	ldr	r1, [pc, #220]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	e03a      	b.n	8003e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e14:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <HAL_RCC_OscConfig+0x244>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fd fa5d 	bl	80012d8 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e22:	f7fd fa59 	bl	80012d8 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e1a8      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e34:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e40:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4925      	ldr	r1, [pc, #148]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
 8003e54:	e015      	b.n	8003e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e56:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <HAL_RCC_OscConfig+0x244>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fa3c 	bl	80012d8 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e64:	f7fd fa38 	bl	80012d8 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e187      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d036      	beq.n	8003efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e96:	4b15      	ldr	r3, [pc, #84]	; (8003eec <HAL_RCC_OscConfig+0x248>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fd fa1c 	bl	80012d8 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea4:	f7fd fa18 	bl	80012d8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e167      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x200>
 8003ec2:	e01b      	b.n	8003efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_RCC_OscConfig+0x248>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eca:	f7fd fa05 	bl	80012d8 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	e00e      	b.n	8003ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed2:	f7fd fa01 	bl	80012d8 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d907      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e150      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	42470000 	.word	0x42470000
 8003eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef0:	4b88      	ldr	r3, [pc, #544]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ea      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8097 	beq.w	8004038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0e:	4b81      	ldr	r3, [pc, #516]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	4b7d      	ldr	r3, [pc, #500]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a7c      	ldr	r2, [pc, #496]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2a:	4b7a      	ldr	r3, [pc, #488]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3a:	4b77      	ldr	r3, [pc, #476]	; (8004118 <HAL_RCC_OscConfig+0x474>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d118      	bne.n	8003f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f46:	4b74      	ldr	r3, [pc, #464]	; (8004118 <HAL_RCC_OscConfig+0x474>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a73      	ldr	r2, [pc, #460]	; (8004118 <HAL_RCC_OscConfig+0x474>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f52:	f7fd f9c1 	bl	80012d8 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5a:	f7fd f9bd 	bl	80012d8 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e10c      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	4b6a      	ldr	r3, [pc, #424]	; (8004118 <HAL_RCC_OscConfig+0x474>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x2ea>
 8003f80:	4b64      	ldr	r3, [pc, #400]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	4a63      	ldr	r2, [pc, #396]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8c:	e01c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x324>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x30c>
 8003f96:	4b5f      	ldr	r3, [pc, #380]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	4a5e      	ldr	r2, [pc, #376]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	f043 0304 	orr.w	r3, r3, #4
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa2:	4b5c      	ldr	r3, [pc, #368]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	4a5b      	ldr	r2, [pc, #364]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6713      	str	r3, [r2, #112]	; 0x70
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x324>
 8003fb0:	4b58      	ldr	r3, [pc, #352]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a57      	ldr	r2, [pc, #348]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbc:	4b55      	ldr	r3, [pc, #340]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	4a54      	ldr	r2, [pc, #336]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	f023 0304 	bic.w	r3, r3, #4
 8003fc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d015      	beq.n	8003ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd0:	f7fd f982 	bl	80012d8 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd6:	e00a      	b.n	8003fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd8:	f7fd f97e 	bl	80012d8 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0cb      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	4b49      	ldr	r3, [pc, #292]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0ee      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x334>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffc:	f7fd f96c 	bl	80012d8 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7fd f968 	bl	80012d8 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e0b5      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401a:	4b3e      	ldr	r3, [pc, #248]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ee      	bne.n	8004004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d105      	bne.n	8004038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402c:	4b39      	ldr	r3, [pc, #228]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	4a38      	ldr	r2, [pc, #224]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8004032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004036:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80a1 	beq.w	8004184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004042:	4b34      	ldr	r3, [pc, #208]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b08      	cmp	r3, #8
 800404c:	d05c      	beq.n	8004108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d141      	bne.n	80040da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	4b31      	ldr	r3, [pc, #196]	; (800411c <HAL_RCC_OscConfig+0x478>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405c:	f7fd f93c 	bl	80012d8 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004064:	f7fd f938 	bl	80012d8 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e087      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	4b27      	ldr	r3, [pc, #156]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	3b01      	subs	r3, #1
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	491b      	ldr	r1, [pc, #108]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_RCC_OscConfig+0x478>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b2:	f7fd f911 	bl	80012d8 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fd f90d 	bl	80012d8 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e05c      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040cc:	4b11      	ldr	r3, [pc, #68]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x416>
 80040d8:	e054      	b.n	8004184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_RCC_OscConfig+0x478>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fd f8fa 	bl	80012d8 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd f8f6 	bl	80012d8 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e045      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x444>
 8004106:	e03d      	b.n	8004184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d107      	bne.n	8004120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e038      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
 8004114:	40023800 	.word	0x40023800
 8004118:	40007000 	.word	0x40007000
 800411c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x4ec>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d028      	beq.n	8004180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d121      	bne.n	8004180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d11a      	bne.n	8004180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004150:	4013      	ands	r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004158:	4293      	cmp	r3, r2
 800415a:	d111      	bne.n	8004180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	3b01      	subs	r3, #1
 800416a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d107      	bne.n	8004180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800

08004194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0cc      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a8:	4b68      	ldr	r3, [pc, #416]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d90c      	bls.n	80041d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b65      	ldr	r3, [pc, #404]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b63      	ldr	r3, [pc, #396]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0b8      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e8:	4b59      	ldr	r3, [pc, #356]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4a58      	ldr	r2, [pc, #352]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004200:	4b53      	ldr	r3, [pc, #332]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4a52      	ldr	r2, [pc, #328]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800420a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800420c:	4b50      	ldr	r3, [pc, #320]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	494d      	ldr	r1, [pc, #308]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d044      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d119      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d003      	beq.n	8004252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800424e:	2b03      	cmp	r3, #3
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004252:	4b3f      	ldr	r3, [pc, #252]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e06f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004262:	4b3b      	ldr	r3, [pc, #236]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e067      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004272:	4b37      	ldr	r3, [pc, #220]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f023 0203 	bic.w	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4934      	ldr	r1, [pc, #208]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	4313      	orrs	r3, r2
 8004282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004284:	f7fd f828 	bl	80012d8 <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428c:	f7fd f824 	bl	80012d8 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e04f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	4b2b      	ldr	r3, [pc, #172]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 020c 	and.w	r2, r3, #12
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d1eb      	bne.n	800428c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d20c      	bcs.n	80042dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b22      	ldr	r3, [pc, #136]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e032      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4916      	ldr	r1, [pc, #88]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	490e      	ldr	r1, [pc, #56]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800431a:	f000 f821 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 800431e:	4602      	mov	r2, r0
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	490a      	ldr	r1, [pc, #40]	; (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	5ccb      	ldrb	r3, [r1, r3]
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc ff88 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023c00 	.word	0x40023c00
 8004350:	40023800 	.word	0x40023800
 8004354:	08009e54 	.word	0x08009e54
 8004358:	20000000 	.word	0x20000000
 800435c:	20000004 	.word	0x20000004

08004360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004364:	b094      	sub	sp, #80	; 0x50
 8004366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	647b      	str	r3, [r7, #68]	; 0x44
 800436c:	2300      	movs	r3, #0
 800436e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004370:	2300      	movs	r3, #0
 8004372:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004378:	4b79      	ldr	r3, [pc, #484]	; (8004560 <HAL_RCC_GetSysClockFreq+0x200>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d00d      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004384:	2b08      	cmp	r3, #8
 8004386:	f200 80e1 	bhi.w	800454c <HAL_RCC_GetSysClockFreq+0x1ec>
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x34>
 800438e:	2b04      	cmp	r3, #4
 8004390:	d003      	beq.n	800439a <HAL_RCC_GetSysClockFreq+0x3a>
 8004392:	e0db      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b73      	ldr	r3, [pc, #460]	; (8004564 <HAL_RCC_GetSysClockFreq+0x204>)
 8004396:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004398:	e0db      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800439a:	4b73      	ldr	r3, [pc, #460]	; (8004568 <HAL_RCC_GetSysClockFreq+0x208>)
 800439c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800439e:	e0d8      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a0:	4b6f      	ldr	r3, [pc, #444]	; (8004560 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043aa:	4b6d      	ldr	r3, [pc, #436]	; (8004560 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d063      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b6:	4b6a      	ldr	r3, [pc, #424]	; (8004560 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	099b      	lsrs	r3, r3, #6
 80043bc:	2200      	movs	r2, #0
 80043be:	63bb      	str	r3, [r7, #56]	; 0x38
 80043c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c8:	633b      	str	r3, [r7, #48]	; 0x30
 80043ca:	2300      	movs	r3, #0
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
 80043ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043d2:	4622      	mov	r2, r4
 80043d4:	462b      	mov	r3, r5
 80043d6:	f04f 0000 	mov.w	r0, #0
 80043da:	f04f 0100 	mov.w	r1, #0
 80043de:	0159      	lsls	r1, r3, #5
 80043e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e4:	0150      	lsls	r0, r2, #5
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4621      	mov	r1, r4
 80043ec:	1a51      	subs	r1, r2, r1
 80043ee:	6139      	str	r1, [r7, #16]
 80043f0:	4629      	mov	r1, r5
 80043f2:	eb63 0301 	sbc.w	r3, r3, r1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004404:	4659      	mov	r1, fp
 8004406:	018b      	lsls	r3, r1, #6
 8004408:	4651      	mov	r1, sl
 800440a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800440e:	4651      	mov	r1, sl
 8004410:	018a      	lsls	r2, r1, #6
 8004412:	4651      	mov	r1, sl
 8004414:	ebb2 0801 	subs.w	r8, r2, r1
 8004418:	4659      	mov	r1, fp
 800441a:	eb63 0901 	sbc.w	r9, r3, r1
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800442a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800442e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004432:	4690      	mov	r8, r2
 8004434:	4699      	mov	r9, r3
 8004436:	4623      	mov	r3, r4
 8004438:	eb18 0303 	adds.w	r3, r8, r3
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	462b      	mov	r3, r5
 8004440:	eb49 0303 	adc.w	r3, r9, r3
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004452:	4629      	mov	r1, r5
 8004454:	024b      	lsls	r3, r1, #9
 8004456:	4621      	mov	r1, r4
 8004458:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800445c:	4621      	mov	r1, r4
 800445e:	024a      	lsls	r2, r1, #9
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004466:	2200      	movs	r2, #0
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
 800446a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800446c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004470:	f7fb fefe 	bl	8000270 <__aeabi_uldivmod>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4613      	mov	r3, r2
 800447a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800447c:	e058      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800447e:	4b38      	ldr	r3, [pc, #224]	; (8004560 <HAL_RCC_GetSysClockFreq+0x200>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	099b      	lsrs	r3, r3, #6
 8004484:	2200      	movs	r2, #0
 8004486:	4618      	mov	r0, r3
 8004488:	4611      	mov	r1, r2
 800448a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800448e:	623b      	str	r3, [r7, #32]
 8004490:	2300      	movs	r3, #0
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
 8004494:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004498:	4642      	mov	r2, r8
 800449a:	464b      	mov	r3, r9
 800449c:	f04f 0000 	mov.w	r0, #0
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	0159      	lsls	r1, r3, #5
 80044a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044aa:	0150      	lsls	r0, r2, #5
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4641      	mov	r1, r8
 80044b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80044b6:	4649      	mov	r1, r9
 80044b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044d0:	ebb2 040a 	subs.w	r4, r2, sl
 80044d4:	eb63 050b 	sbc.w	r5, r3, fp
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	00eb      	lsls	r3, r5, #3
 80044e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044e6:	00e2      	lsls	r2, r4, #3
 80044e8:	4614      	mov	r4, r2
 80044ea:	461d      	mov	r5, r3
 80044ec:	4643      	mov	r3, r8
 80044ee:	18e3      	adds	r3, r4, r3
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	464b      	mov	r3, r9
 80044f4:	eb45 0303 	adc.w	r3, r5, r3
 80044f8:	607b      	str	r3, [r7, #4]
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004506:	4629      	mov	r1, r5
 8004508:	028b      	lsls	r3, r1, #10
 800450a:	4621      	mov	r1, r4
 800450c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004510:	4621      	mov	r1, r4
 8004512:	028a      	lsls	r2, r1, #10
 8004514:	4610      	mov	r0, r2
 8004516:	4619      	mov	r1, r3
 8004518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451a:	2200      	movs	r2, #0
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	61fa      	str	r2, [r7, #28]
 8004520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004524:	f7fb fea4 	bl	8000270 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4613      	mov	r3, r2
 800452e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCC_GetSysClockFreq+0x200>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	3301      	adds	r3, #1
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800454a:	e002      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <HAL_RCC_GetSysClockFreq+0x204>)
 800454e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004554:	4618      	mov	r0, r3
 8004556:	3750      	adds	r7, #80	; 0x50
 8004558:	46bd      	mov	sp, r7
 800455a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	00f42400 	.word	0x00f42400
 8004568:	007a1200 	.word	0x007a1200

0800456c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <HAL_RCC_GetHCLKFreq+0x14>)
 8004572:	681b      	ldr	r3, [r3, #0]
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000000 	.word	0x20000000

08004584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004588:	f7ff fff0 	bl	800456c <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	0a9b      	lsrs	r3, r3, #10
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4903      	ldr	r1, [pc, #12]	; (80045a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800
 80045a8:	08009e64 	.word	0x08009e64

080045ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045b0:	f7ff ffdc 	bl	800456c <HAL_RCC_GetHCLKFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	0b5b      	lsrs	r3, r3, #13
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4903      	ldr	r1, [pc, #12]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40023800 	.word	0x40023800
 80045d0:	08009e64 	.word	0x08009e64

080045d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d105      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d035      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045fc:	4b62      	ldr	r3, [pc, #392]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004602:	f7fc fe69 	bl	80012d8 <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004608:	e008      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800460a:	f7fc fe65 	bl	80012d8 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e0b0      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800461c:	4b5b      	ldr	r3, [pc, #364]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	019a      	lsls	r2, r3, #6
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	071b      	lsls	r3, r3, #28
 8004634:	4955      	ldr	r1, [pc, #340]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800463c:	4b52      	ldr	r3, [pc, #328]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004642:	f7fc fe49 	bl	80012d8 <HAL_GetTick>
 8004646:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800464a:	f7fc fe45 	bl	80012d8 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e090      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800465c:	4b4b      	ldr	r3, [pc, #300]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8083 	beq.w	800477c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4b44      	ldr	r3, [pc, #272]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	4a43      	ldr	r2, [pc, #268]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004684:	6413      	str	r3, [r2, #64]	; 0x40
 8004686:	4b41      	ldr	r3, [pc, #260]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004692:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a3e      	ldr	r2, [pc, #248]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800469e:	f7fc fe1b 	bl	80012d8 <HAL_GetTick>
 80046a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046a6:	f7fc fe17 	bl	80012d8 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e062      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046b8:	4b35      	ldr	r3, [pc, #212]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046c4:	4b31      	ldr	r3, [pc, #196]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d02f      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d028      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046e2:	4b2a      	ldr	r3, [pc, #168]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ec:	4b29      	ldr	r3, [pc, #164]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f2:	4b28      	ldr	r3, [pc, #160]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046f8:	4a24      	ldr	r2, [pc, #144]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046fe:	4b23      	ldr	r3, [pc, #140]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b01      	cmp	r3, #1
 8004708:	d114      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800470a:	f7fc fde5 	bl	80012d8 <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004710:	e00a      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004712:	f7fc fde1 	bl	80012d8 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004720:	4293      	cmp	r3, r2
 8004722:	d901      	bls.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e02a      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004728:	4b18      	ldr	r3, [pc, #96]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0ee      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004740:	d10d      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004756:	490d      	ldr	r1, [pc, #52]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004758:	4313      	orrs	r3, r2
 800475a:	608b      	str	r3, [r1, #8]
 800475c:	e005      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800475e:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	4a0a      	ldr	r2, [pc, #40]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004764:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004768:	6093      	str	r3, [r2, #8]
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800476c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004776:	4905      	ldr	r1, [pc, #20]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004778:	4313      	orrs	r3, r2
 800477a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	42470068 	.word	0x42470068
 800478c:	40023800 	.word	0x40023800
 8004790:	40007000 	.word	0x40007000
 8004794:	42470e40 	.word	0x42470e40

08004798 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d13e      	bne.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047b6:	4b23      	ldr	r3, [pc, #140]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d12f      	bne.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047cc:	4b1e      	ldr	r3, [pc, #120]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047ce:	617b      	str	r3, [r7, #20]
          break;
 80047d0:	e02f      	b.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047de:	d108      	bne.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047e0:	4b18      	ldr	r3, [pc, #96]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e8:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	e007      	b.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fa:	4a15      	ldr	r2, [pc, #84]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481c:	0f1b      	lsrs	r3, r3, #28
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	617b      	str	r3, [r7, #20]
          break;
 800482a:	e002      	b.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
          break;
 8004830:	bf00      	nop
        }
      }
      break;
 8004832:	bf00      	nop
    }
  }
  return frequency;
 8004834:	697b      	ldr	r3, [r7, #20]
}
 8004836:	4618      	mov	r0, r3
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	00bb8000 	.word	0x00bb8000
 800484c:	007a1200 	.word	0x007a1200
 8004850:	00f42400 	.word	0x00f42400

08004854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e07b      	b.n	800495e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d108      	bne.n	8004880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004876:	d009      	beq.n	800488c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	61da      	str	r2, [r3, #28]
 800487e:	e005      	b.n	800488c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fc fa7a 	bl	8000da0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004910:	ea42 0103 	orr.w	r1, r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	f003 0104 	and.w	r1, r3, #4
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f003 0210 	and.w	r2, r3, #16
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800494c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e097      	b.n	8004aaa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fc fa4e 	bl	8000e30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049aa:	f023 0307 	bic.w	r3, r3, #7
 80049ae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 fa62 	bl	8004e84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	f023 0303 	bic.w	r3, r3, #3
 80049ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	4313      	orrs	r3, r2
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a06:	f023 030c 	bic.w	r3, r3, #12
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	4313      	orrs	r3, r2
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	011a      	lsls	r2, r3, #4
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	031b      	lsls	r3, r3, #12
 8004a36:	4313      	orrs	r3, r2
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a44:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a4c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ac2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ad2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ada:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d110      	bne.n	8004b04 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d102      	bne.n	8004aee <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ae8:	7b7b      	ldrb	r3, [r7, #13]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d001      	beq.n	8004af2 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e089      	b.n	8004c06 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b02:	e031      	b.n	8004b68 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d110      	bne.n	8004b2c <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b0a:	7bbb      	ldrb	r3, [r7, #14]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d102      	bne.n	8004b16 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b10:	7b3b      	ldrb	r3, [r7, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d001      	beq.n	8004b1a <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e075      	b.n	8004c06 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b2a:	e01d      	b.n	8004b68 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d108      	bne.n	8004b44 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b32:	7bbb      	ldrb	r3, [r7, #14]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d105      	bne.n	8004b44 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b38:	7b7b      	ldrb	r3, [r7, #13]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d102      	bne.n	8004b44 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b3e:	7b3b      	ldrb	r3, [r7, #12]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d001      	beq.n	8004b48 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e05e      	b.n	8004c06 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d010      	beq.n	8004b96 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004b74:	e01f      	b.n	8004bb6 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fa20 	bl	8004fc4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0202 	orr.w	r2, r2, #2
 8004b92:	60da      	str	r2, [r3, #12]
      break;
 8004b94:	e02e      	b.n	8004bf4 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	2104      	movs	r1, #4
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fa10 	bl	8004fc4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0204 	orr.w	r2, r2, #4
 8004bb2:	60da      	str	r2, [r3, #12]
      break;
 8004bb4:	e01e      	b.n	8004bf4 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fa00 	bl	8004fc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	2104      	movs	r1, #4
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 f9f9 	bl	8004fc4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0202 	orr.w	r2, r2, #2
 8004be0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0204 	orr.w	r2, r2, #4
 8004bf0:	60da      	str	r2, [r3, #12]
      break;
 8004bf2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d122      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d11b      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0202 	mvn.w	r2, #2
 8004c3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f8f8 	bl	8004e46 <HAL_TIM_IC_CaptureCallback>
 8004c56:	e005      	b.n	8004c64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f8ea 	bl	8004e32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8fb 	bl	8004e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d122      	bne.n	8004cbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d11b      	bne.n	8004cbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f06f 0204 	mvn.w	r2, #4
 8004c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f8ce 	bl	8004e46 <HAL_TIM_IC_CaptureCallback>
 8004caa:	e005      	b.n	8004cb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f8c0 	bl	8004e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8d1 	bl	8004e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d122      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11b      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0208 	mvn.w	r2, #8
 8004ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f8a4 	bl	8004e46 <HAL_TIM_IC_CaptureCallback>
 8004cfe:	e005      	b.n	8004d0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f896 	bl	8004e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f8a7 	bl	8004e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d122      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d11b      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f06f 0210 	mvn.w	r2, #16
 8004d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f87a 	bl	8004e46 <HAL_TIM_IC_CaptureCallback>
 8004d52:	e005      	b.n	8004d60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f86c 	bl	8004e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f87d 	bl	8004e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d10e      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f06f 0201 	mvn.w	r2, #1
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f846 	bl	8004e1e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9c:	2b80      	cmp	r3, #128	; 0x80
 8004d9e:	d10e      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b80      	cmp	r3, #128	; 0x80
 8004dac:	d107      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f9af 	bl	800511c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d10e      	bne.n	8004dea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d107      	bne.n	8004dea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f842 	bl	8004e6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d10e      	bne.n	8004e16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d107      	bne.n	8004e16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f06f 0220 	mvn.w	r2, #32
 8004e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f979 	bl	8005108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a40      	ldr	r2, [pc, #256]	; (8004f98 <TIM_Base_SetConfig+0x114>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d013      	beq.n	8004ec4 <TIM_Base_SetConfig+0x40>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea2:	d00f      	beq.n	8004ec4 <TIM_Base_SetConfig+0x40>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a3d      	ldr	r2, [pc, #244]	; (8004f9c <TIM_Base_SetConfig+0x118>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00b      	beq.n	8004ec4 <TIM_Base_SetConfig+0x40>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a3c      	ldr	r2, [pc, #240]	; (8004fa0 <TIM_Base_SetConfig+0x11c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d007      	beq.n	8004ec4 <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a3b      	ldr	r2, [pc, #236]	; (8004fa4 <TIM_Base_SetConfig+0x120>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a3a      	ldr	r2, [pc, #232]	; (8004fa8 <TIM_Base_SetConfig+0x124>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d108      	bne.n	8004ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2f      	ldr	r2, [pc, #188]	; (8004f98 <TIM_Base_SetConfig+0x114>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d02b      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee4:	d027      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2c      	ldr	r2, [pc, #176]	; (8004f9c <TIM_Base_SetConfig+0x118>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d023      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a2b      	ldr	r2, [pc, #172]	; (8004fa0 <TIM_Base_SetConfig+0x11c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01f      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2a      	ldr	r2, [pc, #168]	; (8004fa4 <TIM_Base_SetConfig+0x120>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01b      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a29      	ldr	r2, [pc, #164]	; (8004fa8 <TIM_Base_SetConfig+0x124>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d017      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a28      	ldr	r2, [pc, #160]	; (8004fac <TIM_Base_SetConfig+0x128>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a27      	ldr	r2, [pc, #156]	; (8004fb0 <TIM_Base_SetConfig+0x12c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00f      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a26      	ldr	r2, [pc, #152]	; (8004fb4 <TIM_Base_SetConfig+0x130>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00b      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a25      	ldr	r2, [pc, #148]	; (8004fb8 <TIM_Base_SetConfig+0x134>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d007      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a24      	ldr	r2, [pc, #144]	; (8004fbc <TIM_Base_SetConfig+0x138>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d003      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a23      	ldr	r2, [pc, #140]	; (8004fc0 <TIM_Base_SetConfig+0x13c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d108      	bne.n	8004f48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <TIM_Base_SetConfig+0x114>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_Base_SetConfig+0xf8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <TIM_Base_SetConfig+0x124>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d103      	bne.n	8004f84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	615a      	str	r2, [r3, #20]
}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40010400 	.word	0x40010400
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400
 8004fb4:	40014800 	.word	0x40014800
 8004fb8:	40001800 	.word	0x40001800
 8004fbc:	40001c00 	.word	0x40001c00
 8004fc0:	40002000 	.word	0x40002000

08004fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1a      	ldr	r2, [r3, #32]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1a      	ldr	r2, [r3, #32]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005024:	2302      	movs	r3, #2
 8005026:	e05a      	b.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a21      	ldr	r2, [pc, #132]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d022      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005074:	d01d      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d018      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1b      	ldr	r2, [pc, #108]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00e      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a17      	ldr	r2, [pc, #92]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a15      	ldr	r2, [pc, #84]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10c      	bne.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40010400 	.word	0x40010400
 8005100:	40014000 	.word	0x40014000
 8005104:	40001800 	.word	0x40001800

08005108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e03f      	b.n	80051c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fb ff0e 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2224      	movs	r2, #36	; 0x24
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f929 	bl	80053cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b08a      	sub	sp, #40	; 0x28
 80051ce:	af02      	add	r7, sp, #8
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	4613      	mov	r3, r2
 80051d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d17c      	bne.n	80052e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_UART_Transmit+0x2c>
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e075      	b.n	80052e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_UART_Transmit+0x3e>
 8005204:	2302      	movs	r3, #2
 8005206:	e06e      	b.n	80052e6 <HAL_UART_Transmit+0x11c>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2221      	movs	r2, #33	; 0x21
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800521e:	f7fc f85b 	bl	80012d8 <HAL_GetTick>
 8005222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	88fa      	ldrh	r2, [r7, #6]
 800522e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005238:	d108      	bne.n	800524c <HAL_UART_Transmit+0x82>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d104      	bne.n	800524c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	e003      	b.n	8005254 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005250:	2300      	movs	r3, #0
 8005252:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800525c:	e02a      	b.n	80052b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2200      	movs	r2, #0
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f840 	bl	80052ee <UART_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e036      	b.n	80052e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800528c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	3302      	adds	r3, #2
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	e007      	b.n	80052a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	781a      	ldrb	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	3301      	adds	r3, #1
 80052a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1cf      	bne.n	800525e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2200      	movs	r2, #0
 80052c6:	2140      	movs	r1, #64	; 0x40
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f810 	bl	80052ee <UART_WaitOnFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e006      	b.n	80052e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e000      	b.n	80052e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052e4:	2302      	movs	r3, #2
  }
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b090      	sub	sp, #64	; 0x40
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	603b      	str	r3, [r7, #0]
 80052fa:	4613      	mov	r3, r2
 80052fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fe:	e050      	b.n	80053a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005306:	d04c      	beq.n	80053a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <UART_WaitOnFlagUntilTimeout+0x30>
 800530e:	f7fb ffe3 	bl	80012d8 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800531a:	429a      	cmp	r2, r3
 800531c:	d241      	bcs.n	80053a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800533e:	637a      	str	r2, [r7, #52]	; 0x34
 8005340:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	613b      	str	r3, [r7, #16]
   return(result);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3314      	adds	r3, #20
 8005370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005372:	623a      	str	r2, [r7, #32]
 8005374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	69f9      	ldr	r1, [r7, #28]
 8005378:	6a3a      	ldr	r2, [r7, #32]
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e5      	bne.n	8005352 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e00f      	b.n	80053c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4013      	ands	r3, r2
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	bf0c      	ite	eq
 80053b2:	2301      	moveq	r3, #1
 80053b4:	2300      	movne	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d09f      	beq.n	8005300 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3740      	adds	r7, #64	; 0x40
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d0:	b0c0      	sub	sp, #256	; 0x100
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	68d9      	ldr	r1, [r3, #12]
 80053ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	ea40 0301 	orr.w	r3, r0, r1
 80053f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	431a      	orrs	r2, r3
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	431a      	orrs	r2, r3
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005424:	f021 010c 	bic.w	r1, r1, #12
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005432:	430b      	orrs	r3, r1
 8005434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005446:	6999      	ldr	r1, [r3, #24]
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	ea40 0301 	orr.w	r3, r0, r1
 8005452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b8f      	ldr	r3, [pc, #572]	; (8005698 <UART_SetConfig+0x2cc>)
 800545c:	429a      	cmp	r2, r3
 800545e:	d005      	beq.n	800546c <UART_SetConfig+0xa0>
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b8d      	ldr	r3, [pc, #564]	; (800569c <UART_SetConfig+0x2d0>)
 8005468:	429a      	cmp	r2, r3
 800546a:	d104      	bne.n	8005476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800546c:	f7ff f89e 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 8005470:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005474:	e003      	b.n	800547e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005476:	f7ff f885 	bl	8004584 <HAL_RCC_GetPCLK1Freq>
 800547a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005488:	f040 810c 	bne.w	80056a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800548c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005490:	2200      	movs	r2, #0
 8005492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005496:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800549a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800549e:	4622      	mov	r2, r4
 80054a0:	462b      	mov	r3, r5
 80054a2:	1891      	adds	r1, r2, r2
 80054a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80054a6:	415b      	adcs	r3, r3
 80054a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054ae:	4621      	mov	r1, r4
 80054b0:	eb12 0801 	adds.w	r8, r2, r1
 80054b4:	4629      	mov	r1, r5
 80054b6:	eb43 0901 	adc.w	r9, r3, r1
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ce:	4690      	mov	r8, r2
 80054d0:	4699      	mov	r9, r3
 80054d2:	4623      	mov	r3, r4
 80054d4:	eb18 0303 	adds.w	r3, r8, r3
 80054d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054dc:	462b      	mov	r3, r5
 80054de:	eb49 0303 	adc.w	r3, r9, r3
 80054e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054fa:	460b      	mov	r3, r1
 80054fc:	18db      	adds	r3, r3, r3
 80054fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005500:	4613      	mov	r3, r2
 8005502:	eb42 0303 	adc.w	r3, r2, r3
 8005506:	657b      	str	r3, [r7, #84]	; 0x54
 8005508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800550c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005510:	f7fa feae 	bl	8000270 <__aeabi_uldivmod>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4b61      	ldr	r3, [pc, #388]	; (80056a0 <UART_SetConfig+0x2d4>)
 800551a:	fba3 2302 	umull	r2, r3, r3, r2
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	011c      	lsls	r4, r3, #4
 8005522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005526:	2200      	movs	r2, #0
 8005528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800552c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	1891      	adds	r1, r2, r2
 800553a:	64b9      	str	r1, [r7, #72]	; 0x48
 800553c:	415b      	adcs	r3, r3
 800553e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005544:	4641      	mov	r1, r8
 8005546:	eb12 0a01 	adds.w	sl, r2, r1
 800554a:	4649      	mov	r1, r9
 800554c:	eb43 0b01 	adc.w	fp, r3, r1
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800555c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005564:	4692      	mov	sl, r2
 8005566:	469b      	mov	fp, r3
 8005568:	4643      	mov	r3, r8
 800556a:	eb1a 0303 	adds.w	r3, sl, r3
 800556e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005572:	464b      	mov	r3, r9
 8005574:	eb4b 0303 	adc.w	r3, fp, r3
 8005578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005588:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800558c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005590:	460b      	mov	r3, r1
 8005592:	18db      	adds	r3, r3, r3
 8005594:	643b      	str	r3, [r7, #64]	; 0x40
 8005596:	4613      	mov	r3, r2
 8005598:	eb42 0303 	adc.w	r3, r2, r3
 800559c:	647b      	str	r3, [r7, #68]	; 0x44
 800559e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055a6:	f7fa fe63 	bl	8000270 <__aeabi_uldivmod>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4611      	mov	r1, r2
 80055b0:	4b3b      	ldr	r3, [pc, #236]	; (80056a0 <UART_SetConfig+0x2d4>)
 80055b2:	fba3 2301 	umull	r2, r3, r3, r1
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	2264      	movs	r2, #100	; 0x64
 80055ba:	fb02 f303 	mul.w	r3, r2, r3
 80055be:	1acb      	subs	r3, r1, r3
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80055c6:	4b36      	ldr	r3, [pc, #216]	; (80056a0 <UART_SetConfig+0x2d4>)
 80055c8:	fba3 2302 	umull	r2, r3, r3, r2
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055d4:	441c      	add	r4, r3
 80055d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055da:	2200      	movs	r2, #0
 80055dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055e8:	4642      	mov	r2, r8
 80055ea:	464b      	mov	r3, r9
 80055ec:	1891      	adds	r1, r2, r2
 80055ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80055f0:	415b      	adcs	r3, r3
 80055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055f8:	4641      	mov	r1, r8
 80055fa:	1851      	adds	r1, r2, r1
 80055fc:	6339      	str	r1, [r7, #48]	; 0x30
 80055fe:	4649      	mov	r1, r9
 8005600:	414b      	adcs	r3, r1
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005610:	4659      	mov	r1, fp
 8005612:	00cb      	lsls	r3, r1, #3
 8005614:	4651      	mov	r1, sl
 8005616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800561a:	4651      	mov	r1, sl
 800561c:	00ca      	lsls	r2, r1, #3
 800561e:	4610      	mov	r0, r2
 8005620:	4619      	mov	r1, r3
 8005622:	4603      	mov	r3, r0
 8005624:	4642      	mov	r2, r8
 8005626:	189b      	adds	r3, r3, r2
 8005628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800562c:	464b      	mov	r3, r9
 800562e:	460a      	mov	r2, r1
 8005630:	eb42 0303 	adc.w	r3, r2, r3
 8005634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005644:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800564c:	460b      	mov	r3, r1
 800564e:	18db      	adds	r3, r3, r3
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
 8005652:	4613      	mov	r3, r2
 8005654:	eb42 0303 	adc.w	r3, r2, r3
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800565a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800565e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005662:	f7fa fe05 	bl	8000270 <__aeabi_uldivmod>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <UART_SetConfig+0x2d4>)
 800566c:	fba3 1302 	umull	r1, r3, r3, r2
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	2164      	movs	r1, #100	; 0x64
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	3332      	adds	r3, #50	; 0x32
 800567e:	4a08      	ldr	r2, [pc, #32]	; (80056a0 <UART_SetConfig+0x2d4>)
 8005680:	fba2 2303 	umull	r2, r3, r2, r3
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	f003 0207 	and.w	r2, r3, #7
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4422      	add	r2, r4
 8005692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005694:	e105      	b.n	80058a2 <UART_SetConfig+0x4d6>
 8005696:	bf00      	nop
 8005698:	40011000 	.word	0x40011000
 800569c:	40011400 	.word	0x40011400
 80056a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056b6:	4642      	mov	r2, r8
 80056b8:	464b      	mov	r3, r9
 80056ba:	1891      	adds	r1, r2, r2
 80056bc:	6239      	str	r1, [r7, #32]
 80056be:	415b      	adcs	r3, r3
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056c6:	4641      	mov	r1, r8
 80056c8:	1854      	adds	r4, r2, r1
 80056ca:	4649      	mov	r1, r9
 80056cc:	eb43 0501 	adc.w	r5, r3, r1
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	00eb      	lsls	r3, r5, #3
 80056da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056de:	00e2      	lsls	r2, r4, #3
 80056e0:	4614      	mov	r4, r2
 80056e2:	461d      	mov	r5, r3
 80056e4:	4643      	mov	r3, r8
 80056e6:	18e3      	adds	r3, r4, r3
 80056e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056ec:	464b      	mov	r3, r9
 80056ee:	eb45 0303 	adc.w	r3, r5, r3
 80056f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005706:	f04f 0200 	mov.w	r2, #0
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005712:	4629      	mov	r1, r5
 8005714:	008b      	lsls	r3, r1, #2
 8005716:	4621      	mov	r1, r4
 8005718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800571c:	4621      	mov	r1, r4
 800571e:	008a      	lsls	r2, r1, #2
 8005720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005724:	f7fa fda4 	bl	8000270 <__aeabi_uldivmod>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4b60      	ldr	r3, [pc, #384]	; (80058b0 <UART_SetConfig+0x4e4>)
 800572e:	fba3 2302 	umull	r2, r3, r3, r2
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	011c      	lsls	r4, r3, #4
 8005736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800573a:	2200      	movs	r2, #0
 800573c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005740:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005748:	4642      	mov	r2, r8
 800574a:	464b      	mov	r3, r9
 800574c:	1891      	adds	r1, r2, r2
 800574e:	61b9      	str	r1, [r7, #24]
 8005750:	415b      	adcs	r3, r3
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005758:	4641      	mov	r1, r8
 800575a:	1851      	adds	r1, r2, r1
 800575c:	6139      	str	r1, [r7, #16]
 800575e:	4649      	mov	r1, r9
 8005760:	414b      	adcs	r3, r1
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005770:	4659      	mov	r1, fp
 8005772:	00cb      	lsls	r3, r1, #3
 8005774:	4651      	mov	r1, sl
 8005776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800577a:	4651      	mov	r1, sl
 800577c:	00ca      	lsls	r2, r1, #3
 800577e:	4610      	mov	r0, r2
 8005780:	4619      	mov	r1, r3
 8005782:	4603      	mov	r3, r0
 8005784:	4642      	mov	r2, r8
 8005786:	189b      	adds	r3, r3, r2
 8005788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800578c:	464b      	mov	r3, r9
 800578e:	460a      	mov	r2, r1
 8005790:	eb42 0303 	adc.w	r3, r2, r3
 8005794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80057a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057b0:	4649      	mov	r1, r9
 80057b2:	008b      	lsls	r3, r1, #2
 80057b4:	4641      	mov	r1, r8
 80057b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057ba:	4641      	mov	r1, r8
 80057bc:	008a      	lsls	r2, r1, #2
 80057be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80057c2:	f7fa fd55 	bl	8000270 <__aeabi_uldivmod>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4b39      	ldr	r3, [pc, #228]	; (80058b0 <UART_SetConfig+0x4e4>)
 80057cc:	fba3 1302 	umull	r1, r3, r3, r2
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	2164      	movs	r1, #100	; 0x64
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	3332      	adds	r3, #50	; 0x32
 80057de:	4a34      	ldr	r2, [pc, #208]	; (80058b0 <UART_SetConfig+0x4e4>)
 80057e0:	fba2 2303 	umull	r2, r3, r2, r3
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ea:	441c      	add	r4, r3
 80057ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057f0:	2200      	movs	r2, #0
 80057f2:	673b      	str	r3, [r7, #112]	; 0x70
 80057f4:	677a      	str	r2, [r7, #116]	; 0x74
 80057f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057fa:	4642      	mov	r2, r8
 80057fc:	464b      	mov	r3, r9
 80057fe:	1891      	adds	r1, r2, r2
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	415b      	adcs	r3, r3
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800580a:	4641      	mov	r1, r8
 800580c:	1851      	adds	r1, r2, r1
 800580e:	6039      	str	r1, [r7, #0]
 8005810:	4649      	mov	r1, r9
 8005812:	414b      	adcs	r3, r1
 8005814:	607b      	str	r3, [r7, #4]
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005822:	4659      	mov	r1, fp
 8005824:	00cb      	lsls	r3, r1, #3
 8005826:	4651      	mov	r1, sl
 8005828:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800582c:	4651      	mov	r1, sl
 800582e:	00ca      	lsls	r2, r1, #3
 8005830:	4610      	mov	r0, r2
 8005832:	4619      	mov	r1, r3
 8005834:	4603      	mov	r3, r0
 8005836:	4642      	mov	r2, r8
 8005838:	189b      	adds	r3, r3, r2
 800583a:	66bb      	str	r3, [r7, #104]	; 0x68
 800583c:	464b      	mov	r3, r9
 800583e:	460a      	mov	r2, r1
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	663b      	str	r3, [r7, #96]	; 0x60
 8005850:	667a      	str	r2, [r7, #100]	; 0x64
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800585e:	4649      	mov	r1, r9
 8005860:	008b      	lsls	r3, r1, #2
 8005862:	4641      	mov	r1, r8
 8005864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005868:	4641      	mov	r1, r8
 800586a:	008a      	lsls	r2, r1, #2
 800586c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005870:	f7fa fcfe 	bl	8000270 <__aeabi_uldivmod>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <UART_SetConfig+0x4e4>)
 800587a:	fba3 1302 	umull	r1, r3, r3, r2
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	2164      	movs	r1, #100	; 0x64
 8005882:	fb01 f303 	mul.w	r3, r1, r3
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	3332      	adds	r3, #50	; 0x32
 800588c:	4a08      	ldr	r2, [pc, #32]	; (80058b0 <UART_SetConfig+0x4e4>)
 800588e:	fba2 2303 	umull	r2, r3, r2, r3
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	f003 020f 	and.w	r2, r3, #15
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4422      	add	r2, r4
 80058a0:	609a      	str	r2, [r3, #8]
}
 80058a2:	bf00      	nop
 80058a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058a8:	46bd      	mov	sp, r7
 80058aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ae:	bf00      	nop
 80058b0:	51eb851f 	.word	0x51eb851f

080058b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058b4:	b084      	sub	sp, #16
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	f107 001c 	add.w	r0, r7, #28
 80058c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d122      	bne.n	8005912 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d105      	bne.n	8005906 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f9c0 	bl	8005c8c <USB_CoreReset>
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e01a      	b.n	8005948 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f9b4 	bl	8005c8c <USB_CoreReset>
 8005924:	4603      	mov	r3, r0
 8005926:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
 800593a:	e005      	b.n	8005948 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	2b01      	cmp	r3, #1
 800594c:	d10b      	bne.n	8005966 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f043 0206 	orr.w	r2, r3, #6
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f043 0220 	orr.w	r2, r3, #32
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005972:	b004      	add	sp, #16
 8005974:	4770      	bx	lr

08005976 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f043 0201 	orr.w	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f023 0201 	bic.w	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	460b      	mov	r3, r1
 80059c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d115      	bne.n	8005a08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059e8:	2001      	movs	r0, #1
 80059ea:	f7fb fc81 	bl	80012f0 <HAL_Delay>
      ms++;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3301      	adds	r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f93a 	bl	8005c6e <USB_GetMode>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d01e      	beq.n	8005a3e <USB_SetCurrentMode+0x84>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b31      	cmp	r3, #49	; 0x31
 8005a04:	d9f0      	bls.n	80059e8 <USB_SetCurrentMode+0x2e>
 8005a06:	e01a      	b.n	8005a3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d115      	bne.n	8005a3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	f7fb fc68 	bl	80012f0 <HAL_Delay>
      ms++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f921 	bl	8005c6e <USB_GetMode>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <USB_SetCurrentMode+0x84>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b31      	cmp	r3, #49	; 0x31
 8005a36:	d9f0      	bls.n	8005a1a <USB_SetCurrentMode+0x60>
 8005a38:	e001      	b.n	8005a3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e005      	b.n	8005a4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b32      	cmp	r3, #50	; 0x32
 8005a42:	d101      	bne.n	8005a48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3301      	adds	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <USB_FlushTxFifo+0x64>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d901      	bls.n	8005a74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e01b      	b.n	8005aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	daf2      	bge.n	8005a62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	019b      	lsls	r3, r3, #6
 8005a84:	f043 0220 	orr.w	r2, r3, #32
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <USB_FlushTxFifo+0x64>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e006      	b.n	8005aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d0f0      	beq.n	8005a8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	00030d40 	.word	0x00030d40

08005abc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3301      	adds	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4a11      	ldr	r2, [pc, #68]	; (8005b18 <USB_FlushRxFifo+0x5c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d901      	bls.n	8005ada <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e018      	b.n	8005b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	daf2      	bge.n	8005ac8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2210      	movs	r2, #16
 8005aea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3301      	adds	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4a08      	ldr	r2, [pc, #32]	; (8005b18 <USB_FlushRxFifo+0x5c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e006      	b.n	8005b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d0f0      	beq.n	8005aec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	00030d40 	.word	0x00030d40

08005b1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b089      	sub	sp, #36	; 0x24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4611      	mov	r1, r2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	71fb      	strb	r3, [r7, #7]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d123      	bne.n	8005b8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b42:	88bb      	ldrh	r3, [r7, #4]
 8005b44:	3303      	adds	r3, #3
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	e018      	b.n	8005b82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	031a      	lsls	r2, r3, #12
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	3301      	adds	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	3301      	adds	r3, #1
 8005b74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d3e2      	bcc.n	8005b50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3724      	adds	r7, #36	; 0x24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b08b      	sub	sp, #44	; 0x2c
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	089b      	lsrs	r3, r3, #2
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	e014      	b.n	8005bee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	3301      	adds	r3, #1
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	3301      	adds	r3, #1
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	3301      	adds	r3, #1
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	3301      	adds	r3, #1
 8005bec:	623b      	str	r3, [r7, #32]
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d3e6      	bcc.n	8005bc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bf6:	8bfb      	ldrh	r3, [r7, #30]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01e      	beq.n	8005c3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c06:	461a      	mov	r2, r3
 8005c08:	f107 0310 	add.w	r3, r7, #16
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	fa22 f303 	lsr.w	r3, r2, r3
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	701a      	strb	r2, [r3, #0]
      i++;
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	3301      	adds	r3, #1
 8005c26:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c2e:	8bfb      	ldrh	r3, [r7, #30]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c34:	8bfb      	ldrh	r3, [r7, #30]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1ea      	bne.n	8005c10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	372c      	adds	r7, #44	; 0x2c
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c60:	68fb      	ldr	r3, [r7, #12]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4a13      	ldr	r2, [pc, #76]	; (8005cf0 <USB_CoreReset+0x64>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d901      	bls.n	8005caa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e01b      	b.n	8005ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	daf2      	bge.n	8005c98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f043 0201 	orr.w	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <USB_CoreReset+0x64>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d901      	bls.n	8005cd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e006      	b.n	8005ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d0f0      	beq.n	8005cc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	00030d40 	.word	0x00030d40

08005cf4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b086      	sub	sp, #24
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d14:	461a      	mov	r2, r3
 8005d16:	2300      	movs	r3, #0
 8005d18:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d018      	beq.n	8005d7c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10a      	bne.n	8005d66 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d5e:	f043 0304 	orr.w	r3, r3, #4
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	e014      	b.n	8005d90 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d74:	f023 0304 	bic.w	r3, r3, #4
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e009      	b.n	8005d90 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d8a:	f023 0304 	bic.w	r3, r3, #4
 8005d8e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d90:	2110      	movs	r1, #16
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fe5e 	bl	8005a54 <USB_FlushTxFifo>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fe8a 	bl	8005abc <USB_FlushRxFifo>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005db2:	2300      	movs	r3, #0
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	e015      	b.n	8005de4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	3301      	adds	r3, #1
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d3e5      	bcc.n	8005db8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005df8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00b      	beq.n	8005e1e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <USB_HostInit+0x16c>)
 8005e12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <USB_HostInit+0x170>)
 8005e18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005e1c:	e009      	b.n	8005e32 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2280      	movs	r2, #128	; 0x80
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a10      	ldr	r2, [pc, #64]	; (8005e68 <USB_HostInit+0x174>)
 8005e28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a0f      	ldr	r2, [pc, #60]	; (8005e6c <USB_HostInit+0x178>)
 8005e2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d105      	bne.n	8005e44 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f043 0210 	orr.w	r2, r3, #16
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <USB_HostInit+0x17c>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e5c:	b004      	add	sp, #16
 8005e5e:	4770      	bx	lr
 8005e60:	01000200 	.word	0x01000200
 8005e64:	00e00300 	.word	0x00e00300
 8005e68:	00600080 	.word	0x00600080
 8005e6c:	004000e0 	.word	0x004000e0
 8005e70:	a3200008 	.word	0xa3200008

08005e74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005eac:	4313      	orrs	r3, r2
 8005eae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d107      	bne.n	8005ec6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005ec2:	6053      	str	r3, [r2, #4]
 8005ec4:	e009      	b.n	8005eda <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d106      	bne.n	8005eda <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f241 7370 	movw	r3, #6000	; 0x1770
 8005ed8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f16:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f18:	2064      	movs	r0, #100	; 0x64
 8005f1a:	f7fb f9e9 	bl	80012f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f2c:	200a      	movs	r0, #10
 8005f2e:	f7fb f9df 	bl	80012f0 <HAL_Delay>

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d109      	bne.n	8005f80 <USB_DriveVbus+0x44>
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d106      	bne.n	8005f80 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f7e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8a:	d109      	bne.n	8005fa0 <USB_DriveVbus+0x64>
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f9e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	0c5b      	lsrs	r3, r3, #17
 8005fcc:	f003 0303 	and.w	r3, r3, #3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	b29b      	uxth	r3, r3
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
	...

08006000 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	4608      	mov	r0, r1
 800600a:	4611      	mov	r1, r2
 800600c:	461a      	mov	r2, r3
 800600e:	4603      	mov	r3, r0
 8006010:	70fb      	strb	r3, [r7, #3]
 8006012:	460b      	mov	r3, r1
 8006014:	70bb      	strb	r3, [r7, #2]
 8006016:	4613      	mov	r3, r2
 8006018:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4413      	add	r3, r2
 800602a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602e:	461a      	mov	r2, r3
 8006030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006034:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006036:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800603a:	2b03      	cmp	r3, #3
 800603c:	d87e      	bhi.n	800613c <USB_HC_Init+0x13c>
 800603e:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <USB_HC_Init+0x44>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006055 	.word	0x08006055
 8006048:	080060ff 	.word	0x080060ff
 800604c:	08006055 	.word	0x08006055
 8006050:	080060c1 	.word	0x080060c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006060:	461a      	mov	r2, r3
 8006062:	f240 439d 	movw	r3, #1181	; 0x49d
 8006066:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006068:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800606c:	2b00      	cmp	r3, #0
 800606e:	da10      	bge.n	8006092 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4413      	add	r3, r2
 8006078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	78fa      	ldrb	r2, [r7, #3]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	440a      	add	r2, r1
 8006086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800608e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006090:	e057      	b.n	8006142 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d051      	beq.n	8006142 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80060bc:	60d3      	str	r3, [r2, #12]
      break;
 80060be:	e040      	b.n	8006142 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060cc:	461a      	mov	r2, r3
 80060ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80060d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	da34      	bge.n	8006146 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	0151      	lsls	r1, r2, #5
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	440a      	add	r2, r1
 80060f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060fc:	e023      	b.n	8006146 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4413      	add	r3, r2
 8006106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610a:	461a      	mov	r2, r3
 800610c:	f240 2325 	movw	r3, #549	; 0x225
 8006110:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006112:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006116:	2b00      	cmp	r3, #0
 8006118:	da17      	bge.n	800614a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	440a      	add	r2, r1
 8006130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006134:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006138:	60d3      	str	r3, [r2, #12]
      }
      break;
 800613a:	e006      	b.n	800614a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	77fb      	strb	r3, [r7, #31]
      break;
 8006140:	e004      	b.n	800614c <USB_HC_Init+0x14c>
      break;
 8006142:	bf00      	nop
 8006144:	e002      	b.n	800614c <USB_HC_Init+0x14c>
      break;
 8006146:	bf00      	nop
 8006148:	e000      	b.n	800614c <USB_HC_Init+0x14c>
      break;
 800614a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	78fa      	ldrb	r2, [r7, #3]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	440a      	add	r2, r1
 8006162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006166:	f043 0302 	orr.w	r3, r3, #2
 800616a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006172:	699a      	ldr	r2, [r3, #24]
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	2101      	movs	r1, #1
 800617c:	fa01 f303 	lsl.w	r3, r1, r3
 8006180:	6939      	ldr	r1, [r7, #16]
 8006182:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006186:	4313      	orrs	r3, r2
 8006188:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006196:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800619a:	2b00      	cmp	r3, #0
 800619c:	da03      	bge.n	80061a6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800619e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061a2:	61bb      	str	r3, [r7, #24]
 80061a4:	e001      	b.n	80061aa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff feff 	bl	8005fae <USB_GetHostSpeed>
 80061b0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80061b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d106      	bne.n	80061c8 <USB_HC_Init+0x1c8>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d003      	beq.n	80061c8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80061c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e001      	b.n	80061cc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061cc:	787b      	ldrb	r3, [r7, #1]
 80061ce:	059b      	lsls	r3, r3, #22
 80061d0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061d4:	78bb      	ldrb	r3, [r7, #2]
 80061d6:	02db      	lsls	r3, r3, #11
 80061d8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061dc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061e2:	049b      	lsls	r3, r3, #18
 80061e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80061ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	0159      	lsls	r1, r3, #5
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	440b      	add	r3, r1
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006202:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006208:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800620a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800620e:	2b03      	cmp	r3, #3
 8006210:	d003      	beq.n	800621a <USB_HC_Init+0x21a>
 8006212:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006216:	2b01      	cmp	r3, #1
 8006218:	d10f      	bne.n	800623a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	440a      	add	r2, r1
 8006230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006234:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006238:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800623a:	7ffb      	ldrb	r3, [r7, #31]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08c      	sub	sp, #48	; 0x30
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	4613      	mov	r3, r2
 8006250:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	785b      	ldrb	r3, [r3, #1]
 800625a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800625c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006260:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626a:	2b00      	cmp	r3, #0
 800626c:	d02d      	beq.n	80062ca <USB_HC_StartXfer+0x86>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	791b      	ldrb	r3, [r3, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d129      	bne.n	80062ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d117      	bne.n	80062ac <USB_HC_StartXfer+0x68>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	79db      	ldrb	r3, [r3, #7]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <USB_HC_StartXfer+0x48>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	79db      	ldrb	r3, [r3, #7]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d10f      	bne.n	80062ac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	4413      	add	r3, r2
 8006294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	6a3a      	ldr	r2, [r7, #32]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062aa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10b      	bne.n	80062ca <USB_HC_StartXfer+0x86>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	795b      	ldrb	r3, [r3, #5]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d107      	bne.n	80062ca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	4619      	mov	r1, r3
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fa0f 	bl	80066e4 <USB_DoPing>
      return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e0f8      	b.n	80064bc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d018      	beq.n	8006304 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	8912      	ldrh	r2, [r2, #8]
 80062da:	4413      	add	r3, r2
 80062dc:	3b01      	subs	r3, #1
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	8912      	ldrh	r2, [r2, #8]
 80062e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80062e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80062e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062ea:	8b7b      	ldrh	r3, [r7, #26]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d90b      	bls.n	8006308 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80062f0:	8b7b      	ldrh	r3, [r7, #26]
 80062f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	8912      	ldrh	r2, [r2, #8]
 80062fa:	fb03 f202 	mul.w	r2, r3, r2
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	611a      	str	r2, [r3, #16]
 8006302:	e001      	b.n	8006308 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006304:	2301      	movs	r3, #1
 8006306:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	78db      	ldrb	r3, [r3, #3]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006310:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	8912      	ldrh	r2, [r2, #8]
 8006316:	fb03 f202 	mul.w	r2, r3, r2
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	611a      	str	r2, [r3, #16]
 800631e:	e003      	b.n	8006328 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	695a      	ldr	r2, [r3, #20]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006330:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006332:	04d9      	lsls	r1, r3, #19
 8006334:	4b63      	ldr	r3, [pc, #396]	; (80064c4 <USB_HC_StartXfer+0x280>)
 8006336:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006338:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	7a9b      	ldrb	r3, [r3, #10]
 800633e:	075b      	lsls	r3, r3, #29
 8006340:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006344:	69f9      	ldr	r1, [r7, #28]
 8006346:	0148      	lsls	r0, r1, #5
 8006348:	6a39      	ldr	r1, [r7, #32]
 800634a:	4401      	add	r1, r0
 800634c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006350:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006352:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	68d9      	ldr	r1, [r3, #12]
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636a:	460a      	mov	r2, r1
 800636c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf0c      	ite	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	2300      	movne	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	4413      	add	r3, r2
 800638e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	0151      	lsls	r1, r2, #5
 8006398:	6a3a      	ldr	r2, [r7, #32]
 800639a:	440a      	add	r2, r1
 800639c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80063a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	7e7b      	ldrb	r3, [r7, #25]
 80063b6:	075b      	lsls	r3, r3, #29
 80063b8:	69f9      	ldr	r1, [r7, #28]
 80063ba:	0148      	lsls	r0, r1, #5
 80063bc:	6a39      	ldr	r1, [r7, #32]
 80063be:	4401      	add	r1, r0
 80063c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80063c4:	4313      	orrs	r3, r2
 80063c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	78db      	ldrb	r3, [r3, #3]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	e003      	b.n	80063fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006400:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	461a      	mov	r2, r3
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	e04e      	b.n	80064bc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	78db      	ldrb	r3, [r3, #3]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d149      	bne.n	80064ba <USB_HC_StartXfer+0x276>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d045      	beq.n	80064ba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	79db      	ldrb	r3, [r3, #7]
 8006432:	2b03      	cmp	r3, #3
 8006434:	d830      	bhi.n	8006498 <USB_HC_StartXfer+0x254>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <USB_HC_StartXfer+0x1f8>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	0800644d 	.word	0x0800644d
 8006440:	08006471 	.word	0x08006471
 8006444:	0800644d 	.word	0x0800644d
 8006448:	08006471 	.word	0x08006471
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	3303      	adds	r3, #3
 8006452:	089b      	lsrs	r3, r3, #2
 8006454:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006456:	8afa      	ldrh	r2, [r7, #22]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	b29b      	uxth	r3, r3
 800645e:	429a      	cmp	r2, r3
 8006460:	d91c      	bls.n	800649c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f043 0220 	orr.w	r2, r3, #32
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	619a      	str	r2, [r3, #24]
        }
        break;
 800646e:	e015      	b.n	800649c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	3303      	adds	r3, #3
 8006476:	089b      	lsrs	r3, r3, #2
 8006478:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800647a:	8afa      	ldrh	r2, [r7, #22]
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	b29b      	uxth	r3, r3
 8006486:	429a      	cmp	r2, r3
 8006488:	d90a      	bls.n	80064a0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	619a      	str	r2, [r3, #24]
        }
        break;
 8006496:	e003      	b.n	80064a0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006498:	bf00      	nop
 800649a:	e002      	b.n	80064a2 <USB_HC_StartXfer+0x25e>
        break;
 800649c:	bf00      	nop
 800649e:	e000      	b.n	80064a2 <USB_HC_StartXfer+0x25e>
        break;
 80064a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	68d9      	ldr	r1, [r3, #12]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	785a      	ldrb	r2, [r3, #1]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2000      	movs	r0, #0
 80064b2:	9000      	str	r0, [sp, #0]
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff fb31 	bl	8005b1c <USB_WritePacket>
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3728      	adds	r7, #40	; 0x28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	1ff80000 	.word	0x1ff80000

080064c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	b29b      	uxth	r3, r3
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b089      	sub	sp, #36	; 0x24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	0c9b      	lsrs	r3, r3, #18
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	0fdb      	lsrs	r3, r3, #31
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b20      	cmp	r3, #32
 8006538:	d104      	bne.n	8006544 <USB_HC_Halt+0x5a>
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	e0c8      	b.n	80066d6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <USB_HC_Halt+0x66>
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d163      	bne.n	8006618 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	4413      	add	r3, r2
 8006558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	69fa      	ldr	r2, [r7, #28]
 8006564:	440a      	add	r2, r1
 8006566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800656a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800656e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	f040 80ab 	bne.w	80066d4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d133      	bne.n	80065f2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	4413      	add	r3, r2
 8006592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065c8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065d6:	d81d      	bhi.n	8006614 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ee:	d0ec      	beq.n	80065ca <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065f0:	e070      	b.n	80066d4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	440a      	add	r2, r1
 8006608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800660c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006610:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006612:	e05f      	b.n	80066d4 <USB_HC_Halt+0x1ea>
            break;
 8006614:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006616:	e05d      	b.n	80066d4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	440a      	add	r2, r1
 800662e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006636:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d133      	bne.n	80066b0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	4413      	add	r3, r2
 8006650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	0151      	lsls	r1, r2, #5
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	440a      	add	r2, r1
 800665e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006666:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	4413      	add	r3, r2
 8006670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	440a      	add	r2, r1
 800667e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006686:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006694:	d81d      	bhi.n	80066d2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ac:	d0ec      	beq.n	8006688 <USB_HC_Halt+0x19e>
 80066ae:	e011      	b.n	80066d4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	e000      	b.n	80066d4 <USB_HC_Halt+0x1ea>
          break;
 80066d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3724      	adds	r7, #36	; 0x24
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066f8:	2301      	movs	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	04da      	lsls	r2, r3, #19
 8006700:	4b15      	ldr	r3, [pc, #84]	; (8006758 <USB_DoPing+0x74>)
 8006702:	4013      	ands	r3, r2
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	440a      	add	r2, r1
 800670c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006714:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800672c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006734:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006742:	461a      	mov	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	1ff80000 	.word	0x1ff80000

0800675c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff f911 	bl	8005998 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006776:	2110      	movs	r1, #16
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff f96b 	bl	8005a54 <USB_FlushTxFifo>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff f997 	bl	8005abc <USB_FlushRxFifo>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006798:	2300      	movs	r3, #0
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	e01f      	b.n	80067de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d2:	461a      	mov	r2, r3
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	3301      	adds	r3, #1
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b0f      	cmp	r3, #15
 80067e2:	d9dc      	bls.n	800679e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	e034      	b.n	8006854 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006800:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006808:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006810:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681e:	461a      	mov	r2, r3
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006830:	d80c      	bhi.n	800684c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006848:	d0ec      	beq.n	8006824 <USB_StopHost+0xc8>
 800684a:	e000      	b.n	800684e <USB_StopHost+0xf2>
        break;
 800684c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	3301      	adds	r3, #1
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b0f      	cmp	r3, #15
 8006858:	d9c7      	bls.n	80067ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006860:	461a      	mov	r2, r3
 8006862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006866:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800686e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff f880 	bl	8005976 <USB_EnableGlobalInt>

  return ret;
 8006876:	7ffb      	ldrb	r3, [r7, #31]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3720      	adds	r7, #32
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006880:	b590      	push	{r4, r7, lr}
 8006882:	b089      	sub	sp, #36	; 0x24
 8006884:	af04      	add	r7, sp, #16
 8006886:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006888:	2301      	movs	r3, #1
 800688a:	2202      	movs	r2, #2
 800688c:	2102      	movs	r1, #2
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fc66 	bl	8007160 <USBH_FindInterface>
 8006894:	4603      	mov	r3, r0
 8006896:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2bff      	cmp	r3, #255	; 0xff
 800689c:	d002      	beq.n	80068a4 <USBH_CDC_InterfaceInit+0x24>
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d901      	bls.n	80068a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068a4:	2302      	movs	r3, #2
 80068a6:	e13d      	b.n	8006b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fc3b 	bl	8007128 <USBH_SelectInterface>
 80068b2:	4603      	mov	r3, r0
 80068b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80068bc:	2302      	movs	r3, #2
 80068be:	e131      	b.n	8006b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80068c6:	2050      	movs	r0, #80	; 0x50
 80068c8:	f002 fafa 	bl	8008ec0 <malloc>
 80068cc:	4603      	mov	r3, r0
 80068ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80068e0:	2302      	movs	r3, #2
 80068e2:	e11f      	b.n	8006b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068e4:	2250      	movs	r2, #80	; 0x50
 80068e6:	2100      	movs	r1, #0
 80068e8:	68b8      	ldr	r0, [r7, #8]
 80068ea:	f002 faf9 	bl	8008ee0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	211a      	movs	r1, #26
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	4413      	add	r3, r2
 80068fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	b25b      	sxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	da15      	bge.n	8006932 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	211a      	movs	r1, #26
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	4413      	add	r3, r2
 8006912:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006916:	781a      	ldrb	r2, [r3, #0]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	211a      	movs	r1, #26
 8006922:	fb01 f303 	mul.w	r3, r1, r3
 8006926:	4413      	add	r3, r2
 8006928:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800692c:	881a      	ldrh	r2, [r3, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 ff2c 	bl	8008796 <USBH_AllocPipe>
 800693e:	4603      	mov	r3, r0
 8006940:	461a      	mov	r2, r3
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	7819      	ldrb	r1, [r3, #0]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	7858      	ldrb	r0, [r3, #1]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	8952      	ldrh	r2, [r2, #10]
 800695e:	9202      	str	r2, [sp, #8]
 8006960:	2203      	movs	r2, #3
 8006962:	9201      	str	r2, [sp, #4]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	4623      	mov	r3, r4
 8006968:	4602      	mov	r2, r0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fee4 	bl	8008738 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2200      	movs	r2, #0
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f002 f9f3 	bl	8008d64 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800697e:	2300      	movs	r3, #0
 8006980:	2200      	movs	r2, #0
 8006982:	210a      	movs	r1, #10
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fbeb 	bl	8007160 <USBH_FindInterface>
 800698a:	4603      	mov	r3, r0
 800698c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	2bff      	cmp	r3, #255	; 0xff
 8006992:	d002      	beq.n	800699a <USBH_CDC_InterfaceInit+0x11a>
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d901      	bls.n	800699e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800699a:	2302      	movs	r3, #2
 800699c:	e0c2      	b.n	8006b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	211a      	movs	r1, #26
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b25b      	sxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	da16      	bge.n	80069e4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	211a      	movs	r1, #26
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	4413      	add	r3, r2
 80069c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	211a      	movs	r1, #26
 80069d2:	fb01 f303 	mul.w	r3, r1, r3
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069dc:	881a      	ldrh	r2, [r3, #0]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	835a      	strh	r2, [r3, #26]
 80069e2:	e015      	b.n	8006a10 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	211a      	movs	r1, #26
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	4413      	add	r3, r2
 80069f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	211a      	movs	r1, #26
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a0a:	881a      	ldrh	r2, [r3, #0]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	211a      	movs	r1, #26
 8006a16:	fb01 f303 	mul.w	r3, r1, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	b25b      	sxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	da16      	bge.n	8006a56 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	211a      	movs	r1, #26
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	4413      	add	r3, r2
 8006a34:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	211a      	movs	r1, #26
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a4e:	881a      	ldrh	r2, [r3, #0]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	835a      	strh	r2, [r3, #26]
 8006a54:	e015      	b.n	8006a82 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	211a      	movs	r1, #26
 8006a5c:	fb01 f303 	mul.w	r3, r1, r3
 8006a60:	4413      	add	r3, r2
 8006a62:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a66:	781a      	ldrb	r2, [r3, #0]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	211a      	movs	r1, #26
 8006a72:	fb01 f303 	mul.w	r3, r1, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a7c:	881a      	ldrh	r2, [r3, #0]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	7b9b      	ldrb	r3, [r3, #14]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 fe84 	bl	8008796 <USBH_AllocPipe>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	461a      	mov	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	7bdb      	ldrb	r3, [r3, #15]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fe7a 	bl	8008796 <USBH_AllocPipe>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	7b59      	ldrb	r1, [r3, #13]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	7b98      	ldrb	r0, [r3, #14]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	8b12      	ldrh	r2, [r2, #24]
 8006ac2:	9202      	str	r2, [sp, #8]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	9201      	str	r2, [sp, #4]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	4623      	mov	r3, r4
 8006acc:	4602      	mov	r2, r0
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fe32 	bl	8008738 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	7b19      	ldrb	r1, [r3, #12]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	7bd8      	ldrb	r0, [r3, #15]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	8b52      	ldrh	r2, [r2, #26]
 8006aec:	9202      	str	r2, [sp, #8]
 8006aee:	2202      	movs	r2, #2
 8006af0:	9201      	str	r2, [sp, #4]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	4623      	mov	r3, r4
 8006af6:	4602      	mov	r2, r0
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 fe1d 	bl	8008738 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	7b5b      	ldrb	r3, [r3, #13]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f002 f928 	bl	8008d64 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	7b1b      	ldrb	r3, [r3, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f002 f921 	bl	8008d64 <USBH_LL_SetToggle>

  return USBH_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd90      	pop	{r4, r7, pc}

08006b2c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00e      	beq.n	8006b64 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 fe12 	bl	8008776 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 fe3d 	bl	80087d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	7b1b      	ldrb	r3, [r3, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00e      	beq.n	8006b8a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	7b1b      	ldrb	r3, [r3, #12]
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fdff 	bl	8008776 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	7b1b      	ldrb	r3, [r3, #12]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 fe2a 	bl	80087d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	7b5b      	ldrb	r3, [r3, #13]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00e      	beq.n	8006bb0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	7b5b      	ldrb	r3, [r3, #13]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 fdec 	bl	8008776 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	7b5b      	ldrb	r3, [r3, #13]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 fe17 	bl	80087d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f002 f983 	bl	8008ed0 <free>
    phost->pActiveClass->pData = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3340      	adds	r3, #64	; 0x40
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f8b1 	bl	8006d5e <GetLineCoding>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006c00:	7afb      	ldrb	r3, [r7, #11]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d105      	bne.n	8006c12 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006c12:	7afb      	ldrb	r3, [r7, #11]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d877      	bhi.n	8006d30 <USBH_CDC_Process+0x114>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <USBH_CDC_Process+0x2c>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c5d 	.word	0x08006c5d
 8006c4c:	08006c63 	.word	0x08006c63
 8006c50:	08006c93 	.word	0x08006c93
 8006c54:	08006d07 	.word	0x08006d07
 8006c58:	08006d15 	.word	0x08006d15
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c60:	e06d      	b.n	8006d3e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f897 	bl	8006d9c <SetLineCoding>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c80:	e058      	b.n	8006d34 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d055      	beq.n	8006d34 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2204      	movs	r2, #4
 8006c8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c90:	e050      	b.n	8006d34 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	3340      	adds	r3, #64	; 0x40
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f860 	bl	8006d5e <GetLineCoding>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d126      	bne.n	8006cf6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cba:	791b      	ldrb	r3, [r3, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d13b      	bne.n	8006d38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d133      	bne.n	8006d38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cda:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d12b      	bne.n	8006d38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d124      	bne.n	8006d38 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f958 	bl	8006fa4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cf4:	e020      	b.n	8006d38 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d01d      	beq.n	8006d38 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2204      	movs	r2, #4
 8006d00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006d04:	e018      	b.n	8006d38 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f867 	bl	8006dda <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f8da 	bl	8006ec6 <CDC_ProcessReception>
      break;
 8006d12:	e014      	b.n	8006d3e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006d14:	2100      	movs	r1, #0
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 ffef 	bl	8007cfa <USBH_ClrFeature>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006d2e:	e005      	b.n	8006d3c <USBH_CDC_Process+0x120>

    default:
      break;
 8006d30:	bf00      	nop
 8006d32:	e004      	b.n	8006d3e <USBH_CDC_Process+0x122>
      break;
 8006d34:	bf00      	nop
 8006d36:	e002      	b.n	8006d3e <USBH_CDC_Process+0x122>
      break;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <USBH_CDC_Process+0x122>
      break;
 8006d3c:	bf00      	nop

  }

  return status;
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	22a1      	movs	r2, #161	; 0xa1
 8006d6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2221      	movs	r2, #33	; 0x21
 8006d72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2207      	movs	r2, #7
 8006d84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2207      	movs	r2, #7
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 fa81 	bl	8008294 <USBH_CtlReq>
 8006d92:	4603      	mov	r3, r0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2221      	movs	r2, #33	; 0x21
 8006daa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2207      	movs	r2, #7
 8006dc2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2207      	movs	r2, #7
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fa62 	bl	8008294 <USBH_CtlReq>
 8006dd0:	4603      	mov	r3, r0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b086      	sub	sp, #24
 8006dde:	af02      	add	r7, sp, #8
 8006de0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d002      	beq.n	8006e00 <CDC_ProcessTransmission+0x26>
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d023      	beq.n	8006e46 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006dfe:	e05e      	b.n	8006ebe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	8b12      	ldrh	r2, [r2, #24]
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d90b      	bls.n	8006e24 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	69d9      	ldr	r1, [r3, #28]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8b1a      	ldrh	r2, [r3, #24]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	7b5b      	ldrb	r3, [r3, #13]
 8006e18:	2001      	movs	r0, #1
 8006e1a:	9000      	str	r0, [sp, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 fc48 	bl	80086b2 <USBH_BulkSendData>
 8006e22:	e00b      	b.n	8006e3c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	7b5b      	ldrb	r3, [r3, #13]
 8006e32:	2001      	movs	r0, #1
 8006e34:	9000      	str	r0, [sp, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 fc3b 	bl	80086b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e44:	e03b      	b.n	8006ebe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	7b5b      	ldrb	r3, [r3, #13]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 ff5f 	bl	8008d10 <USBH_LL_GetURBState>
 8006e52:	4603      	mov	r3, r0
 8006e54:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d128      	bne.n	8006eae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	8b12      	ldrh	r2, [r2, #24]
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d90e      	bls.n	8006e86 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	8b12      	ldrh	r2, [r2, #24]
 8006e70:	1a9a      	subs	r2, r3, r2
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	8b12      	ldrh	r2, [r2, #24]
 8006e7e:	441a      	add	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	61da      	str	r2, [r3, #28]
 8006e84:	e002      	b.n	8006e8c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d004      	beq.n	8006e9e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e9c:	e00e      	b.n	8006ebc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f868 	bl	8006f7c <USBH_CDC_TransmitCallback>
      break;
 8006eac:	e006      	b.n	8006ebc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006eae:	7afb      	ldrb	r3, [r7, #11]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d103      	bne.n	8006ebc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ebc:	bf00      	nop
  }
}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b086      	sub	sp, #24
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d002      	beq.n	8006eec <CDC_ProcessReception+0x26>
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d00e      	beq.n	8006f08 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006eea:	e043      	b.n	8006f74 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6a19      	ldr	r1, [r3, #32]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	8b5a      	ldrh	r2, [r3, #26]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	7b1b      	ldrb	r3, [r3, #12]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fbff 	bl	80086fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2204      	movs	r2, #4
 8006f02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f06:	e035      	b.n	8006f74 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	7b1b      	ldrb	r3, [r3, #12]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fefe 	bl	8008d10 <USBH_LL_GetURBState>
 8006f14:	4603      	mov	r3, r0
 8006f16:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006f18:	7cfb      	ldrb	r3, [r7, #19]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d129      	bne.n	8006f72 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	7b1b      	ldrb	r3, [r3, #12]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 fe61 	bl	8008bec <USBH_LL_GetLastXferSize>
 8006f2a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d016      	beq.n	8006f64 <CDC_ProcessReception+0x9e>
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	8b5b      	ldrh	r3, [r3, #26]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d910      	bls.n	8006f64 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	1ad2      	subs	r2, r2, r3
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	6a1a      	ldr	r2, [r3, #32]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	441a      	add	r2, r3
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2203      	movs	r2, #3
 8006f5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f62:	e006      	b.n	8006f72 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f80f 	bl	8006f90 <USBH_CDC_ReceiveCallback>
      break;
 8006f72:	bf00      	nop
  }
}
 8006f74:	bf00      	nop
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e029      	b.n	8007024 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	79fa      	ldrb	r2, [r7, #7]
 8006fd4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f81f 	bl	800702c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f001 fd31 	bl	8008a84 <USBH_LL_Init>

  return USBH_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	e009      	b.n	8007052 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	33e0      	adds	r3, #224	; 0xe0
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	2200      	movs	r2, #0
 800704a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b0f      	cmp	r3, #15
 8007056:	d9f2      	bls.n	800703e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e009      	b.n	8007072 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007078:	d3f1      	bcc.n	800705e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2240      	movs	r2, #64	; 0x40
 800709e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d016      	beq.n	8007116 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10e      	bne.n	8007110 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070f8:	1c59      	adds	r1, r3, #1
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	33de      	adds	r3, #222	; 0xde
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]
 800710e:	e004      	b.n	800711a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007110:	2302      	movs	r3, #2
 8007112:	73fb      	strb	r3, [r7, #15]
 8007114:	e001      	b.n	800711a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007116:	2302      	movs	r3, #2
 8007118:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800713e:	78fa      	ldrb	r2, [r7, #3]
 8007140:	429a      	cmp	r2, r3
 8007142:	d204      	bcs.n	800714e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800714c:	e001      	b.n	8007152 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800714e:	2302      	movs	r3, #2
 8007150:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007152:	7bfb      	ldrb	r3, [r7, #15]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	4608      	mov	r0, r1
 800716a:	4611      	mov	r1, r2
 800716c:	461a      	mov	r2, r3
 800716e:	4603      	mov	r3, r0
 8007170:	70fb      	strb	r3, [r7, #3]
 8007172:	460b      	mov	r3, r1
 8007174:	70bb      	strb	r3, [r7, #2]
 8007176:	4613      	mov	r3, r2
 8007178:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800717e:	2300      	movs	r3, #0
 8007180:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007188:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800718a:	e025      	b.n	80071d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	221a      	movs	r2, #26
 8007190:	fb02 f303 	mul.w	r3, r2, r3
 8007194:	3308      	adds	r3, #8
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4413      	add	r3, r2
 800719a:	3302      	adds	r3, #2
 800719c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	795b      	ldrb	r3, [r3, #5]
 80071a2:	78fa      	ldrb	r2, [r7, #3]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d002      	beq.n	80071ae <USBH_FindInterface+0x4e>
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	2bff      	cmp	r3, #255	; 0xff
 80071ac:	d111      	bne.n	80071d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071b2:	78ba      	ldrb	r2, [r7, #2]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d002      	beq.n	80071be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071b8:	78bb      	ldrb	r3, [r7, #2]
 80071ba:	2bff      	cmp	r3, #255	; 0xff
 80071bc:	d109      	bne.n	80071d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071c2:	787a      	ldrb	r2, [r7, #1]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d002      	beq.n	80071ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071c8:	787b      	ldrb	r3, [r7, #1]
 80071ca:	2bff      	cmp	r3, #255	; 0xff
 80071cc:	d101      	bne.n	80071d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	e006      	b.n	80071e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	3301      	adds	r3, #1
 80071d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d9d6      	bls.n	800718c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80071de:	23ff      	movs	r3, #255	; 0xff
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 fc81 	bl	8008afc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80071fa:	2101      	movs	r1, #1
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 fd9a 	bl	8008d36 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af04      	add	r7, sp, #16
 8007212:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007214:	2302      	movs	r3, #2
 8007216:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b01      	cmp	r3, #1
 8007226:	d102      	bne.n	800722e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2203      	movs	r2, #3
 800722c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b0b      	cmp	r3, #11
 8007236:	f200 81be 	bhi.w	80075b6 <USBH_Process+0x3aa>
 800723a:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <USBH_Process+0x34>)
 800723c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007240:	08007271 	.word	0x08007271
 8007244:	080072a3 	.word	0x080072a3
 8007248:	0800730b 	.word	0x0800730b
 800724c:	08007551 	.word	0x08007551
 8007250:	080075b7 	.word	0x080075b7
 8007254:	080073af 	.word	0x080073af
 8007258:	080074f7 	.word	0x080074f7
 800725c:	080073e5 	.word	0x080073e5
 8007260:	08007405 	.word	0x08007405
 8007264:	08007425 	.word	0x08007425
 8007268:	08007469 	.word	0x08007469
 800726c:	08007539 	.word	0x08007539
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 819e 	beq.w	80075ba <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007284:	20c8      	movs	r0, #200	; 0xc8
 8007286:	f001 fd9d 	bl	8008dc4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fc93 	bl	8008bb6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072a0:	e18b      	b.n	80075ba <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d107      	bne.n	80072bc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072ba:	e18d      	b.n	80075d8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072c6:	d914      	bls.n	80072f2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072ce:	3301      	adds	r3, #1
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d903      	bls.n	80072ea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	220d      	movs	r2, #13
 80072e6:	701a      	strb	r2, [r3, #0]
      break;
 80072e8:	e176      	b.n	80075d8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	701a      	strb	r2, [r3, #0]
      break;
 80072f0:	e172      	b.n	80075d8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072f8:	f103 020a 	add.w	r2, r3, #10
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007302:	200a      	movs	r0, #10
 8007304:	f001 fd5e 	bl	8008dc4 <USBH_Delay>
      break;
 8007308:	e166      	b.n	80075d8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800731a:	2104      	movs	r1, #4
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007320:	2064      	movs	r0, #100	; 0x64
 8007322:	f001 fd4f 	bl	8008dc4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 fc1e 	bl	8008b68 <USBH_LL_GetSpeed>
 800732c:	4603      	mov	r3, r0
 800732e:	461a      	mov	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2205      	movs	r2, #5
 800733a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800733c:	2100      	movs	r1, #0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 fa29 	bl	8008796 <USBH_AllocPipe>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800734c:	2180      	movs	r1, #128	; 0x80
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 fa21 	bl	8008796 <USBH_AllocPipe>
 8007354:	4603      	mov	r3, r0
 8007356:	461a      	mov	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	7919      	ldrb	r1, [r3, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007370:	b292      	uxth	r2, r2
 8007372:	9202      	str	r2, [sp, #8]
 8007374:	2200      	movs	r2, #0
 8007376:	9201      	str	r2, [sp, #4]
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	4603      	mov	r3, r0
 800737c:	2280      	movs	r2, #128	; 0x80
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 f9da 	bl	8008738 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7959      	ldrb	r1, [r3, #5]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007398:	b292      	uxth	r2, r2
 800739a:	9202      	str	r2, [sp, #8]
 800739c:	2200      	movs	r2, #0
 800739e:	9201      	str	r2, [sp, #4]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	4603      	mov	r3, r0
 80073a4:	2200      	movs	r2, #0
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 f9c6 	bl	8008738 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073ac:	e114      	b.n	80075d8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f918 	bl	80075e4 <USBH_HandleEnum>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f040 80fe 	bne.w	80075be <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d103      	bne.n	80073dc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2208      	movs	r2, #8
 80073d8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073da:	e0f0      	b.n	80075be <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2207      	movs	r2, #7
 80073e0:	701a      	strb	r2, [r3, #0]
      break;
 80073e2:	e0ec      	b.n	80075be <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 80e9 	beq.w	80075c2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073f6:	2101      	movs	r1, #1
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2208      	movs	r2, #8
 8007400:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007402:	e0de      	b.n	80075c2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800740a:	b29b      	uxth	r3, r3
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fc2c 	bl	8007c6c <USBH_SetCfg>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	f040 80d5 	bne.w	80075c6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2209      	movs	r2, #9
 8007420:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007422:	e0d0      	b.n	80075c6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b00      	cmp	r3, #0
 8007430:	d016      	beq.n	8007460 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007432:	2101      	movs	r1, #1
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fc3c 	bl	8007cb2 <USBH_SetFeature>
 800743a:	4603      	mov	r3, r0
 800743c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d103      	bne.n	800744e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	220a      	movs	r2, #10
 800744a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800744c:	e0bd      	b.n	80075ca <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b03      	cmp	r3, #3
 8007454:	f040 80b9 	bne.w	80075ca <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	220a      	movs	r2, #10
 800745c:	701a      	strb	r2, [r3, #0]
      break;
 800745e:	e0b4      	b.n	80075ca <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	220a      	movs	r2, #10
 8007464:	701a      	strb	r2, [r3, #0]
      break;
 8007466:	e0b0      	b.n	80075ca <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 80ad 	beq.w	80075ce <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800747c:	2300      	movs	r3, #0
 800747e:	73fb      	strb	r3, [r7, #15]
 8007480:	e016      	b.n	80074b0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007482:	7bfa      	ldrb	r2, [r7, #15]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	32de      	adds	r2, #222	; 0xde
 8007488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748c:	791a      	ldrb	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007494:	429a      	cmp	r2, r3
 8007496:	d108      	bne.n	80074aa <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007498:	7bfa      	ldrb	r2, [r7, #15]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	32de      	adds	r2, #222	; 0xde
 800749e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80074a8:	e005      	b.n	80074b6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
 80074ac:	3301      	adds	r3, #1
 80074ae:	73fb      	strb	r3, [r7, #15]
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0e5      	beq.n	8007482 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d016      	beq.n	80074ee <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	4798      	blx	r3
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2206      	movs	r2, #6
 80074d6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074de:	2103      	movs	r1, #3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074e4:	e073      	b.n	80075ce <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	220d      	movs	r2, #13
 80074ea:	701a      	strb	r2, [r3, #0]
      break;
 80074ec:	e06f      	b.n	80075ce <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	220d      	movs	r2, #13
 80074f2:	701a      	strb	r2, [r3, #0]
      break;
 80074f4:	e06b      	b.n	80075ce <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d017      	beq.n	8007530 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
 800750c:	4603      	mov	r3, r0
 800750e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d103      	bne.n	8007520 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	220b      	movs	r2, #11
 800751c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800751e:	e058      	b.n	80075d2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d154      	bne.n	80075d2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	220d      	movs	r2, #13
 800752c:	701a      	strb	r2, [r3, #0]
      break;
 800752e:	e050      	b.n	80075d2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	220d      	movs	r2, #13
 8007534:	701a      	strb	r2, [r3, #0]
      break;
 8007536:	e04c      	b.n	80075d2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d049      	beq.n	80075d6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
      }
      break;
 800754e:	e042      	b.n	80075d6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff fd67 	bl	800702c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007564:	2b00      	cmp	r3, #0
 8007566:	d009      	beq.n	800757c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007582:	2b00      	cmp	r3, #0
 8007584:	d005      	beq.n	8007592 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800758c:	2105      	movs	r1, #5
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b01      	cmp	r3, #1
 800759c:	d107      	bne.n	80075ae <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff fe20 	bl	80071ec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075ac:	e014      	b.n	80075d8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 faa4 	bl	8008afc <USBH_LL_Start>
      break;
 80075b4:	e010      	b.n	80075d8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80075b6:	bf00      	nop
 80075b8:	e00e      	b.n	80075d8 <USBH_Process+0x3cc>
      break;
 80075ba:	bf00      	nop
 80075bc:	e00c      	b.n	80075d8 <USBH_Process+0x3cc>
      break;
 80075be:	bf00      	nop
 80075c0:	e00a      	b.n	80075d8 <USBH_Process+0x3cc>
    break;
 80075c2:	bf00      	nop
 80075c4:	e008      	b.n	80075d8 <USBH_Process+0x3cc>
      break;
 80075c6:	bf00      	nop
 80075c8:	e006      	b.n	80075d8 <USBH_Process+0x3cc>
      break;
 80075ca:	bf00      	nop
 80075cc:	e004      	b.n	80075d8 <USBH_Process+0x3cc>
      break;
 80075ce:	bf00      	nop
 80075d0:	e002      	b.n	80075d8 <USBH_Process+0x3cc>
      break;
 80075d2:	bf00      	nop
 80075d4:	e000      	b.n	80075d8 <USBH_Process+0x3cc>
      break;
 80075d6:	bf00      	nop
  }
  return USBH_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop

080075e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af04      	add	r7, sp, #16
 80075ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075ec:	2301      	movs	r3, #1
 80075ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075f0:	2301      	movs	r3, #1
 80075f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	785b      	ldrb	r3, [r3, #1]
 80075f8:	2b07      	cmp	r3, #7
 80075fa:	f200 81c1 	bhi.w	8007980 <USBH_HandleEnum+0x39c>
 80075fe:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <USBH_HandleEnum+0x20>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007625 	.word	0x08007625
 8007608:	080076e3 	.word	0x080076e3
 800760c:	0800774d 	.word	0x0800774d
 8007610:	080077db 	.word	0x080077db
 8007614:	08007845 	.word	0x08007845
 8007618:	080078b5 	.word	0x080078b5
 800761c:	080078fb 	.word	0x080078fb
 8007620:	08007941 	.word	0x08007941
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007624:	2108      	movs	r1, #8
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa50 	bl	8007acc <USBH_Get_DevDesc>
 800762c:	4603      	mov	r3, r0
 800762e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d130      	bne.n	8007698 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7919      	ldrb	r1, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800765a:	b292      	uxth	r2, r2
 800765c:	9202      	str	r2, [sp, #8]
 800765e:	2200      	movs	r2, #0
 8007660:	9201      	str	r2, [sp, #4]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	4603      	mov	r3, r0
 8007666:	2280      	movs	r2, #128	; 0x80
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 f865 	bl	8008738 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	7959      	ldrb	r1, [r3, #5]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007682:	b292      	uxth	r2, r2
 8007684:	9202      	str	r2, [sp, #8]
 8007686:	2200      	movs	r2, #0
 8007688:	9201      	str	r2, [sp, #4]
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	4603      	mov	r3, r0
 800768e:	2200      	movs	r2, #0
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 f851 	bl	8008738 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007696:	e175      	b.n	8007984 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2b03      	cmp	r3, #3
 800769c:	f040 8172 	bne.w	8007984 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076a6:	3301      	adds	r3, #1
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d903      	bls.n	80076c2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	220d      	movs	r2, #13
 80076be:	701a      	strb	r2, [r3, #0]
      break;
 80076c0:	e160      	b.n	8007984 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	795b      	ldrb	r3, [r3, #5]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f885 	bl	80087d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	791b      	ldrb	r3, [r3, #4]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 f87f 	bl	80087d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	701a      	strb	r2, [r3, #0]
      break;
 80076e0:	e150      	b.n	8007984 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076e2:	2112      	movs	r1, #18
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f9f1 	bl	8007acc <USBH_Get_DevDesc>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076fa:	e145      	b.n	8007988 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	f040 8142 	bne.w	8007988 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800770a:	3301      	adds	r3, #1
 800770c:	b2da      	uxtb	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800771a:	2b03      	cmp	r3, #3
 800771c:	d903      	bls.n	8007726 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	220d      	movs	r2, #13
 8007722:	701a      	strb	r2, [r3, #0]
      break;
 8007724:	e130      	b.n	8007988 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	795b      	ldrb	r3, [r3, #5]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 f853 	bl	80087d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	791b      	ldrb	r3, [r3, #4]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 f84d 	bl	80087d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
      break;
 800774a:	e11d      	b.n	8007988 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800774c:	2101      	movs	r1, #1
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa68 	bl	8007c24 <USBH_SetAddress>
 8007754:	4603      	mov	r3, r0
 8007756:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d132      	bne.n	80077c4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800775e:	2002      	movs	r0, #2
 8007760:	f001 fb30 	bl	8008dc4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2203      	movs	r2, #3
 8007770:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	7919      	ldrb	r1, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007786:	b292      	uxth	r2, r2
 8007788:	9202      	str	r2, [sp, #8]
 800778a:	2200      	movs	r2, #0
 800778c:	9201      	str	r2, [sp, #4]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4603      	mov	r3, r0
 8007792:	2280      	movs	r2, #128	; 0x80
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 ffcf 	bl	8008738 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	7959      	ldrb	r1, [r3, #5]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077ae:	b292      	uxth	r2, r2
 80077b0:	9202      	str	r2, [sp, #8]
 80077b2:	2200      	movs	r2, #0
 80077b4:	9201      	str	r2, [sp, #4]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	4603      	mov	r3, r0
 80077ba:	2200      	movs	r2, #0
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 ffbb 	bl	8008738 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077c2:	e0e3      	b.n	800798c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	f040 80e0 	bne.w	800798c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	220d      	movs	r2, #13
 80077d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	705a      	strb	r2, [r3, #1]
      break;
 80077d8:	e0d8      	b.n	800798c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80077da:	2109      	movs	r1, #9
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f99d 	bl	8007b1c <USBH_Get_CfgDesc>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2204      	movs	r2, #4
 80077f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077f2:	e0cd      	b.n	8007990 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	f040 80ca 	bne.w	8007990 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007802:	3301      	adds	r3, #1
 8007804:	b2da      	uxtb	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007812:	2b03      	cmp	r3, #3
 8007814:	d903      	bls.n	800781e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	220d      	movs	r2, #13
 800781a:	701a      	strb	r2, [r3, #0]
      break;
 800781c:	e0b8      	b.n	8007990 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	795b      	ldrb	r3, [r3, #5]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 ffd7 	bl	80087d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	791b      	ldrb	r3, [r3, #4]
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 ffd1 	bl	80087d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	701a      	strb	r2, [r3, #0]
      break;
 8007842:	e0a5      	b.n	8007990 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f965 	bl	8007b1c <USBH_Get_CfgDesc>
 8007852:	4603      	mov	r3, r0
 8007854:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d103      	bne.n	8007864 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2205      	movs	r2, #5
 8007860:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007862:	e097      	b.n	8007994 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	2b03      	cmp	r3, #3
 8007868:	f040 8094 	bne.w	8007994 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007872:	3301      	adds	r3, #1
 8007874:	b2da      	uxtb	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007882:	2b03      	cmp	r3, #3
 8007884:	d903      	bls.n	800788e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	220d      	movs	r2, #13
 800788a:	701a      	strb	r2, [r3, #0]
      break;
 800788c:	e082      	b.n	8007994 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	795b      	ldrb	r3, [r3, #5]
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 ff9f 	bl	80087d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	791b      	ldrb	r3, [r3, #4]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 ff99 	bl	80087d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	701a      	strb	r2, [r3, #0]
      break;
 80078b2:	e06f      	b.n	8007994 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d019      	beq.n	80078f2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078ca:	23ff      	movs	r3, #255	; 0xff
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f949 	bl	8007b64 <USBH_Get_StringDesc>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d103      	bne.n	80078e4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2206      	movs	r2, #6
 80078e0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078e2:	e059      	b.n	8007998 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d156      	bne.n	8007998 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2206      	movs	r2, #6
 80078ee:	705a      	strb	r2, [r3, #1]
      break;
 80078f0:	e052      	b.n	8007998 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2206      	movs	r2, #6
 80078f6:	705a      	strb	r2, [r3, #1]
      break;
 80078f8:	e04e      	b.n	8007998 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007900:	2b00      	cmp	r3, #0
 8007902:	d019      	beq.n	8007938 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007910:	23ff      	movs	r3, #255	; 0xff
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f926 	bl	8007b64 <USBH_Get_StringDesc>
 8007918:	4603      	mov	r3, r0
 800791a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d103      	bne.n	800792a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2207      	movs	r2, #7
 8007926:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007928:	e038      	b.n	800799c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	2b03      	cmp	r3, #3
 800792e:	d135      	bne.n	800799c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2207      	movs	r2, #7
 8007934:	705a      	strb	r2, [r3, #1]
      break;
 8007936:	e031      	b.n	800799c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2207      	movs	r2, #7
 800793c:	705a      	strb	r2, [r3, #1]
      break;
 800793e:	e02d      	b.n	800799c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007946:	2b00      	cmp	r3, #0
 8007948:	d017      	beq.n	800797a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007956:	23ff      	movs	r3, #255	; 0xff
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f903 	bl	8007b64 <USBH_Get_StringDesc>
 800795e:	4603      	mov	r3, r0
 8007960:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d102      	bne.n	800796e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800796c:	e018      	b.n	80079a0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b03      	cmp	r3, #3
 8007972:	d115      	bne.n	80079a0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
      break;
 8007978:	e012      	b.n	80079a0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]
      break;
 800797e:	e00f      	b.n	80079a0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007980:	bf00      	nop
 8007982:	e00e      	b.n	80079a2 <USBH_HandleEnum+0x3be>
      break;
 8007984:	bf00      	nop
 8007986:	e00c      	b.n	80079a2 <USBH_HandleEnum+0x3be>
      break;
 8007988:	bf00      	nop
 800798a:	e00a      	b.n	80079a2 <USBH_HandleEnum+0x3be>
      break;
 800798c:	bf00      	nop
 800798e:	e008      	b.n	80079a2 <USBH_HandleEnum+0x3be>
      break;
 8007990:	bf00      	nop
 8007992:	e006      	b.n	80079a2 <USBH_HandleEnum+0x3be>
      break;
 8007994:	bf00      	nop
 8007996:	e004      	b.n	80079a2 <USBH_HandleEnum+0x3be>
      break;
 8007998:	bf00      	nop
 800799a:	e002      	b.n	80079a2 <USBH_HandleEnum+0x3be>
      break;
 800799c:	bf00      	nop
 800799e:	e000      	b.n	80079a2 <USBH_HandleEnum+0x3be>
      break;
 80079a0:	bf00      	nop
  }
  return Status;
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f804 	bl	80079ee <USBH_HandleSof>
}
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b0b      	cmp	r3, #11
 80079fe:	d10a      	bne.n	8007a16 <USBH_HandleSof+0x28>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	4798      	blx	r3
  }
}
 8007a16:	bf00      	nop
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007a2e:	bf00      	nop
}
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a4a:	bf00      	nop
}
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 f844 	bl	8008b32 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	791b      	ldrb	r3, [r3, #4]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fe91 	bl	80087d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	795b      	ldrb	r3, [r3, #5]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fe8b 	bl	80087d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af02      	add	r7, sp, #8
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aea:	2100      	movs	r1, #0
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f864 	bl	8007bba <USBH_GetDescriptor>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10a      	bne.n	8007b12 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b08:	78fa      	ldrb	r2, [r7, #3]
 8007b0a:	b292      	uxth	r2, r2
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f000 f918 	bl	8007d42 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	331c      	adds	r3, #28
 8007b2c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b2e:	887b      	ldrh	r3, [r7, #2]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b38:	2100      	movs	r1, #0
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f83d 	bl	8007bba <USBH_GetDescriptor>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d107      	bne.n	8007b5a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b4a:	887b      	ldrh	r3, [r7, #2]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f987 	bl	8007e64 <USBH_ParseCfgDesc>
 8007b56:	4603      	mov	r3, r0
 8007b58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	607a      	str	r2, [r7, #4]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	460b      	mov	r3, r1
 8007b72:	72fb      	strb	r3, [r7, #11]
 8007b74:	4613      	mov	r3, r2
 8007b76:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b80:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b88:	893b      	ldrh	r3, [r7, #8]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	2100      	movs	r1, #0
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f812 	bl	8007bba <USBH_GetDescriptor>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d107      	bne.n	8007bb0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ba6:	893a      	ldrh	r2, [r7, #8]
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fb24 	bl	80081f8 <USBH_ParseStringDesc>
  }

  return status;
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3718      	adds	r7, #24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	607b      	str	r3, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	72fb      	strb	r3, [r7, #11]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	789b      	ldrb	r3, [r3, #2]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d11c      	bne.n	8007c0e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2206      	movs	r2, #6
 8007be4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	893a      	ldrh	r2, [r7, #8]
 8007bea:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007bec:	893b      	ldrh	r3, [r7, #8]
 8007bee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bf6:	d104      	bne.n	8007c02 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f240 4209 	movw	r2, #1033	; 0x409
 8007bfe:	829a      	strh	r2, [r3, #20]
 8007c00:	e002      	b.n	8007c08 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8b3a      	ldrh	r2, [r7, #24]
 8007c0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c0e:	8b3b      	ldrh	r3, [r7, #24]
 8007c10:	461a      	mov	r2, r3
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 fb3d 	bl	8008294 <USBH_CtlReq>
 8007c1a:	4603      	mov	r3, r0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	789b      	ldrb	r3, [r3, #2]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d10f      	bne.n	8007c58 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2205      	movs	r2, #5
 8007c42:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fb19 	bl	8008294 <USBH_CtlReq>
 8007c62:	4603      	mov	r3, r0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	789b      	ldrb	r3, [r3, #2]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d10e      	bne.n	8007c9e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2209      	movs	r2, #9
 8007c8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	887a      	ldrh	r2, [r7, #2]
 8007c90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 faf6 	bl	8008294 <USBH_CtlReq>
 8007ca8:	4603      	mov	r3, r0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	460b      	mov	r3, r1
 8007cbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	789b      	ldrb	r3, [r3, #2]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d10f      	bne.n	8007ce6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2203      	movs	r2, #3
 8007cd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2100      	movs	r1, #0
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fad2 	bl	8008294 <USBH_CtlReq>
 8007cf0:	4603      	mov	r3, r0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	789b      	ldrb	r3, [r3, #2]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d10f      	bne.n	8007d2e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 faae 	bl	8008294 <USBH_CtlReq>
 8007d38:	4603      	mov	r3, r0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b085      	sub	sp, #20
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	781a      	ldrb	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	785a      	ldrb	r2, [r3, #1]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	3302      	adds	r3, #2
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	3303      	adds	r3, #3
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4313      	orrs	r3, r2
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	791a      	ldrb	r2, [r3, #4]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	795a      	ldrb	r2, [r3, #5]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	799a      	ldrb	r2, [r3, #6]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	79da      	ldrb	r2, [r3, #7]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	79db      	ldrb	r3, [r3, #7]
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	dc11      	bgt.n	8007dc8 <USBH_ParseDevDesc+0x86>
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	db16      	blt.n	8007dd6 <USBH_ParseDevDesc+0x94>
 8007da8:	3b08      	subs	r3, #8
 8007daa:	2201      	movs	r2, #1
 8007dac:	fa02 f303 	lsl.w	r3, r2, r3
 8007db0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bf14      	ite	ne
 8007dbc:	2301      	movne	r3, #1
 8007dbe:	2300      	moveq	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d102      	bne.n	8007dcc <USBH_ParseDevDesc+0x8a>
 8007dc6:	e006      	b.n	8007dd6 <USBH_ParseDevDesc+0x94>
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d104      	bne.n	8007dd6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	79da      	ldrb	r2, [r3, #7]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	71da      	strb	r2, [r3, #7]
      break;
 8007dd4:	e003      	b.n	8007dde <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2240      	movs	r2, #64	; 0x40
 8007dda:	71da      	strb	r2, [r3, #7]
      break;
 8007ddc:	bf00      	nop
  }

  if (length > 8U)
 8007dde:	88fb      	ldrh	r3, [r7, #6]
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d939      	bls.n	8007e58 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	3308      	adds	r3, #8
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	3309      	adds	r3, #9
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	330a      	adds	r3, #10
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	330b      	adds	r3, #11
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	4313      	orrs	r3, r2
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	330c      	adds	r3, #12
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	330d      	adds	r3, #13
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	4313      	orrs	r3, r2
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	7b9a      	ldrb	r2, [r3, #14]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	7bda      	ldrb	r2, [r3, #15]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	7c1a      	ldrb	r2, [r3, #16]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	7c5a      	ldrb	r2, [r3, #17]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	745a      	strb	r2, [r3, #17]
  }
}
 8007e58:	bf00      	nop
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08c      	sub	sp, #48	; 0x30
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e78:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	781a      	ldrb	r2, [r3, #0]
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	785a      	ldrb	r2, [r3, #1]
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	3302      	adds	r3, #2
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	3303      	adds	r3, #3
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec0:	bf28      	it	cs
 8007ec2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	791a      	ldrb	r2, [r3, #4]
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	795a      	ldrb	r2, [r3, #5]
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	799a      	ldrb	r2, [r3, #6]
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	79da      	ldrb	r2, [r3, #7]
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	7a1a      	ldrb	r2, [r3, #8]
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b09      	cmp	r3, #9
 8007efa:	d002      	beq.n	8007f02 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	2209      	movs	r2, #9
 8007f00:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f02:	88fb      	ldrh	r3, [r7, #6]
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	f240 809d 	bls.w	8008044 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f0a:	2309      	movs	r3, #9
 8007f0c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f12:	e081      	b.n	8008018 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f14:	f107 0316 	add.w	r3, r7, #22
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f1c:	f000 f99f 	bl	800825e <USBH_GetNextDesc>
 8007f20:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	785b      	ldrb	r3, [r3, #1]
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d176      	bne.n	8008018 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b09      	cmp	r3, #9
 8007f30:	d002      	beq.n	8007f38 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	2209      	movs	r2, #9
 8007f36:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f3c:	221a      	movs	r2, #26
 8007f3e:	fb02 f303 	mul.w	r3, r2, r3
 8007f42:	3308      	adds	r3, #8
 8007f44:	6a3a      	ldr	r2, [r7, #32]
 8007f46:	4413      	add	r3, r2
 8007f48:	3302      	adds	r3, #2
 8007f4a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f4e:	69f8      	ldr	r0, [r7, #28]
 8007f50:	f000 f87e 	bl	8008050 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f5e:	e043      	b.n	8007fe8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f60:	f107 0316 	add.w	r3, r7, #22
 8007f64:	4619      	mov	r1, r3
 8007f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f68:	f000 f979 	bl	800825e <USBH_GetNextDesc>
 8007f6c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	785b      	ldrb	r3, [r3, #1]
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d138      	bne.n	8007fe8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	795b      	ldrb	r3, [r3, #5]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d10f      	bne.n	8007f9e <USBH_ParseCfgDesc+0x13a>
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	799b      	ldrb	r3, [r3, #6]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d10b      	bne.n	8007f9e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	79db      	ldrb	r3, [r3, #7]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10f      	bne.n	8007fae <USBH_ParseCfgDesc+0x14a>
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b09      	cmp	r3, #9
 8007f94:	d00b      	beq.n	8007fae <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	2209      	movs	r2, #9
 8007f9a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f9c:	e007      	b.n	8007fae <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b07      	cmp	r3, #7
 8007fa4:	d004      	beq.n	8007fb0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	2207      	movs	r2, #7
 8007faa:	701a      	strb	r2, [r3, #0]
 8007fac:	e000      	b.n	8007fb0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fae:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fb4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fb8:	3201      	adds	r2, #1
 8007fba:	00d2      	lsls	r2, r2, #3
 8007fbc:	211a      	movs	r1, #26
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	6a3a      	ldr	r2, [r7, #32]
 8007fc8:	4413      	add	r3, r2
 8007fca:	3304      	adds	r3, #4
 8007fcc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fd0:	69b9      	ldr	r1, [r7, #24]
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 f86b 	bl	80080ae <USBH_ParseEPDesc>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007fde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	791b      	ldrb	r3, [r3, #4]
 8007fec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d204      	bcs.n	8007ffe <USBH_ParseCfgDesc+0x19a>
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	885a      	ldrh	r2, [r3, #2]
 8007ff8:	8afb      	ldrh	r3, [r7, #22]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d8b0      	bhi.n	8007f60 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	791b      	ldrb	r3, [r3, #4]
 8008002:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008006:	429a      	cmp	r2, r3
 8008008:	d201      	bcs.n	800800e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800800a:	2303      	movs	r3, #3
 800800c:	e01c      	b.n	8008048 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800800e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008012:	3301      	adds	r3, #1
 8008014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800801c:	2b01      	cmp	r3, #1
 800801e:	d805      	bhi.n	800802c <USBH_ParseCfgDesc+0x1c8>
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	885a      	ldrh	r2, [r3, #2]
 8008024:	8afb      	ldrh	r3, [r7, #22]
 8008026:	429a      	cmp	r2, r3
 8008028:	f63f af74 	bhi.w	8007f14 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	791b      	ldrb	r3, [r3, #4]
 8008030:	2b02      	cmp	r3, #2
 8008032:	bf28      	it	cs
 8008034:	2302      	movcs	r3, #2
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800803c:	429a      	cmp	r2, r3
 800803e:	d201      	bcs.n	8008044 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008040:	2303      	movs	r3, #3
 8008042:	e001      	b.n	8008048 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008044:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008048:	4618      	mov	r0, r3
 800804a:	3730      	adds	r7, #48	; 0x30
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781a      	ldrb	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	785a      	ldrb	r2, [r3, #1]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	789a      	ldrb	r2, [r3, #2]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	78da      	ldrb	r2, [r3, #3]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	791a      	ldrb	r2, [r3, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	795a      	ldrb	r2, [r3, #5]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	799a      	ldrb	r2, [r3, #6]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	79da      	ldrb	r2, [r3, #7]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	7a1a      	ldrb	r2, [r3, #8]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	721a      	strb	r2, [r3, #8]
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b087      	sub	sp, #28
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	781a      	ldrb	r2, [r3, #0]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	785a      	ldrb	r2, [r3, #1]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	789a      	ldrb	r2, [r3, #2]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	78da      	ldrb	r2, [r3, #3]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3304      	adds	r3, #4
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3305      	adds	r3, #5
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	021b      	lsls	r3, r3, #8
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	4313      	orrs	r3, r2
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	799a      	ldrb	r2, [r3, #6]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	889b      	ldrh	r3, [r3, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d102      	bne.n	8008110 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800810a:	2303      	movs	r3, #3
 800810c:	75fb      	strb	r3, [r7, #23]
 800810e:	e033      	b.n	8008178 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	889b      	ldrh	r3, [r3, #4]
 8008114:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008118:	f023 0307 	bic.w	r3, r3, #7
 800811c:	b29a      	uxth	r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	889b      	ldrh	r3, [r3, #4]
 8008126:	b21a      	sxth	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3304      	adds	r3, #4
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b299      	uxth	r1, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3305      	adds	r3, #5
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	b29b      	uxth	r3, r3
 8008138:	021b      	lsls	r3, r3, #8
 800813a:	b29b      	uxth	r3, r3
 800813c:	430b      	orrs	r3, r1
 800813e:	b29b      	uxth	r3, r3
 8008140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008144:	2b00      	cmp	r3, #0
 8008146:	d110      	bne.n	800816a <USBH_ParseEPDesc+0xbc>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3304      	adds	r3, #4
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b299      	uxth	r1, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3305      	adds	r3, #5
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	021b      	lsls	r3, r3, #8
 800815a:	b29b      	uxth	r3, r3
 800815c:	430b      	orrs	r3, r1
 800815e:	b29b      	uxth	r3, r3
 8008160:	b21b      	sxth	r3, r3
 8008162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008166:	b21b      	sxth	r3, r3
 8008168:	e001      	b.n	800816e <USBH_ParseEPDesc+0xc0>
 800816a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800816e:	4313      	orrs	r3, r2
 8008170:	b21b      	sxth	r3, r3
 8008172:	b29a      	uxth	r2, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800817e:	2b00      	cmp	r3, #0
 8008180:	d116      	bne.n	80081b0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	78db      	ldrb	r3, [r3, #3]
 8008186:	f003 0303 	and.w	r3, r3, #3
 800818a:	2b01      	cmp	r3, #1
 800818c:	d005      	beq.n	800819a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	78db      	ldrb	r3, [r3, #3]
 8008192:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008196:	2b03      	cmp	r3, #3
 8008198:	d127      	bne.n	80081ea <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	799b      	ldrb	r3, [r3, #6]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <USBH_ParseEPDesc+0xfc>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	799b      	ldrb	r3, [r3, #6]
 80081a6:	2b10      	cmp	r3, #16
 80081a8:	d91f      	bls.n	80081ea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80081aa:	2303      	movs	r3, #3
 80081ac:	75fb      	strb	r3, [r7, #23]
 80081ae:	e01c      	b.n	80081ea <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	78db      	ldrb	r3, [r3, #3]
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d10a      	bne.n	80081d2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	799b      	ldrb	r3, [r3, #6]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <USBH_ParseEPDesc+0x11e>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	799b      	ldrb	r3, [r3, #6]
 80081c8:	2b10      	cmp	r3, #16
 80081ca:	d90e      	bls.n	80081ea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80081cc:	2303      	movs	r3, #3
 80081ce:	75fb      	strb	r3, [r7, #23]
 80081d0:	e00b      	b.n	80081ea <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	78db      	ldrb	r3, [r3, #3]
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d105      	bne.n	80081ea <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	799b      	ldrb	r3, [r3, #6]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80081e6:	2303      	movs	r3, #3
 80081e8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	371c      	adds	r7, #28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	4613      	mov	r3, r2
 8008204:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	2b03      	cmp	r3, #3
 800820e:	d120      	bne.n	8008252 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	1e9a      	subs	r2, r3, #2
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	4293      	cmp	r3, r2
 800821a:	bf28      	it	cs
 800821c:	4613      	movcs	r3, r2
 800821e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3302      	adds	r3, #2
 8008224:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008226:	2300      	movs	r3, #0
 8008228:	82fb      	strh	r3, [r7, #22]
 800822a:	e00b      	b.n	8008244 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800822c:	8afb      	ldrh	r3, [r7, #22]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	781a      	ldrb	r2, [r3, #0]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	3301      	adds	r3, #1
 800823c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800823e:	8afb      	ldrh	r3, [r7, #22]
 8008240:	3302      	adds	r3, #2
 8008242:	82fb      	strh	r3, [r7, #22]
 8008244:	8afa      	ldrh	r2, [r7, #22]
 8008246:	8abb      	ldrh	r3, [r7, #20]
 8008248:	429a      	cmp	r2, r3
 800824a:	d3ef      	bcc.n	800822c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2200      	movs	r2, #0
 8008250:	701a      	strb	r2, [r3, #0]
  }
}
 8008252:	bf00      	nop
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800825e:	b480      	push	{r7}
 8008260:	b085      	sub	sp, #20
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	881a      	ldrh	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	4413      	add	r3, r2
 8008274:	b29a      	uxth	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4413      	add	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008286:	68fb      	ldr	r3, [r7, #12]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80082a2:	2301      	movs	r3, #1
 80082a4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	789b      	ldrb	r3, [r3, #2]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d002      	beq.n	80082b4 <USBH_CtlReq+0x20>
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d00f      	beq.n	80082d2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80082b2:	e027      	b.n	8008304 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	88fa      	ldrh	r2, [r7, #6]
 80082be:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2201      	movs	r2, #1
 80082c4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2202      	movs	r2, #2
 80082ca:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80082cc:	2301      	movs	r3, #1
 80082ce:	75fb      	strb	r3, [r7, #23]
      break;
 80082d0:	e018      	b.n	8008304 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 f81c 	bl	8008310 <USBH_HandleControl>
 80082d8:	4603      	mov	r3, r0
 80082da:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <USBH_CtlReq+0x54>
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d106      	bne.n	80082f6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2201      	movs	r2, #1
 80082ec:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	761a      	strb	r2, [r3, #24]
      break;
 80082f4:	e005      	b.n	8008302 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d102      	bne.n	8008302 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	709a      	strb	r2, [r3, #2]
      break;
 8008302:	bf00      	nop
  }
  return status;
 8008304:	7dfb      	ldrb	r3, [r7, #23]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af02      	add	r7, sp, #8
 8008316:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008318:	2301      	movs	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800831c:	2300      	movs	r3, #0
 800831e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7e1b      	ldrb	r3, [r3, #24]
 8008324:	3b01      	subs	r3, #1
 8008326:	2b0a      	cmp	r3, #10
 8008328:	f200 8156 	bhi.w	80085d8 <USBH_HandleControl+0x2c8>
 800832c:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <USBH_HandleControl+0x24>)
 800832e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008332:	bf00      	nop
 8008334:	08008361 	.word	0x08008361
 8008338:	0800837b 	.word	0x0800837b
 800833c:	080083e5 	.word	0x080083e5
 8008340:	0800840b 	.word	0x0800840b
 8008344:	08008443 	.word	0x08008443
 8008348:	0800846d 	.word	0x0800846d
 800834c:	080084bf 	.word	0x080084bf
 8008350:	080084e1 	.word	0x080084e1
 8008354:	0800851d 	.word	0x0800851d
 8008358:	08008543 	.word	0x08008543
 800835c:	08008581 	.word	0x08008581
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f103 0110 	add.w	r1, r3, #16
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	795b      	ldrb	r3, [r3, #5]
 800836a:	461a      	mov	r2, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f943 	bl	80085f8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2202      	movs	r2, #2
 8008376:	761a      	strb	r2, [r3, #24]
      break;
 8008378:	e139      	b.n	80085ee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	795b      	ldrb	r3, [r3, #5]
 800837e:	4619      	mov	r1, r3
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fcc5 	bl	8008d10 <USBH_LL_GetURBState>
 8008386:	4603      	mov	r3, r0
 8008388:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d11e      	bne.n	80083ce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	7c1b      	ldrb	r3, [r3, #16]
 8008394:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008398:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	8adb      	ldrh	r3, [r3, #22]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80083a2:	7b7b      	ldrb	r3, [r7, #13]
 80083a4:	2b80      	cmp	r3, #128	; 0x80
 80083a6:	d103      	bne.n	80083b0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2203      	movs	r2, #3
 80083ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083ae:	e115      	b.n	80085dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2205      	movs	r2, #5
 80083b4:	761a      	strb	r2, [r3, #24]
      break;
 80083b6:	e111      	b.n	80085dc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80083b8:	7b7b      	ldrb	r3, [r7, #13]
 80083ba:	2b80      	cmp	r3, #128	; 0x80
 80083bc:	d103      	bne.n	80083c6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2209      	movs	r2, #9
 80083c2:	761a      	strb	r2, [r3, #24]
      break;
 80083c4:	e10a      	b.n	80085dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2207      	movs	r2, #7
 80083ca:	761a      	strb	r2, [r3, #24]
      break;
 80083cc:	e106      	b.n	80085dc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d003      	beq.n	80083dc <USBH_HandleControl+0xcc>
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	f040 8100 	bne.w	80085dc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	220b      	movs	r2, #11
 80083e0:	761a      	strb	r2, [r3, #24]
      break;
 80083e2:	e0fb      	b.n	80085dc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6899      	ldr	r1, [r3, #8]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	899a      	ldrh	r2, [r3, #12]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	791b      	ldrb	r3, [r3, #4]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f93a 	bl	8008676 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2204      	movs	r2, #4
 8008406:	761a      	strb	r2, [r3, #24]
      break;
 8008408:	e0f1      	b.n	80085ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	791b      	ldrb	r3, [r3, #4]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fc7d 	bl	8008d10 <USBH_LL_GetURBState>
 8008416:	4603      	mov	r3, r0
 8008418:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d102      	bne.n	8008426 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2209      	movs	r2, #9
 8008424:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	2b05      	cmp	r3, #5
 800842a:	d102      	bne.n	8008432 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800842c:	2303      	movs	r3, #3
 800842e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008430:	e0d6      	b.n	80085e0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008432:	7bbb      	ldrb	r3, [r7, #14]
 8008434:	2b04      	cmp	r3, #4
 8008436:	f040 80d3 	bne.w	80085e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	220b      	movs	r2, #11
 800843e:	761a      	strb	r2, [r3, #24]
      break;
 8008440:	e0ce      	b.n	80085e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6899      	ldr	r1, [r3, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	899a      	ldrh	r2, [r3, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	795b      	ldrb	r3, [r3, #5]
 800844e:	2001      	movs	r0, #1
 8008450:	9000      	str	r0, [sp, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f8ea 	bl	800862c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800845e:	b29a      	uxth	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2206      	movs	r2, #6
 8008468:	761a      	strb	r2, [r3, #24]
      break;
 800846a:	e0c0      	b.n	80085ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	795b      	ldrb	r3, [r3, #5]
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fc4c 	bl	8008d10 <USBH_LL_GetURBState>
 8008478:	4603      	mov	r3, r0
 800847a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d103      	bne.n	800848a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2207      	movs	r2, #7
 8008486:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008488:	e0ac      	b.n	80085e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800848a:	7bbb      	ldrb	r3, [r7, #14]
 800848c:	2b05      	cmp	r3, #5
 800848e:	d105      	bne.n	800849c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	220c      	movs	r2, #12
 8008494:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008496:	2303      	movs	r3, #3
 8008498:	73fb      	strb	r3, [r7, #15]
      break;
 800849a:	e0a3      	b.n	80085e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d103      	bne.n	80084aa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2205      	movs	r2, #5
 80084a6:	761a      	strb	r2, [r3, #24]
      break;
 80084a8:	e09c      	b.n	80085e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	f040 8099 	bne.w	80085e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	220b      	movs	r2, #11
 80084b6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80084b8:	2302      	movs	r3, #2
 80084ba:	73fb      	strb	r3, [r7, #15]
      break;
 80084bc:	e092      	b.n	80085e4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	791b      	ldrb	r3, [r3, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	2100      	movs	r1, #0
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f8d5 	bl	8008676 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2208      	movs	r2, #8
 80084dc:	761a      	strb	r2, [r3, #24]

      break;
 80084de:	e086      	b.n	80085ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	791b      	ldrb	r3, [r3, #4]
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fc12 	bl	8008d10 <USBH_LL_GetURBState>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d105      	bne.n	8008502 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	220d      	movs	r2, #13
 80084fa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008500:	e072      	b.n	80085e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b04      	cmp	r3, #4
 8008506:	d103      	bne.n	8008510 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	220b      	movs	r2, #11
 800850c:	761a      	strb	r2, [r3, #24]
      break;
 800850e:	e06b      	b.n	80085e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008510:	7bbb      	ldrb	r3, [r7, #14]
 8008512:	2b05      	cmp	r3, #5
 8008514:	d168      	bne.n	80085e8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008516:	2303      	movs	r3, #3
 8008518:	73fb      	strb	r3, [r7, #15]
      break;
 800851a:	e065      	b.n	80085e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	795b      	ldrb	r3, [r3, #5]
 8008520:	2201      	movs	r2, #1
 8008522:	9200      	str	r2, [sp, #0]
 8008524:	2200      	movs	r2, #0
 8008526:	2100      	movs	r1, #0
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f87f 	bl	800862c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008534:	b29a      	uxth	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	220a      	movs	r2, #10
 800853e:	761a      	strb	r2, [r3, #24]
      break;
 8008540:	e055      	b.n	80085ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	795b      	ldrb	r3, [r3, #5]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fbe1 	bl	8008d10 <USBH_LL_GetURBState>
 800854e:	4603      	mov	r3, r0
 8008550:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d105      	bne.n	8008564 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	220d      	movs	r2, #13
 8008560:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008562:	e043      	b.n	80085ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d103      	bne.n	8008572 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2209      	movs	r2, #9
 800856e:	761a      	strb	r2, [r3, #24]
      break;
 8008570:	e03c      	b.n	80085ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b04      	cmp	r3, #4
 8008576:	d139      	bne.n	80085ec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	220b      	movs	r2, #11
 800857c:	761a      	strb	r2, [r3, #24]
      break;
 800857e:	e035      	b.n	80085ec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	7e5b      	ldrb	r3, [r3, #25]
 8008584:	3301      	adds	r3, #1
 8008586:	b2da      	uxtb	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	765a      	strb	r2, [r3, #25]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	7e5b      	ldrb	r3, [r3, #25]
 8008590:	2b02      	cmp	r3, #2
 8008592:	d806      	bhi.n	80085a2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80085a0:	e025      	b.n	80085ee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085a8:	2106      	movs	r1, #6
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	795b      	ldrb	r3, [r3, #5]
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f90c 	bl	80087d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	791b      	ldrb	r3, [r3, #4]
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f906 	bl	80087d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80085d2:	2302      	movs	r3, #2
 80085d4:	73fb      	strb	r3, [r7, #15]
      break;
 80085d6:	e00a      	b.n	80085ee <USBH_HandleControl+0x2de>

    default:
      break;
 80085d8:	bf00      	nop
 80085da:	e008      	b.n	80085ee <USBH_HandleControl+0x2de>
      break;
 80085dc:	bf00      	nop
 80085de:	e006      	b.n	80085ee <USBH_HandleControl+0x2de>
      break;
 80085e0:	bf00      	nop
 80085e2:	e004      	b.n	80085ee <USBH_HandleControl+0x2de>
      break;
 80085e4:	bf00      	nop
 80085e6:	e002      	b.n	80085ee <USBH_HandleControl+0x2de>
      break;
 80085e8:	bf00      	nop
 80085ea:	e000      	b.n	80085ee <USBH_HandleControl+0x2de>
      break;
 80085ec:	bf00      	nop
  }

  return status;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b088      	sub	sp, #32
 80085fc:	af04      	add	r7, sp, #16
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	4613      	mov	r3, r2
 8008604:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008606:	79f9      	ldrb	r1, [r7, #7]
 8008608:	2300      	movs	r3, #0
 800860a:	9303      	str	r3, [sp, #12]
 800860c:	2308      	movs	r3, #8
 800860e:	9302      	str	r3, [sp, #8]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	2300      	movs	r3, #0
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	2300      	movs	r3, #0
 800861a:	2200      	movs	r2, #0
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 fb46 	bl	8008cae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af04      	add	r7, sp, #16
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4611      	mov	r1, r2
 8008638:	461a      	mov	r2, r3
 800863a:	460b      	mov	r3, r1
 800863c:	80fb      	strh	r3, [r7, #6]
 800863e:	4613      	mov	r3, r2
 8008640:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008650:	7979      	ldrb	r1, [r7, #5]
 8008652:	7e3b      	ldrb	r3, [r7, #24]
 8008654:	9303      	str	r3, [sp, #12]
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	9302      	str	r3, [sp, #8]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	2301      	movs	r3, #1
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	2300      	movs	r3, #0
 8008664:	2200      	movs	r2, #0
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 fb21 	bl	8008cae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b088      	sub	sp, #32
 800867a:	af04      	add	r7, sp, #16
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	4611      	mov	r1, r2
 8008682:	461a      	mov	r2, r3
 8008684:	460b      	mov	r3, r1
 8008686:	80fb      	strh	r3, [r7, #6]
 8008688:	4613      	mov	r3, r2
 800868a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800868c:	7979      	ldrb	r1, [r7, #5]
 800868e:	2300      	movs	r3, #0
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	88fb      	ldrh	r3, [r7, #6]
 8008694:	9302      	str	r3, [sp, #8]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	2301      	movs	r3, #1
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	2300      	movs	r3, #0
 80086a0:	2201      	movs	r2, #1
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 fb03 	bl	8008cae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086a8:	2300      	movs	r3, #0

}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b088      	sub	sp, #32
 80086b6:	af04      	add	r7, sp, #16
 80086b8:	60f8      	str	r0, [r7, #12]
 80086ba:	60b9      	str	r1, [r7, #8]
 80086bc:	4611      	mov	r1, r2
 80086be:	461a      	mov	r2, r3
 80086c0:	460b      	mov	r3, r1
 80086c2:	80fb      	strh	r3, [r7, #6]
 80086c4:	4613      	mov	r3, r2
 80086c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086d6:	7979      	ldrb	r1, [r7, #5]
 80086d8:	7e3b      	ldrb	r3, [r7, #24]
 80086da:	9303      	str	r3, [sp, #12]
 80086dc:	88fb      	ldrh	r3, [r7, #6]
 80086de:	9302      	str	r3, [sp, #8]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	2301      	movs	r3, #1
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	2302      	movs	r3, #2
 80086ea:	2200      	movs	r2, #0
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 fade 	bl	8008cae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af04      	add	r7, sp, #16
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	4611      	mov	r1, r2
 8008708:	461a      	mov	r2, r3
 800870a:	460b      	mov	r3, r1
 800870c:	80fb      	strh	r3, [r7, #6]
 800870e:	4613      	mov	r3, r2
 8008710:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008712:	7979      	ldrb	r1, [r7, #5]
 8008714:	2300      	movs	r3, #0
 8008716:	9303      	str	r3, [sp, #12]
 8008718:	88fb      	ldrh	r3, [r7, #6]
 800871a:	9302      	str	r3, [sp, #8]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	2301      	movs	r3, #1
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	2302      	movs	r3, #2
 8008726:	2201      	movs	r2, #1
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 fac0 	bl	8008cae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af04      	add	r7, sp, #16
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	4608      	mov	r0, r1
 8008742:	4611      	mov	r1, r2
 8008744:	461a      	mov	r2, r3
 8008746:	4603      	mov	r3, r0
 8008748:	70fb      	strb	r3, [r7, #3]
 800874a:	460b      	mov	r3, r1
 800874c:	70bb      	strb	r3, [r7, #2]
 800874e:	4613      	mov	r3, r2
 8008750:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008752:	7878      	ldrb	r0, [r7, #1]
 8008754:	78ba      	ldrb	r2, [r7, #2]
 8008756:	78f9      	ldrb	r1, [r7, #3]
 8008758:	8b3b      	ldrh	r3, [r7, #24]
 800875a:	9302      	str	r3, [sp, #8]
 800875c:	7d3b      	ldrb	r3, [r7, #20]
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	7c3b      	ldrb	r3, [r7, #16]
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	4603      	mov	r3, r0
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fa53 	bl	8008c12 <USBH_LL_OpenPipe>

  return USBH_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa72 	bl	8008c70 <USBH_LL_ClosePipe>

  return USBH_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f836 	bl	8008814 <USBH_GetFreePipe>
 80087a8:	4603      	mov	r3, r0
 80087aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80087ac:	89fb      	ldrh	r3, [r7, #14]
 80087ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d00a      	beq.n	80087cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80087b6:	78fa      	ldrb	r2, [r7, #3]
 80087b8:	89fb      	ldrh	r3, [r7, #14]
 80087ba:	f003 030f 	and.w	r3, r3, #15
 80087be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	33e0      	adds	r3, #224	; 0xe0
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80087cc:	89fb      	ldrh	r3, [r7, #14]
 80087ce:	b2db      	uxtb	r3, r3
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d80d      	bhi.n	8008806 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80087ea:	78fb      	ldrb	r3, [r7, #3]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	33e0      	adds	r3, #224	; 0xe0
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	33e0      	adds	r3, #224	; 0xe0
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	440b      	add	r3, r1
 8008804:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
 8008824:	e00f      	b.n	8008846 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	33e0      	adds	r3, #224	; 0xe0
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d102      	bne.n	8008840 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	b29b      	uxth	r3, r3
 800883e:	e007      	b.n	8008850 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	3301      	adds	r3, #1
 8008844:	73fb      	strb	r3, [r7, #15]
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	2b0f      	cmp	r3, #15
 800884a:	d9ec      	bls.n	8008826 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800884c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008860:	2201      	movs	r2, #1
 8008862:	490e      	ldr	r1, [pc, #56]	; (800889c <MX_USB_HOST_Init+0x40>)
 8008864:	480e      	ldr	r0, [pc, #56]	; (80088a0 <MX_USB_HOST_Init+0x44>)
 8008866:	f7fe fba7 	bl	8006fb8 <USBH_Init>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008870:	f7f8 f9a0 	bl	8000bb4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008874:	490b      	ldr	r1, [pc, #44]	; (80088a4 <MX_USB_HOST_Init+0x48>)
 8008876:	480a      	ldr	r0, [pc, #40]	; (80088a0 <MX_USB_HOST_Init+0x44>)
 8008878:	f7fe fc2c 	bl	80070d4 <USBH_RegisterClass>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008882:	f7f8 f997 	bl	8000bb4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008886:	4806      	ldr	r0, [pc, #24]	; (80088a0 <MX_USB_HOST_Init+0x44>)
 8008888:	f7fe fcb0 	bl	80071ec <USBH_Start>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008892:	f7f8 f98f 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008896:	bf00      	nop
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	080088bd 	.word	0x080088bd
 80088a0:	2000027c 	.word	0x2000027c
 80088a4:	2000000c 	.word	0x2000000c

080088a8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80088ac:	4802      	ldr	r0, [pc, #8]	; (80088b8 <MX_USB_HOST_Process+0x10>)
 80088ae:	f7fe fcad 	bl	800720c <USBH_Process>
}
 80088b2:	bf00      	nop
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	2000027c 	.word	0x2000027c

080088bc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	2b04      	cmp	r3, #4
 80088ce:	d819      	bhi.n	8008904 <USBH_UserProcess+0x48>
 80088d0:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <USBH_UserProcess+0x1c>)
 80088d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d6:	bf00      	nop
 80088d8:	08008905 	.word	0x08008905
 80088dc:	080088f5 	.word	0x080088f5
 80088e0:	08008905 	.word	0x08008905
 80088e4:	080088fd 	.word	0x080088fd
 80088e8:	080088ed 	.word	0x080088ed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80088ec:	4b09      	ldr	r3, [pc, #36]	; (8008914 <USBH_UserProcess+0x58>)
 80088ee:	2203      	movs	r2, #3
 80088f0:	701a      	strb	r2, [r3, #0]
  break;
 80088f2:	e008      	b.n	8008906 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80088f4:	4b07      	ldr	r3, [pc, #28]	; (8008914 <USBH_UserProcess+0x58>)
 80088f6:	2202      	movs	r2, #2
 80088f8:	701a      	strb	r2, [r3, #0]
  break;
 80088fa:	e004      	b.n	8008906 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <USBH_UserProcess+0x58>)
 80088fe:	2201      	movs	r2, #1
 8008900:	701a      	strb	r2, [r3, #0]
  break;
 8008902:	e000      	b.n	8008906 <USBH_UserProcess+0x4a>

  default:
  break;
 8008904:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	20000654 	.word	0x20000654

08008918 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	; 0x28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008920:	f107 0314 	add.w	r3, r7, #20
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	605a      	str	r2, [r3, #4]
 800892a:	609a      	str	r2, [r3, #8]
 800892c:	60da      	str	r2, [r3, #12]
 800892e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008938:	d147      	bne.n	80089ca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800893a:	2300      	movs	r3, #0
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	4b25      	ldr	r3, [pc, #148]	; (80089d4 <HAL_HCD_MspInit+0xbc>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	4a24      	ldr	r2, [pc, #144]	; (80089d4 <HAL_HCD_MspInit+0xbc>)
 8008944:	f043 0301 	orr.w	r3, r3, #1
 8008948:	6313      	str	r3, [r2, #48]	; 0x30
 800894a:	4b22      	ldr	r3, [pc, #136]	; (80089d4 <HAL_HCD_MspInit+0xbc>)
 800894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800895a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800895c:	2300      	movs	r3, #0
 800895e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008960:	2300      	movs	r3, #0
 8008962:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008964:	f107 0314 	add.w	r3, r7, #20
 8008968:	4619      	mov	r1, r3
 800896a:	481b      	ldr	r0, [pc, #108]	; (80089d8 <HAL_HCD_MspInit+0xc0>)
 800896c:	f7f8 fdf6 	bl	800155c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008970:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008976:	2302      	movs	r3, #2
 8008978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800897e:	2300      	movs	r3, #0
 8008980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008982:	230a      	movs	r3, #10
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008986:	f107 0314 	add.w	r3, r7, #20
 800898a:	4619      	mov	r1, r3
 800898c:	4812      	ldr	r0, [pc, #72]	; (80089d8 <HAL_HCD_MspInit+0xc0>)
 800898e:	f7f8 fde5 	bl	800155c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008992:	4b10      	ldr	r3, [pc, #64]	; (80089d4 <HAL_HCD_MspInit+0xbc>)
 8008994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008996:	4a0f      	ldr	r2, [pc, #60]	; (80089d4 <HAL_HCD_MspInit+0xbc>)
 8008998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899c:	6353      	str	r3, [r2, #52]	; 0x34
 800899e:	2300      	movs	r3, #0
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <HAL_HCD_MspInit+0xbc>)
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	4a0b      	ldr	r2, [pc, #44]	; (80089d4 <HAL_HCD_MspInit+0xbc>)
 80089a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089ac:	6453      	str	r3, [r2, #68]	; 0x44
 80089ae:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <HAL_HCD_MspInit+0xbc>)
 80089b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089ba:	2200      	movs	r2, #0
 80089bc:	2100      	movs	r1, #0
 80089be:	2043      	movs	r0, #67	; 0x43
 80089c0:	f7f8 fd95 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089c4:	2043      	movs	r0, #67	; 0x43
 80089c6:	f7f8 fdae 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089ca:	bf00      	nop
 80089cc:	3728      	adds	r7, #40	; 0x28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	40023800 	.word	0x40023800
 80089d8:	40020000 	.word	0x40020000

080089dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe ffed 	bl	80079ca <USBH_LL_IncTimer>
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff f825 	bl	8007a56 <USBH_LL_Connect>
}
 8008a0c:	bf00      	nop
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff f82e 	bl	8007a84 <USBH_LL_Disconnect>
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe ffdf 	bl	8007a1e <USBH_LL_PortEnabled>
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe ffdf 	bl	8007a3a <USBH_LL_PortDisabled>
}
 8008a7c:	bf00      	nop
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d12a      	bne.n	8008aec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a96:	4a18      	ldr	r2, [pc, #96]	; (8008af8 <USBH_LL_Init+0x74>)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a15      	ldr	r2, [pc, #84]	; (8008af8 <USBH_LL_Init+0x74>)
 8008aa2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008aa6:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <USBH_LL_Init+0x74>)
 8008aa8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008aac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008aae:	4b12      	ldr	r3, [pc, #72]	; (8008af8 <USBH_LL_Init+0x74>)
 8008ab0:	2208      	movs	r2, #8
 8008ab2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008ab4:	4b10      	ldr	r3, [pc, #64]	; (8008af8 <USBH_LL_Init+0x74>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008aba:	4b0f      	ldr	r3, [pc, #60]	; (8008af8 <USBH_LL_Init+0x74>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ac0:	4b0d      	ldr	r3, [pc, #52]	; (8008af8 <USBH_LL_Init+0x74>)
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <USBH_LL_Init+0x74>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008acc:	480a      	ldr	r0, [pc, #40]	; (8008af8 <USBH_LL_Init+0x74>)
 8008ace:	f7f8 fefa 	bl	80018c6 <HAL_HCD_Init>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008ad8:	f7f8 f86c 	bl	8000bb4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008adc:	4806      	ldr	r0, [pc, #24]	; (8008af8 <USBH_LL_Init+0x74>)
 8008ade:	f7f9 fade 	bl	800209e <HAL_HCD_GetCurrentFrame>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7fe ff60 	bl	80079ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000658 	.word	0x20000658

08008afc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7f9 fa4d 	bl	8001fb2 <HAL_HCD_Start>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 f95c 	bl	8008ddc <USBH_Get_USB_Status>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7f9 fa55 	bl	8001ff8 <HAL_HCD_Stop>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 f941 	bl	8008ddc <USBH_Get_USB_Status>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b70:	2301      	movs	r3, #1
 8008b72:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7f9 fa9d 	bl	80020ba <HAL_HCD_GetCurrentSpeed>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d00c      	beq.n	8008ba0 <USBH_LL_GetSpeed+0x38>
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d80d      	bhi.n	8008ba6 <USBH_LL_GetSpeed+0x3e>
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <USBH_LL_GetSpeed+0x2c>
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d003      	beq.n	8008b9a <USBH_LL_GetSpeed+0x32>
 8008b92:	e008      	b.n	8008ba6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73fb      	strb	r3, [r7, #15]
    break;
 8008b98:	e008      	b.n	8008bac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9e:	e005      	b.n	8008bac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba4:	e002      	b.n	8008bac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8008baa:	bf00      	nop
  }
  return  speed;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7f9 fa30 	bl	8002032 <HAL_HCD_ResetPort>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 f8ff 	bl	8008ddc <USBH_Get_USB_Status>
 8008bde:	4603      	mov	r3, r0
 8008be0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7f9 fa37 	bl	8002076 <HAL_HCD_HC_GetXferCount>
 8008c08:	4603      	mov	r3, r0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c12:	b590      	push	{r4, r7, lr}
 8008c14:	b089      	sub	sp, #36	; 0x24
 8008c16:	af04      	add	r7, sp, #16
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	4608      	mov	r0, r1
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	461a      	mov	r2, r3
 8008c20:	4603      	mov	r3, r0
 8008c22:	70fb      	strb	r3, [r7, #3]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70bb      	strb	r3, [r7, #2]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c3a:	787c      	ldrb	r4, [r7, #1]
 8008c3c:	78ba      	ldrb	r2, [r7, #2]
 8008c3e:	78f9      	ldrb	r1, [r7, #3]
 8008c40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c42:	9302      	str	r3, [sp, #8]
 8008c44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	4623      	mov	r3, r4
 8008c52:	f7f8 fe9a 	bl	800198a <HAL_HCD_HC_Init>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 f8bd 	bl	8008ddc <USBH_Get_USB_Status>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd90      	pop	{r4, r7, pc}

08008c70 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c8a:	78fa      	ldrb	r2, [r7, #3]
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7f8 ff0a 	bl	8001aa8 <HAL_HCD_HC_Halt>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f89e 	bl	8008ddc <USBH_Get_USB_Status>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008cae:	b590      	push	{r4, r7, lr}
 8008cb0:	b089      	sub	sp, #36	; 0x24
 8008cb2:	af04      	add	r7, sp, #16
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	4611      	mov	r1, r2
 8008cba:	461a      	mov	r2, r3
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	70fb      	strb	r3, [r7, #3]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70bb      	strb	r3, [r7, #2]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008cd6:	787c      	ldrb	r4, [r7, #1]
 8008cd8:	78ba      	ldrb	r2, [r7, #2]
 8008cda:	78f9      	ldrb	r1, [r7, #3]
 8008cdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ce0:	9303      	str	r3, [sp, #12]
 8008ce2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ce4:	9302      	str	r3, [sp, #8]
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	4623      	mov	r3, r4
 8008cf2:	f7f8 fefd 	bl	8001af0 <HAL_HCD_HC_SubmitRequest>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 f86d 	bl	8008ddc <USBH_Get_USB_Status>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd90      	pop	{r4, r7, pc}

08008d10 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d22:	78fa      	ldrb	r2, [r7, #3]
 8008d24:	4611      	mov	r1, r2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7f9 f991 	bl	800204e <HAL_HCD_HC_GetURBState>
 8008d2c:	4603      	mov	r3, r0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d103      	bne.n	8008d54 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 f870 	bl	8008e34 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008d54:	20c8      	movs	r0, #200	; 0xc8
 8008d56:	f7f8 facb 	bl	80012f0 <HAL_Delay>
  return USBH_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	70fb      	strb	r3, [r7, #3]
 8008d70:	4613      	mov	r3, r2
 8008d72:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d7a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d7c:	78fb      	ldrb	r3, [r7, #3]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	212c      	movs	r1, #44	; 0x2c
 8008d82:	fb01 f303 	mul.w	r3, r1, r3
 8008d86:	4413      	add	r3, r2
 8008d88:	333b      	adds	r3, #59	; 0x3b
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d009      	beq.n	8008da4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	212c      	movs	r1, #44	; 0x2c
 8008d96:	fb01 f303 	mul.w	r3, r1, r3
 8008d9a:	4413      	add	r3, r2
 8008d9c:	3354      	adds	r3, #84	; 0x54
 8008d9e:	78ba      	ldrb	r2, [r7, #2]
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	e008      	b.n	8008db6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	212c      	movs	r1, #44	; 0x2c
 8008daa:	fb01 f303 	mul.w	r3, r1, r3
 8008dae:	4413      	add	r3, r2
 8008db0:	3355      	adds	r3, #85	; 0x55
 8008db2:	78ba      	ldrb	r2, [r7, #2]
 8008db4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7f8 fa8f 	bl	80012f0 <HAL_Delay>
}
 8008dd2:	bf00      	nop
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d817      	bhi.n	8008e20 <USBH_Get_USB_Status+0x44>
 8008df0:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <USBH_Get_USB_Status+0x1c>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e09 	.word	0x08008e09
 8008dfc:	08008e0f 	.word	0x08008e0f
 8008e00:	08008e15 	.word	0x08008e15
 8008e04:	08008e1b 	.word	0x08008e1b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0c:	e00b      	b.n	8008e26 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008e0e:	2302      	movs	r3, #2
 8008e10:	73fb      	strb	r3, [r7, #15]
    break;
 8008e12:	e008      	b.n	8008e26 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
    break;
 8008e18:	e005      	b.n	8008e26 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1e:	e002      	b.n	8008e26 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008e20:	2302      	movs	r3, #2
 8008e22:	73fb      	strb	r3, [r7, #15]
    break;
 8008e24:	bf00      	nop
  }
  return usb_status;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008e42:	79fb      	ldrb	r3, [r7, #7]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d102      	bne.n	8008e4e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73fb      	strb	r3, [r7, #15]
 8008e4c:	e001      	b.n	8008e52 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	461a      	mov	r2, r3
 8008e56:	2101      	movs	r1, #1
 8008e58:	4803      	ldr	r0, [pc, #12]	; (8008e68 <MX_DriverVbusFS+0x34>)
 8008e5a:	f7f8 fd1b 	bl	8001894 <HAL_GPIO_WritePin>
}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	40020800 	.word	0x40020800

08008e6c <__errno>:
 8008e6c:	4b01      	ldr	r3, [pc, #4]	; (8008e74 <__errno+0x8>)
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	2000002c 	.word	0x2000002c

08008e78 <__libc_init_array>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4d0d      	ldr	r5, [pc, #52]	; (8008eb0 <__libc_init_array+0x38>)
 8008e7c:	4c0d      	ldr	r4, [pc, #52]	; (8008eb4 <__libc_init_array+0x3c>)
 8008e7e:	1b64      	subs	r4, r4, r5
 8008e80:	10a4      	asrs	r4, r4, #2
 8008e82:	2600      	movs	r6, #0
 8008e84:	42a6      	cmp	r6, r4
 8008e86:	d109      	bne.n	8008e9c <__libc_init_array+0x24>
 8008e88:	4d0b      	ldr	r5, [pc, #44]	; (8008eb8 <__libc_init_array+0x40>)
 8008e8a:	4c0c      	ldr	r4, [pc, #48]	; (8008ebc <__libc_init_array+0x44>)
 8008e8c:	f000 ffbe 	bl	8009e0c <_init>
 8008e90:	1b64      	subs	r4, r4, r5
 8008e92:	10a4      	asrs	r4, r4, #2
 8008e94:	2600      	movs	r6, #0
 8008e96:	42a6      	cmp	r6, r4
 8008e98:	d105      	bne.n	8008ea6 <__libc_init_array+0x2e>
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea0:	4798      	blx	r3
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7ee      	b.n	8008e84 <__libc_init_array+0xc>
 8008ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eaa:	4798      	blx	r3
 8008eac:	3601      	adds	r6, #1
 8008eae:	e7f2      	b.n	8008e96 <__libc_init_array+0x1e>
 8008eb0:	08009f0c 	.word	0x08009f0c
 8008eb4:	08009f0c 	.word	0x08009f0c
 8008eb8:	08009f0c 	.word	0x08009f0c
 8008ebc:	08009f10 	.word	0x08009f10

08008ec0 <malloc>:
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <malloc+0xc>)
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	6818      	ldr	r0, [r3, #0]
 8008ec6:	f000 b87f 	b.w	8008fc8 <_malloc_r>
 8008eca:	bf00      	nop
 8008ecc:	2000002c 	.word	0x2000002c

08008ed0 <free>:
 8008ed0:	4b02      	ldr	r3, [pc, #8]	; (8008edc <free+0xc>)
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	f000 b80b 	b.w	8008ef0 <_free_r>
 8008eda:	bf00      	nop
 8008edc:	2000002c 	.word	0x2000002c

08008ee0 <memset>:
 8008ee0:	4402      	add	r2, r0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d100      	bne.n	8008eea <memset+0xa>
 8008ee8:	4770      	bx	lr
 8008eea:	f803 1b01 	strb.w	r1, [r3], #1
 8008eee:	e7f9      	b.n	8008ee4 <memset+0x4>

08008ef0 <_free_r>:
 8008ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ef2:	2900      	cmp	r1, #0
 8008ef4:	d044      	beq.n	8008f80 <_free_r+0x90>
 8008ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008efa:	9001      	str	r0, [sp, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f1a1 0404 	sub.w	r4, r1, #4
 8008f02:	bfb8      	it	lt
 8008f04:	18e4      	addlt	r4, r4, r3
 8008f06:	f000 f9f3 	bl	80092f0 <__malloc_lock>
 8008f0a:	4a1e      	ldr	r2, [pc, #120]	; (8008f84 <_free_r+0x94>)
 8008f0c:	9801      	ldr	r0, [sp, #4]
 8008f0e:	6813      	ldr	r3, [r2, #0]
 8008f10:	b933      	cbnz	r3, 8008f20 <_free_r+0x30>
 8008f12:	6063      	str	r3, [r4, #4]
 8008f14:	6014      	str	r4, [r2, #0]
 8008f16:	b003      	add	sp, #12
 8008f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f1c:	f000 b9ee 	b.w	80092fc <__malloc_unlock>
 8008f20:	42a3      	cmp	r3, r4
 8008f22:	d908      	bls.n	8008f36 <_free_r+0x46>
 8008f24:	6825      	ldr	r5, [r4, #0]
 8008f26:	1961      	adds	r1, r4, r5
 8008f28:	428b      	cmp	r3, r1
 8008f2a:	bf01      	itttt	eq
 8008f2c:	6819      	ldreq	r1, [r3, #0]
 8008f2e:	685b      	ldreq	r3, [r3, #4]
 8008f30:	1949      	addeq	r1, r1, r5
 8008f32:	6021      	streq	r1, [r4, #0]
 8008f34:	e7ed      	b.n	8008f12 <_free_r+0x22>
 8008f36:	461a      	mov	r2, r3
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	b10b      	cbz	r3, 8008f40 <_free_r+0x50>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d9fa      	bls.n	8008f36 <_free_r+0x46>
 8008f40:	6811      	ldr	r1, [r2, #0]
 8008f42:	1855      	adds	r5, r2, r1
 8008f44:	42a5      	cmp	r5, r4
 8008f46:	d10b      	bne.n	8008f60 <_free_r+0x70>
 8008f48:	6824      	ldr	r4, [r4, #0]
 8008f4a:	4421      	add	r1, r4
 8008f4c:	1854      	adds	r4, r2, r1
 8008f4e:	42a3      	cmp	r3, r4
 8008f50:	6011      	str	r1, [r2, #0]
 8008f52:	d1e0      	bne.n	8008f16 <_free_r+0x26>
 8008f54:	681c      	ldr	r4, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	6053      	str	r3, [r2, #4]
 8008f5a:	4421      	add	r1, r4
 8008f5c:	6011      	str	r1, [r2, #0]
 8008f5e:	e7da      	b.n	8008f16 <_free_r+0x26>
 8008f60:	d902      	bls.n	8008f68 <_free_r+0x78>
 8008f62:	230c      	movs	r3, #12
 8008f64:	6003      	str	r3, [r0, #0]
 8008f66:	e7d6      	b.n	8008f16 <_free_r+0x26>
 8008f68:	6825      	ldr	r5, [r4, #0]
 8008f6a:	1961      	adds	r1, r4, r5
 8008f6c:	428b      	cmp	r3, r1
 8008f6e:	bf04      	itt	eq
 8008f70:	6819      	ldreq	r1, [r3, #0]
 8008f72:	685b      	ldreq	r3, [r3, #4]
 8008f74:	6063      	str	r3, [r4, #4]
 8008f76:	bf04      	itt	eq
 8008f78:	1949      	addeq	r1, r1, r5
 8008f7a:	6021      	streq	r1, [r4, #0]
 8008f7c:	6054      	str	r4, [r2, #4]
 8008f7e:	e7ca      	b.n	8008f16 <_free_r+0x26>
 8008f80:	b003      	add	sp, #12
 8008f82:	bd30      	pop	{r4, r5, pc}
 8008f84:	2000095c 	.word	0x2000095c

08008f88 <sbrk_aligned>:
 8008f88:	b570      	push	{r4, r5, r6, lr}
 8008f8a:	4e0e      	ldr	r6, [pc, #56]	; (8008fc4 <sbrk_aligned+0x3c>)
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	6831      	ldr	r1, [r6, #0]
 8008f90:	4605      	mov	r5, r0
 8008f92:	b911      	cbnz	r1, 8008f9a <sbrk_aligned+0x12>
 8008f94:	f000 f8a4 	bl	80090e0 <_sbrk_r>
 8008f98:	6030      	str	r0, [r6, #0]
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f000 f89f 	bl	80090e0 <_sbrk_r>
 8008fa2:	1c43      	adds	r3, r0, #1
 8008fa4:	d00a      	beq.n	8008fbc <sbrk_aligned+0x34>
 8008fa6:	1cc4      	adds	r4, r0, #3
 8008fa8:	f024 0403 	bic.w	r4, r4, #3
 8008fac:	42a0      	cmp	r0, r4
 8008fae:	d007      	beq.n	8008fc0 <sbrk_aligned+0x38>
 8008fb0:	1a21      	subs	r1, r4, r0
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f894 	bl	80090e0 <_sbrk_r>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d101      	bne.n	8008fc0 <sbrk_aligned+0x38>
 8008fbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	20000960 	.word	0x20000960

08008fc8 <_malloc_r>:
 8008fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fcc:	1ccd      	adds	r5, r1, #3
 8008fce:	f025 0503 	bic.w	r5, r5, #3
 8008fd2:	3508      	adds	r5, #8
 8008fd4:	2d0c      	cmp	r5, #12
 8008fd6:	bf38      	it	cc
 8008fd8:	250c      	movcc	r5, #12
 8008fda:	2d00      	cmp	r5, #0
 8008fdc:	4607      	mov	r7, r0
 8008fde:	db01      	blt.n	8008fe4 <_malloc_r+0x1c>
 8008fe0:	42a9      	cmp	r1, r5
 8008fe2:	d905      	bls.n	8008ff0 <_malloc_r+0x28>
 8008fe4:	230c      	movs	r3, #12
 8008fe6:	603b      	str	r3, [r7, #0]
 8008fe8:	2600      	movs	r6, #0
 8008fea:	4630      	mov	r0, r6
 8008fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff0:	4e2e      	ldr	r6, [pc, #184]	; (80090ac <_malloc_r+0xe4>)
 8008ff2:	f000 f97d 	bl	80092f0 <__malloc_lock>
 8008ff6:	6833      	ldr	r3, [r6, #0]
 8008ff8:	461c      	mov	r4, r3
 8008ffa:	bb34      	cbnz	r4, 800904a <_malloc_r+0x82>
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	4638      	mov	r0, r7
 8009000:	f7ff ffc2 	bl	8008f88 <sbrk_aligned>
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	4604      	mov	r4, r0
 8009008:	d14d      	bne.n	80090a6 <_malloc_r+0xde>
 800900a:	6834      	ldr	r4, [r6, #0]
 800900c:	4626      	mov	r6, r4
 800900e:	2e00      	cmp	r6, #0
 8009010:	d140      	bne.n	8009094 <_malloc_r+0xcc>
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	4631      	mov	r1, r6
 8009016:	4638      	mov	r0, r7
 8009018:	eb04 0803 	add.w	r8, r4, r3
 800901c:	f000 f860 	bl	80090e0 <_sbrk_r>
 8009020:	4580      	cmp	r8, r0
 8009022:	d13a      	bne.n	800909a <_malloc_r+0xd2>
 8009024:	6821      	ldr	r1, [r4, #0]
 8009026:	3503      	adds	r5, #3
 8009028:	1a6d      	subs	r5, r5, r1
 800902a:	f025 0503 	bic.w	r5, r5, #3
 800902e:	3508      	adds	r5, #8
 8009030:	2d0c      	cmp	r5, #12
 8009032:	bf38      	it	cc
 8009034:	250c      	movcc	r5, #12
 8009036:	4629      	mov	r1, r5
 8009038:	4638      	mov	r0, r7
 800903a:	f7ff ffa5 	bl	8008f88 <sbrk_aligned>
 800903e:	3001      	adds	r0, #1
 8009040:	d02b      	beq.n	800909a <_malloc_r+0xd2>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	442b      	add	r3, r5
 8009046:	6023      	str	r3, [r4, #0]
 8009048:	e00e      	b.n	8009068 <_malloc_r+0xa0>
 800904a:	6822      	ldr	r2, [r4, #0]
 800904c:	1b52      	subs	r2, r2, r5
 800904e:	d41e      	bmi.n	800908e <_malloc_r+0xc6>
 8009050:	2a0b      	cmp	r2, #11
 8009052:	d916      	bls.n	8009082 <_malloc_r+0xba>
 8009054:	1961      	adds	r1, r4, r5
 8009056:	42a3      	cmp	r3, r4
 8009058:	6025      	str	r5, [r4, #0]
 800905a:	bf18      	it	ne
 800905c:	6059      	strne	r1, [r3, #4]
 800905e:	6863      	ldr	r3, [r4, #4]
 8009060:	bf08      	it	eq
 8009062:	6031      	streq	r1, [r6, #0]
 8009064:	5162      	str	r2, [r4, r5]
 8009066:	604b      	str	r3, [r1, #4]
 8009068:	4638      	mov	r0, r7
 800906a:	f104 060b 	add.w	r6, r4, #11
 800906e:	f000 f945 	bl	80092fc <__malloc_unlock>
 8009072:	f026 0607 	bic.w	r6, r6, #7
 8009076:	1d23      	adds	r3, r4, #4
 8009078:	1af2      	subs	r2, r6, r3
 800907a:	d0b6      	beq.n	8008fea <_malloc_r+0x22>
 800907c:	1b9b      	subs	r3, r3, r6
 800907e:	50a3      	str	r3, [r4, r2]
 8009080:	e7b3      	b.n	8008fea <_malloc_r+0x22>
 8009082:	6862      	ldr	r2, [r4, #4]
 8009084:	42a3      	cmp	r3, r4
 8009086:	bf0c      	ite	eq
 8009088:	6032      	streq	r2, [r6, #0]
 800908a:	605a      	strne	r2, [r3, #4]
 800908c:	e7ec      	b.n	8009068 <_malloc_r+0xa0>
 800908e:	4623      	mov	r3, r4
 8009090:	6864      	ldr	r4, [r4, #4]
 8009092:	e7b2      	b.n	8008ffa <_malloc_r+0x32>
 8009094:	4634      	mov	r4, r6
 8009096:	6876      	ldr	r6, [r6, #4]
 8009098:	e7b9      	b.n	800900e <_malloc_r+0x46>
 800909a:	230c      	movs	r3, #12
 800909c:	603b      	str	r3, [r7, #0]
 800909e:	4638      	mov	r0, r7
 80090a0:	f000 f92c 	bl	80092fc <__malloc_unlock>
 80090a4:	e7a1      	b.n	8008fea <_malloc_r+0x22>
 80090a6:	6025      	str	r5, [r4, #0]
 80090a8:	e7de      	b.n	8009068 <_malloc_r+0xa0>
 80090aa:	bf00      	nop
 80090ac:	2000095c 	.word	0x2000095c

080090b0 <iprintf>:
 80090b0:	b40f      	push	{r0, r1, r2, r3}
 80090b2:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <iprintf+0x2c>)
 80090b4:	b513      	push	{r0, r1, r4, lr}
 80090b6:	681c      	ldr	r4, [r3, #0]
 80090b8:	b124      	cbz	r4, 80090c4 <iprintf+0x14>
 80090ba:	69a3      	ldr	r3, [r4, #24]
 80090bc:	b913      	cbnz	r3, 80090c4 <iprintf+0x14>
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 f876 	bl	80091b0 <__sinit>
 80090c4:	ab05      	add	r3, sp, #20
 80090c6:	9a04      	ldr	r2, [sp, #16]
 80090c8:	68a1      	ldr	r1, [r4, #8]
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 f945 	bl	800935c <_vfiprintf_r>
 80090d2:	b002      	add	sp, #8
 80090d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d8:	b004      	add	sp, #16
 80090da:	4770      	bx	lr
 80090dc:	2000002c 	.word	0x2000002c

080090e0 <_sbrk_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4d06      	ldr	r5, [pc, #24]	; (80090fc <_sbrk_r+0x1c>)
 80090e4:	2300      	movs	r3, #0
 80090e6:	4604      	mov	r4, r0
 80090e8:	4608      	mov	r0, r1
 80090ea:	602b      	str	r3, [r5, #0]
 80090ec:	f7f8 f81c 	bl	8001128 <_sbrk>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d102      	bne.n	80090fa <_sbrk_r+0x1a>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	b103      	cbz	r3, 80090fa <_sbrk_r+0x1a>
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	20000968 	.word	0x20000968

08009100 <std>:
 8009100:	2300      	movs	r3, #0
 8009102:	b510      	push	{r4, lr}
 8009104:	4604      	mov	r4, r0
 8009106:	e9c0 3300 	strd	r3, r3, [r0]
 800910a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800910e:	6083      	str	r3, [r0, #8]
 8009110:	8181      	strh	r1, [r0, #12]
 8009112:	6643      	str	r3, [r0, #100]	; 0x64
 8009114:	81c2      	strh	r2, [r0, #14]
 8009116:	6183      	str	r3, [r0, #24]
 8009118:	4619      	mov	r1, r3
 800911a:	2208      	movs	r2, #8
 800911c:	305c      	adds	r0, #92	; 0x5c
 800911e:	f7ff fedf 	bl	8008ee0 <memset>
 8009122:	4b05      	ldr	r3, [pc, #20]	; (8009138 <std+0x38>)
 8009124:	6263      	str	r3, [r4, #36]	; 0x24
 8009126:	4b05      	ldr	r3, [pc, #20]	; (800913c <std+0x3c>)
 8009128:	62a3      	str	r3, [r4, #40]	; 0x28
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <std+0x40>)
 800912c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800912e:	4b05      	ldr	r3, [pc, #20]	; (8009144 <std+0x44>)
 8009130:	6224      	str	r4, [r4, #32]
 8009132:	6323      	str	r3, [r4, #48]	; 0x30
 8009134:	bd10      	pop	{r4, pc}
 8009136:	bf00      	nop
 8009138:	080098e5 	.word	0x080098e5
 800913c:	08009907 	.word	0x08009907
 8009140:	0800993f 	.word	0x0800993f
 8009144:	08009963 	.word	0x08009963

08009148 <_cleanup_r>:
 8009148:	4901      	ldr	r1, [pc, #4]	; (8009150 <_cleanup_r+0x8>)
 800914a:	f000 b8af 	b.w	80092ac <_fwalk_reent>
 800914e:	bf00      	nop
 8009150:	08009c3d 	.word	0x08009c3d

08009154 <__sfmoreglue>:
 8009154:	b570      	push	{r4, r5, r6, lr}
 8009156:	2268      	movs	r2, #104	; 0x68
 8009158:	1e4d      	subs	r5, r1, #1
 800915a:	4355      	muls	r5, r2
 800915c:	460e      	mov	r6, r1
 800915e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009162:	f7ff ff31 	bl	8008fc8 <_malloc_r>
 8009166:	4604      	mov	r4, r0
 8009168:	b140      	cbz	r0, 800917c <__sfmoreglue+0x28>
 800916a:	2100      	movs	r1, #0
 800916c:	e9c0 1600 	strd	r1, r6, [r0]
 8009170:	300c      	adds	r0, #12
 8009172:	60a0      	str	r0, [r4, #8]
 8009174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009178:	f7ff feb2 	bl	8008ee0 <memset>
 800917c:	4620      	mov	r0, r4
 800917e:	bd70      	pop	{r4, r5, r6, pc}

08009180 <__sfp_lock_acquire>:
 8009180:	4801      	ldr	r0, [pc, #4]	; (8009188 <__sfp_lock_acquire+0x8>)
 8009182:	f000 b8b3 	b.w	80092ec <__retarget_lock_acquire_recursive>
 8009186:	bf00      	nop
 8009188:	20000965 	.word	0x20000965

0800918c <__sfp_lock_release>:
 800918c:	4801      	ldr	r0, [pc, #4]	; (8009194 <__sfp_lock_release+0x8>)
 800918e:	f000 b8ae 	b.w	80092ee <__retarget_lock_release_recursive>
 8009192:	bf00      	nop
 8009194:	20000965 	.word	0x20000965

08009198 <__sinit_lock_acquire>:
 8009198:	4801      	ldr	r0, [pc, #4]	; (80091a0 <__sinit_lock_acquire+0x8>)
 800919a:	f000 b8a7 	b.w	80092ec <__retarget_lock_acquire_recursive>
 800919e:	bf00      	nop
 80091a0:	20000966 	.word	0x20000966

080091a4 <__sinit_lock_release>:
 80091a4:	4801      	ldr	r0, [pc, #4]	; (80091ac <__sinit_lock_release+0x8>)
 80091a6:	f000 b8a2 	b.w	80092ee <__retarget_lock_release_recursive>
 80091aa:	bf00      	nop
 80091ac:	20000966 	.word	0x20000966

080091b0 <__sinit>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	4604      	mov	r4, r0
 80091b4:	f7ff fff0 	bl	8009198 <__sinit_lock_acquire>
 80091b8:	69a3      	ldr	r3, [r4, #24]
 80091ba:	b11b      	cbz	r3, 80091c4 <__sinit+0x14>
 80091bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091c0:	f7ff bff0 	b.w	80091a4 <__sinit_lock_release>
 80091c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091c8:	6523      	str	r3, [r4, #80]	; 0x50
 80091ca:	4b13      	ldr	r3, [pc, #76]	; (8009218 <__sinit+0x68>)
 80091cc:	4a13      	ldr	r2, [pc, #76]	; (800921c <__sinit+0x6c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80091d2:	42a3      	cmp	r3, r4
 80091d4:	bf04      	itt	eq
 80091d6:	2301      	moveq	r3, #1
 80091d8:	61a3      	streq	r3, [r4, #24]
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 f820 	bl	8009220 <__sfp>
 80091e0:	6060      	str	r0, [r4, #4]
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 f81c 	bl	8009220 <__sfp>
 80091e8:	60a0      	str	r0, [r4, #8]
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 f818 	bl	8009220 <__sfp>
 80091f0:	2200      	movs	r2, #0
 80091f2:	60e0      	str	r0, [r4, #12]
 80091f4:	2104      	movs	r1, #4
 80091f6:	6860      	ldr	r0, [r4, #4]
 80091f8:	f7ff ff82 	bl	8009100 <std>
 80091fc:	68a0      	ldr	r0, [r4, #8]
 80091fe:	2201      	movs	r2, #1
 8009200:	2109      	movs	r1, #9
 8009202:	f7ff ff7d 	bl	8009100 <std>
 8009206:	68e0      	ldr	r0, [r4, #12]
 8009208:	2202      	movs	r2, #2
 800920a:	2112      	movs	r1, #18
 800920c:	f7ff ff78 	bl	8009100 <std>
 8009210:	2301      	movs	r3, #1
 8009212:	61a3      	str	r3, [r4, #24]
 8009214:	e7d2      	b.n	80091bc <__sinit+0xc>
 8009216:	bf00      	nop
 8009218:	08009e6c 	.word	0x08009e6c
 800921c:	08009149 	.word	0x08009149

08009220 <__sfp>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	4607      	mov	r7, r0
 8009224:	f7ff ffac 	bl	8009180 <__sfp_lock_acquire>
 8009228:	4b1e      	ldr	r3, [pc, #120]	; (80092a4 <__sfp+0x84>)
 800922a:	681e      	ldr	r6, [r3, #0]
 800922c:	69b3      	ldr	r3, [r6, #24]
 800922e:	b913      	cbnz	r3, 8009236 <__sfp+0x16>
 8009230:	4630      	mov	r0, r6
 8009232:	f7ff ffbd 	bl	80091b0 <__sinit>
 8009236:	3648      	adds	r6, #72	; 0x48
 8009238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800923c:	3b01      	subs	r3, #1
 800923e:	d503      	bpl.n	8009248 <__sfp+0x28>
 8009240:	6833      	ldr	r3, [r6, #0]
 8009242:	b30b      	cbz	r3, 8009288 <__sfp+0x68>
 8009244:	6836      	ldr	r6, [r6, #0]
 8009246:	e7f7      	b.n	8009238 <__sfp+0x18>
 8009248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800924c:	b9d5      	cbnz	r5, 8009284 <__sfp+0x64>
 800924e:	4b16      	ldr	r3, [pc, #88]	; (80092a8 <__sfp+0x88>)
 8009250:	60e3      	str	r3, [r4, #12]
 8009252:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009256:	6665      	str	r5, [r4, #100]	; 0x64
 8009258:	f000 f847 	bl	80092ea <__retarget_lock_init_recursive>
 800925c:	f7ff ff96 	bl	800918c <__sfp_lock_release>
 8009260:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009264:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009268:	6025      	str	r5, [r4, #0]
 800926a:	61a5      	str	r5, [r4, #24]
 800926c:	2208      	movs	r2, #8
 800926e:	4629      	mov	r1, r5
 8009270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009274:	f7ff fe34 	bl	8008ee0 <memset>
 8009278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800927c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009280:	4620      	mov	r0, r4
 8009282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009284:	3468      	adds	r4, #104	; 0x68
 8009286:	e7d9      	b.n	800923c <__sfp+0x1c>
 8009288:	2104      	movs	r1, #4
 800928a:	4638      	mov	r0, r7
 800928c:	f7ff ff62 	bl	8009154 <__sfmoreglue>
 8009290:	4604      	mov	r4, r0
 8009292:	6030      	str	r0, [r6, #0]
 8009294:	2800      	cmp	r0, #0
 8009296:	d1d5      	bne.n	8009244 <__sfp+0x24>
 8009298:	f7ff ff78 	bl	800918c <__sfp_lock_release>
 800929c:	230c      	movs	r3, #12
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	e7ee      	b.n	8009280 <__sfp+0x60>
 80092a2:	bf00      	nop
 80092a4:	08009e6c 	.word	0x08009e6c
 80092a8:	ffff0001 	.word	0xffff0001

080092ac <_fwalk_reent>:
 80092ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b0:	4606      	mov	r6, r0
 80092b2:	4688      	mov	r8, r1
 80092b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092b8:	2700      	movs	r7, #0
 80092ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092be:	f1b9 0901 	subs.w	r9, r9, #1
 80092c2:	d505      	bpl.n	80092d0 <_fwalk_reent+0x24>
 80092c4:	6824      	ldr	r4, [r4, #0]
 80092c6:	2c00      	cmp	r4, #0
 80092c8:	d1f7      	bne.n	80092ba <_fwalk_reent+0xe>
 80092ca:	4638      	mov	r0, r7
 80092cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d0:	89ab      	ldrh	r3, [r5, #12]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d907      	bls.n	80092e6 <_fwalk_reent+0x3a>
 80092d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092da:	3301      	adds	r3, #1
 80092dc:	d003      	beq.n	80092e6 <_fwalk_reent+0x3a>
 80092de:	4629      	mov	r1, r5
 80092e0:	4630      	mov	r0, r6
 80092e2:	47c0      	blx	r8
 80092e4:	4307      	orrs	r7, r0
 80092e6:	3568      	adds	r5, #104	; 0x68
 80092e8:	e7e9      	b.n	80092be <_fwalk_reent+0x12>

080092ea <__retarget_lock_init_recursive>:
 80092ea:	4770      	bx	lr

080092ec <__retarget_lock_acquire_recursive>:
 80092ec:	4770      	bx	lr

080092ee <__retarget_lock_release_recursive>:
 80092ee:	4770      	bx	lr

080092f0 <__malloc_lock>:
 80092f0:	4801      	ldr	r0, [pc, #4]	; (80092f8 <__malloc_lock+0x8>)
 80092f2:	f7ff bffb 	b.w	80092ec <__retarget_lock_acquire_recursive>
 80092f6:	bf00      	nop
 80092f8:	20000964 	.word	0x20000964

080092fc <__malloc_unlock>:
 80092fc:	4801      	ldr	r0, [pc, #4]	; (8009304 <__malloc_unlock+0x8>)
 80092fe:	f7ff bff6 	b.w	80092ee <__retarget_lock_release_recursive>
 8009302:	bf00      	nop
 8009304:	20000964 	.word	0x20000964

08009308 <__sfputc_r>:
 8009308:	6893      	ldr	r3, [r2, #8]
 800930a:	3b01      	subs	r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	b410      	push	{r4}
 8009310:	6093      	str	r3, [r2, #8]
 8009312:	da08      	bge.n	8009326 <__sfputc_r+0x1e>
 8009314:	6994      	ldr	r4, [r2, #24]
 8009316:	42a3      	cmp	r3, r4
 8009318:	db01      	blt.n	800931e <__sfputc_r+0x16>
 800931a:	290a      	cmp	r1, #10
 800931c:	d103      	bne.n	8009326 <__sfputc_r+0x1e>
 800931e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009322:	f000 bb23 	b.w	800996c <__swbuf_r>
 8009326:	6813      	ldr	r3, [r2, #0]
 8009328:	1c58      	adds	r0, r3, #1
 800932a:	6010      	str	r0, [r2, #0]
 800932c:	7019      	strb	r1, [r3, #0]
 800932e:	4608      	mov	r0, r1
 8009330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009334:	4770      	bx	lr

08009336 <__sfputs_r>:
 8009336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009338:	4606      	mov	r6, r0
 800933a:	460f      	mov	r7, r1
 800933c:	4614      	mov	r4, r2
 800933e:	18d5      	adds	r5, r2, r3
 8009340:	42ac      	cmp	r4, r5
 8009342:	d101      	bne.n	8009348 <__sfputs_r+0x12>
 8009344:	2000      	movs	r0, #0
 8009346:	e007      	b.n	8009358 <__sfputs_r+0x22>
 8009348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934c:	463a      	mov	r2, r7
 800934e:	4630      	mov	r0, r6
 8009350:	f7ff ffda 	bl	8009308 <__sfputc_r>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d1f3      	bne.n	8009340 <__sfputs_r+0xa>
 8009358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800935c <_vfiprintf_r>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	460d      	mov	r5, r1
 8009362:	b09d      	sub	sp, #116	; 0x74
 8009364:	4614      	mov	r4, r2
 8009366:	4698      	mov	r8, r3
 8009368:	4606      	mov	r6, r0
 800936a:	b118      	cbz	r0, 8009374 <_vfiprintf_r+0x18>
 800936c:	6983      	ldr	r3, [r0, #24]
 800936e:	b90b      	cbnz	r3, 8009374 <_vfiprintf_r+0x18>
 8009370:	f7ff ff1e 	bl	80091b0 <__sinit>
 8009374:	4b89      	ldr	r3, [pc, #548]	; (800959c <_vfiprintf_r+0x240>)
 8009376:	429d      	cmp	r5, r3
 8009378:	d11b      	bne.n	80093b2 <_vfiprintf_r+0x56>
 800937a:	6875      	ldr	r5, [r6, #4]
 800937c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800937e:	07d9      	lsls	r1, r3, #31
 8009380:	d405      	bmi.n	800938e <_vfiprintf_r+0x32>
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	059a      	lsls	r2, r3, #22
 8009386:	d402      	bmi.n	800938e <_vfiprintf_r+0x32>
 8009388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800938a:	f7ff ffaf 	bl	80092ec <__retarget_lock_acquire_recursive>
 800938e:	89ab      	ldrh	r3, [r5, #12]
 8009390:	071b      	lsls	r3, r3, #28
 8009392:	d501      	bpl.n	8009398 <_vfiprintf_r+0x3c>
 8009394:	692b      	ldr	r3, [r5, #16]
 8009396:	b9eb      	cbnz	r3, 80093d4 <_vfiprintf_r+0x78>
 8009398:	4629      	mov	r1, r5
 800939a:	4630      	mov	r0, r6
 800939c:	f000 fb4a 	bl	8009a34 <__swsetup_r>
 80093a0:	b1c0      	cbz	r0, 80093d4 <_vfiprintf_r+0x78>
 80093a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093a4:	07dc      	lsls	r4, r3, #31
 80093a6:	d50e      	bpl.n	80093c6 <_vfiprintf_r+0x6a>
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093ac:	b01d      	add	sp, #116	; 0x74
 80093ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b2:	4b7b      	ldr	r3, [pc, #492]	; (80095a0 <_vfiprintf_r+0x244>)
 80093b4:	429d      	cmp	r5, r3
 80093b6:	d101      	bne.n	80093bc <_vfiprintf_r+0x60>
 80093b8:	68b5      	ldr	r5, [r6, #8]
 80093ba:	e7df      	b.n	800937c <_vfiprintf_r+0x20>
 80093bc:	4b79      	ldr	r3, [pc, #484]	; (80095a4 <_vfiprintf_r+0x248>)
 80093be:	429d      	cmp	r5, r3
 80093c0:	bf08      	it	eq
 80093c2:	68f5      	ldreq	r5, [r6, #12]
 80093c4:	e7da      	b.n	800937c <_vfiprintf_r+0x20>
 80093c6:	89ab      	ldrh	r3, [r5, #12]
 80093c8:	0598      	lsls	r0, r3, #22
 80093ca:	d4ed      	bmi.n	80093a8 <_vfiprintf_r+0x4c>
 80093cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ce:	f7ff ff8e 	bl	80092ee <__retarget_lock_release_recursive>
 80093d2:	e7e9      	b.n	80093a8 <_vfiprintf_r+0x4c>
 80093d4:	2300      	movs	r3, #0
 80093d6:	9309      	str	r3, [sp, #36]	; 0x24
 80093d8:	2320      	movs	r3, #32
 80093da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093de:	f8cd 800c 	str.w	r8, [sp, #12]
 80093e2:	2330      	movs	r3, #48	; 0x30
 80093e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095a8 <_vfiprintf_r+0x24c>
 80093e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093ec:	f04f 0901 	mov.w	r9, #1
 80093f0:	4623      	mov	r3, r4
 80093f2:	469a      	mov	sl, r3
 80093f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093f8:	b10a      	cbz	r2, 80093fe <_vfiprintf_r+0xa2>
 80093fa:	2a25      	cmp	r2, #37	; 0x25
 80093fc:	d1f9      	bne.n	80093f2 <_vfiprintf_r+0x96>
 80093fe:	ebba 0b04 	subs.w	fp, sl, r4
 8009402:	d00b      	beq.n	800941c <_vfiprintf_r+0xc0>
 8009404:	465b      	mov	r3, fp
 8009406:	4622      	mov	r2, r4
 8009408:	4629      	mov	r1, r5
 800940a:	4630      	mov	r0, r6
 800940c:	f7ff ff93 	bl	8009336 <__sfputs_r>
 8009410:	3001      	adds	r0, #1
 8009412:	f000 80aa 	beq.w	800956a <_vfiprintf_r+0x20e>
 8009416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009418:	445a      	add	r2, fp
 800941a:	9209      	str	r2, [sp, #36]	; 0x24
 800941c:	f89a 3000 	ldrb.w	r3, [sl]
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 80a2 	beq.w	800956a <_vfiprintf_r+0x20e>
 8009426:	2300      	movs	r3, #0
 8009428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800942c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009430:	f10a 0a01 	add.w	sl, sl, #1
 8009434:	9304      	str	r3, [sp, #16]
 8009436:	9307      	str	r3, [sp, #28]
 8009438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800943c:	931a      	str	r3, [sp, #104]	; 0x68
 800943e:	4654      	mov	r4, sl
 8009440:	2205      	movs	r2, #5
 8009442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009446:	4858      	ldr	r0, [pc, #352]	; (80095a8 <_vfiprintf_r+0x24c>)
 8009448:	f7f6 fec2 	bl	80001d0 <memchr>
 800944c:	9a04      	ldr	r2, [sp, #16]
 800944e:	b9d8      	cbnz	r0, 8009488 <_vfiprintf_r+0x12c>
 8009450:	06d1      	lsls	r1, r2, #27
 8009452:	bf44      	itt	mi
 8009454:	2320      	movmi	r3, #32
 8009456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800945a:	0713      	lsls	r3, r2, #28
 800945c:	bf44      	itt	mi
 800945e:	232b      	movmi	r3, #43	; 0x2b
 8009460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009464:	f89a 3000 	ldrb.w	r3, [sl]
 8009468:	2b2a      	cmp	r3, #42	; 0x2a
 800946a:	d015      	beq.n	8009498 <_vfiprintf_r+0x13c>
 800946c:	9a07      	ldr	r2, [sp, #28]
 800946e:	4654      	mov	r4, sl
 8009470:	2000      	movs	r0, #0
 8009472:	f04f 0c0a 	mov.w	ip, #10
 8009476:	4621      	mov	r1, r4
 8009478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800947c:	3b30      	subs	r3, #48	; 0x30
 800947e:	2b09      	cmp	r3, #9
 8009480:	d94e      	bls.n	8009520 <_vfiprintf_r+0x1c4>
 8009482:	b1b0      	cbz	r0, 80094b2 <_vfiprintf_r+0x156>
 8009484:	9207      	str	r2, [sp, #28]
 8009486:	e014      	b.n	80094b2 <_vfiprintf_r+0x156>
 8009488:	eba0 0308 	sub.w	r3, r0, r8
 800948c:	fa09 f303 	lsl.w	r3, r9, r3
 8009490:	4313      	orrs	r3, r2
 8009492:	9304      	str	r3, [sp, #16]
 8009494:	46a2      	mov	sl, r4
 8009496:	e7d2      	b.n	800943e <_vfiprintf_r+0xe2>
 8009498:	9b03      	ldr	r3, [sp, #12]
 800949a:	1d19      	adds	r1, r3, #4
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	9103      	str	r1, [sp, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	bfbb      	ittet	lt
 80094a4:	425b      	neglt	r3, r3
 80094a6:	f042 0202 	orrlt.w	r2, r2, #2
 80094aa:	9307      	strge	r3, [sp, #28]
 80094ac:	9307      	strlt	r3, [sp, #28]
 80094ae:	bfb8      	it	lt
 80094b0:	9204      	strlt	r2, [sp, #16]
 80094b2:	7823      	ldrb	r3, [r4, #0]
 80094b4:	2b2e      	cmp	r3, #46	; 0x2e
 80094b6:	d10c      	bne.n	80094d2 <_vfiprintf_r+0x176>
 80094b8:	7863      	ldrb	r3, [r4, #1]
 80094ba:	2b2a      	cmp	r3, #42	; 0x2a
 80094bc:	d135      	bne.n	800952a <_vfiprintf_r+0x1ce>
 80094be:	9b03      	ldr	r3, [sp, #12]
 80094c0:	1d1a      	adds	r2, r3, #4
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	9203      	str	r2, [sp, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bfb8      	it	lt
 80094ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094ce:	3402      	adds	r4, #2
 80094d0:	9305      	str	r3, [sp, #20]
 80094d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095b8 <_vfiprintf_r+0x25c>
 80094d6:	7821      	ldrb	r1, [r4, #0]
 80094d8:	2203      	movs	r2, #3
 80094da:	4650      	mov	r0, sl
 80094dc:	f7f6 fe78 	bl	80001d0 <memchr>
 80094e0:	b140      	cbz	r0, 80094f4 <_vfiprintf_r+0x198>
 80094e2:	2340      	movs	r3, #64	; 0x40
 80094e4:	eba0 000a 	sub.w	r0, r0, sl
 80094e8:	fa03 f000 	lsl.w	r0, r3, r0
 80094ec:	9b04      	ldr	r3, [sp, #16]
 80094ee:	4303      	orrs	r3, r0
 80094f0:	3401      	adds	r4, #1
 80094f2:	9304      	str	r3, [sp, #16]
 80094f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f8:	482c      	ldr	r0, [pc, #176]	; (80095ac <_vfiprintf_r+0x250>)
 80094fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094fe:	2206      	movs	r2, #6
 8009500:	f7f6 fe66 	bl	80001d0 <memchr>
 8009504:	2800      	cmp	r0, #0
 8009506:	d03f      	beq.n	8009588 <_vfiprintf_r+0x22c>
 8009508:	4b29      	ldr	r3, [pc, #164]	; (80095b0 <_vfiprintf_r+0x254>)
 800950a:	bb1b      	cbnz	r3, 8009554 <_vfiprintf_r+0x1f8>
 800950c:	9b03      	ldr	r3, [sp, #12]
 800950e:	3307      	adds	r3, #7
 8009510:	f023 0307 	bic.w	r3, r3, #7
 8009514:	3308      	adds	r3, #8
 8009516:	9303      	str	r3, [sp, #12]
 8009518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951a:	443b      	add	r3, r7
 800951c:	9309      	str	r3, [sp, #36]	; 0x24
 800951e:	e767      	b.n	80093f0 <_vfiprintf_r+0x94>
 8009520:	fb0c 3202 	mla	r2, ip, r2, r3
 8009524:	460c      	mov	r4, r1
 8009526:	2001      	movs	r0, #1
 8009528:	e7a5      	b.n	8009476 <_vfiprintf_r+0x11a>
 800952a:	2300      	movs	r3, #0
 800952c:	3401      	adds	r4, #1
 800952e:	9305      	str	r3, [sp, #20]
 8009530:	4619      	mov	r1, r3
 8009532:	f04f 0c0a 	mov.w	ip, #10
 8009536:	4620      	mov	r0, r4
 8009538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800953c:	3a30      	subs	r2, #48	; 0x30
 800953e:	2a09      	cmp	r2, #9
 8009540:	d903      	bls.n	800954a <_vfiprintf_r+0x1ee>
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0c5      	beq.n	80094d2 <_vfiprintf_r+0x176>
 8009546:	9105      	str	r1, [sp, #20]
 8009548:	e7c3      	b.n	80094d2 <_vfiprintf_r+0x176>
 800954a:	fb0c 2101 	mla	r1, ip, r1, r2
 800954e:	4604      	mov	r4, r0
 8009550:	2301      	movs	r3, #1
 8009552:	e7f0      	b.n	8009536 <_vfiprintf_r+0x1da>
 8009554:	ab03      	add	r3, sp, #12
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	462a      	mov	r2, r5
 800955a:	4b16      	ldr	r3, [pc, #88]	; (80095b4 <_vfiprintf_r+0x258>)
 800955c:	a904      	add	r1, sp, #16
 800955e:	4630      	mov	r0, r6
 8009560:	f3af 8000 	nop.w
 8009564:	4607      	mov	r7, r0
 8009566:	1c78      	adds	r0, r7, #1
 8009568:	d1d6      	bne.n	8009518 <_vfiprintf_r+0x1bc>
 800956a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800956c:	07d9      	lsls	r1, r3, #31
 800956e:	d405      	bmi.n	800957c <_vfiprintf_r+0x220>
 8009570:	89ab      	ldrh	r3, [r5, #12]
 8009572:	059a      	lsls	r2, r3, #22
 8009574:	d402      	bmi.n	800957c <_vfiprintf_r+0x220>
 8009576:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009578:	f7ff feb9 	bl	80092ee <__retarget_lock_release_recursive>
 800957c:	89ab      	ldrh	r3, [r5, #12]
 800957e:	065b      	lsls	r3, r3, #25
 8009580:	f53f af12 	bmi.w	80093a8 <_vfiprintf_r+0x4c>
 8009584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009586:	e711      	b.n	80093ac <_vfiprintf_r+0x50>
 8009588:	ab03      	add	r3, sp, #12
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	462a      	mov	r2, r5
 800958e:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <_vfiprintf_r+0x258>)
 8009590:	a904      	add	r1, sp, #16
 8009592:	4630      	mov	r0, r6
 8009594:	f000 f880 	bl	8009698 <_printf_i>
 8009598:	e7e4      	b.n	8009564 <_vfiprintf_r+0x208>
 800959a:	bf00      	nop
 800959c:	08009e90 	.word	0x08009e90
 80095a0:	08009eb0 	.word	0x08009eb0
 80095a4:	08009e70 	.word	0x08009e70
 80095a8:	08009ed0 	.word	0x08009ed0
 80095ac:	08009eda 	.word	0x08009eda
 80095b0:	00000000 	.word	0x00000000
 80095b4:	08009337 	.word	0x08009337
 80095b8:	08009ed6 	.word	0x08009ed6

080095bc <_printf_common>:
 80095bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c0:	4616      	mov	r6, r2
 80095c2:	4699      	mov	r9, r3
 80095c4:	688a      	ldr	r2, [r1, #8]
 80095c6:	690b      	ldr	r3, [r1, #16]
 80095c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095cc:	4293      	cmp	r3, r2
 80095ce:	bfb8      	it	lt
 80095d0:	4613      	movlt	r3, r2
 80095d2:	6033      	str	r3, [r6, #0]
 80095d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095d8:	4607      	mov	r7, r0
 80095da:	460c      	mov	r4, r1
 80095dc:	b10a      	cbz	r2, 80095e2 <_printf_common+0x26>
 80095de:	3301      	adds	r3, #1
 80095e0:	6033      	str	r3, [r6, #0]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	0699      	lsls	r1, r3, #26
 80095e6:	bf42      	ittt	mi
 80095e8:	6833      	ldrmi	r3, [r6, #0]
 80095ea:	3302      	addmi	r3, #2
 80095ec:	6033      	strmi	r3, [r6, #0]
 80095ee:	6825      	ldr	r5, [r4, #0]
 80095f0:	f015 0506 	ands.w	r5, r5, #6
 80095f4:	d106      	bne.n	8009604 <_printf_common+0x48>
 80095f6:	f104 0a19 	add.w	sl, r4, #25
 80095fa:	68e3      	ldr	r3, [r4, #12]
 80095fc:	6832      	ldr	r2, [r6, #0]
 80095fe:	1a9b      	subs	r3, r3, r2
 8009600:	42ab      	cmp	r3, r5
 8009602:	dc26      	bgt.n	8009652 <_printf_common+0x96>
 8009604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009608:	1e13      	subs	r3, r2, #0
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	bf18      	it	ne
 800960e:	2301      	movne	r3, #1
 8009610:	0692      	lsls	r2, r2, #26
 8009612:	d42b      	bmi.n	800966c <_printf_common+0xb0>
 8009614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009618:	4649      	mov	r1, r9
 800961a:	4638      	mov	r0, r7
 800961c:	47c0      	blx	r8
 800961e:	3001      	adds	r0, #1
 8009620:	d01e      	beq.n	8009660 <_printf_common+0xa4>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	68e5      	ldr	r5, [r4, #12]
 8009626:	6832      	ldr	r2, [r6, #0]
 8009628:	f003 0306 	and.w	r3, r3, #6
 800962c:	2b04      	cmp	r3, #4
 800962e:	bf08      	it	eq
 8009630:	1aad      	subeq	r5, r5, r2
 8009632:	68a3      	ldr	r3, [r4, #8]
 8009634:	6922      	ldr	r2, [r4, #16]
 8009636:	bf0c      	ite	eq
 8009638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800963c:	2500      	movne	r5, #0
 800963e:	4293      	cmp	r3, r2
 8009640:	bfc4      	itt	gt
 8009642:	1a9b      	subgt	r3, r3, r2
 8009644:	18ed      	addgt	r5, r5, r3
 8009646:	2600      	movs	r6, #0
 8009648:	341a      	adds	r4, #26
 800964a:	42b5      	cmp	r5, r6
 800964c:	d11a      	bne.n	8009684 <_printf_common+0xc8>
 800964e:	2000      	movs	r0, #0
 8009650:	e008      	b.n	8009664 <_printf_common+0xa8>
 8009652:	2301      	movs	r3, #1
 8009654:	4652      	mov	r2, sl
 8009656:	4649      	mov	r1, r9
 8009658:	4638      	mov	r0, r7
 800965a:	47c0      	blx	r8
 800965c:	3001      	adds	r0, #1
 800965e:	d103      	bne.n	8009668 <_printf_common+0xac>
 8009660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009668:	3501      	adds	r5, #1
 800966a:	e7c6      	b.n	80095fa <_printf_common+0x3e>
 800966c:	18e1      	adds	r1, r4, r3
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	2030      	movs	r0, #48	; 0x30
 8009672:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009676:	4422      	add	r2, r4
 8009678:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800967c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009680:	3302      	adds	r3, #2
 8009682:	e7c7      	b.n	8009614 <_printf_common+0x58>
 8009684:	2301      	movs	r3, #1
 8009686:	4622      	mov	r2, r4
 8009688:	4649      	mov	r1, r9
 800968a:	4638      	mov	r0, r7
 800968c:	47c0      	blx	r8
 800968e:	3001      	adds	r0, #1
 8009690:	d0e6      	beq.n	8009660 <_printf_common+0xa4>
 8009692:	3601      	adds	r6, #1
 8009694:	e7d9      	b.n	800964a <_printf_common+0x8e>
	...

08009698 <_printf_i>:
 8009698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800969c:	7e0f      	ldrb	r7, [r1, #24]
 800969e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096a0:	2f78      	cmp	r7, #120	; 0x78
 80096a2:	4691      	mov	r9, r2
 80096a4:	4680      	mov	r8, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	469a      	mov	sl, r3
 80096aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096ae:	d807      	bhi.n	80096c0 <_printf_i+0x28>
 80096b0:	2f62      	cmp	r7, #98	; 0x62
 80096b2:	d80a      	bhi.n	80096ca <_printf_i+0x32>
 80096b4:	2f00      	cmp	r7, #0
 80096b6:	f000 80d8 	beq.w	800986a <_printf_i+0x1d2>
 80096ba:	2f58      	cmp	r7, #88	; 0x58
 80096bc:	f000 80a3 	beq.w	8009806 <_printf_i+0x16e>
 80096c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096c8:	e03a      	b.n	8009740 <_printf_i+0xa8>
 80096ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096ce:	2b15      	cmp	r3, #21
 80096d0:	d8f6      	bhi.n	80096c0 <_printf_i+0x28>
 80096d2:	a101      	add	r1, pc, #4	; (adr r1, 80096d8 <_printf_i+0x40>)
 80096d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096d8:	08009731 	.word	0x08009731
 80096dc:	08009745 	.word	0x08009745
 80096e0:	080096c1 	.word	0x080096c1
 80096e4:	080096c1 	.word	0x080096c1
 80096e8:	080096c1 	.word	0x080096c1
 80096ec:	080096c1 	.word	0x080096c1
 80096f0:	08009745 	.word	0x08009745
 80096f4:	080096c1 	.word	0x080096c1
 80096f8:	080096c1 	.word	0x080096c1
 80096fc:	080096c1 	.word	0x080096c1
 8009700:	080096c1 	.word	0x080096c1
 8009704:	08009851 	.word	0x08009851
 8009708:	08009775 	.word	0x08009775
 800970c:	08009833 	.word	0x08009833
 8009710:	080096c1 	.word	0x080096c1
 8009714:	080096c1 	.word	0x080096c1
 8009718:	08009873 	.word	0x08009873
 800971c:	080096c1 	.word	0x080096c1
 8009720:	08009775 	.word	0x08009775
 8009724:	080096c1 	.word	0x080096c1
 8009728:	080096c1 	.word	0x080096c1
 800972c:	0800983b 	.word	0x0800983b
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	1d1a      	adds	r2, r3, #4
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	602a      	str	r2, [r5, #0]
 8009738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800973c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009740:	2301      	movs	r3, #1
 8009742:	e0a3      	b.n	800988c <_printf_i+0x1f4>
 8009744:	6820      	ldr	r0, [r4, #0]
 8009746:	6829      	ldr	r1, [r5, #0]
 8009748:	0606      	lsls	r6, r0, #24
 800974a:	f101 0304 	add.w	r3, r1, #4
 800974e:	d50a      	bpl.n	8009766 <_printf_i+0xce>
 8009750:	680e      	ldr	r6, [r1, #0]
 8009752:	602b      	str	r3, [r5, #0]
 8009754:	2e00      	cmp	r6, #0
 8009756:	da03      	bge.n	8009760 <_printf_i+0xc8>
 8009758:	232d      	movs	r3, #45	; 0x2d
 800975a:	4276      	negs	r6, r6
 800975c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009760:	485e      	ldr	r0, [pc, #376]	; (80098dc <_printf_i+0x244>)
 8009762:	230a      	movs	r3, #10
 8009764:	e019      	b.n	800979a <_printf_i+0x102>
 8009766:	680e      	ldr	r6, [r1, #0]
 8009768:	602b      	str	r3, [r5, #0]
 800976a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800976e:	bf18      	it	ne
 8009770:	b236      	sxthne	r6, r6
 8009772:	e7ef      	b.n	8009754 <_printf_i+0xbc>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	6820      	ldr	r0, [r4, #0]
 8009778:	1d19      	adds	r1, r3, #4
 800977a:	6029      	str	r1, [r5, #0]
 800977c:	0601      	lsls	r1, r0, #24
 800977e:	d501      	bpl.n	8009784 <_printf_i+0xec>
 8009780:	681e      	ldr	r6, [r3, #0]
 8009782:	e002      	b.n	800978a <_printf_i+0xf2>
 8009784:	0646      	lsls	r6, r0, #25
 8009786:	d5fb      	bpl.n	8009780 <_printf_i+0xe8>
 8009788:	881e      	ldrh	r6, [r3, #0]
 800978a:	4854      	ldr	r0, [pc, #336]	; (80098dc <_printf_i+0x244>)
 800978c:	2f6f      	cmp	r7, #111	; 0x6f
 800978e:	bf0c      	ite	eq
 8009790:	2308      	moveq	r3, #8
 8009792:	230a      	movne	r3, #10
 8009794:	2100      	movs	r1, #0
 8009796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800979a:	6865      	ldr	r5, [r4, #4]
 800979c:	60a5      	str	r5, [r4, #8]
 800979e:	2d00      	cmp	r5, #0
 80097a0:	bfa2      	ittt	ge
 80097a2:	6821      	ldrge	r1, [r4, #0]
 80097a4:	f021 0104 	bicge.w	r1, r1, #4
 80097a8:	6021      	strge	r1, [r4, #0]
 80097aa:	b90e      	cbnz	r6, 80097b0 <_printf_i+0x118>
 80097ac:	2d00      	cmp	r5, #0
 80097ae:	d04d      	beq.n	800984c <_printf_i+0x1b4>
 80097b0:	4615      	mov	r5, r2
 80097b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80097b6:	fb03 6711 	mls	r7, r3, r1, r6
 80097ba:	5dc7      	ldrb	r7, [r0, r7]
 80097bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097c0:	4637      	mov	r7, r6
 80097c2:	42bb      	cmp	r3, r7
 80097c4:	460e      	mov	r6, r1
 80097c6:	d9f4      	bls.n	80097b2 <_printf_i+0x11a>
 80097c8:	2b08      	cmp	r3, #8
 80097ca:	d10b      	bne.n	80097e4 <_printf_i+0x14c>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	07de      	lsls	r6, r3, #31
 80097d0:	d508      	bpl.n	80097e4 <_printf_i+0x14c>
 80097d2:	6923      	ldr	r3, [r4, #16]
 80097d4:	6861      	ldr	r1, [r4, #4]
 80097d6:	4299      	cmp	r1, r3
 80097d8:	bfde      	ittt	le
 80097da:	2330      	movle	r3, #48	; 0x30
 80097dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80097e4:	1b52      	subs	r2, r2, r5
 80097e6:	6122      	str	r2, [r4, #16]
 80097e8:	f8cd a000 	str.w	sl, [sp]
 80097ec:	464b      	mov	r3, r9
 80097ee:	aa03      	add	r2, sp, #12
 80097f0:	4621      	mov	r1, r4
 80097f2:	4640      	mov	r0, r8
 80097f4:	f7ff fee2 	bl	80095bc <_printf_common>
 80097f8:	3001      	adds	r0, #1
 80097fa:	d14c      	bne.n	8009896 <_printf_i+0x1fe>
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009800:	b004      	add	sp, #16
 8009802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009806:	4835      	ldr	r0, [pc, #212]	; (80098dc <_printf_i+0x244>)
 8009808:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800980c:	6829      	ldr	r1, [r5, #0]
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	f851 6b04 	ldr.w	r6, [r1], #4
 8009814:	6029      	str	r1, [r5, #0]
 8009816:	061d      	lsls	r5, r3, #24
 8009818:	d514      	bpl.n	8009844 <_printf_i+0x1ac>
 800981a:	07df      	lsls	r7, r3, #31
 800981c:	bf44      	itt	mi
 800981e:	f043 0320 	orrmi.w	r3, r3, #32
 8009822:	6023      	strmi	r3, [r4, #0]
 8009824:	b91e      	cbnz	r6, 800982e <_printf_i+0x196>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	f023 0320 	bic.w	r3, r3, #32
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	2310      	movs	r3, #16
 8009830:	e7b0      	b.n	8009794 <_printf_i+0xfc>
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	f043 0320 	orr.w	r3, r3, #32
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	2378      	movs	r3, #120	; 0x78
 800983c:	4828      	ldr	r0, [pc, #160]	; (80098e0 <_printf_i+0x248>)
 800983e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009842:	e7e3      	b.n	800980c <_printf_i+0x174>
 8009844:	0659      	lsls	r1, r3, #25
 8009846:	bf48      	it	mi
 8009848:	b2b6      	uxthmi	r6, r6
 800984a:	e7e6      	b.n	800981a <_printf_i+0x182>
 800984c:	4615      	mov	r5, r2
 800984e:	e7bb      	b.n	80097c8 <_printf_i+0x130>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	6826      	ldr	r6, [r4, #0]
 8009854:	6961      	ldr	r1, [r4, #20]
 8009856:	1d18      	adds	r0, r3, #4
 8009858:	6028      	str	r0, [r5, #0]
 800985a:	0635      	lsls	r5, r6, #24
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	d501      	bpl.n	8009864 <_printf_i+0x1cc>
 8009860:	6019      	str	r1, [r3, #0]
 8009862:	e002      	b.n	800986a <_printf_i+0x1d2>
 8009864:	0670      	lsls	r0, r6, #25
 8009866:	d5fb      	bpl.n	8009860 <_printf_i+0x1c8>
 8009868:	8019      	strh	r1, [r3, #0]
 800986a:	2300      	movs	r3, #0
 800986c:	6123      	str	r3, [r4, #16]
 800986e:	4615      	mov	r5, r2
 8009870:	e7ba      	b.n	80097e8 <_printf_i+0x150>
 8009872:	682b      	ldr	r3, [r5, #0]
 8009874:	1d1a      	adds	r2, r3, #4
 8009876:	602a      	str	r2, [r5, #0]
 8009878:	681d      	ldr	r5, [r3, #0]
 800987a:	6862      	ldr	r2, [r4, #4]
 800987c:	2100      	movs	r1, #0
 800987e:	4628      	mov	r0, r5
 8009880:	f7f6 fca6 	bl	80001d0 <memchr>
 8009884:	b108      	cbz	r0, 800988a <_printf_i+0x1f2>
 8009886:	1b40      	subs	r0, r0, r5
 8009888:	6060      	str	r0, [r4, #4]
 800988a:	6863      	ldr	r3, [r4, #4]
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	2300      	movs	r3, #0
 8009890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009894:	e7a8      	b.n	80097e8 <_printf_i+0x150>
 8009896:	6923      	ldr	r3, [r4, #16]
 8009898:	462a      	mov	r2, r5
 800989a:	4649      	mov	r1, r9
 800989c:	4640      	mov	r0, r8
 800989e:	47d0      	blx	sl
 80098a0:	3001      	adds	r0, #1
 80098a2:	d0ab      	beq.n	80097fc <_printf_i+0x164>
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	079b      	lsls	r3, r3, #30
 80098a8:	d413      	bmi.n	80098d2 <_printf_i+0x23a>
 80098aa:	68e0      	ldr	r0, [r4, #12]
 80098ac:	9b03      	ldr	r3, [sp, #12]
 80098ae:	4298      	cmp	r0, r3
 80098b0:	bfb8      	it	lt
 80098b2:	4618      	movlt	r0, r3
 80098b4:	e7a4      	b.n	8009800 <_printf_i+0x168>
 80098b6:	2301      	movs	r3, #1
 80098b8:	4632      	mov	r2, r6
 80098ba:	4649      	mov	r1, r9
 80098bc:	4640      	mov	r0, r8
 80098be:	47d0      	blx	sl
 80098c0:	3001      	adds	r0, #1
 80098c2:	d09b      	beq.n	80097fc <_printf_i+0x164>
 80098c4:	3501      	adds	r5, #1
 80098c6:	68e3      	ldr	r3, [r4, #12]
 80098c8:	9903      	ldr	r1, [sp, #12]
 80098ca:	1a5b      	subs	r3, r3, r1
 80098cc:	42ab      	cmp	r3, r5
 80098ce:	dcf2      	bgt.n	80098b6 <_printf_i+0x21e>
 80098d0:	e7eb      	b.n	80098aa <_printf_i+0x212>
 80098d2:	2500      	movs	r5, #0
 80098d4:	f104 0619 	add.w	r6, r4, #25
 80098d8:	e7f5      	b.n	80098c6 <_printf_i+0x22e>
 80098da:	bf00      	nop
 80098dc:	08009ee1 	.word	0x08009ee1
 80098e0:	08009ef2 	.word	0x08009ef2

080098e4 <__sread>:
 80098e4:	b510      	push	{r4, lr}
 80098e6:	460c      	mov	r4, r1
 80098e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ec:	f000 fa5a 	bl	8009da4 <_read_r>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	bfab      	itete	ge
 80098f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098f6:	89a3      	ldrhlt	r3, [r4, #12]
 80098f8:	181b      	addge	r3, r3, r0
 80098fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098fe:	bfac      	ite	ge
 8009900:	6563      	strge	r3, [r4, #84]	; 0x54
 8009902:	81a3      	strhlt	r3, [r4, #12]
 8009904:	bd10      	pop	{r4, pc}

08009906 <__swrite>:
 8009906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990a:	461f      	mov	r7, r3
 800990c:	898b      	ldrh	r3, [r1, #12]
 800990e:	05db      	lsls	r3, r3, #23
 8009910:	4605      	mov	r5, r0
 8009912:	460c      	mov	r4, r1
 8009914:	4616      	mov	r6, r2
 8009916:	d505      	bpl.n	8009924 <__swrite+0x1e>
 8009918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800991c:	2302      	movs	r3, #2
 800991e:	2200      	movs	r2, #0
 8009920:	f000 f9c8 	bl	8009cb4 <_lseek_r>
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800992a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800992e:	81a3      	strh	r3, [r4, #12]
 8009930:	4632      	mov	r2, r6
 8009932:	463b      	mov	r3, r7
 8009934:	4628      	mov	r0, r5
 8009936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800993a:	f000 b869 	b.w	8009a10 <_write_r>

0800993e <__sseek>:
 800993e:	b510      	push	{r4, lr}
 8009940:	460c      	mov	r4, r1
 8009942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009946:	f000 f9b5 	bl	8009cb4 <_lseek_r>
 800994a:	1c43      	adds	r3, r0, #1
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	bf15      	itete	ne
 8009950:	6560      	strne	r0, [r4, #84]	; 0x54
 8009952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800995a:	81a3      	strheq	r3, [r4, #12]
 800995c:	bf18      	it	ne
 800995e:	81a3      	strhne	r3, [r4, #12]
 8009960:	bd10      	pop	{r4, pc}

08009962 <__sclose>:
 8009962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009966:	f000 b8d3 	b.w	8009b10 <_close_r>
	...

0800996c <__swbuf_r>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	460e      	mov	r6, r1
 8009970:	4614      	mov	r4, r2
 8009972:	4605      	mov	r5, r0
 8009974:	b118      	cbz	r0, 800997e <__swbuf_r+0x12>
 8009976:	6983      	ldr	r3, [r0, #24]
 8009978:	b90b      	cbnz	r3, 800997e <__swbuf_r+0x12>
 800997a:	f7ff fc19 	bl	80091b0 <__sinit>
 800997e:	4b21      	ldr	r3, [pc, #132]	; (8009a04 <__swbuf_r+0x98>)
 8009980:	429c      	cmp	r4, r3
 8009982:	d12b      	bne.n	80099dc <__swbuf_r+0x70>
 8009984:	686c      	ldr	r4, [r5, #4]
 8009986:	69a3      	ldr	r3, [r4, #24]
 8009988:	60a3      	str	r3, [r4, #8]
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	071a      	lsls	r2, r3, #28
 800998e:	d52f      	bpl.n	80099f0 <__swbuf_r+0x84>
 8009990:	6923      	ldr	r3, [r4, #16]
 8009992:	b36b      	cbz	r3, 80099f0 <__swbuf_r+0x84>
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	6820      	ldr	r0, [r4, #0]
 8009998:	1ac0      	subs	r0, r0, r3
 800999a:	6963      	ldr	r3, [r4, #20]
 800999c:	b2f6      	uxtb	r6, r6
 800999e:	4283      	cmp	r3, r0
 80099a0:	4637      	mov	r7, r6
 80099a2:	dc04      	bgt.n	80099ae <__swbuf_r+0x42>
 80099a4:	4621      	mov	r1, r4
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f948 	bl	8009c3c <_fflush_r>
 80099ac:	bb30      	cbnz	r0, 80099fc <__swbuf_r+0x90>
 80099ae:	68a3      	ldr	r3, [r4, #8]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	60a3      	str	r3, [r4, #8]
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	6022      	str	r2, [r4, #0]
 80099ba:	701e      	strb	r6, [r3, #0]
 80099bc:	6963      	ldr	r3, [r4, #20]
 80099be:	3001      	adds	r0, #1
 80099c0:	4283      	cmp	r3, r0
 80099c2:	d004      	beq.n	80099ce <__swbuf_r+0x62>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	07db      	lsls	r3, r3, #31
 80099c8:	d506      	bpl.n	80099d8 <__swbuf_r+0x6c>
 80099ca:	2e0a      	cmp	r6, #10
 80099cc:	d104      	bne.n	80099d8 <__swbuf_r+0x6c>
 80099ce:	4621      	mov	r1, r4
 80099d0:	4628      	mov	r0, r5
 80099d2:	f000 f933 	bl	8009c3c <_fflush_r>
 80099d6:	b988      	cbnz	r0, 80099fc <__swbuf_r+0x90>
 80099d8:	4638      	mov	r0, r7
 80099da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <__swbuf_r+0x9c>)
 80099de:	429c      	cmp	r4, r3
 80099e0:	d101      	bne.n	80099e6 <__swbuf_r+0x7a>
 80099e2:	68ac      	ldr	r4, [r5, #8]
 80099e4:	e7cf      	b.n	8009986 <__swbuf_r+0x1a>
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <__swbuf_r+0xa0>)
 80099e8:	429c      	cmp	r4, r3
 80099ea:	bf08      	it	eq
 80099ec:	68ec      	ldreq	r4, [r5, #12]
 80099ee:	e7ca      	b.n	8009986 <__swbuf_r+0x1a>
 80099f0:	4621      	mov	r1, r4
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 f81e 	bl	8009a34 <__swsetup_r>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d0cb      	beq.n	8009994 <__swbuf_r+0x28>
 80099fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009a00:	e7ea      	b.n	80099d8 <__swbuf_r+0x6c>
 8009a02:	bf00      	nop
 8009a04:	08009e90 	.word	0x08009e90
 8009a08:	08009eb0 	.word	0x08009eb0
 8009a0c:	08009e70 	.word	0x08009e70

08009a10 <_write_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d07      	ldr	r5, [pc, #28]	; (8009a30 <_write_r+0x20>)
 8009a14:	4604      	mov	r4, r0
 8009a16:	4608      	mov	r0, r1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	602a      	str	r2, [r5, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f7f6 fda8 	bl	8000574 <_write>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_write_r+0x1e>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_write_r+0x1e>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	20000968 	.word	0x20000968

08009a34 <__swsetup_r>:
 8009a34:	4b32      	ldr	r3, [pc, #200]	; (8009b00 <__swsetup_r+0xcc>)
 8009a36:	b570      	push	{r4, r5, r6, lr}
 8009a38:	681d      	ldr	r5, [r3, #0]
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	b125      	cbz	r5, 8009a4a <__swsetup_r+0x16>
 8009a40:	69ab      	ldr	r3, [r5, #24]
 8009a42:	b913      	cbnz	r3, 8009a4a <__swsetup_r+0x16>
 8009a44:	4628      	mov	r0, r5
 8009a46:	f7ff fbb3 	bl	80091b0 <__sinit>
 8009a4a:	4b2e      	ldr	r3, [pc, #184]	; (8009b04 <__swsetup_r+0xd0>)
 8009a4c:	429c      	cmp	r4, r3
 8009a4e:	d10f      	bne.n	8009a70 <__swsetup_r+0x3c>
 8009a50:	686c      	ldr	r4, [r5, #4]
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a58:	0719      	lsls	r1, r3, #28
 8009a5a:	d42c      	bmi.n	8009ab6 <__swsetup_r+0x82>
 8009a5c:	06dd      	lsls	r5, r3, #27
 8009a5e:	d411      	bmi.n	8009a84 <__swsetup_r+0x50>
 8009a60:	2309      	movs	r3, #9
 8009a62:	6033      	str	r3, [r6, #0]
 8009a64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a6e:	e03e      	b.n	8009aee <__swsetup_r+0xba>
 8009a70:	4b25      	ldr	r3, [pc, #148]	; (8009b08 <__swsetup_r+0xd4>)
 8009a72:	429c      	cmp	r4, r3
 8009a74:	d101      	bne.n	8009a7a <__swsetup_r+0x46>
 8009a76:	68ac      	ldr	r4, [r5, #8]
 8009a78:	e7eb      	b.n	8009a52 <__swsetup_r+0x1e>
 8009a7a:	4b24      	ldr	r3, [pc, #144]	; (8009b0c <__swsetup_r+0xd8>)
 8009a7c:	429c      	cmp	r4, r3
 8009a7e:	bf08      	it	eq
 8009a80:	68ec      	ldreq	r4, [r5, #12]
 8009a82:	e7e6      	b.n	8009a52 <__swsetup_r+0x1e>
 8009a84:	0758      	lsls	r0, r3, #29
 8009a86:	d512      	bpl.n	8009aae <__swsetup_r+0x7a>
 8009a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a8a:	b141      	cbz	r1, 8009a9e <__swsetup_r+0x6a>
 8009a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a90:	4299      	cmp	r1, r3
 8009a92:	d002      	beq.n	8009a9a <__swsetup_r+0x66>
 8009a94:	4630      	mov	r0, r6
 8009a96:	f7ff fa2b 	bl	8008ef0 <_free_r>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	6363      	str	r3, [r4, #52]	; 0x34
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009aa4:	81a3      	strh	r3, [r4, #12]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	6063      	str	r3, [r4, #4]
 8009aaa:	6923      	ldr	r3, [r4, #16]
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	f043 0308 	orr.w	r3, r3, #8
 8009ab4:	81a3      	strh	r3, [r4, #12]
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	b94b      	cbnz	r3, 8009ace <__swsetup_r+0x9a>
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ac4:	d003      	beq.n	8009ace <__swsetup_r+0x9a>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f000 f92b 	bl	8009d24 <__smakebuf_r>
 8009ace:	89a0      	ldrh	r0, [r4, #12]
 8009ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ad4:	f010 0301 	ands.w	r3, r0, #1
 8009ad8:	d00a      	beq.n	8009af0 <__swsetup_r+0xbc>
 8009ada:	2300      	movs	r3, #0
 8009adc:	60a3      	str	r3, [r4, #8]
 8009ade:	6963      	ldr	r3, [r4, #20]
 8009ae0:	425b      	negs	r3, r3
 8009ae2:	61a3      	str	r3, [r4, #24]
 8009ae4:	6923      	ldr	r3, [r4, #16]
 8009ae6:	b943      	cbnz	r3, 8009afa <__swsetup_r+0xc6>
 8009ae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009aec:	d1ba      	bne.n	8009a64 <__swsetup_r+0x30>
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	0781      	lsls	r1, r0, #30
 8009af2:	bf58      	it	pl
 8009af4:	6963      	ldrpl	r3, [r4, #20]
 8009af6:	60a3      	str	r3, [r4, #8]
 8009af8:	e7f4      	b.n	8009ae4 <__swsetup_r+0xb0>
 8009afa:	2000      	movs	r0, #0
 8009afc:	e7f7      	b.n	8009aee <__swsetup_r+0xba>
 8009afe:	bf00      	nop
 8009b00:	2000002c 	.word	0x2000002c
 8009b04:	08009e90 	.word	0x08009e90
 8009b08:	08009eb0 	.word	0x08009eb0
 8009b0c:	08009e70 	.word	0x08009e70

08009b10 <_close_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4d06      	ldr	r5, [pc, #24]	; (8009b2c <_close_r+0x1c>)
 8009b14:	2300      	movs	r3, #0
 8009b16:	4604      	mov	r4, r0
 8009b18:	4608      	mov	r0, r1
 8009b1a:	602b      	str	r3, [r5, #0]
 8009b1c:	f7f7 facf 	bl	80010be <_close>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_close_r+0x1a>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_close_r+0x1a>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	20000968 	.word	0x20000968

08009b30 <__sflush_r>:
 8009b30:	898a      	ldrh	r2, [r1, #12]
 8009b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b36:	4605      	mov	r5, r0
 8009b38:	0710      	lsls	r0, r2, #28
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	d458      	bmi.n	8009bf0 <__sflush_r+0xc0>
 8009b3e:	684b      	ldr	r3, [r1, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dc05      	bgt.n	8009b50 <__sflush_r+0x20>
 8009b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	dc02      	bgt.n	8009b50 <__sflush_r+0x20>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b52:	2e00      	cmp	r6, #0
 8009b54:	d0f9      	beq.n	8009b4a <__sflush_r+0x1a>
 8009b56:	2300      	movs	r3, #0
 8009b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b5c:	682f      	ldr	r7, [r5, #0]
 8009b5e:	602b      	str	r3, [r5, #0]
 8009b60:	d032      	beq.n	8009bc8 <__sflush_r+0x98>
 8009b62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	075a      	lsls	r2, r3, #29
 8009b68:	d505      	bpl.n	8009b76 <__sflush_r+0x46>
 8009b6a:	6863      	ldr	r3, [r4, #4]
 8009b6c:	1ac0      	subs	r0, r0, r3
 8009b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b70:	b10b      	cbz	r3, 8009b76 <__sflush_r+0x46>
 8009b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b74:	1ac0      	subs	r0, r0, r3
 8009b76:	2300      	movs	r3, #0
 8009b78:	4602      	mov	r2, r0
 8009b7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b7c:	6a21      	ldr	r1, [r4, #32]
 8009b7e:	4628      	mov	r0, r5
 8009b80:	47b0      	blx	r6
 8009b82:	1c43      	adds	r3, r0, #1
 8009b84:	89a3      	ldrh	r3, [r4, #12]
 8009b86:	d106      	bne.n	8009b96 <__sflush_r+0x66>
 8009b88:	6829      	ldr	r1, [r5, #0]
 8009b8a:	291d      	cmp	r1, #29
 8009b8c:	d82c      	bhi.n	8009be8 <__sflush_r+0xb8>
 8009b8e:	4a2a      	ldr	r2, [pc, #168]	; (8009c38 <__sflush_r+0x108>)
 8009b90:	40ca      	lsrs	r2, r1
 8009b92:	07d6      	lsls	r6, r2, #31
 8009b94:	d528      	bpl.n	8009be8 <__sflush_r+0xb8>
 8009b96:	2200      	movs	r2, #0
 8009b98:	6062      	str	r2, [r4, #4]
 8009b9a:	04d9      	lsls	r1, r3, #19
 8009b9c:	6922      	ldr	r2, [r4, #16]
 8009b9e:	6022      	str	r2, [r4, #0]
 8009ba0:	d504      	bpl.n	8009bac <__sflush_r+0x7c>
 8009ba2:	1c42      	adds	r2, r0, #1
 8009ba4:	d101      	bne.n	8009baa <__sflush_r+0x7a>
 8009ba6:	682b      	ldr	r3, [r5, #0]
 8009ba8:	b903      	cbnz	r3, 8009bac <__sflush_r+0x7c>
 8009baa:	6560      	str	r0, [r4, #84]	; 0x54
 8009bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bae:	602f      	str	r7, [r5, #0]
 8009bb0:	2900      	cmp	r1, #0
 8009bb2:	d0ca      	beq.n	8009b4a <__sflush_r+0x1a>
 8009bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bb8:	4299      	cmp	r1, r3
 8009bba:	d002      	beq.n	8009bc2 <__sflush_r+0x92>
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f7ff f997 	bl	8008ef0 <_free_r>
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	6360      	str	r0, [r4, #52]	; 0x34
 8009bc6:	e7c1      	b.n	8009b4c <__sflush_r+0x1c>
 8009bc8:	6a21      	ldr	r1, [r4, #32]
 8009bca:	2301      	movs	r3, #1
 8009bcc:	4628      	mov	r0, r5
 8009bce:	47b0      	blx	r6
 8009bd0:	1c41      	adds	r1, r0, #1
 8009bd2:	d1c7      	bne.n	8009b64 <__sflush_r+0x34>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0c4      	beq.n	8009b64 <__sflush_r+0x34>
 8009bda:	2b1d      	cmp	r3, #29
 8009bdc:	d001      	beq.n	8009be2 <__sflush_r+0xb2>
 8009bde:	2b16      	cmp	r3, #22
 8009be0:	d101      	bne.n	8009be6 <__sflush_r+0xb6>
 8009be2:	602f      	str	r7, [r5, #0]
 8009be4:	e7b1      	b.n	8009b4a <__sflush_r+0x1a>
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bec:	81a3      	strh	r3, [r4, #12]
 8009bee:	e7ad      	b.n	8009b4c <__sflush_r+0x1c>
 8009bf0:	690f      	ldr	r7, [r1, #16]
 8009bf2:	2f00      	cmp	r7, #0
 8009bf4:	d0a9      	beq.n	8009b4a <__sflush_r+0x1a>
 8009bf6:	0793      	lsls	r3, r2, #30
 8009bf8:	680e      	ldr	r6, [r1, #0]
 8009bfa:	bf08      	it	eq
 8009bfc:	694b      	ldreq	r3, [r1, #20]
 8009bfe:	600f      	str	r7, [r1, #0]
 8009c00:	bf18      	it	ne
 8009c02:	2300      	movne	r3, #0
 8009c04:	eba6 0807 	sub.w	r8, r6, r7
 8009c08:	608b      	str	r3, [r1, #8]
 8009c0a:	f1b8 0f00 	cmp.w	r8, #0
 8009c0e:	dd9c      	ble.n	8009b4a <__sflush_r+0x1a>
 8009c10:	6a21      	ldr	r1, [r4, #32]
 8009c12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c14:	4643      	mov	r3, r8
 8009c16:	463a      	mov	r2, r7
 8009c18:	4628      	mov	r0, r5
 8009c1a:	47b0      	blx	r6
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	dc06      	bgt.n	8009c2e <__sflush_r+0xfe>
 8009c20:	89a3      	ldrh	r3, [r4, #12]
 8009c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c2c:	e78e      	b.n	8009b4c <__sflush_r+0x1c>
 8009c2e:	4407      	add	r7, r0
 8009c30:	eba8 0800 	sub.w	r8, r8, r0
 8009c34:	e7e9      	b.n	8009c0a <__sflush_r+0xda>
 8009c36:	bf00      	nop
 8009c38:	20400001 	.word	0x20400001

08009c3c <_fflush_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	690b      	ldr	r3, [r1, #16]
 8009c40:	4605      	mov	r5, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	b913      	cbnz	r3, 8009c4c <_fflush_r+0x10>
 8009c46:	2500      	movs	r5, #0
 8009c48:	4628      	mov	r0, r5
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	b118      	cbz	r0, 8009c56 <_fflush_r+0x1a>
 8009c4e:	6983      	ldr	r3, [r0, #24]
 8009c50:	b90b      	cbnz	r3, 8009c56 <_fflush_r+0x1a>
 8009c52:	f7ff faad 	bl	80091b0 <__sinit>
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <_fflush_r+0x6c>)
 8009c58:	429c      	cmp	r4, r3
 8009c5a:	d11b      	bne.n	8009c94 <_fflush_r+0x58>
 8009c5c:	686c      	ldr	r4, [r5, #4]
 8009c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d0ef      	beq.n	8009c46 <_fflush_r+0xa>
 8009c66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c68:	07d0      	lsls	r0, r2, #31
 8009c6a:	d404      	bmi.n	8009c76 <_fflush_r+0x3a>
 8009c6c:	0599      	lsls	r1, r3, #22
 8009c6e:	d402      	bmi.n	8009c76 <_fflush_r+0x3a>
 8009c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c72:	f7ff fb3b 	bl	80092ec <__retarget_lock_acquire_recursive>
 8009c76:	4628      	mov	r0, r5
 8009c78:	4621      	mov	r1, r4
 8009c7a:	f7ff ff59 	bl	8009b30 <__sflush_r>
 8009c7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c80:	07da      	lsls	r2, r3, #31
 8009c82:	4605      	mov	r5, r0
 8009c84:	d4e0      	bmi.n	8009c48 <_fflush_r+0xc>
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	059b      	lsls	r3, r3, #22
 8009c8a:	d4dd      	bmi.n	8009c48 <_fflush_r+0xc>
 8009c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c8e:	f7ff fb2e 	bl	80092ee <__retarget_lock_release_recursive>
 8009c92:	e7d9      	b.n	8009c48 <_fflush_r+0xc>
 8009c94:	4b05      	ldr	r3, [pc, #20]	; (8009cac <_fflush_r+0x70>)
 8009c96:	429c      	cmp	r4, r3
 8009c98:	d101      	bne.n	8009c9e <_fflush_r+0x62>
 8009c9a:	68ac      	ldr	r4, [r5, #8]
 8009c9c:	e7df      	b.n	8009c5e <_fflush_r+0x22>
 8009c9e:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <_fflush_r+0x74>)
 8009ca0:	429c      	cmp	r4, r3
 8009ca2:	bf08      	it	eq
 8009ca4:	68ec      	ldreq	r4, [r5, #12]
 8009ca6:	e7da      	b.n	8009c5e <_fflush_r+0x22>
 8009ca8:	08009e90 	.word	0x08009e90
 8009cac:	08009eb0 	.word	0x08009eb0
 8009cb0:	08009e70 	.word	0x08009e70

08009cb4 <_lseek_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4d07      	ldr	r5, [pc, #28]	; (8009cd4 <_lseek_r+0x20>)
 8009cb8:	4604      	mov	r4, r0
 8009cba:	4608      	mov	r0, r1
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	602a      	str	r2, [r5, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	f7f7 fa22 	bl	800110c <_lseek>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d102      	bne.n	8009cd2 <_lseek_r+0x1e>
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	b103      	cbz	r3, 8009cd2 <_lseek_r+0x1e>
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	20000968 	.word	0x20000968

08009cd8 <__swhatbuf_r>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	460e      	mov	r6, r1
 8009cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce0:	2900      	cmp	r1, #0
 8009ce2:	b096      	sub	sp, #88	; 0x58
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	461d      	mov	r5, r3
 8009ce8:	da08      	bge.n	8009cfc <__swhatbuf_r+0x24>
 8009cea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	602a      	str	r2, [r5, #0]
 8009cf2:	061a      	lsls	r2, r3, #24
 8009cf4:	d410      	bmi.n	8009d18 <__swhatbuf_r+0x40>
 8009cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cfa:	e00e      	b.n	8009d1a <__swhatbuf_r+0x42>
 8009cfc:	466a      	mov	r2, sp
 8009cfe:	f000 f863 	bl	8009dc8 <_fstat_r>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	dbf1      	blt.n	8009cea <__swhatbuf_r+0x12>
 8009d06:	9a01      	ldr	r2, [sp, #4]
 8009d08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d10:	425a      	negs	r2, r3
 8009d12:	415a      	adcs	r2, r3
 8009d14:	602a      	str	r2, [r5, #0]
 8009d16:	e7ee      	b.n	8009cf6 <__swhatbuf_r+0x1e>
 8009d18:	2340      	movs	r3, #64	; 0x40
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	b016      	add	sp, #88	; 0x58
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d24 <__smakebuf_r>:
 8009d24:	898b      	ldrh	r3, [r1, #12]
 8009d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d28:	079d      	lsls	r5, r3, #30
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	d507      	bpl.n	8009d40 <__smakebuf_r+0x1c>
 8009d30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	6123      	str	r3, [r4, #16]
 8009d38:	2301      	movs	r3, #1
 8009d3a:	6163      	str	r3, [r4, #20]
 8009d3c:	b002      	add	sp, #8
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	ab01      	add	r3, sp, #4
 8009d42:	466a      	mov	r2, sp
 8009d44:	f7ff ffc8 	bl	8009cd8 <__swhatbuf_r>
 8009d48:	9900      	ldr	r1, [sp, #0]
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f7ff f93b 	bl	8008fc8 <_malloc_r>
 8009d52:	b948      	cbnz	r0, 8009d68 <__smakebuf_r+0x44>
 8009d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d58:	059a      	lsls	r2, r3, #22
 8009d5a:	d4ef      	bmi.n	8009d3c <__smakebuf_r+0x18>
 8009d5c:	f023 0303 	bic.w	r3, r3, #3
 8009d60:	f043 0302 	orr.w	r3, r3, #2
 8009d64:	81a3      	strh	r3, [r4, #12]
 8009d66:	e7e3      	b.n	8009d30 <__smakebuf_r+0xc>
 8009d68:	4b0d      	ldr	r3, [pc, #52]	; (8009da0 <__smakebuf_r+0x7c>)
 8009d6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	6020      	str	r0, [r4, #0]
 8009d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	9b00      	ldr	r3, [sp, #0]
 8009d78:	6163      	str	r3, [r4, #20]
 8009d7a:	9b01      	ldr	r3, [sp, #4]
 8009d7c:	6120      	str	r0, [r4, #16]
 8009d7e:	b15b      	cbz	r3, 8009d98 <__smakebuf_r+0x74>
 8009d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d84:	4630      	mov	r0, r6
 8009d86:	f000 f831 	bl	8009dec <_isatty_r>
 8009d8a:	b128      	cbz	r0, 8009d98 <__smakebuf_r+0x74>
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	f023 0303 	bic.w	r3, r3, #3
 8009d92:	f043 0301 	orr.w	r3, r3, #1
 8009d96:	81a3      	strh	r3, [r4, #12]
 8009d98:	89a0      	ldrh	r0, [r4, #12]
 8009d9a:	4305      	orrs	r5, r0
 8009d9c:	81a5      	strh	r5, [r4, #12]
 8009d9e:	e7cd      	b.n	8009d3c <__smakebuf_r+0x18>
 8009da0:	08009149 	.word	0x08009149

08009da4 <_read_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d07      	ldr	r5, [pc, #28]	; (8009dc4 <_read_r+0x20>)
 8009da8:	4604      	mov	r4, r0
 8009daa:	4608      	mov	r0, r1
 8009dac:	4611      	mov	r1, r2
 8009dae:	2200      	movs	r2, #0
 8009db0:	602a      	str	r2, [r5, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	f7f7 f966 	bl	8001084 <_read>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_read_r+0x1e>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_read_r+0x1e>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	20000968 	.word	0x20000968

08009dc8 <_fstat_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4d07      	ldr	r5, [pc, #28]	; (8009de8 <_fstat_r+0x20>)
 8009dcc:	2300      	movs	r3, #0
 8009dce:	4604      	mov	r4, r0
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	602b      	str	r3, [r5, #0]
 8009dd6:	f7f7 f97e 	bl	80010d6 <_fstat>
 8009dda:	1c43      	adds	r3, r0, #1
 8009ddc:	d102      	bne.n	8009de4 <_fstat_r+0x1c>
 8009dde:	682b      	ldr	r3, [r5, #0]
 8009de0:	b103      	cbz	r3, 8009de4 <_fstat_r+0x1c>
 8009de2:	6023      	str	r3, [r4, #0]
 8009de4:	bd38      	pop	{r3, r4, r5, pc}
 8009de6:	bf00      	nop
 8009de8:	20000968 	.word	0x20000968

08009dec <_isatty_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d06      	ldr	r5, [pc, #24]	; (8009e08 <_isatty_r+0x1c>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	602b      	str	r3, [r5, #0]
 8009df8:	f7f7 f97d 	bl	80010f6 <_isatty>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <_isatty_r+0x1a>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	b103      	cbz	r3, 8009e06 <_isatty_r+0x1a>
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	20000968 	.word	0x20000968

08009e0c <_init>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	bf00      	nop
 8009e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e12:	bc08      	pop	{r3}
 8009e14:	469e      	mov	lr, r3
 8009e16:	4770      	bx	lr

08009e18 <_fini>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr
