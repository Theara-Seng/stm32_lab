
encoder_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08009e18  08009e18  00019e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ef8  08009ef8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009ef8  08009ef8  00019ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f00  08009f00  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f00  08009f00  00019f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f04  08009f04  00019f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008dc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000096c  2000096c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ea39  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000417c  00000000  00000000  0003eaf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001948  00000000  00000000  00042c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c8  00000000  00000000  000445c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026184  00000000  00000000  00045d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fdd8  00000000  00000000  0006bf0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d72c1  00000000  00000000  0008bce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00162fa5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073e0  00000000  00000000  00162ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e00 	.word	0x08009e00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009e00 	.word	0x08009e00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t rot_new_state;
uint32_t rot_old_state;
uint32_t rot_cnt;
uint32_t _write(int file, char* p, int len){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	230a      	movs	r3, #10
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <_write+0x24>)
 800058a:	f004 fe18 	bl	80051be <HAL_UART_Transmit>
	return len;
 800058e:	687b      	ldr	r3, [r7, #4]

}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000230 	.word	0x20000230

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fe2d 	bl	8001200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f831 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f9ff 	bl	80009ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ae:	f000 f897 	bl	80006e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005b2:	f000 f8c3 	bl	800073c <MX_I2S3_Init>
  MX_SPI1_Init();
 80005b6:	f000 f8f1 	bl	800079c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005ba:	f008 f949 	bl	8008850 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f9cb 	bl	8000958 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005c2:	f000 f975 	bl	80008b0 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005c6:	f000 f91f 	bl	8000808 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80005ca:	213c      	movs	r1, #60	; 0x3c
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <main+0x68>)
 80005ce:	f004 fa6a 	bl	8004aa6 <HAL_TIM_Encoder_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005d2:	f008 f963 	bl	800889c <MX_USB_HOST_Process>
    uint32_t last_print = 0, now = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]



	now = HAL_GetTick();
 80005de:	f000 fe75 	bl	80012cc <HAL_GetTick>
 80005e2:	6038      	str	r0, [r7, #0]
	if (now - last_print >= 1000) {
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ee:	d3f0      	bcc.n	80005d2 <main+0x36>
		printf("Encoder counter = %lu", TIM2->CNT);
 80005f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f6:	4619      	mov	r1, r3
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <main+0x6c>)
 80005fa:	f008 fd53 	bl	80090a4 <iprintf>
		last_print = now;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	607b      	str	r3, [r7, #4]
  {
 8000602:	e7e6      	b.n	80005d2 <main+0x36>
 8000604:	200001a0 	.word	0x200001a0
 8000608:	08009e18 	.word	0x08009e18

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f008 fc5a 	bl	8008ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000680:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000684:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068a:	2307      	movs	r3, #7
 800068c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fb00 	bl	8003c98 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069e:	f000 fa83 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2105      	movs	r1, #5
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fd61 	bl	8004188 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006cc:	f000 fa6c 	bl	8000ba8 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <MX_I2C1_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C1_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_I2C1_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_I2C1_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_I2C1_Init+0x50>)
 800071e:	f002 fcd7 	bl	80030d0 <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 fa3e 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000ac 	.word	0x200000ac
 8000734:	40005400 	.word	0x40005400
 8000738:	000186a0 	.word	0x000186a0

0800073c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_I2S3_Init+0x54>)
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <MX_I2S3_Init+0x58>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2S3_Init+0x54>)
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_I2S3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2S3_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_I2S3_Init+0x54>)
 800075c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000760:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_I2S3_Init+0x54>)
 8000764:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <MX_I2S3_Init+0x5c>)
 8000766:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_I2S3_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_I2S3_Init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_I2S3_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_I2S3_Init+0x54>)
 800077c:	f002 fdec 	bl	8003358 <HAL_I2S_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000786:	f000 fa0f 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000100 	.word	0x20000100
 8000794:	40003c00 	.word	0x40003c00
 8000798:	00017700 	.word	0x00017700

0800079c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_SPI1_Init+0x64>)
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <MX_SPI1_Init+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_SPI1_Init+0x64>)
 80007a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_SPI1_Init+0x64>)
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_SPI1_Init+0x64>)
 80007e8:	220a      	movs	r2, #10
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_SPI1_Init+0x64>)
 80007ee:	f004 f82b 	bl	8004848 <HAL_SPI_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 f9d6 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000148 	.word	0x20000148
 8000804:	40013000 	.word	0x40013000

08000808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2224      	movs	r2, #36	; 0x24
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f008 fb5c 	bl	8008ed4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000824:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_TIM2_Init+0xa4>)
 8000826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_TIM2_Init+0xa4>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_TIM2_Init+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_TIM2_Init+0xa4>)
 800083a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800083e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_TIM2_Init+0xa4>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_TIM2_Init+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800084c:	2303      	movs	r3, #3
 800084e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000864:	2301      	movs	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_TIM2_Init+0xa4>)
 8000878:	f004 f86f 	bl	800495a <HAL_TIM_Encoder_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000882:	f000 f991 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_TIM2_Init+0xa4>)
 8000894:	f004 fbb6 	bl	8005004 <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800089e:	f000 f983 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3730      	adds	r7, #48	; 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200001a0 	.word	0x200001a0

080008b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f008 fb08 	bl	8008ed4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <MX_TIM3_Init+0xa0>)
 80008ce:	4a21      	ldr	r2, [pc, #132]	; (8000954 <MX_TIM3_Init+0xa4>)
 80008d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_TIM3_Init+0xa0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_TIM3_Init+0xa0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_TIM3_Init+0xa0>)
 80008e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_TIM3_Init+0xa0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_TIM3_Init+0xa0>)
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008f2:	2303      	movs	r3, #3
 80008f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008fa:	2301      	movs	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800090a:	2301      	movs	r3, #1
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_TIM3_Init+0xa0>)
 800091e:	f004 f81c 	bl	800495a <HAL_TIM_Encoder_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000928:	f000 f93e 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_TIM3_Init+0xa0>)
 800093a:	f004 fb63 	bl	8005004 <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000944:	f000 f930 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3730      	adds	r7, #48	; 0x30
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200001e8 	.word	0x200001e8
 8000954:	40000400 	.word	0x40000400

08000958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_USART2_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000990:	f004 fbc8 	bl	8005124 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f905 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000230 	.word	0x20000230
 80009a8:	40004400 	.word	0x40004400

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	4b72      	ldr	r3, [pc, #456]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a71      	ldr	r2, [pc, #452]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 80009cc:	f043 0310 	orr.w	r3, r3, #16
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b6f      	ldr	r3, [pc, #444]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	4b6b      	ldr	r3, [pc, #428]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a6a      	ldr	r2, [pc, #424]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b68      	ldr	r3, [pc, #416]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b64      	ldr	r3, [pc, #400]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a63      	ldr	r2, [pc, #396]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b61      	ldr	r3, [pc, #388]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b5d      	ldr	r3, [pc, #372]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a5c      	ldr	r2, [pc, #368]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b5a      	ldr	r3, [pc, #360]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b56      	ldr	r3, [pc, #344]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a55      	ldr	r2, [pc, #340]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b53      	ldr	r3, [pc, #332]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b4f      	ldr	r3, [pc, #316]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a4e      	ldr	r2, [pc, #312]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b4c      	ldr	r3, [pc, #304]	; (8000b90 <MX_GPIO_Init+0x1e4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	4849      	ldr	r0, [pc, #292]	; (8000b94 <MX_GPIO_Init+0x1e8>)
 8000a70:	f000 ff0a 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2101      	movs	r1, #1
 8000a78:	4847      	ldr	r0, [pc, #284]	; (8000b98 <MX_GPIO_Init+0x1ec>)
 8000a7a:	f000 ff05 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a84:	4845      	ldr	r0, [pc, #276]	; (8000b9c <MX_GPIO_Init+0x1f0>)
 8000a86:	f000 feff 	bl	8001888 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	483c      	ldr	r0, [pc, #240]	; (8000b94 <MX_GPIO_Init+0x1e8>)
 8000aa2:	f000 fd55 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4836      	ldr	r0, [pc, #216]	; (8000b98 <MX_GPIO_Init+0x1ec>)
 8000abe:	f000 fd47 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	482e      	ldr	r0, [pc, #184]	; (8000b98 <MX_GPIO_Init+0x1ec>)
 8000ade:	f000 fd37 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	482a      	ldr	r0, [pc, #168]	; (8000ba0 <MX_GPIO_Init+0x1f4>)
 8000af8:	f000 fd2a 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000afc:	2304      	movs	r3, #4
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4825      	ldr	r0, [pc, #148]	; (8000ba4 <MX_GPIO_Init+0x1f8>)
 8000b10:	f000 fd1e 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b26:	2305      	movs	r3, #5
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <MX_GPIO_Init+0x1f8>)
 8000b32:	f000 fd0d 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b36:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b3a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4813      	ldr	r0, [pc, #76]	; (8000b9c <MX_GPIO_Init+0x1f0>)
 8000b50:	f000 fcfe 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b54:	2320      	movs	r3, #32
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_GPIO_Init+0x1f0>)
 8000b68:	f000 fcf2 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b70:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_GPIO_Init+0x1e8>)
 8000b82:	f000 fce5 	bl	8001550 <HAL_GPIO_Init>

}
 8000b86:	bf00      	nop
 8000b88:	3730      	adds	r7, #48	; 0x30
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020c00 	.word	0x40020c00
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f000 fc6a 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <HAL_I2C_MspInit+0x84>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12c      	bne.n	8000c80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_I2C_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_I2C_MspInit+0x88>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_I2C_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c48:	2312      	movs	r3, #18
 8000c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c54:	2304      	movs	r3, #4
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <HAL_I2C_MspInit+0x8c>)
 8000c60:	f000 fc76 	bl	8001550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_I2C_MspInit+0x88>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_I2C_MspInit+0x88>)
 8000c6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_I2C_MspInit+0x88>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020400 	.word	0x40020400

08000c94 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08e      	sub	sp, #56	; 0x38
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <HAL_I2S_MspInit+0xf0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d15a      	bne.n	8000d7a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cc8:	23c0      	movs	r3, #192	; 0xc0
 8000cca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 fc77 	bl	80045c8 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ce0:	f7ff ff62 	bl	8000ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <HAL_I2S_MspInit+0xf4>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <HAL_I2S_MspInit+0xf4>)
 8000cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <HAL_I2S_MspInit+0xf4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_I2S_MspInit+0xf4>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <HAL_I2S_MspInit+0xf4>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <HAL_I2S_MspInit+0xf4>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <HAL_I2S_MspInit+0xf4>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <HAL_I2S_MspInit+0xf4>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_I2S_MspInit+0xf4>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	480e      	ldr	r0, [pc, #56]	; (8000d8c <HAL_I2S_MspInit+0xf8>)
 8000d54:	f000 fbfc 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d58:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <HAL_I2S_MspInit+0xfc>)
 8000d76:	f000 fbeb 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3738      	adds	r7, #56	; 0x38
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40003c00 	.word	0x40003c00
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40020800 	.word	0x40020800

08000d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <HAL_SPI_MspInit+0x84>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d12b      	bne.n	8000e0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000dc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_SPI_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dee:	23e0      	movs	r3, #224	; 0xe0
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfe:	2305      	movs	r3, #5
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_SPI_MspInit+0x8c>)
 8000e0a:	f000 fba1 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40013000 	.word	0x40013000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000

08000e24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	; 0x30
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e44:	d135      	bne.n	8000eb2 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	4b43      	ldr	r3, [pc, #268]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a42      	ldr	r2, [pc, #264]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b40      	ldr	r3, [pc, #256]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a3b      	ldr	r2, [pc, #236]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000e7e:	f248 0302 	movw	r3, #32770	; 0x8002
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4830      	ldr	r0, [pc, #192]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x138>)
 8000e9c:	f000 fb58 	bl	8001550 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	201c      	movs	r0, #28
 8000ea6:	f000 fb1c 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eaa:	201c      	movs	r0, #28
 8000eac:	f000 fb35 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eb0:	e04e      	b.n	8000f50 <HAL_TIM_Encoder_MspInit+0x12c>
  else if(htim_encoder->Instance==TIM3)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a2a      	ldr	r2, [pc, #168]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d149      	bne.n	8000f50 <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a24      	ldr	r2, [pc, #144]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x134>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f10:	2340      	movs	r3, #64	; 0x40
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f20:	2302      	movs	r3, #2
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480e      	ldr	r0, [pc, #56]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f2c:	f000 fb10 	bl	8001550 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f30:	2320      	movs	r3, #32
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f40:	2302      	movs	r3, #2
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <HAL_TIM_Encoder_MspInit+0x144>)
 8000f4c:	f000 fb00 	bl	8001550 <HAL_GPIO_Init>
}
 8000f50:	bf00      	nop
 8000f52:	3730      	adds	r7, #48	; 0x30
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40000400 	.word	0x40000400
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020400 	.word	0x40020400

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_UART_MspInit+0x84>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d12b      	bne.n	8000fe6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_UART_MspInit+0x8c>)
 8000fe2:	f000 fab5 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 f92c 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <TIM2_IRQHandler+0x10>)
 8001056:	f003 fdd4 	bl	8004c02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200001a0 	.word	0x200001a0

08001064 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <OTG_FS_IRQHandler+0x10>)
 800106a:	f000 fe91 	bl	8001d90 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000658 	.word	0x20000658

08001078 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	e00a      	b.n	80010a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800108a:	f3af 8000 	nop.w
 800108e:	4601      	mov	r1, r0
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	60ba      	str	r2, [r7, #8]
 8001096:	b2ca      	uxtb	r2, r1
 8001098:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbf0      	blt.n	800108a <_read+0x12>
  }

  return len;
 80010a8:	687b      	ldr	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010da:	605a      	str	r2, [r3, #4]
  return 0;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <_isatty>:

int _isatty(int file)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800114c:	f007 fe88 	bl	8008e60 <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20020000 	.word	0x20020000
 800117c:	00000400 	.word	0x00000400
 8001180:	20000274 	.word	0x20000274
 8001184:	20000970 	.word	0x20000970

08001188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b2:	490e      	ldr	r1, [pc, #56]	; (80011ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b4:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c8:	4c0b      	ldr	r4, [pc, #44]	; (80011f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d6:	f7ff ffd7 	bl	8001188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011da:	f007 fe47 	bl	8008e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011de:	f7ff f9dd 	bl	800059c <main>
  bx  lr    
 80011e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80011f0:	08009f08 	.word	0x08009f08
  ldr r2, =_sbss
 80011f4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80011f8:	2000096c 	.word	0x2000096c

080011fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC_IRQHandler>
	...

08001200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_Init+0x40>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_Init+0x40>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_Init+0x40>)
 8001222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f94f 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	2000      	movs	r0, #0
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fcbe 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023c00 	.word	0x40023c00

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f967 	bl	8001536 <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001280:	f000 f92f 	bl	80014e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000000 	.word	0x20000000
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000278 	.word	0x20000278

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000278 	.word	0x20000278

080012e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff ffee 	bl	80012cc <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012fc:	d005      	beq.n	800130a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_Delay+0x44>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130a:	bf00      	nop
 800130c:	f7ff ffde 	bl	80012cc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f7      	bhi.n	800130c <HAL_Delay+0x28>
  {
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <__NVIC_EnableIRQ+0x38>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff29 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff3e 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff8e 	bl	8001420 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff31 	bl	8001390 <__NVIC_EnableIRQ>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffa2 	bl	8001488 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	e16b      	b.n	8001844 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800156c:	2201      	movs	r2, #1
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	429a      	cmp	r2, r3
 8001586:	f040 815a 	bne.w	800183e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b01      	cmp	r3, #1
 8001594:	d005      	beq.n	80015a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d130      	bne.n	8001604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d8:	2201      	movs	r2, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 0201 	and.w	r2, r3, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b03      	cmp	r3, #3
 800160e:	d017      	beq.n	8001640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d123      	bne.n	8001694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	08da      	lsrs	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3208      	adds	r2, #8
 8001654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	220f      	movs	r2, #15
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	69b9      	ldr	r1, [r7, #24]
 8001690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0203 	and.w	r2, r3, #3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80b4 	beq.w	800183e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b60      	ldr	r3, [pc, #384]	; (800185c <HAL_GPIO_Init+0x30c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a5f      	ldr	r2, [pc, #380]	; (800185c <HAL_GPIO_Init+0x30c>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HAL_GPIO_Init+0x30c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f2:	4a5b      	ldr	r2, [pc, #364]	; (8001860 <HAL_GPIO_Init+0x310>)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	3302      	adds	r3, #2
 80016fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	220f      	movs	r2, #15
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a52      	ldr	r2, [pc, #328]	; (8001864 <HAL_GPIO_Init+0x314>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d02b      	beq.n	8001776 <HAL_GPIO_Init+0x226>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a51      	ldr	r2, [pc, #324]	; (8001868 <HAL_GPIO_Init+0x318>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d025      	beq.n	8001772 <HAL_GPIO_Init+0x222>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a50      	ldr	r2, [pc, #320]	; (800186c <HAL_GPIO_Init+0x31c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d01f      	beq.n	800176e <HAL_GPIO_Init+0x21e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <HAL_GPIO_Init+0x320>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d019      	beq.n	800176a <HAL_GPIO_Init+0x21a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_GPIO_Init+0x324>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0x216>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4d      	ldr	r2, [pc, #308]	; (8001878 <HAL_GPIO_Init+0x328>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00d      	beq.n	8001762 <HAL_GPIO_Init+0x212>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4c      	ldr	r2, [pc, #304]	; (800187c <HAL_GPIO_Init+0x32c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d007      	beq.n	800175e <HAL_GPIO_Init+0x20e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4b      	ldr	r2, [pc, #300]	; (8001880 <HAL_GPIO_Init+0x330>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_GPIO_Init+0x20a>
 8001756:	2307      	movs	r3, #7
 8001758:	e00e      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800175a:	2308      	movs	r3, #8
 800175c:	e00c      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800175e:	2306      	movs	r3, #6
 8001760:	e00a      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001762:	2305      	movs	r3, #5
 8001764:	e008      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001766:	2304      	movs	r3, #4
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800176a:	2303      	movs	r3, #3
 800176c:	e004      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800176e:	2302      	movs	r3, #2
 8001770:	e002      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001776:	2300      	movs	r3, #0
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f002 0203 	and.w	r2, r2, #3
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	4093      	lsls	r3, r2
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001788:	4935      	ldr	r1, [pc, #212]	; (8001860 <HAL_GPIO_Init+0x310>)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_GPIO_Init+0x334>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ba:	4a32      	ldr	r2, [pc, #200]	; (8001884 <HAL_GPIO_Init+0x334>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c0:	4b30      	ldr	r3, [pc, #192]	; (8001884 <HAL_GPIO_Init+0x334>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e4:	4a27      	ldr	r2, [pc, #156]	; (8001884 <HAL_GPIO_Init+0x334>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_GPIO_Init+0x334>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800180e:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_GPIO_Init+0x334>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_GPIO_Init+0x334>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001838:	4a12      	ldr	r2, [pc, #72]	; (8001884 <HAL_GPIO_Init+0x334>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	f67f ae90 	bls.w	800156c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40013800 	.word	0x40013800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020400 	.word	0x40020400
 800186c:	40020800 	.word	0x40020800
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40021000 	.word	0x40021000
 8001878:	40021400 	.word	0x40021400
 800187c:	40021800 	.word	0x40021800
 8001880:	40021c00 	.word	0x40021c00
 8001884:	40013c00 	.word	0x40013c00

08001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
 8001894:	4613      	mov	r3, r2
 8001896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a4:	e003      	b.n	80018ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	041a      	lsls	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	619a      	str	r2, [r3, #24]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018bc:	b08f      	sub	sp, #60	; 0x3c
 80018be:	af0a      	add	r7, sp, #40	; 0x28
 80018c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e054      	b.n	8001976 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f007 f810 	bl	800890c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2203      	movs	r2, #3
 80018f0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f004 f83e 	bl	800598c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	687e      	ldr	r6, [r7, #4]
 8001918:	466d      	mov	r5, sp
 800191a:	f106 0410 	add.w	r4, r6, #16
 800191e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800192a:	e885 0003 	stmia.w	r5, {r0, r1}
 800192e:	1d33      	adds	r3, r6, #4
 8001930:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001932:	6838      	ldr	r0, [r7, #0]
 8001934:	f003 ffb8 	bl	80058a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f004 f835 	bl	80059ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	687e      	ldr	r6, [r7, #4]
 800194c:	466d      	mov	r5, sp
 800194e:	f106 0410 	add.w	r4, r6, #16
 8001952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800195e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001962:	1d33      	adds	r3, r6, #4
 8001964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001966:	6838      	ldr	r0, [r7, #0]
 8001968:	f004 f9be 	bl	8005ce8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800197e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800197e:	b590      	push	{r4, r7, lr}
 8001980:	b089      	sub	sp, #36	; 0x24
 8001982:	af04      	add	r7, sp, #16
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	4608      	mov	r0, r1
 8001988:	4611      	mov	r1, r2
 800198a:	461a      	mov	r2, r3
 800198c:	4603      	mov	r3, r0
 800198e:	70fb      	strb	r3, [r7, #3]
 8001990:	460b      	mov	r3, r1
 8001992:	70bb      	strb	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_HCD_HC_Init+0x28>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e076      	b.n	8001a94 <HAL_HCD_HC_Init+0x116>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	333d      	adds	r3, #61	; 0x3d
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	212c      	movs	r1, #44	; 0x2c
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	3338      	adds	r3, #56	; 0x38
 80019ce:	787a      	ldrb	r2, [r7, #1]
 80019d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	212c      	movs	r1, #44	; 0x2c
 80019d8:	fb01 f303 	mul.w	r3, r1, r3
 80019dc:	4413      	add	r3, r2
 80019de:	3340      	adds	r3, #64	; 0x40
 80019e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019e2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	212c      	movs	r1, #44	; 0x2c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	3339      	adds	r3, #57	; 0x39
 80019f2:	78fa      	ldrb	r2, [r7, #3]
 80019f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	212c      	movs	r1, #44	; 0x2c
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	333f      	adds	r3, #63	; 0x3f
 8001a04:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	78ba      	ldrb	r2, [r7, #2]
 8001a0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a12:	b2d0      	uxtb	r0, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	212c      	movs	r1, #44	; 0x2c
 8001a18:	fb01 f303 	mul.w	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	333a      	adds	r3, #58	; 0x3a
 8001a20:	4602      	mov	r2, r0
 8001a22:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da09      	bge.n	8001a40 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	333b      	adds	r3, #59	; 0x3b
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e008      	b.n	8001a52 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	212c      	movs	r1, #44	; 0x2c
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	333b      	adds	r3, #59	; 0x3b
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	212c      	movs	r1, #44	; 0x2c
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	333c      	adds	r3, #60	; 0x3c
 8001a60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a64:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	787c      	ldrb	r4, [r7, #1]
 8001a6c:	78ba      	ldrb	r2, [r7, #2]
 8001a6e:	78f9      	ldrb	r1, [r7, #3]
 8001a70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	4623      	mov	r3, r4
 8001a82:	f004 fab7 	bl	8005ff4 <USB_HC_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd90      	pop	{r4, r7, pc}

08001a9c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_HCD_HC_Halt+0x1e>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e00f      	b.n	8001ada <HAL_HCD_HC_Halt+0x3e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f004 fd07 	bl	80064de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	70fb      	strb	r3, [r7, #3]
 8001af6:	460b      	mov	r3, r1
 8001af8:	70bb      	strb	r3, [r7, #2]
 8001afa:	4613      	mov	r3, r2
 8001afc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	212c      	movs	r1, #44	; 0x2c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	333b      	adds	r3, #59	; 0x3b
 8001b0c:	78ba      	ldrb	r2, [r7, #2]
 8001b0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	333f      	adds	r3, #63	; 0x3f
 8001b1e:	787a      	ldrb	r2, [r7, #1]
 8001b20:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b22:	7c3b      	ldrb	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d112      	bne.n	8001b4e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3342      	adds	r3, #66	; 0x42
 8001b36:	2203      	movs	r2, #3
 8001b38:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	212c      	movs	r1, #44	; 0x2c
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	333d      	adds	r3, #61	; 0x3d
 8001b48:	7f3a      	ldrb	r2, [r7, #28]
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	e008      	b.n	8001b60 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	212c      	movs	r1, #44	; 0x2c
 8001b54:	fb01 f303 	mul.w	r3, r1, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	3342      	adds	r3, #66	; 0x42
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	f200 80c6 	bhi.w	8001cf4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001ce1 	.word	0x08001ce1
 8001b78:	08001be5 	.word	0x08001be5
 8001b7c:	08001c63 	.word	0x08001c63
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b80:	7c3b      	ldrb	r3, [r7, #16]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	f040 80b8 	bne.w	8001cf8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b88:	78bb      	ldrb	r3, [r7, #2]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 80b4 	bne.w	8001cf8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b90:	8b3b      	ldrh	r3, [r7, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d108      	bne.n	8001ba8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3355      	adds	r3, #85	; 0x55
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3355      	adds	r3, #85	; 0x55
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	212c      	movs	r1, #44	; 0x2c
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3342      	adds	r3, #66	; 0x42
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bce:	e093      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	212c      	movs	r1, #44	; 0x2c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3342      	adds	r3, #66	; 0x42
 8001bde:	2202      	movs	r2, #2
 8001be0:	701a      	strb	r2, [r3, #0]
      break;
 8001be2:	e089      	b.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001be4:	78bb      	ldrb	r3, [r7, #2]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d11d      	bne.n	8001c26 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	212c      	movs	r1, #44	; 0x2c
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3355      	adds	r3, #85	; 0x55
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	212c      	movs	r1, #44	; 0x2c
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	3342      	adds	r3, #66	; 0x42
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c10:	e073      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	212c      	movs	r1, #44	; 0x2c
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3342      	adds	r3, #66	; 0x42
 8001c20:	2202      	movs	r2, #2
 8001c22:	701a      	strb	r2, [r3, #0]
      break;
 8001c24:	e069      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	3354      	adds	r3, #84	; 0x54
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	3342      	adds	r3, #66	; 0x42
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
      break;
 8001c4c:	e055      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	3342      	adds	r3, #66	; 0x42
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	701a      	strb	r2, [r3, #0]
      break;
 8001c60:	e04b      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c62:	78bb      	ldrb	r3, [r7, #2]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d11d      	bne.n	8001ca4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3355      	adds	r3, #85	; 0x55
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	212c      	movs	r1, #44	; 0x2c
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	3342      	adds	r3, #66	; 0x42
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c8e:	e034      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	212c      	movs	r1, #44	; 0x2c
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3342      	adds	r3, #66	; 0x42
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	701a      	strb	r2, [r3, #0]
      break;
 8001ca2:	e02a      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3354      	adds	r3, #84	; 0x54
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	212c      	movs	r1, #44	; 0x2c
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3342      	adds	r3, #66	; 0x42
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
      break;
 8001cca:	e016      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	212c      	movs	r1, #44	; 0x2c
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3342      	adds	r3, #66	; 0x42
 8001cda:	2202      	movs	r2, #2
 8001cdc:	701a      	strb	r2, [r3, #0]
      break;
 8001cde:	e00c      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	212c      	movs	r1, #44	; 0x2c
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	3342      	adds	r3, #66	; 0x42
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
      break;
 8001cf2:	e002      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001cf4:	bf00      	nop
 8001cf6:	e000      	b.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001cf8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	212c      	movs	r1, #44	; 0x2c
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	3344      	adds	r3, #68	; 0x44
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	8b3a      	ldrh	r2, [r7, #24]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	202c      	movs	r0, #44	; 0x2c
 8001d14:	fb00 f303 	mul.w	r3, r0, r3
 8001d18:	440b      	add	r3, r1
 8001d1a:	334c      	adds	r3, #76	; 0x4c
 8001d1c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	212c      	movs	r1, #44	; 0x2c
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3360      	adds	r3, #96	; 0x60
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3350      	adds	r3, #80	; 0x50
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	212c      	movs	r1, #44	; 0x2c
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3339      	adds	r3, #57	; 0x39
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3361      	adds	r3, #97	; 0x61
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	222c      	movs	r2, #44	; 0x2c
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	3338      	adds	r3, #56	; 0x38
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	18d1      	adds	r1, r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f004 fa5a 	bl	8006238 <USB_HC_StartXfer>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop

08001d90 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 ff5b 	bl	8005c62 <USB_GetMode>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	f040 80f6 	bne.w	8001fa0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 ff3f 	bl	8005c3c <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80ec 	beq.w	8001f9e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 ff36 	bl	8005c3c <USB_ReadInterrupts>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dda:	d104      	bne.n	8001de6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001de4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f003 ff26 	bl	8005c3c <USB_ReadInterrupts>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dfa:	d104      	bne.n	8001e06 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 ff16 	bl	8005c3c <USB_ReadInterrupts>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e1a:	d104      	bne.n	8001e26 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 ff06 	bl	8005c3c <USB_ReadInterrupts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d103      	bne.n	8001e42 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 fef8 	bl	8005c3c <USB_ReadInterrupts>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e56:	d11c      	bne.n	8001e92 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e60:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10f      	bne.n	8001e92 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e72:	2110      	movs	r1, #16
 8001e74:	6938      	ldr	r0, [r7, #16]
 8001e76:	f003 fde7 	bl	8005a48 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e7a:	6938      	ldr	r0, [r7, #16]
 8001e7c:	f003 fe18 	bl	8005ab0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2101      	movs	r1, #1
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 ffee 	bl	8005e68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f006 fdbb 	bl	8008a08 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 fed0 	bl	8005c3c <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea6:	d102      	bne.n	8001eae <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f001 f89e 	bl	8002fea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 fec2 	bl	8005c3c <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d106      	bne.n	8001ed0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f006 fd84 	bl	80089d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 feb1 	bl	8005c3c <USB_ReadInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d101      	bne.n	8001ee8 <HAL_HCD_IRQHandler+0x158>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_HCD_IRQHandler+0x15a>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d012      	beq.n	8001f14 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699a      	ldr	r2, [r3, #24]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0210 	bic.w	r2, r2, #16
 8001efc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 ffa1 	bl	8002e46 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0210 	orr.w	r2, r2, #16
 8001f12:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fe8f 	bl	8005c3c <USB_ReadInterrupts>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f28:	d13a      	bne.n	8001fa0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 fac4 	bl	80064bc <USB_HC_ReadInterrupt>
 8001f34:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e025      	b.n	8001f88 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d018      	beq.n	8001f82 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f66:	d106      	bne.n	8001f76 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8ab 	bl	80020ca <HCD_HC_IN_IRQHandler>
 8001f74:	e005      	b.n	8001f82 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fbf9 	bl	8002774 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3d4      	bcc.n	8001f3c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f9a:	615a      	str	r2, [r3, #20]
 8001f9c:	e000      	b.n	8001fa0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f9e:	bf00      	nop
    }
  }
}
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_HCD_Start+0x16>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e013      	b.n	8001fe4 <HAL_HCD_Start+0x3e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 ffb0 	bl	8005f30 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 fcc8 	bl	800596a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_HCD_Stop+0x16>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e00d      	b.n	800201e <HAL_HCD_Stop+0x32>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fb9e 	bl	8006750 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f003 ff52 	bl	8005edc <USB_ResetPort>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3360      	adds	r3, #96	; 0x60
 800205c:	781b      	ldrb	r3, [r3, #0]
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	3350      	adds	r3, #80	; 0x50
 8002084:	681b      	ldr	r3, [r3, #0]
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 ff96 	bl	8005fd0 <USB_GetCurrentFrame>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 ff71 	bl	8005fa2 <USB_GetHostSpeed>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d11a      	bne.n	8002130 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	461a      	mov	r2, r3
 8002108:	2304      	movs	r3, #4
 800210a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3361      	adds	r3, #97	; 0x61
 800211a:	2206      	movs	r2, #6
 800211c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f004 f9d8 	bl	80064de <USB_HC_Halt>
 800212e:	e0af      	b.n	8002290 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002146:	d11b      	bne.n	8002180 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	461a      	mov	r2, r3
 8002156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800215a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3361      	adds	r3, #97	; 0x61
 800216a:	2207      	movs	r2, #7
 800216c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f004 f9b0 	bl	80064de <USB_HC_Halt>
 800217e:	e087      	b.n	8002290 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b20      	cmp	r3, #32
 8002194:	d109      	bne.n	80021aa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a2:	461a      	mov	r2, r3
 80021a4:	2320      	movs	r3, #32
 80021a6:	6093      	str	r3, [r2, #8]
 80021a8:	e072      	b.n	8002290 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d11a      	bne.n	80021f6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	461a      	mov	r2, r3
 80021ce:	2308      	movs	r3, #8
 80021d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	3361      	adds	r3, #97	; 0x61
 80021e0:	2205      	movs	r2, #5
 80021e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 f975 	bl	80064de <USB_HC_Halt>
 80021f4:	e04c      	b.n	8002290 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220c:	d11b      	bne.n	8002246 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221a:	461a      	mov	r2, r3
 800221c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002220:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	212c      	movs	r1, #44	; 0x2c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	3361      	adds	r3, #97	; 0x61
 8002230:	2208      	movs	r2, #8
 8002232:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f004 f94d 	bl	80064de <USB_HC_Halt>
 8002244:	e024      	b.n	8002290 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002258:	2b80      	cmp	r3, #128	; 0x80
 800225a:	d119      	bne.n	8002290 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	461a      	mov	r2, r3
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	3361      	adds	r3, #97	; 0x61
 800227c:	2206      	movs	r2, #6
 800227e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f004 f927 	bl	80064de <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a6:	d112      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 f913 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	461a      	mov	r2, r3
 80022c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022cc:	e24e      	b.n	800276c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	f040 80df 	bne.w	80024a4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d019      	beq.n	8002322 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	3348      	adds	r3, #72	; 0x48
 80022fc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	0159      	lsls	r1, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	440b      	add	r3, r1
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002310:	1ad2      	subs	r2, r2, r3
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	202c      	movs	r0, #44	; 0x2c
 8002318:	fb00 f303 	mul.w	r3, r0, r3
 800231c:	440b      	add	r3, r1
 800231e:	3350      	adds	r3, #80	; 0x50
 8002320:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3361      	adds	r3, #97	; 0x61
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	335c      	adds	r3, #92	; 0x5c
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4413      	add	r3, r2
 800234e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002352:	461a      	mov	r2, r3
 8002354:	2301      	movs	r3, #1
 8002356:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	333f      	adds	r3, #63	; 0x3f
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d009      	beq.n	8002380 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	333f      	adds	r3, #63	; 0x3f
 800237a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800237c:	2b02      	cmp	r3, #2
 800237e:	d111      	bne.n	80023a4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f004 f8a7 	bl	80064de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	461a      	mov	r2, r3
 800239e:	2310      	movs	r3, #16
 80023a0:	6093      	str	r3, [r2, #8]
 80023a2:	e03a      	b.n	800241a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	333f      	adds	r3, #63	; 0x3f
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d009      	beq.n	80023cc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	333f      	adds	r3, #63	; 0x3f
 80023c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d126      	bne.n	800241a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	0151      	lsls	r1, r2, #5
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	440a      	add	r2, r1
 80023e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023ea:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	3360      	adds	r3, #96	; 0x60
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	b2d9      	uxtb	r1, r3
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	202c      	movs	r0, #44	; 0x2c
 8002408:	fb00 f303 	mul.w	r3, r0, r3
 800240c:	4413      	add	r3, r2
 800240e:	3360      	adds	r3, #96	; 0x60
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f006 fb05 	bl	8008a24 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d12b      	bne.n	800247a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	3348      	adds	r3, #72	; 0x48
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	202c      	movs	r0, #44	; 0x2c
 8002438:	fb00 f202 	mul.w	r2, r0, r2
 800243c:	440a      	add	r2, r1
 800243e:	3240      	adds	r2, #64	; 0x40
 8002440:	8812      	ldrh	r2, [r2, #0]
 8002442:	fbb3 f3f2 	udiv	r3, r3, r2
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 818e 	beq.w	800276c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	3354      	adds	r3, #84	; 0x54
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	f083 0301 	eor.w	r3, r3, #1
 8002464:	b2d8      	uxtb	r0, r3
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3354      	adds	r3, #84	; 0x54
 8002474:	4602      	mov	r2, r0
 8002476:	701a      	strb	r2, [r3, #0]
}
 8002478:	e178      	b.n	800276c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3354      	adds	r3, #84	; 0x54
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f083 0301 	eor.w	r3, r3, #1
 800248e:	b2d8      	uxtb	r0, r3
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	3354      	adds	r3, #84	; 0x54
 800249e:	4602      	mov	r2, r0
 80024a0:	701a      	strb	r2, [r3, #0]
}
 80024a2:	e163      	b.n	800276c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	f040 80f6 	bne.w	80026a8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3361      	adds	r3, #97	; 0x61
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d109      	bne.n	80024e4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3360      	adds	r3, #96	; 0x60
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e0c9      	b.n	8002678 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3361      	adds	r3, #97	; 0x61
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d109      	bne.n	800250c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	3360      	adds	r3, #96	; 0x60
 8002506:	2205      	movs	r2, #5
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e0b5      	b.n	8002678 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3361      	adds	r3, #97	; 0x61
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b06      	cmp	r3, #6
 800251e:	d009      	beq.n	8002534 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	3361      	adds	r3, #97	; 0x61
 800252e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002530:	2b08      	cmp	r3, #8
 8002532:	d150      	bne.n	80025d6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	335c      	adds	r3, #92	; 0x5c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	202c      	movs	r0, #44	; 0x2c
 800254c:	fb00 f303 	mul.w	r3, r0, r3
 8002550:	440b      	add	r3, r1
 8002552:	335c      	adds	r3, #92	; 0x5c
 8002554:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	335c      	adds	r3, #92	; 0x5c
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d912      	bls.n	8002590 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3360      	adds	r3, #96	; 0x60
 800258a:	2204      	movs	r2, #4
 800258c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800258e:	e073      	b.n	8002678 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3360      	adds	r3, #96	; 0x60
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025b8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025c0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	461a      	mov	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025d4:	e050      	b.n	8002678 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3361      	adds	r3, #97	; 0x61
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d122      	bne.n	8002630 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	3360      	adds	r3, #96	; 0x60
 80025f8:	2202      	movs	r2, #2
 80025fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4413      	add	r3, r2
 8002604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002612:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800261a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	461a      	mov	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e023      	b.n	8002678 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	212c      	movs	r1, #44	; 0x2c
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	3361      	adds	r3, #97	; 0x61
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b07      	cmp	r3, #7
 8002642:	d119      	bne.n	8002678 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	335c      	adds	r3, #92	; 0x5c
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	202c      	movs	r0, #44	; 0x2c
 800265c:	fb00 f303 	mul.w	r3, r0, r3
 8002660:	440b      	add	r3, r1
 8002662:	335c      	adds	r3, #92	; 0x5c
 8002664:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3360      	adds	r3, #96	; 0x60
 8002674:	2204      	movs	r2, #4
 8002676:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	461a      	mov	r2, r3
 8002686:	2302      	movs	r3, #2
 8002688:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	b2d9      	uxtb	r1, r3
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	202c      	movs	r0, #44	; 0x2c
 8002694:	fb00 f303 	mul.w	r3, r0, r3
 8002698:	4413      	add	r3, r2
 800269a:	3360      	adds	r3, #96	; 0x60
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f006 f9bf 	bl	8008a24 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026a6:	e061      	b.n	800276c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d156      	bne.n	800276c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	333f      	adds	r3, #63	; 0x3f
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d111      	bne.n	80026f6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	335c      	adds	r3, #92	; 0x5c
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 fef5 	bl	80064de <USB_HC_Halt>
 80026f4:	e031      	b.n	800275a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	333f      	adds	r3, #63	; 0x3f
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	333f      	adds	r3, #63	; 0x3f
 8002718:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800271a:	2b02      	cmp	r3, #2
 800271c:	d11d      	bne.n	800275a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	335c      	adds	r3, #92	; 0x5c
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d110      	bne.n	800275a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3361      	adds	r3, #97	; 0x61
 8002746:	2203      	movs	r2, #3
 8002748:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fec2 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002766:	461a      	mov	r2, r3
 8002768:	2310      	movs	r3, #16
 800276a:	6093      	str	r3, [r2, #8]
}
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d11a      	bne.n	80027da <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	461a      	mov	r2, r3
 80027b2:	2304      	movs	r3, #4
 80027b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	3361      	adds	r3, #97	; 0x61
 80027c4:	2206      	movs	r2, #6
 80027c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 fe83 	bl	80064de <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80027d8:	e331      	b.n	8002e3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d12e      	bne.n	800284e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	461a      	mov	r2, r3
 80027fe:	2320      	movs	r3, #32
 8002800:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	333d      	adds	r3, #61	; 0x3d
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	f040 8313 	bne.w	8002e3e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	333d      	adds	r3, #61	; 0x3d
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	3360      	adds	r3, #96	; 0x60
 8002838:	2202      	movs	r2, #2
 800283a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fe49 	bl	80064de <USB_HC_Halt>
}
 800284c:	e2f7      	b.n	8002e3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002864:	d112      	bne.n	800288c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	461a      	mov	r2, r3
 8002874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002878:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f003 fe2a 	bl	80064de <USB_HC_Halt>
}
 800288a:	e2d8      	b.n	8002e3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d140      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	335c      	adds	r3, #92	; 0x5c
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	d111      	bne.n	80028ee <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	333d      	adds	r3, #61	; 0x3d
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	461a      	mov	r2, r3
 80028ea:	2340      	movs	r3, #64	; 0x40
 80028ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	461a      	mov	r2, r3
 80028fc:	2301      	movs	r3, #1
 80028fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3361      	adds	r3, #97	; 0x61
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f003 fdde 	bl	80064de <USB_HC_Halt>
}
 8002922:	e28c      	b.n	8002e3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	d12c      	bne.n	8002994 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3361      	adds	r3, #97	; 0x61
 8002948:	2204      	movs	r2, #4
 800294a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	333d      	adds	r3, #61	; 0x3d
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	335c      	adds	r3, #92	; 0x5c
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f003 fdaf 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	461a      	mov	r2, r3
 800298e:	2340      	movs	r3, #64	; 0x40
 8002990:	6093      	str	r3, [r2, #8]
}
 8002992:	e254      	b.n	8002e3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d11a      	bne.n	80029e0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	461a      	mov	r2, r3
 80029b8:	2308      	movs	r3, #8
 80029ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	3361      	adds	r3, #97	; 0x61
 80029ca:	2205      	movs	r2, #5
 80029cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 fd80 	bl	80064de <USB_HC_Halt>
}
 80029de:	e22e      	b.n	8002e3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d140      	bne.n	8002a78 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	335c      	adds	r3, #92	; 0x5c
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3361      	adds	r3, #97	; 0x61
 8002a16:	2203      	movs	r2, #3
 8002a18:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	333d      	adds	r3, #61	; 0x3d
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d112      	bne.n	8002a54 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	333c      	adds	r3, #60	; 0x3c
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d108      	bne.n	8002a54 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	333d      	adds	r3, #61	; 0x3d
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 fd3d 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	461a      	mov	r2, r3
 8002a72:	2310      	movs	r3, #16
 8002a74:	6093      	str	r3, [r2, #8]
}
 8002a76:	e1e2      	b.n	8002e3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b80      	cmp	r3, #128	; 0x80
 8002a8c:	d164      	bne.n	8002b58 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d111      	bne.n	8002aba <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3361      	adds	r3, #97	; 0x61
 8002aa4:	2206      	movs	r2, #6
 8002aa6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fd13 	bl	80064de <USB_HC_Halt>
 8002ab8:	e044      	b.n	8002b44 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	335c      	adds	r3, #92	; 0x5c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	202c      	movs	r0, #44	; 0x2c
 8002ad2:	fb00 f303 	mul.w	r3, r0, r3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	335c      	adds	r3, #92	; 0x5c
 8002ada:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	335c      	adds	r3, #92	; 0x5c
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d920      	bls.n	8002b32 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	335c      	adds	r3, #92	; 0x5c
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3360      	adds	r3, #96	; 0x60
 8002b10:	2204      	movs	r2, #4
 8002b12:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	b2d9      	uxtb	r1, r3
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	202c      	movs	r0, #44	; 0x2c
 8002b1e:	fb00 f303 	mul.w	r3, r0, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3360      	adds	r3, #96	; 0x60
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f005 ff7a 	bl	8008a24 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b30:	e008      	b.n	8002b44 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3360      	adds	r3, #96	; 0x60
 8002b40:	2202      	movs	r2, #2
 8002b42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	461a      	mov	r2, r3
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	6093      	str	r3, [r2, #8]
}
 8002b56:	e172      	b.n	8002e3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6e:	d11b      	bne.n	8002ba8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3361      	adds	r3, #97	; 0x61
 8002b7e:	2208      	movs	r2, #8
 8002b80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 fca6 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba4:	6093      	str	r3, [r2, #8]
}
 8002ba6:	e14a      	b.n	8002e3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	f040 813f 	bne.w	8002e3e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3361      	adds	r3, #97	; 0x61
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d17d      	bne.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3360      	adds	r3, #96	; 0x60
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	333f      	adds	r3, #63	; 0x3f
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d00a      	beq.n	8002c10 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	333f      	adds	r3, #63	; 0x3f
 8002c08:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	f040 8100 	bne.w	8002e10 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d113      	bne.n	8002c40 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3355      	adds	r3, #85	; 0x55
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	f083 0301 	eor.w	r3, r3, #1
 8002c2c:	b2d8      	uxtb	r0, r3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3355      	adds	r3, #85	; 0x55
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	f040 80e3 	bne.w	8002e10 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	334c      	adds	r3, #76	; 0x4c
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80d8 	beq.w	8002e10 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	334c      	adds	r3, #76	; 0x4c
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	202c      	movs	r0, #44	; 0x2c
 8002c76:	fb00 f202 	mul.w	r2, r0, r2
 8002c7a:	440a      	add	r2, r1
 8002c7c:	3240      	adds	r2, #64	; 0x40
 8002c7e:	8812      	ldrh	r2, [r2, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	202c      	movs	r0, #44	; 0x2c
 8002c8a:	fb00 f202 	mul.w	r2, r0, r2
 8002c8e:	440a      	add	r2, r1
 8002c90:	3240      	adds	r2, #64	; 0x40
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80b5 	beq.w	8002e10 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3355      	adds	r3, #85	; 0x55
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	f083 0301 	eor.w	r3, r3, #1
 8002cba:	b2d8      	uxtb	r0, r3
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3355      	adds	r3, #85	; 0x55
 8002cca:	4602      	mov	r2, r0
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	e09f      	b.n	8002e10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3361      	adds	r3, #97	; 0x61
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d109      	bne.n	8002cf8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3360      	adds	r3, #96	; 0x60
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e08b      	b.n	8002e10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3361      	adds	r3, #97	; 0x61
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d109      	bne.n	8002d20 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3360      	adds	r3, #96	; 0x60
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	e077      	b.n	8002e10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3361      	adds	r3, #97	; 0x61
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d109      	bne.n	8002d48 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	3360      	adds	r3, #96	; 0x60
 8002d42:	2205      	movs	r2, #5
 8002d44:	701a      	strb	r2, [r3, #0]
 8002d46:	e063      	b.n	8002e10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3361      	adds	r3, #97	; 0x61
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	d009      	beq.n	8002d70 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	212c      	movs	r1, #44	; 0x2c
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	3361      	adds	r3, #97	; 0x61
 8002d6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d14f      	bne.n	8002e10 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	335c      	adds	r3, #92	; 0x5c
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	202c      	movs	r0, #44	; 0x2c
 8002d88:	fb00 f303 	mul.w	r3, r0, r3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	335c      	adds	r3, #92	; 0x5c
 8002d90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	335c      	adds	r3, #92	; 0x5c
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d912      	bls.n	8002dcc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	335c      	adds	r3, #92	; 0x5c
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3360      	adds	r3, #96	; 0x60
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e021      	b.n	8002e10 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3360      	adds	r3, #96	; 0x60
 8002dda:	2202      	movs	r2, #2
 8002ddc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002df4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dfc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2302      	movs	r3, #2
 8002e20:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	b2d9      	uxtb	r1, r3
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	202c      	movs	r0, #44	; 0x2c
 8002e2c:	fb00 f303 	mul.w	r3, r0, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	3360      	adds	r3, #96	; 0x60
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f005 fdf3 	bl	8008a24 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e3e:	bf00      	nop
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b08a      	sub	sp, #40	; 0x28
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	0c5b      	lsrs	r3, r3, #17
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e7a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d004      	beq.n	8002e8c <HCD_RXQLVL_IRQHandler+0x46>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b05      	cmp	r3, #5
 8002e86:	f000 80a9 	beq.w	8002fdc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e8a:	e0aa      	b.n	8002fe2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80a6 	beq.w	8002fe0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3344      	adds	r3, #68	; 0x44
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 809b 	beq.w	8002fe0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3350      	adds	r3, #80	; 0x50
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	441a      	add	r2, r3
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	202c      	movs	r0, #44	; 0x2c
 8002ec4:	fb00 f303 	mul.w	r3, r0, r3
 8002ec8:	440b      	add	r3, r1
 8002eca:	334c      	adds	r3, #76	; 0x4c
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d87a      	bhi.n	8002fc8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3344      	adds	r3, #68	; 0x44
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	f002 fe4e 	bl	8005b8c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	212c      	movs	r1, #44	; 0x2c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	3344      	adds	r3, #68	; 0x44
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	441a      	add	r2, r3
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	202c      	movs	r0, #44	; 0x2c
 8002f0a:	fb00 f303 	mul.w	r3, r0, r3
 8002f0e:	440b      	add	r3, r1
 8002f10:	3344      	adds	r3, #68	; 0x44
 8002f12:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3350      	adds	r3, #80	; 0x50
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	441a      	add	r2, r3
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	202c      	movs	r0, #44	; 0x2c
 8002f2e:	fb00 f303 	mul.w	r3, r0, r3
 8002f32:	440b      	add	r3, r1
 8002f34:	3350      	adds	r3, #80	; 0x50
 8002f36:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	0cdb      	lsrs	r3, r3, #19
 8002f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f4c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3340      	adds	r3, #64	; 0x40
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d13c      	bne.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d039      	beq.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f82:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f8a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3354      	adds	r3, #84	; 0x54
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	f083 0301 	eor.w	r3, r3, #1
 8002fb2:	b2d8      	uxtb	r0, r3
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3354      	adds	r3, #84	; 0x54
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	701a      	strb	r2, [r3, #0]
      break;
 8002fc6:	e00b      	b.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3360      	adds	r3, #96	; 0x60
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	701a      	strb	r2, [r3, #0]
      break;
 8002fda:	e001      	b.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fdc:	bf00      	nop
 8002fde:	e000      	b.n	8002fe2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fe0:	bf00      	nop
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	3728      	adds	r7, #40	; 0x28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003016:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	d10b      	bne.n	800303a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d102      	bne.n	8003032 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f005 fcdd 	bl	80089ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d132      	bne.n	80030aa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f043 0308 	orr.w	r3, r3, #8
 800304a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d126      	bne.n	80030a4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d113      	bne.n	8003086 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003064:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003068:	d106      	bne.n	8003078 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2102      	movs	r1, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f002 fef9 	bl	8005e68 <USB_InitFSLSPClkSel>
 8003076:	e011      	b.n	800309c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	4618      	mov	r0, r3
 8003080:	f002 fef2 	bl	8005e68 <USB_InitFSLSPClkSel>
 8003084:	e00a      	b.n	800309c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d106      	bne.n	800309c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003094:	461a      	mov	r2, r3
 8003096:	f64e 2360 	movw	r3, #60000	; 0xea60
 800309a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f005 fccf 	bl	8008a40 <HAL_HCD_PortEnabled_Callback>
 80030a2:	e002      	b.n	80030aa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f005 fcd9 	bl	8008a5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d103      	bne.n	80030bc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f043 0320 	orr.w	r3, r3, #32
 80030ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030c2:	461a      	mov	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e12b      	b.n	800333a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd fd84 	bl	8000c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003134:	f001 fa20 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a81      	ldr	r2, [pc, #516]	; (8003344 <HAL_I2C_Init+0x274>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d807      	bhi.n	8003154 <HAL_I2C_Init+0x84>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a80      	ldr	r2, [pc, #512]	; (8003348 <HAL_I2C_Init+0x278>)
 8003148:	4293      	cmp	r3, r2
 800314a:	bf94      	ite	ls
 800314c:	2301      	movls	r3, #1
 800314e:	2300      	movhi	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e006      	b.n	8003162 <HAL_I2C_Init+0x92>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a7d      	ldr	r2, [pc, #500]	; (800334c <HAL_I2C_Init+0x27c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	bf94      	ite	ls
 800315c:	2301      	movls	r3, #1
 800315e:	2300      	movhi	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0e7      	b.n	800333a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a78      	ldr	r2, [pc, #480]	; (8003350 <HAL_I2C_Init+0x280>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9b      	lsrs	r3, r3, #18
 8003174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_I2C_Init+0x274>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d802      	bhi.n	80031a4 <HAL_I2C_Init+0xd4>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3301      	adds	r3, #1
 80031a2:	e009      	b.n	80031b8 <HAL_I2C_Init+0xe8>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	4a69      	ldr	r2, [pc, #420]	; (8003354 <HAL_I2C_Init+0x284>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	3301      	adds	r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	430b      	orrs	r3, r1
 80031be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	495c      	ldr	r1, [pc, #368]	; (8003344 <HAL_I2C_Init+0x274>)
 80031d4:	428b      	cmp	r3, r1
 80031d6:	d819      	bhi.n	800320c <HAL_I2C_Init+0x13c>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e59      	subs	r1, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e6:	1c59      	adds	r1, r3, #1
 80031e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031ec:	400b      	ands	r3, r1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_I2C_Init+0x138>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e59      	subs	r1, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	e051      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003208:	2304      	movs	r3, #4
 800320a:	e04f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d111      	bne.n	8003238 <HAL_I2C_Init+0x168>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	440b      	add	r3, r1
 8003222:	fbb0 f3f3 	udiv	r3, r0, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e012      	b.n	800325e <HAL_I2C_Init+0x18e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	0099      	lsls	r1, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Init+0x196>
 8003262:	2301      	movs	r3, #1
 8003264:	e022      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10e      	bne.n	800328c <HAL_I2C_Init+0x1bc>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1e58      	subs	r0, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	440b      	add	r3, r1
 800327c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	e00f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	0099      	lsls	r1, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	6809      	ldr	r1, [r1, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6911      	ldr	r1, [r2, #16]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	000186a0 	.word	0x000186a0
 8003348:	001e847f 	.word	0x001e847f
 800334c:	003d08ff 	.word	0x003d08ff
 8003350:	431bde83 	.word	0x431bde83
 8003354:	10624dd3 	.word	0x10624dd3

08003358 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e128      	b.n	80035bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a90      	ldr	r2, [pc, #576]	; (80035c4 <HAL_I2S_Init+0x26c>)
 8003382:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7fd fc85 	bl	8000c94 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033a0:	f023 030f 	bic.w	r3, r3, #15
 80033a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2202      	movs	r2, #2
 80033ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d060      	beq.n	8003478 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d102      	bne.n	80033c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033be:	2310      	movs	r3, #16
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e001      	b.n	80033c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d802      	bhi.n	80033d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033d6:	2001      	movs	r0, #1
 80033d8:	f001 f9d8 	bl	800478c <HAL_RCCEx_GetPeriphCLKFreq>
 80033dc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e6:	d125      	bne.n	8003434 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d010      	beq.n	8003412 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	461a      	mov	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	3305      	adds	r3, #5
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e01f      	b.n	8003452 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	fbb2 f2f3 	udiv	r2, r2, r3
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	461a      	mov	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	3305      	adds	r3, #5
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	e00e      	b.n	8003452 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fbb2 f2f3 	udiv	r2, r2, r3
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	461a      	mov	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	3305      	adds	r3, #5
 8003450:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4a5c      	ldr	r2, [pc, #368]	; (80035c8 <HAL_I2S_Init+0x270>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	08db      	lsrs	r3, r3, #3
 800345c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	085b      	lsrs	r3, r3, #1
 800346e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e003      	b.n	8003480 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003478:	2302      	movs	r3, #2
 800347a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d902      	bls.n	800348c <HAL_I2S_Init+0x134>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2bff      	cmp	r3, #255	; 0xff
 800348a:	d907      	bls.n	800349c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	f043 0210 	orr.w	r2, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e08f      	b.n	80035bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	ea42 0103 	orr.w	r1, r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034ba:	f023 030f 	bic.w	r3, r3, #15
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6851      	ldr	r1, [r2, #4]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6892      	ldr	r2, [r2, #8]
 80034c6:	4311      	orrs	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68d2      	ldr	r2, [r2, #12]
 80034cc:	4311      	orrs	r1, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6992      	ldr	r2, [r2, #24]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d161      	bne.n	80035ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a38      	ldr	r2, [pc, #224]	; (80035cc <HAL_I2S_Init+0x274>)
 80034ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <HAL_I2S_Init+0x278>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_I2S_Init+0x1a4>
 80034f8:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <HAL_I2S_Init+0x27c>)
 80034fa:	e001      	b.n	8003500 <HAL_I2S_Init+0x1a8>
 80034fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	4932      	ldr	r1, [pc, #200]	; (80035d0 <HAL_I2S_Init+0x278>)
 8003508:	428a      	cmp	r2, r1
 800350a:	d101      	bne.n	8003510 <HAL_I2S_Init+0x1b8>
 800350c:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <HAL_I2S_Init+0x27c>)
 800350e:	e001      	b.n	8003514 <HAL_I2S_Init+0x1bc>
 8003510:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003514:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003518:	f023 030f 	bic.w	r3, r3, #15
 800351c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2b      	ldr	r2, [pc, #172]	; (80035d0 <HAL_I2S_Init+0x278>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_I2S_Init+0x1d4>
 8003528:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <HAL_I2S_Init+0x27c>)
 800352a:	e001      	b.n	8003530 <HAL_I2S_Init+0x1d8>
 800352c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003530:	2202      	movs	r2, #2
 8003532:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a25      	ldr	r2, [pc, #148]	; (80035d0 <HAL_I2S_Init+0x278>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_I2S_Init+0x1ea>
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_I2S_Init+0x27c>)
 8003540:	e001      	b.n	8003546 <HAL_I2S_Init+0x1ee>
 8003542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003552:	d003      	beq.n	800355c <HAL_I2S_Init+0x204>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d103      	bne.n	8003564 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800355c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	e001      	b.n	8003568 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003572:	4313      	orrs	r3, r2
 8003574:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800357c:	4313      	orrs	r3, r2
 800357e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003586:	4313      	orrs	r3, r2
 8003588:	b29a      	uxth	r2, r3
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	4313      	orrs	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003594:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <HAL_I2S_Init+0x278>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_I2S_Init+0x24c>
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <HAL_I2S_Init+0x27c>)
 80035a2:	e001      	b.n	80035a8 <HAL_I2S_Init+0x250>
 80035a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a8:	897a      	ldrh	r2, [r7, #10]
 80035aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	080036cf 	.word	0x080036cf
 80035c8:	cccccccd 	.word	0xcccccccd
 80035cc:	080037e5 	.word	0x080037e5
 80035d0:	40003800 	.word	0x40003800
 80035d4:	40003400 	.word	0x40003400

080035d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10e      	bne.n	8003668 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003658:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ffb8 	bl	80035d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	b292      	uxth	r2, r2
 8003684:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	1c9a      	adds	r2, r3, #2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10e      	bne.n	80036c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ff93 	bl	80035ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b086      	sub	sp, #24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d13a      	bne.n	8003760 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d109      	bne.n	8003708 <I2S_IRQHandler+0x3a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d102      	bne.n	8003708 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ffb4 	bl	8003670 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d126      	bne.n	8003760 <I2S_IRQHandler+0x92>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d11f      	bne.n	8003760 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800372e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f043 0202 	orr.w	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ff50 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b03      	cmp	r3, #3
 800376a:	d136      	bne.n	80037da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	d109      	bne.n	800378a <I2S_IRQHandler+0xbc>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d102      	bne.n	800378a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff45 	bl	8003614 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b08      	cmp	r3, #8
 8003792:	d122      	bne.n	80037da <I2S_IRQHandler+0x10c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d11b      	bne.n	80037da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f043 0204 	orr.w	r2, r3, #4
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff ff13 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a92      	ldr	r2, [pc, #584]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037fe:	4b92      	ldr	r3, [pc, #584]	; (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003800:	e001      	b.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a8b      	ldr	r2, [pc, #556]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800381c:	4b8a      	ldr	r3, [pc, #552]	; (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800381e:	e001      	b.n	8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003820:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003830:	d004      	beq.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 8099 	bne.w	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f925 	bl	8003aa0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f9c8 	bl	8003c00 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d13a      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d035      	beq.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6e      	ldr	r2, [pc, #440]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800388e:	4b6e      	ldr	r3, [pc, #440]	; (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003890:	e001      	b.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4969      	ldr	r1, [pc, #420]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800389e:	428b      	cmp	r3, r1
 80038a0:	d101      	bne.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038a2:	4b69      	ldr	r3, [pc, #420]	; (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a4:	e001      	b.n	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fe88 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	f040 80c3 	bne.w	8003a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80bd 	beq.w	8003a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003916:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a49      	ldr	r2, [pc, #292]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003922:	4b49      	ldr	r3, [pc, #292]	; (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003924:	e001      	b.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4944      	ldr	r1, [pc, #272]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003932:	428b      	cmp	r3, r1
 8003934:	d101      	bne.n	800393a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003936:	4b44      	ldr	r3, [pc, #272]	; (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003938:	e001      	b.n	800393e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800393a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003942:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fe4a 	bl	8003600 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800396c:	e089      	b.n	8003a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d107      	bne.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8be 	bl	8003b04 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8fd 	bl	8003b9c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d12f      	bne.n	8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02a      	beq.n	8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1e      	ldr	r2, [pc, #120]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d101      	bne.n	80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039d2:	e001      	b.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4919      	ldr	r1, [pc, #100]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039e0:	428b      	cmp	r3, r1
 80039e2:	d101      	bne.n	80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039e4:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039e6:	e001      	b.n	80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	f043 0202 	orr.w	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff fdfa 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d136      	bne.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d031      	beq.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a07      	ldr	r2, [pc, #28]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a2c:	e001      	b.n	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4902      	ldr	r1, [pc, #8]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a3a:	428b      	cmp	r3, r1
 8003a3c:	d106      	bne.n	8003a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a3e:	4b02      	ldr	r3, [pc, #8]	; (8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a40:	e006      	b.n	8003a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a42:	bf00      	nop
 8003a44:	40003800 	.word	0x40003800
 8003a48:	40003400 	.word	0x40003400
 8003a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a54:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f043 0204 	orr.w	r2, r3, #4
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fdc0 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a80:	e000      	b.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a82:	bf00      	nop
}
 8003a84:	bf00      	nop
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c99      	adds	r1, r3, #2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6251      	str	r1, [r2, #36]	; 0x24
 8003ab2:	881a      	ldrh	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d113      	bne.n	8003afa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ae0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ffc9 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	1c99      	adds	r1, r3, #2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6251      	str	r1, [r2, #36]	; 0x24
 8003b16:	8819      	ldrh	r1, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <I2SEx_TxISR_I2SExt+0x90>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <I2SEx_TxISR_I2SExt+0x22>
 8003b22:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <I2SEx_TxISR_I2SExt+0x94>)
 8003b24:	e001      	b.n	8003b2a <I2SEx_TxISR_I2SExt+0x26>
 8003b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d121      	bne.n	8003b8a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <I2SEx_TxISR_I2SExt+0x90>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <I2SEx_TxISR_I2SExt+0x50>
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <I2SEx_TxISR_I2SExt+0x94>)
 8003b52:	e001      	b.n	8003b58 <I2SEx_TxISR_I2SExt+0x54>
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	490d      	ldr	r1, [pc, #52]	; (8003b94 <I2SEx_TxISR_I2SExt+0x90>)
 8003b60:	428b      	cmp	r3, r1
 8003b62:	d101      	bne.n	8003b68 <I2SEx_TxISR_I2SExt+0x64>
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <I2SEx_TxISR_I2SExt+0x94>)
 8003b66:	e001      	b.n	8003b6c <I2SEx_TxISR_I2SExt+0x68>
 8003b68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ff81 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40003800 	.word	0x40003800
 8003b98:	40003400 	.word	0x40003400

08003b9c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68d8      	ldr	r0, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	1c99      	adds	r1, r3, #2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bb4:	b282      	uxth	r2, r0
 8003bb6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d113      	bne.n	8003bf8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bde:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff ff4a 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <I2SEx_RxISR_I2SExt+0x90>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d101      	bne.n	8003c16 <I2SEx_RxISR_I2SExt+0x16>
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <I2SEx_RxISR_I2SExt+0x94>)
 8003c14:	e001      	b.n	8003c1a <I2SEx_RxISR_I2SExt+0x1a>
 8003c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1a:	68d8      	ldr	r0, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	1c99      	adds	r1, r3, #2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c26:	b282      	uxth	r2, r0
 8003c28:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d121      	bne.n	8003c86 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <I2SEx_RxISR_I2SExt+0x90>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <I2SEx_RxISR_I2SExt+0x50>
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <I2SEx_RxISR_I2SExt+0x94>)
 8003c4e:	e001      	b.n	8003c54 <I2SEx_RxISR_I2SExt+0x54>
 8003c50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	490d      	ldr	r1, [pc, #52]	; (8003c90 <I2SEx_RxISR_I2SExt+0x90>)
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	d101      	bne.n	8003c64 <I2SEx_RxISR_I2SExt+0x64>
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <I2SEx_RxISR_I2SExt+0x94>)
 8003c62:	e001      	b.n	8003c68 <I2SEx_RxISR_I2SExt+0x68>
 8003c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c6c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d106      	bne.n	8003c86 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff03 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40003800 	.word	0x40003800
 8003c94:	40003400 	.word	0x40003400

08003c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e267      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d075      	beq.n	8003da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cb6:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d00c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc2:	4b85      	ldr	r3, [pc, #532]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d112      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cce:	4b82      	ldr	r3, [pc, #520]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cda:	d10b      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cdc:	4b7e      	ldr	r3, [pc, #504]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d05b      	beq.n	8003da0 <HAL_RCC_OscConfig+0x108>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d157      	bne.n	8003da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e242      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfc:	d106      	bne.n	8003d0c <HAL_RCC_OscConfig+0x74>
 8003cfe:	4b76      	ldr	r3, [pc, #472]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a75      	ldr	r2, [pc, #468]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e01d      	b.n	8003d48 <HAL_RCC_OscConfig+0xb0>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x98>
 8003d16:	4b70      	ldr	r3, [pc, #448]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a6f      	ldr	r2, [pc, #444]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b6d      	ldr	r3, [pc, #436]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a6c      	ldr	r2, [pc, #432]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e00b      	b.n	8003d48 <HAL_RCC_OscConfig+0xb0>
 8003d30:	4b69      	ldr	r3, [pc, #420]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a68      	ldr	r2, [pc, #416]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	4b66      	ldr	r3, [pc, #408]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a65      	ldr	r2, [pc, #404]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fd fabc 	bl	80012cc <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fd fab8 	bl	80012cc <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e207      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6a:	4b5b      	ldr	r3, [pc, #364]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0xc0>
 8003d76:	e014      	b.n	8003da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fd faa8 	bl	80012cc <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d80:	f7fd faa4 	bl	80012cc <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	; 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e1f3      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d92:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0xe8>
 8003d9e:	e000      	b.n	8003da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d063      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dae:	4b4a      	ldr	r3, [pc, #296]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dba:	4b47      	ldr	r3, [pc, #284]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d11c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b44      	ldr	r3, [pc, #272]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d116      	bne.n	8003e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_RCC_OscConfig+0x152>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d001      	beq.n	8003dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e1c7      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dea:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4937      	ldr	r1, [pc, #220]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfe:	e03a      	b.n	8003e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e08:	4b34      	ldr	r3, [pc, #208]	; (8003edc <HAL_RCC_OscConfig+0x244>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fd fa5d 	bl	80012cc <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e16:	f7fd fa59 	bl	80012cc <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e1a8      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e28:	4b2b      	ldr	r3, [pc, #172]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e34:	4b28      	ldr	r3, [pc, #160]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4925      	ldr	r1, [pc, #148]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	600b      	str	r3, [r1, #0]
 8003e48:	e015      	b.n	8003e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_RCC_OscConfig+0x244>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fd fa3c 	bl	80012cc <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e58:	f7fd fa38 	bl	80012cc <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e187      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d036      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d016      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <HAL_RCC_OscConfig+0x248>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd fa1c 	bl	80012cc <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e98:	f7fd fa18 	bl	80012cc <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e167      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCC_OscConfig+0x240>)
 8003eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x200>
 8003eb6:	e01b      	b.n	8003ef0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <HAL_RCC_OscConfig+0x248>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebe:	f7fd fa05 	bl	80012cc <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec4:	e00e      	b.n	8003ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec6:	f7fd fa01 	bl	80012cc <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d907      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e150      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	42470000 	.word	0x42470000
 8003ee0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	4b88      	ldr	r3, [pc, #544]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ea      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8097 	beq.w	800402c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f02:	4b81      	ldr	r3, [pc, #516]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10f      	bne.n	8003f2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	4b7d      	ldr	r3, [pc, #500]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	4a7c      	ldr	r2, [pc, #496]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1e:	4b7a      	ldr	r3, [pc, #488]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f26:	60bb      	str	r3, [r7, #8]
 8003f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	4b77      	ldr	r3, [pc, #476]	; (800410c <HAL_RCC_OscConfig+0x474>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d118      	bne.n	8003f6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3a:	4b74      	ldr	r3, [pc, #464]	; (800410c <HAL_RCC_OscConfig+0x474>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a73      	ldr	r2, [pc, #460]	; (800410c <HAL_RCC_OscConfig+0x474>)
 8003f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f46:	f7fd f9c1 	bl	80012cc <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4e:	f7fd f9bd 	bl	80012cc <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e10c      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f60:	4b6a      	ldr	r3, [pc, #424]	; (800410c <HAL_RCC_OscConfig+0x474>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d106      	bne.n	8003f82 <HAL_RCC_OscConfig+0x2ea>
 8003f74:	4b64      	ldr	r3, [pc, #400]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4a63      	ldr	r2, [pc, #396]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f80:	e01c      	b.n	8003fbc <HAL_RCC_OscConfig+0x324>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x30c>
 8003f8a:	4b5f      	ldr	r3, [pc, #380]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a5e      	ldr	r2, [pc, #376]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	6713      	str	r3, [r2, #112]	; 0x70
 8003f96:	4b5c      	ldr	r3, [pc, #368]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	4a5b      	ldr	r2, [pc, #364]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0x324>
 8003fa4:	4b58      	ldr	r3, [pc, #352]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	4a57      	ldr	r2, [pc, #348]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb0:	4b55      	ldr	r3, [pc, #340]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a54      	ldr	r2, [pc, #336]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f023 0304 	bic.w	r3, r3, #4
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fd f982 	bl	80012cc <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fcc:	f7fd f97e 	bl	80012cc <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e0cb      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe2:	4b49      	ldr	r3, [pc, #292]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0ee      	beq.n	8003fcc <HAL_RCC_OscConfig+0x334>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff0:	f7fd f96c 	bl	80012cc <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fd f968 	bl	80012cc <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0b5      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400e:	4b3e      	ldr	r3, [pc, #248]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1ee      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800401a:	7dfb      	ldrb	r3, [r7, #23]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004020:	4b39      	ldr	r3, [pc, #228]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	4a38      	ldr	r2, [pc, #224]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8004026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80a1 	beq.w	8004178 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004036:	4b34      	ldr	r3, [pc, #208]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b08      	cmp	r3, #8
 8004040:	d05c      	beq.n	80040fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d141      	bne.n	80040ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404a:	4b31      	ldr	r3, [pc, #196]	; (8004110 <HAL_RCC_OscConfig+0x478>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004050:	f7fd f93c 	bl	80012cc <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004058:	f7fd f938 	bl	80012cc <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e087      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406a:	4b27      	ldr	r3, [pc, #156]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	019b      	lsls	r3, r3, #6
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	3b01      	subs	r3, #1
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	061b      	lsls	r3, r3, #24
 800409a:	491b      	ldr	r1, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 800409c:	4313      	orrs	r3, r2
 800409e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <HAL_RCC_OscConfig+0x478>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fd f911 	bl	80012cc <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fd f90d 	bl	80012cc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e05c      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c0:	4b11      	ldr	r3, [pc, #68]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x416>
 80040cc:	e054      	b.n	8004178 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ce:	4b10      	ldr	r3, [pc, #64]	; (8004110 <HAL_RCC_OscConfig+0x478>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fd f8fa 	bl	80012cc <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fd f8f6 	bl	80012cc <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e045      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_RCC_OscConfig+0x470>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x444>
 80040fa:	e03d      	b.n	8004178 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d107      	bne.n	8004114 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e038      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
 8004108:	40023800 	.word	0x40023800
 800410c:	40007000 	.word	0x40007000
 8004110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x4ec>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d028      	beq.n	8004174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d121      	bne.n	8004174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d11a      	bne.n	8004174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004144:	4013      	ands	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800414a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800414c:	4293      	cmp	r3, r2
 800414e:	d111      	bne.n	8004174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	3b01      	subs	r3, #1
 800415e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d107      	bne.n	8004174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800

08004188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0cc      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800419c:	4b68      	ldr	r3, [pc, #416]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d90c      	bls.n	80041c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b65      	ldr	r3, [pc, #404]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b63      	ldr	r3, [pc, #396]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0b8      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d020      	beq.n	8004212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041dc:	4b59      	ldr	r3, [pc, #356]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	4a58      	ldr	r2, [pc, #352]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041f4:	4b53      	ldr	r3, [pc, #332]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4a52      	ldr	r2, [pc, #328]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004200:	4b50      	ldr	r3, [pc, #320]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	494d      	ldr	r1, [pc, #308]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d044      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	4b47      	ldr	r3, [pc, #284]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d119      	bne.n	8004266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e07f      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d003      	beq.n	8004246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004242:	2b03      	cmp	r3, #3
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004246:	4b3f      	ldr	r3, [pc, #252]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e06f      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004256:	4b3b      	ldr	r3, [pc, #236]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e067      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004266:	4b37      	ldr	r3, [pc, #220]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f023 0203 	bic.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4934      	ldr	r1, [pc, #208]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004278:	f7fd f828 	bl	80012cc <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	e00a      	b.n	8004296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f7fd f824 	bl	80012cc <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e04f      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	4b2b      	ldr	r3, [pc, #172]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 020c 	and.w	r2, r3, #12
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1eb      	bne.n	8004280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a8:	4b25      	ldr	r3, [pc, #148]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d20c      	bcs.n	80042d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b22      	ldr	r3, [pc, #136]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e032      	b.n	8004336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4916      	ldr	r1, [pc, #88]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	490e      	ldr	r1, [pc, #56]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800430e:	f000 f821 	bl	8004354 <HAL_RCC_GetSysClockFreq>
 8004312:	4602      	mov	r2, r0
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	490a      	ldr	r1, [pc, #40]	; (8004348 <HAL_RCC_ClockConfig+0x1c0>)
 8004320:	5ccb      	ldrb	r3, [r1, r3]
 8004322:	fa22 f303 	lsr.w	r3, r2, r3
 8004326:	4a09      	ldr	r2, [pc, #36]	; (800434c <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800432a:	4b09      	ldr	r3, [pc, #36]	; (8004350 <HAL_RCC_ClockConfig+0x1c8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fc ff88 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40023c00 	.word	0x40023c00
 8004344:	40023800 	.word	0x40023800
 8004348:	08009e48 	.word	0x08009e48
 800434c:	20000000 	.word	0x20000000
 8004350:	20000004 	.word	0x20000004

08004354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004358:	b094      	sub	sp, #80	; 0x50
 800435a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	647b      	str	r3, [r7, #68]	; 0x44
 8004360:	2300      	movs	r3, #0
 8004362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004364:	2300      	movs	r3, #0
 8004366:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800436c:	4b79      	ldr	r3, [pc, #484]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 030c 	and.w	r3, r3, #12
 8004374:	2b08      	cmp	r3, #8
 8004376:	d00d      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x40>
 8004378:	2b08      	cmp	r3, #8
 800437a:	f200 80e1 	bhi.w	8004540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_RCC_GetSysClockFreq+0x34>
 8004382:	2b04      	cmp	r3, #4
 8004384:	d003      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x3a>
 8004386:	e0db      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004388:	4b73      	ldr	r3, [pc, #460]	; (8004558 <HAL_RCC_GetSysClockFreq+0x204>)
 800438a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800438c:	e0db      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800438e:	4b73      	ldr	r3, [pc, #460]	; (800455c <HAL_RCC_GetSysClockFreq+0x208>)
 8004390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004392:	e0d8      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004394:	4b6f      	ldr	r3, [pc, #444]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800439c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800439e:	4b6d      	ldr	r3, [pc, #436]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d063      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043aa:	4b6a      	ldr	r3, [pc, #424]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	099b      	lsrs	r3, r3, #6
 80043b0:	2200      	movs	r2, #0
 80043b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
 80043be:	2300      	movs	r3, #0
 80043c0:	637b      	str	r3, [r7, #52]	; 0x34
 80043c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043c6:	4622      	mov	r2, r4
 80043c8:	462b      	mov	r3, r5
 80043ca:	f04f 0000 	mov.w	r0, #0
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	0159      	lsls	r1, r3, #5
 80043d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d8:	0150      	lsls	r0, r2, #5
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4621      	mov	r1, r4
 80043e0:	1a51      	subs	r1, r2, r1
 80043e2:	6139      	str	r1, [r7, #16]
 80043e4:	4629      	mov	r1, r5
 80043e6:	eb63 0301 	sbc.w	r3, r3, r1
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f8:	4659      	mov	r1, fp
 80043fa:	018b      	lsls	r3, r1, #6
 80043fc:	4651      	mov	r1, sl
 80043fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004402:	4651      	mov	r1, sl
 8004404:	018a      	lsls	r2, r1, #6
 8004406:	4651      	mov	r1, sl
 8004408:	ebb2 0801 	subs.w	r8, r2, r1
 800440c:	4659      	mov	r1, fp
 800440e:	eb63 0901 	sbc.w	r9, r3, r1
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800441e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004426:	4690      	mov	r8, r2
 8004428:	4699      	mov	r9, r3
 800442a:	4623      	mov	r3, r4
 800442c:	eb18 0303 	adds.w	r3, r8, r3
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	462b      	mov	r3, r5
 8004434:	eb49 0303 	adc.w	r3, r9, r3
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004446:	4629      	mov	r1, r5
 8004448:	024b      	lsls	r3, r1, #9
 800444a:	4621      	mov	r1, r4
 800444c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004450:	4621      	mov	r1, r4
 8004452:	024a      	lsls	r2, r1, #9
 8004454:	4610      	mov	r0, r2
 8004456:	4619      	mov	r1, r3
 8004458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445a:	2200      	movs	r2, #0
 800445c:	62bb      	str	r3, [r7, #40]	; 0x28
 800445e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004464:	f7fb ff04 	bl	8000270 <__aeabi_uldivmod>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4613      	mov	r3, r2
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004470:	e058      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004472:	4b38      	ldr	r3, [pc, #224]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	099b      	lsrs	r3, r3, #6
 8004478:	2200      	movs	r2, #0
 800447a:	4618      	mov	r0, r3
 800447c:	4611      	mov	r1, r2
 800447e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004482:	623b      	str	r3, [r7, #32]
 8004484:	2300      	movs	r3, #0
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
 8004488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800448c:	4642      	mov	r2, r8
 800448e:	464b      	mov	r3, r9
 8004490:	f04f 0000 	mov.w	r0, #0
 8004494:	f04f 0100 	mov.w	r1, #0
 8004498:	0159      	lsls	r1, r3, #5
 800449a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800449e:	0150      	lsls	r0, r2, #5
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4641      	mov	r1, r8
 80044a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044aa:	4649      	mov	r1, r9
 80044ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044c4:	ebb2 040a 	subs.w	r4, r2, sl
 80044c8:	eb63 050b 	sbc.w	r5, r3, fp
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	00eb      	lsls	r3, r5, #3
 80044d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044da:	00e2      	lsls	r2, r4, #3
 80044dc:	4614      	mov	r4, r2
 80044de:	461d      	mov	r5, r3
 80044e0:	4643      	mov	r3, r8
 80044e2:	18e3      	adds	r3, r4, r3
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	464b      	mov	r3, r9
 80044e8:	eb45 0303 	adc.w	r3, r5, r3
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044fa:	4629      	mov	r1, r5
 80044fc:	028b      	lsls	r3, r1, #10
 80044fe:	4621      	mov	r1, r4
 8004500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004504:	4621      	mov	r1, r4
 8004506:	028a      	lsls	r2, r1, #10
 8004508:	4610      	mov	r0, r2
 800450a:	4619      	mov	r1, r3
 800450c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450e:	2200      	movs	r2, #0
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	61fa      	str	r2, [r7, #28]
 8004514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004518:	f7fb feaa 	bl	8000270 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4613      	mov	r3, r2
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCC_GetSysClockFreq+0x200>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	3301      	adds	r3, #1
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800453e:	e002      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_GetSysClockFreq+0x204>)
 8004542:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004548:	4618      	mov	r0, r3
 800454a:	3750      	adds	r7, #80	; 0x50
 800454c:	46bd      	mov	sp, r7
 800454e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800
 8004558:	00f42400 	.word	0x00f42400
 800455c:	007a1200 	.word	0x007a1200

08004560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <HAL_RCC_GetHCLKFreq+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000000 	.word	0x20000000

08004578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800457c:	f7ff fff0 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4903      	ldr	r1, [pc, #12]	; (800459c <HAL_RCC_GetPCLK1Freq+0x24>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	08009e58 	.word	0x08009e58

080045a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045a4:	f7ff ffdc 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0b5b      	lsrs	r3, r3, #13
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	; (80045c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	08009e58 	.word	0x08009e58

080045c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d105      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d035      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045f0:	4b62      	ldr	r3, [pc, #392]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045f6:	f7fc fe69 	bl	80012cc <HAL_GetTick>
 80045fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045fe:	f7fc fe65 	bl	80012cc <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e0b0      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004610:	4b5b      	ldr	r3, [pc, #364]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f0      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	019a      	lsls	r2, r3, #6
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	071b      	lsls	r3, r3, #28
 8004628:	4955      	ldr	r1, [pc, #340]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004630:	4b52      	ldr	r3, [pc, #328]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004636:	f7fc fe49 	bl	80012cc <HAL_GetTick>
 800463a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800463e:	f7fc fe45 	bl	80012cc <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e090      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004650:	4b4b      	ldr	r3, [pc, #300]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8083 	beq.w	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	4b44      	ldr	r3, [pc, #272]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a43      	ldr	r2, [pc, #268]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b41      	ldr	r3, [pc, #260]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004686:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3e      	ldr	r2, [pc, #248]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004692:	f7fc fe1b 	bl	80012cc <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7fc fe17 	bl	80012cc <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e062      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046ac:	4b35      	ldr	r3, [pc, #212]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b8:	4b31      	ldr	r3, [pc, #196]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d02f      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d028      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d6:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e0:	4b29      	ldr	r3, [pc, #164]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046e6:	4b28      	ldr	r3, [pc, #160]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046ec:	4a24      	ldr	r2, [pc, #144]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046f2:	4b23      	ldr	r3, [pc, #140]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d114      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046fe:	f7fc fde5 	bl	80012cc <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004704:	e00a      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fc fde1 	bl	80012cc <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e02a      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ee      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004734:	d10d      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474a:	490d      	ldr	r1, [pc, #52]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474c:	4313      	orrs	r3, r2
 800474e:	608b      	str	r3, [r1, #8]
 8004750:	e005      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004752:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	4a0a      	ldr	r2, [pc, #40]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004758:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800475c:	6093      	str	r3, [r2, #8]
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476a:	4905      	ldr	r1, [pc, #20]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800476c:	4313      	orrs	r3, r2
 800476e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	42470068 	.word	0x42470068
 8004780:	40023800 	.word	0x40023800
 8004784:	40007000 	.word	0x40007000
 8004788:	42470e40 	.word	0x42470e40

0800478c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d13e      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047aa:	4b23      	ldr	r3, [pc, #140]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d12f      	bne.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047c0:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047c2:	617b      	str	r3, [r7, #20]
          break;
 80047c4:	e02f      	b.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d2:	d108      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047d4:	4b18      	ldr	r3, [pc, #96]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047dc:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	e007      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ee:	4a15      	ldr	r2, [pc, #84]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fc:	099b      	lsrs	r3, r3, #6
 80047fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	fb02 f303 	mul.w	r3, r2, r3
 8004808:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800480c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004810:	0f1b      	lsrs	r3, r3, #28
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]
          break;
 800481e:	e002      	b.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
          break;
 8004824:	bf00      	nop
        }
      }
      break;
 8004826:	bf00      	nop
    }
  }
  return frequency;
 8004828:	697b      	ldr	r3, [r7, #20]
}
 800482a:	4618      	mov	r0, r3
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	00bb8000 	.word	0x00bb8000
 8004840:	007a1200 	.word	0x007a1200
 8004844:	00f42400 	.word	0x00f42400

08004848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07b      	b.n	8004952 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d108      	bne.n	8004874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486a:	d009      	beq.n	8004880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
 8004872:	e005      	b.n	8004880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fc fa7a 	bl	8000d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	ea42 0103 	orr.w	r1, r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	f003 0104 	and.w	r1, r3, #4
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0210 	and.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004940:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e097      	b.n	8004a9e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fc fa4e 	bl	8000e24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800499e:	f023 0307 	bic.w	r3, r3, #7
 80049a2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f000 fa62 	bl	8004e78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049dc:	f023 0303 	bic.w	r3, r3, #3
 80049e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	4313      	orrs	r3, r2
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049fa:	f023 030c 	bic.w	r3, r3, #12
 80049fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	4313      	orrs	r3, r2
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	011a      	lsls	r2, r3, #4
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	031b      	lsls	r3, r3, #12
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a38:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a40:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004abe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ac6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ace:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d110      	bne.n	8004af8 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d102      	bne.n	8004ae2 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004adc:	7b7b      	ldrb	r3, [r7, #13]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d001      	beq.n	8004ae6 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e089      	b.n	8004bfa <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af6:	e031      	b.n	8004b5c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d110      	bne.n	8004b20 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004afe:	7bbb      	ldrb	r3, [r7, #14]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d102      	bne.n	8004b0a <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b04:	7b3b      	ldrb	r3, [r7, #12]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d001      	beq.n	8004b0e <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e075      	b.n	8004bfa <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b1e:	e01d      	b.n	8004b5c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d108      	bne.n	8004b38 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b26:	7bbb      	ldrb	r3, [r7, #14]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d105      	bne.n	8004b38 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b2c:	7b7b      	ldrb	r3, [r7, #13]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d102      	bne.n	8004b38 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b32:	7b3b      	ldrb	r3, [r7, #12]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d001      	beq.n	8004b3c <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e05e      	b.n	8004bfa <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_Encoder_Start_IT+0xc4>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d010      	beq.n	8004b8a <HAL_TIM_Encoder_Start_IT+0xe4>
 8004b68:	e01f      	b.n	8004baa <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fa20 	bl	8004fb8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0202 	orr.w	r2, r2, #2
 8004b86:	60da      	str	r2, [r3, #12]
      break;
 8004b88:	e02e      	b.n	8004be8 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	2104      	movs	r1, #4
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fa10 	bl	8004fb8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0204 	orr.w	r2, r2, #4
 8004ba6:	60da      	str	r2, [r3, #12]
      break;
 8004ba8:	e01e      	b.n	8004be8 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fa00 	bl	8004fb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	2104      	movs	r1, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 f9f9 	bl	8004fb8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0202 	orr.w	r2, r2, #2
 8004bd4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0204 	orr.w	r2, r2, #4
 8004be4:	60da      	str	r2, [r3, #12]
      break;
 8004be6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d122      	bne.n	8004c5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d11b      	bne.n	8004c5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f06f 0202 	mvn.w	r2, #2
 8004c2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f8f8 	bl	8004e3a <HAL_TIM_IC_CaptureCallback>
 8004c4a:	e005      	b.n	8004c58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f8ea 	bl	8004e26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f8fb 	bl	8004e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d122      	bne.n	8004cb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d11b      	bne.n	8004cb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f06f 0204 	mvn.w	r2, #4
 8004c82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f8ce 	bl	8004e3a <HAL_TIM_IC_CaptureCallback>
 8004c9e:	e005      	b.n	8004cac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f8c0 	bl	8004e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f8d1 	bl	8004e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d122      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d11b      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f06f 0208 	mvn.w	r2, #8
 8004cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2204      	movs	r2, #4
 8004cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f8a4 	bl	8004e3a <HAL_TIM_IC_CaptureCallback>
 8004cf2:	e005      	b.n	8004d00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f896 	bl	8004e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8a7 	bl	8004e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d122      	bne.n	8004d5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d11b      	bne.n	8004d5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f06f 0210 	mvn.w	r2, #16
 8004d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2208      	movs	r2, #8
 8004d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f87a 	bl	8004e3a <HAL_TIM_IC_CaptureCallback>
 8004d46:	e005      	b.n	8004d54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f86c 	bl	8004e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f87d 	bl	8004e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d10e      	bne.n	8004d86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d107      	bne.n	8004d86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f06f 0201 	mvn.w	r2, #1
 8004d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f846 	bl	8004e12 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d90:	2b80      	cmp	r3, #128	; 0x80
 8004d92:	d10e      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9e:	2b80      	cmp	r3, #128	; 0x80
 8004da0:	d107      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f9af 	bl	8005110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d10e      	bne.n	8004dde <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b40      	cmp	r3, #64	; 0x40
 8004dcc:	d107      	bne.n	8004dde <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f842 	bl	8004e62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d10e      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d107      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f06f 0220 	mvn.w	r2, #32
 8004e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f979 	bl	80050fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e0a:	bf00      	nop
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a40      	ldr	r2, [pc, #256]	; (8004f8c <TIM_Base_SetConfig+0x114>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e96:	d00f      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a3d      	ldr	r2, [pc, #244]	; (8004f90 <TIM_Base_SetConfig+0x118>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00b      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a3c      	ldr	r2, [pc, #240]	; (8004f94 <TIM_Base_SetConfig+0x11c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d007      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a3b      	ldr	r2, [pc, #236]	; (8004f98 <TIM_Base_SetConfig+0x120>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a3a      	ldr	r2, [pc, #232]	; (8004f9c <TIM_Base_SetConfig+0x124>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d108      	bne.n	8004eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2f      	ldr	r2, [pc, #188]	; (8004f8c <TIM_Base_SetConfig+0x114>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d02b      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed8:	d027      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <TIM_Base_SetConfig+0x118>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d023      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <TIM_Base_SetConfig+0x11c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01f      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2a      	ldr	r2, [pc, #168]	; (8004f98 <TIM_Base_SetConfig+0x120>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01b      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a29      	ldr	r2, [pc, #164]	; (8004f9c <TIM_Base_SetConfig+0x124>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d017      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a28      	ldr	r2, [pc, #160]	; (8004fa0 <TIM_Base_SetConfig+0x128>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a27      	ldr	r2, [pc, #156]	; (8004fa4 <TIM_Base_SetConfig+0x12c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00f      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a26      	ldr	r2, [pc, #152]	; (8004fa8 <TIM_Base_SetConfig+0x130>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00b      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a25      	ldr	r2, [pc, #148]	; (8004fac <TIM_Base_SetConfig+0x134>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d007      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a24      	ldr	r2, [pc, #144]	; (8004fb0 <TIM_Base_SetConfig+0x138>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a23      	ldr	r2, [pc, #140]	; (8004fb4 <TIM_Base_SetConfig+0x13c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d108      	bne.n	8004f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <TIM_Base_SetConfig+0x114>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_Base_SetConfig+0xf8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a0c      	ldr	r2, [pc, #48]	; (8004f9c <TIM_Base_SetConfig+0x124>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d103      	bne.n	8004f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	615a      	str	r2, [r3, #20]
}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	40000c00 	.word	0x40000c00
 8004f9c:	40010400 	.word	0x40010400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800
 8004fac:	40001800 	.word	0x40001800
 8004fb0:	40001c00 	.word	0x40001c00
 8004fb4:	40002000 	.word	0x40002000

08004fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2201      	movs	r2, #1
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a1a      	ldr	r2, [r3, #32]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	401a      	ands	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a1a      	ldr	r2, [r3, #32]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005018:	2302      	movs	r3, #2
 800501a:	e05a      	b.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d022      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005068:	d01d      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d018      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1b      	ldr	r2, [pc, #108]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1a      	ldr	r2, [pc, #104]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00e      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a18      	ldr	r2, [pc, #96]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a17      	ldr	r2, [pc, #92]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d004      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d10c      	bne.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40010400 	.word	0x40010400
 80050f4:	40014000 	.word	0x40014000
 80050f8:	40001800 	.word	0x40001800

080050fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e03f      	b.n	80051b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fb ff0e 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2224      	movs	r2, #36	; 0x24
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f929 	bl	80053c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800517c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800518c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800519c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b08a      	sub	sp, #40	; 0x28
 80051c2:	af02      	add	r7, sp, #8
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	4613      	mov	r3, r2
 80051cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d17c      	bne.n	80052d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <HAL_UART_Transmit+0x2c>
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e075      	b.n	80052da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_UART_Transmit+0x3e>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e06e      	b.n	80052da <HAL_UART_Transmit+0x11c>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2221      	movs	r2, #33	; 0x21
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005212:	f7fc f85b 	bl	80012cc <HAL_GetTick>
 8005216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522c:	d108      	bne.n	8005240 <HAL_UART_Transmit+0x82>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d104      	bne.n	8005240 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	e003      	b.n	8005248 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005250:	e02a      	b.n	80052a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2200      	movs	r2, #0
 800525a:	2180      	movs	r1, #128	; 0x80
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f840 	bl	80052e2 <UART_WaitOnFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e036      	b.n	80052da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005280:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	3302      	adds	r3, #2
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	e007      	b.n	800529a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	781a      	ldrb	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	3301      	adds	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1cf      	bne.n	8005252 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	2140      	movs	r1, #64	; 0x40
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f810 	bl	80052e2 <UART_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e006      	b.n	80052da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	e000      	b.n	80052da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b090      	sub	sp, #64	; 0x40
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	4613      	mov	r3, r2
 80052f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f2:	e050      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052fa:	d04c      	beq.n	8005396 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <UART_WaitOnFlagUntilTimeout+0x30>
 8005302:	f7fb ffe3 	bl	80012cc <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800530e:	429a      	cmp	r2, r3
 8005310:	d241      	bcs.n	8005396 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	330c      	adds	r3, #12
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	330c      	adds	r3, #12
 8005330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005332:	637a      	str	r2, [r7, #52]	; 0x34
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e5      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	613b      	str	r3, [r7, #16]
   return(result);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	63bb      	str	r3, [r7, #56]	; 0x38
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005366:	623a      	str	r2, [r7, #32]
 8005368:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	69f9      	ldr	r1, [r7, #28]
 800536c:	6a3a      	ldr	r2, [r7, #32]
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	61bb      	str	r3, [r7, #24]
   return(result);
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e5      	bne.n	8005346 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e00f      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4013      	ands	r3, r2
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	bf0c      	ite	eq
 80053a6:	2301      	moveq	r3, #1
 80053a8:	2300      	movne	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d09f      	beq.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3740      	adds	r7, #64	; 0x40
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c4:	b0c0      	sub	sp, #256	; 0x100
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	68d9      	ldr	r1, [r3, #12]
 80053de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	ea40 0301 	orr.w	r3, r0, r1
 80053e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	431a      	orrs	r2, r3
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005418:	f021 010c 	bic.w	r1, r1, #12
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005426:	430b      	orrs	r3, r1
 8005428:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800542a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	6999      	ldr	r1, [r3, #24]
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	ea40 0301 	orr.w	r3, r0, r1
 8005446:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b8f      	ldr	r3, [pc, #572]	; (800568c <UART_SetConfig+0x2cc>)
 8005450:	429a      	cmp	r2, r3
 8005452:	d005      	beq.n	8005460 <UART_SetConfig+0xa0>
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b8d      	ldr	r3, [pc, #564]	; (8005690 <UART_SetConfig+0x2d0>)
 800545c:	429a      	cmp	r2, r3
 800545e:	d104      	bne.n	800546a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005460:	f7ff f89e 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 8005464:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005468:	e003      	b.n	8005472 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800546a:	f7ff f885 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 800546e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547c:	f040 810c 	bne.w	8005698 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005484:	2200      	movs	r2, #0
 8005486:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800548a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800548e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005492:	4622      	mov	r2, r4
 8005494:	462b      	mov	r3, r5
 8005496:	1891      	adds	r1, r2, r2
 8005498:	65b9      	str	r1, [r7, #88]	; 0x58
 800549a:	415b      	adcs	r3, r3
 800549c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800549e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054a2:	4621      	mov	r1, r4
 80054a4:	eb12 0801 	adds.w	r8, r2, r1
 80054a8:	4629      	mov	r1, r5
 80054aa:	eb43 0901 	adc.w	r9, r3, r1
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054c2:	4690      	mov	r8, r2
 80054c4:	4699      	mov	r9, r3
 80054c6:	4623      	mov	r3, r4
 80054c8:	eb18 0303 	adds.w	r3, r8, r3
 80054cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054d0:	462b      	mov	r3, r5
 80054d2:	eb49 0303 	adc.w	r3, r9, r3
 80054d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054ee:	460b      	mov	r3, r1
 80054f0:	18db      	adds	r3, r3, r3
 80054f2:	653b      	str	r3, [r7, #80]	; 0x50
 80054f4:	4613      	mov	r3, r2
 80054f6:	eb42 0303 	adc.w	r3, r2, r3
 80054fa:	657b      	str	r3, [r7, #84]	; 0x54
 80054fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005500:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005504:	f7fa feb4 	bl	8000270 <__aeabi_uldivmod>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4b61      	ldr	r3, [pc, #388]	; (8005694 <UART_SetConfig+0x2d4>)
 800550e:	fba3 2302 	umull	r2, r3, r3, r2
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	011c      	lsls	r4, r3, #4
 8005516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800551a:	2200      	movs	r2, #0
 800551c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005520:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005524:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005528:	4642      	mov	r2, r8
 800552a:	464b      	mov	r3, r9
 800552c:	1891      	adds	r1, r2, r2
 800552e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005530:	415b      	adcs	r3, r3
 8005532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005534:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005538:	4641      	mov	r1, r8
 800553a:	eb12 0a01 	adds.w	sl, r2, r1
 800553e:	4649      	mov	r1, r9
 8005540:	eb43 0b01 	adc.w	fp, r3, r1
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005550:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005558:	4692      	mov	sl, r2
 800555a:	469b      	mov	fp, r3
 800555c:	4643      	mov	r3, r8
 800555e:	eb1a 0303 	adds.w	r3, sl, r3
 8005562:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005566:	464b      	mov	r3, r9
 8005568:	eb4b 0303 	adc.w	r3, fp, r3
 800556c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800557c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005580:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005584:	460b      	mov	r3, r1
 8005586:	18db      	adds	r3, r3, r3
 8005588:	643b      	str	r3, [r7, #64]	; 0x40
 800558a:	4613      	mov	r3, r2
 800558c:	eb42 0303 	adc.w	r3, r2, r3
 8005590:	647b      	str	r3, [r7, #68]	; 0x44
 8005592:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005596:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800559a:	f7fa fe69 	bl	8000270 <__aeabi_uldivmod>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4611      	mov	r1, r2
 80055a4:	4b3b      	ldr	r3, [pc, #236]	; (8005694 <UART_SetConfig+0x2d4>)
 80055a6:	fba3 2301 	umull	r2, r3, r3, r1
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	2264      	movs	r2, #100	; 0x64
 80055ae:	fb02 f303 	mul.w	r3, r2, r3
 80055b2:	1acb      	subs	r3, r1, r3
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80055ba:	4b36      	ldr	r3, [pc, #216]	; (8005694 <UART_SetConfig+0x2d4>)
 80055bc:	fba3 2302 	umull	r2, r3, r3, r2
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055c8:	441c      	add	r4, r3
 80055ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055dc:	4642      	mov	r2, r8
 80055de:	464b      	mov	r3, r9
 80055e0:	1891      	adds	r1, r2, r2
 80055e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80055e4:	415b      	adcs	r3, r3
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055ec:	4641      	mov	r1, r8
 80055ee:	1851      	adds	r1, r2, r1
 80055f0:	6339      	str	r1, [r7, #48]	; 0x30
 80055f2:	4649      	mov	r1, r9
 80055f4:	414b      	adcs	r3, r1
 80055f6:	637b      	str	r3, [r7, #52]	; 0x34
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005604:	4659      	mov	r1, fp
 8005606:	00cb      	lsls	r3, r1, #3
 8005608:	4651      	mov	r1, sl
 800560a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800560e:	4651      	mov	r1, sl
 8005610:	00ca      	lsls	r2, r1, #3
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	4603      	mov	r3, r0
 8005618:	4642      	mov	r2, r8
 800561a:	189b      	adds	r3, r3, r2
 800561c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005620:	464b      	mov	r3, r9
 8005622:	460a      	mov	r2, r1
 8005624:	eb42 0303 	adc.w	r3, r2, r3
 8005628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005638:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800563c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005640:	460b      	mov	r3, r1
 8005642:	18db      	adds	r3, r3, r3
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
 8005646:	4613      	mov	r3, r2
 8005648:	eb42 0303 	adc.w	r3, r2, r3
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800564e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005652:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005656:	f7fa fe0b 	bl	8000270 <__aeabi_uldivmod>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <UART_SetConfig+0x2d4>)
 8005660:	fba3 1302 	umull	r1, r3, r3, r2
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	2164      	movs	r1, #100	; 0x64
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	3332      	adds	r3, #50	; 0x32
 8005672:	4a08      	ldr	r2, [pc, #32]	; (8005694 <UART_SetConfig+0x2d4>)
 8005674:	fba2 2303 	umull	r2, r3, r2, r3
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	f003 0207 	and.w	r2, r3, #7
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4422      	add	r2, r4
 8005686:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005688:	e105      	b.n	8005896 <UART_SetConfig+0x4d6>
 800568a:	bf00      	nop
 800568c:	40011000 	.word	0x40011000
 8005690:	40011400 	.word	0x40011400
 8005694:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800569c:	2200      	movs	r2, #0
 800569e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056aa:	4642      	mov	r2, r8
 80056ac:	464b      	mov	r3, r9
 80056ae:	1891      	adds	r1, r2, r2
 80056b0:	6239      	str	r1, [r7, #32]
 80056b2:	415b      	adcs	r3, r3
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
 80056b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056ba:	4641      	mov	r1, r8
 80056bc:	1854      	adds	r4, r2, r1
 80056be:	4649      	mov	r1, r9
 80056c0:	eb43 0501 	adc.w	r5, r3, r1
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	00eb      	lsls	r3, r5, #3
 80056ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056d2:	00e2      	lsls	r2, r4, #3
 80056d4:	4614      	mov	r4, r2
 80056d6:	461d      	mov	r5, r3
 80056d8:	4643      	mov	r3, r8
 80056da:	18e3      	adds	r3, r4, r3
 80056dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056e0:	464b      	mov	r3, r9
 80056e2:	eb45 0303 	adc.w	r3, r5, r3
 80056e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005706:	4629      	mov	r1, r5
 8005708:	008b      	lsls	r3, r1, #2
 800570a:	4621      	mov	r1, r4
 800570c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005710:	4621      	mov	r1, r4
 8005712:	008a      	lsls	r2, r1, #2
 8005714:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005718:	f7fa fdaa 	bl	8000270 <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4b60      	ldr	r3, [pc, #384]	; (80058a4 <UART_SetConfig+0x4e4>)
 8005722:	fba3 2302 	umull	r2, r3, r3, r2
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	011c      	lsls	r4, r3, #4
 800572a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005734:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005738:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	1891      	adds	r1, r2, r2
 8005742:	61b9      	str	r1, [r7, #24]
 8005744:	415b      	adcs	r3, r3
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800574c:	4641      	mov	r1, r8
 800574e:	1851      	adds	r1, r2, r1
 8005750:	6139      	str	r1, [r7, #16]
 8005752:	4649      	mov	r1, r9
 8005754:	414b      	adcs	r3, r1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005764:	4659      	mov	r1, fp
 8005766:	00cb      	lsls	r3, r1, #3
 8005768:	4651      	mov	r1, sl
 800576a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800576e:	4651      	mov	r1, sl
 8005770:	00ca      	lsls	r2, r1, #3
 8005772:	4610      	mov	r0, r2
 8005774:	4619      	mov	r1, r3
 8005776:	4603      	mov	r3, r0
 8005778:	4642      	mov	r2, r8
 800577a:	189b      	adds	r3, r3, r2
 800577c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005780:	464b      	mov	r3, r9
 8005782:	460a      	mov	r2, r1
 8005784:	eb42 0303 	adc.w	r3, r2, r3
 8005788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	67bb      	str	r3, [r7, #120]	; 0x78
 8005796:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057a4:	4649      	mov	r1, r9
 80057a6:	008b      	lsls	r3, r1, #2
 80057a8:	4641      	mov	r1, r8
 80057aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057ae:	4641      	mov	r1, r8
 80057b0:	008a      	lsls	r2, r1, #2
 80057b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80057b6:	f7fa fd5b 	bl	8000270 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4b39      	ldr	r3, [pc, #228]	; (80058a4 <UART_SetConfig+0x4e4>)
 80057c0:	fba3 1302 	umull	r1, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	2164      	movs	r1, #100	; 0x64
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	3332      	adds	r3, #50	; 0x32
 80057d2:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <UART_SetConfig+0x4e4>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057de:	441c      	add	r4, r3
 80057e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057e4:	2200      	movs	r2, #0
 80057e6:	673b      	str	r3, [r7, #112]	; 0x70
 80057e8:	677a      	str	r2, [r7, #116]	; 0x74
 80057ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057ee:	4642      	mov	r2, r8
 80057f0:	464b      	mov	r3, r9
 80057f2:	1891      	adds	r1, r2, r2
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	415b      	adcs	r3, r3
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057fe:	4641      	mov	r1, r8
 8005800:	1851      	adds	r1, r2, r1
 8005802:	6039      	str	r1, [r7, #0]
 8005804:	4649      	mov	r1, r9
 8005806:	414b      	adcs	r3, r1
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005816:	4659      	mov	r1, fp
 8005818:	00cb      	lsls	r3, r1, #3
 800581a:	4651      	mov	r1, sl
 800581c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005820:	4651      	mov	r1, sl
 8005822:	00ca      	lsls	r2, r1, #3
 8005824:	4610      	mov	r0, r2
 8005826:	4619      	mov	r1, r3
 8005828:	4603      	mov	r3, r0
 800582a:	4642      	mov	r2, r8
 800582c:	189b      	adds	r3, r3, r2
 800582e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005830:	464b      	mov	r3, r9
 8005832:	460a      	mov	r2, r1
 8005834:	eb42 0303 	adc.w	r3, r2, r3
 8005838:	66fb      	str	r3, [r7, #108]	; 0x6c
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	663b      	str	r3, [r7, #96]	; 0x60
 8005844:	667a      	str	r2, [r7, #100]	; 0x64
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005852:	4649      	mov	r1, r9
 8005854:	008b      	lsls	r3, r1, #2
 8005856:	4641      	mov	r1, r8
 8005858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800585c:	4641      	mov	r1, r8
 800585e:	008a      	lsls	r2, r1, #2
 8005860:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005864:	f7fa fd04 	bl	8000270 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <UART_SetConfig+0x4e4>)
 800586e:	fba3 1302 	umull	r1, r3, r3, r2
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	2164      	movs	r1, #100	; 0x64
 8005876:	fb01 f303 	mul.w	r3, r1, r3
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	3332      	adds	r3, #50	; 0x32
 8005880:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <UART_SetConfig+0x4e4>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	f003 020f 	and.w	r2, r3, #15
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4422      	add	r2, r4
 8005894:	609a      	str	r2, [r3, #8]
}
 8005896:	bf00      	nop
 8005898:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058a2:	bf00      	nop
 80058a4:	51eb851f 	.word	0x51eb851f

080058a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058a8:	b084      	sub	sp, #16
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	f107 001c 	add.w	r0, r7, #28
 80058b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d122      	bne.n	8005906 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d105      	bne.n	80058fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f9c0 	bl	8005c80 <USB_CoreReset>
 8005900:	4603      	mov	r3, r0
 8005902:	73fb      	strb	r3, [r7, #15]
 8005904:	e01a      	b.n	800593c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f9b4 	bl	8005c80 <USB_CoreReset>
 8005918:	4603      	mov	r3, r0
 800591a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800591c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	639a      	str	r2, [r3, #56]	; 0x38
 800592e:	e005      	b.n	800593c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	2b01      	cmp	r3, #1
 8005940:	d10b      	bne.n	800595a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f043 0206 	orr.w	r2, r3, #6
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f043 0220 	orr.w	r2, r3, #32
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005966:	b004      	add	sp, #16
 8005968:	4770      	bx	lr

0800596a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f043 0201 	orr.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f023 0201 	bic.w	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d115      	bne.n	80059fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059dc:	2001      	movs	r0, #1
 80059de:	f7fb fc81 	bl	80012e4 <HAL_Delay>
      ms++;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3301      	adds	r3, #1
 80059e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f93a 	bl	8005c62 <USB_GetMode>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d01e      	beq.n	8005a32 <USB_SetCurrentMode+0x84>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b31      	cmp	r3, #49	; 0x31
 80059f8:	d9f0      	bls.n	80059dc <USB_SetCurrentMode+0x2e>
 80059fa:	e01a      	b.n	8005a32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d115      	bne.n	8005a2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f7fb fc68 	bl	80012e4 <HAL_Delay>
      ms++;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3301      	adds	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f921 	bl	8005c62 <USB_GetMode>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <USB_SetCurrentMode+0x84>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b31      	cmp	r3, #49	; 0x31
 8005a2a:	d9f0      	bls.n	8005a0e <USB_SetCurrentMode+0x60>
 8005a2c:	e001      	b.n	8005a32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e005      	b.n	8005a3e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b32      	cmp	r3, #50	; 0x32
 8005a36:	d101      	bne.n	8005a3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4a13      	ldr	r2, [pc, #76]	; (8005aac <USB_FlushTxFifo+0x64>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d901      	bls.n	8005a68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e01b      	b.n	8005aa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	daf2      	bge.n	8005a56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	019b      	lsls	r3, r3, #6
 8005a78:	f043 0220 	orr.w	r2, r3, #32
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a08      	ldr	r2, [pc, #32]	; (8005aac <USB_FlushTxFifo+0x64>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d901      	bls.n	8005a92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e006      	b.n	8005aa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d0f0      	beq.n	8005a80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	00030d40 	.word	0x00030d40

08005ab0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <USB_FlushRxFifo+0x5c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e018      	b.n	8005b00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	daf2      	bge.n	8005abc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2210      	movs	r2, #16
 8005ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <USB_FlushRxFifo+0x5c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e006      	b.n	8005b00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	2b10      	cmp	r3, #16
 8005afc:	d0f0      	beq.n	8005ae0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	00030d40 	.word	0x00030d40

08005b10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b089      	sub	sp, #36	; 0x24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	460b      	mov	r3, r1
 8005b20:	71fb      	strb	r3, [r7, #7]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d123      	bne.n	8005b7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b36:	88bb      	ldrh	r3, [r7, #4]
 8005b38:	3303      	adds	r3, #3
 8005b3a:	089b      	lsrs	r3, r3, #2
 8005b3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	e018      	b.n	8005b76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b44:	79fb      	ldrb	r3, [r7, #7]
 8005b46:	031a      	lsls	r2, r3, #12
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b50:	461a      	mov	r2, r3
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	3301      	adds	r3, #1
 8005b62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	3301      	adds	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	3301      	adds	r3, #1
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d3e2      	bcc.n	8005b44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3724      	adds	r7, #36	; 0x24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b08b      	sub	sp, #44	; 0x2c
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	089b      	lsrs	r3, r3, #2
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	623b      	str	r3, [r7, #32]
 8005bb6:	e014      	b.n	8005be2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	3301      	adds	r3, #1
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	3301      	adds	r3, #1
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	3301      	adds	r3, #1
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d3e6      	bcc.n	8005bb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bea:	8bfb      	ldrh	r3, [r7, #30]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01e      	beq.n	8005c2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f107 0310 	add.w	r3, r7, #16
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	701a      	strb	r2, [r3, #0]
      i++;
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	3301      	adds	r3, #1
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c22:	8bfb      	ldrh	r3, [r7, #30]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c28:	8bfb      	ldrh	r3, [r7, #30]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1ea      	bne.n	8005c04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	372c      	adds	r7, #44	; 0x2c
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4013      	ands	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c54:	68fb      	ldr	r3, [r7, #12]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a13      	ldr	r2, [pc, #76]	; (8005ce4 <USB_CoreReset+0x64>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e01b      	b.n	8005cd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	daf2      	bge.n	8005c8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f043 0201 	orr.w	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a09      	ldr	r2, [pc, #36]	; (8005ce4 <USB_CoreReset+0x64>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e006      	b.n	8005cd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d0f0      	beq.n	8005cb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	00030d40 	.word	0x00030d40

08005ce8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ce8:	b084      	sub	sp, #16
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b086      	sub	sp, #24
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d08:	461a      	mov	r2, r3
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d018      	beq.n	8005d70 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d10a      	bne.n	8005d5a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d52:	f043 0304 	orr.w	r3, r3, #4
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	e014      	b.n	8005d84 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d68:	f023 0304 	bic.w	r3, r3, #4
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e009      	b.n	8005d84 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d7e:	f023 0304 	bic.w	r3, r3, #4
 8005d82:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d84:	2110      	movs	r1, #16
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff fe5e 	bl	8005a48 <USB_FlushTxFifo>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff fe8a 	bl	8005ab0 <USB_FlushRxFifo>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	e015      	b.n	8005dd8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	461a      	mov	r2, r3
 8005dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dbe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dcc:	461a      	mov	r2, r3
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d3e5      	bcc.n	8005dac <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00b      	beq.n	8005e12 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <USB_HostInit+0x16c>)
 8005e06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a13      	ldr	r2, [pc, #76]	; (8005e58 <USB_HostInit+0x170>)
 8005e0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005e10:	e009      	b.n	8005e26 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2280      	movs	r2, #128	; 0x80
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a10      	ldr	r2, [pc, #64]	; (8005e5c <USB_HostInit+0x174>)
 8005e1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a0f      	ldr	r2, [pc, #60]	; (8005e60 <USB_HostInit+0x178>)
 8005e22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d105      	bne.n	8005e38 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	f043 0210 	orr.w	r2, r3, #16
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699a      	ldr	r2, [r3, #24]
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <USB_HostInit+0x17c>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e50:	b004      	add	sp, #16
 8005e52:	4770      	bx	lr
 8005e54:	01000200 	.word	0x01000200
 8005e58:	00e00300 	.word	0x00e00300
 8005e5c:	00600080 	.word	0x00600080
 8005e60:	004000e0 	.word	0x004000e0
 8005e64:	a3200008 	.word	0xa3200008

08005e68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	68f9      	ldr	r1, [r7, #12]
 8005e9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d107      	bne.n	8005eba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005eb6:	6053      	str	r3, [r2, #4]
 8005eb8:	e009      	b.n	8005ece <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d106      	bne.n	8005ece <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005ecc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005efc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f0c:	2064      	movs	r0, #100	; 0x64
 8005f0e:	f7fb f9e9 	bl	80012e4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f20:	200a      	movs	r0, #10
 8005f22:	f7fb f9df 	bl	80012e4 <HAL_Delay>

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d109      	bne.n	8005f74 <USB_DriveVbus+0x44>
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d106      	bne.n	8005f74 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f72:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7e:	d109      	bne.n	8005f94 <USB_DriveVbus+0x64>
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f92:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	0c5b      	lsrs	r3, r3, #17
 8005fc0:	f003 0303 	and.w	r3, r3, #3
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	b29b      	uxth	r3, r3
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
	...

08005ff4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	4611      	mov	r1, r2
 8006000:	461a      	mov	r2, r3
 8006002:	4603      	mov	r3, r0
 8006004:	70fb      	strb	r3, [r7, #3]
 8006006:	460b      	mov	r3, r1
 8006008:	70bb      	strb	r3, [r7, #2]
 800600a:	4613      	mov	r3, r2
 800600c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	4413      	add	r3, r2
 800601e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006022:	461a      	mov	r2, r3
 8006024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006028:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800602a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800602e:	2b03      	cmp	r3, #3
 8006030:	d87e      	bhi.n	8006130 <USB_HC_Init+0x13c>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <USB_HC_Init+0x44>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	08006049 	.word	0x08006049
 800603c:	080060f3 	.word	0x080060f3
 8006040:	08006049 	.word	0x08006049
 8006044:	080060b5 	.word	0x080060b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4413      	add	r3, r2
 8006050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006054:	461a      	mov	r2, r3
 8006056:	f240 439d 	movw	r3, #1181	; 0x49d
 800605a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800605c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006060:	2b00      	cmp	r3, #0
 8006062:	da10      	bge.n	8006086 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	78fa      	ldrb	r2, [r7, #3]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	440a      	add	r2, r1
 800607a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800607e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006082:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006084:	e057      	b.n	8006136 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608e:	2b00      	cmp	r3, #0
 8006090:	d051      	beq.n	8006136 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006092:	78fb      	ldrb	r3, [r7, #3]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4413      	add	r3, r2
 800609a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80060b0:	60d3      	str	r3, [r2, #12]
      break;
 80060b2:	e040      	b.n	8006136 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c0:	461a      	mov	r2, r3
 80060c2:	f240 639d 	movw	r3, #1693	; 0x69d
 80060c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	da34      	bge.n	800613a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	78fa      	ldrb	r2, [r7, #3]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060f0:	e023      	b.n	800613a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fe:	461a      	mov	r2, r3
 8006100:	f240 2325 	movw	r3, #549	; 0x225
 8006104:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006106:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800610a:	2b00      	cmp	r3, #0
 800610c:	da17      	bge.n	800613e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	78fa      	ldrb	r2, [r7, #3]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	440a      	add	r2, r1
 8006124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006128:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800612c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800612e:	e006      	b.n	800613e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	77fb      	strb	r3, [r7, #31]
      break;
 8006134:	e004      	b.n	8006140 <USB_HC_Init+0x14c>
      break;
 8006136:	bf00      	nop
 8006138:	e002      	b.n	8006140 <USB_HC_Init+0x14c>
      break;
 800613a:	bf00      	nop
 800613c:	e000      	b.n	8006140 <USB_HC_Init+0x14c>
      break;
 800613e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4413      	add	r3, r2
 8006148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	440a      	add	r2, r1
 8006156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800615a:	f043 0302 	orr.w	r3, r3, #2
 800615e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006166:	699a      	ldr	r2, [r3, #24]
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	2101      	movs	r1, #1
 8006170:	fa01 f303 	lsl.w	r3, r1, r3
 8006174:	6939      	ldr	r1, [r7, #16]
 8006176:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800617a:	4313      	orrs	r3, r2
 800617c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800618a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800618e:	2b00      	cmp	r3, #0
 8006190:	da03      	bge.n	800619a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e001      	b.n	800619e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff feff 	bl	8005fa2 <USB_GetHostSpeed>
 80061a4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80061a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d106      	bne.n	80061bc <USB_HC_Init+0x1c8>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d003      	beq.n	80061bc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80061b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	e001      	b.n	80061c0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061c0:	787b      	ldrb	r3, [r7, #1]
 80061c2:	059b      	lsls	r3, r3, #22
 80061c4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061c8:	78bb      	ldrb	r3, [r7, #2]
 80061ca:	02db      	lsls	r3, r3, #11
 80061cc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061d0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061d6:	049b      	lsls	r3, r3, #18
 80061d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80061e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	0159      	lsls	r1, r3, #5
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	440b      	add	r3, r1
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061fc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80061fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006202:	2b03      	cmp	r3, #3
 8006204:	d003      	beq.n	800620e <USB_HC_Init+0x21a>
 8006206:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800620a:	2b01      	cmp	r3, #1
 800620c:	d10f      	bne.n	800622e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	78fa      	ldrb	r2, [r7, #3]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	440a      	add	r2, r1
 8006224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800622c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800622e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08c      	sub	sp, #48	; 0x30
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006254:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d02d      	beq.n	80062be <USB_HC_StartXfer+0x86>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	791b      	ldrb	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d129      	bne.n	80062be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d117      	bne.n	80062a0 <USB_HC_StartXfer+0x68>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	79db      	ldrb	r3, [r3, #7]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <USB_HC_StartXfer+0x48>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	79db      	ldrb	r3, [r3, #7]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d10f      	bne.n	80062a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	6a3a      	ldr	r2, [r7, #32]
 8006294:	440a      	add	r2, r1
 8006296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10b      	bne.n	80062be <USB_HC_StartXfer+0x86>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	795b      	ldrb	r3, [r3, #5]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d107      	bne.n	80062be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	4619      	mov	r1, r3
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 fa0f 	bl	80066d8 <USB_DoPing>
      return HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e0f8      	b.n	80064b0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d018      	beq.n	80062f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	8912      	ldrh	r2, [r2, #8]
 80062ce:	4413      	add	r3, r2
 80062d0:	3b01      	subs	r3, #1
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	8912      	ldrh	r2, [r2, #8]
 80062d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80062dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062de:	8b7b      	ldrh	r3, [r7, #26]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d90b      	bls.n	80062fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80062e4:	8b7b      	ldrh	r3, [r7, #26]
 80062e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	8912      	ldrh	r2, [r2, #8]
 80062ee:	fb03 f202 	mul.w	r2, r3, r2
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	611a      	str	r2, [r3, #16]
 80062f6:	e001      	b.n	80062fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80062f8:	2301      	movs	r3, #1
 80062fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	78db      	ldrb	r3, [r3, #3]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006304:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	8912      	ldrh	r2, [r2, #8]
 800630a:	fb03 f202 	mul.w	r2, r3, r2
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	611a      	str	r2, [r3, #16]
 8006312:	e003      	b.n	800631c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006324:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006326:	04d9      	lsls	r1, r3, #19
 8006328:	4b63      	ldr	r3, [pc, #396]	; (80064b8 <USB_HC_StartXfer+0x280>)
 800632a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800632c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	7a9b      	ldrb	r3, [r3, #10]
 8006332:	075b      	lsls	r3, r3, #29
 8006334:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006338:	69f9      	ldr	r1, [r7, #28]
 800633a:	0148      	lsls	r0, r1, #5
 800633c:	6a39      	ldr	r1, [r7, #32]
 800633e:	4401      	add	r1, r0
 8006340:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006344:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006346:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	68d9      	ldr	r1, [r3, #12]
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635e:	460a      	mov	r2, r1
 8006360:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	6a3a      	ldr	r2, [r7, #32]
 800638e:	440a      	add	r2, r1
 8006390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006394:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006398:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	7e7b      	ldrb	r3, [r7, #25]
 80063aa:	075b      	lsls	r3, r3, #29
 80063ac:	69f9      	ldr	r1, [r7, #28]
 80063ae:	0148      	lsls	r0, r1, #5
 80063b0:	6a39      	ldr	r1, [r7, #32]
 80063b2:	4401      	add	r1, r0
 80063b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80063b8:	4313      	orrs	r3, r2
 80063ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063d2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	78db      	ldrb	r3, [r3, #3]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d004      	beq.n	80063e6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	e003      	b.n	80063ee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063ec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063f4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006402:	461a      	mov	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	e04e      	b.n	80064b0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	78db      	ldrb	r3, [r3, #3]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d149      	bne.n	80064ae <USB_HC_StartXfer+0x276>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d045      	beq.n	80064ae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	79db      	ldrb	r3, [r3, #7]
 8006426:	2b03      	cmp	r3, #3
 8006428:	d830      	bhi.n	800648c <USB_HC_StartXfer+0x254>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <USB_HC_StartXfer+0x1f8>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006441 	.word	0x08006441
 8006434:	08006465 	.word	0x08006465
 8006438:	08006441 	.word	0x08006441
 800643c:	08006465 	.word	0x08006465
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	3303      	adds	r3, #3
 8006446:	089b      	lsrs	r3, r3, #2
 8006448:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800644a:	8afa      	ldrh	r2, [r7, #22]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	b29b      	uxth	r3, r3
 8006452:	429a      	cmp	r2, r3
 8006454:	d91c      	bls.n	8006490 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f043 0220 	orr.w	r2, r3, #32
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	619a      	str	r2, [r3, #24]
        }
        break;
 8006462:	e015      	b.n	8006490 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	3303      	adds	r3, #3
 800646a:	089b      	lsrs	r3, r3, #2
 800646c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800646e:	8afa      	ldrh	r2, [r7, #22]
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	b29b      	uxth	r3, r3
 800647a:	429a      	cmp	r2, r3
 800647c:	d90a      	bls.n	8006494 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	619a      	str	r2, [r3, #24]
        }
        break;
 800648a:	e003      	b.n	8006494 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800648c:	bf00      	nop
 800648e:	e002      	b.n	8006496 <USB_HC_StartXfer+0x25e>
        break;
 8006490:	bf00      	nop
 8006492:	e000      	b.n	8006496 <USB_HC_StartXfer+0x25e>
        break;
 8006494:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	68d9      	ldr	r1, [r3, #12]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	785a      	ldrb	r2, [r3, #1]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2000      	movs	r0, #0
 80064a6:	9000      	str	r0, [sp, #0]
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f7ff fb31 	bl	8005b10 <USB_WritePacket>
  }

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3728      	adds	r7, #40	; 0x28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	1ff80000 	.word	0x1ff80000

080064bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	b29b      	uxth	r3, r3
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064de:	b480      	push	{r7}
 80064e0:	b089      	sub	sp, #36	; 0x24
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	0c9b      	lsrs	r3, r3, #18
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	0fdb      	lsrs	r3, r3, #31
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b20      	cmp	r3, #32
 800652c:	d104      	bne.n	8006538 <USB_HC_Halt+0x5a>
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	e0c8      	b.n	80066ca <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <USB_HC_Halt+0x66>
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d163      	bne.n	800660c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	69fa      	ldr	r2, [r7, #28]
 8006558:	440a      	add	r2, r1
 800655a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800655e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006562:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	f040 80ab 	bne.w	80066c8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d133      	bne.n	80065e6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	440a      	add	r2, r1
 8006594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800659c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065bc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3301      	adds	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065ca:	d81d      	bhi.n	8006608 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e2:	d0ec      	beq.n	80065be <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065e4:	e070      	b.n	80066c8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006604:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006606:	e05f      	b.n	80066c8 <USB_HC_Halt+0x1ea>
            break;
 8006608:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800660a:	e05d      	b.n	80066c8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	4413      	add	r3, r2
 8006614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	0151      	lsls	r1, r2, #5
 800661e:	69fa      	ldr	r2, [r7, #28]
 8006620:	440a      	add	r2, r1
 8006622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006626:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800662a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d133      	bne.n	80066a4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	440a      	add	r2, r1
 8006652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800665a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	4413      	add	r3, r2
 8006664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	440a      	add	r2, r1
 8006672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006676:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800667a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006688:	d81d      	bhi.n	80066c6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800669c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a0:	d0ec      	beq.n	800667c <USB_HC_Halt+0x19e>
 80066a2:	e011      	b.n	80066c8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	e000      	b.n	80066c8 <USB_HC_Halt+0x1ea>
          break;
 80066c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3724      	adds	r7, #36	; 0x24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
	...

080066d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066ec:	2301      	movs	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	04da      	lsls	r2, r3, #19
 80066f4:	4b15      	ldr	r3, [pc, #84]	; (800674c <USB_DoPing+0x74>)
 80066f6:	4013      	ands	r3, r2
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006708:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006720:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006728:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	4413      	add	r3, r2
 8006732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006736:	461a      	mov	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	1ff80000 	.word	0x1ff80000

08006750 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff f911 	bl	800598c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800676a:	2110      	movs	r1, #16
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff f96b 	bl	8005a48 <USB_FlushTxFifo>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff f997 	bl	8005ab0 <USB_FlushRxFifo>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800678c:	2300      	movs	r3, #0
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	e01f      	b.n	80067d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c6:	461a      	mov	r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	3301      	adds	r3, #1
 80067d0:	61bb      	str	r3, [r7, #24]
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b0f      	cmp	r3, #15
 80067d6:	d9dc      	bls.n	8006792 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067d8:	2300      	movs	r3, #0
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	e034      	b.n	8006848 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006804:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006812:	461a      	mov	r2, r3
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006824:	d80c      	bhi.n	8006840 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800683c:	d0ec      	beq.n	8006818 <USB_StopHost+0xc8>
 800683e:	e000      	b.n	8006842 <USB_StopHost+0xf2>
        break;
 8006840:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	3301      	adds	r3, #1
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b0f      	cmp	r3, #15
 800684c:	d9c7      	bls.n	80067de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006854:	461a      	mov	r2, r3
 8006856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800685a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006862:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff f880 	bl	800596a <USB_EnableGlobalInt>

  return ret;
 800686a:	7ffb      	ldrb	r3, [r7, #31]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3720      	adds	r7, #32
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006874:	b590      	push	{r4, r7, lr}
 8006876:	b089      	sub	sp, #36	; 0x24
 8006878:	af04      	add	r7, sp, #16
 800687a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800687c:	2301      	movs	r3, #1
 800687e:	2202      	movs	r2, #2
 8006880:	2102      	movs	r1, #2
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fc66 	bl	8007154 <USBH_FindInterface>
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2bff      	cmp	r3, #255	; 0xff
 8006890:	d002      	beq.n	8006898 <USBH_CDC_InterfaceInit+0x24>
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d901      	bls.n	800689c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006898:	2302      	movs	r3, #2
 800689a:	e13d      	b.n	8006b18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fc3b 	bl	800711c <USBH_SelectInterface>
 80068a6:	4603      	mov	r3, r0
 80068a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80068b0:	2302      	movs	r3, #2
 80068b2:	e131      	b.n	8006b18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80068ba:	2050      	movs	r0, #80	; 0x50
 80068bc:	f002 fafa 	bl	8008eb4 <malloc>
 80068c0:	4603      	mov	r3, r0
 80068c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80068d4:	2302      	movs	r3, #2
 80068d6:	e11f      	b.n	8006b18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068d8:	2250      	movs	r2, #80	; 0x50
 80068da:	2100      	movs	r1, #0
 80068dc:	68b8      	ldr	r0, [r7, #8]
 80068de:	f002 faf9 	bl	8008ed4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	211a      	movs	r1, #26
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	4413      	add	r3, r2
 80068ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	b25b      	sxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da15      	bge.n	8006926 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	211a      	movs	r1, #26
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	4413      	add	r3, r2
 8006906:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800690a:	781a      	ldrb	r2, [r3, #0]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	211a      	movs	r1, #26
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	4413      	add	r3, r2
 800691c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006920:	881a      	ldrh	r2, [r3, #0]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	785b      	ldrb	r3, [r3, #1]
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 ff2c 	bl	800878a <USBH_AllocPipe>
 8006932:	4603      	mov	r3, r0
 8006934:	461a      	mov	r2, r3
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	7819      	ldrb	r1, [r3, #0]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	7858      	ldrb	r0, [r3, #1]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	8952      	ldrh	r2, [r2, #10]
 8006952:	9202      	str	r2, [sp, #8]
 8006954:	2203      	movs	r2, #3
 8006956:	9201      	str	r2, [sp, #4]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	4623      	mov	r3, r4
 800695c:	4602      	mov	r2, r0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fee4 	bl	800872c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2200      	movs	r2, #0
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f002 f9f3 	bl	8008d58 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006972:	2300      	movs	r3, #0
 8006974:	2200      	movs	r2, #0
 8006976:	210a      	movs	r1, #10
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fbeb 	bl	8007154 <USBH_FindInterface>
 800697e:	4603      	mov	r3, r0
 8006980:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2bff      	cmp	r3, #255	; 0xff
 8006986:	d002      	beq.n	800698e <USBH_CDC_InterfaceInit+0x11a>
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d901      	bls.n	8006992 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800698e:	2302      	movs	r3, #2
 8006990:	e0c2      	b.n	8006b18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	211a      	movs	r1, #26
 8006998:	fb01 f303 	mul.w	r3, r1, r3
 800699c:	4413      	add	r3, r2
 800699e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	b25b      	sxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	da16      	bge.n	80069d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	211a      	movs	r1, #26
 80069b0:	fb01 f303 	mul.w	r3, r1, r3
 80069b4:	4413      	add	r3, r2
 80069b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069ba:	781a      	ldrb	r2, [r3, #0]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	211a      	movs	r1, #26
 80069c6:	fb01 f303 	mul.w	r3, r1, r3
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069d0:	881a      	ldrh	r2, [r3, #0]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	835a      	strh	r2, [r3, #26]
 80069d6:	e015      	b.n	8006a04 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	211a      	movs	r1, #26
 80069de:	fb01 f303 	mul.w	r3, r1, r3
 80069e2:	4413      	add	r3, r2
 80069e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069e8:	781a      	ldrb	r2, [r3, #0]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	211a      	movs	r1, #26
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069fe:	881a      	ldrh	r2, [r3, #0]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	211a      	movs	r1, #26
 8006a0a:	fb01 f303 	mul.w	r3, r1, r3
 8006a0e:	4413      	add	r3, r2
 8006a10:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	b25b      	sxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	da16      	bge.n	8006a4a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	211a      	movs	r1, #26
 8006a22:	fb01 f303 	mul.w	r3, r1, r3
 8006a26:	4413      	add	r3, r2
 8006a28:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a2c:	781a      	ldrb	r2, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	211a      	movs	r1, #26
 8006a38:	fb01 f303 	mul.w	r3, r1, r3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a42:	881a      	ldrh	r2, [r3, #0]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	835a      	strh	r2, [r3, #26]
 8006a48:	e015      	b.n	8006a76 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	211a      	movs	r1, #26
 8006a50:	fb01 f303 	mul.w	r3, r1, r3
 8006a54:	4413      	add	r3, r2
 8006a56:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a5a:	781a      	ldrb	r2, [r3, #0]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	211a      	movs	r1, #26
 8006a66:	fb01 f303 	mul.w	r3, r1, r3
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a70:	881a      	ldrh	r2, [r3, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	7b9b      	ldrb	r3, [r3, #14]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 fe84 	bl	800878a <USBH_AllocPipe>
 8006a82:	4603      	mov	r3, r0
 8006a84:	461a      	mov	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	7bdb      	ldrb	r3, [r3, #15]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 fe7a 	bl	800878a <USBH_AllocPipe>
 8006a96:	4603      	mov	r3, r0
 8006a98:	461a      	mov	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	7b59      	ldrb	r1, [r3, #13]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	7b98      	ldrb	r0, [r3, #14]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	8b12      	ldrh	r2, [r2, #24]
 8006ab6:	9202      	str	r2, [sp, #8]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	9201      	str	r2, [sp, #4]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	4623      	mov	r3, r4
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fe32 	bl	800872c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	7b19      	ldrb	r1, [r3, #12]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	7bd8      	ldrb	r0, [r3, #15]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	8b52      	ldrh	r2, [r2, #26]
 8006ae0:	9202      	str	r2, [sp, #8]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	9201      	str	r2, [sp, #4]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	4623      	mov	r3, r4
 8006aea:	4602      	mov	r2, r0
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 fe1d 	bl	800872c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	7b5b      	ldrb	r3, [r3, #13]
 8006afe:	2200      	movs	r2, #0
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f002 f928 	bl	8008d58 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	7b1b      	ldrb	r3, [r3, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f002 f921 	bl	8008d58 <USBH_LL_SetToggle>

  return USBH_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd90      	pop	{r4, r7, pc}

08006b20 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00e      	beq.n	8006b58 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 fe12 	bl	800876a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 fe3d 	bl	80087cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	7b1b      	ldrb	r3, [r3, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	7b1b      	ldrb	r3, [r3, #12]
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f001 fdff 	bl	800876a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	7b1b      	ldrb	r3, [r3, #12]
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fe2a 	bl	80087cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	7b5b      	ldrb	r3, [r3, #13]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00e      	beq.n	8006ba4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	7b5b      	ldrb	r3, [r3, #13]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 fdec 	bl	800876a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	7b5b      	ldrb	r3, [r3, #13]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 fe17 	bl	80087cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f002 f983 	bl	8008ec4 <free>
    phost->pActiveClass->pData = 0U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3340      	adds	r3, #64	; 0x40
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8b1 	bl	8006d52 <GetLineCoding>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006bf4:	7afb      	ldrb	r3, [r7, #11]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c00:	2102      	movs	r1, #2
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006c06:	7afb      	ldrb	r3, [r7, #11]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d877      	bhi.n	8006d24 <USBH_CDC_Process+0x114>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <USBH_CDC_Process+0x2c>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c51 	.word	0x08006c51
 8006c40:	08006c57 	.word	0x08006c57
 8006c44:	08006c87 	.word	0x08006c87
 8006c48:	08006cfb 	.word	0x08006cfb
 8006c4c:	08006d09 	.word	0x08006d09
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	73fb      	strb	r3, [r7, #15]
      break;
 8006c54:	e06d      	b.n	8006d32 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f897 	bl	8006d90 <SetLineCoding>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c74:	e058      	b.n	8006d28 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d055      	beq.n	8006d28 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c84:	e050      	b.n	8006d28 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	3340      	adds	r3, #64	; 0x40
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f860 	bl	8006d52 <GetLineCoding>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d126      	bne.n	8006cea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cae:	791b      	ldrb	r3, [r3, #4]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d13b      	bne.n	8006d2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cbe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d133      	bne.n	8006d2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cce:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d12b      	bne.n	8006d2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cdc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d124      	bne.n	8006d2c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f958 	bl	8006f98 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ce8:	e020      	b.n	8006d2c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d01d      	beq.n	8006d2c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006cf8:	e018      	b.n	8006d2c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f867 	bl	8006dce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f8da 	bl	8006eba <CDC_ProcessReception>
      break;
 8006d06:	e014      	b.n	8006d32 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006d08:	2100      	movs	r1, #0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 ffef 	bl	8007cee <USBH_ClrFeature>
 8006d10:	4603      	mov	r3, r0
 8006d12:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006d22:	e005      	b.n	8006d30 <USBH_CDC_Process+0x120>

    default:
      break;
 8006d24:	bf00      	nop
 8006d26:	e004      	b.n	8006d32 <USBH_CDC_Process+0x122>
      break;
 8006d28:	bf00      	nop
 8006d2a:	e002      	b.n	8006d32 <USBH_CDC_Process+0x122>
      break;
 8006d2c:	bf00      	nop
 8006d2e:	e000      	b.n	8006d32 <USBH_CDC_Process+0x122>
      break;
 8006d30:	bf00      	nop

  }

  return status;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b082      	sub	sp, #8
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	22a1      	movs	r2, #161	; 0xa1
 8006d60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2221      	movs	r2, #33	; 0x21
 8006d66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2207      	movs	r2, #7
 8006d78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2207      	movs	r2, #7
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 fa81 	bl	8008288 <USBH_CtlReq>
 8006d86:	4603      	mov	r3, r0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2221      	movs	r2, #33	; 0x21
 8006d9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2207      	movs	r2, #7
 8006db6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2207      	movs	r2, #7
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fa62 	bl	8008288 <USBH_CtlReq>
 8006dc4:	4603      	mov	r3, r0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b086      	sub	sp, #24
 8006dd2:	af02      	add	r7, sp, #8
 8006dd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d002      	beq.n	8006df4 <CDC_ProcessTransmission+0x26>
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d023      	beq.n	8006e3a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006df2:	e05e      	b.n	8006eb2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	8b12      	ldrh	r2, [r2, #24]
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d90b      	bls.n	8006e18 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	69d9      	ldr	r1, [r3, #28]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8b1a      	ldrh	r2, [r3, #24]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	7b5b      	ldrb	r3, [r3, #13]
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	9000      	str	r0, [sp, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 fc48 	bl	80086a6 <USBH_BulkSendData>
 8006e16:	e00b      	b.n	8006e30 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	7b5b      	ldrb	r3, [r3, #13]
 8006e26:	2001      	movs	r0, #1
 8006e28:	9000      	str	r0, [sp, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fc3b 	bl	80086a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e38:	e03b      	b.n	8006eb2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	7b5b      	ldrb	r3, [r3, #13]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 ff5f 	bl	8008d04 <USBH_LL_GetURBState>
 8006e46:	4603      	mov	r3, r0
 8006e48:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e4a:	7afb      	ldrb	r3, [r7, #11]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d128      	bne.n	8006ea2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	8b12      	ldrh	r2, [r2, #24]
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d90e      	bls.n	8006e7a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	8b12      	ldrh	r2, [r2, #24]
 8006e64:	1a9a      	subs	r2, r3, r2
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	8b12      	ldrh	r2, [r2, #24]
 8006e72:	441a      	add	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	61da      	str	r2, [r3, #28]
 8006e78:	e002      	b.n	8006e80 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d004      	beq.n	8006e92 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e90:	e00e      	b.n	8006eb0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f868 	bl	8006f70 <USBH_CDC_TransmitCallback>
      break;
 8006ea0:	e006      	b.n	8006eb0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006ea2:	7afb      	ldrb	r3, [r7, #11]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d103      	bne.n	8006eb0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006eb0:	bf00      	nop
  }
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d002      	beq.n	8006ee0 <CDC_ProcessReception+0x26>
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d00e      	beq.n	8006efc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006ede:	e043      	b.n	8006f68 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	6a19      	ldr	r1, [r3, #32]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	8b5a      	ldrh	r2, [r3, #26]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	7b1b      	ldrb	r3, [r3, #12]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fbff 	bl	80086f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006efa:	e035      	b.n	8006f68 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	7b1b      	ldrb	r3, [r3, #12]
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 fefe 	bl	8008d04 <USBH_LL_GetURBState>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006f0c:	7cfb      	ldrb	r3, [r7, #19]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d129      	bne.n	8006f66 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	7b1b      	ldrb	r3, [r3, #12]
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 fe61 	bl	8008be0 <USBH_LL_GetLastXferSize>
 8006f1e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d016      	beq.n	8006f58 <CDC_ProcessReception+0x9e>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	8b5b      	ldrh	r3, [r3, #26]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d910      	bls.n	8006f58 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	1ad2      	subs	r2, r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	6a1a      	ldr	r2, [r3, #32]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	441a      	add	r2, r3
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2203      	movs	r2, #3
 8006f52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f56:	e006      	b.n	8006f66 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f80f 	bl	8006f84 <USBH_CDC_ReceiveCallback>
      break;
 8006f66:	bf00      	nop
  }
}
 8006f68:	bf00      	nop
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e029      	b.n	8007018 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	79fa      	ldrb	r2, [r7, #7]
 8006fc8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f81f 	bl	8007020 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f001 fd31 	bl	8008a78 <USBH_LL_Init>

  return USBH_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e009      	b.n	8007046 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	33e0      	adds	r3, #224	; 0xe0
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	2200      	movs	r2, #0
 800703e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3301      	adds	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b0f      	cmp	r3, #15
 800704a:	d9f2      	bls.n	8007032 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	e009      	b.n	8007066 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800705c:	2200      	movs	r2, #0
 800705e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800706c:	d3f1      	bcc.n	8007052 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2240      	movs	r2, #64	; 0x40
 8007092:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d016      	beq.n	800710a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10e      	bne.n	8007104 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070ec:	1c59      	adds	r1, r3, #1
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	33de      	adds	r3, #222	; 0xde
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	73fb      	strb	r3, [r7, #15]
 8007102:	e004      	b.n	800710e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007104:	2302      	movs	r3, #2
 8007106:	73fb      	strb	r3, [r7, #15]
 8007108:	e001      	b.n	800710e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800710a:	2302      	movs	r3, #2
 800710c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007132:	78fa      	ldrb	r2, [r7, #3]
 8007134:	429a      	cmp	r2, r3
 8007136:	d204      	bcs.n	8007142 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	78fa      	ldrb	r2, [r7, #3]
 800713c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007140:	e001      	b.n	8007146 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007142:	2302      	movs	r3, #2
 8007144:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	4608      	mov	r0, r1
 800715e:	4611      	mov	r1, r2
 8007160:	461a      	mov	r2, r3
 8007162:	4603      	mov	r3, r0
 8007164:	70fb      	strb	r3, [r7, #3]
 8007166:	460b      	mov	r3, r1
 8007168:	70bb      	strb	r3, [r7, #2]
 800716a:	4613      	mov	r3, r2
 800716c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800717c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800717e:	e025      	b.n	80071cc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	221a      	movs	r2, #26
 8007184:	fb02 f303 	mul.w	r3, r2, r3
 8007188:	3308      	adds	r3, #8
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	3302      	adds	r3, #2
 8007190:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	795b      	ldrb	r3, [r3, #5]
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	429a      	cmp	r2, r3
 800719a:	d002      	beq.n	80071a2 <USBH_FindInterface+0x4e>
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	2bff      	cmp	r3, #255	; 0xff
 80071a0:	d111      	bne.n	80071c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071a6:	78ba      	ldrb	r2, [r7, #2]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d002      	beq.n	80071b2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071ac:	78bb      	ldrb	r3, [r7, #2]
 80071ae:	2bff      	cmp	r3, #255	; 0xff
 80071b0:	d109      	bne.n	80071c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071b6:	787a      	ldrb	r2, [r7, #1]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d002      	beq.n	80071c2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071bc:	787b      	ldrb	r3, [r7, #1]
 80071be:	2bff      	cmp	r3, #255	; 0xff
 80071c0:	d101      	bne.n	80071c6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	e006      	b.n	80071d4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	3301      	adds	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d9d6      	bls.n	8007180 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80071d2:	23ff      	movs	r3, #255	; 0xff
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fc81 	bl	8008af0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80071ee:	2101      	movs	r1, #1
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 fd9a 	bl	8008d2a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af04      	add	r7, sp, #16
 8007206:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007208:	2302      	movs	r3, #2
 800720a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	d102      	bne.n	8007222 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2203      	movs	r2, #3
 8007220:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b0b      	cmp	r3, #11
 800722a:	f200 81be 	bhi.w	80075aa <USBH_Process+0x3aa>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <USBH_Process+0x34>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	08007265 	.word	0x08007265
 8007238:	08007297 	.word	0x08007297
 800723c:	080072ff 	.word	0x080072ff
 8007240:	08007545 	.word	0x08007545
 8007244:	080075ab 	.word	0x080075ab
 8007248:	080073a3 	.word	0x080073a3
 800724c:	080074eb 	.word	0x080074eb
 8007250:	080073d9 	.word	0x080073d9
 8007254:	080073f9 	.word	0x080073f9
 8007258:	08007419 	.word	0x08007419
 800725c:	0800745d 	.word	0x0800745d
 8007260:	0800752d 	.word	0x0800752d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 819e 	beq.w	80075ae <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007278:	20c8      	movs	r0, #200	; 0xc8
 800727a:	f001 fd9d 	bl	8008db8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 fc93 	bl	8008baa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007294:	e18b      	b.n	80075ae <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800729c:	2b01      	cmp	r3, #1
 800729e:	d107      	bne.n	80072b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072ae:	e18d      	b.n	80075cc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072ba:	d914      	bls.n	80072e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072c2:	3301      	adds	r3, #1
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d903      	bls.n	80072de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	220d      	movs	r2, #13
 80072da:	701a      	strb	r2, [r3, #0]
      break;
 80072dc:	e176      	b.n	80075cc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	701a      	strb	r2, [r3, #0]
      break;
 80072e4:	e172      	b.n	80075cc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072ec:	f103 020a 	add.w	r2, r3, #10
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80072f6:	200a      	movs	r0, #10
 80072f8:	f001 fd5e 	bl	8008db8 <USBH_Delay>
      break;
 80072fc:	e166      	b.n	80075cc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800730e:	2104      	movs	r1, #4
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007314:	2064      	movs	r0, #100	; 0x64
 8007316:	f001 fd4f 	bl	8008db8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 fc1e 	bl	8008b5c <USBH_LL_GetSpeed>
 8007320:	4603      	mov	r3, r0
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2205      	movs	r2, #5
 800732e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007330:	2100      	movs	r1, #0
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 fa29 	bl	800878a <USBH_AllocPipe>
 8007338:	4603      	mov	r3, r0
 800733a:	461a      	mov	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007340:	2180      	movs	r1, #128	; 0x80
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fa21 	bl	800878a <USBH_AllocPipe>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	7919      	ldrb	r1, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007364:	b292      	uxth	r2, r2
 8007366:	9202      	str	r2, [sp, #8]
 8007368:	2200      	movs	r2, #0
 800736a:	9201      	str	r2, [sp, #4]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	4603      	mov	r3, r0
 8007370:	2280      	movs	r2, #128	; 0x80
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 f9da 	bl	800872c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	7959      	ldrb	r1, [r3, #5]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800738c:	b292      	uxth	r2, r2
 800738e:	9202      	str	r2, [sp, #8]
 8007390:	2200      	movs	r2, #0
 8007392:	9201      	str	r2, [sp, #4]
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4603      	mov	r3, r0
 8007398:	2200      	movs	r2, #0
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 f9c6 	bl	800872c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073a0:	e114      	b.n	80075cc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f918 	bl	80075d8 <USBH_HandleEnum>
 80073a8:	4603      	mov	r3, r0
 80073aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f040 80fe 	bne.w	80075b2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d103      	bne.n	80073d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2208      	movs	r2, #8
 80073cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073ce:	e0f0      	b.n	80075b2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2207      	movs	r2, #7
 80073d4:	701a      	strb	r2, [r3, #0]
      break;
 80073d6:	e0ec      	b.n	80075b2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 80e9 	beq.w	80075b6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ea:	2101      	movs	r1, #1
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2208      	movs	r2, #8
 80073f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80073f6:	e0de      	b.n	80075b6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80073fe:	b29b      	uxth	r3, r3
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fc2c 	bl	8007c60 <USBH_SetCfg>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	f040 80d5 	bne.w	80075ba <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2209      	movs	r2, #9
 8007414:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007416:	e0d0      	b.n	80075ba <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d016      	beq.n	8007454 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007426:	2101      	movs	r1, #1
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fc3c 	bl	8007ca6 <USBH_SetFeature>
 800742e:	4603      	mov	r3, r0
 8007430:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d103      	bne.n	8007442 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	220a      	movs	r2, #10
 800743e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007440:	e0bd      	b.n	80075be <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b03      	cmp	r3, #3
 8007448:	f040 80b9 	bne.w	80075be <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	220a      	movs	r2, #10
 8007450:	701a      	strb	r2, [r3, #0]
      break;
 8007452:	e0b4      	b.n	80075be <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	220a      	movs	r2, #10
 8007458:	701a      	strb	r2, [r3, #0]
      break;
 800745a:	e0b0      	b.n	80075be <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 80ad 	beq.w	80075c2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007470:	2300      	movs	r3, #0
 8007472:	73fb      	strb	r3, [r7, #15]
 8007474:	e016      	b.n	80074a4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007476:	7bfa      	ldrb	r2, [r7, #15]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	32de      	adds	r2, #222	; 0xde
 800747c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007480:	791a      	ldrb	r2, [r3, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007488:	429a      	cmp	r2, r3
 800748a:	d108      	bne.n	800749e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800748c:	7bfa      	ldrb	r2, [r7, #15]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	32de      	adds	r2, #222	; 0xde
 8007492:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800749c:	e005      	b.n	80074aa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	3301      	adds	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0e5      	beq.n	8007476 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d016      	beq.n	80074e2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d109      	bne.n	80074da <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2206      	movs	r2, #6
 80074ca:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074d2:	2103      	movs	r1, #3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074d8:	e073      	b.n	80075c2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	220d      	movs	r2, #13
 80074de:	701a      	strb	r2, [r3, #0]
      break;
 80074e0:	e06f      	b.n	80075c2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	220d      	movs	r2, #13
 80074e6:	701a      	strb	r2, [r3, #0]
      break;
 80074e8:	e06b      	b.n	80075c2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d017      	beq.n	8007524 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	4798      	blx	r3
 8007500:	4603      	mov	r3, r0
 8007502:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d103      	bne.n	8007514 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	220b      	movs	r2, #11
 8007510:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007512:	e058      	b.n	80075c6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d154      	bne.n	80075c6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	220d      	movs	r2, #13
 8007520:	701a      	strb	r2, [r3, #0]
      break;
 8007522:	e050      	b.n	80075c6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	220d      	movs	r2, #13
 8007528:	701a      	strb	r2, [r3, #0]
      break;
 800752a:	e04c      	b.n	80075c6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d049      	beq.n	80075ca <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
      }
      break;
 8007542:	e042      	b.n	80075ca <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff fd67 	bl	8007020 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007580:	2105      	movs	r1, #5
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b01      	cmp	r3, #1
 8007590:	d107      	bne.n	80075a2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7ff fe20 	bl	80071e0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075a0:	e014      	b.n	80075cc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 faa4 	bl	8008af0 <USBH_LL_Start>
      break;
 80075a8:	e010      	b.n	80075cc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80075aa:	bf00      	nop
 80075ac:	e00e      	b.n	80075cc <USBH_Process+0x3cc>
      break;
 80075ae:	bf00      	nop
 80075b0:	e00c      	b.n	80075cc <USBH_Process+0x3cc>
      break;
 80075b2:	bf00      	nop
 80075b4:	e00a      	b.n	80075cc <USBH_Process+0x3cc>
    break;
 80075b6:	bf00      	nop
 80075b8:	e008      	b.n	80075cc <USBH_Process+0x3cc>
      break;
 80075ba:	bf00      	nop
 80075bc:	e006      	b.n	80075cc <USBH_Process+0x3cc>
      break;
 80075be:	bf00      	nop
 80075c0:	e004      	b.n	80075cc <USBH_Process+0x3cc>
      break;
 80075c2:	bf00      	nop
 80075c4:	e002      	b.n	80075cc <USBH_Process+0x3cc>
      break;
 80075c6:	bf00      	nop
 80075c8:	e000      	b.n	80075cc <USBH_Process+0x3cc>
      break;
 80075ca:	bf00      	nop
  }
  return USBH_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop

080075d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af04      	add	r7, sp, #16
 80075de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075e0:	2301      	movs	r3, #1
 80075e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	785b      	ldrb	r3, [r3, #1]
 80075ec:	2b07      	cmp	r3, #7
 80075ee:	f200 81c1 	bhi.w	8007974 <USBH_HandleEnum+0x39c>
 80075f2:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <USBH_HandleEnum+0x20>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	08007619 	.word	0x08007619
 80075fc:	080076d7 	.word	0x080076d7
 8007600:	08007741 	.word	0x08007741
 8007604:	080077cf 	.word	0x080077cf
 8007608:	08007839 	.word	0x08007839
 800760c:	080078a9 	.word	0x080078a9
 8007610:	080078ef 	.word	0x080078ef
 8007614:	08007935 	.word	0x08007935
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007618:	2108      	movs	r1, #8
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fa50 	bl	8007ac0 <USBH_Get_DevDesc>
 8007620:	4603      	mov	r3, r0
 8007622:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d130      	bne.n	800768c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7919      	ldrb	r1, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800764e:	b292      	uxth	r2, r2
 8007650:	9202      	str	r2, [sp, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	9201      	str	r2, [sp, #4]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	4603      	mov	r3, r0
 800765a:	2280      	movs	r2, #128	; 0x80
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 f865 	bl	800872c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7959      	ldrb	r1, [r3, #5]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007676:	b292      	uxth	r2, r2
 8007678:	9202      	str	r2, [sp, #8]
 800767a:	2200      	movs	r2, #0
 800767c:	9201      	str	r2, [sp, #4]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4603      	mov	r3, r0
 8007682:	2200      	movs	r2, #0
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f851 	bl	800872c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800768a:	e175      	b.n	8007978 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	2b03      	cmp	r3, #3
 8007690:	f040 8172 	bne.w	8007978 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800769a:	3301      	adds	r3, #1
 800769c:	b2da      	uxtb	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d903      	bls.n	80076b6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	220d      	movs	r2, #13
 80076b2:	701a      	strb	r2, [r3, #0]
      break;
 80076b4:	e160      	b.n	8007978 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	795b      	ldrb	r3, [r3, #5]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 f885 	bl	80087cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	791b      	ldrb	r3, [r3, #4]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f87f 	bl	80087cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	701a      	strb	r2, [r3, #0]
      break;
 80076d4:	e150      	b.n	8007978 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076d6:	2112      	movs	r1, #18
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f9f1 	bl	8007ac0 <USBH_Get_DevDesc>
 80076de:	4603      	mov	r3, r0
 80076e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076e2:	7bbb      	ldrb	r3, [r7, #14]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d103      	bne.n	80076f0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ee:	e145      	b.n	800797c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	f040 8142 	bne.w	800797c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076fe:	3301      	adds	r3, #1
 8007700:	b2da      	uxtb	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800770e:	2b03      	cmp	r3, #3
 8007710:	d903      	bls.n	800771a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	220d      	movs	r2, #13
 8007716:	701a      	strb	r2, [r3, #0]
      break;
 8007718:	e130      	b.n	800797c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	795b      	ldrb	r3, [r3, #5]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 f853 	bl	80087cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	791b      	ldrb	r3, [r3, #4]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 f84d 	bl	80087cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
      break;
 800773e:	e11d      	b.n	800797c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007740:	2101      	movs	r1, #1
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa68 	bl	8007c18 <USBH_SetAddress>
 8007748:	4603      	mov	r3, r0
 800774a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d132      	bne.n	80077b8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007752:	2002      	movs	r0, #2
 8007754:	f001 fb30 	bl	8008db8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2203      	movs	r2, #3
 8007764:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7919      	ldrb	r1, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800777a:	b292      	uxth	r2, r2
 800777c:	9202      	str	r2, [sp, #8]
 800777e:	2200      	movs	r2, #0
 8007780:	9201      	str	r2, [sp, #4]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	4603      	mov	r3, r0
 8007786:	2280      	movs	r2, #128	; 0x80
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 ffcf 	bl	800872c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7959      	ldrb	r1, [r3, #5]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077a2:	b292      	uxth	r2, r2
 80077a4:	9202      	str	r2, [sp, #8]
 80077a6:	2200      	movs	r2, #0
 80077a8:	9201      	str	r2, [sp, #4]
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	4603      	mov	r3, r0
 80077ae:	2200      	movs	r2, #0
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 ffbb 	bl	800872c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077b6:	e0e3      	b.n	8007980 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	f040 80e0 	bne.w	8007980 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	220d      	movs	r2, #13
 80077c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	705a      	strb	r2, [r3, #1]
      break;
 80077cc:	e0d8      	b.n	8007980 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80077ce:	2109      	movs	r1, #9
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f99d 	bl	8007b10 <USBH_Get_CfgDesc>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2204      	movs	r2, #4
 80077e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077e6:	e0cd      	b.n	8007984 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	f040 80ca 	bne.w	8007984 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077f6:	3301      	adds	r3, #1
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007806:	2b03      	cmp	r3, #3
 8007808:	d903      	bls.n	8007812 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	220d      	movs	r2, #13
 800780e:	701a      	strb	r2, [r3, #0]
      break;
 8007810:	e0b8      	b.n	8007984 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	795b      	ldrb	r3, [r3, #5]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 ffd7 	bl	80087cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	791b      	ldrb	r3, [r3, #4]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 ffd1 	bl	80087cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	701a      	strb	r2, [r3, #0]
      break;
 8007836:	e0a5      	b.n	8007984 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f965 	bl	8007b10 <USBH_Get_CfgDesc>
 8007846:	4603      	mov	r3, r0
 8007848:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d103      	bne.n	8007858 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2205      	movs	r2, #5
 8007854:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007856:	e097      	b.n	8007988 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	2b03      	cmp	r3, #3
 800785c:	f040 8094 	bne.w	8007988 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007866:	3301      	adds	r3, #1
 8007868:	b2da      	uxtb	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007876:	2b03      	cmp	r3, #3
 8007878:	d903      	bls.n	8007882 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	220d      	movs	r2, #13
 800787e:	701a      	strb	r2, [r3, #0]
      break;
 8007880:	e082      	b.n	8007988 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	795b      	ldrb	r3, [r3, #5]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 ff9f 	bl	80087cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	791b      	ldrb	r3, [r3, #4]
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 ff99 	bl	80087cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
      break;
 80078a6:	e06f      	b.n	8007988 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d019      	beq.n	80078e6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078be:	23ff      	movs	r3, #255	; 0xff
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f949 	bl	8007b58 <USBH_Get_StringDesc>
 80078c6:	4603      	mov	r3, r0
 80078c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d103      	bne.n	80078d8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2206      	movs	r2, #6
 80078d4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078d6:	e059      	b.n	800798c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d156      	bne.n	800798c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2206      	movs	r2, #6
 80078e2:	705a      	strb	r2, [r3, #1]
      break;
 80078e4:	e052      	b.n	800798c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2206      	movs	r2, #6
 80078ea:	705a      	strb	r2, [r3, #1]
      break;
 80078ec:	e04e      	b.n	800798c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d019      	beq.n	800792c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007904:	23ff      	movs	r3, #255	; 0xff
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f926 	bl	8007b58 <USBH_Get_StringDesc>
 800790c:	4603      	mov	r3, r0
 800790e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d103      	bne.n	800791e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2207      	movs	r2, #7
 800791a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800791c:	e038      	b.n	8007990 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b03      	cmp	r3, #3
 8007922:	d135      	bne.n	8007990 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2207      	movs	r2, #7
 8007928:	705a      	strb	r2, [r3, #1]
      break;
 800792a:	e031      	b.n	8007990 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2207      	movs	r2, #7
 8007930:	705a      	strb	r2, [r3, #1]
      break;
 8007932:	e02d      	b.n	8007990 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800793a:	2b00      	cmp	r3, #0
 800793c:	d017      	beq.n	800796e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800794a:	23ff      	movs	r3, #255	; 0xff
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f903 	bl	8007b58 <USBH_Get_StringDesc>
 8007952:	4603      	mov	r3, r0
 8007954:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d102      	bne.n	8007962 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007960:	e018      	b.n	8007994 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b03      	cmp	r3, #3
 8007966:	d115      	bne.n	8007994 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
      break;
 800796c:	e012      	b.n	8007994 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
      break;
 8007972:	e00f      	b.n	8007994 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007974:	bf00      	nop
 8007976:	e00e      	b.n	8007996 <USBH_HandleEnum+0x3be>
      break;
 8007978:	bf00      	nop
 800797a:	e00c      	b.n	8007996 <USBH_HandleEnum+0x3be>
      break;
 800797c:	bf00      	nop
 800797e:	e00a      	b.n	8007996 <USBH_HandleEnum+0x3be>
      break;
 8007980:	bf00      	nop
 8007982:	e008      	b.n	8007996 <USBH_HandleEnum+0x3be>
      break;
 8007984:	bf00      	nop
 8007986:	e006      	b.n	8007996 <USBH_HandleEnum+0x3be>
      break;
 8007988:	bf00      	nop
 800798a:	e004      	b.n	8007996 <USBH_HandleEnum+0x3be>
      break;
 800798c:	bf00      	nop
 800798e:	e002      	b.n	8007996 <USBH_HandleEnum+0x3be>
      break;
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <USBH_HandleEnum+0x3be>
      break;
 8007994:	bf00      	nop
  }
  return Status;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f804 	bl	80079e2 <USBH_HandleSof>
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b0b      	cmp	r3, #11
 80079f2:	d10a      	bne.n	8007a0a <USBH_HandleSof+0x28>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d005      	beq.n	8007a0a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	4798      	blx	r3
  }
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007a22:	bf00      	nop
}
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a3e:	bf00      	nop
}
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f844 	bl	8008b26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	791b      	ldrb	r3, [r3, #4]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fe91 	bl	80087cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	795b      	ldrb	r3, [r3, #5]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fe8b 	bl	80087cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ade:	2100      	movs	r1, #0
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f864 	bl	8007bae <USBH_GetDescriptor>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007afc:	78fa      	ldrb	r2, [r7, #3]
 8007afe:	b292      	uxth	r2, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	f000 f918 	bl	8007d36 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af02      	add	r7, sp, #8
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	331c      	adds	r3, #28
 8007b20:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b22:	887b      	ldrh	r3, [r7, #2]
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f83d 	bl	8007bae <USBH_GetDescriptor>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d107      	bne.n	8007b4e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b3e:	887b      	ldrh	r3, [r7, #2]
 8007b40:	461a      	mov	r2, r3
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f987 	bl	8007e58 <USBH_ParseCfgDesc>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	607a      	str	r2, [r7, #4]
 8007b62:	461a      	mov	r2, r3
 8007b64:	460b      	mov	r3, r1
 8007b66:	72fb      	strb	r3, [r7, #11]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b74:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b7c:	893b      	ldrh	r3, [r7, #8]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	460b      	mov	r3, r1
 8007b82:	2100      	movs	r1, #0
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 f812 	bl	8007bae <USBH_GetDescriptor>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d107      	bne.n	8007ba4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b9a:	893a      	ldrh	r2, [r7, #8]
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 fb24 	bl	80081ec <USBH_ParseStringDesc>
  }

  return status;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	607b      	str	r3, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	72fb      	strb	r3, [r7, #11]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	789b      	ldrb	r3, [r3, #2]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d11c      	bne.n	8007c02 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2206      	movs	r2, #6
 8007bd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	893a      	ldrh	r2, [r7, #8]
 8007bde:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007be0:	893b      	ldrh	r3, [r7, #8]
 8007be2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bea:	d104      	bne.n	8007bf6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f240 4209 	movw	r2, #1033	; 0x409
 8007bf2:	829a      	strh	r2, [r3, #20]
 8007bf4:	e002      	b.n	8007bfc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8b3a      	ldrh	r2, [r7, #24]
 8007c00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c02:	8b3b      	ldrh	r3, [r7, #24]
 8007c04:	461a      	mov	r2, r3
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fb3d 	bl	8008288 <USBH_CtlReq>
 8007c0e:	4603      	mov	r3, r0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	789b      	ldrb	r3, [r3, #2]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d10f      	bne.n	8007c4c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2205      	movs	r2, #5
 8007c36:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2100      	movs	r1, #0
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fb19 	bl	8008288 <USBH_CtlReq>
 8007c56:	4603      	mov	r3, r0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	789b      	ldrb	r3, [r3, #2]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d10e      	bne.n	8007c92 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2209      	movs	r2, #9
 8007c7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	887a      	ldrh	r2, [r7, #2]
 8007c84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c92:	2200      	movs	r2, #0
 8007c94:	2100      	movs	r1, #0
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 faf6 	bl	8008288 <USBH_CtlReq>
 8007c9c:	4603      	mov	r3, r0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	789b      	ldrb	r3, [r3, #2]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d10f      	bne.n	8007cda <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007cc6:	78fb      	ldrb	r3, [r7, #3]
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2100      	movs	r1, #0
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fad2 	bl	8008288 <USBH_CtlReq>
 8007ce4:	4603      	mov	r3, r0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	789b      	ldrb	r3, [r3, #2]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d10f      	bne.n	8007d22 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007d22:	2200      	movs	r2, #0
 8007d24:	2100      	movs	r1, #0
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 faae 	bl	8008288 <USBH_CtlReq>
 8007d2c:	4603      	mov	r3, r0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	4613      	mov	r3, r2
 8007d42:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	781a      	ldrb	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	785a      	ldrb	r2, [r3, #1]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	3302      	adds	r3, #2
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	3303      	adds	r3, #3
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	791a      	ldrb	r2, [r3, #4]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	795a      	ldrb	r2, [r3, #5]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	799a      	ldrb	r2, [r3, #6]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	79da      	ldrb	r2, [r3, #7]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	79db      	ldrb	r3, [r3, #7]
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	dc11      	bgt.n	8007dbc <USBH_ParseDevDesc+0x86>
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	db16      	blt.n	8007dca <USBH_ParseDevDesc+0x94>
 8007d9c:	3b08      	subs	r3, #8
 8007d9e:	2201      	movs	r2, #1
 8007da0:	fa02 f303 	lsl.w	r3, r2, r3
 8007da4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bf14      	ite	ne
 8007db0:	2301      	movne	r3, #1
 8007db2:	2300      	moveq	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d102      	bne.n	8007dc0 <USBH_ParseDevDesc+0x8a>
 8007dba:	e006      	b.n	8007dca <USBH_ParseDevDesc+0x94>
 8007dbc:	2b40      	cmp	r3, #64	; 0x40
 8007dbe:	d104      	bne.n	8007dca <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	79da      	ldrb	r2, [r3, #7]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	71da      	strb	r2, [r3, #7]
      break;
 8007dc8:	e003      	b.n	8007dd2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2240      	movs	r2, #64	; 0x40
 8007dce:	71da      	strb	r2, [r3, #7]
      break;
 8007dd0:	bf00      	nop
  }

  if (length > 8U)
 8007dd2:	88fb      	ldrh	r3, [r7, #6]
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d939      	bls.n	8007e4c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	3308      	adds	r3, #8
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	3309      	adds	r3, #9
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	021b      	lsls	r3, r3, #8
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	4313      	orrs	r3, r2
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	330a      	adds	r3, #10
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	330b      	adds	r3, #11
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	021b      	lsls	r3, r3, #8
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	330c      	adds	r3, #12
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	330d      	adds	r3, #13
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	4313      	orrs	r3, r2
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	7b9a      	ldrb	r2, [r3, #14]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	7bda      	ldrb	r2, [r3, #15]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	7c1a      	ldrb	r2, [r3, #16]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	7c5a      	ldrb	r2, [r3, #17]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	745a      	strb	r2, [r3, #17]
  }
}
 8007e4c:	bf00      	nop
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08c      	sub	sp, #48	; 0x30
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e6c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	781a      	ldrb	r2, [r3, #0]
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	785a      	ldrb	r2, [r3, #1]
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	3303      	adds	r3, #3
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	4313      	orrs	r3, r2
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb4:	bf28      	it	cs
 8007eb6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	791a      	ldrb	r2, [r3, #4]
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	795a      	ldrb	r2, [r3, #5]
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	799a      	ldrb	r2, [r3, #6]
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	79da      	ldrb	r2, [r3, #7]
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	7a1a      	ldrb	r2, [r3, #8]
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b09      	cmp	r3, #9
 8007eee:	d002      	beq.n	8007ef6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	2209      	movs	r2, #9
 8007ef4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	2b09      	cmp	r3, #9
 8007efa:	f240 809d 	bls.w	8008038 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007efe:	2309      	movs	r3, #9
 8007f00:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f06:	e081      	b.n	800800c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f08:	f107 0316 	add.w	r3, r7, #22
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f10:	f000 f99f 	bl	8008252 <USBH_GetNextDesc>
 8007f14:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	785b      	ldrb	r3, [r3, #1]
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d176      	bne.n	800800c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b09      	cmp	r3, #9
 8007f24:	d002      	beq.n	8007f2c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	2209      	movs	r2, #9
 8007f2a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f30:	221a      	movs	r2, #26
 8007f32:	fb02 f303 	mul.w	r3, r2, r3
 8007f36:	3308      	adds	r3, #8
 8007f38:	6a3a      	ldr	r2, [r7, #32]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f42:	69f8      	ldr	r0, [r7, #28]
 8007f44:	f000 f87e 	bl	8008044 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f52:	e043      	b.n	8007fdc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f54:	f107 0316 	add.w	r3, r7, #22
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f5c:	f000 f979 	bl	8008252 <USBH_GetNextDesc>
 8007f60:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	d138      	bne.n	8007fdc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	795b      	ldrb	r3, [r3, #5]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d10f      	bne.n	8007f92 <USBH_ParseCfgDesc+0x13a>
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	799b      	ldrb	r3, [r3, #6]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d10b      	bne.n	8007f92 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	79db      	ldrb	r3, [r3, #7]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10f      	bne.n	8007fa2 <USBH_ParseCfgDesc+0x14a>
 8007f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2b09      	cmp	r3, #9
 8007f88:	d00b      	beq.n	8007fa2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	2209      	movs	r2, #9
 8007f8e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f90:	e007      	b.n	8007fa2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b07      	cmp	r3, #7
 8007f98:	d004      	beq.n	8007fa4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	2207      	movs	r2, #7
 8007f9e:	701a      	strb	r2, [r3, #0]
 8007fa0:	e000      	b.n	8007fa4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fa2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fa8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fac:	3201      	adds	r2, #1
 8007fae:	00d2      	lsls	r2, r2, #3
 8007fb0:	211a      	movs	r1, #26
 8007fb2:	fb01 f303 	mul.w	r3, r1, r3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	3308      	adds	r3, #8
 8007fba:	6a3a      	ldr	r2, [r7, #32]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fc4:	69b9      	ldr	r1, [r7, #24]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 f86b 	bl	80080a2 <USBH_ParseEPDesc>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007fd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	791b      	ldrb	r3, [r3, #4]
 8007fe0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d204      	bcs.n	8007ff2 <USBH_ParseCfgDesc+0x19a>
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	885a      	ldrh	r2, [r3, #2]
 8007fec:	8afb      	ldrh	r3, [r7, #22]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d8b0      	bhi.n	8007f54 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	791b      	ldrb	r3, [r3, #4]
 8007ff6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d201      	bcs.n	8008002 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e01c      	b.n	800803c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008006:	3301      	adds	r3, #1
 8008008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800800c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008010:	2b01      	cmp	r3, #1
 8008012:	d805      	bhi.n	8008020 <USBH_ParseCfgDesc+0x1c8>
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	885a      	ldrh	r2, [r3, #2]
 8008018:	8afb      	ldrh	r3, [r7, #22]
 800801a:	429a      	cmp	r2, r3
 800801c:	f63f af74 	bhi.w	8007f08 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	791b      	ldrb	r3, [r3, #4]
 8008024:	2b02      	cmp	r3, #2
 8008026:	bf28      	it	cs
 8008028:	2302      	movcs	r3, #2
 800802a:	b2db      	uxtb	r3, r3
 800802c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008030:	429a      	cmp	r2, r3
 8008032:	d201      	bcs.n	8008038 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008034:	2303      	movs	r3, #3
 8008036:	e001      	b.n	800803c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800803c:	4618      	mov	r0, r3
 800803e:	3730      	adds	r7, #48	; 0x30
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781a      	ldrb	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	785a      	ldrb	r2, [r3, #1]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	789a      	ldrb	r2, [r3, #2]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	78da      	ldrb	r2, [r3, #3]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	791a      	ldrb	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	795a      	ldrb	r2, [r3, #5]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	799a      	ldrb	r2, [r3, #6]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	79da      	ldrb	r2, [r3, #7]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	7a1a      	ldrb	r2, [r3, #8]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	721a      	strb	r2, [r3, #8]
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b087      	sub	sp, #28
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	781a      	ldrb	r2, [r3, #0]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	785a      	ldrb	r2, [r3, #1]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	789a      	ldrb	r2, [r3, #2]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	78da      	ldrb	r2, [r3, #3]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3304      	adds	r3, #4
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3305      	adds	r3, #5
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	4313      	orrs	r3, r2
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	799a      	ldrb	r2, [r3, #6]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	889b      	ldrh	r3, [r3, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80080fe:	2303      	movs	r3, #3
 8008100:	75fb      	strb	r3, [r7, #23]
 8008102:	e033      	b.n	800816c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	889b      	ldrh	r3, [r3, #4]
 8008108:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800810c:	f023 0307 	bic.w	r3, r3, #7
 8008110:	b29a      	uxth	r2, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	889b      	ldrh	r3, [r3, #4]
 800811a:	b21a      	sxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3304      	adds	r3, #4
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	b299      	uxth	r1, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3305      	adds	r3, #5
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	021b      	lsls	r3, r3, #8
 800812e:	b29b      	uxth	r3, r3
 8008130:	430b      	orrs	r3, r1
 8008132:	b29b      	uxth	r3, r3
 8008134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008138:	2b00      	cmp	r3, #0
 800813a:	d110      	bne.n	800815e <USBH_ParseEPDesc+0xbc>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3304      	adds	r3, #4
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	b299      	uxth	r1, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3305      	adds	r3, #5
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	b29b      	uxth	r3, r3
 8008150:	430b      	orrs	r3, r1
 8008152:	b29b      	uxth	r3, r3
 8008154:	b21b      	sxth	r3, r3
 8008156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800815a:	b21b      	sxth	r3, r3
 800815c:	e001      	b.n	8008162 <USBH_ParseEPDesc+0xc0>
 800815e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008162:	4313      	orrs	r3, r2
 8008164:	b21b      	sxth	r3, r3
 8008166:	b29a      	uxth	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008172:	2b00      	cmp	r3, #0
 8008174:	d116      	bne.n	80081a4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	78db      	ldrb	r3, [r3, #3]
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	2b01      	cmp	r3, #1
 8008180:	d005      	beq.n	800818e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	78db      	ldrb	r3, [r3, #3]
 8008186:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800818a:	2b03      	cmp	r3, #3
 800818c:	d127      	bne.n	80081de <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	799b      	ldrb	r3, [r3, #6]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <USBH_ParseEPDesc+0xfc>
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	799b      	ldrb	r3, [r3, #6]
 800819a:	2b10      	cmp	r3, #16
 800819c:	d91f      	bls.n	80081de <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800819e:	2303      	movs	r3, #3
 80081a0:	75fb      	strb	r3, [r7, #23]
 80081a2:	e01c      	b.n	80081de <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	78db      	ldrb	r3, [r3, #3]
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d10a      	bne.n	80081c6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	799b      	ldrb	r3, [r3, #6]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <USBH_ParseEPDesc+0x11e>
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	799b      	ldrb	r3, [r3, #6]
 80081bc:	2b10      	cmp	r3, #16
 80081be:	d90e      	bls.n	80081de <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80081c0:	2303      	movs	r3, #3
 80081c2:	75fb      	strb	r3, [r7, #23]
 80081c4:	e00b      	b.n	80081de <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	78db      	ldrb	r3, [r3, #3]
 80081ca:	f003 0303 	and.w	r3, r3, #3
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d105      	bne.n	80081de <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	799b      	ldrb	r3, [r3, #6]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80081da:	2303      	movs	r3, #3
 80081dc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	2b03      	cmp	r3, #3
 8008202:	d120      	bne.n	8008246 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	1e9a      	subs	r2, r3, #2
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	4293      	cmp	r3, r2
 800820e:	bf28      	it	cs
 8008210:	4613      	movcs	r3, r2
 8008212:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3302      	adds	r3, #2
 8008218:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800821a:	2300      	movs	r3, #0
 800821c:	82fb      	strh	r3, [r7, #22]
 800821e:	e00b      	b.n	8008238 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008220:	8afb      	ldrh	r3, [r7, #22]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4413      	add	r3, r2
 8008226:	781a      	ldrb	r2, [r3, #0]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	3301      	adds	r3, #1
 8008230:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008232:	8afb      	ldrh	r3, [r7, #22]
 8008234:	3302      	adds	r3, #2
 8008236:	82fb      	strh	r3, [r7, #22]
 8008238:	8afa      	ldrh	r2, [r7, #22]
 800823a:	8abb      	ldrh	r3, [r7, #20]
 800823c:	429a      	cmp	r2, r3
 800823e:	d3ef      	bcc.n	8008220 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
  }
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	881a      	ldrh	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	4413      	add	r3, r2
 8008268:	b29a      	uxth	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4413      	add	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800827a:	68fb      	ldr	r3, [r7, #12]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008296:	2301      	movs	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	789b      	ldrb	r3, [r3, #2]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d002      	beq.n	80082a8 <USBH_CtlReq+0x20>
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d00f      	beq.n	80082c6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80082a6:	e027      	b.n	80082f8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	88fa      	ldrh	r2, [r7, #6]
 80082b2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2201      	movs	r2, #1
 80082b8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2202      	movs	r2, #2
 80082be:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80082c0:	2301      	movs	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]
      break;
 80082c4:	e018      	b.n	80082f8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 f81c 	bl	8008304 <USBH_HandleControl>
 80082cc:	4603      	mov	r3, r0
 80082ce:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <USBH_CtlReq+0x54>
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d106      	bne.n	80082ea <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2201      	movs	r2, #1
 80082e0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	761a      	strb	r2, [r3, #24]
      break;
 80082e8:	e005      	b.n	80082f6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d102      	bne.n	80082f6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2201      	movs	r2, #1
 80082f4:	709a      	strb	r2, [r3, #2]
      break;
 80082f6:	bf00      	nop
  }
  return status;
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af02      	add	r7, sp, #8
 800830a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008310:	2300      	movs	r3, #0
 8008312:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7e1b      	ldrb	r3, [r3, #24]
 8008318:	3b01      	subs	r3, #1
 800831a:	2b0a      	cmp	r3, #10
 800831c:	f200 8156 	bhi.w	80085cc <USBH_HandleControl+0x2c8>
 8008320:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <USBH_HandleControl+0x24>)
 8008322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008326:	bf00      	nop
 8008328:	08008355 	.word	0x08008355
 800832c:	0800836f 	.word	0x0800836f
 8008330:	080083d9 	.word	0x080083d9
 8008334:	080083ff 	.word	0x080083ff
 8008338:	08008437 	.word	0x08008437
 800833c:	08008461 	.word	0x08008461
 8008340:	080084b3 	.word	0x080084b3
 8008344:	080084d5 	.word	0x080084d5
 8008348:	08008511 	.word	0x08008511
 800834c:	08008537 	.word	0x08008537
 8008350:	08008575 	.word	0x08008575
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f103 0110 	add.w	r1, r3, #16
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	795b      	ldrb	r3, [r3, #5]
 800835e:	461a      	mov	r2, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f943 	bl	80085ec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2202      	movs	r2, #2
 800836a:	761a      	strb	r2, [r3, #24]
      break;
 800836c:	e139      	b.n	80085e2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	795b      	ldrb	r3, [r3, #5]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fcc5 	bl	8008d04 <USBH_LL_GetURBState>
 800837a:	4603      	mov	r3, r0
 800837c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d11e      	bne.n	80083c2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	7c1b      	ldrb	r3, [r3, #16]
 8008388:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800838c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	8adb      	ldrh	r3, [r3, #22]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008396:	7b7b      	ldrb	r3, [r7, #13]
 8008398:	2b80      	cmp	r3, #128	; 0x80
 800839a:	d103      	bne.n	80083a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2203      	movs	r2, #3
 80083a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083a2:	e115      	b.n	80085d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2205      	movs	r2, #5
 80083a8:	761a      	strb	r2, [r3, #24]
      break;
 80083aa:	e111      	b.n	80085d0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80083ac:	7b7b      	ldrb	r3, [r7, #13]
 80083ae:	2b80      	cmp	r3, #128	; 0x80
 80083b0:	d103      	bne.n	80083ba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2209      	movs	r2, #9
 80083b6:	761a      	strb	r2, [r3, #24]
      break;
 80083b8:	e10a      	b.n	80085d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2207      	movs	r2, #7
 80083be:	761a      	strb	r2, [r3, #24]
      break;
 80083c0:	e106      	b.n	80085d0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d003      	beq.n	80083d0 <USBH_HandleControl+0xcc>
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	f040 8100 	bne.w	80085d0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220b      	movs	r2, #11
 80083d4:	761a      	strb	r2, [r3, #24]
      break;
 80083d6:	e0fb      	b.n	80085d0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083de:	b29a      	uxth	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6899      	ldr	r1, [r3, #8]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	899a      	ldrh	r2, [r3, #12]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	791b      	ldrb	r3, [r3, #4]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f93a 	bl	800866a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2204      	movs	r2, #4
 80083fa:	761a      	strb	r2, [r3, #24]
      break;
 80083fc:	e0f1      	b.n	80085e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	791b      	ldrb	r3, [r3, #4]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fc7d 	bl	8008d04 <USBH_LL_GetURBState>
 800840a:	4603      	mov	r3, r0
 800840c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d102      	bne.n	800841a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2209      	movs	r2, #9
 8008418:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b05      	cmp	r3, #5
 800841e:	d102      	bne.n	8008426 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008420:	2303      	movs	r3, #3
 8008422:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008424:	e0d6      	b.n	80085d4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	2b04      	cmp	r3, #4
 800842a:	f040 80d3 	bne.w	80085d4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	220b      	movs	r2, #11
 8008432:	761a      	strb	r2, [r3, #24]
      break;
 8008434:	e0ce      	b.n	80085d4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6899      	ldr	r1, [r3, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	899a      	ldrh	r2, [r3, #12]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	795b      	ldrb	r3, [r3, #5]
 8008442:	2001      	movs	r0, #1
 8008444:	9000      	str	r0, [sp, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f8ea 	bl	8008620 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008452:	b29a      	uxth	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2206      	movs	r2, #6
 800845c:	761a      	strb	r2, [r3, #24]
      break;
 800845e:	e0c0      	b.n	80085e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	795b      	ldrb	r3, [r3, #5]
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fc4c 	bl	8008d04 <USBH_LL_GetURBState>
 800846c:	4603      	mov	r3, r0
 800846e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d103      	bne.n	800847e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2207      	movs	r2, #7
 800847a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800847c:	e0ac      	b.n	80085d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	2b05      	cmp	r3, #5
 8008482:	d105      	bne.n	8008490 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	220c      	movs	r2, #12
 8008488:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800848a:	2303      	movs	r3, #3
 800848c:	73fb      	strb	r3, [r7, #15]
      break;
 800848e:	e0a3      	b.n	80085d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	2b02      	cmp	r3, #2
 8008494:	d103      	bne.n	800849e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2205      	movs	r2, #5
 800849a:	761a      	strb	r2, [r3, #24]
      break;
 800849c:	e09c      	b.n	80085d8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	f040 8099 	bne.w	80085d8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	220b      	movs	r2, #11
 80084aa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80084ac:	2302      	movs	r3, #2
 80084ae:	73fb      	strb	r3, [r7, #15]
      break;
 80084b0:	e092      	b.n	80085d8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	791b      	ldrb	r3, [r3, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	2100      	movs	r1, #0
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f8d5 	bl	800866a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2208      	movs	r2, #8
 80084d0:	761a      	strb	r2, [r3, #24]

      break;
 80084d2:	e086      	b.n	80085e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	791b      	ldrb	r3, [r3, #4]
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fc12 	bl	8008d04 <USBH_LL_GetURBState>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d105      	bne.n	80084f6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	220d      	movs	r2, #13
 80084ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084f4:	e072      	b.n	80085dc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d103      	bne.n	8008504 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	220b      	movs	r2, #11
 8008500:	761a      	strb	r2, [r3, #24]
      break;
 8008502:	e06b      	b.n	80085dc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	2b05      	cmp	r3, #5
 8008508:	d168      	bne.n	80085dc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800850a:	2303      	movs	r3, #3
 800850c:	73fb      	strb	r3, [r7, #15]
      break;
 800850e:	e065      	b.n	80085dc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	795b      	ldrb	r3, [r3, #5]
 8008514:	2201      	movs	r2, #1
 8008516:	9200      	str	r2, [sp, #0]
 8008518:	2200      	movs	r2, #0
 800851a:	2100      	movs	r1, #0
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f87f 	bl	8008620 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008528:	b29a      	uxth	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	220a      	movs	r2, #10
 8008532:	761a      	strb	r2, [r3, #24]
      break;
 8008534:	e055      	b.n	80085e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	795b      	ldrb	r3, [r3, #5]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fbe1 	bl	8008d04 <USBH_LL_GetURBState>
 8008542:	4603      	mov	r3, r0
 8008544:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d105      	bne.n	8008558 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	220d      	movs	r2, #13
 8008554:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008556:	e043      	b.n	80085e0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008558:	7bbb      	ldrb	r3, [r7, #14]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d103      	bne.n	8008566 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2209      	movs	r2, #9
 8008562:	761a      	strb	r2, [r3, #24]
      break;
 8008564:	e03c      	b.n	80085e0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	2b04      	cmp	r3, #4
 800856a:	d139      	bne.n	80085e0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	220b      	movs	r2, #11
 8008570:	761a      	strb	r2, [r3, #24]
      break;
 8008572:	e035      	b.n	80085e0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	7e5b      	ldrb	r3, [r3, #25]
 8008578:	3301      	adds	r3, #1
 800857a:	b2da      	uxtb	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	765a      	strb	r2, [r3, #25]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	7e5b      	ldrb	r3, [r3, #25]
 8008584:	2b02      	cmp	r3, #2
 8008586:	d806      	bhi.n	8008596 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008594:	e025      	b.n	80085e2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800859c:	2106      	movs	r1, #6
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	795b      	ldrb	r3, [r3, #5]
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f90c 	bl	80087cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	791b      	ldrb	r3, [r3, #4]
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f906 	bl	80087cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80085c6:	2302      	movs	r3, #2
 80085c8:	73fb      	strb	r3, [r7, #15]
      break;
 80085ca:	e00a      	b.n	80085e2 <USBH_HandleControl+0x2de>

    default:
      break;
 80085cc:	bf00      	nop
 80085ce:	e008      	b.n	80085e2 <USBH_HandleControl+0x2de>
      break;
 80085d0:	bf00      	nop
 80085d2:	e006      	b.n	80085e2 <USBH_HandleControl+0x2de>
      break;
 80085d4:	bf00      	nop
 80085d6:	e004      	b.n	80085e2 <USBH_HandleControl+0x2de>
      break;
 80085d8:	bf00      	nop
 80085da:	e002      	b.n	80085e2 <USBH_HandleControl+0x2de>
      break;
 80085dc:	bf00      	nop
 80085de:	e000      	b.n	80085e2 <USBH_HandleControl+0x2de>
      break;
 80085e0:	bf00      	nop
  }

  return status;
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af04      	add	r7, sp, #16
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085fa:	79f9      	ldrb	r1, [r7, #7]
 80085fc:	2300      	movs	r3, #0
 80085fe:	9303      	str	r3, [sp, #12]
 8008600:	2308      	movs	r3, #8
 8008602:	9302      	str	r3, [sp, #8]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	2300      	movs	r3, #0
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	2300      	movs	r3, #0
 800860e:	2200      	movs	r2, #0
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 fb46 	bl	8008ca2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af04      	add	r7, sp, #16
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	4611      	mov	r1, r2
 800862c:	461a      	mov	r2, r3
 800862e:	460b      	mov	r3, r1
 8008630:	80fb      	strh	r3, [r7, #6]
 8008632:	4613      	mov	r3, r2
 8008634:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008644:	7979      	ldrb	r1, [r7, #5]
 8008646:	7e3b      	ldrb	r3, [r7, #24]
 8008648:	9303      	str	r3, [sp, #12]
 800864a:	88fb      	ldrh	r3, [r7, #6]
 800864c:	9302      	str	r3, [sp, #8]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	2301      	movs	r3, #1
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	2300      	movs	r3, #0
 8008658:	2200      	movs	r2, #0
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 fb21 	bl	8008ca2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b088      	sub	sp, #32
 800866e:	af04      	add	r7, sp, #16
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	60b9      	str	r1, [r7, #8]
 8008674:	4611      	mov	r1, r2
 8008676:	461a      	mov	r2, r3
 8008678:	460b      	mov	r3, r1
 800867a:	80fb      	strh	r3, [r7, #6]
 800867c:	4613      	mov	r3, r2
 800867e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008680:	7979      	ldrb	r1, [r7, #5]
 8008682:	2300      	movs	r3, #0
 8008684:	9303      	str	r3, [sp, #12]
 8008686:	88fb      	ldrh	r3, [r7, #6]
 8008688:	9302      	str	r3, [sp, #8]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	2301      	movs	r3, #1
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	2300      	movs	r3, #0
 8008694:	2201      	movs	r2, #1
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 fb03 	bl	8008ca2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800869c:	2300      	movs	r3, #0

}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b088      	sub	sp, #32
 80086aa:	af04      	add	r7, sp, #16
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	4611      	mov	r1, r2
 80086b2:	461a      	mov	r2, r3
 80086b4:	460b      	mov	r3, r1
 80086b6:	80fb      	strh	r3, [r7, #6]
 80086b8:	4613      	mov	r3, r2
 80086ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086ca:	7979      	ldrb	r1, [r7, #5]
 80086cc:	7e3b      	ldrb	r3, [r7, #24]
 80086ce:	9303      	str	r3, [sp, #12]
 80086d0:	88fb      	ldrh	r3, [r7, #6]
 80086d2:	9302      	str	r3, [sp, #8]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	2301      	movs	r3, #1
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	2302      	movs	r3, #2
 80086de:	2200      	movs	r2, #0
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 fade 	bl	8008ca2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af04      	add	r7, sp, #16
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4611      	mov	r1, r2
 80086fc:	461a      	mov	r2, r3
 80086fe:	460b      	mov	r3, r1
 8008700:	80fb      	strh	r3, [r7, #6]
 8008702:	4613      	mov	r3, r2
 8008704:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008706:	7979      	ldrb	r1, [r7, #5]
 8008708:	2300      	movs	r3, #0
 800870a:	9303      	str	r3, [sp, #12]
 800870c:	88fb      	ldrh	r3, [r7, #6]
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	2301      	movs	r3, #1
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	2302      	movs	r3, #2
 800871a:	2201      	movs	r2, #1
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 fac0 	bl	8008ca2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af04      	add	r7, sp, #16
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	4608      	mov	r0, r1
 8008736:	4611      	mov	r1, r2
 8008738:	461a      	mov	r2, r3
 800873a:	4603      	mov	r3, r0
 800873c:	70fb      	strb	r3, [r7, #3]
 800873e:	460b      	mov	r3, r1
 8008740:	70bb      	strb	r3, [r7, #2]
 8008742:	4613      	mov	r3, r2
 8008744:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008746:	7878      	ldrb	r0, [r7, #1]
 8008748:	78ba      	ldrb	r2, [r7, #2]
 800874a:	78f9      	ldrb	r1, [r7, #3]
 800874c:	8b3b      	ldrh	r3, [r7, #24]
 800874e:	9302      	str	r3, [sp, #8]
 8008750:	7d3b      	ldrb	r3, [r7, #20]
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	7c3b      	ldrb	r3, [r7, #16]
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	4603      	mov	r3, r0
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fa53 	bl	8008c06 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b082      	sub	sp, #8
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	460b      	mov	r3, r1
 8008774:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008776:	78fb      	ldrb	r3, [r7, #3]
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa72 	bl	8008c64 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	460b      	mov	r3, r1
 8008794:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f836 	bl	8008808 <USBH_GetFreePipe>
 800879c:	4603      	mov	r3, r0
 800879e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80087a0:	89fb      	ldrh	r3, [r7, #14]
 80087a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00a      	beq.n	80087c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80087aa:	78fa      	ldrb	r2, [r7, #3]
 80087ac:	89fb      	ldrh	r3, [r7, #14]
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	33e0      	adds	r3, #224	; 0xe0
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	440b      	add	r3, r1
 80087be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80087c0:	89fb      	ldrh	r3, [r7, #14]
 80087c2:	b2db      	uxtb	r3, r3
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	2b0f      	cmp	r3, #15
 80087dc:	d80d      	bhi.n	80087fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	33e0      	adds	r3, #224	; 0xe0
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	78fb      	ldrb	r3, [r7, #3]
 80087ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	33e0      	adds	r3, #224	; 0xe0
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]
 8008818:	e00f      	b.n	800883a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	33e0      	adds	r3, #224	; 0xe0
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d102      	bne.n	8008834 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	b29b      	uxth	r3, r3
 8008832:	e007      	b.n	8008844 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	3301      	adds	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	2b0f      	cmp	r3, #15
 800883e:	d9ec      	bls.n	800881a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008840:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008854:	2201      	movs	r2, #1
 8008856:	490e      	ldr	r1, [pc, #56]	; (8008890 <MX_USB_HOST_Init+0x40>)
 8008858:	480e      	ldr	r0, [pc, #56]	; (8008894 <MX_USB_HOST_Init+0x44>)
 800885a:	f7fe fba7 	bl	8006fac <USBH_Init>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008864:	f7f8 f9a0 	bl	8000ba8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008868:	490b      	ldr	r1, [pc, #44]	; (8008898 <MX_USB_HOST_Init+0x48>)
 800886a:	480a      	ldr	r0, [pc, #40]	; (8008894 <MX_USB_HOST_Init+0x44>)
 800886c:	f7fe fc2c 	bl	80070c8 <USBH_RegisterClass>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008876:	f7f8 f997 	bl	8000ba8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800887a:	4806      	ldr	r0, [pc, #24]	; (8008894 <MX_USB_HOST_Init+0x44>)
 800887c:	f7fe fcb0 	bl	80071e0 <USBH_Start>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008886:	f7f8 f98f 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800888a:	bf00      	nop
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	080088b1 	.word	0x080088b1
 8008894:	2000027c 	.word	0x2000027c
 8008898:	2000000c 	.word	0x2000000c

0800889c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80088a0:	4802      	ldr	r0, [pc, #8]	; (80088ac <MX_USB_HOST_Process+0x10>)
 80088a2:	f7fe fcad 	bl	8007200 <USBH_Process>
}
 80088a6:	bf00      	nop
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	2000027c 	.word	0x2000027c

080088b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80088bc:	78fb      	ldrb	r3, [r7, #3]
 80088be:	3b01      	subs	r3, #1
 80088c0:	2b04      	cmp	r3, #4
 80088c2:	d819      	bhi.n	80088f8 <USBH_UserProcess+0x48>
 80088c4:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <USBH_UserProcess+0x1c>)
 80088c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ca:	bf00      	nop
 80088cc:	080088f9 	.word	0x080088f9
 80088d0:	080088e9 	.word	0x080088e9
 80088d4:	080088f9 	.word	0x080088f9
 80088d8:	080088f1 	.word	0x080088f1
 80088dc:	080088e1 	.word	0x080088e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80088e0:	4b09      	ldr	r3, [pc, #36]	; (8008908 <USBH_UserProcess+0x58>)
 80088e2:	2203      	movs	r2, #3
 80088e4:	701a      	strb	r2, [r3, #0]
  break;
 80088e6:	e008      	b.n	80088fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80088e8:	4b07      	ldr	r3, [pc, #28]	; (8008908 <USBH_UserProcess+0x58>)
 80088ea:	2202      	movs	r2, #2
 80088ec:	701a      	strb	r2, [r3, #0]
  break;
 80088ee:	e004      	b.n	80088fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80088f0:	4b05      	ldr	r3, [pc, #20]	; (8008908 <USBH_UserProcess+0x58>)
 80088f2:	2201      	movs	r2, #1
 80088f4:	701a      	strb	r2, [r3, #0]
  break;
 80088f6:	e000      	b.n	80088fa <USBH_UserProcess+0x4a>

  default:
  break;
 80088f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80088fa:	bf00      	nop
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	20000654 	.word	0x20000654

0800890c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08a      	sub	sp, #40	; 0x28
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008914:	f107 0314 	add.w	r3, r7, #20
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	605a      	str	r2, [r3, #4]
 800891e:	609a      	str	r2, [r3, #8]
 8008920:	60da      	str	r2, [r3, #12]
 8008922:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800892c:	d147      	bne.n	80089be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800892e:	2300      	movs	r3, #0
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	4b25      	ldr	r3, [pc, #148]	; (80089c8 <HAL_HCD_MspInit+0xbc>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	4a24      	ldr	r2, [pc, #144]	; (80089c8 <HAL_HCD_MspInit+0xbc>)
 8008938:	f043 0301 	orr.w	r3, r3, #1
 800893c:	6313      	str	r3, [r2, #48]	; 0x30
 800893e:	4b22      	ldr	r3, [pc, #136]	; (80089c8 <HAL_HCD_MspInit+0xbc>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800894a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800894e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008950:	2300      	movs	r3, #0
 8008952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008954:	2300      	movs	r3, #0
 8008956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008958:	f107 0314 	add.w	r3, r7, #20
 800895c:	4619      	mov	r1, r3
 800895e:	481b      	ldr	r0, [pc, #108]	; (80089cc <HAL_HCD_MspInit+0xc0>)
 8008960:	f7f8 fdf6 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008964:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800896a:	2302      	movs	r3, #2
 800896c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800896e:	2300      	movs	r3, #0
 8008970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008972:	2300      	movs	r3, #0
 8008974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008976:	230a      	movs	r3, #10
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800897a:	f107 0314 	add.w	r3, r7, #20
 800897e:	4619      	mov	r1, r3
 8008980:	4812      	ldr	r0, [pc, #72]	; (80089cc <HAL_HCD_MspInit+0xc0>)
 8008982:	f7f8 fde5 	bl	8001550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008986:	4b10      	ldr	r3, [pc, #64]	; (80089c8 <HAL_HCD_MspInit+0xbc>)
 8008988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898a:	4a0f      	ldr	r2, [pc, #60]	; (80089c8 <HAL_HCD_MspInit+0xbc>)
 800898c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008990:	6353      	str	r3, [r2, #52]	; 0x34
 8008992:	2300      	movs	r3, #0
 8008994:	60fb      	str	r3, [r7, #12]
 8008996:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <HAL_HCD_MspInit+0xbc>)
 8008998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899a:	4a0b      	ldr	r2, [pc, #44]	; (80089c8 <HAL_HCD_MspInit+0xbc>)
 800899c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089a0:	6453      	str	r3, [r2, #68]	; 0x44
 80089a2:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <HAL_HCD_MspInit+0xbc>)
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089ae:	2200      	movs	r2, #0
 80089b0:	2100      	movs	r1, #0
 80089b2:	2043      	movs	r0, #67	; 0x43
 80089b4:	f7f8 fd95 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089b8:	2043      	movs	r0, #67	; 0x43
 80089ba:	f7f8 fdae 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089be:	bf00      	nop
 80089c0:	3728      	adds	r7, #40	; 0x28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	40023800 	.word	0x40023800
 80089cc:	40020000 	.word	0x40020000

080089d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe ffed 	bl	80079be <USBH_LL_IncTimer>
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff f825 	bl	8007a4a <USBH_LL_Connect>
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff f82e 	bl	8007a78 <USBH_LL_Disconnect>
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
 8008a30:	4613      	mov	r3, r2
 8008a32:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe ffdf 	bl	8007a12 <USBH_LL_PortEnabled>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe ffdf 	bl	8007a2e <USBH_LL_PortDisabled>
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d12a      	bne.n	8008ae0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a8a:	4a18      	ldr	r2, [pc, #96]	; (8008aec <USBH_LL_Init+0x74>)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a15      	ldr	r2, [pc, #84]	; (8008aec <USBH_LL_Init+0x74>)
 8008a96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a9a:	4b14      	ldr	r3, [pc, #80]	; (8008aec <USBH_LL_Init+0x74>)
 8008a9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008aa0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008aa2:	4b12      	ldr	r3, [pc, #72]	; (8008aec <USBH_LL_Init+0x74>)
 8008aa4:	2208      	movs	r2, #8
 8008aa6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008aa8:	4b10      	ldr	r3, [pc, #64]	; (8008aec <USBH_LL_Init+0x74>)
 8008aaa:	2201      	movs	r2, #1
 8008aac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008aae:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <USBH_LL_Init+0x74>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ab4:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <USBH_LL_Init+0x74>)
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008aba:	4b0c      	ldr	r3, [pc, #48]	; (8008aec <USBH_LL_Init+0x74>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008ac0:	480a      	ldr	r0, [pc, #40]	; (8008aec <USBH_LL_Init+0x74>)
 8008ac2:	f7f8 fefa 	bl	80018ba <HAL_HCD_Init>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008acc:	f7f8 f86c 	bl	8000ba8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ad0:	4806      	ldr	r0, [pc, #24]	; (8008aec <USBH_LL_Init+0x74>)
 8008ad2:	f7f9 fade 	bl	8002092 <HAL_HCD_GetCurrentFrame>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7fe ff60 	bl	80079a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20000658 	.word	0x20000658

08008af0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7f9 fa4d 	bl	8001fa6 <HAL_HCD_Start>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 f95c 	bl	8008dd0 <USBH_Get_USB_Status>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b084      	sub	sp, #16
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7f9 fa55 	bl	8001fec <HAL_HCD_Stop>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 f941 	bl	8008dd0 <USBH_Get_USB_Status>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b64:	2301      	movs	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7f9 fa9d 	bl	80020ae <HAL_HCD_GetCurrentSpeed>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d00c      	beq.n	8008b94 <USBH_LL_GetSpeed+0x38>
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d80d      	bhi.n	8008b9a <USBH_LL_GetSpeed+0x3e>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <USBH_LL_GetSpeed+0x2c>
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d003      	beq.n	8008b8e <USBH_LL_GetSpeed+0x32>
 8008b86:	e008      	b.n	8008b9a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8c:	e008      	b.n	8008ba0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]
    break;
 8008b92:	e005      	b.n	8008ba0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b94:	2302      	movs	r3, #2
 8008b96:	73fb      	strb	r3, [r7, #15]
    break;
 8008b98:	e002      	b.n	8008ba0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9e:	bf00      	nop
  }
  return  speed;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7f9 fa30 	bl	8002026 <HAL_HCD_ResetPort>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 f8ff 	bl	8008dd0 <USBH_Get_USB_Status>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bf2:	78fa      	ldrb	r2, [r7, #3]
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7f9 fa37 	bl	800206a <HAL_HCD_HC_GetXferCount>
 8008bfc:	4603      	mov	r3, r0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c06:	b590      	push	{r4, r7, lr}
 8008c08:	b089      	sub	sp, #36	; 0x24
 8008c0a:	af04      	add	r7, sp, #16
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	4608      	mov	r0, r1
 8008c10:	4611      	mov	r1, r2
 8008c12:	461a      	mov	r2, r3
 8008c14:	4603      	mov	r3, r0
 8008c16:	70fb      	strb	r3, [r7, #3]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70bb      	strb	r3, [r7, #2]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c2e:	787c      	ldrb	r4, [r7, #1]
 8008c30:	78ba      	ldrb	r2, [r7, #2]
 8008c32:	78f9      	ldrb	r1, [r7, #3]
 8008c34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c36:	9302      	str	r3, [sp, #8]
 8008c38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	4623      	mov	r3, r4
 8008c46:	f7f8 fe9a 	bl	800197e <HAL_HCD_HC_Init>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 f8bd 	bl	8008dd0 <USBH_Get_USB_Status>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd90      	pop	{r4, r7, pc}

08008c64 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c7e:	78fa      	ldrb	r2, [r7, #3]
 8008c80:	4611      	mov	r1, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7f8 ff0a 	bl	8001a9c <HAL_HCD_HC_Halt>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f89e 	bl	8008dd0 <USBH_Get_USB_Status>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008ca2:	b590      	push	{r4, r7, lr}
 8008ca4:	b089      	sub	sp, #36	; 0x24
 8008ca6:	af04      	add	r7, sp, #16
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	4608      	mov	r0, r1
 8008cac:	4611      	mov	r1, r2
 8008cae:	461a      	mov	r2, r3
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	70fb      	strb	r3, [r7, #3]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70bb      	strb	r3, [r7, #2]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008cca:	787c      	ldrb	r4, [r7, #1]
 8008ccc:	78ba      	ldrb	r2, [r7, #2]
 8008cce:	78f9      	ldrb	r1, [r7, #3]
 8008cd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008cd4:	9303      	str	r3, [sp, #12]
 8008cd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cd8:	9302      	str	r3, [sp, #8]
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	4623      	mov	r3, r4
 8008ce6:	f7f8 fefd 	bl	8001ae4 <HAL_HCD_HC_SubmitRequest>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 f86d 	bl	8008dd0 <USBH_Get_USB_Status>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd90      	pop	{r4, r7, pc}

08008d04 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d16:	78fa      	ldrb	r2, [r7, #3]
 8008d18:	4611      	mov	r1, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7f9 f991 	bl	8002042 <HAL_HCD_HC_GetURBState>
 8008d20:	4603      	mov	r3, r0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	460b      	mov	r3, r1
 8008d34:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d103      	bne.n	8008d48 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f870 	bl	8008e28 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008d48:	20c8      	movs	r0, #200	; 0xc8
 8008d4a:	f7f8 facb 	bl	80012e4 <HAL_Delay>
  return USBH_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
 8008d64:	4613      	mov	r3, r2
 8008d66:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d6e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	212c      	movs	r1, #44	; 0x2c
 8008d76:	fb01 f303 	mul.w	r3, r1, r3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	333b      	adds	r3, #59	; 0x3b
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d009      	beq.n	8008d98 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	212c      	movs	r1, #44	; 0x2c
 8008d8a:	fb01 f303 	mul.w	r3, r1, r3
 8008d8e:	4413      	add	r3, r2
 8008d90:	3354      	adds	r3, #84	; 0x54
 8008d92:	78ba      	ldrb	r2, [r7, #2]
 8008d94:	701a      	strb	r2, [r3, #0]
 8008d96:	e008      	b.n	8008daa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	212c      	movs	r1, #44	; 0x2c
 8008d9e:	fb01 f303 	mul.w	r3, r1, r3
 8008da2:	4413      	add	r3, r2
 8008da4:	3355      	adds	r3, #85	; 0x55
 8008da6:	78ba      	ldrb	r2, [r7, #2]
 8008da8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7f8 fa8f 	bl	80012e4 <HAL_Delay>
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dde:	79fb      	ldrb	r3, [r7, #7]
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d817      	bhi.n	8008e14 <USBH_Get_USB_Status+0x44>
 8008de4:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <USBH_Get_USB_Status+0x1c>)
 8008de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dea:	bf00      	nop
 8008dec:	08008dfd 	.word	0x08008dfd
 8008df0:	08008e03 	.word	0x08008e03
 8008df4:	08008e09 	.word	0x08008e09
 8008df8:	08008e0f 	.word	0x08008e0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8008e00:	e00b      	b.n	8008e1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008e02:	2302      	movs	r3, #2
 8008e04:	73fb      	strb	r3, [r7, #15]
    break;
 8008e06:	e008      	b.n	8008e1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0c:	e005      	b.n	8008e1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008e0e:	2302      	movs	r3, #2
 8008e10:	73fb      	strb	r3, [r7, #15]
    break;
 8008e12:	e002      	b.n	8008e1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008e14:	2302      	movs	r3, #2
 8008e16:	73fb      	strb	r3, [r7, #15]
    break;
 8008e18:	bf00      	nop
  }
  return usb_status;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
 8008e40:	e001      	b.n	8008e46 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008e42:	2301      	movs	r3, #1
 8008e44:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	4803      	ldr	r0, [pc, #12]	; (8008e5c <MX_DriverVbusFS+0x34>)
 8008e4e:	f7f8 fd1b 	bl	8001888 <HAL_GPIO_WritePin>
}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	40020800 	.word	0x40020800

08008e60 <__errno>:
 8008e60:	4b01      	ldr	r3, [pc, #4]	; (8008e68 <__errno+0x8>)
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	2000002c 	.word	0x2000002c

08008e6c <__libc_init_array>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	4d0d      	ldr	r5, [pc, #52]	; (8008ea4 <__libc_init_array+0x38>)
 8008e70:	4c0d      	ldr	r4, [pc, #52]	; (8008ea8 <__libc_init_array+0x3c>)
 8008e72:	1b64      	subs	r4, r4, r5
 8008e74:	10a4      	asrs	r4, r4, #2
 8008e76:	2600      	movs	r6, #0
 8008e78:	42a6      	cmp	r6, r4
 8008e7a:	d109      	bne.n	8008e90 <__libc_init_array+0x24>
 8008e7c:	4d0b      	ldr	r5, [pc, #44]	; (8008eac <__libc_init_array+0x40>)
 8008e7e:	4c0c      	ldr	r4, [pc, #48]	; (8008eb0 <__libc_init_array+0x44>)
 8008e80:	f000 ffbe 	bl	8009e00 <_init>
 8008e84:	1b64      	subs	r4, r4, r5
 8008e86:	10a4      	asrs	r4, r4, #2
 8008e88:	2600      	movs	r6, #0
 8008e8a:	42a6      	cmp	r6, r4
 8008e8c:	d105      	bne.n	8008e9a <__libc_init_array+0x2e>
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
 8008e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e94:	4798      	blx	r3
 8008e96:	3601      	adds	r6, #1
 8008e98:	e7ee      	b.n	8008e78 <__libc_init_array+0xc>
 8008e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e9e:	4798      	blx	r3
 8008ea0:	3601      	adds	r6, #1
 8008ea2:	e7f2      	b.n	8008e8a <__libc_init_array+0x1e>
 8008ea4:	08009f00 	.word	0x08009f00
 8008ea8:	08009f00 	.word	0x08009f00
 8008eac:	08009f00 	.word	0x08009f00
 8008eb0:	08009f04 	.word	0x08009f04

08008eb4 <malloc>:
 8008eb4:	4b02      	ldr	r3, [pc, #8]	; (8008ec0 <malloc+0xc>)
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	f000 b87f 	b.w	8008fbc <_malloc_r>
 8008ebe:	bf00      	nop
 8008ec0:	2000002c 	.word	0x2000002c

08008ec4 <free>:
 8008ec4:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <free+0xc>)
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	f000 b80b 	b.w	8008ee4 <_free_r>
 8008ece:	bf00      	nop
 8008ed0:	2000002c 	.word	0x2000002c

08008ed4 <memset>:
 8008ed4:	4402      	add	r2, r0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d100      	bne.n	8008ede <memset+0xa>
 8008edc:	4770      	bx	lr
 8008ede:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee2:	e7f9      	b.n	8008ed8 <memset+0x4>

08008ee4 <_free_r>:
 8008ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ee6:	2900      	cmp	r1, #0
 8008ee8:	d044      	beq.n	8008f74 <_free_r+0x90>
 8008eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eee:	9001      	str	r0, [sp, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ef6:	bfb8      	it	lt
 8008ef8:	18e4      	addlt	r4, r4, r3
 8008efa:	f000 f9f3 	bl	80092e4 <__malloc_lock>
 8008efe:	4a1e      	ldr	r2, [pc, #120]	; (8008f78 <_free_r+0x94>)
 8008f00:	9801      	ldr	r0, [sp, #4]
 8008f02:	6813      	ldr	r3, [r2, #0]
 8008f04:	b933      	cbnz	r3, 8008f14 <_free_r+0x30>
 8008f06:	6063      	str	r3, [r4, #4]
 8008f08:	6014      	str	r4, [r2, #0]
 8008f0a:	b003      	add	sp, #12
 8008f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f10:	f000 b9ee 	b.w	80092f0 <__malloc_unlock>
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	d908      	bls.n	8008f2a <_free_r+0x46>
 8008f18:	6825      	ldr	r5, [r4, #0]
 8008f1a:	1961      	adds	r1, r4, r5
 8008f1c:	428b      	cmp	r3, r1
 8008f1e:	bf01      	itttt	eq
 8008f20:	6819      	ldreq	r1, [r3, #0]
 8008f22:	685b      	ldreq	r3, [r3, #4]
 8008f24:	1949      	addeq	r1, r1, r5
 8008f26:	6021      	streq	r1, [r4, #0]
 8008f28:	e7ed      	b.n	8008f06 <_free_r+0x22>
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	b10b      	cbz	r3, 8008f34 <_free_r+0x50>
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	d9fa      	bls.n	8008f2a <_free_r+0x46>
 8008f34:	6811      	ldr	r1, [r2, #0]
 8008f36:	1855      	adds	r5, r2, r1
 8008f38:	42a5      	cmp	r5, r4
 8008f3a:	d10b      	bne.n	8008f54 <_free_r+0x70>
 8008f3c:	6824      	ldr	r4, [r4, #0]
 8008f3e:	4421      	add	r1, r4
 8008f40:	1854      	adds	r4, r2, r1
 8008f42:	42a3      	cmp	r3, r4
 8008f44:	6011      	str	r1, [r2, #0]
 8008f46:	d1e0      	bne.n	8008f0a <_free_r+0x26>
 8008f48:	681c      	ldr	r4, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	6053      	str	r3, [r2, #4]
 8008f4e:	4421      	add	r1, r4
 8008f50:	6011      	str	r1, [r2, #0]
 8008f52:	e7da      	b.n	8008f0a <_free_r+0x26>
 8008f54:	d902      	bls.n	8008f5c <_free_r+0x78>
 8008f56:	230c      	movs	r3, #12
 8008f58:	6003      	str	r3, [r0, #0]
 8008f5a:	e7d6      	b.n	8008f0a <_free_r+0x26>
 8008f5c:	6825      	ldr	r5, [r4, #0]
 8008f5e:	1961      	adds	r1, r4, r5
 8008f60:	428b      	cmp	r3, r1
 8008f62:	bf04      	itt	eq
 8008f64:	6819      	ldreq	r1, [r3, #0]
 8008f66:	685b      	ldreq	r3, [r3, #4]
 8008f68:	6063      	str	r3, [r4, #4]
 8008f6a:	bf04      	itt	eq
 8008f6c:	1949      	addeq	r1, r1, r5
 8008f6e:	6021      	streq	r1, [r4, #0]
 8008f70:	6054      	str	r4, [r2, #4]
 8008f72:	e7ca      	b.n	8008f0a <_free_r+0x26>
 8008f74:	b003      	add	sp, #12
 8008f76:	bd30      	pop	{r4, r5, pc}
 8008f78:	2000095c 	.word	0x2000095c

08008f7c <sbrk_aligned>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	4e0e      	ldr	r6, [pc, #56]	; (8008fb8 <sbrk_aligned+0x3c>)
 8008f80:	460c      	mov	r4, r1
 8008f82:	6831      	ldr	r1, [r6, #0]
 8008f84:	4605      	mov	r5, r0
 8008f86:	b911      	cbnz	r1, 8008f8e <sbrk_aligned+0x12>
 8008f88:	f000 f8a4 	bl	80090d4 <_sbrk_r>
 8008f8c:	6030      	str	r0, [r6, #0]
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4628      	mov	r0, r5
 8008f92:	f000 f89f 	bl	80090d4 <_sbrk_r>
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	d00a      	beq.n	8008fb0 <sbrk_aligned+0x34>
 8008f9a:	1cc4      	adds	r4, r0, #3
 8008f9c:	f024 0403 	bic.w	r4, r4, #3
 8008fa0:	42a0      	cmp	r0, r4
 8008fa2:	d007      	beq.n	8008fb4 <sbrk_aligned+0x38>
 8008fa4:	1a21      	subs	r1, r4, r0
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f000 f894 	bl	80090d4 <_sbrk_r>
 8008fac:	3001      	adds	r0, #1
 8008fae:	d101      	bne.n	8008fb4 <sbrk_aligned+0x38>
 8008fb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
 8008fb8:	20000960 	.word	0x20000960

08008fbc <_malloc_r>:
 8008fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc0:	1ccd      	adds	r5, r1, #3
 8008fc2:	f025 0503 	bic.w	r5, r5, #3
 8008fc6:	3508      	adds	r5, #8
 8008fc8:	2d0c      	cmp	r5, #12
 8008fca:	bf38      	it	cc
 8008fcc:	250c      	movcc	r5, #12
 8008fce:	2d00      	cmp	r5, #0
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	db01      	blt.n	8008fd8 <_malloc_r+0x1c>
 8008fd4:	42a9      	cmp	r1, r5
 8008fd6:	d905      	bls.n	8008fe4 <_malloc_r+0x28>
 8008fd8:	230c      	movs	r3, #12
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	2600      	movs	r6, #0
 8008fde:	4630      	mov	r0, r6
 8008fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe4:	4e2e      	ldr	r6, [pc, #184]	; (80090a0 <_malloc_r+0xe4>)
 8008fe6:	f000 f97d 	bl	80092e4 <__malloc_lock>
 8008fea:	6833      	ldr	r3, [r6, #0]
 8008fec:	461c      	mov	r4, r3
 8008fee:	bb34      	cbnz	r4, 800903e <_malloc_r+0x82>
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	f7ff ffc2 	bl	8008f7c <sbrk_aligned>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	d14d      	bne.n	800909a <_malloc_r+0xde>
 8008ffe:	6834      	ldr	r4, [r6, #0]
 8009000:	4626      	mov	r6, r4
 8009002:	2e00      	cmp	r6, #0
 8009004:	d140      	bne.n	8009088 <_malloc_r+0xcc>
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	4631      	mov	r1, r6
 800900a:	4638      	mov	r0, r7
 800900c:	eb04 0803 	add.w	r8, r4, r3
 8009010:	f000 f860 	bl	80090d4 <_sbrk_r>
 8009014:	4580      	cmp	r8, r0
 8009016:	d13a      	bne.n	800908e <_malloc_r+0xd2>
 8009018:	6821      	ldr	r1, [r4, #0]
 800901a:	3503      	adds	r5, #3
 800901c:	1a6d      	subs	r5, r5, r1
 800901e:	f025 0503 	bic.w	r5, r5, #3
 8009022:	3508      	adds	r5, #8
 8009024:	2d0c      	cmp	r5, #12
 8009026:	bf38      	it	cc
 8009028:	250c      	movcc	r5, #12
 800902a:	4629      	mov	r1, r5
 800902c:	4638      	mov	r0, r7
 800902e:	f7ff ffa5 	bl	8008f7c <sbrk_aligned>
 8009032:	3001      	adds	r0, #1
 8009034:	d02b      	beq.n	800908e <_malloc_r+0xd2>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	442b      	add	r3, r5
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	e00e      	b.n	800905c <_malloc_r+0xa0>
 800903e:	6822      	ldr	r2, [r4, #0]
 8009040:	1b52      	subs	r2, r2, r5
 8009042:	d41e      	bmi.n	8009082 <_malloc_r+0xc6>
 8009044:	2a0b      	cmp	r2, #11
 8009046:	d916      	bls.n	8009076 <_malloc_r+0xba>
 8009048:	1961      	adds	r1, r4, r5
 800904a:	42a3      	cmp	r3, r4
 800904c:	6025      	str	r5, [r4, #0]
 800904e:	bf18      	it	ne
 8009050:	6059      	strne	r1, [r3, #4]
 8009052:	6863      	ldr	r3, [r4, #4]
 8009054:	bf08      	it	eq
 8009056:	6031      	streq	r1, [r6, #0]
 8009058:	5162      	str	r2, [r4, r5]
 800905a:	604b      	str	r3, [r1, #4]
 800905c:	4638      	mov	r0, r7
 800905e:	f104 060b 	add.w	r6, r4, #11
 8009062:	f000 f945 	bl	80092f0 <__malloc_unlock>
 8009066:	f026 0607 	bic.w	r6, r6, #7
 800906a:	1d23      	adds	r3, r4, #4
 800906c:	1af2      	subs	r2, r6, r3
 800906e:	d0b6      	beq.n	8008fde <_malloc_r+0x22>
 8009070:	1b9b      	subs	r3, r3, r6
 8009072:	50a3      	str	r3, [r4, r2]
 8009074:	e7b3      	b.n	8008fde <_malloc_r+0x22>
 8009076:	6862      	ldr	r2, [r4, #4]
 8009078:	42a3      	cmp	r3, r4
 800907a:	bf0c      	ite	eq
 800907c:	6032      	streq	r2, [r6, #0]
 800907e:	605a      	strne	r2, [r3, #4]
 8009080:	e7ec      	b.n	800905c <_malloc_r+0xa0>
 8009082:	4623      	mov	r3, r4
 8009084:	6864      	ldr	r4, [r4, #4]
 8009086:	e7b2      	b.n	8008fee <_malloc_r+0x32>
 8009088:	4634      	mov	r4, r6
 800908a:	6876      	ldr	r6, [r6, #4]
 800908c:	e7b9      	b.n	8009002 <_malloc_r+0x46>
 800908e:	230c      	movs	r3, #12
 8009090:	603b      	str	r3, [r7, #0]
 8009092:	4638      	mov	r0, r7
 8009094:	f000 f92c 	bl	80092f0 <__malloc_unlock>
 8009098:	e7a1      	b.n	8008fde <_malloc_r+0x22>
 800909a:	6025      	str	r5, [r4, #0]
 800909c:	e7de      	b.n	800905c <_malloc_r+0xa0>
 800909e:	bf00      	nop
 80090a0:	2000095c 	.word	0x2000095c

080090a4 <iprintf>:
 80090a4:	b40f      	push	{r0, r1, r2, r3}
 80090a6:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <iprintf+0x2c>)
 80090a8:	b513      	push	{r0, r1, r4, lr}
 80090aa:	681c      	ldr	r4, [r3, #0]
 80090ac:	b124      	cbz	r4, 80090b8 <iprintf+0x14>
 80090ae:	69a3      	ldr	r3, [r4, #24]
 80090b0:	b913      	cbnz	r3, 80090b8 <iprintf+0x14>
 80090b2:	4620      	mov	r0, r4
 80090b4:	f000 f876 	bl	80091a4 <__sinit>
 80090b8:	ab05      	add	r3, sp, #20
 80090ba:	9a04      	ldr	r2, [sp, #16]
 80090bc:	68a1      	ldr	r1, [r4, #8]
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 f945 	bl	8009350 <_vfiprintf_r>
 80090c6:	b002      	add	sp, #8
 80090c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090cc:	b004      	add	sp, #16
 80090ce:	4770      	bx	lr
 80090d0:	2000002c 	.word	0x2000002c

080090d4 <_sbrk_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4d06      	ldr	r5, [pc, #24]	; (80090f0 <_sbrk_r+0x1c>)
 80090d8:	2300      	movs	r3, #0
 80090da:	4604      	mov	r4, r0
 80090dc:	4608      	mov	r0, r1
 80090de:	602b      	str	r3, [r5, #0]
 80090e0:	f7f8 f81c 	bl	800111c <_sbrk>
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	d102      	bne.n	80090ee <_sbrk_r+0x1a>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	b103      	cbz	r3, 80090ee <_sbrk_r+0x1a>
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	20000968 	.word	0x20000968

080090f4 <std>:
 80090f4:	2300      	movs	r3, #0
 80090f6:	b510      	push	{r4, lr}
 80090f8:	4604      	mov	r4, r0
 80090fa:	e9c0 3300 	strd	r3, r3, [r0]
 80090fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009102:	6083      	str	r3, [r0, #8]
 8009104:	8181      	strh	r1, [r0, #12]
 8009106:	6643      	str	r3, [r0, #100]	; 0x64
 8009108:	81c2      	strh	r2, [r0, #14]
 800910a:	6183      	str	r3, [r0, #24]
 800910c:	4619      	mov	r1, r3
 800910e:	2208      	movs	r2, #8
 8009110:	305c      	adds	r0, #92	; 0x5c
 8009112:	f7ff fedf 	bl	8008ed4 <memset>
 8009116:	4b05      	ldr	r3, [pc, #20]	; (800912c <std+0x38>)
 8009118:	6263      	str	r3, [r4, #36]	; 0x24
 800911a:	4b05      	ldr	r3, [pc, #20]	; (8009130 <std+0x3c>)
 800911c:	62a3      	str	r3, [r4, #40]	; 0x28
 800911e:	4b05      	ldr	r3, [pc, #20]	; (8009134 <std+0x40>)
 8009120:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009122:	4b05      	ldr	r3, [pc, #20]	; (8009138 <std+0x44>)
 8009124:	6224      	str	r4, [r4, #32]
 8009126:	6323      	str	r3, [r4, #48]	; 0x30
 8009128:	bd10      	pop	{r4, pc}
 800912a:	bf00      	nop
 800912c:	080098d9 	.word	0x080098d9
 8009130:	080098fb 	.word	0x080098fb
 8009134:	08009933 	.word	0x08009933
 8009138:	08009957 	.word	0x08009957

0800913c <_cleanup_r>:
 800913c:	4901      	ldr	r1, [pc, #4]	; (8009144 <_cleanup_r+0x8>)
 800913e:	f000 b8af 	b.w	80092a0 <_fwalk_reent>
 8009142:	bf00      	nop
 8009144:	08009c31 	.word	0x08009c31

08009148 <__sfmoreglue>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	2268      	movs	r2, #104	; 0x68
 800914c:	1e4d      	subs	r5, r1, #1
 800914e:	4355      	muls	r5, r2
 8009150:	460e      	mov	r6, r1
 8009152:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009156:	f7ff ff31 	bl	8008fbc <_malloc_r>
 800915a:	4604      	mov	r4, r0
 800915c:	b140      	cbz	r0, 8009170 <__sfmoreglue+0x28>
 800915e:	2100      	movs	r1, #0
 8009160:	e9c0 1600 	strd	r1, r6, [r0]
 8009164:	300c      	adds	r0, #12
 8009166:	60a0      	str	r0, [r4, #8]
 8009168:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800916c:	f7ff feb2 	bl	8008ed4 <memset>
 8009170:	4620      	mov	r0, r4
 8009172:	bd70      	pop	{r4, r5, r6, pc}

08009174 <__sfp_lock_acquire>:
 8009174:	4801      	ldr	r0, [pc, #4]	; (800917c <__sfp_lock_acquire+0x8>)
 8009176:	f000 b8b3 	b.w	80092e0 <__retarget_lock_acquire_recursive>
 800917a:	bf00      	nop
 800917c:	20000965 	.word	0x20000965

08009180 <__sfp_lock_release>:
 8009180:	4801      	ldr	r0, [pc, #4]	; (8009188 <__sfp_lock_release+0x8>)
 8009182:	f000 b8ae 	b.w	80092e2 <__retarget_lock_release_recursive>
 8009186:	bf00      	nop
 8009188:	20000965 	.word	0x20000965

0800918c <__sinit_lock_acquire>:
 800918c:	4801      	ldr	r0, [pc, #4]	; (8009194 <__sinit_lock_acquire+0x8>)
 800918e:	f000 b8a7 	b.w	80092e0 <__retarget_lock_acquire_recursive>
 8009192:	bf00      	nop
 8009194:	20000966 	.word	0x20000966

08009198 <__sinit_lock_release>:
 8009198:	4801      	ldr	r0, [pc, #4]	; (80091a0 <__sinit_lock_release+0x8>)
 800919a:	f000 b8a2 	b.w	80092e2 <__retarget_lock_release_recursive>
 800919e:	bf00      	nop
 80091a0:	20000966 	.word	0x20000966

080091a4 <__sinit>:
 80091a4:	b510      	push	{r4, lr}
 80091a6:	4604      	mov	r4, r0
 80091a8:	f7ff fff0 	bl	800918c <__sinit_lock_acquire>
 80091ac:	69a3      	ldr	r3, [r4, #24]
 80091ae:	b11b      	cbz	r3, 80091b8 <__sinit+0x14>
 80091b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b4:	f7ff bff0 	b.w	8009198 <__sinit_lock_release>
 80091b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091bc:	6523      	str	r3, [r4, #80]	; 0x50
 80091be:	4b13      	ldr	r3, [pc, #76]	; (800920c <__sinit+0x68>)
 80091c0:	4a13      	ldr	r2, [pc, #76]	; (8009210 <__sinit+0x6c>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80091c6:	42a3      	cmp	r3, r4
 80091c8:	bf04      	itt	eq
 80091ca:	2301      	moveq	r3, #1
 80091cc:	61a3      	streq	r3, [r4, #24]
 80091ce:	4620      	mov	r0, r4
 80091d0:	f000 f820 	bl	8009214 <__sfp>
 80091d4:	6060      	str	r0, [r4, #4]
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 f81c 	bl	8009214 <__sfp>
 80091dc:	60a0      	str	r0, [r4, #8]
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 f818 	bl	8009214 <__sfp>
 80091e4:	2200      	movs	r2, #0
 80091e6:	60e0      	str	r0, [r4, #12]
 80091e8:	2104      	movs	r1, #4
 80091ea:	6860      	ldr	r0, [r4, #4]
 80091ec:	f7ff ff82 	bl	80090f4 <std>
 80091f0:	68a0      	ldr	r0, [r4, #8]
 80091f2:	2201      	movs	r2, #1
 80091f4:	2109      	movs	r1, #9
 80091f6:	f7ff ff7d 	bl	80090f4 <std>
 80091fa:	68e0      	ldr	r0, [r4, #12]
 80091fc:	2202      	movs	r2, #2
 80091fe:	2112      	movs	r1, #18
 8009200:	f7ff ff78 	bl	80090f4 <std>
 8009204:	2301      	movs	r3, #1
 8009206:	61a3      	str	r3, [r4, #24]
 8009208:	e7d2      	b.n	80091b0 <__sinit+0xc>
 800920a:	bf00      	nop
 800920c:	08009e60 	.word	0x08009e60
 8009210:	0800913d 	.word	0x0800913d

08009214 <__sfp>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	4607      	mov	r7, r0
 8009218:	f7ff ffac 	bl	8009174 <__sfp_lock_acquire>
 800921c:	4b1e      	ldr	r3, [pc, #120]	; (8009298 <__sfp+0x84>)
 800921e:	681e      	ldr	r6, [r3, #0]
 8009220:	69b3      	ldr	r3, [r6, #24]
 8009222:	b913      	cbnz	r3, 800922a <__sfp+0x16>
 8009224:	4630      	mov	r0, r6
 8009226:	f7ff ffbd 	bl	80091a4 <__sinit>
 800922a:	3648      	adds	r6, #72	; 0x48
 800922c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009230:	3b01      	subs	r3, #1
 8009232:	d503      	bpl.n	800923c <__sfp+0x28>
 8009234:	6833      	ldr	r3, [r6, #0]
 8009236:	b30b      	cbz	r3, 800927c <__sfp+0x68>
 8009238:	6836      	ldr	r6, [r6, #0]
 800923a:	e7f7      	b.n	800922c <__sfp+0x18>
 800923c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009240:	b9d5      	cbnz	r5, 8009278 <__sfp+0x64>
 8009242:	4b16      	ldr	r3, [pc, #88]	; (800929c <__sfp+0x88>)
 8009244:	60e3      	str	r3, [r4, #12]
 8009246:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800924a:	6665      	str	r5, [r4, #100]	; 0x64
 800924c:	f000 f847 	bl	80092de <__retarget_lock_init_recursive>
 8009250:	f7ff ff96 	bl	8009180 <__sfp_lock_release>
 8009254:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009258:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800925c:	6025      	str	r5, [r4, #0]
 800925e:	61a5      	str	r5, [r4, #24]
 8009260:	2208      	movs	r2, #8
 8009262:	4629      	mov	r1, r5
 8009264:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009268:	f7ff fe34 	bl	8008ed4 <memset>
 800926c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009270:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009274:	4620      	mov	r0, r4
 8009276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009278:	3468      	adds	r4, #104	; 0x68
 800927a:	e7d9      	b.n	8009230 <__sfp+0x1c>
 800927c:	2104      	movs	r1, #4
 800927e:	4638      	mov	r0, r7
 8009280:	f7ff ff62 	bl	8009148 <__sfmoreglue>
 8009284:	4604      	mov	r4, r0
 8009286:	6030      	str	r0, [r6, #0]
 8009288:	2800      	cmp	r0, #0
 800928a:	d1d5      	bne.n	8009238 <__sfp+0x24>
 800928c:	f7ff ff78 	bl	8009180 <__sfp_lock_release>
 8009290:	230c      	movs	r3, #12
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	e7ee      	b.n	8009274 <__sfp+0x60>
 8009296:	bf00      	nop
 8009298:	08009e60 	.word	0x08009e60
 800929c:	ffff0001 	.word	0xffff0001

080092a0 <_fwalk_reent>:
 80092a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a4:	4606      	mov	r6, r0
 80092a6:	4688      	mov	r8, r1
 80092a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092ac:	2700      	movs	r7, #0
 80092ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092b2:	f1b9 0901 	subs.w	r9, r9, #1
 80092b6:	d505      	bpl.n	80092c4 <_fwalk_reent+0x24>
 80092b8:	6824      	ldr	r4, [r4, #0]
 80092ba:	2c00      	cmp	r4, #0
 80092bc:	d1f7      	bne.n	80092ae <_fwalk_reent+0xe>
 80092be:	4638      	mov	r0, r7
 80092c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c4:	89ab      	ldrh	r3, [r5, #12]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d907      	bls.n	80092da <_fwalk_reent+0x3a>
 80092ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092ce:	3301      	adds	r3, #1
 80092d0:	d003      	beq.n	80092da <_fwalk_reent+0x3a>
 80092d2:	4629      	mov	r1, r5
 80092d4:	4630      	mov	r0, r6
 80092d6:	47c0      	blx	r8
 80092d8:	4307      	orrs	r7, r0
 80092da:	3568      	adds	r5, #104	; 0x68
 80092dc:	e7e9      	b.n	80092b2 <_fwalk_reent+0x12>

080092de <__retarget_lock_init_recursive>:
 80092de:	4770      	bx	lr

080092e0 <__retarget_lock_acquire_recursive>:
 80092e0:	4770      	bx	lr

080092e2 <__retarget_lock_release_recursive>:
 80092e2:	4770      	bx	lr

080092e4 <__malloc_lock>:
 80092e4:	4801      	ldr	r0, [pc, #4]	; (80092ec <__malloc_lock+0x8>)
 80092e6:	f7ff bffb 	b.w	80092e0 <__retarget_lock_acquire_recursive>
 80092ea:	bf00      	nop
 80092ec:	20000964 	.word	0x20000964

080092f0 <__malloc_unlock>:
 80092f0:	4801      	ldr	r0, [pc, #4]	; (80092f8 <__malloc_unlock+0x8>)
 80092f2:	f7ff bff6 	b.w	80092e2 <__retarget_lock_release_recursive>
 80092f6:	bf00      	nop
 80092f8:	20000964 	.word	0x20000964

080092fc <__sfputc_r>:
 80092fc:	6893      	ldr	r3, [r2, #8]
 80092fe:	3b01      	subs	r3, #1
 8009300:	2b00      	cmp	r3, #0
 8009302:	b410      	push	{r4}
 8009304:	6093      	str	r3, [r2, #8]
 8009306:	da08      	bge.n	800931a <__sfputc_r+0x1e>
 8009308:	6994      	ldr	r4, [r2, #24]
 800930a:	42a3      	cmp	r3, r4
 800930c:	db01      	blt.n	8009312 <__sfputc_r+0x16>
 800930e:	290a      	cmp	r1, #10
 8009310:	d103      	bne.n	800931a <__sfputc_r+0x1e>
 8009312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009316:	f000 bb23 	b.w	8009960 <__swbuf_r>
 800931a:	6813      	ldr	r3, [r2, #0]
 800931c:	1c58      	adds	r0, r3, #1
 800931e:	6010      	str	r0, [r2, #0]
 8009320:	7019      	strb	r1, [r3, #0]
 8009322:	4608      	mov	r0, r1
 8009324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009328:	4770      	bx	lr

0800932a <__sfputs_r>:
 800932a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932c:	4606      	mov	r6, r0
 800932e:	460f      	mov	r7, r1
 8009330:	4614      	mov	r4, r2
 8009332:	18d5      	adds	r5, r2, r3
 8009334:	42ac      	cmp	r4, r5
 8009336:	d101      	bne.n	800933c <__sfputs_r+0x12>
 8009338:	2000      	movs	r0, #0
 800933a:	e007      	b.n	800934c <__sfputs_r+0x22>
 800933c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009340:	463a      	mov	r2, r7
 8009342:	4630      	mov	r0, r6
 8009344:	f7ff ffda 	bl	80092fc <__sfputc_r>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d1f3      	bne.n	8009334 <__sfputs_r+0xa>
 800934c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009350 <_vfiprintf_r>:
 8009350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	460d      	mov	r5, r1
 8009356:	b09d      	sub	sp, #116	; 0x74
 8009358:	4614      	mov	r4, r2
 800935a:	4698      	mov	r8, r3
 800935c:	4606      	mov	r6, r0
 800935e:	b118      	cbz	r0, 8009368 <_vfiprintf_r+0x18>
 8009360:	6983      	ldr	r3, [r0, #24]
 8009362:	b90b      	cbnz	r3, 8009368 <_vfiprintf_r+0x18>
 8009364:	f7ff ff1e 	bl	80091a4 <__sinit>
 8009368:	4b89      	ldr	r3, [pc, #548]	; (8009590 <_vfiprintf_r+0x240>)
 800936a:	429d      	cmp	r5, r3
 800936c:	d11b      	bne.n	80093a6 <_vfiprintf_r+0x56>
 800936e:	6875      	ldr	r5, [r6, #4]
 8009370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009372:	07d9      	lsls	r1, r3, #31
 8009374:	d405      	bmi.n	8009382 <_vfiprintf_r+0x32>
 8009376:	89ab      	ldrh	r3, [r5, #12]
 8009378:	059a      	lsls	r2, r3, #22
 800937a:	d402      	bmi.n	8009382 <_vfiprintf_r+0x32>
 800937c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800937e:	f7ff ffaf 	bl	80092e0 <__retarget_lock_acquire_recursive>
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	071b      	lsls	r3, r3, #28
 8009386:	d501      	bpl.n	800938c <_vfiprintf_r+0x3c>
 8009388:	692b      	ldr	r3, [r5, #16]
 800938a:	b9eb      	cbnz	r3, 80093c8 <_vfiprintf_r+0x78>
 800938c:	4629      	mov	r1, r5
 800938e:	4630      	mov	r0, r6
 8009390:	f000 fb4a 	bl	8009a28 <__swsetup_r>
 8009394:	b1c0      	cbz	r0, 80093c8 <_vfiprintf_r+0x78>
 8009396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009398:	07dc      	lsls	r4, r3, #31
 800939a:	d50e      	bpl.n	80093ba <_vfiprintf_r+0x6a>
 800939c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093a0:	b01d      	add	sp, #116	; 0x74
 80093a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a6:	4b7b      	ldr	r3, [pc, #492]	; (8009594 <_vfiprintf_r+0x244>)
 80093a8:	429d      	cmp	r5, r3
 80093aa:	d101      	bne.n	80093b0 <_vfiprintf_r+0x60>
 80093ac:	68b5      	ldr	r5, [r6, #8]
 80093ae:	e7df      	b.n	8009370 <_vfiprintf_r+0x20>
 80093b0:	4b79      	ldr	r3, [pc, #484]	; (8009598 <_vfiprintf_r+0x248>)
 80093b2:	429d      	cmp	r5, r3
 80093b4:	bf08      	it	eq
 80093b6:	68f5      	ldreq	r5, [r6, #12]
 80093b8:	e7da      	b.n	8009370 <_vfiprintf_r+0x20>
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	0598      	lsls	r0, r3, #22
 80093be:	d4ed      	bmi.n	800939c <_vfiprintf_r+0x4c>
 80093c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093c2:	f7ff ff8e 	bl	80092e2 <__retarget_lock_release_recursive>
 80093c6:	e7e9      	b.n	800939c <_vfiprintf_r+0x4c>
 80093c8:	2300      	movs	r3, #0
 80093ca:	9309      	str	r3, [sp, #36]	; 0x24
 80093cc:	2320      	movs	r3, #32
 80093ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80093d6:	2330      	movs	r3, #48	; 0x30
 80093d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800959c <_vfiprintf_r+0x24c>
 80093dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093e0:	f04f 0901 	mov.w	r9, #1
 80093e4:	4623      	mov	r3, r4
 80093e6:	469a      	mov	sl, r3
 80093e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ec:	b10a      	cbz	r2, 80093f2 <_vfiprintf_r+0xa2>
 80093ee:	2a25      	cmp	r2, #37	; 0x25
 80093f0:	d1f9      	bne.n	80093e6 <_vfiprintf_r+0x96>
 80093f2:	ebba 0b04 	subs.w	fp, sl, r4
 80093f6:	d00b      	beq.n	8009410 <_vfiprintf_r+0xc0>
 80093f8:	465b      	mov	r3, fp
 80093fa:	4622      	mov	r2, r4
 80093fc:	4629      	mov	r1, r5
 80093fe:	4630      	mov	r0, r6
 8009400:	f7ff ff93 	bl	800932a <__sfputs_r>
 8009404:	3001      	adds	r0, #1
 8009406:	f000 80aa 	beq.w	800955e <_vfiprintf_r+0x20e>
 800940a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800940c:	445a      	add	r2, fp
 800940e:	9209      	str	r2, [sp, #36]	; 0x24
 8009410:	f89a 3000 	ldrb.w	r3, [sl]
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 80a2 	beq.w	800955e <_vfiprintf_r+0x20e>
 800941a:	2300      	movs	r3, #0
 800941c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009424:	f10a 0a01 	add.w	sl, sl, #1
 8009428:	9304      	str	r3, [sp, #16]
 800942a:	9307      	str	r3, [sp, #28]
 800942c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009430:	931a      	str	r3, [sp, #104]	; 0x68
 8009432:	4654      	mov	r4, sl
 8009434:	2205      	movs	r2, #5
 8009436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943a:	4858      	ldr	r0, [pc, #352]	; (800959c <_vfiprintf_r+0x24c>)
 800943c:	f7f6 fec8 	bl	80001d0 <memchr>
 8009440:	9a04      	ldr	r2, [sp, #16]
 8009442:	b9d8      	cbnz	r0, 800947c <_vfiprintf_r+0x12c>
 8009444:	06d1      	lsls	r1, r2, #27
 8009446:	bf44      	itt	mi
 8009448:	2320      	movmi	r3, #32
 800944a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800944e:	0713      	lsls	r3, r2, #28
 8009450:	bf44      	itt	mi
 8009452:	232b      	movmi	r3, #43	; 0x2b
 8009454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009458:	f89a 3000 	ldrb.w	r3, [sl]
 800945c:	2b2a      	cmp	r3, #42	; 0x2a
 800945e:	d015      	beq.n	800948c <_vfiprintf_r+0x13c>
 8009460:	9a07      	ldr	r2, [sp, #28]
 8009462:	4654      	mov	r4, sl
 8009464:	2000      	movs	r0, #0
 8009466:	f04f 0c0a 	mov.w	ip, #10
 800946a:	4621      	mov	r1, r4
 800946c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009470:	3b30      	subs	r3, #48	; 0x30
 8009472:	2b09      	cmp	r3, #9
 8009474:	d94e      	bls.n	8009514 <_vfiprintf_r+0x1c4>
 8009476:	b1b0      	cbz	r0, 80094a6 <_vfiprintf_r+0x156>
 8009478:	9207      	str	r2, [sp, #28]
 800947a:	e014      	b.n	80094a6 <_vfiprintf_r+0x156>
 800947c:	eba0 0308 	sub.w	r3, r0, r8
 8009480:	fa09 f303 	lsl.w	r3, r9, r3
 8009484:	4313      	orrs	r3, r2
 8009486:	9304      	str	r3, [sp, #16]
 8009488:	46a2      	mov	sl, r4
 800948a:	e7d2      	b.n	8009432 <_vfiprintf_r+0xe2>
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	1d19      	adds	r1, r3, #4
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	9103      	str	r1, [sp, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	bfbb      	ittet	lt
 8009498:	425b      	neglt	r3, r3
 800949a:	f042 0202 	orrlt.w	r2, r2, #2
 800949e:	9307      	strge	r3, [sp, #28]
 80094a0:	9307      	strlt	r3, [sp, #28]
 80094a2:	bfb8      	it	lt
 80094a4:	9204      	strlt	r2, [sp, #16]
 80094a6:	7823      	ldrb	r3, [r4, #0]
 80094a8:	2b2e      	cmp	r3, #46	; 0x2e
 80094aa:	d10c      	bne.n	80094c6 <_vfiprintf_r+0x176>
 80094ac:	7863      	ldrb	r3, [r4, #1]
 80094ae:	2b2a      	cmp	r3, #42	; 0x2a
 80094b0:	d135      	bne.n	800951e <_vfiprintf_r+0x1ce>
 80094b2:	9b03      	ldr	r3, [sp, #12]
 80094b4:	1d1a      	adds	r2, r3, #4
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	9203      	str	r2, [sp, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	bfb8      	it	lt
 80094be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094c2:	3402      	adds	r4, #2
 80094c4:	9305      	str	r3, [sp, #20]
 80094c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095ac <_vfiprintf_r+0x25c>
 80094ca:	7821      	ldrb	r1, [r4, #0]
 80094cc:	2203      	movs	r2, #3
 80094ce:	4650      	mov	r0, sl
 80094d0:	f7f6 fe7e 	bl	80001d0 <memchr>
 80094d4:	b140      	cbz	r0, 80094e8 <_vfiprintf_r+0x198>
 80094d6:	2340      	movs	r3, #64	; 0x40
 80094d8:	eba0 000a 	sub.w	r0, r0, sl
 80094dc:	fa03 f000 	lsl.w	r0, r3, r0
 80094e0:	9b04      	ldr	r3, [sp, #16]
 80094e2:	4303      	orrs	r3, r0
 80094e4:	3401      	adds	r4, #1
 80094e6:	9304      	str	r3, [sp, #16]
 80094e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ec:	482c      	ldr	r0, [pc, #176]	; (80095a0 <_vfiprintf_r+0x250>)
 80094ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094f2:	2206      	movs	r2, #6
 80094f4:	f7f6 fe6c 	bl	80001d0 <memchr>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d03f      	beq.n	800957c <_vfiprintf_r+0x22c>
 80094fc:	4b29      	ldr	r3, [pc, #164]	; (80095a4 <_vfiprintf_r+0x254>)
 80094fe:	bb1b      	cbnz	r3, 8009548 <_vfiprintf_r+0x1f8>
 8009500:	9b03      	ldr	r3, [sp, #12]
 8009502:	3307      	adds	r3, #7
 8009504:	f023 0307 	bic.w	r3, r3, #7
 8009508:	3308      	adds	r3, #8
 800950a:	9303      	str	r3, [sp, #12]
 800950c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800950e:	443b      	add	r3, r7
 8009510:	9309      	str	r3, [sp, #36]	; 0x24
 8009512:	e767      	b.n	80093e4 <_vfiprintf_r+0x94>
 8009514:	fb0c 3202 	mla	r2, ip, r2, r3
 8009518:	460c      	mov	r4, r1
 800951a:	2001      	movs	r0, #1
 800951c:	e7a5      	b.n	800946a <_vfiprintf_r+0x11a>
 800951e:	2300      	movs	r3, #0
 8009520:	3401      	adds	r4, #1
 8009522:	9305      	str	r3, [sp, #20]
 8009524:	4619      	mov	r1, r3
 8009526:	f04f 0c0a 	mov.w	ip, #10
 800952a:	4620      	mov	r0, r4
 800952c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009530:	3a30      	subs	r2, #48	; 0x30
 8009532:	2a09      	cmp	r2, #9
 8009534:	d903      	bls.n	800953e <_vfiprintf_r+0x1ee>
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0c5      	beq.n	80094c6 <_vfiprintf_r+0x176>
 800953a:	9105      	str	r1, [sp, #20]
 800953c:	e7c3      	b.n	80094c6 <_vfiprintf_r+0x176>
 800953e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009542:	4604      	mov	r4, r0
 8009544:	2301      	movs	r3, #1
 8009546:	e7f0      	b.n	800952a <_vfiprintf_r+0x1da>
 8009548:	ab03      	add	r3, sp, #12
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	462a      	mov	r2, r5
 800954e:	4b16      	ldr	r3, [pc, #88]	; (80095a8 <_vfiprintf_r+0x258>)
 8009550:	a904      	add	r1, sp, #16
 8009552:	4630      	mov	r0, r6
 8009554:	f3af 8000 	nop.w
 8009558:	4607      	mov	r7, r0
 800955a:	1c78      	adds	r0, r7, #1
 800955c:	d1d6      	bne.n	800950c <_vfiprintf_r+0x1bc>
 800955e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009560:	07d9      	lsls	r1, r3, #31
 8009562:	d405      	bmi.n	8009570 <_vfiprintf_r+0x220>
 8009564:	89ab      	ldrh	r3, [r5, #12]
 8009566:	059a      	lsls	r2, r3, #22
 8009568:	d402      	bmi.n	8009570 <_vfiprintf_r+0x220>
 800956a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800956c:	f7ff feb9 	bl	80092e2 <__retarget_lock_release_recursive>
 8009570:	89ab      	ldrh	r3, [r5, #12]
 8009572:	065b      	lsls	r3, r3, #25
 8009574:	f53f af12 	bmi.w	800939c <_vfiprintf_r+0x4c>
 8009578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800957a:	e711      	b.n	80093a0 <_vfiprintf_r+0x50>
 800957c:	ab03      	add	r3, sp, #12
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	462a      	mov	r2, r5
 8009582:	4b09      	ldr	r3, [pc, #36]	; (80095a8 <_vfiprintf_r+0x258>)
 8009584:	a904      	add	r1, sp, #16
 8009586:	4630      	mov	r0, r6
 8009588:	f000 f880 	bl	800968c <_printf_i>
 800958c:	e7e4      	b.n	8009558 <_vfiprintf_r+0x208>
 800958e:	bf00      	nop
 8009590:	08009e84 	.word	0x08009e84
 8009594:	08009ea4 	.word	0x08009ea4
 8009598:	08009e64 	.word	0x08009e64
 800959c:	08009ec4 	.word	0x08009ec4
 80095a0:	08009ece 	.word	0x08009ece
 80095a4:	00000000 	.word	0x00000000
 80095a8:	0800932b 	.word	0x0800932b
 80095ac:	08009eca 	.word	0x08009eca

080095b0 <_printf_common>:
 80095b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	4616      	mov	r6, r2
 80095b6:	4699      	mov	r9, r3
 80095b8:	688a      	ldr	r2, [r1, #8]
 80095ba:	690b      	ldr	r3, [r1, #16]
 80095bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095c0:	4293      	cmp	r3, r2
 80095c2:	bfb8      	it	lt
 80095c4:	4613      	movlt	r3, r2
 80095c6:	6033      	str	r3, [r6, #0]
 80095c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095cc:	4607      	mov	r7, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	b10a      	cbz	r2, 80095d6 <_printf_common+0x26>
 80095d2:	3301      	adds	r3, #1
 80095d4:	6033      	str	r3, [r6, #0]
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	0699      	lsls	r1, r3, #26
 80095da:	bf42      	ittt	mi
 80095dc:	6833      	ldrmi	r3, [r6, #0]
 80095de:	3302      	addmi	r3, #2
 80095e0:	6033      	strmi	r3, [r6, #0]
 80095e2:	6825      	ldr	r5, [r4, #0]
 80095e4:	f015 0506 	ands.w	r5, r5, #6
 80095e8:	d106      	bne.n	80095f8 <_printf_common+0x48>
 80095ea:	f104 0a19 	add.w	sl, r4, #25
 80095ee:	68e3      	ldr	r3, [r4, #12]
 80095f0:	6832      	ldr	r2, [r6, #0]
 80095f2:	1a9b      	subs	r3, r3, r2
 80095f4:	42ab      	cmp	r3, r5
 80095f6:	dc26      	bgt.n	8009646 <_printf_common+0x96>
 80095f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095fc:	1e13      	subs	r3, r2, #0
 80095fe:	6822      	ldr	r2, [r4, #0]
 8009600:	bf18      	it	ne
 8009602:	2301      	movne	r3, #1
 8009604:	0692      	lsls	r2, r2, #26
 8009606:	d42b      	bmi.n	8009660 <_printf_common+0xb0>
 8009608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800960c:	4649      	mov	r1, r9
 800960e:	4638      	mov	r0, r7
 8009610:	47c0      	blx	r8
 8009612:	3001      	adds	r0, #1
 8009614:	d01e      	beq.n	8009654 <_printf_common+0xa4>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	68e5      	ldr	r5, [r4, #12]
 800961a:	6832      	ldr	r2, [r6, #0]
 800961c:	f003 0306 	and.w	r3, r3, #6
 8009620:	2b04      	cmp	r3, #4
 8009622:	bf08      	it	eq
 8009624:	1aad      	subeq	r5, r5, r2
 8009626:	68a3      	ldr	r3, [r4, #8]
 8009628:	6922      	ldr	r2, [r4, #16]
 800962a:	bf0c      	ite	eq
 800962c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009630:	2500      	movne	r5, #0
 8009632:	4293      	cmp	r3, r2
 8009634:	bfc4      	itt	gt
 8009636:	1a9b      	subgt	r3, r3, r2
 8009638:	18ed      	addgt	r5, r5, r3
 800963a:	2600      	movs	r6, #0
 800963c:	341a      	adds	r4, #26
 800963e:	42b5      	cmp	r5, r6
 8009640:	d11a      	bne.n	8009678 <_printf_common+0xc8>
 8009642:	2000      	movs	r0, #0
 8009644:	e008      	b.n	8009658 <_printf_common+0xa8>
 8009646:	2301      	movs	r3, #1
 8009648:	4652      	mov	r2, sl
 800964a:	4649      	mov	r1, r9
 800964c:	4638      	mov	r0, r7
 800964e:	47c0      	blx	r8
 8009650:	3001      	adds	r0, #1
 8009652:	d103      	bne.n	800965c <_printf_common+0xac>
 8009654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800965c:	3501      	adds	r5, #1
 800965e:	e7c6      	b.n	80095ee <_printf_common+0x3e>
 8009660:	18e1      	adds	r1, r4, r3
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	2030      	movs	r0, #48	; 0x30
 8009666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800966a:	4422      	add	r2, r4
 800966c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009674:	3302      	adds	r3, #2
 8009676:	e7c7      	b.n	8009608 <_printf_common+0x58>
 8009678:	2301      	movs	r3, #1
 800967a:	4622      	mov	r2, r4
 800967c:	4649      	mov	r1, r9
 800967e:	4638      	mov	r0, r7
 8009680:	47c0      	blx	r8
 8009682:	3001      	adds	r0, #1
 8009684:	d0e6      	beq.n	8009654 <_printf_common+0xa4>
 8009686:	3601      	adds	r6, #1
 8009688:	e7d9      	b.n	800963e <_printf_common+0x8e>
	...

0800968c <_printf_i>:
 800968c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009690:	7e0f      	ldrb	r7, [r1, #24]
 8009692:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009694:	2f78      	cmp	r7, #120	; 0x78
 8009696:	4691      	mov	r9, r2
 8009698:	4680      	mov	r8, r0
 800969a:	460c      	mov	r4, r1
 800969c:	469a      	mov	sl, r3
 800969e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096a2:	d807      	bhi.n	80096b4 <_printf_i+0x28>
 80096a4:	2f62      	cmp	r7, #98	; 0x62
 80096a6:	d80a      	bhi.n	80096be <_printf_i+0x32>
 80096a8:	2f00      	cmp	r7, #0
 80096aa:	f000 80d8 	beq.w	800985e <_printf_i+0x1d2>
 80096ae:	2f58      	cmp	r7, #88	; 0x58
 80096b0:	f000 80a3 	beq.w	80097fa <_printf_i+0x16e>
 80096b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096bc:	e03a      	b.n	8009734 <_printf_i+0xa8>
 80096be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096c2:	2b15      	cmp	r3, #21
 80096c4:	d8f6      	bhi.n	80096b4 <_printf_i+0x28>
 80096c6:	a101      	add	r1, pc, #4	; (adr r1, 80096cc <_printf_i+0x40>)
 80096c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096cc:	08009725 	.word	0x08009725
 80096d0:	08009739 	.word	0x08009739
 80096d4:	080096b5 	.word	0x080096b5
 80096d8:	080096b5 	.word	0x080096b5
 80096dc:	080096b5 	.word	0x080096b5
 80096e0:	080096b5 	.word	0x080096b5
 80096e4:	08009739 	.word	0x08009739
 80096e8:	080096b5 	.word	0x080096b5
 80096ec:	080096b5 	.word	0x080096b5
 80096f0:	080096b5 	.word	0x080096b5
 80096f4:	080096b5 	.word	0x080096b5
 80096f8:	08009845 	.word	0x08009845
 80096fc:	08009769 	.word	0x08009769
 8009700:	08009827 	.word	0x08009827
 8009704:	080096b5 	.word	0x080096b5
 8009708:	080096b5 	.word	0x080096b5
 800970c:	08009867 	.word	0x08009867
 8009710:	080096b5 	.word	0x080096b5
 8009714:	08009769 	.word	0x08009769
 8009718:	080096b5 	.word	0x080096b5
 800971c:	080096b5 	.word	0x080096b5
 8009720:	0800982f 	.word	0x0800982f
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	1d1a      	adds	r2, r3, #4
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	602a      	str	r2, [r5, #0]
 800972c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009734:	2301      	movs	r3, #1
 8009736:	e0a3      	b.n	8009880 <_printf_i+0x1f4>
 8009738:	6820      	ldr	r0, [r4, #0]
 800973a:	6829      	ldr	r1, [r5, #0]
 800973c:	0606      	lsls	r6, r0, #24
 800973e:	f101 0304 	add.w	r3, r1, #4
 8009742:	d50a      	bpl.n	800975a <_printf_i+0xce>
 8009744:	680e      	ldr	r6, [r1, #0]
 8009746:	602b      	str	r3, [r5, #0]
 8009748:	2e00      	cmp	r6, #0
 800974a:	da03      	bge.n	8009754 <_printf_i+0xc8>
 800974c:	232d      	movs	r3, #45	; 0x2d
 800974e:	4276      	negs	r6, r6
 8009750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009754:	485e      	ldr	r0, [pc, #376]	; (80098d0 <_printf_i+0x244>)
 8009756:	230a      	movs	r3, #10
 8009758:	e019      	b.n	800978e <_printf_i+0x102>
 800975a:	680e      	ldr	r6, [r1, #0]
 800975c:	602b      	str	r3, [r5, #0]
 800975e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009762:	bf18      	it	ne
 8009764:	b236      	sxthne	r6, r6
 8009766:	e7ef      	b.n	8009748 <_printf_i+0xbc>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	6820      	ldr	r0, [r4, #0]
 800976c:	1d19      	adds	r1, r3, #4
 800976e:	6029      	str	r1, [r5, #0]
 8009770:	0601      	lsls	r1, r0, #24
 8009772:	d501      	bpl.n	8009778 <_printf_i+0xec>
 8009774:	681e      	ldr	r6, [r3, #0]
 8009776:	e002      	b.n	800977e <_printf_i+0xf2>
 8009778:	0646      	lsls	r6, r0, #25
 800977a:	d5fb      	bpl.n	8009774 <_printf_i+0xe8>
 800977c:	881e      	ldrh	r6, [r3, #0]
 800977e:	4854      	ldr	r0, [pc, #336]	; (80098d0 <_printf_i+0x244>)
 8009780:	2f6f      	cmp	r7, #111	; 0x6f
 8009782:	bf0c      	ite	eq
 8009784:	2308      	moveq	r3, #8
 8009786:	230a      	movne	r3, #10
 8009788:	2100      	movs	r1, #0
 800978a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800978e:	6865      	ldr	r5, [r4, #4]
 8009790:	60a5      	str	r5, [r4, #8]
 8009792:	2d00      	cmp	r5, #0
 8009794:	bfa2      	ittt	ge
 8009796:	6821      	ldrge	r1, [r4, #0]
 8009798:	f021 0104 	bicge.w	r1, r1, #4
 800979c:	6021      	strge	r1, [r4, #0]
 800979e:	b90e      	cbnz	r6, 80097a4 <_printf_i+0x118>
 80097a0:	2d00      	cmp	r5, #0
 80097a2:	d04d      	beq.n	8009840 <_printf_i+0x1b4>
 80097a4:	4615      	mov	r5, r2
 80097a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80097aa:	fb03 6711 	mls	r7, r3, r1, r6
 80097ae:	5dc7      	ldrb	r7, [r0, r7]
 80097b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097b4:	4637      	mov	r7, r6
 80097b6:	42bb      	cmp	r3, r7
 80097b8:	460e      	mov	r6, r1
 80097ba:	d9f4      	bls.n	80097a6 <_printf_i+0x11a>
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d10b      	bne.n	80097d8 <_printf_i+0x14c>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	07de      	lsls	r6, r3, #31
 80097c4:	d508      	bpl.n	80097d8 <_printf_i+0x14c>
 80097c6:	6923      	ldr	r3, [r4, #16]
 80097c8:	6861      	ldr	r1, [r4, #4]
 80097ca:	4299      	cmp	r1, r3
 80097cc:	bfde      	ittt	le
 80097ce:	2330      	movle	r3, #48	; 0x30
 80097d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80097d8:	1b52      	subs	r2, r2, r5
 80097da:	6122      	str	r2, [r4, #16]
 80097dc:	f8cd a000 	str.w	sl, [sp]
 80097e0:	464b      	mov	r3, r9
 80097e2:	aa03      	add	r2, sp, #12
 80097e4:	4621      	mov	r1, r4
 80097e6:	4640      	mov	r0, r8
 80097e8:	f7ff fee2 	bl	80095b0 <_printf_common>
 80097ec:	3001      	adds	r0, #1
 80097ee:	d14c      	bne.n	800988a <_printf_i+0x1fe>
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097f4:	b004      	add	sp, #16
 80097f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fa:	4835      	ldr	r0, [pc, #212]	; (80098d0 <_printf_i+0x244>)
 80097fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009800:	6829      	ldr	r1, [r5, #0]
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	f851 6b04 	ldr.w	r6, [r1], #4
 8009808:	6029      	str	r1, [r5, #0]
 800980a:	061d      	lsls	r5, r3, #24
 800980c:	d514      	bpl.n	8009838 <_printf_i+0x1ac>
 800980e:	07df      	lsls	r7, r3, #31
 8009810:	bf44      	itt	mi
 8009812:	f043 0320 	orrmi.w	r3, r3, #32
 8009816:	6023      	strmi	r3, [r4, #0]
 8009818:	b91e      	cbnz	r6, 8009822 <_printf_i+0x196>
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	f023 0320 	bic.w	r3, r3, #32
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	2310      	movs	r3, #16
 8009824:	e7b0      	b.n	8009788 <_printf_i+0xfc>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	f043 0320 	orr.w	r3, r3, #32
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	2378      	movs	r3, #120	; 0x78
 8009830:	4828      	ldr	r0, [pc, #160]	; (80098d4 <_printf_i+0x248>)
 8009832:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009836:	e7e3      	b.n	8009800 <_printf_i+0x174>
 8009838:	0659      	lsls	r1, r3, #25
 800983a:	bf48      	it	mi
 800983c:	b2b6      	uxthmi	r6, r6
 800983e:	e7e6      	b.n	800980e <_printf_i+0x182>
 8009840:	4615      	mov	r5, r2
 8009842:	e7bb      	b.n	80097bc <_printf_i+0x130>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	6826      	ldr	r6, [r4, #0]
 8009848:	6961      	ldr	r1, [r4, #20]
 800984a:	1d18      	adds	r0, r3, #4
 800984c:	6028      	str	r0, [r5, #0]
 800984e:	0635      	lsls	r5, r6, #24
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	d501      	bpl.n	8009858 <_printf_i+0x1cc>
 8009854:	6019      	str	r1, [r3, #0]
 8009856:	e002      	b.n	800985e <_printf_i+0x1d2>
 8009858:	0670      	lsls	r0, r6, #25
 800985a:	d5fb      	bpl.n	8009854 <_printf_i+0x1c8>
 800985c:	8019      	strh	r1, [r3, #0]
 800985e:	2300      	movs	r3, #0
 8009860:	6123      	str	r3, [r4, #16]
 8009862:	4615      	mov	r5, r2
 8009864:	e7ba      	b.n	80097dc <_printf_i+0x150>
 8009866:	682b      	ldr	r3, [r5, #0]
 8009868:	1d1a      	adds	r2, r3, #4
 800986a:	602a      	str	r2, [r5, #0]
 800986c:	681d      	ldr	r5, [r3, #0]
 800986e:	6862      	ldr	r2, [r4, #4]
 8009870:	2100      	movs	r1, #0
 8009872:	4628      	mov	r0, r5
 8009874:	f7f6 fcac 	bl	80001d0 <memchr>
 8009878:	b108      	cbz	r0, 800987e <_printf_i+0x1f2>
 800987a:	1b40      	subs	r0, r0, r5
 800987c:	6060      	str	r0, [r4, #4]
 800987e:	6863      	ldr	r3, [r4, #4]
 8009880:	6123      	str	r3, [r4, #16]
 8009882:	2300      	movs	r3, #0
 8009884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009888:	e7a8      	b.n	80097dc <_printf_i+0x150>
 800988a:	6923      	ldr	r3, [r4, #16]
 800988c:	462a      	mov	r2, r5
 800988e:	4649      	mov	r1, r9
 8009890:	4640      	mov	r0, r8
 8009892:	47d0      	blx	sl
 8009894:	3001      	adds	r0, #1
 8009896:	d0ab      	beq.n	80097f0 <_printf_i+0x164>
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	079b      	lsls	r3, r3, #30
 800989c:	d413      	bmi.n	80098c6 <_printf_i+0x23a>
 800989e:	68e0      	ldr	r0, [r4, #12]
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	4298      	cmp	r0, r3
 80098a4:	bfb8      	it	lt
 80098a6:	4618      	movlt	r0, r3
 80098a8:	e7a4      	b.n	80097f4 <_printf_i+0x168>
 80098aa:	2301      	movs	r3, #1
 80098ac:	4632      	mov	r2, r6
 80098ae:	4649      	mov	r1, r9
 80098b0:	4640      	mov	r0, r8
 80098b2:	47d0      	blx	sl
 80098b4:	3001      	adds	r0, #1
 80098b6:	d09b      	beq.n	80097f0 <_printf_i+0x164>
 80098b8:	3501      	adds	r5, #1
 80098ba:	68e3      	ldr	r3, [r4, #12]
 80098bc:	9903      	ldr	r1, [sp, #12]
 80098be:	1a5b      	subs	r3, r3, r1
 80098c0:	42ab      	cmp	r3, r5
 80098c2:	dcf2      	bgt.n	80098aa <_printf_i+0x21e>
 80098c4:	e7eb      	b.n	800989e <_printf_i+0x212>
 80098c6:	2500      	movs	r5, #0
 80098c8:	f104 0619 	add.w	r6, r4, #25
 80098cc:	e7f5      	b.n	80098ba <_printf_i+0x22e>
 80098ce:	bf00      	nop
 80098d0:	08009ed5 	.word	0x08009ed5
 80098d4:	08009ee6 	.word	0x08009ee6

080098d8 <__sread>:
 80098d8:	b510      	push	{r4, lr}
 80098da:	460c      	mov	r4, r1
 80098dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e0:	f000 fa5a 	bl	8009d98 <_read_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	bfab      	itete	ge
 80098e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ea:	89a3      	ldrhlt	r3, [r4, #12]
 80098ec:	181b      	addge	r3, r3, r0
 80098ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098f2:	bfac      	ite	ge
 80098f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098f6:	81a3      	strhlt	r3, [r4, #12]
 80098f8:	bd10      	pop	{r4, pc}

080098fa <__swrite>:
 80098fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fe:	461f      	mov	r7, r3
 8009900:	898b      	ldrh	r3, [r1, #12]
 8009902:	05db      	lsls	r3, r3, #23
 8009904:	4605      	mov	r5, r0
 8009906:	460c      	mov	r4, r1
 8009908:	4616      	mov	r6, r2
 800990a:	d505      	bpl.n	8009918 <__swrite+0x1e>
 800990c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009910:	2302      	movs	r3, #2
 8009912:	2200      	movs	r2, #0
 8009914:	f000 f9c8 	bl	8009ca8 <_lseek_r>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800991e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	4628      	mov	r0, r5
 800992a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992e:	f000 b869 	b.w	8009a04 <_write_r>

08009932 <__sseek>:
 8009932:	b510      	push	{r4, lr}
 8009934:	460c      	mov	r4, r1
 8009936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993a:	f000 f9b5 	bl	8009ca8 <_lseek_r>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	bf15      	itete	ne
 8009944:	6560      	strne	r0, [r4, #84]	; 0x54
 8009946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800994a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800994e:	81a3      	strheq	r3, [r4, #12]
 8009950:	bf18      	it	ne
 8009952:	81a3      	strhne	r3, [r4, #12]
 8009954:	bd10      	pop	{r4, pc}

08009956 <__sclose>:
 8009956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995a:	f000 b8d3 	b.w	8009b04 <_close_r>
	...

08009960 <__swbuf_r>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	460e      	mov	r6, r1
 8009964:	4614      	mov	r4, r2
 8009966:	4605      	mov	r5, r0
 8009968:	b118      	cbz	r0, 8009972 <__swbuf_r+0x12>
 800996a:	6983      	ldr	r3, [r0, #24]
 800996c:	b90b      	cbnz	r3, 8009972 <__swbuf_r+0x12>
 800996e:	f7ff fc19 	bl	80091a4 <__sinit>
 8009972:	4b21      	ldr	r3, [pc, #132]	; (80099f8 <__swbuf_r+0x98>)
 8009974:	429c      	cmp	r4, r3
 8009976:	d12b      	bne.n	80099d0 <__swbuf_r+0x70>
 8009978:	686c      	ldr	r4, [r5, #4]
 800997a:	69a3      	ldr	r3, [r4, #24]
 800997c:	60a3      	str	r3, [r4, #8]
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	071a      	lsls	r2, r3, #28
 8009982:	d52f      	bpl.n	80099e4 <__swbuf_r+0x84>
 8009984:	6923      	ldr	r3, [r4, #16]
 8009986:	b36b      	cbz	r3, 80099e4 <__swbuf_r+0x84>
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	6820      	ldr	r0, [r4, #0]
 800998c:	1ac0      	subs	r0, r0, r3
 800998e:	6963      	ldr	r3, [r4, #20]
 8009990:	b2f6      	uxtb	r6, r6
 8009992:	4283      	cmp	r3, r0
 8009994:	4637      	mov	r7, r6
 8009996:	dc04      	bgt.n	80099a2 <__swbuf_r+0x42>
 8009998:	4621      	mov	r1, r4
 800999a:	4628      	mov	r0, r5
 800999c:	f000 f948 	bl	8009c30 <_fflush_r>
 80099a0:	bb30      	cbnz	r0, 80099f0 <__swbuf_r+0x90>
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	60a3      	str	r3, [r4, #8]
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	6022      	str	r2, [r4, #0]
 80099ae:	701e      	strb	r6, [r3, #0]
 80099b0:	6963      	ldr	r3, [r4, #20]
 80099b2:	3001      	adds	r0, #1
 80099b4:	4283      	cmp	r3, r0
 80099b6:	d004      	beq.n	80099c2 <__swbuf_r+0x62>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	07db      	lsls	r3, r3, #31
 80099bc:	d506      	bpl.n	80099cc <__swbuf_r+0x6c>
 80099be:	2e0a      	cmp	r6, #10
 80099c0:	d104      	bne.n	80099cc <__swbuf_r+0x6c>
 80099c2:	4621      	mov	r1, r4
 80099c4:	4628      	mov	r0, r5
 80099c6:	f000 f933 	bl	8009c30 <_fflush_r>
 80099ca:	b988      	cbnz	r0, 80099f0 <__swbuf_r+0x90>
 80099cc:	4638      	mov	r0, r7
 80099ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d0:	4b0a      	ldr	r3, [pc, #40]	; (80099fc <__swbuf_r+0x9c>)
 80099d2:	429c      	cmp	r4, r3
 80099d4:	d101      	bne.n	80099da <__swbuf_r+0x7a>
 80099d6:	68ac      	ldr	r4, [r5, #8]
 80099d8:	e7cf      	b.n	800997a <__swbuf_r+0x1a>
 80099da:	4b09      	ldr	r3, [pc, #36]	; (8009a00 <__swbuf_r+0xa0>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	bf08      	it	eq
 80099e0:	68ec      	ldreq	r4, [r5, #12]
 80099e2:	e7ca      	b.n	800997a <__swbuf_r+0x1a>
 80099e4:	4621      	mov	r1, r4
 80099e6:	4628      	mov	r0, r5
 80099e8:	f000 f81e 	bl	8009a28 <__swsetup_r>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d0cb      	beq.n	8009988 <__swbuf_r+0x28>
 80099f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80099f4:	e7ea      	b.n	80099cc <__swbuf_r+0x6c>
 80099f6:	bf00      	nop
 80099f8:	08009e84 	.word	0x08009e84
 80099fc:	08009ea4 	.word	0x08009ea4
 8009a00:	08009e64 	.word	0x08009e64

08009a04 <_write_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4d07      	ldr	r5, [pc, #28]	; (8009a24 <_write_r+0x20>)
 8009a08:	4604      	mov	r4, r0
 8009a0a:	4608      	mov	r0, r1
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	2200      	movs	r2, #0
 8009a10:	602a      	str	r2, [r5, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	f7f6 fdae 	bl	8000574 <_write>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d102      	bne.n	8009a22 <_write_r+0x1e>
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	b103      	cbz	r3, 8009a22 <_write_r+0x1e>
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	bd38      	pop	{r3, r4, r5, pc}
 8009a24:	20000968 	.word	0x20000968

08009a28 <__swsetup_r>:
 8009a28:	4b32      	ldr	r3, [pc, #200]	; (8009af4 <__swsetup_r+0xcc>)
 8009a2a:	b570      	push	{r4, r5, r6, lr}
 8009a2c:	681d      	ldr	r5, [r3, #0]
 8009a2e:	4606      	mov	r6, r0
 8009a30:	460c      	mov	r4, r1
 8009a32:	b125      	cbz	r5, 8009a3e <__swsetup_r+0x16>
 8009a34:	69ab      	ldr	r3, [r5, #24]
 8009a36:	b913      	cbnz	r3, 8009a3e <__swsetup_r+0x16>
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f7ff fbb3 	bl	80091a4 <__sinit>
 8009a3e:	4b2e      	ldr	r3, [pc, #184]	; (8009af8 <__swsetup_r+0xd0>)
 8009a40:	429c      	cmp	r4, r3
 8009a42:	d10f      	bne.n	8009a64 <__swsetup_r+0x3c>
 8009a44:	686c      	ldr	r4, [r5, #4]
 8009a46:	89a3      	ldrh	r3, [r4, #12]
 8009a48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a4c:	0719      	lsls	r1, r3, #28
 8009a4e:	d42c      	bmi.n	8009aaa <__swsetup_r+0x82>
 8009a50:	06dd      	lsls	r5, r3, #27
 8009a52:	d411      	bmi.n	8009a78 <__swsetup_r+0x50>
 8009a54:	2309      	movs	r3, #9
 8009a56:	6033      	str	r3, [r6, #0]
 8009a58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a5c:	81a3      	strh	r3, [r4, #12]
 8009a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a62:	e03e      	b.n	8009ae2 <__swsetup_r+0xba>
 8009a64:	4b25      	ldr	r3, [pc, #148]	; (8009afc <__swsetup_r+0xd4>)
 8009a66:	429c      	cmp	r4, r3
 8009a68:	d101      	bne.n	8009a6e <__swsetup_r+0x46>
 8009a6a:	68ac      	ldr	r4, [r5, #8]
 8009a6c:	e7eb      	b.n	8009a46 <__swsetup_r+0x1e>
 8009a6e:	4b24      	ldr	r3, [pc, #144]	; (8009b00 <__swsetup_r+0xd8>)
 8009a70:	429c      	cmp	r4, r3
 8009a72:	bf08      	it	eq
 8009a74:	68ec      	ldreq	r4, [r5, #12]
 8009a76:	e7e6      	b.n	8009a46 <__swsetup_r+0x1e>
 8009a78:	0758      	lsls	r0, r3, #29
 8009a7a:	d512      	bpl.n	8009aa2 <__swsetup_r+0x7a>
 8009a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a7e:	b141      	cbz	r1, 8009a92 <__swsetup_r+0x6a>
 8009a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a84:	4299      	cmp	r1, r3
 8009a86:	d002      	beq.n	8009a8e <__swsetup_r+0x66>
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f7ff fa2b 	bl	8008ee4 <_free_r>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	6363      	str	r3, [r4, #52]	; 0x34
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a98:	81a3      	strh	r3, [r4, #12]
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	6063      	str	r3, [r4, #4]
 8009a9e:	6923      	ldr	r3, [r4, #16]
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	89a3      	ldrh	r3, [r4, #12]
 8009aa4:	f043 0308 	orr.w	r3, r3, #8
 8009aa8:	81a3      	strh	r3, [r4, #12]
 8009aaa:	6923      	ldr	r3, [r4, #16]
 8009aac:	b94b      	cbnz	r3, 8009ac2 <__swsetup_r+0x9a>
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ab8:	d003      	beq.n	8009ac2 <__swsetup_r+0x9a>
 8009aba:	4621      	mov	r1, r4
 8009abc:	4630      	mov	r0, r6
 8009abe:	f000 f92b 	bl	8009d18 <__smakebuf_r>
 8009ac2:	89a0      	ldrh	r0, [r4, #12]
 8009ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ac8:	f010 0301 	ands.w	r3, r0, #1
 8009acc:	d00a      	beq.n	8009ae4 <__swsetup_r+0xbc>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	60a3      	str	r3, [r4, #8]
 8009ad2:	6963      	ldr	r3, [r4, #20]
 8009ad4:	425b      	negs	r3, r3
 8009ad6:	61a3      	str	r3, [r4, #24]
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	b943      	cbnz	r3, 8009aee <__swsetup_r+0xc6>
 8009adc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ae0:	d1ba      	bne.n	8009a58 <__swsetup_r+0x30>
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	0781      	lsls	r1, r0, #30
 8009ae6:	bf58      	it	pl
 8009ae8:	6963      	ldrpl	r3, [r4, #20]
 8009aea:	60a3      	str	r3, [r4, #8]
 8009aec:	e7f4      	b.n	8009ad8 <__swsetup_r+0xb0>
 8009aee:	2000      	movs	r0, #0
 8009af0:	e7f7      	b.n	8009ae2 <__swsetup_r+0xba>
 8009af2:	bf00      	nop
 8009af4:	2000002c 	.word	0x2000002c
 8009af8:	08009e84 	.word	0x08009e84
 8009afc:	08009ea4 	.word	0x08009ea4
 8009b00:	08009e64 	.word	0x08009e64

08009b04 <_close_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4d06      	ldr	r5, [pc, #24]	; (8009b20 <_close_r+0x1c>)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	4608      	mov	r0, r1
 8009b0e:	602b      	str	r3, [r5, #0]
 8009b10:	f7f7 facf 	bl	80010b2 <_close>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d102      	bne.n	8009b1e <_close_r+0x1a>
 8009b18:	682b      	ldr	r3, [r5, #0]
 8009b1a:	b103      	cbz	r3, 8009b1e <_close_r+0x1a>
 8009b1c:	6023      	str	r3, [r4, #0]
 8009b1e:	bd38      	pop	{r3, r4, r5, pc}
 8009b20:	20000968 	.word	0x20000968

08009b24 <__sflush_r>:
 8009b24:	898a      	ldrh	r2, [r1, #12]
 8009b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	0710      	lsls	r0, r2, #28
 8009b2e:	460c      	mov	r4, r1
 8009b30:	d458      	bmi.n	8009be4 <__sflush_r+0xc0>
 8009b32:	684b      	ldr	r3, [r1, #4]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dc05      	bgt.n	8009b44 <__sflush_r+0x20>
 8009b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	dc02      	bgt.n	8009b44 <__sflush_r+0x20>
 8009b3e:	2000      	movs	r0, #0
 8009b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	d0f9      	beq.n	8009b3e <__sflush_r+0x1a>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b50:	682f      	ldr	r7, [r5, #0]
 8009b52:	602b      	str	r3, [r5, #0]
 8009b54:	d032      	beq.n	8009bbc <__sflush_r+0x98>
 8009b56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	075a      	lsls	r2, r3, #29
 8009b5c:	d505      	bpl.n	8009b6a <__sflush_r+0x46>
 8009b5e:	6863      	ldr	r3, [r4, #4]
 8009b60:	1ac0      	subs	r0, r0, r3
 8009b62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b64:	b10b      	cbz	r3, 8009b6a <__sflush_r+0x46>
 8009b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b68:	1ac0      	subs	r0, r0, r3
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b70:	6a21      	ldr	r1, [r4, #32]
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b0      	blx	r6
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	d106      	bne.n	8009b8a <__sflush_r+0x66>
 8009b7c:	6829      	ldr	r1, [r5, #0]
 8009b7e:	291d      	cmp	r1, #29
 8009b80:	d82c      	bhi.n	8009bdc <__sflush_r+0xb8>
 8009b82:	4a2a      	ldr	r2, [pc, #168]	; (8009c2c <__sflush_r+0x108>)
 8009b84:	40ca      	lsrs	r2, r1
 8009b86:	07d6      	lsls	r6, r2, #31
 8009b88:	d528      	bpl.n	8009bdc <__sflush_r+0xb8>
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	6062      	str	r2, [r4, #4]
 8009b8e:	04d9      	lsls	r1, r3, #19
 8009b90:	6922      	ldr	r2, [r4, #16]
 8009b92:	6022      	str	r2, [r4, #0]
 8009b94:	d504      	bpl.n	8009ba0 <__sflush_r+0x7c>
 8009b96:	1c42      	adds	r2, r0, #1
 8009b98:	d101      	bne.n	8009b9e <__sflush_r+0x7a>
 8009b9a:	682b      	ldr	r3, [r5, #0]
 8009b9c:	b903      	cbnz	r3, 8009ba0 <__sflush_r+0x7c>
 8009b9e:	6560      	str	r0, [r4, #84]	; 0x54
 8009ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ba2:	602f      	str	r7, [r5, #0]
 8009ba4:	2900      	cmp	r1, #0
 8009ba6:	d0ca      	beq.n	8009b3e <__sflush_r+0x1a>
 8009ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bac:	4299      	cmp	r1, r3
 8009bae:	d002      	beq.n	8009bb6 <__sflush_r+0x92>
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f7ff f997 	bl	8008ee4 <_free_r>
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8009bba:	e7c1      	b.n	8009b40 <__sflush_r+0x1c>
 8009bbc:	6a21      	ldr	r1, [r4, #32]
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	47b0      	blx	r6
 8009bc4:	1c41      	adds	r1, r0, #1
 8009bc6:	d1c7      	bne.n	8009b58 <__sflush_r+0x34>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0c4      	beq.n	8009b58 <__sflush_r+0x34>
 8009bce:	2b1d      	cmp	r3, #29
 8009bd0:	d001      	beq.n	8009bd6 <__sflush_r+0xb2>
 8009bd2:	2b16      	cmp	r3, #22
 8009bd4:	d101      	bne.n	8009bda <__sflush_r+0xb6>
 8009bd6:	602f      	str	r7, [r5, #0]
 8009bd8:	e7b1      	b.n	8009b3e <__sflush_r+0x1a>
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009be0:	81a3      	strh	r3, [r4, #12]
 8009be2:	e7ad      	b.n	8009b40 <__sflush_r+0x1c>
 8009be4:	690f      	ldr	r7, [r1, #16]
 8009be6:	2f00      	cmp	r7, #0
 8009be8:	d0a9      	beq.n	8009b3e <__sflush_r+0x1a>
 8009bea:	0793      	lsls	r3, r2, #30
 8009bec:	680e      	ldr	r6, [r1, #0]
 8009bee:	bf08      	it	eq
 8009bf0:	694b      	ldreq	r3, [r1, #20]
 8009bf2:	600f      	str	r7, [r1, #0]
 8009bf4:	bf18      	it	ne
 8009bf6:	2300      	movne	r3, #0
 8009bf8:	eba6 0807 	sub.w	r8, r6, r7
 8009bfc:	608b      	str	r3, [r1, #8]
 8009bfe:	f1b8 0f00 	cmp.w	r8, #0
 8009c02:	dd9c      	ble.n	8009b3e <__sflush_r+0x1a>
 8009c04:	6a21      	ldr	r1, [r4, #32]
 8009c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c08:	4643      	mov	r3, r8
 8009c0a:	463a      	mov	r2, r7
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	47b0      	blx	r6
 8009c10:	2800      	cmp	r0, #0
 8009c12:	dc06      	bgt.n	8009c22 <__sflush_r+0xfe>
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c1a:	81a3      	strh	r3, [r4, #12]
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c20:	e78e      	b.n	8009b40 <__sflush_r+0x1c>
 8009c22:	4407      	add	r7, r0
 8009c24:	eba8 0800 	sub.w	r8, r8, r0
 8009c28:	e7e9      	b.n	8009bfe <__sflush_r+0xda>
 8009c2a:	bf00      	nop
 8009c2c:	20400001 	.word	0x20400001

08009c30 <_fflush_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	690b      	ldr	r3, [r1, #16]
 8009c34:	4605      	mov	r5, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	b913      	cbnz	r3, 8009c40 <_fflush_r+0x10>
 8009c3a:	2500      	movs	r5, #0
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	b118      	cbz	r0, 8009c4a <_fflush_r+0x1a>
 8009c42:	6983      	ldr	r3, [r0, #24]
 8009c44:	b90b      	cbnz	r3, 8009c4a <_fflush_r+0x1a>
 8009c46:	f7ff faad 	bl	80091a4 <__sinit>
 8009c4a:	4b14      	ldr	r3, [pc, #80]	; (8009c9c <_fflush_r+0x6c>)
 8009c4c:	429c      	cmp	r4, r3
 8009c4e:	d11b      	bne.n	8009c88 <_fflush_r+0x58>
 8009c50:	686c      	ldr	r4, [r5, #4]
 8009c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d0ef      	beq.n	8009c3a <_fflush_r+0xa>
 8009c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c5c:	07d0      	lsls	r0, r2, #31
 8009c5e:	d404      	bmi.n	8009c6a <_fflush_r+0x3a>
 8009c60:	0599      	lsls	r1, r3, #22
 8009c62:	d402      	bmi.n	8009c6a <_fflush_r+0x3a>
 8009c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c66:	f7ff fb3b 	bl	80092e0 <__retarget_lock_acquire_recursive>
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	f7ff ff59 	bl	8009b24 <__sflush_r>
 8009c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c74:	07da      	lsls	r2, r3, #31
 8009c76:	4605      	mov	r5, r0
 8009c78:	d4e0      	bmi.n	8009c3c <_fflush_r+0xc>
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	059b      	lsls	r3, r3, #22
 8009c7e:	d4dd      	bmi.n	8009c3c <_fflush_r+0xc>
 8009c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c82:	f7ff fb2e 	bl	80092e2 <__retarget_lock_release_recursive>
 8009c86:	e7d9      	b.n	8009c3c <_fflush_r+0xc>
 8009c88:	4b05      	ldr	r3, [pc, #20]	; (8009ca0 <_fflush_r+0x70>)
 8009c8a:	429c      	cmp	r4, r3
 8009c8c:	d101      	bne.n	8009c92 <_fflush_r+0x62>
 8009c8e:	68ac      	ldr	r4, [r5, #8]
 8009c90:	e7df      	b.n	8009c52 <_fflush_r+0x22>
 8009c92:	4b04      	ldr	r3, [pc, #16]	; (8009ca4 <_fflush_r+0x74>)
 8009c94:	429c      	cmp	r4, r3
 8009c96:	bf08      	it	eq
 8009c98:	68ec      	ldreq	r4, [r5, #12]
 8009c9a:	e7da      	b.n	8009c52 <_fflush_r+0x22>
 8009c9c:	08009e84 	.word	0x08009e84
 8009ca0:	08009ea4 	.word	0x08009ea4
 8009ca4:	08009e64 	.word	0x08009e64

08009ca8 <_lseek_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d07      	ldr	r5, [pc, #28]	; (8009cc8 <_lseek_r+0x20>)
 8009cac:	4604      	mov	r4, r0
 8009cae:	4608      	mov	r0, r1
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	602a      	str	r2, [r5, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f7f7 fa22 	bl	8001100 <_lseek>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_lseek_r+0x1e>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_lseek_r+0x1e>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	20000968 	.word	0x20000968

08009ccc <__swhatbuf_r>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	460e      	mov	r6, r1
 8009cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	b096      	sub	sp, #88	; 0x58
 8009cd8:	4614      	mov	r4, r2
 8009cda:	461d      	mov	r5, r3
 8009cdc:	da08      	bge.n	8009cf0 <__swhatbuf_r+0x24>
 8009cde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	602a      	str	r2, [r5, #0]
 8009ce6:	061a      	lsls	r2, r3, #24
 8009ce8:	d410      	bmi.n	8009d0c <__swhatbuf_r+0x40>
 8009cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cee:	e00e      	b.n	8009d0e <__swhatbuf_r+0x42>
 8009cf0:	466a      	mov	r2, sp
 8009cf2:	f000 f863 	bl	8009dbc <_fstat_r>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	dbf1      	blt.n	8009cde <__swhatbuf_r+0x12>
 8009cfa:	9a01      	ldr	r2, [sp, #4]
 8009cfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d04:	425a      	negs	r2, r3
 8009d06:	415a      	adcs	r2, r3
 8009d08:	602a      	str	r2, [r5, #0]
 8009d0a:	e7ee      	b.n	8009cea <__swhatbuf_r+0x1e>
 8009d0c:	2340      	movs	r3, #64	; 0x40
 8009d0e:	2000      	movs	r0, #0
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	b016      	add	sp, #88	; 0x58
 8009d14:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d18 <__smakebuf_r>:
 8009d18:	898b      	ldrh	r3, [r1, #12]
 8009d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d1c:	079d      	lsls	r5, r3, #30
 8009d1e:	4606      	mov	r6, r0
 8009d20:	460c      	mov	r4, r1
 8009d22:	d507      	bpl.n	8009d34 <__smakebuf_r+0x1c>
 8009d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	6123      	str	r3, [r4, #16]
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	6163      	str	r3, [r4, #20]
 8009d30:	b002      	add	sp, #8
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	ab01      	add	r3, sp, #4
 8009d36:	466a      	mov	r2, sp
 8009d38:	f7ff ffc8 	bl	8009ccc <__swhatbuf_r>
 8009d3c:	9900      	ldr	r1, [sp, #0]
 8009d3e:	4605      	mov	r5, r0
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7ff f93b 	bl	8008fbc <_malloc_r>
 8009d46:	b948      	cbnz	r0, 8009d5c <__smakebuf_r+0x44>
 8009d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d4c:	059a      	lsls	r2, r3, #22
 8009d4e:	d4ef      	bmi.n	8009d30 <__smakebuf_r+0x18>
 8009d50:	f023 0303 	bic.w	r3, r3, #3
 8009d54:	f043 0302 	orr.w	r3, r3, #2
 8009d58:	81a3      	strh	r3, [r4, #12]
 8009d5a:	e7e3      	b.n	8009d24 <__smakebuf_r+0xc>
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	; (8009d94 <__smakebuf_r+0x7c>)
 8009d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	6020      	str	r0, [r4, #0]
 8009d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	9b00      	ldr	r3, [sp, #0]
 8009d6c:	6163      	str	r3, [r4, #20]
 8009d6e:	9b01      	ldr	r3, [sp, #4]
 8009d70:	6120      	str	r0, [r4, #16]
 8009d72:	b15b      	cbz	r3, 8009d8c <__smakebuf_r+0x74>
 8009d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d78:	4630      	mov	r0, r6
 8009d7a:	f000 f831 	bl	8009de0 <_isatty_r>
 8009d7e:	b128      	cbz	r0, 8009d8c <__smakebuf_r+0x74>
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	f023 0303 	bic.w	r3, r3, #3
 8009d86:	f043 0301 	orr.w	r3, r3, #1
 8009d8a:	81a3      	strh	r3, [r4, #12]
 8009d8c:	89a0      	ldrh	r0, [r4, #12]
 8009d8e:	4305      	orrs	r5, r0
 8009d90:	81a5      	strh	r5, [r4, #12]
 8009d92:	e7cd      	b.n	8009d30 <__smakebuf_r+0x18>
 8009d94:	0800913d 	.word	0x0800913d

08009d98 <_read_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4d07      	ldr	r5, [pc, #28]	; (8009db8 <_read_r+0x20>)
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	4608      	mov	r0, r1
 8009da0:	4611      	mov	r1, r2
 8009da2:	2200      	movs	r2, #0
 8009da4:	602a      	str	r2, [r5, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	f7f7 f966 	bl	8001078 <_read>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_read_r+0x1e>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_read_r+0x1e>
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	20000968 	.word	0x20000968

08009dbc <_fstat_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	4d07      	ldr	r5, [pc, #28]	; (8009ddc <_fstat_r+0x20>)
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	4608      	mov	r0, r1
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	602b      	str	r3, [r5, #0]
 8009dca:	f7f7 f97e 	bl	80010ca <_fstat>
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	d102      	bne.n	8009dd8 <_fstat_r+0x1c>
 8009dd2:	682b      	ldr	r3, [r5, #0]
 8009dd4:	b103      	cbz	r3, 8009dd8 <_fstat_r+0x1c>
 8009dd6:	6023      	str	r3, [r4, #0]
 8009dd8:	bd38      	pop	{r3, r4, r5, pc}
 8009dda:	bf00      	nop
 8009ddc:	20000968 	.word	0x20000968

08009de0 <_isatty_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d06      	ldr	r5, [pc, #24]	; (8009dfc <_isatty_r+0x1c>)
 8009de4:	2300      	movs	r3, #0
 8009de6:	4604      	mov	r4, r0
 8009de8:	4608      	mov	r0, r1
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	f7f7 f97d 	bl	80010ea <_isatty>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d102      	bne.n	8009dfa <_isatty_r+0x1a>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b103      	cbz	r3, 8009dfa <_isatty_r+0x1a>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	20000968 	.word	0x20000968

08009e00 <_init>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	bf00      	nop
 8009e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e06:	bc08      	pop	{r3}
 8009e08:	469e      	mov	lr, r3
 8009e0a:	4770      	bx	lr

08009e0c <_fini>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	bf00      	nop
 8009e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e12:	bc08      	pop	{r3}
 8009e14:	469e      	mov	lr, r3
 8009e16:	4770      	bx	lr
